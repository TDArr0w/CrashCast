(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === 'object' && typeof module === 'object')
    module.exports = factory();
  else if (typeof define === 'function' && define.amd) define([], factory);
        else if (typeof exports === 'object') exports['deck'] = factory();
  else root['deck'] = factory();})(globalThis, function () {
"use strict";
var __exports__ = (() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __require = /* @__PURE__ */ ((x4) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x4, {
    get: (a6, b4) => (typeof require !== "undefined" ? require : a6)[b4]
  }) : x4)(function(x4) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x4 + '" is not supported');
  });
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod3) => function __require2() {
    return mod3 || (0, cb[__getOwnPropNames(cb)[0]])((mod3 = { exports: {} }).exports, mod3), mod3.exports;
  };
  var __export = (target2, all) => {
    for (var name13 in all)
      __defProp(target2, name13, { get: all[name13], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod3, isNodeMode, target2) => (target2 = mod3 != null ? __create(__getProtoOf(mod3)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod3 || !mod3.__esModule ? __defProp(target2, "default", { value: mod3, enumerable: true }) : target2,
    mod3
  ));
  var __toCommonJS = (mod3) => __copyProps(__defProp({}, "__esModule", { value: true }), mod3);
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };

  // ../../node_modules/@probe.gl/env/dist/lib/globals.js
  var window_2, document_2, process_, console_, navigator_;
  var init_globals = __esm({
    "../../node_modules/@probe.gl/env/dist/lib/globals.js"() {
      window_2 = globalThis;
      document_2 = globalThis.document || {};
      process_ = globalThis.process || {};
      console_ = globalThis.console;
      navigator_ = globalThis.navigator || {};
    }
  });

  // ../../node_modules/@probe.gl/env/dist/lib/is-electron.js
  function isElectron(mockUserAgent) {
    if (typeof window !== "undefined" && window.process?.type === "renderer") {
      return true;
    }
    if (typeof process !== "undefined" && Boolean(process.versions?.["electron"])) {
      return true;
    }
    const realUserAgent = typeof navigator !== "undefined" && navigator.userAgent;
    const userAgent2 = mockUserAgent || realUserAgent;
    return Boolean(userAgent2 && userAgent2.indexOf("Electron") >= 0);
  }
  var init_is_electron = __esm({
    "../../node_modules/@probe.gl/env/dist/lib/is-electron.js"() {
    }
  });

  // ../../node_modules/@probe.gl/env/dist/lib/is-browser.js
  function isBrowser2() {
    const isNode = (
      // @ts-expect-error
      typeof process === "object" && String(process) === "[object process]" && !process?.browser
    );
    return !isNode || isElectron();
  }
  var init_is_browser = __esm({
    "../../node_modules/@probe.gl/env/dist/lib/is-browser.js"() {
      init_is_electron();
    }
  });

  // ../../node_modules/@probe.gl/env/dist/lib/get-browser.js
  function getBrowser(mockUserAgent) {
    if (!mockUserAgent && !isBrowser2()) {
      return "Node";
    }
    if (isElectron(mockUserAgent)) {
      return "Electron";
    }
    const userAgent2 = mockUserAgent || navigator_.userAgent || "";
    if (userAgent2.indexOf("Edge") > -1) {
      return "Edge";
    }
    if (globalThis.chrome) {
      return "Chrome";
    }
    if (globalThis.safari) {
      return "Safari";
    }
    if (globalThis.mozInnerScreenX) {
      return "Firefox";
    }
    return "Unknown";
  }
  var init_get_browser = __esm({
    "../../node_modules/@probe.gl/env/dist/lib/get-browser.js"() {
      init_is_browser();
      init_is_electron();
      init_globals();
    }
  });

  // ../../node_modules/@probe.gl/env/dist/index.js
  var VERSION;
  var init_dist = __esm({
    "../../node_modules/@probe.gl/env/dist/index.js"() {
      init_globals();
      init_is_browser();
      init_get_browser();
      VERSION = true ? "4.1.0" : "untranspiled source";
    }
  });

  // ../../node_modules/@probe.gl/log/dist/utils/local-storage.js
  function getStorage(type) {
    try {
      const storage = window[type];
      const x4 = "__storage_test__";
      storage.setItem(x4, x4);
      storage.removeItem(x4);
      return storage;
    } catch (e6) {
      return null;
    }
  }
  var LocalStorage;
  var init_local_storage = __esm({
    "../../node_modules/@probe.gl/log/dist/utils/local-storage.js"() {
      LocalStorage = class {
        constructor(id, defaultConfig, type = "sessionStorage") {
          this.storage = getStorage(type);
          this.id = id;
          this.config = defaultConfig;
          this._loadConfiguration();
        }
        getConfiguration() {
          return this.config;
        }
        setConfiguration(configuration) {
          Object.assign(this.config, configuration);
          if (this.storage) {
            const serialized = JSON.stringify(this.config);
            this.storage.setItem(this.id, serialized);
          }
        }
        // Get config from persistent store, if available
        _loadConfiguration() {
          let configuration = {};
          if (this.storage) {
            const serializedConfiguration = this.storage.getItem(this.id);
            configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};
          }
          Object.assign(this.config, configuration);
          return this;
        }
      };
    }
  });

  // ../../node_modules/@probe.gl/log/dist/utils/formatters.js
  function formatTime(ms) {
    let formatted;
    if (ms < 10) {
      formatted = `${ms.toFixed(2)}ms`;
    } else if (ms < 100) {
      formatted = `${ms.toFixed(1)}ms`;
    } else if (ms < 1e3) {
      formatted = `${ms.toFixed(0)}ms`;
    } else {
      formatted = `${(ms / 1e3).toFixed(2)}s`;
    }
    return formatted;
  }
  function leftPad(string, length17 = 8) {
    const padLength = Math.max(length17 - string.length, 0);
    return `${" ".repeat(padLength)}${string}`;
  }
  var init_formatters = __esm({
    "../../node_modules/@probe.gl/log/dist/utils/formatters.js"() {
    }
  });

  // ../../node_modules/@probe.gl/log/dist/utils/color.js
  function getColor(color) {
    if (typeof color !== "string") {
      return color;
    }
    color = color.toUpperCase();
    return COLOR[color] || COLOR.WHITE;
  }
  function addColor(string, color, background) {
    if (!isBrowser2 && typeof string === "string") {
      if (color) {
        const colorCode = getColor(color);
        string = `\x1B[${colorCode}m${string}\x1B[39m`;
      }
      if (background) {
        const colorCode = getColor(background);
        string = `\x1B[${colorCode + BACKGROUND_INCREMENT}m${string}\x1B[49m`;
      }
    }
    return string;
  }
  var COLOR, BACKGROUND_INCREMENT;
  var init_color = __esm({
    "../../node_modules/@probe.gl/log/dist/utils/color.js"() {
      init_dist();
      (function(COLOR2) {
        COLOR2[COLOR2["BLACK"] = 30] = "BLACK";
        COLOR2[COLOR2["RED"] = 31] = "RED";
        COLOR2[COLOR2["GREEN"] = 32] = "GREEN";
        COLOR2[COLOR2["YELLOW"] = 33] = "YELLOW";
        COLOR2[COLOR2["BLUE"] = 34] = "BLUE";
        COLOR2[COLOR2["MAGENTA"] = 35] = "MAGENTA";
        COLOR2[COLOR2["CYAN"] = 36] = "CYAN";
        COLOR2[COLOR2["WHITE"] = 37] = "WHITE";
        COLOR2[COLOR2["BRIGHT_BLACK"] = 90] = "BRIGHT_BLACK";
        COLOR2[COLOR2["BRIGHT_RED"] = 91] = "BRIGHT_RED";
        COLOR2[COLOR2["BRIGHT_GREEN"] = 92] = "BRIGHT_GREEN";
        COLOR2[COLOR2["BRIGHT_YELLOW"] = 93] = "BRIGHT_YELLOW";
        COLOR2[COLOR2["BRIGHT_BLUE"] = 94] = "BRIGHT_BLUE";
        COLOR2[COLOR2["BRIGHT_MAGENTA"] = 95] = "BRIGHT_MAGENTA";
        COLOR2[COLOR2["BRIGHT_CYAN"] = 96] = "BRIGHT_CYAN";
        COLOR2[COLOR2["BRIGHT_WHITE"] = 97] = "BRIGHT_WHITE";
      })(COLOR || (COLOR = {}));
      BACKGROUND_INCREMENT = 10;
    }
  });

  // ../../node_modules/@probe.gl/log/dist/utils/autobind.js
  function autobind(obj, predefined = ["constructor"]) {
    const proto = Object.getPrototypeOf(obj);
    const propNames = Object.getOwnPropertyNames(proto);
    const object = obj;
    for (const key of propNames) {
      const value = object[key];
      if (typeof value === "function") {
        if (!predefined.find((name13) => key === name13)) {
          object[key] = value.bind(obj);
        }
      }
    }
  }
  var init_autobind = __esm({
    "../../node_modules/@probe.gl/log/dist/utils/autobind.js"() {
    }
  });

  // ../../node_modules/@probe.gl/log/dist/utils/assert.js
  function assert3(condition, message2) {
    if (!condition) {
      throw new Error(message2 || "Assertion failed");
    }
  }
  var init_assert = __esm({
    "../../node_modules/@probe.gl/log/dist/utils/assert.js"() {
    }
  });

  // ../../node_modules/@probe.gl/log/dist/utils/hi-res-timestamp.js
  function getHiResTimestamp() {
    let timestamp;
    if (isBrowser2() && window_2.performance) {
      timestamp = window_2?.performance?.now?.();
    } else if ("hrtime" in process_) {
      const timeParts = process_?.hrtime?.();
      timestamp = timeParts[0] * 1e3 + timeParts[1] / 1e6;
    } else {
      timestamp = Date.now();
    }
    return timestamp;
  }
  var init_hi_res_timestamp = __esm({
    "../../node_modules/@probe.gl/log/dist/utils/hi-res-timestamp.js"() {
      init_dist();
    }
  });

  // ../../node_modules/@probe.gl/log/dist/log.js
  function noop() {
  }
  function normalizeLogLevel(logLevel) {
    if (!logLevel) {
      return 0;
    }
    let resolvedLevel;
    switch (typeof logLevel) {
      case "number":
        resolvedLevel = logLevel;
        break;
      case "object":
        resolvedLevel = logLevel.logLevel || logLevel.priority || 0;
        break;
      default:
        return 0;
    }
    assert3(Number.isFinite(resolvedLevel) && resolvedLevel >= 0);
    return resolvedLevel;
  }
  function normalizeArguments(opts) {
    const { logLevel, message: message2 } = opts;
    opts.logLevel = normalizeLogLevel(logLevel);
    const args = opts.args ? Array.from(opts.args) : [];
    while (args.length && args.shift() !== message2) {
    }
    switch (typeof logLevel) {
      case "string":
      case "function":
        if (message2 !== void 0) {
          args.unshift(message2);
        }
        opts.message = logLevel;
        break;
      case "object":
        Object.assign(opts, logLevel);
        break;
      default:
    }
    if (typeof opts.message === "function") {
      opts.message = opts.message();
    }
    const messageType = typeof opts.message;
    assert3(messageType === "string" || messageType === "object");
    return Object.assign(opts, { args }, opts.opts);
  }
  function decorateMessage(id, message2, opts) {
    if (typeof message2 === "string") {
      const time = opts.time ? leftPad(formatTime(opts.total)) : "";
      message2 = opts.time ? `${id}: ${time}  ${message2}` : `${id}: ${message2}`;
      message2 = addColor(message2, opts.color, opts.background);
    }
    return message2;
  }
  function getTableHeader(table) {
    for (const key in table) {
      for (const title in table[key]) {
        return title || "untitled";
      }
    }
    return "empty";
  }
  var originalConsole, DEFAULT_LOG_CONFIGURATION, cache, ONCE, Log;
  var init_log = __esm({
    "../../node_modules/@probe.gl/log/dist/log.js"() {
      init_dist();
      init_local_storage();
      init_formatters();
      init_color();
      init_autobind();
      init_assert();
      init_hi_res_timestamp();
      originalConsole = {
        debug: isBrowser2() ? console.debug || console.log : console.log,
        log: console.log,
        info: console.info,
        warn: console.warn,
        error: console.error
      };
      DEFAULT_LOG_CONFIGURATION = {
        enabled: true,
        level: 0
      };
      cache = {};
      ONCE = { once: true };
      Log = class {
        constructor({ id } = { id: "" }) {
          this.VERSION = VERSION;
          this._startTs = getHiResTimestamp();
          this._deltaTs = getHiResTimestamp();
          this.userData = {};
          this.LOG_THROTTLE_TIMEOUT = 0;
          this.id = id;
          this.userData = {};
          this._storage = new LocalStorage(`__probe-${this.id}__`, DEFAULT_LOG_CONFIGURATION);
          this.timeStamp(`${this.id} started`);
          autobind(this);
          Object.seal(this);
        }
        set level(newLevel) {
          this.setLevel(newLevel);
        }
        get level() {
          return this.getLevel();
        }
        isEnabled() {
          return this._storage.config.enabled;
        }
        getLevel() {
          return this._storage.config.level;
        }
        /** @return milliseconds, with fractions */
        getTotal() {
          return Number((getHiResTimestamp() - this._startTs).toPrecision(10));
        }
        /** @return milliseconds, with fractions */
        getDelta() {
          return Number((getHiResTimestamp() - this._deltaTs).toPrecision(10));
        }
        /** @deprecated use logLevel */
        set priority(newPriority) {
          this.level = newPriority;
        }
        /** @deprecated use logLevel */
        get priority() {
          return this.level;
        }
        /** @deprecated use logLevel */
        getPriority() {
          return this.level;
        }
        // Configure
        enable(enabled = true) {
          this._storage.setConfiguration({ enabled });
          return this;
        }
        setLevel(level) {
          this._storage.setConfiguration({ level });
          return this;
        }
        /** return the current status of the setting */
        get(setting) {
          return this._storage.config[setting];
        }
        // update the status of the setting
        set(setting, value) {
          this._storage.setConfiguration({ [setting]: value });
        }
        /** Logs the current settings as a table */
        settings() {
          if (console.table) {
            console.table(this._storage.config);
          } else {
            console.log(this._storage.config);
          }
        }
        // Unconditional logging
        assert(condition, message2) {
          if (!condition) {
            throw new Error(message2 || "Assertion failed");
          }
        }
        warn(message2) {
          return this._getLogFunction(0, message2, originalConsole.warn, arguments, ONCE);
        }
        error(message2) {
          return this._getLogFunction(0, message2, originalConsole.error, arguments);
        }
        /** Print a deprecation warning */
        deprecated(oldUsage, newUsage) {
          return this.warn(`\`${oldUsage}\` is deprecated and will be removed in a later version. Use \`${newUsage}\` instead`);
        }
        /** Print a removal warning */
        removed(oldUsage, newUsage) {
          return this.error(`\`${oldUsage}\` has been removed. Use \`${newUsage}\` instead`);
        }
        probe(logLevel, message2) {
          return this._getLogFunction(logLevel, message2, originalConsole.log, arguments, {
            time: true,
            once: true
          });
        }
        log(logLevel, message2) {
          return this._getLogFunction(logLevel, message2, originalConsole.debug, arguments);
        }
        info(logLevel, message2) {
          return this._getLogFunction(logLevel, message2, console.info, arguments);
        }
        once(logLevel, message2) {
          return this._getLogFunction(logLevel, message2, originalConsole.debug || originalConsole.info, arguments, ONCE);
        }
        /** Logs an object as a table */
        table(logLevel, table, columns) {
          if (table) {
            return this._getLogFunction(logLevel, table, console.table || noop, columns && [columns], {
              tag: getTableHeader(table)
            });
          }
          return noop;
        }
        time(logLevel, message2) {
          return this._getLogFunction(logLevel, message2, console.time ? console.time : console.info);
        }
        timeEnd(logLevel, message2) {
          return this._getLogFunction(logLevel, message2, console.timeEnd ? console.timeEnd : console.info);
        }
        timeStamp(logLevel, message2) {
          return this._getLogFunction(logLevel, message2, console.timeStamp || noop);
        }
        group(logLevel, message2, opts = { collapsed: false }) {
          const options = normalizeArguments({ logLevel, message: message2, opts });
          const { collapsed } = opts;
          options.method = (collapsed ? console.groupCollapsed : console.group) || console.info;
          return this._getLogFunction(options);
        }
        groupCollapsed(logLevel, message2, opts = {}) {
          return this.group(logLevel, message2, Object.assign({}, opts, { collapsed: true }));
        }
        groupEnd(logLevel) {
          return this._getLogFunction(logLevel, "", console.groupEnd || noop);
        }
        // EXPERIMENTAL
        withGroup(logLevel, message2, func) {
          this.group(logLevel, message2)();
          try {
            func();
          } finally {
            this.groupEnd(logLevel)();
          }
        }
        trace() {
          if (console.trace) {
            console.trace();
          }
        }
        // PRIVATE METHODS
        /** Deduces log level from a variety of arguments */
        _shouldLog(logLevel) {
          return this.isEnabled() && this.getLevel() >= normalizeLogLevel(logLevel);
        }
        _getLogFunction(logLevel, message2, method, args, opts) {
          if (this._shouldLog(logLevel)) {
            opts = normalizeArguments({ logLevel, message: message2, args, opts });
            method = method || opts.method;
            assert3(method);
            opts.total = this.getTotal();
            opts.delta = this.getDelta();
            this._deltaTs = getHiResTimestamp();
            const tag = opts.tag || opts.message;
            if (opts.once && tag) {
              if (!cache[tag]) {
                cache[tag] = getHiResTimestamp();
              } else {
                return noop;
              }
            }
            message2 = decorateMessage(this.id, opts.message, opts);
            return method.bind(console, message2, ...opts.args);
          }
          return noop;
        }
      };
      Log.VERSION = VERSION;
    }
  });

  // ../../node_modules/@probe.gl/log/dist/init.js
  var init_init = __esm({
    "../../node_modules/@probe.gl/log/dist/init.js"() {
      globalThis.probe = {};
    }
  });

  // ../../node_modules/@probe.gl/log/dist/index.js
  var dist_default;
  var init_dist2 = __esm({
    "../../node_modules/@probe.gl/log/dist/index.js"() {
      init_log();
      init_log();
      init_init();
      dist_default = new Log({ id: "@probe.gl/log" });
    }
  });

  // ../../node_modules/@probe.gl/stats/dist/utils/hi-res-timestamp.js
  function getHiResTimestamp2() {
    let timestamp;
    if (typeof window !== "undefined" && window.performance) {
      timestamp = window.performance.now();
    } else if (typeof process !== "undefined" && process.hrtime) {
      const timeParts = process.hrtime();
      timestamp = timeParts[0] * 1e3 + timeParts[1] / 1e6;
    } else {
      timestamp = Date.now();
    }
    return timestamp;
  }
  var init_hi_res_timestamp2 = __esm({
    "../../node_modules/@probe.gl/stats/dist/utils/hi-res-timestamp.js"() {
    }
  });

  // ../../node_modules/@probe.gl/stats/dist/lib/stat.js
  var Stat;
  var init_stat = __esm({
    "../../node_modules/@probe.gl/stats/dist/lib/stat.js"() {
      init_hi_res_timestamp2();
      Stat = class {
        constructor(name13, type) {
          this.sampleSize = 1;
          this.time = 0;
          this.count = 0;
          this.samples = 0;
          this.lastTiming = 0;
          this.lastSampleTime = 0;
          this.lastSampleCount = 0;
          this._count = 0;
          this._time = 0;
          this._samples = 0;
          this._startTime = 0;
          this._timerPending = false;
          this.name = name13;
          this.type = type;
          this.reset();
        }
        reset() {
          this.time = 0;
          this.count = 0;
          this.samples = 0;
          this.lastTiming = 0;
          this.lastSampleTime = 0;
          this.lastSampleCount = 0;
          this._count = 0;
          this._time = 0;
          this._samples = 0;
          this._startTime = 0;
          this._timerPending = false;
          return this;
        }
        setSampleSize(samples) {
          this.sampleSize = samples;
          return this;
        }
        /** Call to increment count (+1) */
        incrementCount() {
          this.addCount(1);
          return this;
        }
        /** Call to decrement count (-1) */
        decrementCount() {
          this.subtractCount(1);
          return this;
        }
        /** Increase count */
        addCount(value) {
          this._count += value;
          this._samples++;
          this._checkSampling();
          return this;
        }
        /** Decrease count */
        subtractCount(value) {
          this._count -= value;
          this._samples++;
          this._checkSampling();
          return this;
        }
        /** Add an arbitrary timing and bump the count */
        addTime(time) {
          this._time += time;
          this.lastTiming = time;
          this._samples++;
          this._checkSampling();
          return this;
        }
        /** Start a timer */
        timeStart() {
          this._startTime = getHiResTimestamp2();
          this._timerPending = true;
          return this;
        }
        /** End a timer. Adds to time and bumps the timing count. */
        timeEnd() {
          if (!this._timerPending) {
            return this;
          }
          this.addTime(getHiResTimestamp2() - this._startTime);
          this._timerPending = false;
          this._checkSampling();
          return this;
        }
        getSampleAverageCount() {
          return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;
        }
        /** Calculate average time / count for the previous window */
        getSampleAverageTime() {
          return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;
        }
        /** Calculate counts per second for the previous window */
        getSampleHz() {
          return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1e3) : 0;
        }
        getAverageCount() {
          return this.samples > 0 ? this.count / this.samples : 0;
        }
        /** Calculate average time / count */
        getAverageTime() {
          return this.samples > 0 ? this.time / this.samples : 0;
        }
        /** Calculate counts per second */
        getHz() {
          return this.time > 0 ? this.samples / (this.time / 1e3) : 0;
        }
        _checkSampling() {
          if (this._samples === this.sampleSize) {
            this.lastSampleTime = this._time;
            this.lastSampleCount = this._count;
            this.count += this._count;
            this.time += this._time;
            this.samples += this._samples;
            this._time = 0;
            this._count = 0;
            this._samples = 0;
          }
        }
      };
    }
  });

  // ../../node_modules/@probe.gl/stats/dist/lib/stats.js
  var Stats;
  var init_stats = __esm({
    "../../node_modules/@probe.gl/stats/dist/lib/stats.js"() {
      init_stat();
      Stats = class {
        constructor(options) {
          this.stats = {};
          this.id = options.id;
          this.stats = {};
          this._initializeStats(options.stats);
          Object.seal(this);
        }
        /** Acquire a stat. Create if it doesn't exist. */
        get(name13, type = "count") {
          return this._getOrCreate({ name: name13, type });
        }
        get size() {
          return Object.keys(this.stats).length;
        }
        /** Reset all stats */
        reset() {
          for (const stat of Object.values(this.stats)) {
            stat.reset();
          }
          return this;
        }
        forEach(fn) {
          for (const stat of Object.values(this.stats)) {
            fn(stat);
          }
        }
        getTable() {
          const table = {};
          this.forEach((stat) => {
            table[stat.name] = {
              time: stat.time || 0,
              count: stat.count || 0,
              average: stat.getAverageTime() || 0,
              hz: stat.getHz() || 0
            };
          });
          return table;
        }
        _initializeStats(stats2 = []) {
          stats2.forEach((stat) => this._getOrCreate(stat));
        }
        _getOrCreate(stat) {
          const { name: name13, type } = stat;
          let result = this.stats[name13];
          if (!result) {
            if (stat instanceof Stat) {
              result = stat;
            } else {
              result = new Stat(name13, type);
            }
            this.stats[name13] = result;
          }
          return result;
        }
      };
    }
  });

  // ../../node_modules/@probe.gl/stats/dist/index.js
  var init_dist3 = __esm({
    "../../node_modules/@probe.gl/stats/dist/index.js"() {
      init_stats();
      init_stat();
      init_hi_res_timestamp2();
    }
  });

  // ../../node_modules/@luma.gl/core/dist/utils/stats-manager.js
  var StatsManager, lumaStats;
  var init_stats_manager = __esm({
    "../../node_modules/@luma.gl/core/dist/utils/stats-manager.js"() {
      init_dist3();
      StatsManager = class {
        stats = /* @__PURE__ */ new Map();
        getStats(name13) {
          return this.get(name13);
        }
        get(name13) {
          if (!this.stats.has(name13)) {
            this.stats.set(name13, new Stats({ id: name13 }));
          }
          return this.stats.get(name13);
        }
      };
      lumaStats = new StatsManager();
    }
  });

  // ../../node_modules/@luma.gl/core/dist/utils/log.js
  var log2;
  var init_log2 = __esm({
    "../../node_modules/@luma.gl/core/dist/utils/log.js"() {
      init_dist2();
      log2 = new Log({ id: "luma.gl" });
    }
  });

  // ../../node_modules/@luma.gl/core/dist/utils/uid.js
  function uid(id = "id") {
    uidCounters[id] = uidCounters[id] || 1;
    const count3 = uidCounters[id]++;
    return `${id}-${count3}`;
  }
  var uidCounters;
  var init_uid = __esm({
    "../../node_modules/@luma.gl/core/dist/utils/uid.js"() {
      uidCounters = {};
    }
  });

  // ../../node_modules/@luma.gl/core/dist/adapter/resources/resource.js
  function selectivelyMerge(props, defaultProps49) {
    const mergedProps = { ...defaultProps49 };
    for (const key in props) {
      if (props[key] !== void 0) {
        mergedProps[key] = props[key];
      }
    }
    return mergedProps;
  }
  var Resource;
  var init_resource = __esm({
    "../../node_modules/@luma.gl/core/dist/adapter/resources/resource.js"() {
      init_uid();
      Resource = class {
        toString() {
          return `${this[Symbol.toStringTag] || this.constructor.name}:"${this.id}"`;
        }
        /** props.id, for debugging. */
        id;
        props;
        userData = {};
        _device;
        /** Whether this resource has been destroyed */
        destroyed = false;
        /** For resources that allocate GPU memory */
        allocatedBytes = 0;
        /** Attached resources will be destroyed when this resource is destroyed. Tracks auto-created "sub" resources. */
        _attachedResources = /* @__PURE__ */ new Set();
        /**
         * Create a new Resource. Called from Subclass
         */
        constructor(device, props, defaultProps49) {
          if (!device) {
            throw new Error("no device");
          }
          this._device = device;
          this.props = selectivelyMerge(props, defaultProps49);
          const id = this.props.id !== "undefined" ? this.props.id : uid(this[Symbol.toStringTag]);
          this.props.id = id;
          this.id = id;
          this.userData = this.props.userData || {};
          this.addStats();
        }
        /**
         * destroy can be called on any resource to release it before it is garbage collected.
         */
        destroy() {
          this.destroyResource();
        }
        /** @deprecated Use destroy() */
        delete() {
          this.destroy();
          return this;
        }
        /**
         * Combines a map of user props and default props, only including props from defaultProps
         * @returns returns a map of overridden default props
         */
        getProps() {
          return this.props;
        }
        // ATTACHED RESOURCES
        /**
         * Attaches a resource. Attached resources are auto destroyed when this resource is destroyed
         * Called automatically when sub resources are auto created but can be called by application
         */
        attachResource(resource) {
          this._attachedResources.add(resource);
        }
        /**
         * Detach an attached resource. The resource will no longer be auto-destroyed when this resource is destroyed.
         */
        detachResource(resource) {
          this._attachedResources.delete(resource);
        }
        /**
         * Destroys a resource (only if owned), and removes from the owned (auto-destroy) list for this resource.
         */
        destroyAttachedResource(resource) {
          if (this._attachedResources.delete(resource)) {
            resource.destroy();
          }
        }
        /** Destroy all owned resources. Make sure the resources are no longer needed before calling. */
        destroyAttachedResources() {
          for (const resource of Object.values(this._attachedResources)) {
            resource.destroy();
          }
          this._attachedResources = /* @__PURE__ */ new Set();
        }
        // PROTECTED METHODS
        /** Perform all destroy steps. Can be called by derived resources when overriding destroy() */
        destroyResource() {
          this.destroyAttachedResources();
          this.removeStats();
          this.destroyed = true;
        }
        /** Called by .destroy() to track object destruction. Subclass must call if overriding destroy() */
        removeStats() {
          const stats2 = this._device.statsManager.getStats("Resource Counts");
          const name13 = this[Symbol.toStringTag];
          stats2.get(`${name13}s Active`).decrementCount();
        }
        /** Called by subclass to track memory allocations */
        trackAllocatedMemory(bytes, name13 = this[Symbol.toStringTag]) {
          const stats2 = this._device.statsManager.getStats("Resource Counts");
          stats2.get("GPU Memory").addCount(bytes);
          stats2.get(`${name13} Memory`).addCount(bytes);
          this.allocatedBytes = bytes;
        }
        /** Called by subclass to track memory deallocations */
        trackDeallocatedMemory(name13 = this[Symbol.toStringTag]) {
          const stats2 = this._device.statsManager.getStats("Resource Counts");
          stats2.get("GPU Memory").subtractCount(this.allocatedBytes);
          stats2.get(`${name13} Memory`).subtractCount(this.allocatedBytes);
          this.allocatedBytes = 0;
        }
        /** Called by resource constructor to track object creation */
        addStats() {
          const stats2 = this._device.statsManager.getStats("Resource Counts");
          const name13 = this[Symbol.toStringTag];
          stats2.get("Resources Created").incrementCount();
          stats2.get(`${name13}s Created`).incrementCount();
          stats2.get(`${name13}s Active`).incrementCount();
        }
      };
      /** Default properties for resource */
      __publicField(Resource, "defaultProps", {
        id: "undefined",
        handle: void 0,
        userData: void 0
      });
    }
  });

  // ../../node_modules/@luma.gl/core/dist/adapter/resources/buffer.js
  var _Buffer, Buffer2;
  var init_buffer = __esm({
    "../../node_modules/@luma.gl/core/dist/adapter/resources/buffer.js"() {
      init_resource();
      _Buffer = class extends Resource {
        get [Symbol.toStringTag]() {
          return "Buffer";
        }
        /** The usage with which this buffer was created */
        usage;
        /** For index buffers, whether indices are 16 or 32 bit */
        indexType;
        /** "Time" of last update, can be used to check if redraw is needed */
        updateTimestamp;
        constructor(device, props) {
          const deducedProps = { ...props };
          if ((props.usage || 0) & _Buffer.INDEX && !props.indexType) {
            if (props.data instanceof Uint32Array) {
              deducedProps.indexType = "uint32";
            } else if (props.data instanceof Uint16Array) {
              deducedProps.indexType = "uint16";
            }
          }
          delete deducedProps.data;
          super(device, deducedProps, _Buffer.defaultProps);
          this.usage = deducedProps.usage || 0;
          this.indexType = deducedProps.indexType;
          this.updateTimestamp = device.incrementTimestamp();
        }
        /**
         * Create a copy of this Buffer with new byteLength, with same props but of the specified size.
         * @note Does not copy contents of the cloned Buffer.
         */
        clone(props) {
          return this.device.createBuffer({ ...this.props, ...props });
        }
        /** A partial CPU-side copy of the data in this buffer, for debugging purposes */
        debugData = new ArrayBuffer(0);
        /** This doesn't handle partial non-zero offset updates correctly */
        _setDebugData(data, byteOffset, byteLength) {
          const arrayBuffer2 = ArrayBuffer.isView(data) ? data.buffer : data;
          const debugDataLength = Math.min(data ? data.byteLength : byteLength, _Buffer.DEBUG_DATA_MAX_LENGTH);
          if (arrayBuffer2 === null) {
            this.debugData = new ArrayBuffer(debugDataLength);
          } else if (byteOffset === 0 && byteLength === arrayBuffer2.byteLength) {
            this.debugData = arrayBuffer2.slice(0, debugDataLength);
          } else {
            this.debugData = arrayBuffer2.slice(byteOffset, byteOffset + debugDataLength);
          }
        }
      };
      Buffer2 = _Buffer;
      /** Index buffer */
      __publicField(Buffer2, "INDEX", 16);
      /** Vertex buffer */
      __publicField(Buffer2, "VERTEX", 32);
      /** Uniform buffer */
      __publicField(Buffer2, "UNIFORM", 64);
      /** Storage buffer */
      __publicField(Buffer2, "STORAGE", 128);
      __publicField(Buffer2, "INDIRECT", 256);
      __publicField(Buffer2, "QUERY_RESOLVE", 512);
      // Usage Flags
      __publicField(Buffer2, "MAP_READ", 1);
      __publicField(Buffer2, "MAP_WRITE", 2);
      __publicField(Buffer2, "COPY_SRC", 4);
      __publicField(Buffer2, "COPY_DST", 8);
      // PROTECTED METHODS (INTENDED FOR USE BY OTHER FRAMEWORK CODE ONLY)
      /** Max amount of debug data saved. Two vec4's */
      __publicField(Buffer2, "DEBUG_DATA_MAX_LENGTH", 32);
      __publicField(Buffer2, "defaultProps", {
        ...Resource.defaultProps,
        usage: 0,
        // Buffer.COPY_DST | Buffer.COPY_SRC
        byteLength: 0,
        byteOffset: 0,
        data: null,
        indexType: "uint16",
        onMapped: void 0
      });
    }
  });

  // ../../node_modules/@luma.gl/core/dist/shadertypes/data-types/decode-data-types.js
  function getDataTypeInfo(type) {
    const [signedType, primitiveType, byteLength] = NORMALIZED_TYPE_MAP[type];
    const normalized = type.includes("norm");
    const integer = !normalized && !type.startsWith("float");
    const signed = type.startsWith("s");
    return {
      signedType,
      primitiveType,
      byteLength,
      normalized,
      integer,
      signed
    };
  }
  function getNormalizedDataType(signedDataType) {
    const dataType = signedDataType;
    switch (dataType) {
      case "uint8":
        return "unorm8";
      case "sint8":
        return "snorm8";
      case "uint16":
        return "unorm16";
      case "sint16":
        return "snorm16";
      default:
        return dataType;
    }
  }
  function alignTo(size, count3) {
    switch (count3) {
      case 1:
        return size;
      case 2:
        return size + size % 2;
      default:
        return size + (4 - size % 4) % 4;
    }
  }
  function getDataType(arrayOrType) {
    const Constructor = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;
    if (Constructor === Uint8ClampedArray) {
      return "uint8";
    }
    const info = Object.values(NORMALIZED_TYPE_MAP).find((entry) => Constructor === entry[4]);
    if (!info) {
      throw new Error(Constructor.name);
    }
    return info[0];
  }
  function getTypedArrayConstructor(type) {
    const [, , , , Constructor] = NORMALIZED_TYPE_MAP[type];
    return Constructor;
  }
  var NORMALIZED_TYPE_MAP;
  var init_decode_data_types = __esm({
    "../../node_modules/@luma.gl/core/dist/shadertypes/data-types/decode-data-types.js"() {
      NORMALIZED_TYPE_MAP = {
        uint8: ["uint8", "u32", 1, false, Uint8Array],
        sint8: ["sint8", "i32", 1, false, Int8Array],
        unorm8: ["uint8", "f32", 1, true, Uint8Array],
        snorm8: ["sint8", "f32", 1, true, Int8Array],
        uint16: ["uint16", "u32", 2, false, Uint16Array],
        sint16: ["sint16", "i32", 2, false, Int16Array],
        unorm16: ["uint16", "u32", 2, true, Uint16Array],
        snorm16: ["sint16", "i32", 2, true, Int16Array],
        float16: ["float16", "f16", 2, false, Uint16Array],
        float32: ["float32", "f32", 4, false, Float32Array],
        uint32: ["uint32", "u32", 4, false, Uint32Array],
        sint32: ["sint32", "i32", 4, false, Int32Array]
      };
    }
  });

  // ../../node_modules/@luma.gl/core/dist/shadertypes/vertex-arrays/decode-vertex-format.js
  function getVertexFormatInfo(format) {
    let webglOnly;
    if (format.endsWith("-webgl")) {
      format.replace("-webgl", "");
      webglOnly = true;
    }
    const [type_, count3] = format.split("x");
    const type = type_;
    const components = count3 ? parseInt(count3) : 1;
    const decodedType = getDataTypeInfo(type);
    const result = {
      type,
      components,
      byteLength: decodedType.byteLength * components,
      integer: decodedType.integer,
      signed: decodedType.signed,
      normalized: decodedType.normalized
    };
    if (webglOnly) {
      result.webglOnly = true;
    }
    return result;
  }
  function makeVertexFormat(signedDataType, components, normalized) {
    const dataType = normalized ? getNormalizedDataType(signedDataType) : signedDataType;
    switch (dataType) {
      case "unorm8":
        if (components === 1) {
          return "unorm8";
        }
        if (components === 3) {
          return "unorm8x3-webgl";
        }
        return `${dataType}x${components}`;
      case "snorm8":
      case "uint8":
      case "sint8":
      case "uint16":
      case "sint16":
      case "unorm16":
      case "snorm16":
      case "float16":
        if (components === 1 || components === 3) {
          throw new Error(`size: ${components}`);
        }
        return `${dataType}x${components}`;
      default:
        return components === 1 ? dataType : `${dataType}x${components}`;
    }
  }
  function getVertexFormatFromAttribute(typedArray, size, normalized) {
    if (!size || size > 4) {
      throw new Error(`size ${size}`);
    }
    const components = size;
    const signedDataType = getDataType(typedArray);
    return makeVertexFormat(signedDataType, components, normalized);
  }
  function getCompatibleVertexFormat(opts) {
    let vertexType;
    switch (opts.primitiveType) {
      case "f32":
        vertexType = "float32";
        break;
      case "i32":
        vertexType = "sint32";
        break;
      case "u32":
        vertexType = "uint32";
        break;
      case "f16":
        return opts.components <= 2 ? "float16x2" : "float16x4";
    }
    if (opts.components === 1) {
      return vertexType;
    }
    return `${vertexType}x${opts.components}`;
  }
  var init_decode_vertex_format = __esm({
    "../../node_modules/@luma.gl/core/dist/shadertypes/vertex-arrays/decode-vertex-format.js"() {
      init_decode_data_types();
    }
  });

  // ../../node_modules/@luma.gl/core/dist/shadertypes/textures/texture-format-table.js
  function getTextureFormatDefinition(format) {
    const info = TEXTURE_FORMAT_TABLE[format];
    if (!info) {
      throw new Error(`Unsupported texture format ${format}`);
    }
    return info;
  }
  var texture_compression_bc, texture_compression_astc, texture_compression_etc2, texture_compression_etc1_webgl, texture_compression_pvrtc_webgl, texture_compression_atc_webgl, float32_renderable, float16_renderable, rgb9e5ufloat_renderable, snorm8_renderable, norm16_renderable, snorm16_renderable, float32_filterable, float16_filterable, TEXTURE_FORMAT_COLOR_DEPTH_TABLE, TEXTURE_FORMAT_COMPRESSED_TABLE, TEXTURE_FORMAT_TABLE;
  var init_texture_format_table = __esm({
    "../../node_modules/@luma.gl/core/dist/shadertypes/textures/texture-format-table.js"() {
      texture_compression_bc = "texture-compression-bc";
      texture_compression_astc = "texture-compression-astc";
      texture_compression_etc2 = "texture-compression-etc2";
      texture_compression_etc1_webgl = "texture-compression-etc1-webgl";
      texture_compression_pvrtc_webgl = "texture-compression-pvrtc-webgl";
      texture_compression_atc_webgl = "texture-compression-atc-webgl";
      float32_renderable = "float32-renderable-webgl";
      float16_renderable = "float16-renderable-webgl";
      rgb9e5ufloat_renderable = "rgb9e5ufloat-renderable-webgl";
      snorm8_renderable = "snorm8-renderable-webgl";
      norm16_renderable = "norm16-renderable-webgl";
      snorm16_renderable = "snorm16-renderable-webgl";
      float32_filterable = "float32-filterable";
      float16_filterable = "float16-filterable-webgl";
      TEXTURE_FORMAT_COLOR_DEPTH_TABLE = {
        // 8-bit formats
        "r8unorm": {},
        "rg8unorm": {},
        "rgb8unorm-webgl": {},
        "rgba8unorm": {},
        "rgba8unorm-srgb": {},
        "r8snorm": { render: snorm8_renderable },
        "rg8snorm": { render: snorm8_renderable },
        "rgb8snorm-webgl": {},
        "rgba8snorm": { render: snorm8_renderable },
        "r8uint": {},
        "rg8uint": {},
        "rgba8uint": {},
        "r8sint": {},
        "rg8sint": {},
        "rgba8sint": {},
        "bgra8unorm": {},
        "bgra8unorm-srgb": {},
        "r16unorm": { f: norm16_renderable },
        "rg16unorm": { render: norm16_renderable },
        "rgb16unorm-webgl": { f: norm16_renderable },
        // rgb not renderable
        "rgba16unorm": { render: norm16_renderable },
        "r16snorm": { f: snorm16_renderable },
        "rg16snorm": { render: snorm16_renderable },
        "rgb16snorm-webgl": { f: norm16_renderable },
        // rgb not renderable
        "rgba16snorm": { render: snorm16_renderable },
        "r16uint": {},
        "rg16uint": {},
        "rgba16uint": {},
        "r16sint": {},
        "rg16sint": {},
        "rgba16sint": {},
        "r16float": { render: float16_renderable, filter: "float16-filterable-webgl" },
        "rg16float": { render: float16_renderable, filter: float16_filterable },
        "rgba16float": { render: float16_renderable, filter: float16_filterable },
        "r32uint": {},
        "rg32uint": {},
        "rgba32uint": {},
        "r32sint": {},
        "rg32sint": {},
        "rgba32sint": {},
        "r32float": { render: float32_renderable, filter: float32_filterable },
        "rg32float": { render: false, filter: float32_filterable },
        "rgb32float-webgl": { render: float32_renderable, filter: float32_filterable },
        "rgba32float": { render: float32_renderable, filter: float32_filterable },
        // Packed 16-bit formats
        "rgba4unorm-webgl": { channels: "rgba", bitsPerChannel: [4, 4, 4, 4], packed: true },
        "rgb565unorm-webgl": { channels: "rgb", bitsPerChannel: [5, 6, 5, 0], packed: true },
        "rgb5a1unorm-webgl": { channels: "rgba", bitsPerChannel: [5, 5, 5, 1], packed: true },
        // Packed 32 bit formats
        "rgb9e5ufloat": { channels: "rgb", packed: true, render: rgb9e5ufloat_renderable },
        // , filter: true},
        "rg11b10ufloat": { channels: "rgb", bitsPerChannel: [11, 11, 10, 0], packed: true, p: 1, render: float32_renderable },
        "rgb10a2unorm": { channels: "rgba", bitsPerChannel: [10, 10, 10, 2], packed: true, p: 1 },
        "rgb10a2uint": { channels: "rgba", bitsPerChannel: [10, 10, 10, 2], packed: true, p: 1 },
        // Depth/stencil Formats
        // Depth and stencil formats
        stencil8: { attachment: "stencil", bitsPerChannel: [8, 0, 0, 0], dataType: "uint8" },
        "depth16unorm": { attachment: "depth", bitsPerChannel: [16, 0, 0, 0], dataType: "uint16" },
        "depth24plus": { attachment: "depth", bitsPerChannel: [24, 0, 0, 0], dataType: "uint32" },
        "depth32float": { attachment: "depth", bitsPerChannel: [32, 0, 0, 0], dataType: "float32" },
        // The depth component of the "depth24plus" and "depth24plus-stencil8" formats may be implemented as either a 24-bit depth value or a "depth32float" value.
        "depth24plus-stencil8": { attachment: "depth-stencil", bitsPerChannel: [24, 8, 0, 0], packed: true },
        // "depth32float-stencil8" feature
        "depth32float-stencil8": { attachment: "depth-stencil", bitsPerChannel: [32, 8, 0, 0], packed: true }
      };
      TEXTURE_FORMAT_COMPRESSED_TABLE = {
        // BC compressed formats: check device.features.has("texture-compression-bc");
        "bc1-rgb-unorm-webgl": { f: texture_compression_bc },
        "bc1-rgb-unorm-srgb-webgl": { f: texture_compression_bc },
        "bc1-rgba-unorm": { f: texture_compression_bc },
        "bc1-rgba-unorm-srgb": { f: texture_compression_bc },
        "bc2-rgba-unorm": { f: texture_compression_bc },
        "bc2-rgba-unorm-srgb": { f: texture_compression_bc },
        "bc3-rgba-unorm": { f: texture_compression_bc },
        "bc3-rgba-unorm-srgb": { f: texture_compression_bc },
        "bc4-r-unorm": { f: texture_compression_bc },
        "bc4-r-snorm": { f: texture_compression_bc },
        "bc5-rg-unorm": { f: texture_compression_bc },
        "bc5-rg-snorm": { f: texture_compression_bc },
        "bc6h-rgb-ufloat": { f: texture_compression_bc },
        "bc6h-rgb-float": { f: texture_compression_bc },
        "bc7-rgba-unorm": { f: texture_compression_bc },
        "bc7-rgba-unorm-srgb": { f: texture_compression_bc },
        // WEBGL_compressed_texture_etc: device.features.has("texture-compression-etc2")
        // Note: Supposedly guaranteed availability compressed formats in WebGL2, but through CPU decompression
        "etc2-rgb8unorm": { f: texture_compression_etc2 },
        "etc2-rgb8unorm-srgb": { f: texture_compression_etc2 },
        "etc2-rgb8a1unorm": { f: texture_compression_etc2 },
        "etc2-rgb8a1unorm-srgb": { f: texture_compression_etc2 },
        "etc2-rgba8unorm": { f: texture_compression_etc2 },
        "etc2-rgba8unorm-srgb": { f: texture_compression_etc2 },
        "eac-r11unorm": { f: texture_compression_etc2 },
        "eac-r11snorm": { f: texture_compression_etc2 },
        "eac-rg11unorm": { f: texture_compression_etc2 },
        "eac-rg11snorm": { f: texture_compression_etc2 },
        // X_ASTC compressed formats: device.features.has("texture-compression-astc")
        "astc-4x4-unorm": { f: texture_compression_astc },
        "astc-4x4-unorm-srgb": { f: texture_compression_astc },
        "astc-5x4-unorm": { f: texture_compression_astc },
        "astc-5x4-unorm-srgb": { f: texture_compression_astc },
        "astc-5x5-unorm": { f: texture_compression_astc },
        "astc-5x5-unorm-srgb": { f: texture_compression_astc },
        "astc-6x5-unorm": { f: texture_compression_astc },
        "astc-6x5-unorm-srgb": { f: texture_compression_astc },
        "astc-6x6-unorm": { f: texture_compression_astc },
        "astc-6x6-unorm-srgb": { f: texture_compression_astc },
        "astc-8x5-unorm": { f: texture_compression_astc },
        "astc-8x5-unorm-srgb": { f: texture_compression_astc },
        "astc-8x6-unorm": { f: texture_compression_astc },
        "astc-8x6-unorm-srgb": { f: texture_compression_astc },
        "astc-8x8-unorm": { f: texture_compression_astc },
        "astc-8x8-unorm-srgb": { f: texture_compression_astc },
        "astc-10x5-unorm": { f: texture_compression_astc },
        "astc-10x5-unorm-srgb": { f: texture_compression_astc },
        "astc-10x6-unorm": { f: texture_compression_astc },
        "astc-10x6-unorm-srgb": { f: texture_compression_astc },
        "astc-10x8-unorm": { f: texture_compression_astc },
        "astc-10x8-unorm-srgb": { f: texture_compression_astc },
        "astc-10x10-unorm": { f: texture_compression_astc },
        "astc-10x10-unorm-srgb": { f: texture_compression_astc },
        "astc-12x10-unorm": { f: texture_compression_astc },
        "astc-12x10-unorm-srgb": { f: texture_compression_astc },
        "astc-12x12-unorm": { f: texture_compression_astc },
        "astc-12x12-unorm-srgb": { f: texture_compression_astc },
        // WEBGL_compressed_texture_pvrtc
        "pvrtc-rgb4unorm-webgl": { f: texture_compression_pvrtc_webgl },
        "pvrtc-rgba4unorm-webgl": { f: texture_compression_pvrtc_webgl },
        "pvrtc-rbg2unorm-webgl": { f: texture_compression_pvrtc_webgl },
        "pvrtc-rgba2unorm-webgl": { f: texture_compression_pvrtc_webgl },
        // WEBGL_compressed_texture_etc1
        "etc1-rbg-unorm-webgl": { f: texture_compression_etc1_webgl },
        // WEBGL_compressed_texture_atc
        "atc-rgb-unorm-webgl": { f: texture_compression_atc_webgl },
        "atc-rgba-unorm-webgl": { f: texture_compression_atc_webgl },
        "atc-rgbai-unorm-webgl": { f: texture_compression_atc_webgl }
      };
      TEXTURE_FORMAT_TABLE = {
        ...TEXTURE_FORMAT_COLOR_DEPTH_TABLE,
        ...TEXTURE_FORMAT_COMPRESSED_TABLE
      };
    }
  });

  // ../../node_modules/@luma.gl/core/dist/shadertypes/textures/texture-format-decoder.js
  function getTextureFormatInfo(format) {
    let formatInfo = getTextureFormatInfoUsingTable(format);
    if (textureFormatDecoder.isCompressed(format)) {
      formatInfo.channels = "rgb";
      formatInfo.components = 3;
      formatInfo.bytesPerPixel = 1;
      formatInfo.srgb = false;
      formatInfo.compressed = true;
      const blockSize = getCompressedTextureBlockSize(format);
      if (blockSize) {
        formatInfo.blockWidth = blockSize.blockWidth;
        formatInfo.blockHeight = blockSize.blockHeight;
      }
    }
    const matches3 = RGB_FORMAT_REGEX.exec(format);
    if (matches3) {
      const [, channels, length17, type, srgb, suffix] = matches3;
      const dataType = `${type}${length17}`;
      const decodedType = getDataTypeInfo(dataType);
      const bits = decodedType.byteLength * 8;
      const components = channels.length;
      const bitsPerChannel = [
        bits,
        components >= 2 ? bits : 0,
        components >= 3 ? bits : 0,
        components >= 4 ? bits : 0
      ];
      formatInfo = {
        format,
        attachment: formatInfo.attachment,
        dataType: decodedType.signedType,
        components,
        channels,
        integer: decodedType.integer,
        signed: decodedType.signed,
        normalized: decodedType.normalized,
        bitsPerChannel,
        bytesPerPixel: decodedType.byteLength * channels.length,
        packed: formatInfo.packed,
        srgb: formatInfo.srgb
      };
      if (suffix === "-webgl") {
        formatInfo.webgl = true;
      }
      if (srgb === "-srgb") {
        formatInfo.srgb = true;
      }
    }
    if (format.endsWith("-webgl")) {
      formatInfo.webgl = true;
    }
    if (format.endsWith("-srgb")) {
      formatInfo.srgb = true;
    }
    return formatInfo;
  }
  function getTextureFormatInfoUsingTable(format) {
    const info = getTextureFormatDefinition(format);
    const bytesPerPixel = info.bytesPerPixel || 1;
    const bitsPerChannel = info.bitsPerChannel || [8, 8, 8, 8];
    delete info.bitsPerChannel;
    delete info.bytesPerPixel;
    delete info.f;
    delete info.render;
    delete info.filter;
    delete info.blend;
    delete info.store;
    const formatInfo = {
      ...info,
      format,
      attachment: info.attachment || "color",
      channels: info.channels || "r",
      components: info.components || info.channels?.length || 1,
      bytesPerPixel,
      bitsPerChannel,
      dataType: info.dataType || "uint8",
      srgb: info.srgb ?? false,
      packed: info.packed ?? false,
      webgl: info.webgl ?? false,
      integer: info.integer ?? false,
      signed: info.signed ?? false,
      normalized: info.normalized ?? false,
      compressed: info.compressed ?? false
    };
    return formatInfo;
  }
  function getCompressedTextureBlockSize(format) {
    const REGEX = /.*-(\d+)x(\d+)-.*/;
    const matches3 = REGEX.exec(format);
    if (matches3) {
      const [, blockWidth, blockHeight] = matches3;
      return { blockWidth: Number(blockWidth), blockHeight: Number(blockHeight) };
    }
    return null;
  }
  var COMPRESSED_TEXTURE_FORMAT_PREFIXES, RGB_FORMAT_REGEX, TextureFormatDecoder, textureFormatDecoder;
  var init_texture_format_decoder = __esm({
    "../../node_modules/@luma.gl/core/dist/shadertypes/textures/texture-format-decoder.js"() {
      init_decode_data_types();
      init_texture_format_table();
      COMPRESSED_TEXTURE_FORMAT_PREFIXES = [
        "bc1",
        "bc2",
        "bc3",
        "bc4",
        "bc5",
        "bc6",
        "bc7",
        "etc1",
        "etc2",
        "eac",
        "atc",
        "astc",
        "pvrtc"
      ];
      RGB_FORMAT_REGEX = /^(r|rg|rgb|rgba|bgra)([0-9]*)([a-z]*)(-srgb)?(-webgl)?$/;
      TextureFormatDecoder = class {
        /** Returns information about a texture format, e.g. attatchment type, components, byte length and flags (integer, signed, normalized) */
        getInfo(format) {
          return getTextureFormatInfo(format);
        }
        /** Checks if a texture format is color */
        isColor(format) {
          return format.startsWith("rgba") || format.startsWith("bgra") || format.startsWith("rgb");
        }
        /** Checks if a texture format is depth or stencil */
        isDepthStencil(format) {
          return format.startsWith("depth") || format.startsWith("stencil");
        }
        /** Checks if a texture format is compressed */
        isCompressed(format) {
          return COMPRESSED_TEXTURE_FORMAT_PREFIXES.some((prefix) => format.startsWith(prefix));
        }
        /**
         * Returns the "static" capabilities of a texture format.
         * @note Needs to be checked against current device
         */
        getCapabilities(format) {
          const info = getTextureFormatDefinition(format);
          const formatCapabilities = {
            format,
            create: info.f ?? true,
            render: info.render ?? true,
            filter: info.filter ?? true,
            blend: info.blend ?? true,
            store: info.store ?? true
          };
          const formatInfo = getTextureFormatInfo(format);
          const isDepthStencil = format.startsWith("depth") || format.startsWith("stencil");
          const isSigned = formatInfo?.signed;
          const isInteger = formatInfo?.integer;
          const isWebGLSpecific = formatInfo?.webgl;
          formatCapabilities.render &&= !isSigned;
          formatCapabilities.filter &&= !isDepthStencil && !isSigned && !isInteger && !isWebGLSpecific;
          return formatCapabilities;
        }
      };
      textureFormatDecoder = new TextureFormatDecoder();
    }
  });

  // ../../node_modules/@luma.gl/core/dist/image-utils/image-types.js
  function isExternalImage(data) {
    return typeof ImageData !== "undefined" && data instanceof ImageData || typeof ImageBitmap !== "undefined" && data instanceof ImageBitmap || typeof HTMLImageElement !== "undefined" && data instanceof HTMLImageElement || typeof HTMLVideoElement !== "undefined" && data instanceof HTMLVideoElement || typeof VideoFrame !== "undefined" && data instanceof VideoFrame || typeof HTMLCanvasElement !== "undefined" && data instanceof HTMLCanvasElement || typeof OffscreenCanvas !== "undefined" && data instanceof OffscreenCanvas;
  }
  function getExternalImageSize(data) {
    if (typeof ImageData !== "undefined" && data instanceof ImageData || typeof ImageBitmap !== "undefined" && data instanceof ImageBitmap || typeof HTMLCanvasElement !== "undefined" && data instanceof HTMLCanvasElement || typeof OffscreenCanvas !== "undefined" && data instanceof OffscreenCanvas) {
      return { width: data.width, height: data.height };
    }
    if (typeof HTMLImageElement !== "undefined" && data instanceof HTMLImageElement) {
      return { width: data.naturalWidth, height: data.naturalHeight };
    }
    if (typeof HTMLVideoElement !== "undefined" && data instanceof HTMLVideoElement) {
      return { width: data.videoWidth, height: data.videoHeight };
    }
    if (typeof VideoFrame !== "undefined" && data instanceof VideoFrame) {
      return { width: data.displayWidth, height: data.displayHeight };
    }
    throw new Error("Unknown image type");
  }
  var init_image_types = __esm({
    "../../node_modules/@luma.gl/core/dist/image-utils/image-types.js"() {
    }
  });

  // ../../node_modules/@luma.gl/core/dist/adapter/device.js
  var DeviceLimits, DeviceFeatures, _Device, Device;
  var init_device = __esm({
    "../../node_modules/@luma.gl/core/dist/adapter/device.js"() {
      init_stats_manager();
      init_log2();
      init_uid();
      init_buffer();
      init_decode_vertex_format();
      init_texture_format_decoder();
      init_image_types();
      DeviceLimits = class {
      };
      DeviceFeatures = class {
        features;
        disabledFeatures;
        constructor(features = [], disabledFeatures) {
          this.features = new Set(features);
          this.disabledFeatures = disabledFeatures || {};
        }
        *[Symbol.iterator]() {
          yield* this.features;
        }
        has(feature) {
          return !this.disabledFeatures?.[feature] && this.features.has(feature);
        }
      };
      _Device = class {
        get [Symbol.toStringTag]() {
          return "Device";
        }
        toString() {
          return `Device(${this.id})`;
        }
        /** id of this device, primarily for debugging */
        id;
        /** A copy of the device props  */
        props;
        /** Available for the application to store data on the device */
        userData = {};
        /** stats */
        statsManager = lumaStats;
        /** An abstract timestamp used for change tracking */
        timestamp = 0;
        /** True if this device has been reused during device creation (app has multiple references) */
        _reused = false;
        /** Used by other luma.gl modules to store data on the device */
        _lumaData = {};
        _textureCaps = {};
        constructor(props) {
          this.props = { ..._Device.defaultProps, ...props };
          this.id = this.props.id || uid(this[Symbol.toStringTag].toLowerCase());
        }
        getVertexFormatInfo(format) {
          return getVertexFormatInfo(format);
        }
        isVertexFormatSupported(format) {
          return true;
        }
        /** Returns information about a texture format, such as data type, channels, bits per channel, compression etc */
        getTextureFormatInfo(format) {
          return textureFormatDecoder.getInfo(format);
        }
        /** Determines what operations are supported on a texture format on this particular device (checks against supported device features) */
        getTextureFormatCapabilities(format) {
          let textureCaps = this._textureCaps[format];
          if (!textureCaps) {
            const capabilities = this._getDeviceTextureFormatCapabilities(format);
            textureCaps = this._getDeviceSpecificTextureFormatCapabilities(capabilities);
            this._textureCaps[format] = textureCaps;
          }
          return textureCaps;
        }
        /** Calculates the number of mip levels for a texture of width, height and in case of 3d textures only, depth */
        getMipLevelCount(width, height, depth3d = 1) {
          const maxSize = Math.max(width, height, depth3d);
          return 1 + Math.floor(Math.log2(maxSize));
        }
        /** Check if data is an external image */
        isExternalImage(data) {
          return isExternalImage(data);
        }
        /** Get the size of an external image */
        getExternalImageSize(data) {
          return getExternalImageSize(data);
        }
        /** Check if device supports a specific texture format (creation and `nearest` sampling) */
        isTextureFormatSupported(format) {
          return this.getTextureFormatCapabilities(format).create;
        }
        /** Check if linear filtering (sampler interpolation) is supported for a specific texture format */
        isTextureFormatFilterable(format) {
          return this.getTextureFormatCapabilities(format).filter;
        }
        /** Check if device supports rendering to a framebuffer color attachment of a specific texture format */
        isTextureFormatRenderable(format) {
          return this.getTextureFormatCapabilities(format).render;
        }
        /** Check if a specific texture format is GPU compressed */
        isTextureFormatCompressed(format) {
          return textureFormatDecoder.isCompressed(format);
        }
        // DEBUG METHODS
        pushDebugGroup(groupLabel) {
          this.commandEncoder.pushDebugGroup(groupLabel);
        }
        popDebugGroup() {
          this.commandEncoder?.popDebugGroup();
        }
        insertDebugMarker(markerLabel) {
          this.commandEncoder?.insertDebugMarker(markerLabel);
        }
        /**
         * Trigger device loss.
         * @returns `true` if context loss could actually be triggered.
         * @note primarily intended for testing how application reacts to device loss
         */
        loseDevice() {
          return false;
        }
        /** A monotonic counter for tracking buffer and texture updates */
        incrementTimestamp() {
          return this.timestamp++;
        }
        /**
         * Reports Device errors in a way that optimizes for developer experience / debugging.
         * - Logs so that the console error links directly to the source code that generated the error.
         * - Includes the object that reported the error in the log message, even if the error is asynchronous.
         *
         * Conventions when calling reportError():
         * - Always call the returned function - to ensure error is logged, at the error site
         * - Follow with a call to device.debug() - to ensure that the debugger breaks at the error site
         *
         * @param error - the error to report. If needed, just create a new Error object with the appropriate message.
         * @param context - pass `this` as context, otherwise it may not be available in the debugger for async errors.
         * @returns the logger function returned by device.props.onError() so that it can be called from the error site.
         *
         * @example
         *   device.reportError(new Error(...), this)();
         *   device.debug();
         */
        reportError(error, context, ...args) {
          const isHandled = this.props.onError(error, context);
          if (!isHandled) {
            return log2.error(error.message, context, ...args);
          }
          return () => {
          };
        }
        /** Break in the debugger - if device.props.debug is true */
        debug() {
          if (this.props.debug) {
            debugger;
          } else {
            const message2 = `'Type luma.log.set({debug: true}) in console to enable debug breakpoints',
or create a device with the 'debug: true' prop.`;
            log2.once(0, message2)();
          }
        }
        /** Returns the default / primary canvas context. Throws an error if no canvas context is available (a WebGPU compute device) */
        getDefaultCanvasContext() {
          if (!this.canvasContext) {
            throw new Error("Device has no default CanvasContext. See props.createCanvasContext");
          }
          return this.canvasContext;
        }
        /** Create a RenderPass using the default CommandEncoder */
        beginRenderPass(props) {
          return this.commandEncoder.beginRenderPass(props);
        }
        /** Create a ComputePass using the default CommandEncoder*/
        beginComputePass(props) {
          return this.commandEncoder.beginComputePass(props);
        }
        // DEPRECATED METHODS
        /** @deprecated Use getDefaultCanvasContext() */
        getCanvasContext() {
          return this.getDefaultCanvasContext();
        }
        // WebGL specific HACKS - enables app to remove webgl import
        // Use until we have a better way to handle these
        /** @deprecated - will be removed - should use command encoder */
        readPixelsToArrayWebGL(source4, options) {
          throw new Error("not implemented");
        }
        /** @deprecated - will be removed - should use command encoder */
        readPixelsToBufferWebGL(source4, options) {
          throw new Error("not implemented");
        }
        /** @deprecated - will be removed - should use WebGPU parameters (pipeline) */
        setParametersWebGL(parameters2) {
          throw new Error("not implemented");
        }
        /** @deprecated - will be removed - should use WebGPU parameters (pipeline) */
        getParametersWebGL(parameters2) {
          throw new Error("not implemented");
        }
        /** @deprecated - will be removed - should use WebGPU parameters (pipeline) */
        withParametersWebGL(parameters2, func) {
          throw new Error("not implemented");
        }
        /** @deprecated - will be removed - should use clear arguments in RenderPass */
        clearWebGL(options) {
          throw new Error("not implemented");
        }
        /** @deprecated - will be removed - should use for debugging only */
        resetWebGL() {
          throw new Error("not implemented");
        }
        // IMPLEMENTATION
        /** Helper to get the canvas context props */
        static _getCanvasContextProps(props) {
          return props.createCanvasContext === true ? {} : props.createCanvasContext;
        }
        _getDeviceTextureFormatCapabilities(format) {
          const genericCapabilities = textureFormatDecoder.getCapabilities(format);
          const checkFeature = (feature) => (typeof feature === "string" ? this.features.has(feature) : feature) ?? true;
          const supported = checkFeature(genericCapabilities.create);
          return {
            format,
            create: supported,
            render: supported && checkFeature(genericCapabilities.render),
            filter: supported && checkFeature(genericCapabilities.filter),
            blend: supported && checkFeature(genericCapabilities.blend),
            store: supported && checkFeature(genericCapabilities.store)
          };
        }
        /** Subclasses use this to support .createBuffer() overloads */
        _normalizeBufferProps(props) {
          if (props instanceof ArrayBuffer || ArrayBuffer.isView(props)) {
            props = { data: props };
          }
          const newProps = { ...props };
          const usage = props.usage || 0;
          if (usage & Buffer2.INDEX) {
            if (!props.indexType) {
              if (props.data instanceof Uint32Array) {
                newProps.indexType = "uint32";
              } else if (props.data instanceof Uint16Array) {
                newProps.indexType = "uint16";
              }
            }
            if (!newProps.indexType) {
              throw new Error("indices buffer content must be of type uint16 or uint32");
            }
          }
          return newProps;
        }
      };
      Device = _Device;
      __publicField(Device, "defaultProps", {
        id: null,
        powerPreference: "high-performance",
        failIfMajorPerformanceCaveat: false,
        createCanvasContext: void 0,
        // WebGL specific
        webgl: {},
        // Callbacks
        // eslint-disable-next-line handle-callback-err
        onError: (error, context) => {
        },
        onResize: (context, info) => {
          const [width, height] = context.getDevicePixelSize();
          log2.log(1, `${context} resized => ${width}x${height}px`)();
        },
        onPositionChange: (context, info) => {
          const [left, top] = context.getPosition();
          log2.log(1, `${context} repositioned => ${left},${top}`)();
        },
        onVisibilityChange: (context) => log2.log(1, `${context} Visibility changed ${context.isVisible}`)(),
        onDevicePixelRatioChange: (context, info) => log2.log(1, `${context} DPR changed ${info.oldRatio} => ${context.devicePixelRatio}`)(),
        // Debug flags
        debug: log2.get("debug") || void 0,
        debugShaders: log2.get("debug-shaders") || void 0,
        debugFramebuffers: Boolean(log2.get("debug-framebuffers")),
        debugFactories: Boolean(log2.get("debug-factories")),
        debugWebGL: Boolean(log2.get("debug-webgl")),
        debugSpectorJS: void 0,
        // Note: log setting is queried by the spector.js code
        debugSpectorJSUrl: void 0,
        // Experimental
        _reuseDevices: false,
        _requestMaxLimits: true,
        _cacheShaders: false,
        _cachePipelines: false,
        _cacheDestroyPolicy: "unused",
        // TODO - Change these after confirming things work as expected
        _initializeFeatures: true,
        _disabledFeatures: {
          "compilation-status-async-webgl": true
        },
        // INTERNAL
        _handle: void 0
      });
    }
  });

  // ../../node_modules/@luma.gl/core/dist/adapter/luma.js
  var STARTUP_MESSAGE, ERROR_MESSAGE, _Luma, Luma, luma;
  var init_luma = __esm({
    "../../node_modules/@luma.gl/core/dist/adapter/luma.js"() {
      init_device();
      init_stats_manager();
      init_log2();
      STARTUP_MESSAGE = "set luma.log.level=1 (or higher) to trace rendering";
      ERROR_MESSAGE = "No matching device found. Ensure `@luma.gl/webgl` and/or `@luma.gl/webgpu` modules are imported.";
      _Luma = class {
        /** Global stats for all devices */
        stats = lumaStats;
        /**
         * Global log
         *
         * Assign luma.log.level in console to control logging: \
         * 0: none, 1: minimal, 2: verbose, 3: attribute/uniforms, 4: gl logs
         * luma.log.break[], set to gl funcs, luma.log.profile[] set to model names`;
         */
        log = log2;
        /** Version of luma.gl */
        VERSION = (
          // Version detection using build plugin
          // @ts-expect-error no-undef
          true ? "9.2.2" : "running from source"
        );
        spector;
        preregisteredAdapters = /* @__PURE__ */ new Map();
        constructor() {
          if (globalThis.luma) {
            if (globalThis.luma.VERSION !== this.VERSION) {
              log2.error(`Found luma.gl ${globalThis.luma.VERSION} while initialzing ${this.VERSION}`)();
              log2.error(`'yarn why @luma.gl/core' can help identify the source of the conflict`)();
              throw new Error(`luma.gl - multiple versions detected: see console log`);
            }
            log2.error("This version of luma.gl has already been initialized")();
          }
          log2.log(1, `${this.VERSION} - ${STARTUP_MESSAGE}`)();
          globalThis.luma = this;
        }
        /** Creates a device. Asynchronously. */
        async createDevice(props_ = {}) {
          const props = { ..._Luma.defaultProps, ...props_ };
          const adapter = this.selectAdapter(props.type, props.adapters);
          if (!adapter) {
            throw new Error(ERROR_MESSAGE);
          }
          if (props.waitForPageLoad) {
            await adapter.pageLoaded;
          }
          return await adapter.create(props);
        }
        /**
         * Attach to an existing GPU API handle (WebGL2RenderingContext or GPUDevice).
         * @param handle Externally created WebGL context or WebGPU device
         */
        async attachDevice(handle, props) {
          const type = this._getTypeFromHandle(handle, props.adapters);
          const adapter = type && this.selectAdapter(type, props.adapters);
          if (!adapter) {
            throw new Error(ERROR_MESSAGE);
          }
          return await adapter?.attach?.(handle, props);
        }
        /**
         * Global adapter registration.
         * @deprecated Use props.adapters instead
         */
        registerAdapters(adapters) {
          for (const deviceClass of adapters) {
            this.preregisteredAdapters.set(deviceClass.type, deviceClass);
          }
        }
        /** Get type strings for supported Devices */
        getSupportedAdapters(adapters = []) {
          const adapterMap = this._getAdapterMap(adapters);
          return Array.from(adapterMap).map(([, adapter]) => adapter).filter((adapter) => adapter.isSupported?.()).map((adapter) => adapter.type);
        }
        /** Get type strings for best available Device */
        getBestAvailableAdapterType(adapters = []) {
          const KNOWN_ADAPTERS = ["webgpu", "webgl", "null"];
          const adapterMap = this._getAdapterMap(adapters);
          for (const type of KNOWN_ADAPTERS) {
            if (adapterMap.get(type)?.isSupported?.()) {
              return type;
            }
          }
          return null;
        }
        /** Select adapter of type from registered adapters */
        selectAdapter(type, adapters = []) {
          let selectedType = type;
          if (type === "best-available") {
            selectedType = this.getBestAvailableAdapterType(adapters);
          }
          const adapterMap = this._getAdapterMap(adapters);
          return selectedType && adapterMap.get(selectedType) || null;
        }
        /**
         * Override `HTMLCanvasContext.getCanvas()` to always create WebGL2 contexts with additional WebGL1 compatibility.
         * Useful when attaching luma to a context from an external library does not support creating WebGL2 contexts.
         */
        enforceWebGL2(enforce = true, adapters = []) {
          const adapterMap = this._getAdapterMap(adapters);
          const webgl2Adapter2 = adapterMap.get("webgl");
          if (!webgl2Adapter2) {
            log2.warn("enforceWebGL2: webgl adapter not found")();
          }
          webgl2Adapter2?.enforceWebGL2?.(enforce);
        }
        // DEPRECATED
        /** @deprecated */
        setDefaultDeviceProps(props) {
          Object.assign(_Luma.defaultProps, props);
        }
        // HELPERS
        /** Convert a list of adapters to a map */
        _getAdapterMap(adapters = []) {
          const map6 = new Map(this.preregisteredAdapters);
          for (const adapter of adapters) {
            map6.set(adapter.type, adapter);
          }
          return map6;
        }
        /** Get type of a handle (for attachDevice) */
        _getTypeFromHandle(handle, adapters = []) {
          if (handle instanceof WebGL2RenderingContext) {
            return "webgl";
          }
          if (typeof GPUDevice !== "undefined" && handle instanceof GPUDevice) {
            return "webgpu";
          }
          if (handle?.queue) {
            return "webgpu";
          }
          if (handle === null) {
            return "null";
          }
          if (handle instanceof WebGLRenderingContext) {
            log2.warn("WebGL1 is not supported", handle)();
          } else {
            log2.warn("Unknown handle type", handle)();
          }
          return null;
        }
      };
      Luma = _Luma;
      __publicField(Luma, "defaultProps", {
        ...Device.defaultProps,
        type: "best-available",
        adapters: void 0,
        waitForPageLoad: true
      });
      luma = new Luma();
    }
  });

  // ../../node_modules/@luma.gl/core/dist/adapter/adapter.js
  function getPageLoadPromise() {
    if (!pageLoadPromise) {
      if (isPageLoaded() || typeof window === "undefined") {
        pageLoadPromise = Promise.resolve();
      } else {
        pageLoadPromise = new Promise((resolve2) => window.addEventListener("load", () => resolve2()));
      }
    }
    return pageLoadPromise;
  }
  var Adapter, isPage, isPageLoaded, pageLoadPromise;
  var init_adapter = __esm({
    "../../node_modules/@luma.gl/core/dist/adapter/adapter.js"() {
      init_dist();
      Adapter = class {
        /**
         * Page load promise
         * Resolves when the DOM is loaded.
         * @note Since are be limitations on number of `load` event listeners,
         * it is recommended avoid calling this accessor until actually needed.
         * I.e. we don't call it unless you know that you will be looking up a string in the DOM.
         */
        get pageLoaded() {
          return getPageLoadPromise();
        }
      };
      isPage = isBrowser2() && typeof document !== "undefined";
      isPageLoaded = () => isPage && document.readyState === "complete";
      pageLoadPromise = null;
    }
  });

  // ../../node_modules/@luma.gl/core/dist/utils/promise-utils.js
  function withResolvers() {
    let resolve2;
    let reject;
    const promise = new Promise((_resolve, _reject) => {
      resolve2 = _resolve;
      reject = _reject;
    });
    return { promise, resolve: resolve2, reject };
  }
  var init_promise_utils = __esm({
    "../../node_modules/@luma.gl/core/dist/utils/promise-utils.js"() {
    }
  });

  // ../../node_modules/@luma.gl/core/dist/adapter/canvas-context.js
  function getContainer(container) {
    if (typeof container === "string") {
      const element = document.getElementById(container);
      if (!element) {
        throw new Error(`${container} is not an HTML element`);
      }
      return element;
    }
    if (container) {
      return container;
    }
    return document.body;
  }
  function getCanvasFromDOM(canvasId) {
    const canvas2 = document.getElementById(canvasId);
    if (!CanvasContext.isHTMLCanvas(canvas2)) {
      throw new Error("Object is not a canvas element");
    }
    return canvas2;
  }
  function createCanvasElement(props) {
    const { width, height } = props;
    const newCanvas = document.createElement("canvas");
    newCanvas.id = uid("lumagl-auto-created-canvas");
    newCanvas.width = width || 1;
    newCanvas.height = height || 1;
    newCanvas.style.width = Number.isFinite(width) ? `${width}px` : "100%";
    newCanvas.style.height = Number.isFinite(height) ? `${height}px` : "100%";
    if (!props?.visible) {
      newCanvas.style.visibility = "hidden";
    }
    const container = getContainer(props?.container || null);
    container.insertBefore(newCanvas, container.firstChild);
    return newCanvas;
  }
  function scalePixels(pixel, ratio, width, height, yInvert) {
    const point = pixel;
    const x4 = scaleX(point[0], ratio, width);
    let y5 = scaleY(point[1], ratio, height, yInvert);
    let t5 = scaleX(point[0] + 1, ratio, width);
    const xHigh = t5 === width - 1 ? t5 : t5 - 1;
    t5 = scaleY(point[1] + 1, ratio, height, yInvert);
    let yHigh;
    if (yInvert) {
      t5 = t5 === 0 ? t5 : t5 + 1;
      yHigh = y5;
      y5 = t5;
    } else {
      yHigh = t5 === height - 1 ? t5 : t5 - 1;
    }
    return {
      x: x4,
      y: y5,
      // when ratio < 1, current css pixel and next css pixel may point to same device pixel, set width/height to 1 in those cases.
      width: Math.max(xHigh - x4 + 1, 1),
      height: Math.max(yHigh - y5 + 1, 1)
    };
  }
  function scaleX(x4, ratio, width) {
    const r5 = Math.min(Math.round(x4 * ratio), width - 1);
    return r5;
  }
  function scaleY(y5, ratio, height, yInvert) {
    return yInvert ? Math.max(0, height - 1 - Math.round(y5 * ratio)) : Math.min(Math.round(y5 * ratio), height - 1);
  }
  var _CanvasContext, CanvasContext;
  var init_canvas_context = __esm({
    "../../node_modules/@luma.gl/core/dist/adapter/canvas-context.js"() {
      init_dist();
      init_uid();
      init_promise_utils();
      _CanvasContext = class {
        static isHTMLCanvas(canvas2) {
          return typeof HTMLCanvasElement !== "undefined" && canvas2 instanceof HTMLCanvasElement;
        }
        static isOffscreenCanvas(canvas2) {
          return typeof OffscreenCanvas !== "undefined" && canvas2 instanceof OffscreenCanvas;
        }
        id;
        props;
        canvas;
        /** Handle to HTML canvas */
        htmlCanvas;
        /** Handle to wrapped OffScreenCanvas */
        offscreenCanvas;
        type;
        /** Promise that resolved once the resize observer has updated the pixel size */
        initialized;
        isInitialized = false;
        /** Visibility is automatically updated (via an IntersectionObserver) */
        isVisible = true;
        /** Width of canvas in CSS units (tracked by a ResizeObserver) */
        cssWidth;
        /** Height of canvas in CSS units (tracked by a ResizeObserver) */
        cssHeight;
        /** Device pixel ratio. Automatically updated via media queries */
        devicePixelRatio;
        /** Exact width of canvas in physical pixels (tracked by a ResizeObserver) */
        devicePixelWidth;
        /** Exact height of canvas in physical pixels (tracked by a ResizeObserver) */
        devicePixelHeight;
        /** Width of drawing buffer: automatically tracks this.pixelWidth if props.autoResize is true */
        drawingBufferWidth;
        /** Height of drawing buffer: automatically tracks this.pixelHeight if props.autoResize is true */
        drawingBufferHeight;
        _initializedResolvers = withResolvers();
        _resizeObserver;
        _intersectionObserver;
        _position;
        destroyed = false;
        toString() {
          return `${this[Symbol.toStringTag]}(${this.id})`;
        }
        constructor(props) {
          this.props = { ..._CanvasContext.defaultProps, ...props };
          props = this.props;
          this.initialized = this._initializedResolvers.promise;
          if (!isBrowser2()) {
            this.canvas = { width: props.width || 1, height: props.height || 1 };
          } else if (!props.canvas) {
            this.canvas = createCanvasElement(props);
          } else if (typeof props.canvas === "string") {
            this.canvas = getCanvasFromDOM(props.canvas);
          } else {
            this.canvas = props.canvas;
          }
          if (_CanvasContext.isHTMLCanvas(this.canvas)) {
            this.id = props.id || this.canvas.id;
            this.type = "html-canvas";
            this.htmlCanvas = this.canvas;
          } else if (_CanvasContext.isOffscreenCanvas(this.canvas)) {
            this.id = props.id || "offscreen-canvas";
            this.type = "offscreen-canvas";
            this.offscreenCanvas = this.canvas;
          } else {
            this.id = props.id || "node-canvas-context";
            this.type = "node";
          }
          this.cssWidth = this.htmlCanvas?.clientWidth || this.canvas.width;
          this.cssHeight = this.htmlCanvas?.clientHeight || this.canvas.height;
          this.devicePixelWidth = this.canvas.width;
          this.devicePixelHeight = this.canvas.height;
          this.drawingBufferWidth = this.canvas.width;
          this.drawingBufferHeight = this.canvas.height;
          this.devicePixelRatio = globalThis.devicePixelRatio || 1;
          this._position = [0, 0];
          if (_CanvasContext.isHTMLCanvas(this.canvas)) {
            this._intersectionObserver = new IntersectionObserver((entries) => this._handleIntersection(entries));
            this._intersectionObserver.observe(this.canvas);
            this._resizeObserver = new ResizeObserver((entries) => this._handleResize(entries));
            try {
              this._resizeObserver.observe(this.canvas, { box: "device-pixel-content-box" });
            } catch {
              this._resizeObserver.observe(this.canvas, { box: "content-box" });
            }
            setTimeout(() => this._observeDevicePixelRatio(), 0);
            if (this.props.trackPosition) {
              this._trackPosition();
            }
          }
        }
        destroy() {
          this.destroyed = true;
        }
        setProps(props) {
          if ("useDevicePixels" in props) {
            this.props.useDevicePixels = props.useDevicePixels || false;
            this._updateDrawingBufferSize();
          }
          return this;
        }
        // SIZE METHODS
        /**
         * Returns the size covered by the canvas in CSS pixels
         * @note This can be different from the actual device pixel size of a canvas due to DPR scaling, and rounding to integer pixels
         * @note This is independent of the canvas' internal drawing buffer size (.width, .height).
         */
        getCSSSize() {
          return [this.cssWidth, this.cssHeight];
        }
        getPosition() {
          return this._position;
        }
        /**
         * Returns the size covered by the canvas in actual device pixels.
         * @note This can be different from the 'CSS' size of a canvas due to DPR scaling, and rounding to integer pixels
         * @note This is independent of the canvas' internal drawing buffer size (.width, .height).
         */
        getDevicePixelSize() {
          return [this.devicePixelWidth, this.devicePixelHeight];
        }
        /** Get the drawing buffer size (number of pixels GPU is rendering into, can be different from CSS size) */
        getDrawingBufferSize() {
          return [this.drawingBufferWidth, this.drawingBufferHeight];
        }
        /** Returns the biggest allowed framebuffer size. @todo Allow the application to limit this? */
        getMaxDrawingBufferSize() {
          const maxTextureDimension = this.device.limits.maxTextureDimension2D;
          return [maxTextureDimension, maxTextureDimension];
        }
        /** Update the canvas drawing buffer size. Called automatically if props.autoResize is true. */
        setDrawingBufferSize(width, height) {
          this.canvas.width = width;
          this.canvas.height = height;
          this.drawingBufferWidth = width;
          this.drawingBufferHeight = height;
        }
        /**
         * Returns the current DPR (number of physical pixels per CSS pixel), if props.useDevicePixels is true
         * @note This can be a fractional (non-integer) number, e.g. when the user zooms in the browser.
         * @note This function handles the non-HTML canvas cases
         */
        getDevicePixelRatio() {
          const dpr = typeof window !== "undefined" && window.devicePixelRatio;
          return dpr || 1;
        }
        // DEPRECATED METHODS
        /**
         * Maps CSS pixel position to device pixel position
         */
        cssToDevicePixels(cssPixel, yInvert = true) {
          const ratio = this.cssToDeviceRatio();
          const [width, height] = this.getDrawingBufferSize();
          return scalePixels(cssPixel, ratio, width, height, yInvert);
        }
        /** @deprecated - use .getDevicePixelSize() */
        getPixelSize() {
          return this.getDevicePixelSize();
        }
        /** @deprecated - TODO which values should we use for aspect */
        getAspect() {
          const [width, height] = this.getDevicePixelSize();
          return width / height;
        }
        /** @deprecated Returns multiplier need to convert CSS size to Device size */
        cssToDeviceRatio() {
          try {
            const [drawingBufferWidth] = this.getDrawingBufferSize();
            const [cssWidth] = this.getCSSSize();
            return cssWidth ? drawingBufferWidth / cssWidth : 1;
          } catch {
            return 1;
          }
        }
        /** @deprecated Use canvasContext.setDrawingBufferSize() */
        resize(size) {
          this.setDrawingBufferSize(size.width, size.height);
        }
        // IMPLEMENTATION
        /**
         * Allows subclass constructor to override the canvas id for auto created canvases.
         * This can really help when debugging DOM in apps that create multiple devices
         */
        _setAutoCreatedCanvasId(id) {
          if (this.htmlCanvas?.id === "lumagl-auto-created-canvas") {
            this.htmlCanvas.id = id;
          }
        }
        /** reacts to an observed intersection */
        _handleIntersection(entries) {
          const entry = entries.find((entry_) => entry_.target === this.canvas);
          if (!entry) {
            return;
          }
          const isVisible = entry.isIntersecting;
          if (this.isVisible !== isVisible) {
            this.isVisible = isVisible;
            this.device.props.onVisibilityChange(this);
          }
        }
        /**
         * Reacts to an observed resize by using the most accurate pixel size information the browser can provide
         * @see https://web.dev/articles/device-pixel-content-box
         * @see https://webgpufundamentals.org/webgpu/lessons/webgpu-resizing-the-canvas.html
         */
        _handleResize(entries) {
          const entry = entries.find((entry_) => entry_.target === this.canvas);
          if (!entry) {
            return;
          }
          this.cssWidth = entry.contentBoxSize[0].inlineSize;
          this.cssHeight = entry.contentBoxSize[0].blockSize;
          const oldPixelSize = this.getDevicePixelSize();
          const devicePixelWidth = entry.devicePixelContentBoxSize?.[0].inlineSize || entry.contentBoxSize[0].inlineSize * devicePixelRatio;
          const devicePixelHeight = entry.devicePixelContentBoxSize?.[0].blockSize || entry.contentBoxSize[0].blockSize * devicePixelRatio;
          const [maxDevicePixelWidth, maxDevicePixelHeight] = this.getMaxDrawingBufferSize();
          this.devicePixelWidth = Math.max(1, Math.min(devicePixelWidth, maxDevicePixelWidth));
          this.devicePixelHeight = Math.max(1, Math.min(devicePixelHeight, maxDevicePixelHeight));
          this._updateDrawingBufferSize();
          this.device.props.onResize(this, { oldPixelSize });
        }
        _updateDrawingBufferSize() {
          if (this.props.autoResize) {
            if (typeof this.props.useDevicePixels === "number") {
              const dpr = this.props.useDevicePixels;
              this.setDrawingBufferSize(this.cssWidth * dpr, this.cssHeight * dpr);
            } else if (this.props.useDevicePixels) {
              this.setDrawingBufferSize(this.devicePixelWidth, this.devicePixelHeight);
            } else {
              this.setDrawingBufferSize(this.cssWidth, this.cssHeight);
            }
            this._updateDevice();
          }
          this._initializedResolvers.resolve();
          this.isInitialized = true;
          this.updatePosition();
        }
        /** Monitor DPR changes */
        _observeDevicePixelRatio() {
          const oldRatio = this.devicePixelRatio;
          this.devicePixelRatio = window.devicePixelRatio;
          this.updatePosition();
          this.device.props.onDevicePixelRatioChange(this, { oldRatio });
          matchMedia(`(resolution: ${this.devicePixelRatio}dppx)`).addEventListener("change", () => this._observeDevicePixelRatio(), { once: true });
        }
        /** Start tracking positions with a timer */
        _trackPosition(intervalMs = 100) {
          const intervalId = setInterval(() => {
            if (this.destroyed) {
              clearInterval(intervalId);
            } else {
              this.updatePosition();
            }
          }, intervalMs);
        }
        /**
         * Calculated the absolute position of the canvas
         * @note - getBoundingClientRect() is normally cheap but can be expensive
         * if called before browser has finished a reflow. Should not be the case here.
         */
        updatePosition() {
          const newRect = this.htmlCanvas?.getBoundingClientRect();
          if (newRect) {
            const position = [newRect.left, newRect.top];
            this._position ??= position;
            const positionChanged = position[0] !== this._position[0] || position[1] !== this._position[1];
            if (positionChanged) {
              const oldPosition = this._position;
              this._position = position;
              this.device.props.onPositionChange?.(this, { oldPosition });
            }
          }
        }
      };
      CanvasContext = _CanvasContext;
      __publicField(CanvasContext, "defaultProps", {
        id: void 0,
        canvas: null,
        width: 800,
        height: 600,
        useDevicePixels: true,
        autoResize: true,
        container: null,
        visible: true,
        alphaMode: "opaque",
        colorSpace: "srgb",
        trackPosition: false
      });
    }
  });

  // ../../node_modules/@luma.gl/core/dist/adapter/resources/sampler.js
  var _Sampler, Sampler;
  var init_sampler = __esm({
    "../../node_modules/@luma.gl/core/dist/adapter/resources/sampler.js"() {
      init_resource();
      _Sampler = class extends Resource {
        get [Symbol.toStringTag]() {
          return "Sampler";
        }
        constructor(device, props) {
          props = _Sampler.normalizeProps(device, props);
          super(device, props, _Sampler.defaultProps);
        }
        static normalizeProps(device, props) {
          return props;
        }
      };
      Sampler = _Sampler;
      __publicField(Sampler, "defaultProps", {
        ...Resource.defaultProps,
        type: "color-sampler",
        addressModeU: "clamp-to-edge",
        addressModeV: "clamp-to-edge",
        addressModeW: "clamp-to-edge",
        magFilter: "nearest",
        minFilter: "nearest",
        mipmapFilter: "none",
        lodMinClamp: 0,
        lodMaxClamp: 32,
        // Per WebGPU spec
        compare: "less-equal",
        maxAnisotropy: 1
      });
    }
  });

  // ../../node_modules/@luma.gl/core/dist/adapter/resources/texture.js
  var BASE_DIMENSIONS, _Texture, Texture;
  var init_texture = __esm({
    "../../node_modules/@luma.gl/core/dist/adapter/resources/texture.js"() {
      init_resource();
      init_sampler();
      init_log2();
      BASE_DIMENSIONS = {
        "1d": "1d",
        "2d": "2d",
        "2d-array": "2d",
        cube: "2d",
        "cube-array": "2d",
        "3d": "3d"
      };
      _Texture = class extends Resource {
        /** dimension of this texture */
        dimension;
        /** base dimension of this texture */
        baseDimension;
        /** format of this texture */
        format;
        /** width in pixels of this texture */
        width;
        /** height in pixels of this texture */
        height;
        /** depth of this texture */
        depth;
        /** mip levels in this texture */
        mipLevels;
        /** "Time" of last update. Monotonically increasing timestamp. TODO move to AsyncTexture? */
        updateTimestamp;
        get [Symbol.toStringTag]() {
          return "Texture";
        }
        toString() {
          return `Texture(${this.id},${this.format},${this.width}x${this.height})`;
        }
        /** Do not use directly. Create with device.createTexture() */
        constructor(device, props) {
          props = _Texture.normalizeProps(device, props);
          super(device, props, _Texture.defaultProps);
          this.dimension = this.props.dimension;
          this.baseDimension = BASE_DIMENSIONS[this.dimension];
          this.format = this.props.format;
          this.width = this.props.width;
          this.height = this.props.height;
          this.depth = this.props.depth;
          this.mipLevels = this.props.mipLevels;
          if (this.props.width === void 0 || this.props.height === void 0) {
            if (device.isExternalImage(props.data)) {
              const size = device.getExternalImageSize(props.data);
              this.width = size?.width || 1;
              this.height = size?.height || 1;
            } else {
              this.width = 1;
              this.height = 1;
              if (this.props.width === void 0 || this.props.height === void 0) {
                log2.warn(`${this} created with undefined width or height. This is deprecated. Use AsyncTexture instead.`)();
              }
            }
          }
          this.updateTimestamp = device.incrementTimestamp();
        }
        /** Set sampler props associated with this texture */
        setSampler(sampler) {
          this.sampler = sampler instanceof Sampler ? sampler : this.device.createSampler(sampler);
        }
        /**
         * Create a new texture with the same parameters and optionally a different size
         * @note Textures are immutable and cannot be resized after creation, but we can create a similar texture with the same parameters but a new size.
         * @note Does not copy contents of the texture
         */
        clone(size) {
          return this.device.createTexture({ ...this.props, ...size });
        }
        /** Ensure we have integer coordinates */
        static normalizeProps(device, props) {
          const newProps = { ...props };
          const { width, height } = newProps;
          if (typeof width === "number") {
            newProps.width = Math.max(1, Math.ceil(width));
          }
          if (typeof height === "number") {
            newProps.height = Math.max(1, Math.ceil(height));
          }
          return newProps;
        }
        // HELPERS
        /** Initialize texture with supplied props */
        // eslint-disable-next-line max-statements
        _initializeData(data) {
          if (this.device.isExternalImage(data)) {
            this.copyExternalImage({
              image: data,
              width: this.width,
              height: this.height,
              depth: this.depth,
              mipLevel: 0,
              x: 0,
              y: 0,
              z: 0,
              aspect: "all",
              colorSpace: "srgb",
              premultipliedAlpha: false,
              flipY: false
            });
          } else if (data) {
            this.copyImageData({
              data,
              // width: this.width,
              // height: this.height,
              // depth: this.depth,
              mipLevel: 0,
              x: 0,
              y: 0,
              z: 0,
              aspect: "all"
            });
          }
        }
        _normalizeCopyImageDataOptions(options_) {
          const { width, height, depth } = this;
          const options = { ..._Texture.defaultCopyDataOptions, width, height, depth, ...options_ };
          const info = this.device.getTextureFormatInfo(this.format);
          if (!options_.bytesPerRow && !info.bytesPerPixel) {
            throw new Error(`bytesPerRow must be provided for texture format ${this.format}`);
          }
          options.bytesPerRow = options_.bytesPerRow || width * (info.bytesPerPixel || 4);
          options.rowsPerImage = options_.rowsPerImage || height;
          return options;
        }
        _normalizeCopyExternalImageOptions(options_) {
          const size = this.device.getExternalImageSize(options_.image);
          const options = { ..._Texture.defaultCopyExternalImageOptions, ...size, ...options_ };
          options.width = Math.min(options.width, this.width - options.x);
          options.height = Math.min(options.height, this.height - options.y);
          return options;
        }
      };
      Texture = _Texture;
      /** The texture can be bound for use as a sampled texture in a shader */
      __publicField(Texture, "SAMPLE", 4);
      /** The texture can be bound for use as a storage texture in a shader */
      __publicField(Texture, "STORAGE", 8);
      /** The texture can be used as a color or depth/stencil attachment in a render pass */
      __publicField(Texture, "RENDER", 16);
      /** The texture can be used as the source of a copy operation */
      __publicField(Texture, "COPY_SRC", 1);
      /** he texture can be used as the destination of a copy or write operation */
      __publicField(Texture, "COPY_DST", 2);
      /** @deprecated Use Texture.SAMPLE */
      __publicField(Texture, "TEXTURE", 4);
      /** @deprecated Use Texture.RENDER */
      __publicField(Texture, "RENDER_ATTACHMENT", 16);
      /** Default options */
      __publicField(Texture, "defaultProps", {
        ...Resource.defaultProps,
        data: null,
        dimension: "2d",
        format: "rgba8unorm",
        usage: _Texture.TEXTURE | _Texture.RENDER_ATTACHMENT | _Texture.COPY_DST,
        width: void 0,
        height: void 0,
        depth: 1,
        mipLevels: 1,
        samples: void 0,
        sampler: {},
        view: void 0
      });
      __publicField(Texture, "defaultCopyDataOptions", {
        data: void 0,
        byteOffset: 0,
        bytesPerRow: void 0,
        rowsPerImage: void 0,
        mipLevel: 0,
        x: 0,
        y: 0,
        z: 0,
        aspect: "all"
      });
      /** Default options */
      __publicField(Texture, "defaultCopyExternalImageOptions", {
        image: void 0,
        sourceX: 0,
        sourceY: 0,
        width: void 0,
        height: void 0,
        depth: 1,
        mipLevel: 0,
        x: 0,
        y: 0,
        z: 0,
        aspect: "all",
        colorSpace: "srgb",
        premultipliedAlpha: false,
        flipY: false
      });
    }
  });

  // ../../node_modules/@luma.gl/core/dist/adapter/resources/texture-view.js
  var _TextureView, TextureView;
  var init_texture_view = __esm({
    "../../node_modules/@luma.gl/core/dist/adapter/resources/texture-view.js"() {
      init_resource();
      _TextureView = class extends Resource {
        get [Symbol.toStringTag]() {
          return "TextureView";
        }
        /** Should not be constructed directly. Use `texture.createView(props)` */
        constructor(device, props) {
          super(device, props, _TextureView.defaultProps);
        }
      };
      TextureView = _TextureView;
      __publicField(TextureView, "defaultProps", {
        ...Resource.defaultProps,
        format: void 0,
        dimension: void 0,
        aspect: "all",
        baseMipLevel: 0,
        mipLevelCount: void 0,
        baseArrayLayer: 0,
        arrayLayerCount: void 0
      });
    }
  });

  // ../../node_modules/@luma.gl/core/dist/adapter-utils/format-compiler-log.js
  function formatCompilerLog(shaderLog, source4, options) {
    let formattedLog = "";
    const lines = source4.split(/\r?\n/);
    const log3 = shaderLog.slice().sort((a6, b4) => a6.lineNum - b4.lineNum);
    switch (options?.showSourceCode || "no") {
      case "all":
        let currentMessage = 0;
        for (let lineNum = 1; lineNum <= lines.length; lineNum++) {
          formattedLog += getNumberedLine(lines[lineNum - 1], lineNum, options);
          while (log3.length > currentMessage && log3[currentMessage].lineNum === lineNum) {
            const message2 = log3[currentMessage++];
            formattedLog += formatCompilerMessage(message2, lines, message2.lineNum, {
              ...options,
              inlineSource: false
            });
          }
        }
        while (log3.length > currentMessage) {
          const message2 = log3[currentMessage++];
          formattedLog += formatCompilerMessage(message2, [], 0, {
            ...options,
            inlineSource: false
          });
        }
        return formattedLog;
      case "issues":
      case "no":
        for (const message2 of shaderLog) {
          formattedLog += formatCompilerMessage(message2, lines, message2.lineNum, {
            inlineSource: options?.showSourceCode !== "no"
          });
        }
        return formattedLog;
    }
  }
  function formatCompilerMessage(message2, lines, lineNum, options) {
    if (options?.inlineSource) {
      const numberedLines = getNumberedLines(lines, lineNum);
      const positionIndicator = message2.linePos > 0 ? `${" ".repeat(message2.linePos + 5)}^^^
` : "";
      return `
${numberedLines}${positionIndicator}${message2.type.toUpperCase()}: ${message2.message}

`;
    }
    const color = message2.type === "error" ? "red" : "#8B4000";
    return options?.html ? `<div class='luma-compiler-log-error' style="color:${color};"><b> ${message2.type.toUpperCase()}: ${message2.message}</b></div>` : `${message2.type.toUpperCase()}: ${message2.message}`;
  }
  function getNumberedLines(lines, lineNum, options) {
    let numberedLines = "";
    for (let lineIndex = lineNum - 2; lineIndex <= lineNum; lineIndex++) {
      const sourceLine = lines[lineIndex - 1];
      if (sourceLine !== void 0) {
        numberedLines += getNumberedLine(sourceLine, lineNum, options);
      }
    }
    return numberedLines;
  }
  function getNumberedLine(line, lineNum, options) {
    const escapedLine = options?.html ? escapeHTML(line) : line;
    return `${padLeft(String(lineNum), 4)}: ${escapedLine}${options?.html ? "<br/>" : "\n"}`;
  }
  function padLeft(string, paddedLength) {
    let result = "";
    for (let i7 = string.length; i7 < paddedLength; ++i7) {
      result += " ";
    }
    return result + string;
  }
  function escapeHTML(unsafe) {
    return unsafe.replaceAll("&", "&amp;").replaceAll("<", "&lt;").replaceAll(">", "&gt;").replaceAll('"', "&quot;").replaceAll("'", "&#039;");
  }
  var init_format_compiler_log = __esm({
    "../../node_modules/@luma.gl/core/dist/adapter-utils/format-compiler-log.js"() {
    }
  });

  // ../../node_modules/@luma.gl/core/dist/adapter/resources/shader.js
  function getShaderIdFromProps(props) {
    return getShaderName2(props.source) || props.id || uid(`unnamed ${props.stage}-shader`);
  }
  function getShaderName2(shader, defaultName = "unnamed") {
    const SHADER_NAME_REGEXP = /#define[\s*]SHADER_NAME[\s*]([A-Za-z0-9_-]+)[\s*]/;
    const match = SHADER_NAME_REGEXP.exec(shader);
    return match ? match[1] : defaultName;
  }
  var _Shader, Shader;
  var init_shader = __esm({
    "../../node_modules/@luma.gl/core/dist/adapter/resources/shader.js"() {
      init_resource();
      init_uid();
      init_format_compiler_log();
      _Shader = class extends Resource {
        get [Symbol.toStringTag]() {
          return "Shader";
        }
        /** The stage of this shader */
        stage;
        /** The source code of this shader */
        source;
        /** The compilation status of the shader. 'pending' if compilation is asynchronous, and on production */
        compilationStatus = "pending";
        /** Create a new Shader instance */
        constructor(device, props) {
          props = { ...props, debugShaders: props.debugShaders || device.props.debugShaders || "errors" };
          super(device, { id: getShaderIdFromProps(props), ...props }, _Shader.defaultProps);
          this.stage = this.props.stage;
          this.source = this.props.source;
        }
        /** Get compiler log synchronously (WebGL only) */
        getCompilationInfoSync() {
          return null;
        }
        /** Get translated shader source in host platform's native language (HLSL, GLSL, and even GLSL ES), if available */
        getTranslatedSource() {
          return null;
        }
        // PORTABLE HELPERS
        /** In browser logging of errors */
        async debugShader() {
          const trigger = this.props.debugShaders;
          switch (trigger) {
            case "never":
              return;
            case "errors":
              if (this.compilationStatus === "success") {
                return;
              }
              break;
            case "warnings":
            case "always":
              break;
          }
          const messages = await this.getCompilationInfo();
          if (trigger === "warnings" && messages?.length === 0) {
            return;
          }
          this._displayShaderLog(messages, this.id);
        }
        // PRIVATE
        /**
         * In-browser UI logging of errors
         * TODO - this HTML formatting code should not be in Device, should be pluggable
         */
        _displayShaderLog(messages, shaderId) {
          if (typeof document === "undefined" || !document?.createElement) {
            return;
          }
          const shaderName = shaderId;
          const shaderTitle = `${this.stage} shader "${shaderName}"`;
          let htmlLog = formatCompilerLog(messages, this.source, { showSourceCode: "all", html: true });
          const translatedSource = this.getTranslatedSource();
          if (translatedSource) {
            htmlLog += `<br /><br /><h1>Translated Source</h1><br /><br /><code style="user-select:text;"><pre>${translatedSource}</pre></code>`;
          }
          const button = document.createElement("Button");
          button.innerHTML = `
<h1>Compilation error in ${shaderTitle}</h1><br /><br />
<code style="user-select:text;"><pre>
${htmlLog}
</pre></code>`;
          button.style.top = "10px";
          button.style.left = "10px";
          button.style.position = "absolute";
          button.style.zIndex = "9999";
          button.style.width = "100%";
          button.style.textAlign = "left";
          document.body.appendChild(button);
          const errors = document.getElementsByClassName("luma-compiler-log-error");
          errors[0]?.scrollIntoView();
          button.onclick = () => {
            const dataURI = `data:text/plain,${encodeURIComponent(this.source)}`;
            navigator.clipboard.writeText(dataURI);
          };
        }
      };
      Shader = _Shader;
      __publicField(Shader, "defaultProps", {
        ...Resource.defaultProps,
        language: "auto",
        stage: void 0,
        source: "",
        sourceMap: null,
        entryPoint: "main",
        debugShaders: void 0
      });
    }
  });

  // ../../node_modules/@luma.gl/core/dist/adapter/resources/framebuffer.js
  var _Framebuffer, Framebuffer;
  var init_framebuffer = __esm({
    "../../node_modules/@luma.gl/core/dist/adapter/resources/framebuffer.js"() {
      init_resource();
      init_texture();
      init_log2();
      _Framebuffer = class extends Resource {
        get [Symbol.toStringTag]() {
          return "Framebuffer";
        }
        /** Width of all attachments in this framebuffer */
        width;
        /** Height of all attachments in this framebuffer */
        height;
        constructor(device, props = {}) {
          super(device, props, _Framebuffer.defaultProps);
          this.width = this.props.width;
          this.height = this.props.height;
        }
        /**
         * Create a copy of this framebuffer with new attached textures, with same props but of the specified size.
         * @note Does not copy contents of the attached textures.
         */
        clone(size) {
          const colorAttachments = this.colorAttachments.map((colorAttachment) => colorAttachment.texture.clone(size));
          const depthStencilAttachment = this.depthStencilAttachment && this.depthStencilAttachment.texture.clone(size);
          return this.device.createFramebuffer({ ...this.props, colorAttachments, depthStencilAttachment });
        }
        resize(size) {
          let updateSize = !size;
          if (size) {
            const [width, height] = Array.isArray(size) ? size : [size.width, size.height];
            updateSize = updateSize || height !== this.height || width !== this.width;
            this.width = width;
            this.height = height;
          }
          if (updateSize) {
            log2.log(2, `Resizing framebuffer ${this.id} to ${this.width}x${this.height}`)();
            this.resizeAttachments(this.width, this.height);
          }
        }
        /** Auto creates any textures */
        autoCreateAttachmentTextures() {
          if (this.props.colorAttachments.length === 0 && !this.props.depthStencilAttachment) {
            throw new Error("Framebuffer has noattachments");
          }
          this.colorAttachments = this.props.colorAttachments.map((attachment2, index) => {
            if (typeof attachment2 === "string") {
              const texture = this.createColorTexture(attachment2, index);
              this.attachResource(texture);
              return texture.view;
            }
            if (attachment2 instanceof Texture) {
              return attachment2.view;
            }
            return attachment2;
          });
          const attachment = this.props.depthStencilAttachment;
          if (attachment) {
            if (typeof attachment === "string") {
              const texture = this.createDepthStencilTexture(attachment);
              this.attachResource(texture);
              this.depthStencilAttachment = texture.view;
            } else if (attachment instanceof Texture) {
              this.depthStencilAttachment = attachment.view;
            } else {
              this.depthStencilAttachment = attachment;
            }
          }
        }
        /** Create a color texture */
        createColorTexture(format, index) {
          return this.device.createTexture({
            id: `${this.id}-color-attachment-${index}`,
            usage: Texture.RENDER_ATTACHMENT,
            format,
            width: this.width,
            height: this.height,
            // TODO deprecated? - luma.gl v8 compatibility
            sampler: {
              magFilter: "linear",
              minFilter: "linear"
            }
          });
        }
        /** Create depth stencil texture */
        createDepthStencilTexture(format) {
          return this.device.createTexture({
            id: `${this.id}-depth-stencil-attachment`,
            usage: Texture.RENDER_ATTACHMENT,
            format,
            width: this.width,
            height: this.height
          });
        }
        /**
         * Default implementation of resize
         * Creates new textures with correct size for all attachments.
         * and destroys existing textures if owned
         */
        resizeAttachments(width, height) {
          for (let i7 = 0; i7 < this.colorAttachments.length; ++i7) {
            if (this.colorAttachments[i7]) {
              const resizedTexture = this.colorAttachments[i7].texture.clone({
                width,
                height
              });
              this.destroyAttachedResource(this.colorAttachments[i7]);
              this.colorAttachments[i7] = resizedTexture.view;
              this.attachResource(resizedTexture.view);
            }
          }
          if (this.depthStencilAttachment) {
            const resizedTexture = this.depthStencilAttachment.texture.clone({
              width,
              height
            });
            this.destroyAttachedResource(this.depthStencilAttachment);
            this.depthStencilAttachment = resizedTexture.view;
            this.attachResource(resizedTexture);
          }
          this.updateAttachments();
        }
      };
      Framebuffer = _Framebuffer;
      __publicField(Framebuffer, "defaultProps", {
        ...Resource.defaultProps,
        width: 1,
        height: 1,
        colorAttachments: [],
        // ['rgba8unorm'],
        depthStencilAttachment: null
        // 'depth24plus-stencil8'
      });
    }
  });

  // ../../node_modules/@luma.gl/core/dist/adapter/resources/render-pipeline.js
  var _RenderPipeline, RenderPipeline;
  var init_render_pipeline = __esm({
    "../../node_modules/@luma.gl/core/dist/adapter/resources/render-pipeline.js"() {
      init_resource();
      _RenderPipeline = class extends Resource {
        get [Symbol.toStringTag]() {
          return "RenderPipeline";
        }
        /** The merged layout */
        shaderLayout;
        /** Buffer map describing buffer interleaving etc */
        bufferLayout;
        /** The linking status of the pipeline. 'pending' if linking is asynchronous, and on production */
        linkStatus = "pending";
        /** The hash of the pipeline */
        hash = "";
        constructor(device, props) {
          super(device, props, _RenderPipeline.defaultProps);
          this.shaderLayout = this.props.shaderLayout;
          this.bufferLayout = this.props.bufferLayout || [];
        }
      };
      RenderPipeline = _RenderPipeline;
      __publicField(RenderPipeline, "defaultProps", {
        ...Resource.defaultProps,
        vs: null,
        vertexEntryPoint: "vertexMain",
        vsConstants: {},
        fs: null,
        fragmentEntryPoint: "fragmentMain",
        fsConstants: {},
        shaderLayout: null,
        bufferLayout: [],
        topology: "triangle-list",
        colorAttachmentFormats: void 0,
        depthStencilAttachmentFormat: void 0,
        parameters: {},
        bindings: {},
        uniforms: {}
      });
    }
  });

  // ../../node_modules/@luma.gl/core/dist/adapter/resources/render-pass.js
  var _RenderPass, RenderPass;
  var init_render_pass = __esm({
    "../../node_modules/@luma.gl/core/dist/adapter/resources/render-pass.js"() {
      init_resource();
      _RenderPass = class extends Resource {
        get [Symbol.toStringTag]() {
          return "RenderPass";
        }
        constructor(device, props) {
          props = _RenderPass.normalizeProps(device, props);
          super(device, props, _RenderPass.defaultProps);
        }
        static normalizeProps(device, props) {
          return props;
        }
      };
      RenderPass = _RenderPass;
      /** TODO - should be [0, 0, 0, 0], update once deck.gl tests run clean */
      __publicField(RenderPass, "defaultClearColor", [0, 0, 0, 1]);
      /** Depth 1.0 represents the far plance */
      __publicField(RenderPass, "defaultClearDepth", 1);
      /** Clears all stencil bits */
      __publicField(RenderPass, "defaultClearStencil", 0);
      /** Default properties for RenderPass */
      __publicField(RenderPass, "defaultProps", {
        ...Resource.defaultProps,
        framebuffer: null,
        parameters: void 0,
        clearColor: _RenderPass.defaultClearColor,
        clearColors: void 0,
        clearDepth: _RenderPass.defaultClearDepth,
        clearStencil: _RenderPass.defaultClearStencil,
        depthReadOnly: false,
        stencilReadOnly: false,
        discard: false,
        occlusionQuerySet: void 0,
        timestampQuerySet: void 0,
        beginTimestampIndex: void 0,
        endTimestampIndex: void 0
      });
    }
  });

  // ../../node_modules/@luma.gl/core/dist/adapter/resources/compute-pipeline.js
  var _ComputePipeline, ComputePipeline;
  var init_compute_pipeline = __esm({
    "../../node_modules/@luma.gl/core/dist/adapter/resources/compute-pipeline.js"() {
      init_resource();
      _ComputePipeline = class extends Resource {
        get [Symbol.toStringTag]() {
          return "ComputePipeline";
        }
        hash = "";
        /** The merged shader layout */
        shaderLayout;
        constructor(device, props) {
          super(device, props, _ComputePipeline.defaultProps);
          this.shaderLayout = props.shaderLayout;
        }
      };
      ComputePipeline = _ComputePipeline;
      __publicField(ComputePipeline, "defaultProps", {
        ...Resource.defaultProps,
        shader: void 0,
        entryPoint: void 0,
        constants: {},
        shaderLayout: void 0
      });
    }
  });

  // ../../node_modules/@luma.gl/core/dist/adapter/resources/command-encoder.js
  var _CommandEncoder, CommandEncoder;
  var init_command_encoder = __esm({
    "../../node_modules/@luma.gl/core/dist/adapter/resources/command-encoder.js"() {
      init_resource();
      _CommandEncoder = class extends Resource {
        get [Symbol.toStringTag]() {
          return "CommandEncoder";
        }
        constructor(device, props) {
          super(device, props, _CommandEncoder.defaultProps);
        }
      };
      CommandEncoder = _CommandEncoder;
      // TODO - luma.gl has these on the device, should we align with WebGPU API?
      // beginRenderPass(GPURenderPassDescriptor descriptor): GPURenderPassEncoder;
      // beginComputePass(optional GPUComputePassDescriptor descriptor = {}): GPUComputePassEncoder;
      __publicField(CommandEncoder, "defaultProps", {
        ...Resource.defaultProps,
        measureExecutionTime: void 0
      });
    }
  });

  // ../../node_modules/@luma.gl/core/dist/adapter/resources/command-buffer.js
  var _CommandBuffer, CommandBuffer;
  var init_command_buffer = __esm({
    "../../node_modules/@luma.gl/core/dist/adapter/resources/command-buffer.js"() {
      init_resource();
      _CommandBuffer = class extends Resource {
        get [Symbol.toStringTag]() {
          return "CommandBuffer";
        }
        constructor(device, props) {
          super(device, props, _CommandBuffer.defaultProps);
        }
      };
      CommandBuffer = _CommandBuffer;
      __publicField(CommandBuffer, "defaultProps", {
        ...Resource.defaultProps
      });
    }
  });

  // ../../node_modules/@luma.gl/core/dist/shadertypes/data-types/decode-shader-types.js
  function getVariableShaderTypeInfo(format) {
    const decoded = UNIFORM_FORMATS[format];
    return decoded;
  }
  function getAttributeShaderTypeInfo(attributeType) {
    const [primitiveType, components] = TYPE_INFO[attributeType];
    const integer = primitiveType === "i32" || primitiveType === "u32";
    const signed = primitiveType !== "u32";
    const byteLength = PRIMITIVE_TYPE_SIZES[primitiveType] * components;
    return {
      primitiveType,
      components,
      byteLength,
      integer,
      signed
    };
  }
  var PRIMITIVE_TYPE_SIZES, TYPE_INFO, UNIFORM_FORMATS, WGSL_ATTRIBUTE_TYPE_ALIAS_MAP, WGSL_VARIABLE_TYPE_ALIAS_MAP;
  var init_decode_shader_types = __esm({
    "../../node_modules/@luma.gl/core/dist/shadertypes/data-types/decode-shader-types.js"() {
      PRIMITIVE_TYPE_SIZES = {
        f32: 4,
        f16: 2,
        i32: 4,
        u32: 4
        // 'bool-webgl': 4,
      };
      TYPE_INFO = {
        f32: ["f32", 1],
        "vec2<f32>": ["f32", 2],
        "vec3<f32>": ["f32", 3],
        "vec4<f32>": ["f32", 4],
        f16: ["f16", 1],
        "vec2<f16>": ["f16", 2],
        "vec3<f16>": ["f16", 3],
        "vec4<f16>": ["f16", 4],
        i32: ["i32", 1],
        "vec2<i32>": ["i32", 2],
        "vec3<i32>": ["i32", 3],
        "vec4<i32>": ["i32", 4],
        u32: ["u32", 1],
        "vec2<u32>": ["u32", 2],
        "vec3<u32>": ["u32", 3],
        "vec4<u32>": ["u32", 4]
      };
      UNIFORM_FORMATS = {
        f32: { type: "f32", components: 1 },
        f16: { type: "f16", components: 1 },
        i32: { type: "i32", components: 1 },
        u32: { type: "u32", components: 1 },
        // 'bool-webgl': {type: 'bool-webgl', components: 1},
        "vec2<f32>": { type: "f32", components: 2 },
        "vec3<f32>": { type: "f32", components: 3 },
        "vec4<f32>": { type: "f32", components: 4 },
        "vec2<f16>": { type: "f16", components: 2 },
        "vec3<f16>": { type: "f16", components: 3 },
        "vec4<f16>": { type: "f16", components: 4 },
        "vec2<i32>": { type: "i32", components: 2 },
        "vec3<i32>": { type: "i32", components: 3 },
        "vec4<i32>": { type: "i32", components: 4 },
        "vec2<u32>": { type: "u32", components: 2 },
        "vec3<u32>": { type: "u32", components: 3 },
        "vec4<u32>": { type: "u32", components: 4 },
        "mat2x2<f32>": { type: "f32", components: 4 },
        "mat2x3<f32>": { type: "f32", components: 6 },
        "mat2x4<f32>": { type: "f32", components: 8 },
        "mat3x2<f32>": { type: "f32", components: 6 },
        "mat3x3<f32>": { type: "f32", components: 9 },
        "mat3x4<f32>": { type: "f32", components: 12 },
        "mat4x2<f32>": { type: "f32", components: 8 },
        "mat4x3<f32>": { type: "f32", components: 12 },
        "mat4x4<f32>": { type: "f32", components: 16 },
        "mat2x2<f16>": { type: "f16", components: 4 },
        "mat2x3<f16>": { type: "f16", components: 6 },
        "mat2x4<f16>": { type: "f16", components: 8 },
        "mat3x2<f16>": { type: "f16", components: 6 },
        "mat3x3<f16>": { type: "f16", components: 9 },
        "mat3x4<f16>": { type: "f16", components: 12 },
        "mat4x2<f16>": { type: "f16", components: 8 },
        "mat4x3<f16>": { type: "f16", components: 12 },
        "mat4x4<f16>": { type: "f16", components: 16 },
        "mat2x2<i32>": { type: "i32", components: 4 },
        "mat2x3<i32>": { type: "i32", components: 6 },
        "mat2x4<i32>": { type: "i32", components: 8 },
        "mat3x2<i32>": { type: "i32", components: 6 },
        "mat3x3<i32>": { type: "i32", components: 9 },
        "mat3x4<i32>": { type: "i32", components: 12 },
        "mat4x2<i32>": { type: "i32", components: 8 },
        "mat4x3<i32>": { type: "i32", components: 12 },
        "mat4x4<i32>": { type: "i32", components: 16 },
        "mat2x2<u32>": { type: "u32", components: 4 },
        "mat2x3<u32>": { type: "u32", components: 6 },
        "mat2x4<u32>": { type: "u32", components: 8 },
        "mat3x2<u32>": { type: "u32", components: 6 },
        "mat3x3<u32>": { type: "u32", components: 9 },
        "mat3x4<u32>": { type: "u32", components: 12 },
        "mat4x2<u32>": { type: "u32", components: 8 },
        "mat4x3<u32>": { type: "u32", components: 12 },
        "mat4x4<u32>": { type: "u32", components: 16 }
      };
      WGSL_ATTRIBUTE_TYPE_ALIAS_MAP = {
        vec2i: "vec2<i32>",
        vec3i: "vec3<i32>",
        vec4i: "vec4<i32>",
        vec2u: "vec2<u32>",
        vec3u: "vec3<u32>",
        vec4u: "vec4<u32>",
        vec2f: "vec2<f32>",
        vec3f: "vec3<f32>",
        vec4f: "vec4<f32>",
        // Requires the f16 extension.
        vec2h: "vec2<f16>",
        vec3h: "vec3<f16>",
        vec4h: "vec4<f16>"
      };
      WGSL_VARIABLE_TYPE_ALIAS_MAP = {
        ...WGSL_ATTRIBUTE_TYPE_ALIAS_MAP,
        mat2x2f: "mat2x2<f32>",
        mat2x3f: "mat2x3<f32>",
        mat2x4f: "mat2x4<f32>",
        mat3x2f: "mat3x2<f32>",
        mat3x3f: "mat3x3<f32>",
        mat3x4f: "mat3x4<f32>",
        mat4x2f: "mat4x2<f32>",
        mat4x3f: "mat4x3<f32>",
        mat4x4f: "mat4x4<f32>",
        mat2x2i: "mat2x2<i32>",
        mat2x3i: "mat2x3<i32>",
        mat2x4i: "mat2x4<i32>",
        mat3x2i: "mat3x2<i32>",
        mat3x3i: "mat3x3<i32>",
        mat3x4i: "mat3x4<i32>",
        mat4x2i: "mat4x2<i32>",
        mat4x3i: "mat4x3<i32>",
        mat4x4i: "mat4x4<i32>",
        mat2x2u: "mat2x2<u32>",
        mat2x3u: "mat2x3<u32>",
        mat2x4u: "mat2x4<u32>",
        mat3x2u: "mat3x2<u32>",
        mat3x3u: "mat3x3<u32>",
        mat3x4u: "mat3x4<u32>",
        mat4x2u: "mat4x2<u32>",
        mat4x3u: "mat4x3<u32>",
        mat4x4u: "mat4x4<u32>",
        mat2x2h: "mat2x2<f16>",
        mat2x3h: "mat2x3<f16>",
        mat2x4h: "mat2x4<f16>",
        mat3x2h: "mat3x2<f16>",
        mat3x3h: "mat3x3<f16>",
        mat3x4h: "mat3x4<f16>",
        mat4x2h: "mat4x2<f16>",
        mat4x3h: "mat4x3<f16>",
        mat4x4h: "mat4x4<f16>"
      };
    }
  });

  // ../../node_modules/@luma.gl/core/dist/adapter-utils/get-attribute-from-layouts.js
  function getAttributeInfosFromLayouts(shaderLayout, bufferLayout) {
    const attributeInfos = {};
    for (const attribute of shaderLayout.attributes) {
      const attributeInfo = getAttributeInfoFromLayouts(shaderLayout, bufferLayout, attribute.name);
      if (attributeInfo) {
        attributeInfos[attribute.name] = attributeInfo;
      }
    }
    return attributeInfos;
  }
  function getAttributeInfosByLocation(shaderLayout, bufferLayout, maxVertexAttributes = 16) {
    const attributeInfos = getAttributeInfosFromLayouts(shaderLayout, bufferLayout);
    const locationInfos = new Array(maxVertexAttributes).fill(null);
    for (const attributeInfo of Object.values(attributeInfos)) {
      locationInfos[attributeInfo.location] = attributeInfo;
    }
    return locationInfos;
  }
  function getAttributeInfoFromLayouts(shaderLayout, bufferLayout, name13) {
    const shaderDeclaration = getAttributeFromShaderLayout(shaderLayout, name13);
    const bufferMapping = getAttributeFromBufferLayout(bufferLayout, name13);
    if (!shaderDeclaration) {
      return null;
    }
    const attributeTypeInfo = getAttributeShaderTypeInfo(shaderDeclaration.type);
    const defaultVertexFormat = getCompatibleVertexFormat(attributeTypeInfo);
    const vertexFormat = bufferMapping?.vertexFormat || defaultVertexFormat;
    const vertexFormatInfo = getVertexFormatInfo(vertexFormat);
    return {
      attributeName: bufferMapping?.attributeName || shaderDeclaration.name,
      bufferName: bufferMapping?.bufferName || shaderDeclaration.name,
      location: shaderDeclaration.location,
      shaderType: shaderDeclaration.type,
      primitiveType: attributeTypeInfo.primitiveType,
      shaderComponents: attributeTypeInfo.components,
      vertexFormat,
      bufferDataType: vertexFormatInfo.type,
      bufferComponents: vertexFormatInfo.components,
      // normalized is a property of the buffer's vertex format
      normalized: vertexFormatInfo.normalized,
      // integer is a property of the shader declaration
      integer: attributeTypeInfo.integer,
      stepMode: bufferMapping?.stepMode || shaderDeclaration.stepMode || "vertex",
      byteOffset: bufferMapping?.byteOffset || 0,
      byteStride: bufferMapping?.byteStride || 0
    };
  }
  function getAttributeFromShaderLayout(shaderLayout, name13) {
    const attribute = shaderLayout.attributes.find((attr) => attr.name === name13);
    if (!attribute) {
      log2.warn(`shader layout attribute "${name13}" not present in shader`);
    }
    return attribute || null;
  }
  function getAttributeFromBufferLayout(bufferLayouts, name13) {
    checkBufferLayouts(bufferLayouts);
    let bufferLayoutInfo = getAttributeFromShortHand(bufferLayouts, name13);
    if (bufferLayoutInfo) {
      return bufferLayoutInfo;
    }
    bufferLayoutInfo = getAttributeFromAttributesList(bufferLayouts, name13);
    if (bufferLayoutInfo) {
      return bufferLayoutInfo;
    }
    log2.warn(`layout for attribute "${name13}" not present in buffer layout`);
    return null;
  }
  function checkBufferLayouts(bufferLayouts) {
    for (const bufferLayout of bufferLayouts) {
      if (bufferLayout.attributes && bufferLayout.format || !bufferLayout.attributes && !bufferLayout.format) {
        log2.warn(`BufferLayout ${name} must have either 'attributes' or 'format' field`);
      }
    }
  }
  function getAttributeFromShortHand(bufferLayouts, name13) {
    for (const bufferLayout of bufferLayouts) {
      if (bufferLayout.format && bufferLayout.name === name13) {
        return {
          attributeName: bufferLayout.name,
          bufferName: name13,
          stepMode: bufferLayout.stepMode,
          vertexFormat: bufferLayout.format,
          // If offset is needed, use `attributes` field.
          byteOffset: 0,
          byteStride: bufferLayout.byteStride || 0
        };
      }
    }
    return null;
  }
  function getAttributeFromAttributesList(bufferLayouts, name13) {
    for (const bufferLayout of bufferLayouts) {
      let byteStride = bufferLayout.byteStride;
      if (typeof bufferLayout.byteStride !== "number") {
        for (const attributeMapping2 of bufferLayout.attributes || []) {
          const info = getVertexFormatInfo(attributeMapping2.format);
          byteStride += info.byteLength;
        }
      }
      const attributeMapping = bufferLayout.attributes?.find((mapping) => mapping.attribute === name13);
      if (attributeMapping) {
        return {
          attributeName: attributeMapping.attribute,
          bufferName: bufferLayout.name,
          stepMode: bufferLayout.stepMode,
          vertexFormat: attributeMapping.format,
          byteOffset: attributeMapping.byteOffset,
          // @ts-ignore
          byteStride
        };
      }
    }
    return null;
  }
  var init_get_attribute_from_layouts = __esm({
    "../../node_modules/@luma.gl/core/dist/adapter-utils/get-attribute-from-layouts.js"() {
      init_log2();
      init_decode_shader_types();
      init_decode_vertex_format();
    }
  });

  // ../../node_modules/@luma.gl/core/dist/adapter/resources/vertex-array.js
  var _VertexArray, VertexArray;
  var init_vertex_array = __esm({
    "../../node_modules/@luma.gl/core/dist/adapter/resources/vertex-array.js"() {
      init_get_attribute_from_layouts();
      init_resource();
      _VertexArray = class extends Resource {
        get [Symbol.toStringTag]() {
          return "VertexArray";
        }
        /** Max number of vertex attributes */
        maxVertexAttributes;
        /** Attribute infos indexed by location - TODO only needed by webgl module? */
        attributeInfos;
        /** Index buffer */
        indexBuffer = null;
        /** Attributes indexed by buffer slot */
        attributes;
        constructor(device, props) {
          super(device, props, _VertexArray.defaultProps);
          this.maxVertexAttributes = device.limits.maxVertexAttributes;
          this.attributes = new Array(this.maxVertexAttributes).fill(null);
          this.attributeInfos = getAttributeInfosByLocation(props.shaderLayout, props.bufferLayout, this.maxVertexAttributes);
        }
        // DEPRECATED METHODS
        /** @deprecated Set constant attributes (WebGL only) */
        setConstantWebGL(location, value) {
          this.device.reportError(new Error("constant attributes not supported"), this)();
        }
      };
      VertexArray = _VertexArray;
      __publicField(VertexArray, "defaultProps", {
        ...Resource.defaultProps,
        shaderLayout: void 0,
        bufferLayout: []
      });
    }
  });

  // ../../node_modules/@luma.gl/core/dist/adapter/resources/transform-feedback.js
  var _TransformFeedback, TransformFeedback;
  var init_transform_feedback = __esm({
    "../../node_modules/@luma.gl/core/dist/adapter/resources/transform-feedback.js"() {
      init_resource();
      _TransformFeedback = class extends Resource {
        get [Symbol.toStringTag]() {
          return "TransformFeedback";
        }
        constructor(device, props) {
          super(device, props, _TransformFeedback.defaultProps);
        }
      };
      TransformFeedback = _TransformFeedback;
      __publicField(TransformFeedback, "defaultProps", {
        ...Resource.defaultProps,
        layout: void 0,
        buffers: {}
      });
    }
  });

  // ../../node_modules/@luma.gl/core/dist/adapter/resources/query-set.js
  var _QuerySet, QuerySet;
  var init_query_set = __esm({
    "../../node_modules/@luma.gl/core/dist/adapter/resources/query-set.js"() {
      init_resource();
      _QuerySet = class extends Resource {
        get [Symbol.toStringTag]() {
          return "QuerySet";
        }
        constructor(device, props) {
          super(device, props, _QuerySet.defaultProps);
        }
      };
      QuerySet = _QuerySet;
      __publicField(QuerySet, "defaultProps", {
        ...Resource.defaultProps,
        type: void 0,
        count: void 0
      });
    }
  });

  // ../../node_modules/@luma.gl/core/dist/utils/array-utils-flat.js
  function getScratchArrayBuffer(byteLength) {
    if (!arrayBuffer || arrayBuffer.byteLength < byteLength) {
      arrayBuffer = new ArrayBuffer(byteLength);
    }
    return arrayBuffer;
  }
  function getScratchArray(Type, length17) {
    const scratchArrayBuffer = getScratchArrayBuffer(Type.BYTES_PER_ELEMENT * length17);
    return new Type(scratchArrayBuffer, 0, length17);
  }
  var arrayBuffer;
  var init_array_utils_flat = __esm({
    "../../node_modules/@luma.gl/core/dist/utils/array-utils-flat.js"() {
    }
  });

  // ../../node_modules/@luma.gl/core/dist/utils/is-array.js
  function isTypedArray(value) {
    return ArrayBuffer.isView(value) && !(value instanceof DataView);
  }
  function isNumberArray(value) {
    if (Array.isArray(value)) {
      return value.length === 0 || typeof value[0] === "number";
    }
    return isTypedArray(value);
  }
  var init_is_array = __esm({
    "../../node_modules/@luma.gl/core/dist/utils/is-array.js"() {
    }
  });

  // ../../node_modules/@luma.gl/core/dist/portable/uniform-buffer-layout.js
  var minBufferSize, UniformBufferLayout;
  var init_uniform_buffer_layout = __esm({
    "../../node_modules/@luma.gl/core/dist/portable/uniform-buffer-layout.js"() {
      init_decode_data_types();
      init_decode_shader_types();
      init_array_utils_flat();
      init_is_array();
      init_log2();
      minBufferSize = 1024;
      UniformBufferLayout = class {
        layout = {};
        /** number of bytes needed for buffer allocation */
        byteLength;
        /** Create a new UniformBufferLayout given a map of attributes. */
        constructor(uniformTypes, uniformSizes = {}) {
          let size = 0;
          for (const [key, uniformType] of Object.entries(uniformTypes)) {
            const typeAndComponents = getVariableShaderTypeInfo(uniformType);
            const { type, components } = typeAndComponents;
            const count3 = components * (uniformSizes?.[key] ?? 1);
            size = alignTo(size, count3);
            const offset = size;
            size += count3;
            this.layout[key] = { type, size: count3, offset };
          }
          size += (4 - size % 4) % 4;
          const actualByteLength = size * 4;
          this.byteLength = Math.max(actualByteLength, minBufferSize);
        }
        /** Get the data for the complete buffer */
        getData(uniformValues) {
          const arrayBuffer2 = getScratchArrayBuffer(this.byteLength);
          const typedArrays = {
            i32: new Int32Array(arrayBuffer2),
            u32: new Uint32Array(arrayBuffer2),
            f32: new Float32Array(arrayBuffer2),
            // TODO not implemented
            f16: new Uint16Array(arrayBuffer2)
          };
          for (const [name13, value] of Object.entries(uniformValues)) {
            const uniformLayout = this.layout[name13];
            if (!uniformLayout) {
              log2.warn(`Supplied uniform value ${name13} not present in uniform block layout`)();
              continue;
            }
            const { type, size, offset } = uniformLayout;
            const typedArray = typedArrays[type];
            if (size === 1) {
              if (typeof value !== "number" && typeof value !== "boolean") {
                log2.warn(`Supplied value for single component uniform ${name13} is not a number: ${value}`)();
                continue;
              }
              typedArray[offset] = Number(value);
            } else {
              if (!isNumberArray(value)) {
                log2.warn(`Supplied value for multi component / array uniform ${name13} is not a numeric array: ${value}`)();
                continue;
              }
              typedArray.set(value, offset);
            }
          }
          return new Uint8Array(arrayBuffer2, 0, this.byteLength);
        }
        /** Does this layout have a field with specified name */
        has(name13) {
          return Boolean(this.layout[name13]);
        }
        /** Get offset and size for a field with specified name */
        get(name13) {
          const layout = this.layout[name13];
          return layout;
        }
      };
    }
  });

  // ../../node_modules/@luma.gl/core/dist/utils/array-equal.js
  function arrayEqual(a6, b4, limit = 16) {
    if (a6 !== b4) {
      return false;
    }
    const arrayA = a6;
    const arrayB = b4;
    if (!isNumberArray(arrayA)) {
      return false;
    }
    if (isNumberArray(arrayB) && arrayA.length === arrayB.length) {
      for (let i7 = 0; i7 < arrayA.length; ++i7) {
        if (arrayB[i7] !== arrayA[i7]) {
          return false;
        }
      }
    }
    return true;
  }
  function arrayCopy(a6) {
    if (isNumberArray(a6)) {
      return a6.slice();
    }
    return a6;
  }
  var init_array_equal = __esm({
    "../../node_modules/@luma.gl/core/dist/utils/array-equal.js"() {
      init_is_array();
    }
  });

  // ../../node_modules/@luma.gl/core/dist/portable/uniform-block.js
  var UniformBlock;
  var init_uniform_block = __esm({
    "../../node_modules/@luma.gl/core/dist/portable/uniform-block.js"() {
      init_array_equal();
      UniformBlock = class {
        name;
        uniforms = {};
        modifiedUniforms = {};
        modified = true;
        bindingLayout = {};
        needsRedraw = "initialized";
        constructor(props) {
          this.name = props?.name || "unnamed";
          if (props?.name && props?.shaderLayout) {
            const binding = props?.shaderLayout.bindings?.find((binding_) => binding_.type === "uniform" && binding_.name === props?.name);
            if (!binding) {
              throw new Error(props?.name);
            }
            const uniformBlock35 = binding;
            for (const uniform of uniformBlock35.uniforms || []) {
              this.bindingLayout[uniform.name] = uniform;
            }
          }
        }
        /** Set a map of uniforms */
        setUniforms(uniforms) {
          for (const [key, value] of Object.entries(uniforms)) {
            this._setUniform(key, value);
            if (!this.needsRedraw) {
              this.setNeedsRedraw(`${this.name}.${key}=${value}`);
            }
          }
        }
        setNeedsRedraw(reason) {
          this.needsRedraw = this.needsRedraw || reason;
        }
        /** Returns all uniforms */
        getAllUniforms() {
          this.modifiedUniforms = {};
          this.needsRedraw = false;
          return this.uniforms || {};
        }
        /** Set a single uniform */
        _setUniform(key, value) {
          if (arrayEqual(this.uniforms[key], value)) {
            return;
          }
          this.uniforms[key] = arrayCopy(value);
          this.modifiedUniforms[key] = true;
          this.modified = true;
        }
      };
    }
  });

  // ../../node_modules/@luma.gl/core/dist/portable/uniform-store.js
  var UniformStore;
  var init_uniform_store = __esm({
    "../../node_modules/@luma.gl/core/dist/portable/uniform-store.js"() {
      init_buffer();
      init_log2();
      init_uniform_block();
      init_uniform_buffer_layout();
      UniformStore = class {
        /** Stores the uniform values for each uniform block */
        uniformBlocks = /* @__PURE__ */ new Map();
        /** Can generate data for a uniform buffer for each block from data */
        uniformBufferLayouts = /* @__PURE__ */ new Map();
        /** Actual buffer for the blocks */
        uniformBuffers = /* @__PURE__ */ new Map();
        /**
         * Create a new UniformStore instance
         * @param blocks
         */
        constructor(blocks) {
          for (const [bufferName, block] of Object.entries(blocks)) {
            const uniformBufferName = bufferName;
            const uniformBufferLayout = new UniformBufferLayout(block.uniformTypes ?? {}, block.uniformSizes ?? {});
            this.uniformBufferLayouts.set(uniformBufferName, uniformBufferLayout);
            const uniformBlock35 = new UniformBlock({ name: bufferName });
            uniformBlock35.setUniforms(block.defaultUniforms || {});
            this.uniformBlocks.set(uniformBufferName, uniformBlock35);
          }
        }
        /** Destroy any managed uniform buffers */
        destroy() {
          for (const uniformBuffer of this.uniformBuffers.values()) {
            uniformBuffer.destroy();
          }
        }
        /**
         * Set uniforms
         * Makes all properties partial
         */
        setUniforms(uniforms) {
          for (const [blockName, uniformValues] of Object.entries(uniforms)) {
            this.uniformBlocks.get(blockName)?.setUniforms(uniformValues);
          }
          this.updateUniformBuffers();
        }
        /** Get the required minimum length of the uniform buffer */
        getUniformBufferByteLength(uniformBufferName) {
          return this.uniformBufferLayouts.get(uniformBufferName)?.byteLength || 0;
        }
        /** Get formatted binary memory that can be uploaded to a buffer */
        getUniformBufferData(uniformBufferName) {
          const uniformValues = this.uniformBlocks.get(uniformBufferName)?.getAllUniforms() || {};
          return this.uniformBufferLayouts.get(uniformBufferName)?.getData(uniformValues);
        }
        /**
         * Creates an unmanaged uniform buffer (umnanaged means that application is responsible for destroying it)
         * The new buffer is initialized with current / supplied values
         */
        createUniformBuffer(device, uniformBufferName, uniforms) {
          if (uniforms) {
            this.setUniforms(uniforms);
          }
          const byteLength = this.getUniformBufferByteLength(uniformBufferName);
          const uniformBuffer = device.createBuffer({
            usage: Buffer2.UNIFORM | Buffer2.COPY_DST,
            byteLength
          });
          const uniformBufferData = this.getUniformBufferData(uniformBufferName);
          uniformBuffer.write(uniformBufferData);
          return uniformBuffer;
        }
        /** Get the managed uniform buffer. "managed" resources are destroyed when the uniformStore is destroyed. */
        getManagedUniformBuffer(device, uniformBufferName) {
          if (!this.uniformBuffers.get(uniformBufferName)) {
            const byteLength = this.getUniformBufferByteLength(uniformBufferName);
            const uniformBuffer = device.createBuffer({
              usage: Buffer2.UNIFORM | Buffer2.COPY_DST,
              byteLength
            });
            this.uniformBuffers.set(uniformBufferName, uniformBuffer);
          }
          return this.uniformBuffers.get(uniformBufferName);
        }
        /** Updates all uniform buffers where values have changed */
        updateUniformBuffers() {
          let reason = false;
          for (const uniformBufferName of this.uniformBlocks.keys()) {
            const bufferReason = this.updateUniformBuffer(uniformBufferName);
            reason ||= bufferReason;
          }
          if (reason) {
            log2.log(3, `UniformStore.updateUniformBuffers(): ${reason}`)();
          }
          return reason;
        }
        /** Update one uniform buffer. Only updates if values have changed */
        updateUniformBuffer(uniformBufferName) {
          const uniformBlock35 = this.uniformBlocks.get(uniformBufferName);
          let uniformBuffer = this.uniformBuffers.get(uniformBufferName);
          let reason = false;
          if (uniformBuffer && uniformBlock35?.needsRedraw) {
            reason ||= uniformBlock35.needsRedraw;
            const uniformBufferData = this.getUniformBufferData(uniformBufferName);
            uniformBuffer = this.uniformBuffers.get(uniformBufferName);
            uniformBuffer?.write(uniformBufferData);
            const uniformValues = this.uniformBlocks.get(uniformBufferName)?.getAllUniforms();
            log2.log(4, `Writing to uniform buffer ${String(uniformBufferName)}`, uniformBufferData, uniformValues)();
          }
          return reason;
        }
      };
    }
  });

  // ../../node_modules/@luma.gl/core/dist/index.js
  var init_dist4 = __esm({
    "../../node_modules/@luma.gl/core/dist/index.js"() {
      init_luma();
      init_adapter();
      init_device();
      init_canvas_context();
      init_buffer();
      init_texture();
      init_texture_view();
      init_shader();
      init_sampler();
      init_framebuffer();
      init_render_pipeline();
      init_render_pass();
      init_compute_pipeline();
      init_command_encoder();
      init_command_buffer();
      init_vertex_array();
      init_transform_feedback();
      init_query_set();
      init_uniform_store();
      init_decode_data_types();
      init_decode_shader_types();
      init_decode_vertex_format();
      init_texture_format_decoder();
      init_log2();
      init_array_utils_flat();
      init_get_attribute_from_layouts();
    }
  });

  // ../../node_modules/@luma.gl/constants/dist/webgl-constants.js
  var GLEnum;
  var init_webgl_constants = __esm({
    "../../node_modules/@luma.gl/constants/dist/webgl-constants.js"() {
      (function(GLEnum3) {
        GLEnum3[GLEnum3["DEPTH_BUFFER_BIT"] = 256] = "DEPTH_BUFFER_BIT";
        GLEnum3[GLEnum3["STENCIL_BUFFER_BIT"] = 1024] = "STENCIL_BUFFER_BIT";
        GLEnum3[GLEnum3["COLOR_BUFFER_BIT"] = 16384] = "COLOR_BUFFER_BIT";
        GLEnum3[GLEnum3["POINTS"] = 0] = "POINTS";
        GLEnum3[GLEnum3["LINES"] = 1] = "LINES";
        GLEnum3[GLEnum3["LINE_LOOP"] = 2] = "LINE_LOOP";
        GLEnum3[GLEnum3["LINE_STRIP"] = 3] = "LINE_STRIP";
        GLEnum3[GLEnum3["TRIANGLES"] = 4] = "TRIANGLES";
        GLEnum3[GLEnum3["TRIANGLE_STRIP"] = 5] = "TRIANGLE_STRIP";
        GLEnum3[GLEnum3["TRIANGLE_FAN"] = 6] = "TRIANGLE_FAN";
        GLEnum3[GLEnum3["ZERO"] = 0] = "ZERO";
        GLEnum3[GLEnum3["ONE"] = 1] = "ONE";
        GLEnum3[GLEnum3["SRC_COLOR"] = 768] = "SRC_COLOR";
        GLEnum3[GLEnum3["ONE_MINUS_SRC_COLOR"] = 769] = "ONE_MINUS_SRC_COLOR";
        GLEnum3[GLEnum3["SRC_ALPHA"] = 770] = "SRC_ALPHA";
        GLEnum3[GLEnum3["ONE_MINUS_SRC_ALPHA"] = 771] = "ONE_MINUS_SRC_ALPHA";
        GLEnum3[GLEnum3["DST_ALPHA"] = 772] = "DST_ALPHA";
        GLEnum3[GLEnum3["ONE_MINUS_DST_ALPHA"] = 773] = "ONE_MINUS_DST_ALPHA";
        GLEnum3[GLEnum3["DST_COLOR"] = 774] = "DST_COLOR";
        GLEnum3[GLEnum3["ONE_MINUS_DST_COLOR"] = 775] = "ONE_MINUS_DST_COLOR";
        GLEnum3[GLEnum3["SRC_ALPHA_SATURATE"] = 776] = "SRC_ALPHA_SATURATE";
        GLEnum3[GLEnum3["CONSTANT_COLOR"] = 32769] = "CONSTANT_COLOR";
        GLEnum3[GLEnum3["ONE_MINUS_CONSTANT_COLOR"] = 32770] = "ONE_MINUS_CONSTANT_COLOR";
        GLEnum3[GLEnum3["CONSTANT_ALPHA"] = 32771] = "CONSTANT_ALPHA";
        GLEnum3[GLEnum3["ONE_MINUS_CONSTANT_ALPHA"] = 32772] = "ONE_MINUS_CONSTANT_ALPHA";
        GLEnum3[GLEnum3["FUNC_ADD"] = 32774] = "FUNC_ADD";
        GLEnum3[GLEnum3["FUNC_SUBTRACT"] = 32778] = "FUNC_SUBTRACT";
        GLEnum3[GLEnum3["FUNC_REVERSE_SUBTRACT"] = 32779] = "FUNC_REVERSE_SUBTRACT";
        GLEnum3[GLEnum3["BLEND_EQUATION"] = 32777] = "BLEND_EQUATION";
        GLEnum3[GLEnum3["BLEND_EQUATION_RGB"] = 32777] = "BLEND_EQUATION_RGB";
        GLEnum3[GLEnum3["BLEND_EQUATION_ALPHA"] = 34877] = "BLEND_EQUATION_ALPHA";
        GLEnum3[GLEnum3["BLEND_DST_RGB"] = 32968] = "BLEND_DST_RGB";
        GLEnum3[GLEnum3["BLEND_SRC_RGB"] = 32969] = "BLEND_SRC_RGB";
        GLEnum3[GLEnum3["BLEND_DST_ALPHA"] = 32970] = "BLEND_DST_ALPHA";
        GLEnum3[GLEnum3["BLEND_SRC_ALPHA"] = 32971] = "BLEND_SRC_ALPHA";
        GLEnum3[GLEnum3["BLEND_COLOR"] = 32773] = "BLEND_COLOR";
        GLEnum3[GLEnum3["ARRAY_BUFFER_BINDING"] = 34964] = "ARRAY_BUFFER_BINDING";
        GLEnum3[GLEnum3["ELEMENT_ARRAY_BUFFER_BINDING"] = 34965] = "ELEMENT_ARRAY_BUFFER_BINDING";
        GLEnum3[GLEnum3["LINE_WIDTH"] = 2849] = "LINE_WIDTH";
        GLEnum3[GLEnum3["ALIASED_POINT_SIZE_RANGE"] = 33901] = "ALIASED_POINT_SIZE_RANGE";
        GLEnum3[GLEnum3["ALIASED_LINE_WIDTH_RANGE"] = 33902] = "ALIASED_LINE_WIDTH_RANGE";
        GLEnum3[GLEnum3["CULL_FACE_MODE"] = 2885] = "CULL_FACE_MODE";
        GLEnum3[GLEnum3["FRONT_FACE"] = 2886] = "FRONT_FACE";
        GLEnum3[GLEnum3["DEPTH_RANGE"] = 2928] = "DEPTH_RANGE";
        GLEnum3[GLEnum3["DEPTH_WRITEMASK"] = 2930] = "DEPTH_WRITEMASK";
        GLEnum3[GLEnum3["DEPTH_CLEAR_VALUE"] = 2931] = "DEPTH_CLEAR_VALUE";
        GLEnum3[GLEnum3["DEPTH_FUNC"] = 2932] = "DEPTH_FUNC";
        GLEnum3[GLEnum3["STENCIL_CLEAR_VALUE"] = 2961] = "STENCIL_CLEAR_VALUE";
        GLEnum3[GLEnum3["STENCIL_FUNC"] = 2962] = "STENCIL_FUNC";
        GLEnum3[GLEnum3["STENCIL_FAIL"] = 2964] = "STENCIL_FAIL";
        GLEnum3[GLEnum3["STENCIL_PASS_DEPTH_FAIL"] = 2965] = "STENCIL_PASS_DEPTH_FAIL";
        GLEnum3[GLEnum3["STENCIL_PASS_DEPTH_PASS"] = 2966] = "STENCIL_PASS_DEPTH_PASS";
        GLEnum3[GLEnum3["STENCIL_REF"] = 2967] = "STENCIL_REF";
        GLEnum3[GLEnum3["STENCIL_VALUE_MASK"] = 2963] = "STENCIL_VALUE_MASK";
        GLEnum3[GLEnum3["STENCIL_WRITEMASK"] = 2968] = "STENCIL_WRITEMASK";
        GLEnum3[GLEnum3["STENCIL_BACK_FUNC"] = 34816] = "STENCIL_BACK_FUNC";
        GLEnum3[GLEnum3["STENCIL_BACK_FAIL"] = 34817] = "STENCIL_BACK_FAIL";
        GLEnum3[GLEnum3["STENCIL_BACK_PASS_DEPTH_FAIL"] = 34818] = "STENCIL_BACK_PASS_DEPTH_FAIL";
        GLEnum3[GLEnum3["STENCIL_BACK_PASS_DEPTH_PASS"] = 34819] = "STENCIL_BACK_PASS_DEPTH_PASS";
        GLEnum3[GLEnum3["STENCIL_BACK_REF"] = 36003] = "STENCIL_BACK_REF";
        GLEnum3[GLEnum3["STENCIL_BACK_VALUE_MASK"] = 36004] = "STENCIL_BACK_VALUE_MASK";
        GLEnum3[GLEnum3["STENCIL_BACK_WRITEMASK"] = 36005] = "STENCIL_BACK_WRITEMASK";
        GLEnum3[GLEnum3["VIEWPORT"] = 2978] = "VIEWPORT";
        GLEnum3[GLEnum3["SCISSOR_BOX"] = 3088] = "SCISSOR_BOX";
        GLEnum3[GLEnum3["COLOR_CLEAR_VALUE"] = 3106] = "COLOR_CLEAR_VALUE";
        GLEnum3[GLEnum3["COLOR_WRITEMASK"] = 3107] = "COLOR_WRITEMASK";
        GLEnum3[GLEnum3["UNPACK_ALIGNMENT"] = 3317] = "UNPACK_ALIGNMENT";
        GLEnum3[GLEnum3["PACK_ALIGNMENT"] = 3333] = "PACK_ALIGNMENT";
        GLEnum3[GLEnum3["MAX_TEXTURE_SIZE"] = 3379] = "MAX_TEXTURE_SIZE";
        GLEnum3[GLEnum3["MAX_VIEWPORT_DIMS"] = 3386] = "MAX_VIEWPORT_DIMS";
        GLEnum3[GLEnum3["SUBPIXEL_BITS"] = 3408] = "SUBPIXEL_BITS";
        GLEnum3[GLEnum3["RED_BITS"] = 3410] = "RED_BITS";
        GLEnum3[GLEnum3["GREEN_BITS"] = 3411] = "GREEN_BITS";
        GLEnum3[GLEnum3["BLUE_BITS"] = 3412] = "BLUE_BITS";
        GLEnum3[GLEnum3["ALPHA_BITS"] = 3413] = "ALPHA_BITS";
        GLEnum3[GLEnum3["DEPTH_BITS"] = 3414] = "DEPTH_BITS";
        GLEnum3[GLEnum3["STENCIL_BITS"] = 3415] = "STENCIL_BITS";
        GLEnum3[GLEnum3["POLYGON_OFFSET_UNITS"] = 10752] = "POLYGON_OFFSET_UNITS";
        GLEnum3[GLEnum3["POLYGON_OFFSET_FACTOR"] = 32824] = "POLYGON_OFFSET_FACTOR";
        GLEnum3[GLEnum3["TEXTURE_BINDING_2D"] = 32873] = "TEXTURE_BINDING_2D";
        GLEnum3[GLEnum3["SAMPLE_BUFFERS"] = 32936] = "SAMPLE_BUFFERS";
        GLEnum3[GLEnum3["SAMPLES"] = 32937] = "SAMPLES";
        GLEnum3[GLEnum3["SAMPLE_COVERAGE_VALUE"] = 32938] = "SAMPLE_COVERAGE_VALUE";
        GLEnum3[GLEnum3["SAMPLE_COVERAGE_INVERT"] = 32939] = "SAMPLE_COVERAGE_INVERT";
        GLEnum3[GLEnum3["COMPRESSED_TEXTURE_FORMATS"] = 34467] = "COMPRESSED_TEXTURE_FORMATS";
        GLEnum3[GLEnum3["VENDOR"] = 7936] = "VENDOR";
        GLEnum3[GLEnum3["RENDERER"] = 7937] = "RENDERER";
        GLEnum3[GLEnum3["VERSION"] = 7938] = "VERSION";
        GLEnum3[GLEnum3["IMPLEMENTATION_COLOR_READ_TYPE"] = 35738] = "IMPLEMENTATION_COLOR_READ_TYPE";
        GLEnum3[GLEnum3["IMPLEMENTATION_COLOR_READ_FORMAT"] = 35739] = "IMPLEMENTATION_COLOR_READ_FORMAT";
        GLEnum3[GLEnum3["BROWSER_DEFAULT_WEBGL"] = 37444] = "BROWSER_DEFAULT_WEBGL";
        GLEnum3[GLEnum3["STATIC_DRAW"] = 35044] = "STATIC_DRAW";
        GLEnum3[GLEnum3["STREAM_DRAW"] = 35040] = "STREAM_DRAW";
        GLEnum3[GLEnum3["DYNAMIC_DRAW"] = 35048] = "DYNAMIC_DRAW";
        GLEnum3[GLEnum3["ARRAY_BUFFER"] = 34962] = "ARRAY_BUFFER";
        GLEnum3[GLEnum3["ELEMENT_ARRAY_BUFFER"] = 34963] = "ELEMENT_ARRAY_BUFFER";
        GLEnum3[GLEnum3["BUFFER_SIZE"] = 34660] = "BUFFER_SIZE";
        GLEnum3[GLEnum3["BUFFER_USAGE"] = 34661] = "BUFFER_USAGE";
        GLEnum3[GLEnum3["CURRENT_VERTEX_ATTRIB"] = 34342] = "CURRENT_VERTEX_ATTRIB";
        GLEnum3[GLEnum3["VERTEX_ATTRIB_ARRAY_ENABLED"] = 34338] = "VERTEX_ATTRIB_ARRAY_ENABLED";
        GLEnum3[GLEnum3["VERTEX_ATTRIB_ARRAY_SIZE"] = 34339] = "VERTEX_ATTRIB_ARRAY_SIZE";
        GLEnum3[GLEnum3["VERTEX_ATTRIB_ARRAY_STRIDE"] = 34340] = "VERTEX_ATTRIB_ARRAY_STRIDE";
        GLEnum3[GLEnum3["VERTEX_ATTRIB_ARRAY_TYPE"] = 34341] = "VERTEX_ATTRIB_ARRAY_TYPE";
        GLEnum3[GLEnum3["VERTEX_ATTRIB_ARRAY_NORMALIZED"] = 34922] = "VERTEX_ATTRIB_ARRAY_NORMALIZED";
        GLEnum3[GLEnum3["VERTEX_ATTRIB_ARRAY_POINTER"] = 34373] = "VERTEX_ATTRIB_ARRAY_POINTER";
        GLEnum3[GLEnum3["VERTEX_ATTRIB_ARRAY_BUFFER_BINDING"] = 34975] = "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING";
        GLEnum3[GLEnum3["CULL_FACE"] = 2884] = "CULL_FACE";
        GLEnum3[GLEnum3["FRONT"] = 1028] = "FRONT";
        GLEnum3[GLEnum3["BACK"] = 1029] = "BACK";
        GLEnum3[GLEnum3["FRONT_AND_BACK"] = 1032] = "FRONT_AND_BACK";
        GLEnum3[GLEnum3["BLEND"] = 3042] = "BLEND";
        GLEnum3[GLEnum3["DEPTH_TEST"] = 2929] = "DEPTH_TEST";
        GLEnum3[GLEnum3["DITHER"] = 3024] = "DITHER";
        GLEnum3[GLEnum3["POLYGON_OFFSET_FILL"] = 32823] = "POLYGON_OFFSET_FILL";
        GLEnum3[GLEnum3["SAMPLE_ALPHA_TO_COVERAGE"] = 32926] = "SAMPLE_ALPHA_TO_COVERAGE";
        GLEnum3[GLEnum3["SAMPLE_COVERAGE"] = 32928] = "SAMPLE_COVERAGE";
        GLEnum3[GLEnum3["SCISSOR_TEST"] = 3089] = "SCISSOR_TEST";
        GLEnum3[GLEnum3["STENCIL_TEST"] = 2960] = "STENCIL_TEST";
        GLEnum3[GLEnum3["NO_ERROR"] = 0] = "NO_ERROR";
        GLEnum3[GLEnum3["INVALID_ENUM"] = 1280] = "INVALID_ENUM";
        GLEnum3[GLEnum3["INVALID_VALUE"] = 1281] = "INVALID_VALUE";
        GLEnum3[GLEnum3["INVALID_OPERATION"] = 1282] = "INVALID_OPERATION";
        GLEnum3[GLEnum3["OUT_OF_MEMORY"] = 1285] = "OUT_OF_MEMORY";
        GLEnum3[GLEnum3["CONTEXT_LOST_WEBGL"] = 37442] = "CONTEXT_LOST_WEBGL";
        GLEnum3[GLEnum3["CW"] = 2304] = "CW";
        GLEnum3[GLEnum3["CCW"] = 2305] = "CCW";
        GLEnum3[GLEnum3["DONT_CARE"] = 4352] = "DONT_CARE";
        GLEnum3[GLEnum3["FASTEST"] = 4353] = "FASTEST";
        GLEnum3[GLEnum3["NICEST"] = 4354] = "NICEST";
        GLEnum3[GLEnum3["GENERATE_MIPMAP_HINT"] = 33170] = "GENERATE_MIPMAP_HINT";
        GLEnum3[GLEnum3["BYTE"] = 5120] = "BYTE";
        GLEnum3[GLEnum3["UNSIGNED_BYTE"] = 5121] = "UNSIGNED_BYTE";
        GLEnum3[GLEnum3["SHORT"] = 5122] = "SHORT";
        GLEnum3[GLEnum3["UNSIGNED_SHORT"] = 5123] = "UNSIGNED_SHORT";
        GLEnum3[GLEnum3["INT"] = 5124] = "INT";
        GLEnum3[GLEnum3["UNSIGNED_INT"] = 5125] = "UNSIGNED_INT";
        GLEnum3[GLEnum3["FLOAT"] = 5126] = "FLOAT";
        GLEnum3[GLEnum3["DOUBLE"] = 5130] = "DOUBLE";
        GLEnum3[GLEnum3["DEPTH_COMPONENT"] = 6402] = "DEPTH_COMPONENT";
        GLEnum3[GLEnum3["ALPHA"] = 6406] = "ALPHA";
        GLEnum3[GLEnum3["RGB"] = 6407] = "RGB";
        GLEnum3[GLEnum3["RGBA"] = 6408] = "RGBA";
        GLEnum3[GLEnum3["LUMINANCE"] = 6409] = "LUMINANCE";
        GLEnum3[GLEnum3["LUMINANCE_ALPHA"] = 6410] = "LUMINANCE_ALPHA";
        GLEnum3[GLEnum3["UNSIGNED_SHORT_4_4_4_4"] = 32819] = "UNSIGNED_SHORT_4_4_4_4";
        GLEnum3[GLEnum3["UNSIGNED_SHORT_5_5_5_1"] = 32820] = "UNSIGNED_SHORT_5_5_5_1";
        GLEnum3[GLEnum3["UNSIGNED_SHORT_5_6_5"] = 33635] = "UNSIGNED_SHORT_5_6_5";
        GLEnum3[GLEnum3["FRAGMENT_SHADER"] = 35632] = "FRAGMENT_SHADER";
        GLEnum3[GLEnum3["VERTEX_SHADER"] = 35633] = "VERTEX_SHADER";
        GLEnum3[GLEnum3["COMPILE_STATUS"] = 35713] = "COMPILE_STATUS";
        GLEnum3[GLEnum3["DELETE_STATUS"] = 35712] = "DELETE_STATUS";
        GLEnum3[GLEnum3["LINK_STATUS"] = 35714] = "LINK_STATUS";
        GLEnum3[GLEnum3["VALIDATE_STATUS"] = 35715] = "VALIDATE_STATUS";
        GLEnum3[GLEnum3["ATTACHED_SHADERS"] = 35717] = "ATTACHED_SHADERS";
        GLEnum3[GLEnum3["ACTIVE_ATTRIBUTES"] = 35721] = "ACTIVE_ATTRIBUTES";
        GLEnum3[GLEnum3["ACTIVE_UNIFORMS"] = 35718] = "ACTIVE_UNIFORMS";
        GLEnum3[GLEnum3["MAX_VERTEX_ATTRIBS"] = 34921] = "MAX_VERTEX_ATTRIBS";
        GLEnum3[GLEnum3["MAX_VERTEX_UNIFORM_VECTORS"] = 36347] = "MAX_VERTEX_UNIFORM_VECTORS";
        GLEnum3[GLEnum3["MAX_VARYING_VECTORS"] = 36348] = "MAX_VARYING_VECTORS";
        GLEnum3[GLEnum3["MAX_COMBINED_TEXTURE_IMAGE_UNITS"] = 35661] = "MAX_COMBINED_TEXTURE_IMAGE_UNITS";
        GLEnum3[GLEnum3["MAX_VERTEX_TEXTURE_IMAGE_UNITS"] = 35660] = "MAX_VERTEX_TEXTURE_IMAGE_UNITS";
        GLEnum3[GLEnum3["MAX_TEXTURE_IMAGE_UNITS"] = 34930] = "MAX_TEXTURE_IMAGE_UNITS";
        GLEnum3[GLEnum3["MAX_FRAGMENT_UNIFORM_VECTORS"] = 36349] = "MAX_FRAGMENT_UNIFORM_VECTORS";
        GLEnum3[GLEnum3["SHADER_TYPE"] = 35663] = "SHADER_TYPE";
        GLEnum3[GLEnum3["SHADING_LANGUAGE_VERSION"] = 35724] = "SHADING_LANGUAGE_VERSION";
        GLEnum3[GLEnum3["CURRENT_PROGRAM"] = 35725] = "CURRENT_PROGRAM";
        GLEnum3[GLEnum3["NEVER"] = 512] = "NEVER";
        GLEnum3[GLEnum3["LESS"] = 513] = "LESS";
        GLEnum3[GLEnum3["EQUAL"] = 514] = "EQUAL";
        GLEnum3[GLEnum3["LEQUAL"] = 515] = "LEQUAL";
        GLEnum3[GLEnum3["GREATER"] = 516] = "GREATER";
        GLEnum3[GLEnum3["NOTEQUAL"] = 517] = "NOTEQUAL";
        GLEnum3[GLEnum3["GEQUAL"] = 518] = "GEQUAL";
        GLEnum3[GLEnum3["ALWAYS"] = 519] = "ALWAYS";
        GLEnum3[GLEnum3["KEEP"] = 7680] = "KEEP";
        GLEnum3[GLEnum3["REPLACE"] = 7681] = "REPLACE";
        GLEnum3[GLEnum3["INCR"] = 7682] = "INCR";
        GLEnum3[GLEnum3["DECR"] = 7683] = "DECR";
        GLEnum3[GLEnum3["INVERT"] = 5386] = "INVERT";
        GLEnum3[GLEnum3["INCR_WRAP"] = 34055] = "INCR_WRAP";
        GLEnum3[GLEnum3["DECR_WRAP"] = 34056] = "DECR_WRAP";
        GLEnum3[GLEnum3["NEAREST"] = 9728] = "NEAREST";
        GLEnum3[GLEnum3["LINEAR"] = 9729] = "LINEAR";
        GLEnum3[GLEnum3["NEAREST_MIPMAP_NEAREST"] = 9984] = "NEAREST_MIPMAP_NEAREST";
        GLEnum3[GLEnum3["LINEAR_MIPMAP_NEAREST"] = 9985] = "LINEAR_MIPMAP_NEAREST";
        GLEnum3[GLEnum3["NEAREST_MIPMAP_LINEAR"] = 9986] = "NEAREST_MIPMAP_LINEAR";
        GLEnum3[GLEnum3["LINEAR_MIPMAP_LINEAR"] = 9987] = "LINEAR_MIPMAP_LINEAR";
        GLEnum3[GLEnum3["TEXTURE_MAG_FILTER"] = 10240] = "TEXTURE_MAG_FILTER";
        GLEnum3[GLEnum3["TEXTURE_MIN_FILTER"] = 10241] = "TEXTURE_MIN_FILTER";
        GLEnum3[GLEnum3["TEXTURE_WRAP_S"] = 10242] = "TEXTURE_WRAP_S";
        GLEnum3[GLEnum3["TEXTURE_WRAP_T"] = 10243] = "TEXTURE_WRAP_T";
        GLEnum3[GLEnum3["TEXTURE_2D"] = 3553] = "TEXTURE_2D";
        GLEnum3[GLEnum3["TEXTURE"] = 5890] = "TEXTURE";
        GLEnum3[GLEnum3["TEXTURE_CUBE_MAP"] = 34067] = "TEXTURE_CUBE_MAP";
        GLEnum3[GLEnum3["TEXTURE_BINDING_CUBE_MAP"] = 34068] = "TEXTURE_BINDING_CUBE_MAP";
        GLEnum3[GLEnum3["TEXTURE_CUBE_MAP_POSITIVE_X"] = 34069] = "TEXTURE_CUBE_MAP_POSITIVE_X";
        GLEnum3[GLEnum3["TEXTURE_CUBE_MAP_NEGATIVE_X"] = 34070] = "TEXTURE_CUBE_MAP_NEGATIVE_X";
        GLEnum3[GLEnum3["TEXTURE_CUBE_MAP_POSITIVE_Y"] = 34071] = "TEXTURE_CUBE_MAP_POSITIVE_Y";
        GLEnum3[GLEnum3["TEXTURE_CUBE_MAP_NEGATIVE_Y"] = 34072] = "TEXTURE_CUBE_MAP_NEGATIVE_Y";
        GLEnum3[GLEnum3["TEXTURE_CUBE_MAP_POSITIVE_Z"] = 34073] = "TEXTURE_CUBE_MAP_POSITIVE_Z";
        GLEnum3[GLEnum3["TEXTURE_CUBE_MAP_NEGATIVE_Z"] = 34074] = "TEXTURE_CUBE_MAP_NEGATIVE_Z";
        GLEnum3[GLEnum3["MAX_CUBE_MAP_TEXTURE_SIZE"] = 34076] = "MAX_CUBE_MAP_TEXTURE_SIZE";
        GLEnum3[GLEnum3["TEXTURE0"] = 33984] = "TEXTURE0";
        GLEnum3[GLEnum3["ACTIVE_TEXTURE"] = 34016] = "ACTIVE_TEXTURE";
        GLEnum3[GLEnum3["REPEAT"] = 10497] = "REPEAT";
        GLEnum3[GLEnum3["CLAMP_TO_EDGE"] = 33071] = "CLAMP_TO_EDGE";
        GLEnum3[GLEnum3["MIRRORED_REPEAT"] = 33648] = "MIRRORED_REPEAT";
        GLEnum3[GLEnum3["TEXTURE_WIDTH"] = 4096] = "TEXTURE_WIDTH";
        GLEnum3[GLEnum3["TEXTURE_HEIGHT"] = 4097] = "TEXTURE_HEIGHT";
        GLEnum3[GLEnum3["FLOAT_VEC2"] = 35664] = "FLOAT_VEC2";
        GLEnum3[GLEnum3["FLOAT_VEC3"] = 35665] = "FLOAT_VEC3";
        GLEnum3[GLEnum3["FLOAT_VEC4"] = 35666] = "FLOAT_VEC4";
        GLEnum3[GLEnum3["INT_VEC2"] = 35667] = "INT_VEC2";
        GLEnum3[GLEnum3["INT_VEC3"] = 35668] = "INT_VEC3";
        GLEnum3[GLEnum3["INT_VEC4"] = 35669] = "INT_VEC4";
        GLEnum3[GLEnum3["BOOL"] = 35670] = "BOOL";
        GLEnum3[GLEnum3["BOOL_VEC2"] = 35671] = "BOOL_VEC2";
        GLEnum3[GLEnum3["BOOL_VEC3"] = 35672] = "BOOL_VEC3";
        GLEnum3[GLEnum3["BOOL_VEC4"] = 35673] = "BOOL_VEC4";
        GLEnum3[GLEnum3["FLOAT_MAT2"] = 35674] = "FLOAT_MAT2";
        GLEnum3[GLEnum3["FLOAT_MAT3"] = 35675] = "FLOAT_MAT3";
        GLEnum3[GLEnum3["FLOAT_MAT4"] = 35676] = "FLOAT_MAT4";
        GLEnum3[GLEnum3["SAMPLER_2D"] = 35678] = "SAMPLER_2D";
        GLEnum3[GLEnum3["SAMPLER_CUBE"] = 35680] = "SAMPLER_CUBE";
        GLEnum3[GLEnum3["LOW_FLOAT"] = 36336] = "LOW_FLOAT";
        GLEnum3[GLEnum3["MEDIUM_FLOAT"] = 36337] = "MEDIUM_FLOAT";
        GLEnum3[GLEnum3["HIGH_FLOAT"] = 36338] = "HIGH_FLOAT";
        GLEnum3[GLEnum3["LOW_INT"] = 36339] = "LOW_INT";
        GLEnum3[GLEnum3["MEDIUM_INT"] = 36340] = "MEDIUM_INT";
        GLEnum3[GLEnum3["HIGH_INT"] = 36341] = "HIGH_INT";
        GLEnum3[GLEnum3["FRAMEBUFFER"] = 36160] = "FRAMEBUFFER";
        GLEnum3[GLEnum3["RENDERBUFFER"] = 36161] = "RENDERBUFFER";
        GLEnum3[GLEnum3["RGBA4"] = 32854] = "RGBA4";
        GLEnum3[GLEnum3["RGB5_A1"] = 32855] = "RGB5_A1";
        GLEnum3[GLEnum3["RGB565"] = 36194] = "RGB565";
        GLEnum3[GLEnum3["DEPTH_COMPONENT16"] = 33189] = "DEPTH_COMPONENT16";
        GLEnum3[GLEnum3["STENCIL_INDEX"] = 6401] = "STENCIL_INDEX";
        GLEnum3[GLEnum3["STENCIL_INDEX8"] = 36168] = "STENCIL_INDEX8";
        GLEnum3[GLEnum3["DEPTH_STENCIL"] = 34041] = "DEPTH_STENCIL";
        GLEnum3[GLEnum3["RENDERBUFFER_WIDTH"] = 36162] = "RENDERBUFFER_WIDTH";
        GLEnum3[GLEnum3["RENDERBUFFER_HEIGHT"] = 36163] = "RENDERBUFFER_HEIGHT";
        GLEnum3[GLEnum3["RENDERBUFFER_INTERNAL_FORMAT"] = 36164] = "RENDERBUFFER_INTERNAL_FORMAT";
        GLEnum3[GLEnum3["RENDERBUFFER_RED_SIZE"] = 36176] = "RENDERBUFFER_RED_SIZE";
        GLEnum3[GLEnum3["RENDERBUFFER_GREEN_SIZE"] = 36177] = "RENDERBUFFER_GREEN_SIZE";
        GLEnum3[GLEnum3["RENDERBUFFER_BLUE_SIZE"] = 36178] = "RENDERBUFFER_BLUE_SIZE";
        GLEnum3[GLEnum3["RENDERBUFFER_ALPHA_SIZE"] = 36179] = "RENDERBUFFER_ALPHA_SIZE";
        GLEnum3[GLEnum3["RENDERBUFFER_DEPTH_SIZE"] = 36180] = "RENDERBUFFER_DEPTH_SIZE";
        GLEnum3[GLEnum3["RENDERBUFFER_STENCIL_SIZE"] = 36181] = "RENDERBUFFER_STENCIL_SIZE";
        GLEnum3[GLEnum3["FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE"] = 36048] = "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE";
        GLEnum3[GLEnum3["FRAMEBUFFER_ATTACHMENT_OBJECT_NAME"] = 36049] = "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME";
        GLEnum3[GLEnum3["FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL"] = 36050] = "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL";
        GLEnum3[GLEnum3["FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE"] = 36051] = "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE";
        GLEnum3[GLEnum3["COLOR_ATTACHMENT0"] = 36064] = "COLOR_ATTACHMENT0";
        GLEnum3[GLEnum3["DEPTH_ATTACHMENT"] = 36096] = "DEPTH_ATTACHMENT";
        GLEnum3[GLEnum3["STENCIL_ATTACHMENT"] = 36128] = "STENCIL_ATTACHMENT";
        GLEnum3[GLEnum3["DEPTH_STENCIL_ATTACHMENT"] = 33306] = "DEPTH_STENCIL_ATTACHMENT";
        GLEnum3[GLEnum3["NONE"] = 0] = "NONE";
        GLEnum3[GLEnum3["FRAMEBUFFER_COMPLETE"] = 36053] = "FRAMEBUFFER_COMPLETE";
        GLEnum3[GLEnum3["FRAMEBUFFER_INCOMPLETE_ATTACHMENT"] = 36054] = "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
        GLEnum3[GLEnum3["FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"] = 36055] = "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
        GLEnum3[GLEnum3["FRAMEBUFFER_INCOMPLETE_DIMENSIONS"] = 36057] = "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
        GLEnum3[GLEnum3["FRAMEBUFFER_UNSUPPORTED"] = 36061] = "FRAMEBUFFER_UNSUPPORTED";
        GLEnum3[GLEnum3["FRAMEBUFFER_BINDING"] = 36006] = "FRAMEBUFFER_BINDING";
        GLEnum3[GLEnum3["RENDERBUFFER_BINDING"] = 36007] = "RENDERBUFFER_BINDING";
        GLEnum3[GLEnum3["READ_FRAMEBUFFER"] = 36008] = "READ_FRAMEBUFFER";
        GLEnum3[GLEnum3["DRAW_FRAMEBUFFER"] = 36009] = "DRAW_FRAMEBUFFER";
        GLEnum3[GLEnum3["MAX_RENDERBUFFER_SIZE"] = 34024] = "MAX_RENDERBUFFER_SIZE";
        GLEnum3[GLEnum3["INVALID_FRAMEBUFFER_OPERATION"] = 1286] = "INVALID_FRAMEBUFFER_OPERATION";
        GLEnum3[GLEnum3["UNPACK_FLIP_Y_WEBGL"] = 37440] = "UNPACK_FLIP_Y_WEBGL";
        GLEnum3[GLEnum3["UNPACK_PREMULTIPLY_ALPHA_WEBGL"] = 37441] = "UNPACK_PREMULTIPLY_ALPHA_WEBGL";
        GLEnum3[GLEnum3["UNPACK_COLORSPACE_CONVERSION_WEBGL"] = 37443] = "UNPACK_COLORSPACE_CONVERSION_WEBGL";
        GLEnum3[GLEnum3["READ_BUFFER"] = 3074] = "READ_BUFFER";
        GLEnum3[GLEnum3["UNPACK_ROW_LENGTH"] = 3314] = "UNPACK_ROW_LENGTH";
        GLEnum3[GLEnum3["UNPACK_SKIP_ROWS"] = 3315] = "UNPACK_SKIP_ROWS";
        GLEnum3[GLEnum3["UNPACK_SKIP_PIXELS"] = 3316] = "UNPACK_SKIP_PIXELS";
        GLEnum3[GLEnum3["PACK_ROW_LENGTH"] = 3330] = "PACK_ROW_LENGTH";
        GLEnum3[GLEnum3["PACK_SKIP_ROWS"] = 3331] = "PACK_SKIP_ROWS";
        GLEnum3[GLEnum3["PACK_SKIP_PIXELS"] = 3332] = "PACK_SKIP_PIXELS";
        GLEnum3[GLEnum3["TEXTURE_BINDING_3D"] = 32874] = "TEXTURE_BINDING_3D";
        GLEnum3[GLEnum3["UNPACK_SKIP_IMAGES"] = 32877] = "UNPACK_SKIP_IMAGES";
        GLEnum3[GLEnum3["UNPACK_IMAGE_HEIGHT"] = 32878] = "UNPACK_IMAGE_HEIGHT";
        GLEnum3[GLEnum3["MAX_3D_TEXTURE_SIZE"] = 32883] = "MAX_3D_TEXTURE_SIZE";
        GLEnum3[GLEnum3["MAX_ELEMENTS_VERTICES"] = 33e3] = "MAX_ELEMENTS_VERTICES";
        GLEnum3[GLEnum3["MAX_ELEMENTS_INDICES"] = 33001] = "MAX_ELEMENTS_INDICES";
        GLEnum3[GLEnum3["MAX_TEXTURE_LOD_BIAS"] = 34045] = "MAX_TEXTURE_LOD_BIAS";
        GLEnum3[GLEnum3["MAX_FRAGMENT_UNIFORM_COMPONENTS"] = 35657] = "MAX_FRAGMENT_UNIFORM_COMPONENTS";
        GLEnum3[GLEnum3["MAX_VERTEX_UNIFORM_COMPONENTS"] = 35658] = "MAX_VERTEX_UNIFORM_COMPONENTS";
        GLEnum3[GLEnum3["MAX_ARRAY_TEXTURE_LAYERS"] = 35071] = "MAX_ARRAY_TEXTURE_LAYERS";
        GLEnum3[GLEnum3["MIN_PROGRAM_TEXEL_OFFSET"] = 35076] = "MIN_PROGRAM_TEXEL_OFFSET";
        GLEnum3[GLEnum3["MAX_PROGRAM_TEXEL_OFFSET"] = 35077] = "MAX_PROGRAM_TEXEL_OFFSET";
        GLEnum3[GLEnum3["MAX_VARYING_COMPONENTS"] = 35659] = "MAX_VARYING_COMPONENTS";
        GLEnum3[GLEnum3["FRAGMENT_SHADER_DERIVATIVE_HINT"] = 35723] = "FRAGMENT_SHADER_DERIVATIVE_HINT";
        GLEnum3[GLEnum3["RASTERIZER_DISCARD"] = 35977] = "RASTERIZER_DISCARD";
        GLEnum3[GLEnum3["VERTEX_ARRAY_BINDING"] = 34229] = "VERTEX_ARRAY_BINDING";
        GLEnum3[GLEnum3["MAX_VERTEX_OUTPUT_COMPONENTS"] = 37154] = "MAX_VERTEX_OUTPUT_COMPONENTS";
        GLEnum3[GLEnum3["MAX_FRAGMENT_INPUT_COMPONENTS"] = 37157] = "MAX_FRAGMENT_INPUT_COMPONENTS";
        GLEnum3[GLEnum3["MAX_SERVER_WAIT_TIMEOUT"] = 37137] = "MAX_SERVER_WAIT_TIMEOUT";
        GLEnum3[GLEnum3["MAX_ELEMENT_INDEX"] = 36203] = "MAX_ELEMENT_INDEX";
        GLEnum3[GLEnum3["RED"] = 6403] = "RED";
        GLEnum3[GLEnum3["RGB8"] = 32849] = "RGB8";
        GLEnum3[GLEnum3["RGBA8"] = 32856] = "RGBA8";
        GLEnum3[GLEnum3["RGB10_A2"] = 32857] = "RGB10_A2";
        GLEnum3[GLEnum3["TEXTURE_3D"] = 32879] = "TEXTURE_3D";
        GLEnum3[GLEnum3["TEXTURE_WRAP_R"] = 32882] = "TEXTURE_WRAP_R";
        GLEnum3[GLEnum3["TEXTURE_MIN_LOD"] = 33082] = "TEXTURE_MIN_LOD";
        GLEnum3[GLEnum3["TEXTURE_MAX_LOD"] = 33083] = "TEXTURE_MAX_LOD";
        GLEnum3[GLEnum3["TEXTURE_BASE_LEVEL"] = 33084] = "TEXTURE_BASE_LEVEL";
        GLEnum3[GLEnum3["TEXTURE_MAX_LEVEL"] = 33085] = "TEXTURE_MAX_LEVEL";
        GLEnum3[GLEnum3["TEXTURE_COMPARE_MODE"] = 34892] = "TEXTURE_COMPARE_MODE";
        GLEnum3[GLEnum3["TEXTURE_COMPARE_FUNC"] = 34893] = "TEXTURE_COMPARE_FUNC";
        GLEnum3[GLEnum3["SRGB"] = 35904] = "SRGB";
        GLEnum3[GLEnum3["SRGB8"] = 35905] = "SRGB8";
        GLEnum3[GLEnum3["SRGB8_ALPHA8"] = 35907] = "SRGB8_ALPHA8";
        GLEnum3[GLEnum3["COMPARE_REF_TO_TEXTURE"] = 34894] = "COMPARE_REF_TO_TEXTURE";
        GLEnum3[GLEnum3["RGBA32F"] = 34836] = "RGBA32F";
        GLEnum3[GLEnum3["RGB32F"] = 34837] = "RGB32F";
        GLEnum3[GLEnum3["RGBA16F"] = 34842] = "RGBA16F";
        GLEnum3[GLEnum3["RGB16F"] = 34843] = "RGB16F";
        GLEnum3[GLEnum3["TEXTURE_2D_ARRAY"] = 35866] = "TEXTURE_2D_ARRAY";
        GLEnum3[GLEnum3["TEXTURE_BINDING_2D_ARRAY"] = 35869] = "TEXTURE_BINDING_2D_ARRAY";
        GLEnum3[GLEnum3["R11F_G11F_B10F"] = 35898] = "R11F_G11F_B10F";
        GLEnum3[GLEnum3["RGB9_E5"] = 35901] = "RGB9_E5";
        GLEnum3[GLEnum3["RGBA32UI"] = 36208] = "RGBA32UI";
        GLEnum3[GLEnum3["RGB32UI"] = 36209] = "RGB32UI";
        GLEnum3[GLEnum3["RGBA16UI"] = 36214] = "RGBA16UI";
        GLEnum3[GLEnum3["RGB16UI"] = 36215] = "RGB16UI";
        GLEnum3[GLEnum3["RGBA8UI"] = 36220] = "RGBA8UI";
        GLEnum3[GLEnum3["RGB8UI"] = 36221] = "RGB8UI";
        GLEnum3[GLEnum3["RGBA32I"] = 36226] = "RGBA32I";
        GLEnum3[GLEnum3["RGB32I"] = 36227] = "RGB32I";
        GLEnum3[GLEnum3["RGBA16I"] = 36232] = "RGBA16I";
        GLEnum3[GLEnum3["RGB16I"] = 36233] = "RGB16I";
        GLEnum3[GLEnum3["RGBA8I"] = 36238] = "RGBA8I";
        GLEnum3[GLEnum3["RGB8I"] = 36239] = "RGB8I";
        GLEnum3[GLEnum3["RED_INTEGER"] = 36244] = "RED_INTEGER";
        GLEnum3[GLEnum3["RGB_INTEGER"] = 36248] = "RGB_INTEGER";
        GLEnum3[GLEnum3["RGBA_INTEGER"] = 36249] = "RGBA_INTEGER";
        GLEnum3[GLEnum3["R8"] = 33321] = "R8";
        GLEnum3[GLEnum3["RG8"] = 33323] = "RG8";
        GLEnum3[GLEnum3["R16F"] = 33325] = "R16F";
        GLEnum3[GLEnum3["R32F"] = 33326] = "R32F";
        GLEnum3[GLEnum3["RG16F"] = 33327] = "RG16F";
        GLEnum3[GLEnum3["RG32F"] = 33328] = "RG32F";
        GLEnum3[GLEnum3["R8I"] = 33329] = "R8I";
        GLEnum3[GLEnum3["R8UI"] = 33330] = "R8UI";
        GLEnum3[GLEnum3["R16I"] = 33331] = "R16I";
        GLEnum3[GLEnum3["R16UI"] = 33332] = "R16UI";
        GLEnum3[GLEnum3["R32I"] = 33333] = "R32I";
        GLEnum3[GLEnum3["R32UI"] = 33334] = "R32UI";
        GLEnum3[GLEnum3["RG8I"] = 33335] = "RG8I";
        GLEnum3[GLEnum3["RG8UI"] = 33336] = "RG8UI";
        GLEnum3[GLEnum3["RG16I"] = 33337] = "RG16I";
        GLEnum3[GLEnum3["RG16UI"] = 33338] = "RG16UI";
        GLEnum3[GLEnum3["RG32I"] = 33339] = "RG32I";
        GLEnum3[GLEnum3["RG32UI"] = 33340] = "RG32UI";
        GLEnum3[GLEnum3["R8_SNORM"] = 36756] = "R8_SNORM";
        GLEnum3[GLEnum3["RG8_SNORM"] = 36757] = "RG8_SNORM";
        GLEnum3[GLEnum3["RGB8_SNORM"] = 36758] = "RGB8_SNORM";
        GLEnum3[GLEnum3["RGBA8_SNORM"] = 36759] = "RGBA8_SNORM";
        GLEnum3[GLEnum3["RGB10_A2UI"] = 36975] = "RGB10_A2UI";
        GLEnum3[GLEnum3["TEXTURE_IMMUTABLE_FORMAT"] = 37167] = "TEXTURE_IMMUTABLE_FORMAT";
        GLEnum3[GLEnum3["TEXTURE_IMMUTABLE_LEVELS"] = 33503] = "TEXTURE_IMMUTABLE_LEVELS";
        GLEnum3[GLEnum3["UNSIGNED_INT_2_10_10_10_REV"] = 33640] = "UNSIGNED_INT_2_10_10_10_REV";
        GLEnum3[GLEnum3["UNSIGNED_INT_10F_11F_11F_REV"] = 35899] = "UNSIGNED_INT_10F_11F_11F_REV";
        GLEnum3[GLEnum3["UNSIGNED_INT_5_9_9_9_REV"] = 35902] = "UNSIGNED_INT_5_9_9_9_REV";
        GLEnum3[GLEnum3["FLOAT_32_UNSIGNED_INT_24_8_REV"] = 36269] = "FLOAT_32_UNSIGNED_INT_24_8_REV";
        GLEnum3[GLEnum3["UNSIGNED_INT_24_8"] = 34042] = "UNSIGNED_INT_24_8";
        GLEnum3[GLEnum3["HALF_FLOAT"] = 5131] = "HALF_FLOAT";
        GLEnum3[GLEnum3["RG"] = 33319] = "RG";
        GLEnum3[GLEnum3["RG_INTEGER"] = 33320] = "RG_INTEGER";
        GLEnum3[GLEnum3["INT_2_10_10_10_REV"] = 36255] = "INT_2_10_10_10_REV";
        GLEnum3[GLEnum3["CURRENT_QUERY"] = 34917] = "CURRENT_QUERY";
        GLEnum3[GLEnum3["QUERY_RESULT"] = 34918] = "QUERY_RESULT";
        GLEnum3[GLEnum3["QUERY_RESULT_AVAILABLE"] = 34919] = "QUERY_RESULT_AVAILABLE";
        GLEnum3[GLEnum3["ANY_SAMPLES_PASSED"] = 35887] = "ANY_SAMPLES_PASSED";
        GLEnum3[GLEnum3["ANY_SAMPLES_PASSED_CONSERVATIVE"] = 36202] = "ANY_SAMPLES_PASSED_CONSERVATIVE";
        GLEnum3[GLEnum3["MAX_DRAW_BUFFERS"] = 34852] = "MAX_DRAW_BUFFERS";
        GLEnum3[GLEnum3["DRAW_BUFFER0"] = 34853] = "DRAW_BUFFER0";
        GLEnum3[GLEnum3["DRAW_BUFFER1"] = 34854] = "DRAW_BUFFER1";
        GLEnum3[GLEnum3["DRAW_BUFFER2"] = 34855] = "DRAW_BUFFER2";
        GLEnum3[GLEnum3["DRAW_BUFFER3"] = 34856] = "DRAW_BUFFER3";
        GLEnum3[GLEnum3["DRAW_BUFFER4"] = 34857] = "DRAW_BUFFER4";
        GLEnum3[GLEnum3["DRAW_BUFFER5"] = 34858] = "DRAW_BUFFER5";
        GLEnum3[GLEnum3["DRAW_BUFFER6"] = 34859] = "DRAW_BUFFER6";
        GLEnum3[GLEnum3["DRAW_BUFFER7"] = 34860] = "DRAW_BUFFER7";
        GLEnum3[GLEnum3["DRAW_BUFFER8"] = 34861] = "DRAW_BUFFER8";
        GLEnum3[GLEnum3["DRAW_BUFFER9"] = 34862] = "DRAW_BUFFER9";
        GLEnum3[GLEnum3["DRAW_BUFFER10"] = 34863] = "DRAW_BUFFER10";
        GLEnum3[GLEnum3["DRAW_BUFFER11"] = 34864] = "DRAW_BUFFER11";
        GLEnum3[GLEnum3["DRAW_BUFFER12"] = 34865] = "DRAW_BUFFER12";
        GLEnum3[GLEnum3["DRAW_BUFFER13"] = 34866] = "DRAW_BUFFER13";
        GLEnum3[GLEnum3["DRAW_BUFFER14"] = 34867] = "DRAW_BUFFER14";
        GLEnum3[GLEnum3["DRAW_BUFFER15"] = 34868] = "DRAW_BUFFER15";
        GLEnum3[GLEnum3["MAX_COLOR_ATTACHMENTS"] = 36063] = "MAX_COLOR_ATTACHMENTS";
        GLEnum3[GLEnum3["COLOR_ATTACHMENT1"] = 36065] = "COLOR_ATTACHMENT1";
        GLEnum3[GLEnum3["COLOR_ATTACHMENT2"] = 36066] = "COLOR_ATTACHMENT2";
        GLEnum3[GLEnum3["COLOR_ATTACHMENT3"] = 36067] = "COLOR_ATTACHMENT3";
        GLEnum3[GLEnum3["COLOR_ATTACHMENT4"] = 36068] = "COLOR_ATTACHMENT4";
        GLEnum3[GLEnum3["COLOR_ATTACHMENT5"] = 36069] = "COLOR_ATTACHMENT5";
        GLEnum3[GLEnum3["COLOR_ATTACHMENT6"] = 36070] = "COLOR_ATTACHMENT6";
        GLEnum3[GLEnum3["COLOR_ATTACHMENT7"] = 36071] = "COLOR_ATTACHMENT7";
        GLEnum3[GLEnum3["COLOR_ATTACHMENT8"] = 36072] = "COLOR_ATTACHMENT8";
        GLEnum3[GLEnum3["COLOR_ATTACHMENT9"] = 36073] = "COLOR_ATTACHMENT9";
        GLEnum3[GLEnum3["COLOR_ATTACHMENT10"] = 36074] = "COLOR_ATTACHMENT10";
        GLEnum3[GLEnum3["COLOR_ATTACHMENT11"] = 36075] = "COLOR_ATTACHMENT11";
        GLEnum3[GLEnum3["COLOR_ATTACHMENT12"] = 36076] = "COLOR_ATTACHMENT12";
        GLEnum3[GLEnum3["COLOR_ATTACHMENT13"] = 36077] = "COLOR_ATTACHMENT13";
        GLEnum3[GLEnum3["COLOR_ATTACHMENT14"] = 36078] = "COLOR_ATTACHMENT14";
        GLEnum3[GLEnum3["COLOR_ATTACHMENT15"] = 36079] = "COLOR_ATTACHMENT15";
        GLEnum3[GLEnum3["SAMPLER_3D"] = 35679] = "SAMPLER_3D";
        GLEnum3[GLEnum3["SAMPLER_2D_SHADOW"] = 35682] = "SAMPLER_2D_SHADOW";
        GLEnum3[GLEnum3["SAMPLER_2D_ARRAY"] = 36289] = "SAMPLER_2D_ARRAY";
        GLEnum3[GLEnum3["SAMPLER_2D_ARRAY_SHADOW"] = 36292] = "SAMPLER_2D_ARRAY_SHADOW";
        GLEnum3[GLEnum3["SAMPLER_CUBE_SHADOW"] = 36293] = "SAMPLER_CUBE_SHADOW";
        GLEnum3[GLEnum3["INT_SAMPLER_2D"] = 36298] = "INT_SAMPLER_2D";
        GLEnum3[GLEnum3["INT_SAMPLER_3D"] = 36299] = "INT_SAMPLER_3D";
        GLEnum3[GLEnum3["INT_SAMPLER_CUBE"] = 36300] = "INT_SAMPLER_CUBE";
        GLEnum3[GLEnum3["INT_SAMPLER_2D_ARRAY"] = 36303] = "INT_SAMPLER_2D_ARRAY";
        GLEnum3[GLEnum3["UNSIGNED_INT_SAMPLER_2D"] = 36306] = "UNSIGNED_INT_SAMPLER_2D";
        GLEnum3[GLEnum3["UNSIGNED_INT_SAMPLER_3D"] = 36307] = "UNSIGNED_INT_SAMPLER_3D";
        GLEnum3[GLEnum3["UNSIGNED_INT_SAMPLER_CUBE"] = 36308] = "UNSIGNED_INT_SAMPLER_CUBE";
        GLEnum3[GLEnum3["UNSIGNED_INT_SAMPLER_2D_ARRAY"] = 36311] = "UNSIGNED_INT_SAMPLER_2D_ARRAY";
        GLEnum3[GLEnum3["MAX_SAMPLES"] = 36183] = "MAX_SAMPLES";
        GLEnum3[GLEnum3["SAMPLER_BINDING"] = 35097] = "SAMPLER_BINDING";
        GLEnum3[GLEnum3["PIXEL_PACK_BUFFER"] = 35051] = "PIXEL_PACK_BUFFER";
        GLEnum3[GLEnum3["PIXEL_UNPACK_BUFFER"] = 35052] = "PIXEL_UNPACK_BUFFER";
        GLEnum3[GLEnum3["PIXEL_PACK_BUFFER_BINDING"] = 35053] = "PIXEL_PACK_BUFFER_BINDING";
        GLEnum3[GLEnum3["PIXEL_UNPACK_BUFFER_BINDING"] = 35055] = "PIXEL_UNPACK_BUFFER_BINDING";
        GLEnum3[GLEnum3["COPY_READ_BUFFER"] = 36662] = "COPY_READ_BUFFER";
        GLEnum3[GLEnum3["COPY_WRITE_BUFFER"] = 36663] = "COPY_WRITE_BUFFER";
        GLEnum3[GLEnum3["COPY_READ_BUFFER_BINDING"] = 36662] = "COPY_READ_BUFFER_BINDING";
        GLEnum3[GLEnum3["COPY_WRITE_BUFFER_BINDING"] = 36663] = "COPY_WRITE_BUFFER_BINDING";
        GLEnum3[GLEnum3["FLOAT_MAT2x3"] = 35685] = "FLOAT_MAT2x3";
        GLEnum3[GLEnum3["FLOAT_MAT2x4"] = 35686] = "FLOAT_MAT2x4";
        GLEnum3[GLEnum3["FLOAT_MAT3x2"] = 35687] = "FLOAT_MAT3x2";
        GLEnum3[GLEnum3["FLOAT_MAT3x4"] = 35688] = "FLOAT_MAT3x4";
        GLEnum3[GLEnum3["FLOAT_MAT4x2"] = 35689] = "FLOAT_MAT4x2";
        GLEnum3[GLEnum3["FLOAT_MAT4x3"] = 35690] = "FLOAT_MAT4x3";
        GLEnum3[GLEnum3["UNSIGNED_INT_VEC2"] = 36294] = "UNSIGNED_INT_VEC2";
        GLEnum3[GLEnum3["UNSIGNED_INT_VEC3"] = 36295] = "UNSIGNED_INT_VEC3";
        GLEnum3[GLEnum3["UNSIGNED_INT_VEC4"] = 36296] = "UNSIGNED_INT_VEC4";
        GLEnum3[GLEnum3["UNSIGNED_NORMALIZED"] = 35863] = "UNSIGNED_NORMALIZED";
        GLEnum3[GLEnum3["SIGNED_NORMALIZED"] = 36764] = "SIGNED_NORMALIZED";
        GLEnum3[GLEnum3["VERTEX_ATTRIB_ARRAY_INTEGER"] = 35069] = "VERTEX_ATTRIB_ARRAY_INTEGER";
        GLEnum3[GLEnum3["VERTEX_ATTRIB_ARRAY_DIVISOR"] = 35070] = "VERTEX_ATTRIB_ARRAY_DIVISOR";
        GLEnum3[GLEnum3["TRANSFORM_FEEDBACK_BUFFER_MODE"] = 35967] = "TRANSFORM_FEEDBACK_BUFFER_MODE";
        GLEnum3[GLEnum3["MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS"] = 35968] = "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS";
        GLEnum3[GLEnum3["TRANSFORM_FEEDBACK_VARYINGS"] = 35971] = "TRANSFORM_FEEDBACK_VARYINGS";
        GLEnum3[GLEnum3["TRANSFORM_FEEDBACK_BUFFER_START"] = 35972] = "TRANSFORM_FEEDBACK_BUFFER_START";
        GLEnum3[GLEnum3["TRANSFORM_FEEDBACK_BUFFER_SIZE"] = 35973] = "TRANSFORM_FEEDBACK_BUFFER_SIZE";
        GLEnum3[GLEnum3["TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN"] = 35976] = "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN";
        GLEnum3[GLEnum3["MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS"] = 35978] = "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS";
        GLEnum3[GLEnum3["MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS"] = 35979] = "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS";
        GLEnum3[GLEnum3["INTERLEAVED_ATTRIBS"] = 35980] = "INTERLEAVED_ATTRIBS";
        GLEnum3[GLEnum3["SEPARATE_ATTRIBS"] = 35981] = "SEPARATE_ATTRIBS";
        GLEnum3[GLEnum3["TRANSFORM_FEEDBACK_BUFFER"] = 35982] = "TRANSFORM_FEEDBACK_BUFFER";
        GLEnum3[GLEnum3["TRANSFORM_FEEDBACK_BUFFER_BINDING"] = 35983] = "TRANSFORM_FEEDBACK_BUFFER_BINDING";
        GLEnum3[GLEnum3["TRANSFORM_FEEDBACK"] = 36386] = "TRANSFORM_FEEDBACK";
        GLEnum3[GLEnum3["TRANSFORM_FEEDBACK_PAUSED"] = 36387] = "TRANSFORM_FEEDBACK_PAUSED";
        GLEnum3[GLEnum3["TRANSFORM_FEEDBACK_ACTIVE"] = 36388] = "TRANSFORM_FEEDBACK_ACTIVE";
        GLEnum3[GLEnum3["TRANSFORM_FEEDBACK_BINDING"] = 36389] = "TRANSFORM_FEEDBACK_BINDING";
        GLEnum3[GLEnum3["FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING"] = 33296] = "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING";
        GLEnum3[GLEnum3["FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE"] = 33297] = "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE";
        GLEnum3[GLEnum3["FRAMEBUFFER_ATTACHMENT_RED_SIZE"] = 33298] = "FRAMEBUFFER_ATTACHMENT_RED_SIZE";
        GLEnum3[GLEnum3["FRAMEBUFFER_ATTACHMENT_GREEN_SIZE"] = 33299] = "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE";
        GLEnum3[GLEnum3["FRAMEBUFFER_ATTACHMENT_BLUE_SIZE"] = 33300] = "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE";
        GLEnum3[GLEnum3["FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE"] = 33301] = "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE";
        GLEnum3[GLEnum3["FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE"] = 33302] = "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE";
        GLEnum3[GLEnum3["FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE"] = 33303] = "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE";
        GLEnum3[GLEnum3["FRAMEBUFFER_DEFAULT"] = 33304] = "FRAMEBUFFER_DEFAULT";
        GLEnum3[GLEnum3["DEPTH24_STENCIL8"] = 35056] = "DEPTH24_STENCIL8";
        GLEnum3[GLEnum3["DRAW_FRAMEBUFFER_BINDING"] = 36006] = "DRAW_FRAMEBUFFER_BINDING";
        GLEnum3[GLEnum3["READ_FRAMEBUFFER_BINDING"] = 36010] = "READ_FRAMEBUFFER_BINDING";
        GLEnum3[GLEnum3["RENDERBUFFER_SAMPLES"] = 36011] = "RENDERBUFFER_SAMPLES";
        GLEnum3[GLEnum3["FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER"] = 36052] = "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER";
        GLEnum3[GLEnum3["FRAMEBUFFER_INCOMPLETE_MULTISAMPLE"] = 36182] = "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE";
        GLEnum3[GLEnum3["UNIFORM_BUFFER"] = 35345] = "UNIFORM_BUFFER";
        GLEnum3[GLEnum3["UNIFORM_BUFFER_BINDING"] = 35368] = "UNIFORM_BUFFER_BINDING";
        GLEnum3[GLEnum3["UNIFORM_BUFFER_START"] = 35369] = "UNIFORM_BUFFER_START";
        GLEnum3[GLEnum3["UNIFORM_BUFFER_SIZE"] = 35370] = "UNIFORM_BUFFER_SIZE";
        GLEnum3[GLEnum3["MAX_VERTEX_UNIFORM_BLOCKS"] = 35371] = "MAX_VERTEX_UNIFORM_BLOCKS";
        GLEnum3[GLEnum3["MAX_FRAGMENT_UNIFORM_BLOCKS"] = 35373] = "MAX_FRAGMENT_UNIFORM_BLOCKS";
        GLEnum3[GLEnum3["MAX_COMBINED_UNIFORM_BLOCKS"] = 35374] = "MAX_COMBINED_UNIFORM_BLOCKS";
        GLEnum3[GLEnum3["MAX_UNIFORM_BUFFER_BINDINGS"] = 35375] = "MAX_UNIFORM_BUFFER_BINDINGS";
        GLEnum3[GLEnum3["MAX_UNIFORM_BLOCK_SIZE"] = 35376] = "MAX_UNIFORM_BLOCK_SIZE";
        GLEnum3[GLEnum3["MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS"] = 35377] = "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS";
        GLEnum3[GLEnum3["MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS"] = 35379] = "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS";
        GLEnum3[GLEnum3["UNIFORM_BUFFER_OFFSET_ALIGNMENT"] = 35380] = "UNIFORM_BUFFER_OFFSET_ALIGNMENT";
        GLEnum3[GLEnum3["ACTIVE_UNIFORM_BLOCKS"] = 35382] = "ACTIVE_UNIFORM_BLOCKS";
        GLEnum3[GLEnum3["UNIFORM_TYPE"] = 35383] = "UNIFORM_TYPE";
        GLEnum3[GLEnum3["UNIFORM_SIZE"] = 35384] = "UNIFORM_SIZE";
        GLEnum3[GLEnum3["UNIFORM_BLOCK_INDEX"] = 35386] = "UNIFORM_BLOCK_INDEX";
        GLEnum3[GLEnum3["UNIFORM_OFFSET"] = 35387] = "UNIFORM_OFFSET";
        GLEnum3[GLEnum3["UNIFORM_ARRAY_STRIDE"] = 35388] = "UNIFORM_ARRAY_STRIDE";
        GLEnum3[GLEnum3["UNIFORM_MATRIX_STRIDE"] = 35389] = "UNIFORM_MATRIX_STRIDE";
        GLEnum3[GLEnum3["UNIFORM_IS_ROW_MAJOR"] = 35390] = "UNIFORM_IS_ROW_MAJOR";
        GLEnum3[GLEnum3["UNIFORM_BLOCK_BINDING"] = 35391] = "UNIFORM_BLOCK_BINDING";
        GLEnum3[GLEnum3["UNIFORM_BLOCK_DATA_SIZE"] = 35392] = "UNIFORM_BLOCK_DATA_SIZE";
        GLEnum3[GLEnum3["UNIFORM_BLOCK_ACTIVE_UNIFORMS"] = 35394] = "UNIFORM_BLOCK_ACTIVE_UNIFORMS";
        GLEnum3[GLEnum3["UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES"] = 35395] = "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES";
        GLEnum3[GLEnum3["UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER"] = 35396] = "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER";
        GLEnum3[GLEnum3["UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER"] = 35398] = "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER";
        GLEnum3[GLEnum3["OBJECT_TYPE"] = 37138] = "OBJECT_TYPE";
        GLEnum3[GLEnum3["SYNC_CONDITION"] = 37139] = "SYNC_CONDITION";
        GLEnum3[GLEnum3["SYNC_STATUS"] = 37140] = "SYNC_STATUS";
        GLEnum3[GLEnum3["SYNC_FLAGS"] = 37141] = "SYNC_FLAGS";
        GLEnum3[GLEnum3["SYNC_FENCE"] = 37142] = "SYNC_FENCE";
        GLEnum3[GLEnum3["SYNC_GPU_COMMANDS_COMPLETE"] = 37143] = "SYNC_GPU_COMMANDS_COMPLETE";
        GLEnum3[GLEnum3["UNSIGNALED"] = 37144] = "UNSIGNALED";
        GLEnum3[GLEnum3["SIGNALED"] = 37145] = "SIGNALED";
        GLEnum3[GLEnum3["ALREADY_SIGNALED"] = 37146] = "ALREADY_SIGNALED";
        GLEnum3[GLEnum3["TIMEOUT_EXPIRED"] = 37147] = "TIMEOUT_EXPIRED";
        GLEnum3[GLEnum3["CONDITION_SATISFIED"] = 37148] = "CONDITION_SATISFIED";
        GLEnum3[GLEnum3["WAIT_FAILED"] = 37149] = "WAIT_FAILED";
        GLEnum3[GLEnum3["SYNC_FLUSH_COMMANDS_BIT"] = 1] = "SYNC_FLUSH_COMMANDS_BIT";
        GLEnum3[GLEnum3["COLOR"] = 6144] = "COLOR";
        GLEnum3[GLEnum3["DEPTH"] = 6145] = "DEPTH";
        GLEnum3[GLEnum3["STENCIL"] = 6146] = "STENCIL";
        GLEnum3[GLEnum3["MIN"] = 32775] = "MIN";
        GLEnum3[GLEnum3["MAX"] = 32776] = "MAX";
        GLEnum3[GLEnum3["DEPTH_COMPONENT24"] = 33190] = "DEPTH_COMPONENT24";
        GLEnum3[GLEnum3["STREAM_READ"] = 35041] = "STREAM_READ";
        GLEnum3[GLEnum3["STREAM_COPY"] = 35042] = "STREAM_COPY";
        GLEnum3[GLEnum3["STATIC_READ"] = 35045] = "STATIC_READ";
        GLEnum3[GLEnum3["STATIC_COPY"] = 35046] = "STATIC_COPY";
        GLEnum3[GLEnum3["DYNAMIC_READ"] = 35049] = "DYNAMIC_READ";
        GLEnum3[GLEnum3["DYNAMIC_COPY"] = 35050] = "DYNAMIC_COPY";
        GLEnum3[GLEnum3["DEPTH_COMPONENT32F"] = 36012] = "DEPTH_COMPONENT32F";
        GLEnum3[GLEnum3["DEPTH32F_STENCIL8"] = 36013] = "DEPTH32F_STENCIL8";
        GLEnum3[GLEnum3["INVALID_INDEX"] = 4294967295] = "INVALID_INDEX";
        GLEnum3[GLEnum3["TIMEOUT_IGNORED"] = -1] = "TIMEOUT_IGNORED";
        GLEnum3[GLEnum3["MAX_CLIENT_WAIT_TIMEOUT_WEBGL"] = 37447] = "MAX_CLIENT_WAIT_TIMEOUT_WEBGL";
        GLEnum3[GLEnum3["UNMASKED_VENDOR_WEBGL"] = 37445] = "UNMASKED_VENDOR_WEBGL";
        GLEnum3[GLEnum3["UNMASKED_RENDERER_WEBGL"] = 37446] = "UNMASKED_RENDERER_WEBGL";
        GLEnum3[GLEnum3["MAX_TEXTURE_MAX_ANISOTROPY_EXT"] = 34047] = "MAX_TEXTURE_MAX_ANISOTROPY_EXT";
        GLEnum3[GLEnum3["TEXTURE_MAX_ANISOTROPY_EXT"] = 34046] = "TEXTURE_MAX_ANISOTROPY_EXT";
        GLEnum3[GLEnum3["R16_EXT"] = 33322] = "R16_EXT";
        GLEnum3[GLEnum3["RG16_EXT"] = 33324] = "RG16_EXT";
        GLEnum3[GLEnum3["RGB16_EXT"] = 32852] = "RGB16_EXT";
        GLEnum3[GLEnum3["RGBA16_EXT"] = 32859] = "RGBA16_EXT";
        GLEnum3[GLEnum3["R16_SNORM_EXT"] = 36760] = "R16_SNORM_EXT";
        GLEnum3[GLEnum3["RG16_SNORM_EXT"] = 36761] = "RG16_SNORM_EXT";
        GLEnum3[GLEnum3["RGB16_SNORM_EXT"] = 36762] = "RGB16_SNORM_EXT";
        GLEnum3[GLEnum3["RGBA16_SNORM_EXT"] = 36763] = "RGBA16_SNORM_EXT";
        GLEnum3[GLEnum3["COMPRESSED_RGB_S3TC_DXT1_EXT"] = 33776] = "COMPRESSED_RGB_S3TC_DXT1_EXT";
        GLEnum3[GLEnum3["COMPRESSED_RGBA_S3TC_DXT1_EXT"] = 33777] = "COMPRESSED_RGBA_S3TC_DXT1_EXT";
        GLEnum3[GLEnum3["COMPRESSED_RGBA_S3TC_DXT3_EXT"] = 33778] = "COMPRESSED_RGBA_S3TC_DXT3_EXT";
        GLEnum3[GLEnum3["COMPRESSED_RGBA_S3TC_DXT5_EXT"] = 33779] = "COMPRESSED_RGBA_S3TC_DXT5_EXT";
        GLEnum3[GLEnum3["COMPRESSED_SRGB_S3TC_DXT1_EXT"] = 35916] = "COMPRESSED_SRGB_S3TC_DXT1_EXT";
        GLEnum3[GLEnum3["COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT"] = 35917] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT";
        GLEnum3[GLEnum3["COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT"] = 35918] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT";
        GLEnum3[GLEnum3["COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT"] = 35919] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT";
        GLEnum3[GLEnum3["COMPRESSED_RED_RGTC1_EXT"] = 36283] = "COMPRESSED_RED_RGTC1_EXT";
        GLEnum3[GLEnum3["COMPRESSED_SIGNED_RED_RGTC1_EXT"] = 36284] = "COMPRESSED_SIGNED_RED_RGTC1_EXT";
        GLEnum3[GLEnum3["COMPRESSED_RED_GREEN_RGTC2_EXT"] = 36285] = "COMPRESSED_RED_GREEN_RGTC2_EXT";
        GLEnum3[GLEnum3["COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT"] = 36286] = "COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT";
        GLEnum3[GLEnum3["COMPRESSED_RGBA_BPTC_UNORM_EXT"] = 36492] = "COMPRESSED_RGBA_BPTC_UNORM_EXT";
        GLEnum3[GLEnum3["COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT"] = 36493] = "COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT";
        GLEnum3[GLEnum3["COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT"] = 36494] = "COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT";
        GLEnum3[GLEnum3["COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT"] = 36495] = "COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT";
        GLEnum3[GLEnum3["COMPRESSED_R11_EAC"] = 37488] = "COMPRESSED_R11_EAC";
        GLEnum3[GLEnum3["COMPRESSED_SIGNED_R11_EAC"] = 37489] = "COMPRESSED_SIGNED_R11_EAC";
        GLEnum3[GLEnum3["COMPRESSED_RG11_EAC"] = 37490] = "COMPRESSED_RG11_EAC";
        GLEnum3[GLEnum3["COMPRESSED_SIGNED_RG11_EAC"] = 37491] = "COMPRESSED_SIGNED_RG11_EAC";
        GLEnum3[GLEnum3["COMPRESSED_RGB8_ETC2"] = 37492] = "COMPRESSED_RGB8_ETC2";
        GLEnum3[GLEnum3["COMPRESSED_RGBA8_ETC2_EAC"] = 37493] = "COMPRESSED_RGBA8_ETC2_EAC";
        GLEnum3[GLEnum3["COMPRESSED_SRGB8_ETC2"] = 37494] = "COMPRESSED_SRGB8_ETC2";
        GLEnum3[GLEnum3["COMPRESSED_SRGB8_ALPHA8_ETC2_EAC"] = 37495] = "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC";
        GLEnum3[GLEnum3["COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2"] = 37496] = "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2";
        GLEnum3[GLEnum3["COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"] = 37497] = "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2";
        GLEnum3[GLEnum3["COMPRESSED_RGB_PVRTC_4BPPV1_IMG"] = 35840] = "COMPRESSED_RGB_PVRTC_4BPPV1_IMG";
        GLEnum3[GLEnum3["COMPRESSED_RGBA_PVRTC_4BPPV1_IMG"] = 35842] = "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG";
        GLEnum3[GLEnum3["COMPRESSED_RGB_PVRTC_2BPPV1_IMG"] = 35841] = "COMPRESSED_RGB_PVRTC_2BPPV1_IMG";
        GLEnum3[GLEnum3["COMPRESSED_RGBA_PVRTC_2BPPV1_IMG"] = 35843] = "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG";
        GLEnum3[GLEnum3["COMPRESSED_RGB_ETC1_WEBGL"] = 36196] = "COMPRESSED_RGB_ETC1_WEBGL";
        GLEnum3[GLEnum3["COMPRESSED_RGB_ATC_WEBGL"] = 35986] = "COMPRESSED_RGB_ATC_WEBGL";
        GLEnum3[GLEnum3["COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL"] = 35986] = "COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL";
        GLEnum3[GLEnum3["COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL"] = 34798] = "COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL";
        GLEnum3[GLEnum3["COMPRESSED_RGBA_ASTC_4x4_KHR"] = 37808] = "COMPRESSED_RGBA_ASTC_4x4_KHR";
        GLEnum3[GLEnum3["COMPRESSED_RGBA_ASTC_5x4_KHR"] = 37809] = "COMPRESSED_RGBA_ASTC_5x4_KHR";
        GLEnum3[GLEnum3["COMPRESSED_RGBA_ASTC_5x5_KHR"] = 37810] = "COMPRESSED_RGBA_ASTC_5x5_KHR";
        GLEnum3[GLEnum3["COMPRESSED_RGBA_ASTC_6x5_KHR"] = 37811] = "COMPRESSED_RGBA_ASTC_6x5_KHR";
        GLEnum3[GLEnum3["COMPRESSED_RGBA_ASTC_6x6_KHR"] = 37812] = "COMPRESSED_RGBA_ASTC_6x6_KHR";
        GLEnum3[GLEnum3["COMPRESSED_RGBA_ASTC_8x5_KHR"] = 37813] = "COMPRESSED_RGBA_ASTC_8x5_KHR";
        GLEnum3[GLEnum3["COMPRESSED_RGBA_ASTC_8x6_KHR"] = 37814] = "COMPRESSED_RGBA_ASTC_8x6_KHR";
        GLEnum3[GLEnum3["COMPRESSED_RGBA_ASTC_8x8_KHR"] = 37815] = "COMPRESSED_RGBA_ASTC_8x8_KHR";
        GLEnum3[GLEnum3["COMPRESSED_RGBA_ASTC_10x5_KHR"] = 37816] = "COMPRESSED_RGBA_ASTC_10x5_KHR";
        GLEnum3[GLEnum3["COMPRESSED_RGBA_ASTC_10x6_KHR"] = 37817] = "COMPRESSED_RGBA_ASTC_10x6_KHR";
        GLEnum3[GLEnum3["COMPRESSED_RGBA_ASTC_10x8_KHR"] = 37818] = "COMPRESSED_RGBA_ASTC_10x8_KHR";
        GLEnum3[GLEnum3["COMPRESSED_RGBA_ASTC_10x10_KHR"] = 37819] = "COMPRESSED_RGBA_ASTC_10x10_KHR";
        GLEnum3[GLEnum3["COMPRESSED_RGBA_ASTC_12x10_KHR"] = 37820] = "COMPRESSED_RGBA_ASTC_12x10_KHR";
        GLEnum3[GLEnum3["COMPRESSED_RGBA_ASTC_12x12_KHR"] = 37821] = "COMPRESSED_RGBA_ASTC_12x12_KHR";
        GLEnum3[GLEnum3["COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR"] = 37840] = "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR";
        GLEnum3[GLEnum3["COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR"] = 37841] = "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR";
        GLEnum3[GLEnum3["COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR"] = 37842] = "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR";
        GLEnum3[GLEnum3["COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR"] = 37843] = "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR";
        GLEnum3[GLEnum3["COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR"] = 37844] = "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR";
        GLEnum3[GLEnum3["COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR"] = 37845] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR";
        GLEnum3[GLEnum3["COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR"] = 37846] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR";
        GLEnum3[GLEnum3["COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR"] = 37847] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR";
        GLEnum3[GLEnum3["COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR"] = 37848] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR";
        GLEnum3[GLEnum3["COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR"] = 37849] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR";
        GLEnum3[GLEnum3["COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR"] = 37850] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR";
        GLEnum3[GLEnum3["COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR"] = 37851] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR";
        GLEnum3[GLEnum3["COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR"] = 37852] = "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR";
        GLEnum3[GLEnum3["COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR"] = 37853] = "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR";
        GLEnum3[GLEnum3["QUERY_COUNTER_BITS_EXT"] = 34916] = "QUERY_COUNTER_BITS_EXT";
        GLEnum3[GLEnum3["CURRENT_QUERY_EXT"] = 34917] = "CURRENT_QUERY_EXT";
        GLEnum3[GLEnum3["QUERY_RESULT_EXT"] = 34918] = "QUERY_RESULT_EXT";
        GLEnum3[GLEnum3["QUERY_RESULT_AVAILABLE_EXT"] = 34919] = "QUERY_RESULT_AVAILABLE_EXT";
        GLEnum3[GLEnum3["TIME_ELAPSED_EXT"] = 35007] = "TIME_ELAPSED_EXT";
        GLEnum3[GLEnum3["TIMESTAMP_EXT"] = 36392] = "TIMESTAMP_EXT";
        GLEnum3[GLEnum3["GPU_DISJOINT_EXT"] = 36795] = "GPU_DISJOINT_EXT";
        GLEnum3[GLEnum3["COMPLETION_STATUS_KHR"] = 37297] = "COMPLETION_STATUS_KHR";
        GLEnum3[GLEnum3["DEPTH_CLAMP_EXT"] = 34383] = "DEPTH_CLAMP_EXT";
        GLEnum3[GLEnum3["FIRST_VERTEX_CONVENTION_WEBGL"] = 36429] = "FIRST_VERTEX_CONVENTION_WEBGL";
        GLEnum3[GLEnum3["LAST_VERTEX_CONVENTION_WEBGL"] = 36430] = "LAST_VERTEX_CONVENTION_WEBGL";
        GLEnum3[GLEnum3["PROVOKING_VERTEX_WEBL"] = 36431] = "PROVOKING_VERTEX_WEBL";
        GLEnum3[GLEnum3["POLYGON_MODE_WEBGL"] = 2880] = "POLYGON_MODE_WEBGL";
        GLEnum3[GLEnum3["POLYGON_OFFSET_LINE_WEBGL"] = 10754] = "POLYGON_OFFSET_LINE_WEBGL";
        GLEnum3[GLEnum3["LINE_WEBGL"] = 6913] = "LINE_WEBGL";
        GLEnum3[GLEnum3["FILL_WEBGL"] = 6914] = "FILL_WEBGL";
        GLEnum3[GLEnum3["MAX_CLIP_DISTANCES_WEBGL"] = 3378] = "MAX_CLIP_DISTANCES_WEBGL";
        GLEnum3[GLEnum3["MAX_CULL_DISTANCES_WEBGL"] = 33529] = "MAX_CULL_DISTANCES_WEBGL";
        GLEnum3[GLEnum3["MAX_COMBINED_CLIP_AND_CULL_DISTANCES_WEBGL"] = 33530] = "MAX_COMBINED_CLIP_AND_CULL_DISTANCES_WEBGL";
        GLEnum3[GLEnum3["CLIP_DISTANCE0_WEBGL"] = 12288] = "CLIP_DISTANCE0_WEBGL";
        GLEnum3[GLEnum3["CLIP_DISTANCE1_WEBGL"] = 12289] = "CLIP_DISTANCE1_WEBGL";
        GLEnum3[GLEnum3["CLIP_DISTANCE2_WEBGL"] = 12290] = "CLIP_DISTANCE2_WEBGL";
        GLEnum3[GLEnum3["CLIP_DISTANCE3_WEBGL"] = 12291] = "CLIP_DISTANCE3_WEBGL";
        GLEnum3[GLEnum3["CLIP_DISTANCE4_WEBGL"] = 12292] = "CLIP_DISTANCE4_WEBGL";
        GLEnum3[GLEnum3["CLIP_DISTANCE5_WEBGL"] = 12293] = "CLIP_DISTANCE5_WEBGL";
        GLEnum3[GLEnum3["CLIP_DISTANCE6_WEBGL"] = 12294] = "CLIP_DISTANCE6_WEBGL";
        GLEnum3[GLEnum3["CLIP_DISTANCE7_WEBGL"] = 12295] = "CLIP_DISTANCE7_WEBGL";
        GLEnum3[GLEnum3["POLYGON_OFFSET_CLAMP_EXT"] = 36379] = "POLYGON_OFFSET_CLAMP_EXT";
        GLEnum3[GLEnum3["LOWER_LEFT_EXT"] = 36001] = "LOWER_LEFT_EXT";
        GLEnum3[GLEnum3["UPPER_LEFT_EXT"] = 36002] = "UPPER_LEFT_EXT";
        GLEnum3[GLEnum3["NEGATIVE_ONE_TO_ONE_EXT"] = 37726] = "NEGATIVE_ONE_TO_ONE_EXT";
        GLEnum3[GLEnum3["ZERO_TO_ONE_EXT"] = 37727] = "ZERO_TO_ONE_EXT";
        GLEnum3[GLEnum3["CLIP_ORIGIN_EXT"] = 37724] = "CLIP_ORIGIN_EXT";
        GLEnum3[GLEnum3["CLIP_DEPTH_MODE_EXT"] = 37725] = "CLIP_DEPTH_MODE_EXT";
        GLEnum3[GLEnum3["SRC1_COLOR_WEBGL"] = 35065] = "SRC1_COLOR_WEBGL";
        GLEnum3[GLEnum3["SRC1_ALPHA_WEBGL"] = 34185] = "SRC1_ALPHA_WEBGL";
        GLEnum3[GLEnum3["ONE_MINUS_SRC1_COLOR_WEBGL"] = 35066] = "ONE_MINUS_SRC1_COLOR_WEBGL";
        GLEnum3[GLEnum3["ONE_MINUS_SRC1_ALPHA_WEBGL"] = 35067] = "ONE_MINUS_SRC1_ALPHA_WEBGL";
        GLEnum3[GLEnum3["MAX_DUAL_SOURCE_DRAW_BUFFERS_WEBGL"] = 35068] = "MAX_DUAL_SOURCE_DRAW_BUFFERS_WEBGL";
        GLEnum3[GLEnum3["MIRROR_CLAMP_TO_EDGE_EXT"] = 34627] = "MIRROR_CLAMP_TO_EDGE_EXT";
      })(GLEnum || (GLEnum = {}));
    }
  });

  // ../../node_modules/@luma.gl/constants/dist/index.js
  var init_dist5 = __esm({
    "../../node_modules/@luma.gl/constants/dist/index.js"() {
      init_webgl_constants();
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/context/polyfills/polyfill-webgl1-extensions.js
  function enforceWebGL2(enforce = true) {
    const prototype = HTMLCanvasElement.prototype;
    if (!enforce && prototype.originalGetContext) {
      prototype.getContext = prototype.originalGetContext;
      prototype.originalGetContext = void 0;
      return;
    }
    prototype.originalGetContext = prototype.getContext;
    prototype.getContext = function(contextId, options) {
      if (contextId === "webgl" || contextId === "experimental-webgl") {
        const context = this.originalGetContext("webgl2", options);
        if (context instanceof HTMLElement) {
          polyfillWebGL1Extensions(context);
        }
        return context;
      }
      return this.originalGetContext(contextId, options);
    };
  }
  function polyfillWebGL1Extensions(gl) {
    gl.getExtension("EXT_color_buffer_float");
    const boundExtensions = {
      ...WEBGL1_STATIC_EXTENSIONS,
      WEBGL_disjoint_timer_query: gl.getExtension("EXT_disjoint_timer_query_webgl2"),
      WEBGL_draw_buffers: getWEBGL_draw_buffers(gl),
      OES_vertex_array_object: getOES_vertex_array_object(gl),
      ANGLE_instanced_arrays: getANGLE_instanced_arrays(gl)
    };
    const originalGetExtension = gl.getExtension;
    gl.getExtension = function(extensionName) {
      const ext = originalGetExtension.call(gl, extensionName);
      if (ext) {
        return ext;
      }
      if (extensionName in boundExtensions) {
        return boundExtensions[extensionName];
      }
      return null;
    };
    const originalGetSupportedExtensions = gl.getSupportedExtensions;
    gl.getSupportedExtensions = function() {
      const extensions = originalGetSupportedExtensions.apply(gl) || [];
      return extensions?.concat(Object.keys(boundExtensions));
    };
  }
  var WEBGL1_STATIC_EXTENSIONS, getWEBGL_draw_buffers, getOES_vertex_array_object, getANGLE_instanced_arrays;
  var init_polyfill_webgl1_extensions = __esm({
    "../../node_modules/@luma.gl/webgl/dist/context/polyfills/polyfill-webgl1-extensions.js"() {
      WEBGL1_STATIC_EXTENSIONS = {
        WEBGL_depth_texture: {
          UNSIGNED_INT_24_8_WEBGL: 34042
        },
        OES_element_index_uint: {},
        OES_texture_float: {},
        OES_texture_half_float: {
          // @ts-expect-error different numbers?
          HALF_FLOAT_OES: 5131
        },
        EXT_color_buffer_float: {},
        OES_standard_derivatives: {
          FRAGMENT_SHADER_DERIVATIVE_HINT_OES: 35723
        },
        EXT_frag_depth: {},
        EXT_blend_minmax: {
          MIN_EXT: 32775,
          MAX_EXT: 32776
        },
        EXT_shader_texture_lod: {}
      };
      getWEBGL_draw_buffers = (gl) => ({
        drawBuffersWEBGL(buffers) {
          return gl.drawBuffers(buffers);
        },
        COLOR_ATTACHMENT0_WEBGL: 36064,
        COLOR_ATTACHMENT1_WEBGL: 36065,
        COLOR_ATTACHMENT2_WEBGL: 36066,
        COLOR_ATTACHMENT3_WEBGL: 36067
      });
      getOES_vertex_array_object = (gl) => ({
        VERTEX_ARRAY_BINDING_OES: 34229,
        createVertexArrayOES() {
          return gl.createVertexArray();
        },
        deleteVertexArrayOES(vertexArray) {
          return gl.deleteVertexArray(vertexArray);
        },
        isVertexArrayOES(vertexArray) {
          return gl.isVertexArray(vertexArray);
        },
        bindVertexArrayOES(vertexArray) {
          return gl.bindVertexArray(vertexArray);
        }
      });
      getANGLE_instanced_arrays = (gl) => ({
        VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: 35070,
        drawArraysInstancedANGLE(...args) {
          return gl.drawArraysInstanced(...args);
        },
        drawElementsInstancedANGLE(...args) {
          return gl.drawElementsInstanced(...args);
        },
        vertexAttribDivisorANGLE(...args) {
          return gl.vertexAttribDivisor(...args);
        }
      });
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/utils/load-script.js
  async function loadScript(scriptUrl, scriptId) {
    const head = document.getElementsByTagName("head")[0];
    if (!head) {
      throw new Error("loadScript");
    }
    const script = document.createElement("script");
    script.setAttribute("type", "text/javascript");
    script.setAttribute("src", scriptUrl);
    if (scriptId) {
      script.id = scriptId;
    }
    return new Promise((resolve2, reject) => {
      script.onload = resolve2;
      script.onerror = (error) => reject(new Error(`Unable to load script '${scriptUrl}': ${error}`));
      head.appendChild(script);
    });
  }
  var init_load_script = __esm({
    "../../node_modules/@luma.gl/webgl/dist/utils/load-script.js"() {
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/context/debug/spector.js
  async function loadSpectorJS(props) {
    if (!globalThis.SPECTOR) {
      try {
        await loadScript(props.debugSpectorJSUrl || DEFAULT_SPECTOR_PROPS.debugSpectorJSUrl);
      } catch (error) {
        log2.warn(String(error));
      }
    }
  }
  function initializeSpectorJS(props) {
    props = { ...DEFAULT_SPECTOR_PROPS, ...props };
    if (!props.debugSpectorJS) {
      return null;
    }
    if (!spector && globalThis.SPECTOR && !globalThis.luma?.spector) {
      log2.probe(LOG_LEVEL, "SPECTOR found and initialized. Start with `luma.spector.displayUI()`")();
      const { Spector: SpectorJS } = globalThis.SPECTOR;
      spector = new SpectorJS();
      if (globalThis.luma) {
        globalThis.luma.spector = spector;
      }
    }
    if (!spector) {
      return null;
    }
    if (!initialized) {
      initialized = true;
      spector.spyCanvases();
      spector?.onCaptureStarted.add((capture) => log2.info("Spector capture started:", capture)());
      spector?.onCapture.add((capture) => {
        log2.info("Spector capture complete:", capture)();
        spector?.getResultUI();
        spector?.resultView.display();
        spector?.resultView.addCapture(capture);
      });
    }
    if (props.gl) {
      const gl = props.gl;
      const device = gl.device;
      spector?.startCapture(props.gl, 500);
      gl.device = device;
      new Promise((resolve2) => setTimeout(resolve2, 2e3)).then((_3) => {
        log2.info("Spector capture stopped after 2 seconds")();
        spector?.stopCapture();
      });
    }
    return spector;
  }
  var LOG_LEVEL, spector, initialized, DEFAULT_SPECTOR_PROPS;
  var init_spector = __esm({
    "../../node_modules/@luma.gl/webgl/dist/context/debug/spector.js"() {
      init_dist4();
      init_load_script();
      LOG_LEVEL = 1;
      spector = null;
      initialized = false;
      DEFAULT_SPECTOR_PROPS = {
        debugSpectorJS: log2.get("debug-spectorjs"),
        // https://github.com/BabylonJS/Spector.js#basic-usage
        // https://forum.babylonjs.com/t/spectorcdn-is-temporarily-off/48241
        // spectorUrl: 'https://spectorcdn.babylonjs.com/spector.bundle.js';
        debugSpectorJSUrl: "https://cdn.jsdelivr.net/npm/spectorjs@0.9.30/dist/spector.bundle.js",
        gl: void 0
      };
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/context/debug/webgl-developer-tools.js
  function getWebGLContextData(gl) {
    gl.luma = gl.luma || {};
    return gl.luma;
  }
  async function loadWebGLDeveloperTools() {
    if (isBrowser2() && !globalThis.WebGLDebugUtils) {
      globalThis.global = globalThis.global || globalThis;
      globalThis.global.module = {};
      await loadScript(WEBGL_DEBUG_CDN_URL);
    }
  }
  function makeDebugContext(gl, props = {}) {
    return props.debugWebGL || props.traceWebGL ? getDebugContext(gl, props) : getRealContext(gl);
  }
  function getRealContext(gl) {
    const data = getWebGLContextData(gl);
    return data.realContext ? data.realContext : gl;
  }
  function getDebugContext(gl, props) {
    if (!globalThis.WebGLDebugUtils) {
      log2.warn("webgl-debug not loaded")();
      return gl;
    }
    const data = getWebGLContextData(gl);
    if (data.debugContext) {
      return data.debugContext;
    }
    globalThis.WebGLDebugUtils.init({ ...GLEnum, ...gl });
    const glDebug = globalThis.WebGLDebugUtils.makeDebugContext(gl, onGLError.bind(null, props), onValidateGLFunc.bind(null, props));
    for (const key in GLEnum) {
      if (!(key in glDebug) && typeof GLEnum[key] === "number") {
        glDebug[key] = GLEnum[key];
      }
    }
    class WebGLDebugContext {
    }
    Object.setPrototypeOf(glDebug, Object.getPrototypeOf(gl));
    Object.setPrototypeOf(WebGLDebugContext, glDebug);
    const debugContext = Object.create(WebGLDebugContext);
    data.realContext = gl;
    data.debugContext = debugContext;
    debugContext.debug = true;
    return debugContext;
  }
  function getFunctionString(functionName, functionArgs) {
    functionArgs = Array.from(functionArgs).map((arg) => arg === void 0 ? "undefined" : arg);
    let args = globalThis.WebGLDebugUtils.glFunctionArgsToString(functionName, functionArgs);
    args = `${args.slice(0, 100)}${args.length > 100 ? "..." : ""}`;
    return `gl.${functionName}(${args})`;
  }
  function onGLError(props, err, functionName, args) {
    args = Array.from(args).map((arg) => arg === void 0 ? "undefined" : arg);
    const errorMessage = globalThis.WebGLDebugUtils.glEnumToString(err);
    const functionArgs = globalThis.WebGLDebugUtils.glFunctionArgsToString(functionName, args);
    const message2 = `${errorMessage} in gl.${functionName}(${functionArgs})`;
    log2.error(message2)();
    debugger;
  }
  function onValidateGLFunc(props, functionName, functionArgs) {
    let functionString = "";
    if (log2.level >= 1) {
      functionString = getFunctionString(functionName, functionArgs);
      if (props.traceWebGL) {
        log2.log(1, functionString)();
      }
    }
    for (const arg of functionArgs) {
      if (arg === void 0) {
        functionString = functionString || getFunctionString(functionName, functionArgs);
        debugger;
      }
    }
  }
  var WEBGL_DEBUG_CDN_URL;
  var init_webgl_developer_tools = __esm({
    "../../node_modules/@luma.gl/webgl/dist/context/debug/webgl-developer-tools.js"() {
      init_dist4();
      init_dist5();
      init_dist();
      init_load_script();
      WEBGL_DEBUG_CDN_URL = "https://unpkg.com/webgl-debug@2.0.1/index.js";
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/context/parameters/webgl-parameter-tables.js
  function isArray2(array) {
    return Array.isArray(array) || ArrayBuffer.isView(array) && !(array instanceof DataView);
  }
  function getValue(glEnum, values, cache3) {
    return values[glEnum] !== void 0 ? values[glEnum] : cache3[glEnum];
  }
  var GL_PARAMETER_DEFAULTS, enable, hint, pixelStorei, bindFramebuffer, bindBuffer, GL_PARAMETER_SETTERS, GL_COMPOSITE_PARAMETER_SETTERS, GL_HOOKED_SETTERS, isEnabled, GL_PARAMETER_GETTERS, NON_CACHE_PARAMETERS;
  var init_webgl_parameter_tables = __esm({
    "../../node_modules/@luma.gl/webgl/dist/context/parameters/webgl-parameter-tables.js"() {
      GL_PARAMETER_DEFAULTS = {
        [3042]: false,
        [32773]: new Float32Array([0, 0, 0, 0]),
        [32777]: 32774,
        [34877]: 32774,
        [32969]: 1,
        [32968]: 0,
        [32971]: 1,
        [32970]: 0,
        [3106]: new Float32Array([0, 0, 0, 0]),
        // TBD
        [3107]: [true, true, true, true],
        [2884]: false,
        [2885]: 1029,
        [2929]: false,
        [2931]: 1,
        [2932]: 513,
        [2928]: new Float32Array([0, 1]),
        // TBD
        [2930]: true,
        [3024]: true,
        [35725]: null,
        // FRAMEBUFFER_BINDING and DRAW_FRAMEBUFFER_BINDING(WebGL2) refer same state.
        [36006]: null,
        [36007]: null,
        [34229]: null,
        [34964]: null,
        [2886]: 2305,
        [33170]: 4352,
        [2849]: 1,
        [32823]: false,
        [32824]: 0,
        [10752]: 0,
        [32926]: false,
        [32928]: false,
        [32938]: 1,
        [32939]: false,
        [3089]: false,
        // Note: Dynamic value. If scissor test enabled we expect users to set correct scissor box
        [3088]: new Int32Array([0, 0, 1024, 1024]),
        [2960]: false,
        [2961]: 0,
        [2968]: 4294967295,
        [36005]: 4294967295,
        [2962]: 519,
        [2967]: 0,
        [2963]: 4294967295,
        [34816]: 519,
        [36003]: 0,
        [36004]: 4294967295,
        [2964]: 7680,
        [2965]: 7680,
        [2966]: 7680,
        [34817]: 7680,
        [34818]: 7680,
        [34819]: 7680,
        // Dynamic value: We use [0, 0, 1024, 1024] as default, but usually this is updated in each frame.
        [2978]: [0, 0, 1024, 1024],
        [36389]: null,
        [36662]: null,
        [36663]: null,
        [35053]: null,
        [35055]: null,
        [35723]: 4352,
        [36010]: null,
        [35977]: false,
        [3333]: 4,
        [3317]: 4,
        [37440]: false,
        [37441]: false,
        [37443]: 37444,
        [3330]: 0,
        [3332]: 0,
        [3331]: 0,
        [3314]: 0,
        [32878]: 0,
        [3316]: 0,
        [3315]: 0,
        [32877]: 0
      };
      enable = (gl, value, key) => value ? gl.enable(key) : gl.disable(key);
      hint = (gl, value, key) => gl.hint(key, value);
      pixelStorei = (gl, value, key) => gl.pixelStorei(key, value);
      bindFramebuffer = (gl, value, key) => {
        const target2 = key === 36006 ? 36009 : 36008;
        return gl.bindFramebuffer(target2, value);
      };
      bindBuffer = (gl, value, key) => {
        const bindingMap = {
          [34964]: 34962,
          [36662]: 36662,
          [36663]: 36663,
          [35053]: 35051,
          [35055]: 35052
        };
        const glTarget = bindingMap[key];
        gl.bindBuffer(glTarget, value);
      };
      GL_PARAMETER_SETTERS = {
        [3042]: enable,
        [32773]: (gl, value) => gl.blendColor(...value),
        [32777]: "blendEquation",
        [34877]: "blendEquation",
        [32969]: "blendFunc",
        [32968]: "blendFunc",
        [32971]: "blendFunc",
        [32970]: "blendFunc",
        [3106]: (gl, value) => gl.clearColor(...value),
        [3107]: (gl, value) => gl.colorMask(...value),
        [2884]: enable,
        [2885]: (gl, value) => gl.cullFace(value),
        [2929]: enable,
        [2931]: (gl, value) => gl.clearDepth(value),
        [2932]: (gl, value) => gl.depthFunc(value),
        [2928]: (gl, value) => gl.depthRange(...value),
        [2930]: (gl, value) => gl.depthMask(value),
        [3024]: enable,
        [35723]: hint,
        [35725]: (gl, value) => gl.useProgram(value),
        [36007]: (gl, value) => gl.bindRenderbuffer(36161, value),
        [36389]: (gl, value) => gl.bindTransformFeedback?.(36386, value),
        [34229]: (gl, value) => gl.bindVertexArray(value),
        // NOTE: FRAMEBUFFER_BINDING and DRAW_FRAMEBUFFER_BINDING(WebGL2) refer same state.
        [36006]: bindFramebuffer,
        [36010]: bindFramebuffer,
        // Buffers
        [34964]: bindBuffer,
        [36662]: bindBuffer,
        [36663]: bindBuffer,
        [35053]: bindBuffer,
        [35055]: bindBuffer,
        [2886]: (gl, value) => gl.frontFace(value),
        [33170]: hint,
        [2849]: (gl, value) => gl.lineWidth(value),
        [32823]: enable,
        [32824]: "polygonOffset",
        [10752]: "polygonOffset",
        [35977]: enable,
        [32926]: enable,
        [32928]: enable,
        [32938]: "sampleCoverage",
        [32939]: "sampleCoverage",
        [3089]: enable,
        [3088]: (gl, value) => gl.scissor(...value),
        [2960]: enable,
        [2961]: (gl, value) => gl.clearStencil(value),
        [2968]: (gl, value) => gl.stencilMaskSeparate(1028, value),
        [36005]: (gl, value) => gl.stencilMaskSeparate(1029, value),
        [2962]: "stencilFuncFront",
        [2967]: "stencilFuncFront",
        [2963]: "stencilFuncFront",
        [34816]: "stencilFuncBack",
        [36003]: "stencilFuncBack",
        [36004]: "stencilFuncBack",
        [2964]: "stencilOpFront",
        [2965]: "stencilOpFront",
        [2966]: "stencilOpFront",
        [34817]: "stencilOpBack",
        [34818]: "stencilOpBack",
        [34819]: "stencilOpBack",
        [2978]: (gl, value) => gl.viewport(...value),
        // WEBGL2 EXTENSIONS
        // EXT_depth_clamp https://registry.khronos.org/webgl/extensions/EXT_depth_clamp/
        [34383]: enable,
        // WEBGL_provoking_vertex https://registry.khronos.org/webgl/extensions/WEBGL_provoking_vertex/
        // [GL.PROVOKING_VERTEX_WEBL]: TODO - extension function needed
        // WEBGL_polygon_mode https://registry.khronos.org/webgl/extensions/WEBGL_polygon_mode/
        // POLYGON_MODE_WEBGL  TODO - extension function needed
        [10754]: enable,
        // WEBGL_clip_cull_distance https://registry.khronos.org/webgl/extensions/WEBGL_clip_cull_distance/
        [12288]: enable,
        [12289]: enable,
        [12290]: enable,
        [12291]: enable,
        [12292]: enable,
        [12293]: enable,
        [12294]: enable,
        [12295]: enable,
        // PIXEL PACK/UNPACK MODES
        [3333]: pixelStorei,
        [3317]: pixelStorei,
        [37440]: pixelStorei,
        [37441]: pixelStorei,
        [37443]: pixelStorei,
        [3330]: pixelStorei,
        [3332]: pixelStorei,
        [3331]: pixelStorei,
        [3314]: pixelStorei,
        [32878]: pixelStorei,
        [3316]: pixelStorei,
        [3315]: pixelStorei,
        [32877]: pixelStorei,
        // Function-style setters
        framebuffer: (gl, framebuffer) => {
          const handle = framebuffer && "handle" in framebuffer ? framebuffer.handle : framebuffer;
          return gl.bindFramebuffer(36160, handle);
        },
        blend: (gl, value) => value ? gl.enable(3042) : gl.disable(3042),
        blendColor: (gl, value) => gl.blendColor(...value),
        blendEquation: (gl, args) => {
          const separateModes = typeof args === "number" ? [args, args] : args;
          gl.blendEquationSeparate(...separateModes);
        },
        blendFunc: (gl, args) => {
          const separateFuncs = args?.length === 2 ? [...args, ...args] : args;
          gl.blendFuncSeparate(...separateFuncs);
        },
        clearColor: (gl, value) => gl.clearColor(...value),
        clearDepth: (gl, value) => gl.clearDepth(value),
        clearStencil: (gl, value) => gl.clearStencil(value),
        colorMask: (gl, value) => gl.colorMask(...value),
        cull: (gl, value) => value ? gl.enable(2884) : gl.disable(2884),
        cullFace: (gl, value) => gl.cullFace(value),
        depthTest: (gl, value) => value ? gl.enable(2929) : gl.disable(2929),
        depthFunc: (gl, value) => gl.depthFunc(value),
        depthMask: (gl, value) => gl.depthMask(value),
        depthRange: (gl, value) => gl.depthRange(...value),
        dither: (gl, value) => value ? gl.enable(3024) : gl.disable(3024),
        derivativeHint: (gl, value) => {
          gl.hint(35723, value);
        },
        frontFace: (gl, value) => gl.frontFace(value),
        mipmapHint: (gl, value) => gl.hint(33170, value),
        lineWidth: (gl, value) => gl.lineWidth(value),
        polygonOffsetFill: (gl, value) => value ? gl.enable(32823) : gl.disable(32823),
        polygonOffset: (gl, value) => gl.polygonOffset(...value),
        sampleCoverage: (gl, value) => gl.sampleCoverage(value[0], value[1] || false),
        scissorTest: (gl, value) => value ? gl.enable(3089) : gl.disable(3089),
        scissor: (gl, value) => gl.scissor(...value),
        stencilTest: (gl, value) => value ? gl.enable(2960) : gl.disable(2960),
        stencilMask: (gl, value) => {
          value = isArray2(value) ? value : [value, value];
          const [mask, backMask] = value;
          gl.stencilMaskSeparate(1028, mask);
          gl.stencilMaskSeparate(1029, backMask);
        },
        stencilFunc: (gl, args) => {
          args = isArray2(args) && args.length === 3 ? [...args, ...args] : args;
          const [func, ref, mask, backFunc, backRef, backMask] = args;
          gl.stencilFuncSeparate(1028, func, ref, mask);
          gl.stencilFuncSeparate(1029, backFunc, backRef, backMask);
        },
        stencilOp: (gl, args) => {
          args = isArray2(args) && args.length === 3 ? [...args, ...args] : args;
          const [sfail, dpfail, dppass, backSfail, backDpfail, backDppass] = args;
          gl.stencilOpSeparate(1028, sfail, dpfail, dppass);
          gl.stencilOpSeparate(1029, backSfail, backDpfail, backDppass);
        },
        viewport: (gl, value) => gl.viewport(...value)
      };
      GL_COMPOSITE_PARAMETER_SETTERS = {
        blendEquation: (gl, values, cache3) => gl.blendEquationSeparate(getValue(32777, values, cache3), getValue(34877, values, cache3)),
        blendFunc: (gl, values, cache3) => gl.blendFuncSeparate(getValue(32969, values, cache3), getValue(32968, values, cache3), getValue(32971, values, cache3), getValue(32970, values, cache3)),
        polygonOffset: (gl, values, cache3) => gl.polygonOffset(getValue(32824, values, cache3), getValue(10752, values, cache3)),
        sampleCoverage: (gl, values, cache3) => gl.sampleCoverage(getValue(32938, values, cache3), getValue(32939, values, cache3)),
        stencilFuncFront: (gl, values, cache3) => gl.stencilFuncSeparate(1028, getValue(2962, values, cache3), getValue(2967, values, cache3), getValue(2963, values, cache3)),
        stencilFuncBack: (gl, values, cache3) => gl.stencilFuncSeparate(1029, getValue(34816, values, cache3), getValue(36003, values, cache3), getValue(36004, values, cache3)),
        stencilOpFront: (gl, values, cache3) => gl.stencilOpSeparate(1028, getValue(2964, values, cache3), getValue(2965, values, cache3), getValue(2966, values, cache3)),
        stencilOpBack: (gl, values, cache3) => gl.stencilOpSeparate(1029, getValue(34817, values, cache3), getValue(34818, values, cache3), getValue(34819, values, cache3))
      };
      GL_HOOKED_SETTERS = {
        // GENERIC SETTERS
        enable: (update, capability) => update({
          [capability]: true
        }),
        disable: (update, capability) => update({
          [capability]: false
        }),
        pixelStorei: (update, pname, value) => update({
          [pname]: value
        }),
        hint: (update, pname, value) => update({
          [pname]: value
        }),
        // SPECIFIC SETTERS
        useProgram: (update, value) => update({
          [35725]: value
        }),
        bindRenderbuffer: (update, target2, value) => update({
          [36007]: value
        }),
        bindTransformFeedback: (update, target2, value) => update({
          [36389]: value
        }),
        bindVertexArray: (update, value) => update({
          [34229]: value
        }),
        bindFramebuffer: (update, target2, framebuffer) => {
          switch (target2) {
            case 36160:
              return update({
                [36006]: framebuffer,
                [36010]: framebuffer
              });
            case 36009:
              return update({ [36006]: framebuffer });
            case 36008:
              return update({ [36010]: framebuffer });
            default:
              return null;
          }
        },
        bindBuffer: (update, target2, buffer) => {
          const pname = {
            [34962]: [34964],
            [36662]: [36662],
            [36663]: [36663],
            [35051]: [35053],
            [35052]: [35055]
          }[target2];
          if (pname) {
            return update({ [pname]: buffer });
          }
          return { valueChanged: true };
        },
        blendColor: (update, r5, g3, b4, a6) => update({
          [32773]: new Float32Array([r5, g3, b4, a6])
        }),
        blendEquation: (update, mode) => update({
          [32777]: mode,
          [34877]: mode
        }),
        blendEquationSeparate: (update, modeRGB, modeAlpha) => update({
          [32777]: modeRGB,
          [34877]: modeAlpha
        }),
        blendFunc: (update, src, dst) => update({
          [32969]: src,
          [32968]: dst,
          [32971]: src,
          [32970]: dst
        }),
        blendFuncSeparate: (update, srcRGB, dstRGB, srcAlpha, dstAlpha) => update({
          [32969]: srcRGB,
          [32968]: dstRGB,
          [32971]: srcAlpha,
          [32970]: dstAlpha
        }),
        clearColor: (update, r5, g3, b4, a6) => update({
          [3106]: new Float32Array([r5, g3, b4, a6])
        }),
        clearDepth: (update, depth) => update({
          [2931]: depth
        }),
        clearStencil: (update, s5) => update({
          [2961]: s5
        }),
        colorMask: (update, r5, g3, b4, a6) => update({
          [3107]: [r5, g3, b4, a6]
        }),
        cullFace: (update, mode) => update({
          [2885]: mode
        }),
        depthFunc: (update, func) => update({
          [2932]: func
        }),
        depthRange: (update, zNear, zFar) => update({
          [2928]: new Float32Array([zNear, zFar])
        }),
        depthMask: (update, mask) => update({
          [2930]: mask
        }),
        frontFace: (update, face) => update({
          [2886]: face
        }),
        lineWidth: (update, width) => update({
          [2849]: width
        }),
        polygonOffset: (update, factor, units) => update({
          [32824]: factor,
          [10752]: units
        }),
        sampleCoverage: (update, value, invert16) => update({
          [32938]: value,
          [32939]: invert16
        }),
        scissor: (update, x4, y5, width, height) => update({
          [3088]: new Int32Array([x4, y5, width, height])
        }),
        stencilMask: (update, mask) => update({
          [2968]: mask,
          [36005]: mask
        }),
        stencilMaskSeparate: (update, face, mask) => update({
          [face === 1028 ? 2968 : 36005]: mask
        }),
        stencilFunc: (update, func, ref, mask) => update({
          [2962]: func,
          [2967]: ref,
          [2963]: mask,
          [34816]: func,
          [36003]: ref,
          [36004]: mask
        }),
        stencilFuncSeparate: (update, face, func, ref, mask) => update({
          [face === 1028 ? 2962 : 34816]: func,
          [face === 1028 ? 2967 : 36003]: ref,
          [face === 1028 ? 2963 : 36004]: mask
        }),
        stencilOp: (update, fail, zfail, zpass) => update({
          [2964]: fail,
          [2965]: zfail,
          [2966]: zpass,
          [34817]: fail,
          [34818]: zfail,
          [34819]: zpass
        }),
        stencilOpSeparate: (update, face, fail, zfail, zpass) => update({
          [face === 1028 ? 2964 : 34817]: fail,
          [face === 1028 ? 2965 : 34818]: zfail,
          [face === 1028 ? 2966 : 34819]: zpass
        }),
        viewport: (update, x4, y5, width, height) => update({
          [2978]: [x4, y5, width, height]
        })
      };
      isEnabled = (gl, key) => gl.isEnabled(key);
      GL_PARAMETER_GETTERS = {
        [3042]: isEnabled,
        [2884]: isEnabled,
        [2929]: isEnabled,
        [3024]: isEnabled,
        [32823]: isEnabled,
        [32926]: isEnabled,
        [32928]: isEnabled,
        [3089]: isEnabled,
        [2960]: isEnabled,
        [35977]: isEnabled
      };
      NON_CACHE_PARAMETERS = /* @__PURE__ */ new Set([
        34016,
        36388,
        36387,
        35983,
        35368,
        34965,
        35739,
        35738,
        3074,
        34853,
        34854,
        34855,
        34856,
        34857,
        34858,
        34859,
        34860,
        34861,
        34862,
        34863,
        34864,
        34865,
        34866,
        34867,
        34868,
        35097,
        32873,
        35869,
        32874,
        34068
      ]);
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/context/parameters/unified-parameter-api.js
  function setGLParameters(gl, parameters2) {
    if (isObjectEmpty2(parameters2)) {
      return;
    }
    const compositeSetters = {};
    for (const key in parameters2) {
      const glConstant = Number(key);
      const setter = GL_PARAMETER_SETTERS[key];
      if (setter) {
        if (typeof setter === "string") {
          compositeSetters[setter] = true;
        } else {
          setter(gl, parameters2[key], glConstant);
        }
      }
    }
    const cache3 = gl.state && gl.state.cache;
    if (cache3) {
      for (const key in compositeSetters) {
        const compositeSetter = GL_COMPOSITE_PARAMETER_SETTERS[key];
        compositeSetter(gl, parameters2, cache3);
      }
    }
  }
  function getGLParameters(gl, parameters2 = GL_PARAMETER_DEFAULTS) {
    if (typeof parameters2 === "number") {
      const key = parameters2;
      const getter = GL_PARAMETER_GETTERS[key];
      return getter ? getter(gl, key) : gl.getParameter(key);
    }
    const parameterKeys = Array.isArray(parameters2) ? parameters2 : Object.keys(parameters2);
    const state = {};
    for (const key of parameterKeys) {
      const getter = GL_PARAMETER_GETTERS[key];
      state[key] = getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));
    }
    return state;
  }
  function resetGLParameters(gl) {
    setGLParameters(gl, GL_PARAMETER_DEFAULTS);
  }
  function isObjectEmpty2(object) {
    for (const key in object) {
      return false;
    }
    return true;
  }
  var init_unified_parameter_api = __esm({
    "../../node_modules/@luma.gl/webgl/dist/context/parameters/unified-parameter-api.js"() {
      init_webgl_parameter_tables();
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/context/state-tracker/deep-array-equal.js
  function deepArrayEqual(x4, y5) {
    if (x4 === y5) {
      return true;
    }
    if (isArray3(x4) && isArray3(y5) && x4.length === y5.length) {
      for (let i7 = 0; i7 < x4.length; ++i7) {
        if (x4[i7] !== y5[i7]) {
          return false;
        }
      }
      return true;
    }
    return false;
  }
  function isArray3(x4) {
    return Array.isArray(x4) || ArrayBuffer.isView(x4);
  }
  var init_deep_array_equal = __esm({
    "../../node_modules/@luma.gl/webgl/dist/context/state-tracker/deep-array-equal.js"() {
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/context/state-tracker/webgl-state-tracker.js
  function installGetterOverride(gl, functionName) {
    const originalGetterFunc = gl[functionName].bind(gl);
    gl[functionName] = function get(pname) {
      if (pname === void 0 || NON_CACHE_PARAMETERS.has(pname)) {
        return originalGetterFunc(pname);
      }
      const glState = WebGLStateTracker.get(gl);
      if (!(pname in glState.cache)) {
        glState.cache[pname] = originalGetterFunc(pname);
      }
      return glState.enable ? (
        // Call the getter the params so that it can e.g. serve from a cache
        glState.cache[pname]
      ) : (
        // Optionally call the original function to do a "hard" query from the WebGL2RenderingContext
        originalGetterFunc(pname)
      );
    };
    Object.defineProperty(gl[functionName], "name", {
      value: `${functionName}-from-cache`,
      configurable: false
    });
  }
  function installSetterSpy(gl, functionName, setter) {
    if (!gl[functionName]) {
      return;
    }
    const originalSetterFunc = gl[functionName].bind(gl);
    gl[functionName] = function set11(...params) {
      const glState = WebGLStateTracker.get(gl);
      const { valueChanged, oldValue } = setter(glState._updateCache, ...params);
      if (valueChanged) {
        originalSetterFunc(...params);
      }
      return oldValue;
    };
    Object.defineProperty(gl[functionName], "name", {
      value: `${functionName}-to-cache`,
      configurable: false
    });
  }
  function installProgramSpy(gl) {
    const originalUseProgram = gl.useProgram.bind(gl);
    gl.useProgram = function useProgramLuma(handle) {
      const glState = WebGLStateTracker.get(gl);
      if (glState.program !== handle) {
        originalUseProgram(handle);
        glState.program = handle;
      }
    };
  }
  var WebGLStateTracker;
  var init_webgl_state_tracker = __esm({
    "../../node_modules/@luma.gl/webgl/dist/context/state-tracker/webgl-state-tracker.js"() {
      init_unified_parameter_api();
      init_deep_array_equal();
      init_webgl_parameter_tables();
      WebGLStateTracker = class {
        static get(gl) {
          return gl.state;
        }
        gl;
        program = null;
        stateStack = [];
        enable = true;
        cache = null;
        log;
        initialized = false;
        constructor(gl, props) {
          this.gl = gl;
          this.log = props?.log || (() => {
          });
          this._updateCache = this._updateCache.bind(this);
          Object.seal(this);
        }
        push(values = {}) {
          this.stateStack.push({});
        }
        pop() {
          const oldValues = this.stateStack[this.stateStack.length - 1];
          setGLParameters(this.gl, oldValues);
          this.stateStack.pop();
        }
        /**
         * Initialize WebGL state caching on a context
         * can be called multiple times to enable/disable
         *
         * @note After calling this function, context state will be cached
         * .push() and .pop() will be available for saving,
         * temporarily modifying, and then restoring state.
         */
        trackState(gl, options) {
          this.cache = options?.copyState ? getGLParameters(gl) : Object.assign({}, GL_PARAMETER_DEFAULTS);
          if (this.initialized) {
            throw new Error("WebGLStateTracker");
          }
          this.initialized = true;
          this.gl.state = this;
          installProgramSpy(gl);
          for (const key in GL_HOOKED_SETTERS) {
            const setter = GL_HOOKED_SETTERS[key];
            installSetterSpy(gl, key, setter);
          }
          installGetterOverride(gl, "getParameter");
          installGetterOverride(gl, "isEnabled");
        }
        /**
        // interceptor for context set functions - update our cache and our stack
        // values (Object) - the key values for this setter
         * @param values
         * @returns
         */
        _updateCache(values) {
          let valueChanged = false;
          let oldValue;
          const oldValues = this.stateStack.length > 0 ? this.stateStack[this.stateStack.length - 1] : null;
          for (const key in values) {
            const value = values[key];
            const cached = this.cache[key];
            if (!deepArrayEqual(value, cached)) {
              valueChanged = true;
              oldValue = cached;
              if (oldValues && !(key in oldValues)) {
                oldValues[key] = cached;
              }
              this.cache[key] = value;
            }
          }
          return { valueChanged, oldValue };
        }
      };
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/context/helpers/create-browser-context.js
  function createBrowserContext(canvas2, props, webglContextAttributes) {
    let errorMessage = "";
    const webglProps = {
      preserveDrawingBuffer: true,
      // failIfMajorPerformanceCaveat: true,
      ...webglContextAttributes
    };
    let gl = null;
    gl ||= canvas2.getContext("webgl2", webglProps);
    if (webglProps.failIfMajorPerformanceCaveat) {
      errorMessage ||= "Only software GPU is available. Set `failIfMajorPerformanceCaveat: false` to allow.";
    }
    if (!gl && !webglContextAttributes.failIfMajorPerformanceCaveat) {
      webglProps.failIfMajorPerformanceCaveat = false;
      gl = canvas2.getContext("webgl2", webglProps);
      gl.luma ||= {};
      gl.luma.softwareRenderer = true;
    }
    if (!gl) {
      gl = canvas2.getContext("webgl", {});
      if (gl) {
        gl = null;
        errorMessage ||= "Your browser only supports WebGL1";
      }
    }
    if (!gl) {
      errorMessage ||= "Your browser does not support WebGL";
      throw new Error(`Failed to create WebGL context: ${errorMessage}`);
    }
    const { onContextLost, onContextRestored } = props;
    canvas2.addEventListener("webglcontextlost", (event) => onContextLost(event), false);
    canvas2.addEventListener("webglcontextrestored", (event) => onContextRestored(event), false);
    gl.luma ||= {};
    return gl;
  }
  var init_create_browser_context = __esm({
    "../../node_modules/@luma.gl/webgl/dist/context/helpers/create-browser-context.js"() {
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/context/helpers/webgl-extensions.js
  function getWebGLExtension(gl, name13, extensions) {
    if (extensions[name13] === void 0) {
      extensions[name13] = gl.getExtension(name13) || null;
    }
    return extensions[name13];
  }
  var init_webgl_extensions = __esm({
    "../../node_modules/@luma.gl/webgl/dist/context/helpers/webgl-extensions.js"() {
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-info.js
  function getDeviceInfo(gl, extensions) {
    const vendorMasked = gl.getParameter(7936);
    const rendererMasked = gl.getParameter(7937);
    getWebGLExtension(gl, "WEBGL_debug_renderer_info", extensions);
    const ext = extensions.WEBGL_debug_renderer_info;
    const vendorUnmasked = gl.getParameter(ext ? ext.UNMASKED_VENDOR_WEBGL : 7936);
    const rendererUnmasked = gl.getParameter(ext ? ext.UNMASKED_RENDERER_WEBGL : 7937);
    const vendor = vendorUnmasked || vendorMasked;
    const renderer = rendererUnmasked || rendererMasked;
    const version = gl.getParameter(7938);
    const gpu = identifyGPUVendor(vendor, renderer);
    const gpuBackend = identifyGPUBackend(vendor, renderer);
    const gpuType = identifyGPUType(vendor, renderer);
    const shadingLanguage = "glsl";
    const shadingLanguageVersion = 300;
    return {
      type: "webgl",
      gpu,
      gpuType,
      gpuBackend,
      vendor,
      renderer,
      version,
      shadingLanguage,
      shadingLanguageVersion
    };
  }
  function identifyGPUVendor(vendor, renderer) {
    if (/NVIDIA/i.exec(vendor) || /NVIDIA/i.exec(renderer)) {
      return "nvidia";
    }
    if (/INTEL/i.exec(vendor) || /INTEL/i.exec(renderer)) {
      return "intel";
    }
    if (/Apple/i.exec(vendor) || /Apple/i.exec(renderer)) {
      return "apple";
    }
    if (/AMD/i.exec(vendor) || /AMD/i.exec(renderer) || /ATI/i.exec(vendor) || /ATI/i.exec(renderer)) {
      return "amd";
    }
    if (/SwiftShader/i.exec(vendor) || /SwiftShader/i.exec(renderer)) {
      return "software";
    }
    return "unknown";
  }
  function identifyGPUBackend(vendor, renderer) {
    if (/Metal/i.exec(vendor) || /Metal/i.exec(renderer)) {
      return "metal";
    }
    if (/ANGLE/i.exec(vendor) || /ANGLE/i.exec(renderer)) {
      return "opengl";
    }
    return "unknown";
  }
  function identifyGPUType(vendor, renderer) {
    if (/SwiftShader/i.exec(vendor) || /SwiftShader/i.exec(renderer)) {
      return "cpu";
    }
    const gpuVendor = identifyGPUVendor(vendor, renderer);
    switch (gpuVendor) {
      case "intel":
        return "integrated";
      case "software":
        return "cpu";
      case "unknown":
        return "unknown";
      default:
        return "discrete";
    }
  }
  var init_webgl_device_info = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-info.js"() {
      init_webgl_extensions();
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/converters/webgl-vertex-formats.js
  function getGLFromVertexType(dataType) {
    switch (dataType) {
      case "uint8":
        return 5121;
      case "sint8":
        return 5120;
      case "unorm8":
        return 5121;
      case "snorm8":
        return 5120;
      case "uint16":
        return 5123;
      case "sint16":
        return 5122;
      case "unorm16":
        return 5123;
      case "snorm16":
        return 5122;
      case "uint32":
        return 5125;
      case "sint32":
        return 5124;
      case "float16":
        return 5131;
      case "float32":
        return 5126;
    }
    throw new Error(String(dataType));
  }
  var init_webgl_vertex_formats = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/converters/webgl-vertex-formats.js"() {
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/converters/webgl-texture-table.js
  function isTextureFeature(feature) {
    return feature in TEXTURE_FEATURES;
  }
  function checkTextureFeature(gl, feature, extensions) {
    const textureExtensions = TEXTURE_FEATURES[feature] || [];
    return textureExtensions.every((extension) => getWebGLExtension(gl, extension, extensions));
  }
  function getTextureFormatCapabilitiesWebGL(gl, formatSupport, extensions) {
    let supported = formatSupport.create;
    const webglFormatInfo = WEBGL_TEXTURE_FORMATS[formatSupport.format];
    if (webglFormatInfo?.gl === void 0) {
      supported = false;
    }
    if (webglFormatInfo?.x) {
      supported = supported && Boolean(getWebGLExtension(gl, webglFormatInfo.x, extensions));
    }
    return {
      format: formatSupport.format,
      // @ts-ignore
      create: supported && formatSupport.create,
      // @ts-ignore
      render: supported && formatSupport.render,
      // @ts-ignore
      filter: supported && formatSupport.filter,
      // @ts-ignore
      blend: supported && formatSupport.blend,
      // @ts-ignore
      store: supported && formatSupport.store
    };
  }
  function getTextureFormatWebGL(format) {
    const formatData = WEBGL_TEXTURE_FORMATS[format];
    const webglFormat = convertTextureFormatToGL(format);
    const decoded = textureFormatDecoder.getInfo(format);
    if (decoded.compressed) {
      formatData.dataFormat = webglFormat;
    }
    return {
      internalFormat: webglFormat,
      format: formatData?.dataFormat || getWebGLPixelDataFormat(decoded.channels, decoded.integer, decoded.normalized, webglFormat),
      // depth formats don't have a type
      type: decoded.dataType ? getGLFromVertexType(decoded.dataType) : formatData?.types?.[0] || 5121,
      compressed: decoded.compressed || false
    };
  }
  function getDepthStencilAttachmentWebGL(format) {
    const formatInfo = textureFormatDecoder.getInfo(format);
    switch (formatInfo.attachment) {
      case "depth":
        return 36096;
      case "stencil":
        return 36128;
      case "depth-stencil":
        return 33306;
      default:
        throw new Error(`Not a depth stencil format: ${format}`);
    }
  }
  function getWebGLPixelDataFormat(channels, integer, normalized, format) {
    if (format === 6408 || format === 6407) {
      return format;
    }
    switch (channels) {
      case "r":
        return integer && !normalized ? 36244 : 6403;
      case "rg":
        return integer && !normalized ? 33320 : 33319;
      case "rgb":
        return integer && !normalized ? 36248 : 6407;
      case "rgba":
        return integer && !normalized ? 36249 : 6408;
      case "bgra":
        throw new Error("bgra pixels not supported by WebGL");
      default:
        return 6408;
    }
  }
  function convertTextureFormatToGL(format) {
    const formatInfo = WEBGL_TEXTURE_FORMATS[format];
    const webglFormat = formatInfo?.gl;
    if (webglFormat === void 0) {
      throw new Error(`Unsupported texture format ${format}`);
    }
    return webglFormat;
  }
  var X_S3TC, X_S3TC_SRGB, X_RGTC, X_BPTC, X_ETC2, X_ASTC, X_ETC1, X_PVRTC, X_ATC, EXT_texture_norm16, EXT_render_snorm, EXT_color_buffer_float, TEXTURE_FEATURES, WEBGL_TEXTURE_FORMATS;
  var init_webgl_texture_table = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/converters/webgl-texture-table.js"() {
      init_dist4();
      init_webgl_extensions();
      init_webgl_vertex_formats();
      X_S3TC = "WEBGL_compressed_texture_s3tc";
      X_S3TC_SRGB = "WEBGL_compressed_texture_s3tc_srgb";
      X_RGTC = "EXT_texture_compression_rgtc";
      X_BPTC = "EXT_texture_compression_bptc";
      X_ETC2 = "WEBGL_compressed_texture_etc";
      X_ASTC = "WEBGL_compressed_texture_astc";
      X_ETC1 = "WEBGL_compressed_texture_etc1";
      X_PVRTC = "WEBGL_compressed_texture_pvrtc";
      X_ATC = "WEBGL_compressed_texture_atc";
      EXT_texture_norm16 = "EXT_texture_norm16";
      EXT_render_snorm = "EXT_render_snorm";
      EXT_color_buffer_float = "EXT_color_buffer_float";
      TEXTURE_FEATURES = {
        "float32-renderable-webgl": ["EXT_color_buffer_float"],
        "float16-renderable-webgl": ["EXT_color_buffer_half_float"],
        "rgb9e5ufloat-renderable-webgl": ["WEBGL_render_shared_exponent"],
        "snorm8-renderable-webgl": [EXT_render_snorm],
        "norm16-renderable-webgl": [EXT_texture_norm16],
        "snorm16-renderable-webgl": [EXT_texture_norm16, EXT_render_snorm],
        "float32-filterable": ["OES_texture_float_linear"],
        "float16-filterable-webgl": ["OES_texture_half_float_linear"],
        "texture-filterable-anisotropic-webgl": ["EXT_texture_filter_anisotropic"],
        "texture-blend-float-webgl": ["EXT_float_blend"],
        "texture-compression-bc": [X_S3TC, X_S3TC_SRGB, X_RGTC, X_BPTC],
        // 'texture-compression-bc3-srgb-webgl': [X_S3TC_SRGB],
        // 'texture-compression-bc3-webgl': [X_S3TC],
        "texture-compression-bc5-webgl": [X_RGTC],
        "texture-compression-bc7-webgl": [X_BPTC],
        "texture-compression-etc2": [X_ETC2],
        "texture-compression-astc": [X_ASTC],
        "texture-compression-etc1-webgl": [X_ETC1],
        "texture-compression-pvrtc-webgl": [X_PVRTC],
        "texture-compression-atc-webgl": [X_ATC]
      };
      WEBGL_TEXTURE_FORMATS = {
        // 8-bit formats
        "r8unorm": { gl: 33321, rb: true },
        "r8snorm": { gl: 36756 },
        "r8uint": { gl: 33330, rb: true },
        "r8sint": { gl: 33329, rb: true },
        // 16-bit formats
        "rg8unorm": { gl: 33323, rb: true },
        "rg8snorm": { gl: 36757 },
        "rg8uint": { gl: 33336, rb: true },
        "rg8sint": { gl: 33335, rb: true },
        "r16uint": { gl: 33332, rb: true },
        "r16sint": { gl: 33331, rb: true },
        "r16float": { gl: 33325, rb: true },
        "r16unorm": { gl: 33322, rb: true },
        "r16snorm": { gl: 36760 },
        // Packed 16-bit formats
        "rgba4unorm-webgl": { gl: 32854, rb: true },
        "rgb565unorm-webgl": { gl: 36194, rb: true },
        "rgb5a1unorm-webgl": { gl: 32855, rb: true },
        // 24-bit formats
        "rgb8unorm-webgl": { gl: 32849 },
        "rgb8snorm-webgl": { gl: 36758 },
        // 32-bit formats
        "rgba8unorm": { gl: 32856 },
        "rgba8unorm-srgb": { gl: 35907 },
        "rgba8snorm": { gl: 36759 },
        "rgba8uint": { gl: 36220 },
        "rgba8sint": { gl: 36238 },
        // reverse colors, webgpu only
        "bgra8unorm": {},
        "bgra8unorm-srgb": {},
        "rg16uint": { gl: 33338 },
        "rg16sint": { gl: 33337 },
        "rg16float": { gl: 33327, rb: true },
        "rg16unorm": { gl: 33324 },
        "rg16snorm": { gl: 36761 },
        "r32uint": { gl: 33334, rb: true },
        "r32sint": { gl: 33333, rb: true },
        "r32float": { gl: 33326 },
        // Packed 32-bit formats
        "rgb9e5ufloat": { gl: 35901 },
        // , filter: true},
        "rg11b10ufloat": { gl: 35898, rb: true },
        "rgb10a2unorm": { gl: 32857, rb: true },
        "rgb10a2uint": { gl: 36975, rb: true },
        // 48-bit formats
        "rgb16unorm-webgl": { gl: 32852 },
        // rgb not renderable
        "rgb16snorm-webgl": { gl: 36762 },
        // rgb not renderable
        // 64-bit formats
        "rg32uint": { gl: 33340, rb: true },
        "rg32sint": { gl: 33339, rb: true },
        "rg32float": { gl: 33328, rb: true },
        "rgba16uint": { gl: 36214, rb: true },
        "rgba16sint": { gl: 36232, rb: true },
        "rgba16float": { gl: 34842 },
        "rgba16unorm": { gl: 32859, rb: true },
        "rgba16snorm": { gl: 36763 },
        // 96-bit formats (deprecated!)
        "rgb32float-webgl": { gl: 34837, x: EXT_color_buffer_float, dataFormat: 6407, types: [5126] },
        // 128-bit formats
        "rgba32uint": { gl: 36208, rb: true },
        "rgba32sint": { gl: 36226, rb: true },
        "rgba32float": { gl: 34836, rb: true },
        // Depth and stencil formats
        "stencil8": { gl: 36168, rb: true },
        // 8 stencil bits
        "depth16unorm": { gl: 33189, dataFormat: 6402, types: [5123], rb: true },
        // 16 depth bits
        "depth24plus": { gl: 33190, dataFormat: 6402, types: [5125] },
        "depth32float": { gl: 36012, dataFormat: 6402, types: [5126], rb: true },
        // The depth component of the "depth24plus" and "depth24plus-stencil8" formats may be implemented as either a 24-bit depth value or a "depth32float" value.
        "depth24plus-stencil8": { gl: 35056, rb: true, depthTexture: true, dataFormat: 34041, types: [34042] },
        // "depth32float-stencil8" feature - TODO below is render buffer only?
        "depth32float-stencil8": { gl: 36013, dataFormat: 34041, types: [36269], rb: true },
        // BC compressed formats: check device.features.has("texture-compression-bc");
        "bc1-rgb-unorm-webgl": { gl: 33776, x: X_S3TC },
        "bc1-rgb-unorm-srgb-webgl": { gl: 35916, x: X_S3TC_SRGB },
        "bc1-rgba-unorm": { gl: 33777, x: X_S3TC },
        "bc1-rgba-unorm-srgb": { gl: 35916, x: X_S3TC_SRGB },
        "bc2-rgba-unorm": { gl: 33778, x: X_S3TC },
        "bc2-rgba-unorm-srgb": { gl: 35918, x: X_S3TC_SRGB },
        "bc3-rgba-unorm": { gl: 33779, x: X_S3TC },
        "bc3-rgba-unorm-srgb": { gl: 35919, x: X_S3TC_SRGB },
        "bc4-r-unorm": { gl: 36283, x: X_RGTC },
        "bc4-r-snorm": { gl: 36284, x: X_RGTC },
        "bc5-rg-unorm": { gl: 36285, x: X_RGTC },
        "bc5-rg-snorm": { gl: 36286, x: X_RGTC },
        "bc6h-rgb-ufloat": { gl: 36495, x: X_BPTC },
        "bc6h-rgb-float": { gl: 36494, x: X_BPTC },
        "bc7-rgba-unorm": { gl: 36492, x: X_BPTC },
        "bc7-rgba-unorm-srgb": { gl: 36493, x: X_BPTC },
        // WEBGL_compressed_texture_etc: device.features.has("texture-compression-etc2")
        // Note: Supposedly guaranteed availability compressed formats in WebGL2, but through CPU decompression
        "etc2-rgb8unorm": { gl: 37492 },
        "etc2-rgb8unorm-srgb": { gl: 37494 },
        "etc2-rgb8a1unorm": { gl: 37496 },
        "etc2-rgb8a1unorm-srgb": { gl: 37497 },
        "etc2-rgba8unorm": { gl: 37493 },
        "etc2-rgba8unorm-srgb": { gl: 37495 },
        "eac-r11unorm": { gl: 37488 },
        "eac-r11snorm": { gl: 37489 },
        "eac-rg11unorm": { gl: 37490 },
        "eac-rg11snorm": { gl: 37491 },
        // X_ASTC compressed formats: device.features.has("texture-compression-astc")
        "astc-4x4-unorm": { gl: 37808 },
        "astc-4x4-unorm-srgb": { gl: 37840 },
        "astc-5x4-unorm": { gl: 37809 },
        "astc-5x4-unorm-srgb": { gl: 37841 },
        "astc-5x5-unorm": { gl: 37810 },
        "astc-5x5-unorm-srgb": { gl: 37842 },
        "astc-6x5-unorm": { gl: 37811 },
        "astc-6x5-unorm-srgb": { gl: 37843 },
        "astc-6x6-unorm": { gl: 37812 },
        "astc-6x6-unorm-srgb": { gl: 37844 },
        "astc-8x5-unorm": { gl: 37813 },
        "astc-8x5-unorm-srgb": { gl: 37845 },
        "astc-8x6-unorm": { gl: 37814 },
        "astc-8x6-unorm-srgb": { gl: 37846 },
        "astc-8x8-unorm": { gl: 37815 },
        "astc-8x8-unorm-srgb": { gl: 37847 },
        "astc-10x5-unorm": { gl: 37819 },
        "astc-10x5-unorm-srgb": { gl: 37851 },
        "astc-10x6-unorm": { gl: 37817 },
        "astc-10x6-unorm-srgb": { gl: 37849 },
        "astc-10x8-unorm": { gl: 37818 },
        "astc-10x8-unorm-srgb": { gl: 37850 },
        "astc-10x10-unorm": { gl: 37819 },
        "astc-10x10-unorm-srgb": { gl: 37851 },
        "astc-12x10-unorm": { gl: 37820 },
        "astc-12x10-unorm-srgb": { gl: 37852 },
        "astc-12x12-unorm": { gl: 37821 },
        "astc-12x12-unorm-srgb": { gl: 37853 },
        // WEBGL_compressed_texture_pvrtc
        "pvrtc-rgb4unorm-webgl": { gl: 35840 },
        "pvrtc-rgba4unorm-webgl": { gl: 35842 },
        "pvrtc-rbg2unorm-webgl": { gl: 35841 },
        "pvrtc-rgba2unorm-webgl": { gl: 35843 },
        // WEBGL_compressed_texture_etc1
        "etc1-rbg-unorm-webgl": { gl: 36196 },
        // WEBGL_compressed_texture_atc
        "atc-rgb-unorm-webgl": { gl: 35986 },
        "atc-rgba-unorm-webgl": { gl: 35986 },
        "atc-rgbai-unorm-webgl": { gl: 34798 }
      };
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-features.js
  var WEBGL_FEATURES, WebGLDeviceFeatures;
  var init_webgl_device_features = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-features.js"() {
      init_dist4();
      init_webgl_extensions();
      init_webgl_texture_table();
      WEBGL_FEATURES = {
        // optional WebGPU features
        "depth-clip-control": "EXT_depth_clamp",
        // TODO these seem subtly different
        // 'timestamp-query' // GPUQueryType "timestamp-query"
        // "indirect-first-instance"
        // Textures are handled by getTextureFeatures()
        // 'depth32float-stencil8' // GPUTextureFormat 'depth32float-stencil8'
        // optional WebGL features
        "timer-query-webgl": "EXT_disjoint_timer_query_webgl2",
        "compilation-status-async-webgl": "KHR_parallel_shader_compile",
        "polygon-mode-webgl": "WEBGL_polygon_mode",
        "provoking-vertex-webgl": "WEBGL_provoking_vertex",
        "shader-clip-cull-distance-webgl": "WEBGL_clip_cull_distance",
        "shader-noperspective-interpolation-webgl": "NV_shader_noperspective_interpolation",
        "shader-conservative-depth-webgl": "EXT_conservative_depth"
        // Textures are handled by getTextureFeatures()
      };
      WebGLDeviceFeatures = class extends DeviceFeatures {
        gl;
        extensions;
        testedFeatures = /* @__PURE__ */ new Set();
        constructor(gl, extensions, disabledFeatures) {
          super([], disabledFeatures);
          this.gl = gl;
          this.extensions = extensions;
          getWebGLExtension(gl, "EXT_color_buffer_float", extensions);
        }
        *[Symbol.iterator]() {
          const features = this.getFeatures();
          for (const feature of features) {
            if (this.has(feature)) {
              yield feature;
            }
          }
          return [];
        }
        has(feature) {
          if (this.disabledFeatures?.[feature]) {
            return false;
          }
          if (!this.testedFeatures.has(feature)) {
            this.testedFeatures.add(feature);
            if (isTextureFeature(feature) && checkTextureFeature(this.gl, feature, this.extensions)) {
              this.features.add(feature);
            }
            if (this.getWebGLFeature(feature)) {
              this.features.add(feature);
            }
          }
          return this.features.has(feature);
        }
        // FOR DEVICE
        initializeFeatures() {
          const features = this.getFeatures().filter((feature) => feature !== "polygon-mode-webgl");
          for (const feature of features) {
            this.has(feature);
          }
        }
        // IMPLEMENTATION
        getFeatures() {
          return [...Object.keys(WEBGL_FEATURES), ...Object.keys(TEXTURE_FEATURES)];
        }
        /** Extract all WebGL features */
        getWebGLFeature(feature) {
          const featureInfo = WEBGL_FEATURES[feature];
          const isSupported = typeof featureInfo === "string" ? Boolean(getWebGLExtension(this.gl, featureInfo, this.extensions)) : Boolean(featureInfo);
          return isSupported;
        }
      };
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-limits.js
  var WebGLDeviceLimits;
  var init_webgl_device_limits = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-limits.js"() {
      init_dist4();
      WebGLDeviceLimits = class extends DeviceLimits {
        get maxTextureDimension1D() {
          return 0;
        }
        // WebGL does not support 1D textures
        get maxTextureDimension2D() {
          return this.getParameter(3379);
        }
        get maxTextureDimension3D() {
          return this.getParameter(32883);
        }
        get maxTextureArrayLayers() {
          return this.getParameter(35071);
        }
        get maxBindGroups() {
          return 0;
        }
        get maxDynamicUniformBuffersPerPipelineLayout() {
          return 0;
        }
        // TBD
        get maxDynamicStorageBuffersPerPipelineLayout() {
          return 0;
        }
        // TBD
        get maxSampledTexturesPerShaderStage() {
          return this.getParameter(35660);
        }
        // ) TBD
        get maxSamplersPerShaderStage() {
          return this.getParameter(35661);
        }
        get maxStorageBuffersPerShaderStage() {
          return 0;
        }
        // TBD
        get maxStorageTexturesPerShaderStage() {
          return 0;
        }
        // TBD
        get maxUniformBuffersPerShaderStage() {
          return this.getParameter(35375);
        }
        get maxUniformBufferBindingSize() {
          return this.getParameter(35376);
        }
        get maxStorageBufferBindingSize() {
          return 0;
        }
        get minUniformBufferOffsetAlignment() {
          return this.getParameter(35380);
        }
        get minStorageBufferOffsetAlignment() {
          return 0;
        }
        get maxVertexBuffers() {
          return 16;
        }
        // WebGL 2 supports 16 buffers, see https://github.com/gpuweb/gpuweb/issues/4284
        get maxVertexAttributes() {
          return this.getParameter(34921);
        }
        get maxVertexBufferArrayStride() {
          return 2048;
        }
        // TBD, this is just the default value from WebGPU
        get maxInterStageShaderVariables() {
          return this.getParameter(35659);
        }
        get maxComputeWorkgroupStorageSize() {
          return 0;
        }
        // WebGL does not support compute shaders
        get maxComputeInvocationsPerWorkgroup() {
          return 0;
        }
        // WebGL does not support compute shaders
        get maxComputeWorkgroupSizeX() {
          return 0;
        }
        // WebGL does not support compute shaders
        get maxComputeWorkgroupSizeY() {
          return 0;
        }
        // WebGL does not support compute shaders
        get maxComputeWorkgroupSizeZ() {
          return 0;
        }
        // WebGL does not support compute shaders
        get maxComputeWorkgroupsPerDimension() {
          return 0;
        }
        // WebGL does not support compute shaders
        // PRIVATE
        gl;
        limits = {};
        constructor(gl) {
          super();
          this.gl = gl;
        }
        getParameter(parameter) {
          if (this.limits[parameter] === void 0) {
            this.limits[parameter] = this.gl.getParameter(parameter);
          }
          return this.limits[parameter] || 0;
        }
      };
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-framebuffer.js
  function mapIndexToCubeMapFace(layer) {
    return layer < 34069 ? layer + 34069 : layer;
  }
  function _getFrameBufferStatus(status) {
    switch (status) {
      case 36053:
        return "success";
      case 36054:
        return "Mismatched attachments";
      case 36055:
        return "No attachments";
      case 36057:
        return "Height/width mismatch";
      case 36061:
        return "Unsupported or split attachments";
      case 36182:
        return "Samples mismatch";
      default:
        return `${status}`;
    }
  }
  var WEBGLFramebuffer;
  var init_webgl_framebuffer = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-framebuffer.js"() {
      init_dist4();
      init_webgl_texture_table();
      WEBGLFramebuffer = class extends Framebuffer {
        device;
        gl;
        handle;
        colorAttachments = [];
        depthStencilAttachment = null;
        constructor(device, props) {
          super(device, props);
          const isDefaultFramebuffer = props.handle === null;
          this.device = device;
          this.gl = device.gl;
          this.handle = this.props.handle || isDefaultFramebuffer ? this.props.handle : this.gl.createFramebuffer();
          if (!isDefaultFramebuffer) {
            device._setWebGLDebugMetadata(this.handle, this, { spector: this.props });
            this.autoCreateAttachmentTextures();
            this.updateAttachments();
          }
        }
        /** destroys any auto created resources etc. */
        destroy() {
          super.destroy();
          if (!this.destroyed && this.handle !== null) {
            this.gl.deleteFramebuffer(this.handle);
          }
        }
        updateAttachments() {
          const prevHandle = this.gl.bindFramebuffer(36160, this.handle);
          for (let i7 = 0; i7 < this.colorAttachments.length; ++i7) {
            const attachment = this.colorAttachments[i7];
            if (attachment) {
              const attachmentPoint = 36064 + i7;
              this._attachTextureView(attachmentPoint, attachment);
            }
          }
          if (this.depthStencilAttachment) {
            const attachmentPoint = getDepthStencilAttachmentWebGL(this.depthStencilAttachment.props.format);
            this._attachTextureView(attachmentPoint, this.depthStencilAttachment);
          }
          if (this.device.props.debug) {
            const status = this.gl.checkFramebufferStatus(36160);
            if (status !== 36053) {
              throw new Error(`Framebuffer ${_getFrameBufferStatus(status)}`);
            }
          }
          this.gl.bindFramebuffer(36160, prevHandle);
        }
        // PRIVATE
        /** In WebGL we must use renderbuffers for depth/stencil attachments (unless we have extensions) */
        // protected override createDepthStencilTexture(format: TextureFormat): Texture {
        //   // return new WEBGLRenderbuffer(this.device, {
        //   return new WEBGLTexture(this.device, {
        //     id: `${this.id}-depth-stencil`,
        //     format,
        //     width: this.width,
        //     height: this.height,
        //     mipmaps: false
        //   });
        // }
        /**
         * @param attachment
         * @param texture
         * @param layer = 0 - index into WEBGLTextureArray and Texture3D or face for `TextureCubeMap`
         * @param level = 0 - mipmapLevel
         */
        _attachTextureView(attachment, textureView) {
          const { gl } = this.device;
          const { texture } = textureView;
          const level = textureView.props.baseMipLevel;
          const layer = textureView.props.baseArrayLayer;
          gl.bindTexture(texture.glTarget, texture.handle);
          switch (texture.glTarget) {
            case 35866:
            case 32879:
              gl.framebufferTextureLayer(36160, attachment, texture.handle, level, layer);
              break;
            case 34067:
              const face = mapIndexToCubeMapFace(layer);
              gl.framebufferTexture2D(36160, attachment, face, texture.handle, level);
              break;
            case 3553:
              gl.framebufferTexture2D(36160, attachment, 3553, texture.handle, level);
              break;
            default:
              throw new Error("Illegal texture type");
          }
          gl.bindTexture(texture.glTarget, null);
        }
      };
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/webgl-canvas-context.js
  var WebGLCanvasContext;
  var init_webgl_canvas_context = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/webgl-canvas-context.js"() {
      init_dist4();
      init_webgl_framebuffer();
      WebGLCanvasContext = class extends CanvasContext {
        device;
        handle = null;
        _framebuffer = null;
        get [Symbol.toStringTag]() {
          return "WebGLCanvasContext";
        }
        constructor(device, props) {
          super(props);
          this.device = device;
          this._setAutoCreatedCanvasId(`${this.device.id}-canvas`);
          this._updateDevice();
        }
        getCurrentFramebuffer() {
          this._framebuffer = this._framebuffer || new WEBGLFramebuffer(this.device, { handle: null });
          return this._framebuffer;
        }
        // IMPLEMENTATION OF ABSTRACT METHODS
        _updateDevice() {
        }
      };
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/utils/uid.js
  function uid3(id = "id") {
    uidCounters3[id] = uidCounters3[id] || 1;
    const count3 = uidCounters3[id]++;
    return `${id}-${count3}`;
  }
  var uidCounters3;
  var init_uid2 = __esm({
    "../../node_modules/@luma.gl/webgl/dist/utils/uid.js"() {
      uidCounters3 = {};
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-buffer.js
  function getWebGLTarget(usage) {
    if (usage & Buffer2.INDEX) {
      return 34963;
    }
    if (usage & Buffer2.VERTEX) {
      return 34962;
    }
    if (usage & Buffer2.UNIFORM) {
      return 35345;
    }
    return 34962;
  }
  function getWebGLUsage(usage) {
    if (usage & Buffer2.INDEX) {
      return 35044;
    }
    if (usage & Buffer2.VERTEX) {
      return 35044;
    }
    if (usage & Buffer2.UNIFORM) {
      return 35048;
    }
    return 35044;
  }
  var WEBGLBuffer;
  var init_webgl_buffer = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-buffer.js"() {
      init_dist4();
      WEBGLBuffer = class extends Buffer2 {
        device;
        gl;
        handle;
        /** Target in OpenGL defines the type of buffer */
        glTarget;
        /** Usage is a hint on how frequently the buffer will be updates */
        glUsage;
        /** Index type is needed when issuing draw calls, so we pre-compute it */
        glIndexType = 5123;
        /** Number of bytes allocated on the GPU for this buffer */
        byteLength = 0;
        /** Number of bytes used */
        bytesUsed = 0;
        constructor(device, props = {}) {
          super(device, props);
          this.device = device;
          this.gl = this.device.gl;
          const handle = typeof props === "object" ? props.handle : void 0;
          this.handle = handle || this.gl.createBuffer();
          device._setWebGLDebugMetadata(this.handle, this, {
            spector: { ...this.props, data: typeof this.props.data }
          });
          this.glTarget = getWebGLTarget(this.props.usage);
          this.glUsage = getWebGLUsage(this.props.usage);
          this.glIndexType = this.props.indexType === "uint32" ? 5125 : 5123;
          if (props.data) {
            this._initWithData(props.data, props.byteOffset, props.byteLength);
          } else {
            this._initWithByteLength(props.byteLength || 0);
          }
        }
        destroy() {
          if (!this.destroyed && this.handle) {
            this.removeStats();
            this.trackDeallocatedMemory();
            this.gl.deleteBuffer(this.handle);
            this.destroyed = true;
            this.handle = null;
          }
        }
        /** Allocate a new buffer and initialize to contents of typed array */
        _initWithData(data, byteOffset = 0, byteLength = data.byteLength + byteOffset) {
          const glTarget = this.glTarget;
          this.gl.bindBuffer(glTarget, this.handle);
          this.gl.bufferData(glTarget, byteLength, this.glUsage);
          this.gl.bufferSubData(glTarget, byteOffset, data);
          this.gl.bindBuffer(glTarget, null);
          this.bytesUsed = byteLength;
          this.byteLength = byteLength;
          this._setDebugData(data, byteOffset, byteLength);
          this.trackAllocatedMemory(byteLength);
        }
        // Allocate a GPU buffer of specified size.
        _initWithByteLength(byteLength) {
          let data = byteLength;
          if (byteLength === 0) {
            data = new Float32Array(0);
          }
          const glTarget = this.glTarget;
          this.gl.bindBuffer(glTarget, this.handle);
          this.gl.bufferData(glTarget, data, this.glUsage);
          this.gl.bindBuffer(glTarget, null);
          this.bytesUsed = byteLength;
          this.byteLength = byteLength;
          this._setDebugData(null, 0, byteLength);
          this.trackAllocatedMemory(byteLength);
          return this;
        }
        write(data, byteOffset = 0) {
          const dataView = ArrayBuffer.isView(data) ? data : new Uint8Array(data);
          const srcOffset = 0;
          const byteLength = void 0;
          const glTarget = 36663;
          this.gl.bindBuffer(glTarget, this.handle);
          if (srcOffset !== 0 || byteLength !== void 0) {
            this.gl.bufferSubData(glTarget, byteOffset, dataView, srcOffset, byteLength);
          } else {
            this.gl.bufferSubData(glTarget, byteOffset, dataView);
          }
          this.gl.bindBuffer(glTarget, null);
          this._setDebugData(data, byteOffset, data.byteLength);
        }
        async mapAndWriteAsync(callback, byteOffset = 0, byteLength = this.byteLength - byteOffset) {
          const arrayBuffer2 = new ArrayBuffer(byteLength);
          await callback(arrayBuffer2, "copied");
          this.write(arrayBuffer2, byteOffset);
        }
        async readAsync(byteOffset = 0, byteLength) {
          return this.readSyncWebGL(byteOffset, byteLength);
        }
        async mapAndReadAsync(callback, byteOffset = 0, byteLength) {
          const data = await this.readAsync(byteOffset, byteLength);
          return await callback(data.buffer, "copied");
        }
        readSyncWebGL(byteOffset = 0, byteLength) {
          byteLength = byteLength ?? this.byteLength - byteOffset;
          const data = new Uint8Array(byteLength);
          const dstOffset = 0;
          this.gl.bindBuffer(36662, this.handle);
          this.gl.getBufferSubData(36662, byteOffset, data, dstOffset, byteLength);
          this.gl.bindBuffer(36662, null);
          this._setDebugData(data, byteOffset, byteLength);
          return data;
        }
      };
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/helpers/parse-shader-compiler-log.js
  function parseShaderCompilerLog(errLog) {
    const lines = errLog.split(/\r?\n/);
    const messages = [];
    for (const line of lines) {
      if (line.length <= 1) {
        continue;
      }
      const segments = line.split(":");
      if (segments.length === 2) {
        const [messageType2, message2] = segments;
        messages.push({
          message: message2.trim(),
          type: getMessageType(messageType2),
          lineNum: 0,
          linePos: 0
        });
        continue;
      }
      const [messageType, linePosition, lineNumber, ...rest] = segments;
      let lineNum = parseInt(lineNumber, 10);
      if (isNaN(lineNum)) {
        lineNum = 0;
      }
      let linePos = parseInt(linePosition, 10);
      if (isNaN(linePos)) {
        linePos = 0;
      }
      messages.push({
        message: rest.join(":").trim(),
        type: getMessageType(messageType),
        lineNum,
        linePos
        // TODO
      });
    }
    return messages;
  }
  function getMessageType(messageType) {
    const MESSAGE_TYPES = ["warning", "error", "info"];
    const lowerCaseType = messageType.toLowerCase();
    return MESSAGE_TYPES.includes(lowerCaseType) ? lowerCaseType : "info";
  }
  var init_parse_shader_compiler_log = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/helpers/parse-shader-compiler-log.js"() {
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-shader.js
  var WEBGLShader;
  var init_webgl_shader = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-shader.js"() {
      init_dist4();
      init_parse_shader_compiler_log();
      WEBGLShader = class extends Shader {
        device;
        handle;
        constructor(device, props) {
          super(device, props);
          this.device = device;
          switch (this.props.stage) {
            case "vertex":
              this.handle = this.props.handle || this.device.gl.createShader(35633);
              break;
            case "fragment":
              this.handle = this.props.handle || this.device.gl.createShader(35632);
              break;
            default:
              throw new Error(this.props.stage);
          }
          device._setWebGLDebugMetadata(this.handle, this, { spector: this.props });
          this._compile(this.source);
        }
        destroy() {
          if (this.handle) {
            this.removeStats();
            this.device.gl.deleteShader(this.handle);
            this.destroyed = true;
            this.handle.destroyed = true;
          }
        }
        get asyncCompilationStatus() {
          return this._waitForCompilationComplete().then(() => {
            this._getCompilationStatus();
            return this.compilationStatus;
          });
        }
        async getCompilationInfo() {
          await this._waitForCompilationComplete();
          return this.getCompilationInfoSync();
        }
        getCompilationInfoSync() {
          const shaderLog = this.device.gl.getShaderInfoLog(this.handle);
          return shaderLog ? parseShaderCompilerLog(shaderLog) : [];
        }
        getTranslatedSource() {
          const extensions = this.device.getExtension("WEBGL_debug_shaders");
          const ext = extensions.WEBGL_debug_shaders;
          return ext?.getTranslatedShaderSource(this.handle) || null;
        }
        // PRIVATE METHODS
        /** Compile a shader and get compilation status */
        async _compile(source4) {
          source4 = source4.startsWith("#version ") ? source4 : `#version 300 es
${source4}`;
          const { gl } = this.device;
          gl.shaderSource(this.handle, source4);
          gl.compileShader(this.handle);
          if (!this.device.props.debug) {
            this.compilationStatus = "pending";
            return;
          }
          if (!this.device.features.has("compilation-status-async-webgl")) {
            this._getCompilationStatus();
            this.debugShader();
            if (this.compilationStatus === "error") {
              throw new Error(`GLSL compilation errors in ${this.props.stage} shader ${this.props.id}`);
            }
            return;
          }
          log2.once(1, "Shader compilation is asynchronous")();
          await this._waitForCompilationComplete();
          log2.info(2, `Shader ${this.id} - async compilation complete: ${this.compilationStatus}`)();
          this._getCompilationStatus();
          this.debugShader();
        }
        /** Use KHR_parallel_shader_compile extension if available */
        async _waitForCompilationComplete() {
          const waitMs = async (ms) => await new Promise((resolve2) => setTimeout(resolve2, ms));
          const DELAY_MS = 10;
          if (!this.device.features.has("compilation-status-async-webgl")) {
            await waitMs(DELAY_MS);
            return;
          }
          const { gl } = this.device;
          for (; ; ) {
            const complete = gl.getShaderParameter(this.handle, 37297);
            if (complete) {
              return;
            }
            await waitMs(DELAY_MS);
          }
        }
        /**
         * Get the shader compilation status
         * TODO - Load log even when no error reported, to catch warnings?
         * https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings
         */
        _getCompilationStatus() {
          this.compilationStatus = this.device.gl.getShaderParameter(this.handle, 35713) ? "success" : "error";
        }
      };
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/converters/device-parameters.js
  function withDeviceAndGLParameters(device, parameters2, glParameters, func) {
    if (isObjectEmpty3(parameters2)) {
      return func(device);
    }
    const webglDevice = device;
    webglDevice.pushState();
    try {
      setDeviceParameters(device, parameters2);
      setGLParameters(webglDevice.gl, glParameters);
      return func(device);
    } finally {
      webglDevice.popState();
    }
  }
  function setDeviceParameters(device, parameters2) {
    const webglDevice = device;
    const { gl } = webglDevice;
    if (parameters2.cullMode) {
      switch (parameters2.cullMode) {
        case "none":
          gl.disable(2884);
          break;
        case "front":
          gl.enable(2884);
          gl.cullFace(1028);
          break;
        case "back":
          gl.enable(2884);
          gl.cullFace(1029);
          break;
      }
    }
    if (parameters2.frontFace) {
      gl.frontFace(map2("frontFace", parameters2.frontFace, {
        ccw: 2305,
        cw: 2304
      }));
    }
    if (parameters2.unclippedDepth) {
      if (device.features.has("depth-clip-control")) {
        gl.enable(34383);
      }
    }
    if (parameters2.depthBias !== void 0) {
      gl.enable(32823);
      gl.polygonOffset(parameters2.depthBias, parameters2.depthBiasSlopeScale || 0);
    }
    if (parameters2.provokingVertex) {
      if (device.features.has("provoking-vertex-webgl")) {
        const extensions = webglDevice.getExtension("WEBGL_provoking_vertex");
        const ext = extensions.WEBGL_provoking_vertex;
        const vertex5 = map2("provokingVertex", parameters2.provokingVertex, {
          first: 36429,
          last: 36430
        });
        ext?.provokingVertexWEBGL(vertex5);
      }
    }
    if (parameters2.polygonMode || parameters2.polygonOffsetLine) {
      if (device.features.has("polygon-mode-webgl")) {
        if (parameters2.polygonMode) {
          const extensions = webglDevice.getExtension("WEBGL_polygon_mode");
          const ext = extensions.WEBGL_polygon_mode;
          const mode = map2("polygonMode", parameters2.polygonMode, {
            fill: 6914,
            line: 6913
          });
          ext?.polygonModeWEBGL(1028, mode);
          ext?.polygonModeWEBGL(1029, mode);
        }
        if (parameters2.polygonOffsetLine) {
          gl.enable(10754);
        }
      }
    }
    if (device.features.has("shader-clip-cull-distance-webgl")) {
      if (parameters2.clipDistance0) {
        gl.enable(12288);
      }
      if (parameters2.clipDistance1) {
        gl.enable(12289);
      }
      if (parameters2.clipDistance2) {
        gl.enable(12290);
      }
      if (parameters2.clipDistance3) {
        gl.enable(12291);
      }
      if (parameters2.clipDistance4) {
        gl.enable(12292);
      }
      if (parameters2.clipDistance5) {
        gl.enable(12293);
      }
      if (parameters2.clipDistance6) {
        gl.enable(12294);
      }
      if (parameters2.clipDistance7) {
        gl.enable(12295);
      }
    }
    if (parameters2.depthWriteEnabled !== void 0) {
      gl.depthMask(mapBoolean("depthWriteEnabled", parameters2.depthWriteEnabled));
    }
    if (parameters2.depthCompare) {
      parameters2.depthCompare !== "always" ? gl.enable(2929) : gl.disable(2929);
      gl.depthFunc(convertCompareFunction("depthCompare", parameters2.depthCompare));
    }
    if (parameters2.stencilWriteMask) {
      const mask = parameters2.stencilWriteMask;
      gl.stencilMaskSeparate(1028, mask);
      gl.stencilMaskSeparate(1029, mask);
    }
    if (parameters2.stencilReadMask) {
      log2.warn("stencilReadMask not supported under WebGL");
    }
    if (parameters2.stencilCompare) {
      const mask = parameters2.stencilReadMask || 4294967295;
      const glValue = convertCompareFunction("depthCompare", parameters2.stencilCompare);
      parameters2.stencilCompare !== "always" ? gl.enable(2960) : gl.disable(2960);
      gl.stencilFuncSeparate(1028, glValue, 0, mask);
      gl.stencilFuncSeparate(1029, glValue, 0, mask);
    }
    if (parameters2.stencilPassOperation && parameters2.stencilFailOperation && parameters2.stencilDepthFailOperation) {
      const dppass = convertStencilOperation("stencilPassOperation", parameters2.stencilPassOperation);
      const sfail = convertStencilOperation("stencilFailOperation", parameters2.stencilFailOperation);
      const dpfail = convertStencilOperation("stencilDepthFailOperation", parameters2.stencilDepthFailOperation);
      gl.stencilOpSeparate(1028, sfail, dpfail, dppass);
      gl.stencilOpSeparate(1029, sfail, dpfail, dppass);
    }
    switch (parameters2.blend) {
      case true:
        gl.enable(3042);
        break;
      case false:
        gl.disable(3042);
        break;
      default:
    }
    if (parameters2.blendColorOperation || parameters2.blendAlphaOperation) {
      const colorEquation = convertBlendOperationToEquation("blendColorOperation", parameters2.blendColorOperation || "add");
      const alphaEquation = convertBlendOperationToEquation("blendAlphaOperation", parameters2.blendAlphaOperation || "add");
      gl.blendEquationSeparate(colorEquation, alphaEquation);
      const colorSrcFactor = convertBlendFactorToFunction("blendColorSrcFactor", parameters2.blendColorSrcFactor || "one");
      const colorDstFactor = convertBlendFactorToFunction("blendColorDstFactor", parameters2.blendColorDstFactor || "zero");
      const alphaSrcFactor = convertBlendFactorToFunction("blendAlphaSrcFactor", parameters2.blendAlphaSrcFactor || "one");
      const alphaDstFactor = convertBlendFactorToFunction("blendAlphaDstFactor", parameters2.blendAlphaDstFactor || "zero");
      gl.blendFuncSeparate(colorSrcFactor, colorDstFactor, alphaSrcFactor, alphaDstFactor);
    }
  }
  function convertCompareFunction(parameter, value) {
    return map2(parameter, value, {
      never: 512,
      less: 513,
      equal: 514,
      "less-equal": 515,
      greater: 516,
      "not-equal": 517,
      "greater-equal": 518,
      always: 519
    });
  }
  function convertStencilOperation(parameter, value) {
    return map2(parameter, value, {
      keep: 7680,
      zero: 0,
      replace: 7681,
      invert: 5386,
      "increment-clamp": 7682,
      "decrement-clamp": 7683,
      "increment-wrap": 34055,
      "decrement-wrap": 34056
    });
  }
  function convertBlendOperationToEquation(parameter, value) {
    return map2(parameter, value, {
      add: 32774,
      subtract: 32778,
      "reverse-subtract": 32779,
      min: 32775,
      max: 32776
    });
  }
  function convertBlendFactorToFunction(parameter, value, type = "color") {
    return map2(parameter, value, {
      one: 1,
      zero: 0,
      src: 768,
      "one-minus-src": 769,
      dst: 774,
      "one-minus-dst": 775,
      "src-alpha": 770,
      "one-minus-src-alpha": 771,
      "dst-alpha": 772,
      "one-minus-dst-alpha": 773,
      "src-alpha-saturated": 776,
      constant: type === "color" ? 32769 : 32771,
      "one-minus-constant": type === "color" ? 32770 : 32772,
      // 'constant-alpha': GL.CONSTANT_ALPHA,
      // 'one-minus-constant-alpha': GL.ONE_MINUS_CONSTANT_ALPHA,
      // TODO not supported in WebGL2
      src1: 768,
      "one-minus-src1": 769,
      "src1-alpha": 770,
      "one-minus-src1-alpha": 771
    });
  }
  function message(parameter, value) {
    return `Illegal parameter ${value} for ${parameter}`;
  }
  function map2(parameter, value, valueMap) {
    if (!(value in valueMap)) {
      throw new Error(message(parameter, value));
    }
    return valueMap[value];
  }
  function mapBoolean(parameter, value) {
    return value;
  }
  function isObjectEmpty3(obj) {
    let isEmpty = true;
    for (const key in obj) {
      isEmpty = false;
      break;
    }
    return isEmpty;
  }
  var init_device_parameters = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/converters/device-parameters.js"() {
      init_dist4();
      init_unified_parameter_api();
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/converters/sampler-parameters.js
  function convertSamplerParametersToWebGL(props) {
    const params = {};
    if (props.addressModeU) {
      params[10242] = convertAddressMode(props.addressModeU);
    }
    if (props.addressModeV) {
      params[10243] = convertAddressMode(props.addressModeV);
    }
    if (props.addressModeW) {
      params[32882] = convertAddressMode(props.addressModeW);
    }
    if (props.magFilter) {
      params[10240] = convertMaxFilterMode(props.magFilter);
    }
    if (props.minFilter || props.mipmapFilter) {
      params[10241] = convertMinFilterMode(props.minFilter || "linear", props.mipmapFilter);
    }
    if (props.lodMinClamp !== void 0) {
      params[33082] = props.lodMinClamp;
    }
    if (props.lodMaxClamp !== void 0) {
      params[33083] = props.lodMaxClamp;
    }
    if (props.type === "comparison-sampler") {
      params[34892] = 34894;
    }
    if (props.compare) {
      params[34893] = convertCompareFunction("compare", props.compare);
    }
    if (props.maxAnisotropy) {
      params[34046] = props.maxAnisotropy;
    }
    return params;
  }
  function convertAddressMode(addressMode) {
    switch (addressMode) {
      case "clamp-to-edge":
        return 33071;
      case "repeat":
        return 10497;
      case "mirror-repeat":
        return 33648;
    }
  }
  function convertMaxFilterMode(maxFilter) {
    switch (maxFilter) {
      case "nearest":
        return 9728;
      case "linear":
        return 9729;
    }
  }
  function convertMinFilterMode(minFilter, mipmapFilter = "none") {
    if (!mipmapFilter) {
      return convertMaxFilterMode(minFilter);
    }
    switch (mipmapFilter) {
      case "none":
        return convertMaxFilterMode(minFilter);
      case "nearest":
        switch (minFilter) {
          case "nearest":
            return 9984;
          case "linear":
            return 9985;
        }
        break;
      case "linear":
        switch (minFilter) {
          case "nearest":
            return 9986;
          case "linear":
            return 9987;
        }
    }
  }
  var init_sampler_parameters = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/converters/sampler-parameters.js"() {
      init_device_parameters();
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-sampler.js
  var WEBGLSampler;
  var init_webgl_sampler = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-sampler.js"() {
      init_dist4();
      init_sampler_parameters();
      WEBGLSampler = class extends Sampler {
        device;
        handle;
        parameters;
        constructor(device, props) {
          super(device, props);
          this.device = device;
          this.parameters = convertSamplerParametersToWebGL(props);
          this.handle = props.handle || this.device.gl.createSampler();
          this._setSamplerParameters(this.parameters);
        }
        destroy() {
          if (this.handle) {
            this.device.gl.deleteSampler(this.handle);
            this.handle = void 0;
          }
        }
        toString() {
          return `Sampler(${this.id},${JSON.stringify(this.props)})`;
        }
        /** Set sampler parameters on the sampler */
        _setSamplerParameters(parameters2) {
          for (const [pname, value] of Object.entries(parameters2)) {
            const param = Number(pname);
            switch (param) {
              case 33082:
              case 33083:
                this.device.gl.samplerParameterf(this.handle, param, value);
                break;
              default:
                this.device.gl.samplerParameteri(this.handle, param, value);
                break;
            }
          }
        }
      };
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/context/state-tracker/with-parameters.js
  function withGLParameters(gl, parameters2, func) {
    if (isObjectEmpty4(parameters2)) {
      return func(gl);
    }
    const { nocatch = true } = parameters2;
    const webglState = WebGLStateTracker.get(gl);
    webglState.push();
    setGLParameters(gl, parameters2);
    let value;
    if (nocatch) {
      value = func(gl);
      webglState.pop();
    } else {
      try {
        value = func(gl);
      } finally {
        webglState.pop();
      }
    }
    return value;
  }
  function isObjectEmpty4(object) {
    for (const key in object) {
      return false;
    }
    return true;
  }
  var init_with_parameters = __esm({
    "../../node_modules/@luma.gl/webgl/dist/context/state-tracker/with-parameters.js"() {
      init_unified_parameter_api();
      init_webgl_state_tracker();
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture-view.js
  var WEBGLTextureView;
  var init_webgl_texture_view = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture-view.js"() {
      init_dist4();
      WEBGLTextureView = class extends TextureView {
        device;
        gl;
        handle;
        // Does not have a WebGL representation
        texture;
        constructor(device, props) {
          super(device, { ...Texture.defaultProps, ...props });
          this.device = device;
          this.gl = this.device.gl;
          this.handle = null;
          this.texture = props.texture;
        }
      };
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture.js
  function getWebGLTextureTarget(dimension) {
    switch (dimension) {
      case "1d":
        break;
      case "2d":
        return 3553;
      case "3d":
        return 32879;
      case "cube":
        return 34067;
      case "2d-array":
        return 35866;
      case "cube-array":
        break;
    }
    throw new Error(dimension);
  }
  function getWebGLCubeFaceTarget(glTarget, dimension, level) {
    return dimension === "cube" ? 34069 + level : glTarget;
  }
  var WEBGLTexture;
  var init_webgl_texture = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture.js"() {
      init_dist4();
      init_webgl_texture_table();
      init_sampler_parameters();
      init_with_parameters();
      init_webgl_texture_view();
      WEBGLTexture = class extends Texture {
        // readonly MAX_ATTRIBUTES: number;
        device;
        gl;
        handle;
        // @ts-ignore TODO - currently unused in WebGL. Create dummy sampler?
        sampler = void 0;
        view;
        /**
         * The WebGL target corresponding to the texture type
         * @note `target` cannot be modified by bind:
         * textures are special because when you first bind them to a target,
         * When you first bind a texture as a GL_TEXTURE_2D, you are saying that this texture is a 2D texture.
         * And it will always be a 2D texture; this state cannot be changed ever.
         * A texture that was first bound as a GL_TEXTURE_2D, must always be bound as a GL_TEXTURE_2D;
         * attempting to bind it as GL_TEXTURE_3D will give rise to a run-time error
         */
        glTarget;
        /** The WebGL format - essentially channel structure */
        glFormat;
        /** The WebGL data format - the type of each channel */
        glType;
        /** The WebGL constant corresponding to the WebGPU style constant in format */
        glInternalFormat;
        /** Whether the internal format is compressed */
        compressed;
        // state
        /** Texture binding slot - TODO - move to texture view? */
        _textureUnit = 0;
        constructor(device, props) {
          super(device, props);
          this.device = device;
          this.gl = this.device.gl;
          const formatInfo = getTextureFormatWebGL(this.props.format);
          this.glTarget = getWebGLTextureTarget(this.props.dimension);
          this.glInternalFormat = formatInfo.internalFormat;
          this.glFormat = formatInfo.format;
          this.glType = formatInfo.type;
          this.compressed = formatInfo.compressed;
          this.handle = this.props.handle || this.gl.createTexture();
          this.device._setWebGLDebugMetadata(this.handle, this, { spector: this.props });
          this.gl.bindTexture(this.glTarget, this.handle);
          const { dimension, width, height, depth, mipLevels, glTarget, glInternalFormat } = this;
          switch (dimension) {
            case "2d":
            case "cube":
              this.gl.texStorage2D(glTarget, mipLevels, glInternalFormat, width, height);
              break;
            case "2d-array":
            case "3d":
              this.gl.texStorage3D(glTarget, mipLevels, glInternalFormat, width, height, depth);
              break;
            default:
              throw new Error(dimension);
          }
          this.gl.bindTexture(this.glTarget, null);
          this._initializeData(props.data);
          this.setSampler(this.props.sampler);
          this.view = new WEBGLTextureView(this.device, { ...this.props, texture: this });
          Object.seal(this);
        }
        destroy() {
          if (this.handle) {
            this.gl.deleteTexture(this.handle);
            this.removeStats();
            this.trackDeallocatedMemory("Texture");
            this.destroyed = true;
          }
        }
        createView(props) {
          return new WEBGLTextureView(this.device, { ...props, texture: this });
        }
        setSampler(sampler = {}) {
          super.setSampler(sampler);
          const parameters2 = convertSamplerParametersToWebGL(this.sampler.props);
          this._setSamplerParameters(parameters2);
        }
        copyImageData(options_) {
          const options = this._normalizeCopyImageDataOptions(options_);
          const typedArray = options.data;
          const { width, height, depth } = this;
          const { mipLevel = 0, byteOffset = 0, x: x4 = 0, y: y5 = 0, z: z4 = 0 } = options;
          const { glFormat, glType, compressed } = this;
          const glTarget = getWebGLCubeFaceTarget(this.glTarget, this.dimension, depth);
          const glParameters = !this.compressed ? {
            [3314]: options.bytesPerRow,
            [32878]: options.rowsPerImage
          } : {};
          this.gl.bindTexture(glTarget, this.handle);
          withGLParameters(this.gl, glParameters, () => {
            switch (this.dimension) {
              case "2d":
              case "cube":
                if (compressed) {
                  this.gl.compressedTexSubImage2D(glTarget, mipLevel, x4, y5, width, height, glFormat, typedArray, byteOffset);
                } else {
                  this.gl.texSubImage2D(glTarget, mipLevel, x4, y5, width, height, glFormat, glType, typedArray, byteOffset);
                }
                break;
              case "2d-array":
              case "3d":
                if (compressed) {
                  this.gl.compressedTexSubImage3D(glTarget, mipLevel, x4, y5, z4, width, height, depth, glFormat, typedArray, byteOffset);
                } else {
                  this.gl.texSubImage3D(glTarget, mipLevel, x4, y5, z4, width, height, depth, glFormat, glType, typedArray, byteOffset);
                }
                break;
              default:
            }
          });
          this.gl.bindTexture(glTarget, null);
        }
        copyExternalImage(options_) {
          const options = this._normalizeCopyExternalImageOptions(options_);
          if (options.sourceX || options.sourceY) {
            throw new Error("WebGL does not support sourceX/sourceY)");
          }
          const { glFormat, glType } = this;
          const { image, depth, mipLevel, x: x4, y: y5, z: z4, width, height } = options;
          const glTarget = getWebGLCubeFaceTarget(this.glTarget, this.dimension, depth);
          const glParameters = options.flipY ? { [37440]: true } : {};
          this.gl.bindTexture(this.glTarget, this.handle);
          withGLParameters(this.gl, glParameters, () => {
            switch (this.dimension) {
              case "2d":
              case "cube":
                this.gl.texSubImage2D(glTarget, mipLevel, x4, y5, width, height, glFormat, glType, image);
                break;
              case "2d-array":
              case "3d":
                this.gl.texSubImage3D(glTarget, mipLevel, x4, y5, z4, width, height, depth, glFormat, glType, image);
                break;
              default:
            }
          });
          this.gl.bindTexture(this.glTarget, null);
          return { width: options.width, height: options.height };
        }
        // WEBGL SPECIFIC
        generateMipmapsWebGL(options) {
          const isFilterableAndRenderable = this.device.isTextureFormatRenderable(this.props.format) && this.device.isTextureFormatFilterable(this.props.format);
          if (!isFilterableAndRenderable) {
            log2.warn(`${this} is not renderable or filterable, may not be able to generate mipmaps`)();
            if (!options?.force) {
              return;
            }
          }
          try {
            this.gl.bindTexture(this.glTarget, this.handle);
            this.gl.generateMipmap(this.glTarget);
          } catch (error) {
            log2.warn(`Error generating mipmap for ${this}: ${error.message}`)();
          } finally {
            this.gl.bindTexture(this.glTarget, null);
          }
        }
        // INTERNAL
        /**
         * Sets sampler parameters on texture
         */
        _setSamplerParameters(parameters2) {
          log2.log(2, `${this.id} sampler parameters`, this.device.getGLKeys(parameters2))();
          this.gl.bindTexture(this.glTarget, this.handle);
          for (const [pname, pvalue] of Object.entries(parameters2)) {
            const param = Number(pname);
            const value = pvalue;
            switch (param) {
              case 33082:
              case 33083:
                this.gl.texParameterf(this.glTarget, param, value);
                break;
              case 10240:
              case 10241:
                this.gl.texParameteri(this.glTarget, param, value);
                break;
              case 10242:
              case 10243:
              case 32882:
                this.gl.texParameteri(this.glTarget, param, value);
                break;
              case 34046:
                if (this.device.features.has("texture-filterable-anisotropic-webgl")) {
                  this.gl.texParameteri(this.glTarget, param, value);
                }
                break;
              case 34892:
              case 34893:
                this.gl.texParameteri(this.glTarget, param, value);
                break;
            }
          }
          this.gl.bindTexture(this.glTarget, null);
        }
        _getActiveUnit() {
          return this.gl.getParameter(34016) - 33984;
        }
        _bind(_textureUnit) {
          const { gl } = this;
          if (_textureUnit !== void 0) {
            this._textureUnit = _textureUnit;
            gl.activeTexture(33984 + _textureUnit);
          }
          gl.bindTexture(this.glTarget, this.handle);
          return _textureUnit;
        }
        _unbind(_textureUnit) {
          const { gl } = this;
          if (_textureUnit !== void 0) {
            this._textureUnit = _textureUnit;
            gl.activeTexture(33984 + _textureUnit);
          }
          gl.bindTexture(this.glTarget, null);
          return _textureUnit;
        }
      };
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/converters/webgl-shadertypes.js
  function convertDataTypeToGLDataType(normalizedType) {
    return NORMALIZED_SHADER_TYPE_TO_WEBGL[normalizedType];
  }
  function convertGLUniformTypeToShaderVariableType(glUniformType) {
    return WEBGL_SHADER_TYPES[glUniformType];
  }
  function isGLSamplerType(type) {
    return Boolean(WEBGL_SAMPLER_TO_TEXTURE_BINDINGS[type]);
  }
  function getTextureBindingFromGLSamplerType(glSamplerType) {
    return WEBGL_SAMPLER_TO_TEXTURE_BINDINGS[glSamplerType];
  }
  var WEBGL_SHADER_TYPES, WEBGL_SAMPLER_TO_TEXTURE_BINDINGS, NORMALIZED_SHADER_TYPE_TO_WEBGL;
  var init_webgl_shadertypes = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/converters/webgl-shadertypes.js"() {
      WEBGL_SHADER_TYPES = {
        [5126]: "f32",
        [35664]: "vec2<f32>",
        [35665]: "vec3<f32>",
        [35666]: "vec4<f32>",
        [5124]: "i32",
        [35667]: "vec2<i32>",
        [35668]: "vec3<i32>",
        [35669]: "vec4<i32>",
        [5125]: "u32",
        [36294]: "vec2<u32>",
        [36295]: "vec3<u32>",
        [36296]: "vec4<u32>",
        [35670]: "f32",
        [35671]: "vec2<f32>",
        [35672]: "vec3<f32>",
        [35673]: "vec4<f32>",
        // TODO - are sizes/components below correct?
        [35674]: "mat2x2<f32>",
        [35685]: "mat2x3<f32>",
        [35686]: "mat2x4<f32>",
        [35687]: "mat3x2<f32>",
        [35675]: "mat3x3<f32>",
        [35688]: "mat3x4<f32>",
        [35689]: "mat4x2<f32>",
        [35690]: "mat4x3<f32>",
        [35676]: "mat4x4<f32>"
      };
      WEBGL_SAMPLER_TO_TEXTURE_BINDINGS = {
        [35678]: { viewDimension: "2d", sampleType: "float" },
        [35680]: { viewDimension: "cube", sampleType: "float" },
        [35679]: { viewDimension: "3d", sampleType: "float" },
        [35682]: { viewDimension: "3d", sampleType: "depth" },
        [36289]: { viewDimension: "2d-array", sampleType: "float" },
        [36292]: { viewDimension: "2d-array", sampleType: "depth" },
        [36293]: { viewDimension: "cube", sampleType: "float" },
        [36298]: { viewDimension: "2d", sampleType: "sint" },
        [36299]: { viewDimension: "3d", sampleType: "sint" },
        [36300]: { viewDimension: "cube", sampleType: "sint" },
        [36303]: { viewDimension: "2d-array", sampleType: "uint" },
        [36306]: { viewDimension: "2d", sampleType: "uint" },
        [36307]: { viewDimension: "3d", sampleType: "uint" },
        [36308]: { viewDimension: "cube", sampleType: "uint" },
        [36311]: { viewDimension: "2d-array", sampleType: "uint" }
      };
      NORMALIZED_SHADER_TYPE_TO_WEBGL = {
        uint8: 5121,
        sint8: 5120,
        unorm8: 5121,
        snorm8: 5120,
        uint16: 5123,
        sint16: 5122,
        unorm16: 5123,
        snorm16: 5122,
        uint32: 5125,
        sint32: 5124,
        // WebGPU does not support normalized 32 bit integer attributes
        //  'unorm32': GL.UNSIGNED_INT,
        //  'snorm32': GL.INT,
        float16: 5131,
        float32: 5126
      };
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/helpers/get-shader-layout-from-glsl.js
  function getShaderLayoutFromGLSL(gl, program) {
    const shaderLayout = {
      attributes: [],
      bindings: []
    };
    shaderLayout.attributes = readAttributeDeclarations(gl, program);
    const uniformBlocks = readUniformBlocks(gl, program);
    for (const uniformBlock35 of uniformBlocks) {
      const uniforms2 = uniformBlock35.uniforms.map((uniform) => ({
        name: uniform.name,
        format: uniform.format,
        byteOffset: uniform.byteOffset,
        byteStride: uniform.byteStride,
        arrayLength: uniform.arrayLength
      }));
      shaderLayout.bindings.push({
        type: "uniform",
        name: uniformBlock35.name,
        group: 0,
        location: uniformBlock35.location,
        visibility: (uniformBlock35.vertex ? 1 : 0) & (uniformBlock35.fragment ? 2 : 0),
        minBindingSize: uniformBlock35.byteLength,
        uniforms: uniforms2
      });
    }
    const uniforms = readUniformBindings(gl, program);
    let textureUnit = 0;
    for (const uniform of uniforms) {
      if (isGLSamplerType(uniform.type)) {
        const { viewDimension, sampleType } = getTextureBindingFromGLSamplerType(uniform.type);
        shaderLayout.bindings.push({
          type: "texture",
          name: uniform.name,
          group: 0,
          location: textureUnit,
          viewDimension,
          sampleType
        });
        uniform.textureUnit = textureUnit;
        textureUnit += 1;
      }
    }
    if (uniforms.length) {
      shaderLayout.uniforms = uniforms;
    }
    const varyings = readVaryings(gl, program);
    if (varyings?.length) {
      shaderLayout.varyings = varyings;
    }
    return shaderLayout;
  }
  function readAttributeDeclarations(gl, program) {
    const attributes = [];
    const count3 = gl.getProgramParameter(program, 35721);
    for (let index = 0; index < count3; index++) {
      const activeInfo = gl.getActiveAttrib(program, index);
      if (!activeInfo) {
        throw new Error("activeInfo");
      }
      const {
        name: name13,
        type: compositeType
        /* , size*/
      } = activeInfo;
      const location = gl.getAttribLocation(program, name13);
      if (location >= 0) {
        const attributeType = convertGLUniformTypeToShaderVariableType(compositeType);
        const stepMode = /instance/i.test(name13) ? "instance" : "vertex";
        attributes.push({
          name: name13,
          location,
          stepMode,
          type: attributeType
          // size - for arrays, size is the number of elements in the array
        });
      }
    }
    attributes.sort((a6, b4) => a6.location - b4.location);
    return attributes;
  }
  function readVaryings(gl, program) {
    const varyings = [];
    const count3 = gl.getProgramParameter(program, 35971);
    for (let location = 0; location < count3; location++) {
      const activeInfo = gl.getTransformFeedbackVarying(program, location);
      if (!activeInfo) {
        throw new Error("activeInfo");
      }
      const { name: name13, type: glUniformType, size } = activeInfo;
      const uniformType = convertGLUniformTypeToShaderVariableType(glUniformType);
      const { type, components } = getVariableShaderTypeInfo(uniformType);
      varyings.push({ location, name: name13, type, size: size * components });
    }
    varyings.sort((a6, b4) => a6.location - b4.location);
    return varyings;
  }
  function readUniformBindings(gl, program) {
    const uniforms = [];
    const uniformCount = gl.getProgramParameter(program, 35718);
    for (let i7 = 0; i7 < uniformCount; i7++) {
      const activeInfo = gl.getActiveUniform(program, i7);
      if (!activeInfo) {
        throw new Error("activeInfo");
      }
      const { name: rawName, size, type } = activeInfo;
      const { name: name13, isArray: isArray11 } = parseUniformName(rawName);
      let webglLocation = gl.getUniformLocation(program, name13);
      const uniformInfo = {
        // WebGL locations are uniquely typed but just numbers
        location: webglLocation,
        name: name13,
        size,
        type,
        isArray: isArray11
      };
      uniforms.push(uniformInfo);
      if (uniformInfo.size > 1) {
        for (let j4 = 0; j4 < uniformInfo.size; j4++) {
          const elementName = `${name13}[${j4}]`;
          webglLocation = gl.getUniformLocation(program, elementName);
          const arrayElementUniformInfo = {
            ...uniformInfo,
            name: elementName,
            location: webglLocation
          };
          uniforms.push(arrayElementUniformInfo);
        }
      }
    }
    return uniforms;
  }
  function readUniformBlocks(gl, program) {
    const getBlockParameter = (blockIndex, pname) => gl.getActiveUniformBlockParameter(program, blockIndex, pname);
    const uniformBlocks = [];
    const blockCount = gl.getProgramParameter(program, 35382);
    for (let blockIndex = 0; blockIndex < blockCount; blockIndex++) {
      const blockInfo = {
        name: gl.getActiveUniformBlockName(program, blockIndex) || "",
        location: getBlockParameter(blockIndex, 35391),
        byteLength: getBlockParameter(blockIndex, 35392),
        vertex: getBlockParameter(blockIndex, 35396),
        fragment: getBlockParameter(blockIndex, 35398),
        uniformCount: getBlockParameter(blockIndex, 35394),
        uniforms: []
      };
      const uniformIndices = getBlockParameter(blockIndex, 35395) || [];
      const uniformType = gl.getActiveUniforms(program, uniformIndices, 35383);
      const uniformArrayLength = gl.getActiveUniforms(program, uniformIndices, 35384);
      const uniformOffset = gl.getActiveUniforms(program, uniformIndices, 35387);
      const uniformStride = gl.getActiveUniforms(program, uniformIndices, 35388);
      for (let i7 = 0; i7 < blockInfo.uniformCount; ++i7) {
        const activeInfo = gl.getActiveUniform(program, uniformIndices[i7]);
        if (!activeInfo) {
          throw new Error("activeInfo");
        }
        const format = convertGLUniformTypeToShaderVariableType(uniformType[i7]);
        blockInfo.uniforms.push({
          name: activeInfo.name,
          format,
          type: uniformType[i7],
          arrayLength: uniformArrayLength[i7],
          byteOffset: uniformOffset[i7],
          byteStride: uniformStride[i7]
          // matrixStride: uniformStride[i],
          // rowMajor: uniformRowMajor[i]
        });
      }
      uniformBlocks.push(blockInfo);
    }
    uniformBlocks.sort((a6, b4) => a6.location - b4.location);
    return uniformBlocks;
  }
  function parseUniformName(name13) {
    if (name13[name13.length - 1] !== "]") {
      return {
        name: name13,
        length: 1,
        isArray: false
      };
    }
    const UNIFORM_NAME_REGEXP = /([^[]*)(\[[0-9]+\])?/;
    const matches3 = UNIFORM_NAME_REGEXP.exec(name13);
    if (!matches3 || matches3.length < 2) {
      throw new Error(`Failed to parse GLSL uniform name ${name13}`);
    }
    return {
      name: matches3[1],
      length: matches3[2] ? 1 : 0,
      isArray: Boolean(matches3[2])
    };
  }
  var init_get_shader_layout_from_glsl = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/helpers/get-shader-layout-from-glsl.js"() {
      init_dist4();
      init_webgl_shadertypes();
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/helpers/set-uniform.js
  function setUniform(gl, location, type, value) {
    const gl2 = gl;
    let uniformValue = value;
    if (uniformValue === true) {
      uniformValue = 1;
    }
    if (uniformValue === false) {
      uniformValue = 0;
    }
    const arrayValue = typeof uniformValue === "number" ? [uniformValue] : uniformValue;
    switch (type) {
      case 35678:
      case 35680:
      case 35679:
      case 35682:
      case 36289:
      case 36292:
      case 36293:
      case 36298:
      case 36299:
      case 36300:
      case 36303:
      case 36306:
      case 36307:
      case 36308:
      case 36311:
        if (typeof value !== "number") {
          throw new Error("samplers must be set to integers");
        }
        return gl.uniform1i(location, value);
      case 5126:
        return gl.uniform1fv(location, arrayValue);
      case 35664:
        return gl.uniform2fv(location, arrayValue);
      case 35665:
        return gl.uniform3fv(location, arrayValue);
      case 35666:
        return gl.uniform4fv(location, arrayValue);
      case 5124:
        return gl.uniform1iv(location, arrayValue);
      case 35667:
        return gl.uniform2iv(location, arrayValue);
      case 35668:
        return gl.uniform3iv(location, arrayValue);
      case 35669:
        return gl.uniform4iv(location, arrayValue);
      case 35670:
        return gl.uniform1iv(location, arrayValue);
      case 35671:
        return gl.uniform2iv(location, arrayValue);
      case 35672:
        return gl.uniform3iv(location, arrayValue);
      case 35673:
        return gl.uniform4iv(location, arrayValue);
      case 5125:
        return gl2.uniform1uiv(location, arrayValue, 1);
      case 36294:
        return gl2.uniform2uiv(location, arrayValue, 2);
      case 36295:
        return gl2.uniform3uiv(location, arrayValue, 3);
      case 36296:
        return gl2.uniform4uiv(location, arrayValue, 4);
      case 35674:
        return gl.uniformMatrix2fv(location, false, arrayValue);
      case 35675:
        return gl.uniformMatrix3fv(location, false, arrayValue);
      case 35676:
        return gl.uniformMatrix4fv(location, false, arrayValue);
      case 35685:
        return gl2.uniformMatrix2x3fv(location, false, arrayValue);
      case 35686:
        return gl2.uniformMatrix2x4fv(location, false, arrayValue);
      case 35687:
        return gl2.uniformMatrix3x2fv(location, false, arrayValue);
      case 35688:
        return gl2.uniformMatrix3x4fv(location, false, arrayValue);
      case 35689:
        return gl2.uniformMatrix4x2fv(location, false, arrayValue);
      case 35690:
        return gl2.uniformMatrix4x3fv(location, false, arrayValue);
    }
    throw new Error("Illegal uniform");
  }
  var init_set_uniform = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/helpers/set-uniform.js"() {
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/helpers/webgl-topology-utils.js
  function getGLDrawMode(topology) {
    switch (topology) {
      case "point-list":
        return 0;
      case "line-list":
        return 1;
      case "line-strip":
        return 3;
      case "triangle-list":
        return 4;
      case "triangle-strip":
        return 5;
      default:
        throw new Error(topology);
    }
  }
  function getGLPrimitive(topology) {
    switch (topology) {
      case "point-list":
        return 0;
      case "line-list":
        return 1;
      case "line-strip":
        return 1;
      case "triangle-list":
        return 4;
      case "triangle-strip":
        return 4;
      default:
        throw new Error(topology);
    }
  }
  var init_webgl_topology_utils = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/helpers/webgl-topology-utils.js"() {
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-render-pipeline.js
  function mergeShaderLayout(baseLayout, overrideLayout) {
    const mergedLayout = {
      ...baseLayout,
      attributes: baseLayout.attributes.map((attribute) => ({ ...attribute }))
    };
    for (const attribute of overrideLayout?.attributes || []) {
      const baseAttribute = mergedLayout.attributes.find((attr) => attr.name === attribute.name);
      if (!baseAttribute) {
        log2.warn(`shader layout attribute ${attribute.name} not present in shader`);
      } else {
        baseAttribute.type = attribute.type || baseAttribute.type;
        baseAttribute.stepMode = attribute.stepMode || baseAttribute.stepMode;
      }
    }
    return mergedLayout;
  }
  var LOG_PROGRAM_PERF_PRIORITY, WEBGLRenderPipeline;
  var init_webgl_render_pipeline = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-render-pipeline.js"() {
      init_dist4();
      init_get_shader_layout_from_glsl();
      init_device_parameters();
      init_set_uniform();
      init_webgl_buffer();
      init_webgl_framebuffer();
      init_webgl_texture();
      init_webgl_texture_view();
      init_webgl_topology_utils();
      LOG_PROGRAM_PERF_PRIORITY = 4;
      WEBGLRenderPipeline = class extends RenderPipeline {
        /** The WebGL device that created this render pipeline */
        device;
        /** Handle to underlying WebGL program */
        handle;
        /** vertex shader */
        vs;
        /** fragment shader */
        fs;
        /** The layout extracted from shader by WebGL introspection APIs */
        introspectedLayout;
        /** Uniforms set on this model */
        uniforms = {};
        /** Bindings set on this model */
        bindings = {};
        /** WebGL varyings */
        varyings = null;
        _uniformCount = 0;
        _uniformSetters = {};
        // TODO are these used?
        get [Symbol.toStringTag]() {
          return "WEBGLRenderPipeline";
        }
        constructor(device, props) {
          super(device, props);
          this.device = device;
          this.handle = this.props.handle || this.device.gl.createProgram();
          this.device._setWebGLDebugMetadata(this.handle, this, { spector: { id: this.props.id } });
          this.vs = props.vs;
          this.fs = props.fs;
          const { varyings, bufferMode = 35981 } = props;
          if (varyings && varyings.length > 0) {
            this.varyings = varyings;
            this.device.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);
          }
          this._linkShaders();
          log2.time(3, `RenderPipeline ${this.id} - shaderLayout introspection`)();
          this.introspectedLayout = getShaderLayoutFromGLSL(this.device.gl, this.handle);
          log2.timeEnd(3, `RenderPipeline ${this.id} - shaderLayout introspection`)();
          this.shaderLayout = props.shaderLayout ? mergeShaderLayout(this.introspectedLayout, props.shaderLayout) : this.introspectedLayout;
        }
        destroy() {
          if (this.handle) {
            this.device.gl.useProgram(null);
            this.device.gl.deleteProgram(this.handle);
            this.destroyed = true;
            this.handle.destroyed = true;
            this.handle = null;
          }
        }
        /**
         * Bindings include: textures, samplers and uniform buffers
         * @todo needed for portable model
         */
        setBindings(bindings, options) {
          for (const [name13, value] of Object.entries(bindings)) {
            const binding = this.shaderLayout.bindings.find((binding_) => binding_.name === name13) || this.shaderLayout.bindings.find((binding_) => binding_.name === `${name13}Uniforms`);
            if (!binding) {
              const validBindings = this.shaderLayout.bindings.map((binding_) => `"${binding_.name}"`).join(", ");
              if (!options?.disableWarnings) {
                log2.warn(`No binding "${name13}" in render pipeline "${this.id}", expected one of ${validBindings}`, value)();
              }
              continue;
            }
            if (!value) {
              log2.warn(`Unsetting binding "${name13}" in render pipeline "${this.id}"`)();
            }
            switch (binding.type) {
              case "uniform":
                if (!(value instanceof WEBGLBuffer) && !(value.buffer instanceof WEBGLBuffer)) {
                  throw new Error("buffer value");
                }
                break;
              case "texture":
                if (!(value instanceof WEBGLTextureView || value instanceof WEBGLTexture || value instanceof WEBGLFramebuffer)) {
                  throw new Error(`${this} Bad texture binding for ${name13}`);
                }
                break;
              case "sampler":
                log2.warn(`Ignoring sampler ${name13}`)();
                break;
              default:
                throw new Error(binding.type);
            }
            this.bindings[name13] = value;
          }
        }
        /** @todo needed for portable model
         * @note The WebGL API is offers many ways to draw things
         * This function unifies those ways into a single call using common parameters with sane defaults
         */
        draw(options) {
          const {
            renderPass,
            parameters: parameters2 = this.props.parameters,
            topology = this.props.topology,
            vertexArray,
            vertexCount,
            // indexCount,
            instanceCount,
            isInstanced = false,
            firstVertex = 0,
            // firstIndex,
            // firstInstance,
            // baseVertex,
            transformFeedback
          } = options;
          const glDrawMode = getGLDrawMode(topology);
          const isIndexed = Boolean(vertexArray.indexBuffer);
          const glIndexType = vertexArray.indexBuffer?.glIndexType;
          if (this.linkStatus !== "success") {
            log2.info(2, `RenderPipeline:${this.id}.draw() aborted - waiting for shader linking`)();
            return false;
          }
          if (!this._areTexturesRenderable()) {
            log2.info(2, `RenderPipeline:${this.id}.draw() aborted - textures not yet loaded`)();
            return false;
          }
          this.device.gl.useProgram(this.handle);
          vertexArray.bindBeforeRender(renderPass);
          if (transformFeedback) {
            transformFeedback.begin(this.props.topology);
          }
          this._applyBindings();
          this._applyUniforms();
          const webglRenderPass = renderPass;
          withDeviceAndGLParameters(this.device, parameters2, webglRenderPass.glParameters, () => {
            if (isIndexed && isInstanced) {
              this.device.gl.drawElementsInstanced(
                glDrawMode,
                vertexCount || 0,
                // indexCount?
                glIndexType,
                firstVertex,
                instanceCount || 0
              );
            } else if (isIndexed) {
              this.device.gl.drawElements(glDrawMode, vertexCount || 0, glIndexType, firstVertex);
            } else if (isInstanced) {
              this.device.gl.drawArraysInstanced(glDrawMode, firstVertex, vertexCount || 0, instanceCount || 0);
            } else {
              this.device.gl.drawArrays(glDrawMode, firstVertex, vertexCount || 0);
            }
            if (transformFeedback) {
              transformFeedback.end();
            }
          });
          vertexArray.unbindAfterRender(renderPass);
          return true;
        }
        // PRIVATE METHODS
        // setAttributes(attributes: Record<string, Buffer>): void {}
        // setBindings(bindings: Record<string, Binding>): void {}
        async _linkShaders() {
          const { gl } = this.device;
          gl.attachShader(this.handle, this.vs.handle);
          gl.attachShader(this.handle, this.fs.handle);
          log2.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this.id}`)();
          gl.linkProgram(this.handle);
          log2.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this.id}`)();
          if (log2.level === 0) {
          }
          if (!this.device.features.has("compilation-status-async-webgl")) {
            const status2 = this._getLinkStatus();
            this._reportLinkStatus(status2);
            return;
          }
          log2.once(1, "RenderPipeline linking is asynchronous")();
          await this._waitForLinkComplete();
          log2.info(2, `RenderPipeline ${this.id} - async linking complete: ${this.linkStatus}`)();
          const status = this._getLinkStatus();
          this._reportLinkStatus(status);
        }
        /** Report link status. First, check for shader compilation failures if linking fails */
        async _reportLinkStatus(status) {
          switch (status) {
            case "success":
              return;
            default:
              const errorType = status === "link-error" ? "Link error" : "Validation error";
              switch (this.vs.compilationStatus) {
                case "error":
                  this.vs.debugShader();
                  throw new Error(`${this} ${errorType} during compilation of ${this.vs}`);
                case "pending":
                  await this.vs.asyncCompilationStatus;
                  this.vs.debugShader();
                  break;
                case "success":
                  break;
              }
              switch (this.fs?.compilationStatus) {
                case "error":
                  this.fs.debugShader();
                  throw new Error(`${this} ${errorType} during compilation of ${this.fs}`);
                case "pending":
                  await this.fs.asyncCompilationStatus;
                  this.fs.debugShader();
                  break;
                case "success":
                  break;
              }
              const linkErrorLog = this.device.gl.getProgramInfoLog(this.handle);
              this.device.reportError(new Error(`${errorType} during ${status}: ${linkErrorLog}`), this)();
              this.device.debug();
          }
        }
        /**
         * Get the shader compilation status
         * TODO - Load log even when no error reported, to catch warnings?
         * https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings
         */
        _getLinkStatus() {
          const { gl } = this.device;
          const linked = gl.getProgramParameter(this.handle, 35714);
          if (!linked) {
            this.linkStatus = "error";
            return "link-error";
          }
          gl.validateProgram(this.handle);
          const validated = gl.getProgramParameter(this.handle, 35715);
          if (!validated) {
            this.linkStatus = "error";
            return "validation-error";
          }
          this.linkStatus = "success";
          return "success";
        }
        /** Use KHR_parallel_shader_compile extension if available */
        async _waitForLinkComplete() {
          const waitMs = async (ms) => await new Promise((resolve2) => setTimeout(resolve2, ms));
          const DELAY_MS = 10;
          if (!this.device.features.has("compilation-status-async-webgl")) {
            await waitMs(DELAY_MS);
            return;
          }
          const { gl } = this.device;
          for (; ; ) {
            const complete = gl.getProgramParameter(this.handle, 37297);
            if (complete) {
              return;
            }
            await waitMs(DELAY_MS);
          }
        }
        /**
         * Checks if all texture-values uniforms are renderable (i.e. loaded)
         * Update a texture if needed (e.g. from video)
         * Note: This is currently done before every draw call
         */
        _areTexturesRenderable() {
          let texturesRenderable = true;
          for (const bindingInfo of this.shaderLayout.bindings) {
            if (!this.bindings[bindingInfo.name] && !this.bindings[bindingInfo.name.replace(/Uniforms$/, "")]) {
              log2.warn(`Binding ${bindingInfo.name} not found in ${this.id}`)();
              texturesRenderable = false;
            }
          }
          return texturesRenderable;
        }
        /** Apply any bindings (before each draw call) */
        _applyBindings() {
          if (this.linkStatus !== "success") {
            return;
          }
          const { gl } = this.device;
          gl.useProgram(this.handle);
          let textureUnit = 0;
          let uniformBufferIndex = 0;
          for (const binding of this.shaderLayout.bindings) {
            const value = this.bindings[binding.name] || this.bindings[binding.name.replace(/Uniforms$/, "")];
            if (!value) {
              throw new Error(`No value for binding ${binding.name} in ${this.id}`);
            }
            switch (binding.type) {
              case "uniform":
                const { name: name13 } = binding;
                const location = gl.getUniformBlockIndex(this.handle, name13);
                if (location === 4294967295) {
                  throw new Error(`Invalid uniform block name ${name13}`);
                }
                gl.uniformBlockBinding(this.handle, uniformBufferIndex, location);
                if (value instanceof WEBGLBuffer) {
                  gl.bindBufferBase(35345, uniformBufferIndex, value.handle);
                } else {
                  gl.bindBufferRange(
                    35345,
                    uniformBufferIndex,
                    // @ts-expect-error
                    value.buffer.handle,
                    // @ts-expect-error
                    value.offset || 0,
                    // @ts-expect-error
                    value.size || value.buffer.byteLength - value.offset
                  );
                }
                uniformBufferIndex += 1;
                break;
              case "texture":
                if (!(value instanceof WEBGLTextureView || value instanceof WEBGLTexture || value instanceof WEBGLFramebuffer)) {
                  throw new Error("texture");
                }
                let texture;
                if (value instanceof WEBGLTextureView) {
                  texture = value.texture;
                } else if (value instanceof WEBGLTexture) {
                  texture = value;
                } else if (value instanceof WEBGLFramebuffer && value.colorAttachments[0] instanceof WEBGLTextureView) {
                  log2.warn("Passing framebuffer in texture binding may be deprecated. Use fbo.colorAttachments[0] instead")();
                  texture = value.colorAttachments[0].texture;
                } else {
                  throw new Error("No texture");
                }
                gl.activeTexture(33984 + textureUnit);
                gl.bindTexture(texture.glTarget, texture.handle);
                textureUnit += 1;
                break;
              case "sampler":
                break;
              case "storage":
              case "read-only-storage":
                throw new Error(`binding type '${binding.type}' not supported in WebGL`);
            }
          }
        }
        /**
         * Due to program sharing, uniforms need to be reset before every draw call
         * (though caching will avoid redundant WebGL calls)
         */
        _applyUniforms() {
          for (const uniformLayout of this.shaderLayout.uniforms || []) {
            const { name: name13, location, type, textureUnit } = uniformLayout;
            const value = this.uniforms[name13] ?? textureUnit;
            if (value !== void 0) {
              setUniform(this.device.gl, location, type, value);
            }
          }
        }
      };
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-command-buffer.js
  function _copyBufferToBuffer(device, options) {
    const source4 = options.sourceBuffer;
    const destination = options.destinationBuffer;
    device.gl.bindBuffer(36662, source4.handle);
    device.gl.bindBuffer(36663, destination.handle);
    device.gl.copyBufferSubData(36662, 36663, options.sourceOffset ?? 0, options.destinationOffset ?? 0, options.size);
    device.gl.bindBuffer(36662, null);
    device.gl.bindBuffer(36663, null);
  }
  function _copyBufferToTexture(device, options) {
    throw new Error("Not implemented");
  }
  function _copyTextureToBuffer(device, options) {
    const {
      /** Texture to copy to/from. */
      sourceTexture,
      /**  Mip-map level of the texture to copy to/from. (Default 0) */
      mipLevel = 0,
      /** Defines which aspects of the texture to copy to/from. */
      aspect = "all",
      /** Width to copy */
      width = options.sourceTexture.width,
      /** Height to copy */
      height = options.sourceTexture.height,
      depthOrArrayLayers = 0,
      /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy to/from. */
      origin = [0, 0],
      /** Destination buffer */
      destinationBuffer,
      /** Offset, in bytes, from the beginning of the buffer to the start of the image data (default 0) */
      byteOffset = 0,
      /**
       * The stride, in bytes, between the beginning of each block row and the subsequent block row.
       * Required if there are multiple block rows (i.e. the copy height or depth is more than one block).
       */
      bytesPerRow,
      /**
       * Number of block rows per single image of the texture.
       * rowsPerImage &times; bytesPerRow is the stride, in bytes, between the beginning of each image of data and the subsequent image.
       * Required if there are multiple images (i.e. the copy depth is more than one).
       */
      rowsPerImage
    } = options;
    if (aspect !== "all") {
      throw new Error("aspect not supported in WebGL");
    }
    if (mipLevel !== 0 || depthOrArrayLayers !== 0 || bytesPerRow || rowsPerImage) {
      throw new Error("not implemented");
    }
    const { framebuffer, destroyFramebuffer } = getFramebuffer(sourceTexture);
    let prevHandle;
    try {
      const webglBuffer = destinationBuffer;
      const sourceWidth = width || framebuffer.width;
      const sourceHeight = height || framebuffer.height;
      const sourceParams = getTextureFormatWebGL(framebuffer.colorAttachments[0].texture.props.format);
      const sourceFormat = sourceParams.format;
      const sourceType = sourceParams.type;
      device.gl.bindBuffer(35051, webglBuffer.handle);
      prevHandle = device.gl.bindFramebuffer(36160, framebuffer.handle);
      device.gl.readPixels(origin[0], origin[1], sourceWidth, sourceHeight, sourceFormat, sourceType, byteOffset);
    } finally {
      device.gl.bindBuffer(35051, null);
      if (prevHandle !== void 0) {
        device.gl.bindFramebuffer(36160, prevHandle);
      }
      if (destroyFramebuffer) {
        framebuffer.destroy();
      }
    }
  }
  function _copyTextureToTexture(device, options) {
    const {
      /** Texture to copy to/from. */
      sourceTexture,
      /**  Mip-map level of the texture to copy to (Default 0) */
      destinationMipLevel = 0,
      /** Defines which aspects of the texture to copy to/from. */
      // aspect = 'all',
      /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy from. */
      origin = [0, 0],
      /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy to. */
      destinationOrigin = [0, 0],
      /** Texture to copy to/from. */
      destinationTexture
      /**  Mip-map level of the texture to copy to/from. (Default 0) */
      // destinationMipLevel = options.mipLevel,
      /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy to/from. */
      // destinationOrigin = [0, 0],
      /** Defines which aspects of the texture to copy to/from. */
      // destinationAspect = options.aspect,
    } = options;
    let {
      width = options.destinationTexture.width,
      height = options.destinationTexture.height
      // depthOrArrayLayers = 0
    } = options;
    const { framebuffer, destroyFramebuffer } = getFramebuffer(sourceTexture);
    const [sourceX, sourceY] = origin;
    const [destinationX, destinationY, destinationZ] = destinationOrigin;
    const prevHandle = device.gl.bindFramebuffer(36160, framebuffer.handle);
    let texture;
    let textureTarget;
    if (destinationTexture instanceof WEBGLTexture) {
      texture = destinationTexture;
      width = Number.isFinite(width) ? width : texture.width;
      height = Number.isFinite(height) ? height : texture.height;
      texture._bind(0);
      textureTarget = texture.glTarget;
    } else {
      throw new Error("invalid destination");
    }
    switch (textureTarget) {
      case 3553:
      case 34067:
        device.gl.copyTexSubImage2D(textureTarget, destinationMipLevel, destinationX, destinationY, sourceX, sourceY, width, height);
        break;
      case 35866:
      case 32879:
        device.gl.copyTexSubImage3D(textureTarget, destinationMipLevel, destinationX, destinationY, destinationZ, sourceX, sourceY, width, height);
        break;
      default:
    }
    if (texture) {
      texture._unbind();
    }
    device.gl.bindFramebuffer(36160, prevHandle);
    if (destroyFramebuffer) {
      framebuffer.destroy();
    }
  }
  function getFramebuffer(source4) {
    if (source4 instanceof Texture) {
      const { width, height, id } = source4;
      const framebuffer = source4.device.createFramebuffer({
        id: `framebuffer-for-${id}`,
        width,
        height,
        colorAttachments: [source4]
      });
      return { framebuffer, destroyFramebuffer: true };
    }
    return { framebuffer: source4, destroyFramebuffer: false };
  }
  var WEBGLCommandBuffer;
  var init_webgl_command_buffer = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-command-buffer.js"() {
      init_dist4();
      init_webgl_texture();
      init_webgl_texture_table();
      WEBGLCommandBuffer = class extends CommandBuffer {
        device;
        handle = null;
        commands = [];
        constructor(device) {
          super(device, {});
          this.device = device;
        }
        _executeCommands(commands = this.commands) {
          for (const command of commands) {
            switch (command.name) {
              case "copy-buffer-to-buffer":
                _copyBufferToBuffer(this.device, command.options);
                break;
              case "copy-buffer-to-texture":
                _copyBufferToTexture(this.device, command.options);
                break;
              case "copy-texture-to-buffer":
                _copyTextureToBuffer(this.device, command.options);
                break;
              case "copy-texture-to-texture":
                _copyTextureToTexture(this.device, command.options);
                break;
              default:
                throw new Error(command.name);
            }
          }
        }
      };
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-render-pass.js
  var COLOR_CHANNELS, WEBGLRenderPass;
  var init_webgl_render_pass = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-render-pass.js"() {
      init_dist4();
      init_with_parameters();
      init_unified_parameter_api();
      COLOR_CHANNELS = [1, 2, 4, 8];
      WEBGLRenderPass = class extends RenderPass {
        device;
        handle = null;
        /** Parameters that should be applied before each draw call */
        glParameters = {};
        constructor(device, props) {
          super(device, props);
          this.device = device;
          let viewport;
          if (!props?.parameters?.viewport) {
            if (props?.framebuffer) {
              const { width, height } = props.framebuffer;
              viewport = [0, 0, width, height];
            } else {
              const [width, height] = device.getDefaultCanvasContext().getDrawingBufferSize();
              viewport = [0, 0, width, height];
            }
          }
          this.device.pushState();
          this.setParameters({ viewport, ...this.props.parameters });
          const webglFramebuffer = this.props.framebuffer;
          if (this.props.framebuffer && webglFramebuffer?.handle) {
            const drawBuffers = this.props.framebuffer.colorAttachments.map((_3, i7) => 36064 + i7);
            this.device.gl.drawBuffers(drawBuffers);
          } else {
            this.device.gl.drawBuffers([1029]);
          }
          this.clear();
        }
        end() {
          this.device.popState();
        }
        pushDebugGroup(groupLabel) {
        }
        popDebugGroup() {
        }
        insertDebugMarker(markerLabel) {
        }
        // beginOcclusionQuery(queryIndex: number): void;
        // endOcclusionQuery(): void;
        // executeBundles(bundles: Iterable<GPURenderBundle>): void;
        /**
         * Maps RenderPass parameters to GL parameters
         */
        setParameters(parameters2 = {}) {
          const glParameters = { ...this.glParameters };
          glParameters.framebuffer = this.props.framebuffer || null;
          if (this.props.depthReadOnly) {
            glParameters.depthMask = !this.props.depthReadOnly;
          }
          glParameters.stencilMask = this.props.stencilReadOnly ? 0 : 1;
          glParameters[35977] = this.props.discard;
          if (parameters2.viewport) {
            if (parameters2.viewport.length >= 6) {
              glParameters.viewport = parameters2.viewport.slice(0, 4);
              glParameters.depthRange = [
                parameters2.viewport[4],
                parameters2.viewport[5]
              ];
            } else {
              glParameters.viewport = parameters2.viewport;
            }
          }
          if (parameters2.scissorRect) {
            glParameters.scissorTest = true;
            glParameters.scissor = parameters2.scissorRect;
          }
          if (parameters2.blendConstant) {
            glParameters.blendColor = parameters2.blendConstant;
          }
          if (parameters2.stencilReference) {
            console.warn("RenderPassParameters.stencilReference not yet implemented in WebGL");
            glParameters[2967] = parameters2.stencilReference;
          }
          if ("colorMask" in parameters2) {
            glParameters.colorMask = COLOR_CHANNELS.map((channel) => Boolean(channel & parameters2.colorMask));
          }
          this.glParameters = glParameters;
          setGLParameters(this.device.gl, glParameters);
        }
        beginOcclusionQuery(queryIndex) {
          const webglQuerySet = this.props.occlusionQuerySet;
          webglQuerySet?.beginOcclusionQuery();
        }
        endOcclusionQuery() {
          const webglQuerySet = this.props.occlusionQuerySet;
          webglQuerySet?.endOcclusionQuery();
        }
        // PRIVATE
        /**
         * Optionally clears depth, color and stencil buffers based on parameters
         */
        clear() {
          const glParameters = { ...this.glParameters };
          let clearMask = 0;
          if (this.props.clearColors) {
            this.props.clearColors.forEach((color, drawBufferIndex) => {
              if (color) {
                this.clearColorBuffer(drawBufferIndex, color);
              }
            });
          }
          if (this.props.clearColor !== false && this.props.clearColors === void 0) {
            clearMask |= 16384;
            glParameters.clearColor = this.props.clearColor;
          }
          if (this.props.clearDepth !== false) {
            clearMask |= 256;
            glParameters.clearDepth = this.props.clearDepth;
          }
          if (this.props.clearStencil !== false) {
            clearMask |= 1024;
            glParameters.clearStencil = this.props.clearStencil;
          }
          if (clearMask !== 0) {
            withGLParameters(this.device.gl, glParameters, () => {
              this.device.gl.clear(clearMask);
            });
          }
        }
        /**
         * WebGL2 - clear a specific color buffer
         */
        clearColorBuffer(drawBuffer = 0, value = [0, 0, 0, 0]) {
          withGLParameters(this.device.gl, { framebuffer: this.props.framebuffer }, () => {
            switch (value.constructor) {
              case Int8Array:
              case Int16Array:
              case Int32Array:
                this.device.gl.clearBufferiv(6144, drawBuffer, value);
                break;
              case Uint8Array:
              case Uint8ClampedArray:
              case Uint16Array:
              case Uint32Array:
                this.device.gl.clearBufferuiv(6144, drawBuffer, value);
                break;
              case Float32Array:
                this.device.gl.clearBufferfv(6144, drawBuffer, value);
                break;
              default:
                throw new Error("clearColorBuffer: color must be typed array");
            }
          });
        }
      };
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-command-encoder.js
  var WEBGLCommandEncoder;
  var init_webgl_command_encoder = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-command-encoder.js"() {
      init_dist4();
      init_webgl_command_buffer();
      init_webgl_render_pass();
      WEBGLCommandEncoder = class extends CommandEncoder {
        device;
        handle = null;
        commandBuffer;
        constructor(device, props) {
          super(device, props);
          this.device = device;
          this.commandBuffer = new WEBGLCommandBuffer(device);
        }
        destroy() {
        }
        finish() {
          return this.commandBuffer;
        }
        beginRenderPass(props) {
          return new WEBGLRenderPass(this.device, props);
        }
        beginComputePass(props) {
          throw new Error("ComputePass not supported in WebGL");
        }
        copyBufferToBuffer(options) {
          this.commandBuffer.commands.push({ name: "copy-buffer-to-buffer", options });
        }
        copyBufferToTexture(options) {
          this.commandBuffer.commands.push({ name: "copy-buffer-to-texture", options });
        }
        copyTextureToBuffer(options) {
          this.commandBuffer.commands.push({ name: "copy-texture-to-buffer", options });
        }
        copyTextureToTexture(options) {
          this.commandBuffer.commands.push({ name: "copy-texture-to-texture", options });
        }
        // clearTexture(options: ClearTextureOptions): void {
        //   this.commandBuffer.commands.push({name: 'copy-texture-to-texture', options});
        // }
        pushDebugGroup(groupLabel) {
        }
        popDebugGroup() {
        }
        insertDebugMarker(markerLabel) {
        }
        resolveQuerySet(querySet, destination, options) {
        }
      };
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/utils/fill-array.js
  function fillArray2(options) {
    const { target: target2, source: source4, start = 0, count: count3 = 1 } = options;
    const length17 = source4.length;
    const total = count3 * length17;
    let copied = 0;
    for (let i7 = start; copied < length17; copied++) {
      target2[i7++] = source4[copied];
    }
    while (copied < total) {
      if (copied < total - copied) {
        target2.copyWithin(start + copied, start, start + copied);
        copied *= 2;
      } else {
        target2.copyWithin(start + copied, start, start + total - copied);
        copied = total;
      }
    }
    return options.target;
  }
  var init_fill_array = __esm({
    "../../node_modules/@luma.gl/webgl/dist/utils/fill-array.js"() {
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-vertex-array.js
  function normalizeConstantArrayValue(arrayValue) {
    if (Array.isArray(arrayValue)) {
      return new Float32Array(arrayValue);
    }
    return arrayValue;
  }
  function compareConstantArrayValues(v1, v22) {
    if (!v1 || !v22 || v1.length !== v22.length || v1.constructor !== v22.constructor) {
      return false;
    }
    for (let i7 = 0; i7 < v1.length; ++i7) {
      if (v1[i7] !== v22[i7]) {
        return false;
      }
    }
    return true;
  }
  var WEBGLVertexArray;
  var init_webgl_vertex_array = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-vertex-array.js"() {
      init_dist4();
      init_dist();
      init_webgl_vertex_formats();
      init_fill_array();
      WEBGLVertexArray = class extends VertexArray {
        get [Symbol.toStringTag]() {
          return "VertexArray";
        }
        device;
        handle;
        /** Attribute 0 buffer constant */
        buffer = null;
        bufferValue = null;
        /** * Attribute 0 can not be disable on most desktop OpenGL based browsers */
        static isConstantAttributeZeroSupported(device) {
          return getBrowser() === "Chrome";
        }
        // Create a VertexArray
        constructor(device, props) {
          super(device, props);
          this.device = device;
          this.handle = this.device.gl.createVertexArray();
        }
        destroy() {
          super.destroy();
          if (this.buffer) {
            this.buffer?.destroy();
          }
          if (this.handle) {
            this.device.gl.deleteVertexArray(this.handle);
            this.handle = void 0;
          }
        }
        /**
        // Set (bind/unbind) an elements buffer, for indexed rendering.
        // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER or null. Constants not supported
         *
         * @param elementBuffer
         */
        setIndexBuffer(indexBuffer) {
          const buffer = indexBuffer;
          if (buffer && buffer.glTarget !== 34963) {
            throw new Error("Use .setBuffer()");
          }
          this.device.gl.bindVertexArray(this.handle);
          this.device.gl.bindBuffer(34963, buffer ? buffer.handle : null);
          this.indexBuffer = buffer;
          this.device.gl.bindVertexArray(null);
        }
        /** Set a location in vertex attributes array to a buffer, enables the location, sets divisor */
        setBuffer(location, attributeBuffer) {
          const buffer = attributeBuffer;
          if (buffer.glTarget === 34963) {
            throw new Error("Use .setIndexBuffer()");
          }
          const { size, type, stride, offset, normalized, integer, divisor } = this._getAccessor(location);
          this.device.gl.bindVertexArray(this.handle);
          this.device.gl.bindBuffer(34962, buffer.handle);
          if (integer) {
            this.device.gl.vertexAttribIPointer(location, size, type, stride, offset);
          } else {
            this.device.gl.vertexAttribPointer(location, size, type, normalized, stride, offset);
          }
          this.device.gl.bindBuffer(34962, null);
          this.device.gl.enableVertexAttribArray(location);
          this.device.gl.vertexAttribDivisor(location, divisor || 0);
          this.attributes[location] = buffer;
          this.device.gl.bindVertexArray(null);
        }
        /** Set a location in vertex attributes array to a constant value, disables the location */
        setConstantWebGL(location, value) {
          this._enable(location, false);
          this.attributes[location] = value;
        }
        bindBeforeRender() {
          this.device.gl.bindVertexArray(this.handle);
          this._applyConstantAttributes();
        }
        unbindAfterRender() {
          this.device.gl.bindVertexArray(null);
        }
        // Internal methods
        /**
         * Constant attributes need to be reset before every draw call
         * Any attribute that is disabled in the current vertex array object
         * is read from the context's global constant value for that attribute location.
         * @note Constant attributes are only supported in WebGL, not in WebGPU
         */
        _applyConstantAttributes() {
          for (let location = 0; location < this.maxVertexAttributes; ++location) {
            const constant = this.attributes[location];
            if (ArrayBuffer.isView(constant)) {
              this.device.setConstantAttributeWebGL(location, constant);
            }
          }
        }
        /**
         * Set a location in vertex attributes array to a buffer, enables the location, sets divisor
         * @note requires vertex array to be bound
         */
        // protected _setAttributeLayout(location: number): void {
        //   const {size, type, stride, offset, normalized, integer, divisor} = this._getAccessor(location);
        //   // WebGL2 supports *integer* data formats, i.e. GPU will see integer values
        //   if (integer) {
        //     this.device.gl.vertexAttribIPointer(location, size, type, stride, offset);
        //   } else {
        //     // Attaches ARRAY_BUFFER with specified buffer format to location
        //     this.device.gl.vertexAttribPointer(location, size, type, normalized, stride, offset);
        //   }
        //   this.device.gl.vertexAttribDivisor(location, divisor || 0);
        // }
        /** Get an accessor from the  */
        _getAccessor(location) {
          const attributeInfo = this.attributeInfos[location];
          if (!attributeInfo) {
            throw new Error(`Unknown attribute location ${location}`);
          }
          const glType = getGLFromVertexType(attributeInfo.bufferDataType);
          return {
            size: attributeInfo.bufferComponents,
            type: glType,
            stride: attributeInfo.byteStride,
            offset: attributeInfo.byteOffset,
            normalized: attributeInfo.normalized,
            // it is the shader attribute declaration, not the vertex memory format,
            // that determines if the data in the buffer will be treated as integers.
            //
            // Also note that WebGL supports assigning non-normalized integer data to floating point attributes,
            // but as far as we can tell, WebGPU does not.
            integer: attributeInfo.integer,
            divisor: attributeInfo.stepMode === "instance" ? 1 : 0
          };
        }
        /**
         * Enabling an attribute location makes it reference the currently bound buffer
         * Disabling an attribute location makes it reference the global constant value
         * TODO - handle single values for size 1 attributes?
         * TODO - convert classic arrays based on known type?
         */
        _enable(location, enable2 = true) {
          const canDisableAttributeZero = WEBGLVertexArray.isConstantAttributeZeroSupported(this.device);
          const canDisableAttribute = canDisableAttributeZero || location !== 0;
          if (enable2 || canDisableAttribute) {
            location = Number(location);
            this.device.gl.bindVertexArray(this.handle);
            if (enable2) {
              this.device.gl.enableVertexAttribArray(location);
            } else {
              this.device.gl.disableVertexAttribArray(location);
            }
            this.device.gl.bindVertexArray(null);
          }
        }
        /**
         * Provide a means to create a buffer that is equivalent to a constant.
         * NOTE: Desktop OpenGL cannot disable attribute 0.
         * https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-
         * this-has-significant-performance-penalty
         */
        getConstantBuffer(elementCount, value) {
          const constantValue = normalizeConstantArrayValue(value);
          const byteLength = constantValue.byteLength * elementCount;
          const length17 = constantValue.length * elementCount;
          if (this.buffer && byteLength !== this.buffer.byteLength) {
            throw new Error(`Buffer size is immutable, byte length ${byteLength} !== ${this.buffer.byteLength}.`);
          }
          let updateNeeded = !this.buffer;
          this.buffer = this.buffer || this.device.createBuffer({ byteLength });
          updateNeeded ||= !compareConstantArrayValues(constantValue, this.bufferValue);
          if (updateNeeded) {
            const typedArray = getScratchArray(value.constructor, length17);
            fillArray2({ target: typedArray, source: constantValue, start: 0, count: length17 });
            this.buffer.write(typedArray);
            this.bufferValue = value;
          }
          return this.buffer;
        }
      };
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-transform-feedback.js
  function isIndex(value) {
    if (typeof value === "number") {
      return Number.isInteger(value);
    }
    return /^\d+$/.test(value);
  }
  var WEBGLTransformFeedback;
  var init_webgl_transform_feedback = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-transform-feedback.js"() {
      init_dist4();
      init_dist6();
      init_webgl_topology_utils();
      WEBGLTransformFeedback = class extends TransformFeedback {
        device;
        gl;
        handle;
        /**
         * NOTE: The Model already has this information while drawing, but
         * TransformFeedback currently needs it internally, to look up
         * varying information outside of a draw() call.
         */
        layout;
        buffers = {};
        unusedBuffers = {};
        /**
         * Allows us to avoid a Chrome bug where a buffer that is already bound to a
         * different target cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.
         * This a major workaround, see: https://github.com/KhronosGroup/WebGL/issues/2346
         */
        bindOnUse = true;
        _bound = false;
        constructor(device, props) {
          super(device, props);
          this.device = device;
          this.gl = device.gl;
          this.handle = this.props.handle || this.gl.createTransformFeedback();
          this.layout = this.props.layout;
          if (props.buffers) {
            this.setBuffers(props.buffers);
          }
          Object.seal(this);
        }
        destroy() {
          this.gl.deleteTransformFeedback(this.handle);
          super.destroy();
        }
        begin(topology = "point-list") {
          this.gl.bindTransformFeedback(36386, this.handle);
          if (this.bindOnUse) {
            this._bindBuffers();
          }
          this.gl.beginTransformFeedback(getGLPrimitive(topology));
        }
        end() {
          this.gl.endTransformFeedback();
          if (this.bindOnUse) {
            this._unbindBuffers();
          }
          this.gl.bindTransformFeedback(36386, null);
        }
        // SUBCLASS
        setBuffers(buffers) {
          this.buffers = {};
          this.unusedBuffers = {};
          this.bind(() => {
            for (const bufferName in buffers) {
              this.setBuffer(bufferName, buffers[bufferName]);
            }
          });
        }
        setBuffer(locationOrName, bufferOrRange) {
          const location = this._getVaryingIndex(locationOrName);
          const { buffer, byteLength, byteOffset } = this._getBufferRange(bufferOrRange);
          if (location < 0) {
            this.unusedBuffers[locationOrName] = buffer;
            log2.warn(`${this.id} unusedBuffers varying buffer ${locationOrName}`)();
            return;
          }
          this.buffers[location] = { buffer, byteLength, byteOffset };
          if (!this.bindOnUse) {
            this._bindBuffer(location, buffer, byteOffset, byteLength);
          }
        }
        getBuffer(locationOrName) {
          if (isIndex(locationOrName)) {
            return this.buffers[locationOrName] || null;
          }
          const location = this._getVaryingIndex(locationOrName);
          return location >= 0 ? this.buffers[location] : null;
        }
        bind(funcOrHandle = this.handle) {
          if (typeof funcOrHandle !== "function") {
            this.gl.bindTransformFeedback(36386, funcOrHandle);
            return this;
          }
          let value;
          if (!this._bound) {
            this.gl.bindTransformFeedback(36386, this.handle);
            this._bound = true;
            value = funcOrHandle();
            this._bound = false;
            this.gl.bindTransformFeedback(36386, null);
          } else {
            value = funcOrHandle();
          }
          return value;
        }
        unbind() {
          this.bind(null);
        }
        // PRIVATE METHODS
        /** Extract offsets for bindBufferRange */
        _getBufferRange(bufferOrRange) {
          if (bufferOrRange instanceof WEBGLBuffer) {
            return { buffer: bufferOrRange, byteOffset: 0, byteLength: bufferOrRange.byteLength };
          }
          const { buffer, byteOffset = 0, byteLength = bufferOrRange.buffer.byteLength } = bufferOrRange;
          return { buffer, byteOffset, byteLength };
        }
        _getVaryingIndex(locationOrName) {
          if (isIndex(locationOrName)) {
            return Number(locationOrName);
          }
          for (const varying of this.layout.varyings || []) {
            if (locationOrName === varying.name) {
              return varying.location;
            }
          }
          return -1;
        }
        /**
         * Need to avoid chrome bug where buffer that is already bound to a different target
         * cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.
         */
        _bindBuffers() {
          for (const bufferIndex in this.buffers) {
            const { buffer, byteLength, byteOffset } = this._getBufferRange(this.buffers[bufferIndex]);
            this._bindBuffer(Number(bufferIndex), buffer, byteOffset, byteLength);
          }
        }
        _unbindBuffers() {
          for (const bufferIndex in this.buffers) {
            this.gl.bindBufferBase(35982, Number(bufferIndex), null);
          }
        }
        _bindBuffer(index, buffer, byteOffset = 0, byteLength) {
          const handle = buffer && buffer.handle;
          if (!handle || byteLength === void 0) {
            this.gl.bindBufferBase(35982, index, handle);
          } else {
            this.gl.bindBufferRange(35982, index, handle, byteOffset, byteLength);
          }
        }
      };
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-query-set.js
  var WEBGLQuerySet;
  var init_webgl_query_set = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-query-set.js"() {
      init_dist4();
      WEBGLQuerySet = class extends QuerySet {
        device;
        handle;
        target = null;
        _queryPending = false;
        _pollingPromise = null;
        get [Symbol.toStringTag]() {
          return "Query";
        }
        // Create a query class
        constructor(device, props) {
          super(device, props);
          this.device = device;
          if (props.count > 1) {
            throw new Error("WebGL QuerySet can only have one value");
          }
          const handle = this.device.gl.createQuery();
          if (!handle) {
            throw new Error("WebGL query not supported");
          }
          this.handle = handle;
          Object.seal(this);
        }
        destroy() {
          this.device.gl.deleteQuery(this.handle);
        }
        // FOR RENDER PASS AND COMMAND ENCODER
        /**
         * Shortcut for timer query (dependent on extension in both WebGL1 and 2)
         * Measures GPU time delta between this call and a matching `end` call in the
         * GPU instruction stream.
         */
        beginTimestampQuery() {
          return this._begin(35007);
        }
        endTimestampQuery() {
          this._end();
        }
        // Shortcut for occlusion queries
        beginOcclusionQuery(options) {
          return this._begin(options?.conservative ? 36202 : 35887);
        }
        endOcclusionQuery() {
          this._end();
        }
        // Shortcut for transformFeedbackQuery
        beginTransformFeedbackQuery() {
          return this._begin(35976);
        }
        endTransformFeedbackQuery() {
          this._end();
        }
        async resolveQuery() {
          const value = await this.pollQuery();
          return [value];
        }
        // PRIVATE METHODS
        /**
         * Due to OpenGL API limitations, after calling `begin()` on one Query
         * instance, `end()` must be called on that same instance before
         * calling `begin()` on another query. While there can be multiple
         * outstanding queries representing disjoint `begin()`/`end()` intervals.
         * It is not possible to interleave or overlap `begin` and `end` calls.
         */
        _begin(target2) {
          if (this._queryPending) {
            return;
          }
          this.target = target2;
          this.device.gl.beginQuery(this.target, this.handle);
          return;
        }
        // ends the current query
        _end() {
          if (this._queryPending) {
            return;
          }
          if (this.target) {
            this.device.gl.endQuery(this.target);
            this.target = null;
            this._queryPending = true;
          }
          return;
        }
        // Returns true if the query result is available
        isResultAvailable() {
          if (!this._queryPending) {
            return false;
          }
          const resultAvailable = this.device.gl.getQueryParameter(this.handle, 34919);
          if (resultAvailable) {
            this._queryPending = false;
          }
          return resultAvailable;
        }
        // Timing query is disjoint, i.e. results are invalid
        isTimerDisjoint() {
          return this.device.gl.getParameter(36795);
        }
        // Returns query result.
        getResult() {
          return this.device.gl.getQueryParameter(this.handle, 34918);
        }
        // Returns the query result, converted to milliseconds to match JavaScript conventions.
        getTimerMilliseconds() {
          return this.getResult() / 1e6;
        }
        // Polls the query
        pollQuery(limit = Number.POSITIVE_INFINITY) {
          if (this._pollingPromise) {
            return this._pollingPromise;
          }
          let counter2 = 0;
          this._pollingPromise = new Promise((resolve2, reject) => {
            const poll = () => {
              if (this.isResultAvailable()) {
                resolve2(this.getResult());
                this._pollingPromise = null;
              } else if (counter2++ > limit) {
                reject("Timed out");
                this._pollingPromise = null;
              } else {
                requestAnimationFrame(poll);
              }
            };
            requestAnimationFrame(poll);
          });
          return this._pollingPromise;
        }
      };
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/helpers/format-utils.js
  function glFormatToComponents(format) {
    switch (format) {
      case 6406:
      case 33326:
      case 6403:
      case 36244:
        return 1;
      case 33339:
      case 33340:
      case 33328:
      case 33320:
      case 33319:
        return 2;
      case 6407:
      case 36248:
      case 34837:
        return 3;
      case 6408:
      case 36249:
      case 34836:
        return 4;
      default:
        return 0;
    }
  }
  function glTypeToBytes(type) {
    switch (type) {
      case 5121:
        return 1;
      case 33635:
      case 32819:
      case 32820:
        return 2;
      case 5126:
        return 4;
      default:
        return 0;
    }
  }
  var init_format_utils = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/helpers/format-utils.js"() {
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/converters/shader-formats.js
  function convertGLDataTypeToDataType(type) {
    return GL_DATA_TYPE_MAP[type];
  }
  var GL_DATA_TYPE_MAP;
  var init_shader_formats = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/converters/shader-formats.js"() {
      GL_DATA_TYPE_MAP = {
        [5124]: "sint32",
        [5125]: "uint32",
        [5122]: "sint16",
        [5123]: "uint16",
        [5120]: "sint8",
        [5121]: "uint8",
        [5126]: "float32",
        [5131]: "float16",
        [33635]: "uint16",
        [32819]: "uint16",
        [32820]: "uint16",
        [33640]: "uint32",
        [35899]: "uint32",
        [35902]: "uint32",
        [34042]: "uint32",
        [36269]: "uint32"
      };
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/helpers/webgl-texture-utils.js
  function readPixelsToArray(source4, options) {
    const {
      sourceX = 0,
      sourceY = 0,
      sourceAttachment = 0
      // TODO - support gl.readBuffer
    } = options || {};
    let {
      target: target2 = null,
      // following parameters are auto deduced if not provided
      sourceWidth,
      sourceHeight,
      sourceDepth,
      sourceFormat,
      sourceType
    } = options || {};
    const { framebuffer, deleteFramebuffer } = getFramebuffer2(source4);
    const { gl, handle } = framebuffer;
    sourceWidth ||= framebuffer.width;
    sourceHeight ||= framebuffer.height;
    const texture = framebuffer.colorAttachments[sourceAttachment]?.texture;
    if (!texture) {
      throw new Error(`Invalid framebuffer attachment ${sourceAttachment}`);
    }
    sourceDepth = texture?.depth || 1;
    sourceFormat ||= texture?.glFormat || 6408;
    sourceType ||= texture?.glType || 5121;
    target2 = getPixelArray(target2, sourceType, sourceFormat, sourceWidth, sourceHeight, sourceDepth);
    const signedType = getDataType(target2);
    sourceType = sourceType || convertDataTypeToGLDataType(signedType);
    const prevHandle = gl.bindFramebuffer(36160, handle);
    gl.readBuffer(36064 + sourceAttachment);
    gl.readPixels(sourceX, sourceY, sourceWidth, sourceHeight, sourceFormat, sourceType, target2);
    gl.readBuffer(36064);
    gl.bindFramebuffer(36160, prevHandle || null);
    if (deleteFramebuffer) {
      framebuffer.destroy();
    }
    return target2;
  }
  function readPixelsToBuffer(source4, options) {
    const { target: target2, sourceX = 0, sourceY = 0, sourceFormat = 6408, targetByteOffset = 0 } = options || {};
    let { sourceWidth, sourceHeight, sourceType } = options || {};
    const { framebuffer, deleteFramebuffer } = getFramebuffer2(source4);
    sourceWidth = sourceWidth || framebuffer.width;
    sourceHeight = sourceHeight || framebuffer.height;
    const webglFramebuffer = framebuffer;
    sourceType = sourceType || 5121;
    let webglBufferTarget = target2;
    if (!webglBufferTarget) {
      const components = glFormatToComponents(sourceFormat);
      const byteCount = glTypeToBytes(sourceType);
      const byteLength = targetByteOffset + sourceWidth * sourceHeight * components * byteCount;
      webglBufferTarget = webglFramebuffer.device.createBuffer({ byteLength });
    }
    const commandEncoder = source4.device.createCommandEncoder();
    commandEncoder.copyTextureToBuffer({
      sourceTexture: source4,
      width: sourceWidth,
      height: sourceHeight,
      origin: [sourceX, sourceY],
      destinationBuffer: webglBufferTarget,
      byteOffset: targetByteOffset
    });
    commandEncoder.destroy();
    if (deleteFramebuffer) {
      framebuffer.destroy();
    }
    return webglBufferTarget;
  }
  function getFramebuffer2(source4) {
    if (!(source4 instanceof Framebuffer)) {
      return { framebuffer: toFramebuffer(source4), deleteFramebuffer: true };
    }
    return { framebuffer: source4, deleteFramebuffer: false };
  }
  function toFramebuffer(texture, props) {
    const { device, width, height, id } = texture;
    const framebuffer = device.createFramebuffer({
      ...props,
      id: `framebuffer-for-${id}`,
      width,
      height,
      colorAttachments: [texture]
    });
    return framebuffer;
  }
  function getPixelArray(pixelArray, glType, glFormat, width, height, depth) {
    if (pixelArray) {
      return pixelArray;
    }
    glType ||= 5121;
    const shaderType = convertGLDataTypeToDataType(glType);
    const ArrayType = getTypedArrayConstructor(shaderType);
    const components = glFormatToComponents(glFormat);
    return new ArrayType(width * height * components);
  }
  var init_webgl_texture_utils = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/helpers/webgl-texture-utils.js"() {
      init_dist4();
      init_webgl_shadertypes();
      init_format_utils();
      init_shader_formats();
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/webgl-device.js
  var webgl_device_exports = {};
  __export(webgl_device_exports, {
    WebGLDevice: () => WebGLDevice
  });
  function setConstantFloatArray(device, location, array) {
    switch (array.length) {
      case 1:
        device.gl.vertexAttrib1fv(location, array);
        break;
      case 2:
        device.gl.vertexAttrib2fv(location, array);
        break;
      case 3:
        device.gl.vertexAttrib3fv(location, array);
        break;
      case 4:
        device.gl.vertexAttrib4fv(location, array);
        break;
      default:
    }
  }
  function setConstantIntArray(device, location, array) {
    device.gl.vertexAttribI4iv(location, array);
  }
  function setConstantUintArray(device, location, array) {
    device.gl.vertexAttribI4uiv(location, array);
  }
  function compareConstantArrayValues2(v1, v22) {
    if (!v1 || !v22 || v1.length !== v22.length || v1.constructor !== v22.constructor) {
      return false;
    }
    for (let i7 = 0; i7 < v1.length; ++i7) {
      if (v1[i7] !== v22[i7]) {
        return false;
      }
    }
    return true;
  }
  var WebGLDevice;
  var init_webgl_device = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/webgl-device.js"() {
      init_dist4();
      init_webgl_state_tracker();
      init_create_browser_context();
      init_webgl_device_info();
      init_webgl_device_features();
      init_webgl_device_limits();
      init_webgl_canvas_context();
      init_spector();
      init_webgl_developer_tools();
      init_webgl_texture_table();
      init_uid2();
      init_webgl_buffer();
      init_webgl_shader();
      init_webgl_sampler();
      init_webgl_texture();
      init_webgl_framebuffer();
      init_webgl_render_pipeline();
      init_webgl_command_encoder();
      init_webgl_vertex_array();
      init_webgl_transform_feedback();
      init_webgl_query_set();
      init_webgl_texture_utils();
      init_unified_parameter_api();
      init_with_parameters();
      init_webgl_extensions();
      WebGLDevice = class extends Device {
        // Public `Device` API
        /** type of this device */
        type = "webgl";
        // Use the ! assertion to handle the case where _reuseDevices causes the constructor to return early
        /** The underlying WebGL context */
        handle;
        features;
        limits;
        info;
        canvasContext;
        preferredColorFormat = "rgba8unorm";
        preferredDepthFormat = "depth24plus";
        commandEncoder;
        lost;
        _resolveContextLost;
        /** WebGL2 context. */
        gl;
        /** Store constants */
        // @ts-ignore TODO fix
        _constants;
        /** State used by luma.gl classes - TODO - not used? */
        _extensions = {};
        _polyfilled = false;
        /** Instance of Spector.js (if initialized) */
        spectorJS;
        //
        // Public API
        //
        get [Symbol.toStringTag]() {
          return "WebGLDevice";
        }
        toString() {
          return `${this[Symbol.toStringTag]}(${this.id})`;
        }
        isVertexFormatSupported(format) {
          switch (format) {
            case "unorm8x4-bgra":
              return false;
            default:
              return true;
          }
        }
        constructor(props) {
          super({ ...props, id: props.id || uid3("webgl-device") });
          const canvasContextProps = Device._getCanvasContextProps(props);
          if (!canvasContextProps) {
            throw new Error("WebGLDevice requires props.createCanvasContext to be set");
          }
          let device = canvasContextProps.canvas?.gl?.device;
          if (device) {
            throw new Error(`WebGL context already attached to device ${device.id}`);
          }
          this.canvasContext = new WebGLCanvasContext(this, canvasContextProps);
          this.lost = new Promise((resolve2) => {
            this._resolveContextLost = resolve2;
          });
          const webglContextAttributes = { ...props.webgl };
          if (canvasContextProps.alphaMode === "premultiplied") {
            webglContextAttributes.premultipliedAlpha = true;
          }
          if (props.powerPreference !== void 0) {
            webglContextAttributes.powerPreference = props.powerPreference;
          }
          const externalGLContext = this.props._handle;
          const gl = externalGLContext || createBrowserContext(this.canvasContext.canvas, {
            onContextLost: (event) => this._resolveContextLost?.({
              reason: "destroyed",
              message: "Entered sleep mode, or too many apps or browser tabs are using the GPU."
            }),
            // eslint-disable-next-line no-console
            onContextRestored: (event) => console.log("WebGL context restored")
          }, webglContextAttributes);
          if (!gl) {
            throw new Error("WebGL context creation failed");
          }
          device = gl.device;
          if (device) {
            if (props._reuseDevices) {
              log2.log(1, `Not creating a new Device, instead returning a reference to Device ${device.id} already attached to WebGL context`, device)();
              device._reused = true;
              return device;
            }
            throw new Error(`WebGL context already attached to device ${device.id}`);
          }
          this.handle = gl;
          this.gl = gl;
          this.spectorJS = initializeSpectorJS({ ...this.props, gl: this.handle });
          this.gl.device = this;
          this.gl._version = 2;
          this.info = getDeviceInfo(this.gl, this._extensions);
          this.limits = new WebGLDeviceLimits(this.gl);
          this.features = new WebGLDeviceFeatures(this.gl, this._extensions, this.props._disabledFeatures);
          if (this.props._initializeFeatures) {
            this.features.initializeFeatures();
          }
          const glState = new WebGLStateTracker(this.gl, {
            log: (...args) => log2.log(1, ...args)()
          });
          glState.trackState(this.gl, { copyState: false });
          const debugWebGL = props.debugWebGL || props.debug;
          const traceWebGL = props.debugWebGL;
          if (debugWebGL) {
            this.gl = makeDebugContext(this.gl, { debugWebGL, traceWebGL });
            log2.warn("WebGL debug mode activated. Performance reduced.")();
            if (props.debugWebGL) {
              log2.level = Math.max(log2.level, 1);
            }
          }
          this.commandEncoder = new WEBGLCommandEncoder(this, { id: `${this}-command-encoder` });
        }
        /**
         * Destroys the device
         *
         * @note "Detaches" from the WebGL context unless _reuseDevices is true.
         *
         * @note The underlying WebGL context is not immediately destroyed,
         * but may be destroyed later through normal JavaScript garbage collection.
         * This is a fundamental limitation since WebGL does not offer any
         * browser API for destroying WebGL contexts.
         */
        destroy() {
          if (!this.props._reuseDevices && !this._reused) {
            delete this.gl.device;
          }
        }
        get isLost() {
          return this.gl.isContextLost();
        }
        // IMPLEMENTATION OF ABSTRACT DEVICE
        getTextureByteAlignment() {
          return 4;
        }
        createCanvasContext(props) {
          throw new Error("WebGL only supports a single canvas");
        }
        createBuffer(props) {
          const newProps = this._normalizeBufferProps(props);
          return new WEBGLBuffer(this, newProps);
        }
        createTexture(props) {
          return new WEBGLTexture(this, props);
        }
        createExternalTexture(props) {
          throw new Error("createExternalTexture() not implemented");
        }
        createSampler(props) {
          return new WEBGLSampler(this, props);
        }
        createShader(props) {
          return new WEBGLShader(this, props);
        }
        createFramebuffer(props) {
          return new WEBGLFramebuffer(this, props);
        }
        createVertexArray(props) {
          return new WEBGLVertexArray(this, props);
        }
        createTransformFeedback(props) {
          return new WEBGLTransformFeedback(this, props);
        }
        createQuerySet(props) {
          return new WEBGLQuerySet(this, props);
        }
        createRenderPipeline(props) {
          return new WEBGLRenderPipeline(this, props);
        }
        createComputePipeline(props) {
          throw new Error("ComputePipeline not supported in WebGL");
        }
        createCommandEncoder(props = {}) {
          return new WEBGLCommandEncoder(this, props);
        }
        /**
         * Offscreen Canvas Support: Commit the frame
         * https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/commit
         * Chrome's offscreen canvas does not require gl.commit
         */
        submit(commandBuffer) {
          if (!commandBuffer) {
            commandBuffer = this.commandEncoder.finish();
            this.commandEncoder.destroy();
            this.commandEncoder = this.createCommandEncoder({ id: `${this.id}-default-encoder` });
          }
          commandBuffer._executeCommands();
        }
        //
        // TEMPORARY HACKS - will be removed in v9.1
        //
        /** @deprecated - should use command encoder */
        readPixelsToArrayWebGL(source4, options) {
          return readPixelsToArray(source4, options);
        }
        /** @deprecated - should use command encoder */
        readPixelsToBufferWebGL(source4, options) {
          return readPixelsToBuffer(source4, options);
        }
        setParametersWebGL(parameters2) {
          setGLParameters(this.gl, parameters2);
        }
        getParametersWebGL(parameters2) {
          return getGLParameters(this.gl, parameters2);
        }
        withParametersWebGL(parameters2, func) {
          return withGLParameters(this.gl, parameters2, func);
        }
        resetWebGL() {
          log2.warn("WebGLDevice.resetWebGL is deprecated, use only for debugging")();
          resetGLParameters(this.gl);
        }
        _getDeviceSpecificTextureFormatCapabilities(capabilities) {
          return getTextureFormatCapabilitiesWebGL(this.gl, capabilities, this._extensions);
        }
        //
        // WebGL-only API (not part of `Device` API)
        //
        /**
         * Triggers device (or WebGL context) loss.
         * @note primarily intended for testing how application reacts to device loss
         */
        loseDevice() {
          let deviceLossTriggered = false;
          const extensions = this.getExtension("WEBGL_lose_context");
          const ext = extensions.WEBGL_lose_context;
          if (ext) {
            deviceLossTriggered = true;
            ext.loseContext();
          }
          this._resolveContextLost?.({
            reason: "destroyed",
            message: "Application triggered context loss"
          });
          return deviceLossTriggered;
        }
        /** Save current WebGL context state onto an internal stack */
        pushState() {
          const webglState = WebGLStateTracker.get(this.gl);
          webglState.push();
        }
        /** Restores previously saved context state */
        popState() {
          const webglState = WebGLStateTracker.get(this.gl);
          webglState.pop();
        }
        /**
         * Returns the GL.<KEY> constant that corresponds to a numeric value of a GL constant
         * Be aware that there are some duplicates especially for constants that are 0,
         * so this isn't guaranteed to return the right key in all cases.
         */
        getGLKey(value, options) {
          const number = Number(value);
          for (const key in this.gl) {
            if (this.gl[key] === number) {
              return `GL.${key}`;
            }
          }
          return options?.emptyIfUnknown ? "" : String(value);
        }
        /**
         * Returns a map with any GL.<KEY> constants mapped to strings, both for keys and values
         */
        getGLKeys(glParameters) {
          const opts = { emptyIfUnknown: true };
          return Object.entries(glParameters).reduce((keys, [key, value]) => {
            keys[`${key}:${this.getGLKey(key, opts)}`] = `${value}:${this.getGLKey(value, opts)}`;
            return keys;
          }, {});
        }
        /**
         * Set a constant value for a location. Disabled attributes at that location will read from this value
         * @note WebGL constants are stored globally on the WebGL context, not the VertexArray
         * so they need to be updated before every render
         * @todo - remember/cache values to avoid setting them unnecessarily?
         */
        setConstantAttributeWebGL(location, constant) {
          const maxVertexAttributes = this.limits.maxVertexAttributes;
          this._constants = this._constants || new Array(maxVertexAttributes).fill(null);
          const currentConstant = this._constants[location];
          if (currentConstant && compareConstantArrayValues2(currentConstant, constant)) {
            log2.info(1, `setConstantAttributeWebGL(${location}) could have been skipped, value unchanged`)();
          }
          this._constants[location] = constant;
          switch (constant.constructor) {
            case Float32Array:
              setConstantFloatArray(this, location, constant);
              break;
            case Int32Array:
              setConstantIntArray(this, location, constant);
              break;
            case Uint32Array:
              setConstantUintArray(this, location, constant);
              break;
            default:
              throw new Error("constant");
          }
        }
        /** Ensure extensions are only requested once */
        getExtension(name13) {
          getWebGLExtension(this.gl, name13, this._extensions);
          return this._extensions;
        }
        // INTERNAL SUPPORT METHODS FOR WEBGL RESOURCES
        /**
         * Storing data on a special field on WebGLObjects makes that data visible in SPECTOR chrome debug extension
         * luma.gl ids and props can be inspected
         */
        _setWebGLDebugMetadata(handle, resource, options) {
          handle.luma = resource;
          const spectorMetadata = { props: options.spector, id: options.spector["id"] };
          handle.__SPECTOR_Metadata = spectorMetadata;
        }
      };
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/adapter/webgl-adapter.js
  function isWebGL(gl) {
    if (typeof WebGL2RenderingContext !== "undefined" && gl instanceof WebGL2RenderingContext) {
      return true;
    }
    return Boolean(gl && Number.isFinite(gl._version));
  }
  var LOG_LEVEL2, WebGLAdapter, webgl2Adapter;
  var init_webgl_adapter = __esm({
    "../../node_modules/@luma.gl/webgl/dist/adapter/webgl-adapter.js"() {
      init_dist4();
      init_polyfill_webgl1_extensions();
      init_spector();
      init_webgl_developer_tools();
      LOG_LEVEL2 = 1;
      WebGLAdapter = class extends Adapter {
        /** type of device's created by this adapter */
        type = "webgl";
        constructor() {
          super();
          Device.defaultProps = { ...Device.defaultProps, ...DEFAULT_SPECTOR_PROPS };
        }
        /** Force any created WebGL contexts to be WebGL2 contexts, polyfilled with WebGL1 extensions */
        enforceWebGL2(enable2) {
          enforceWebGL2(enable2);
        }
        /** Check if WebGL 2 is available */
        isSupported() {
          return typeof WebGL2RenderingContext !== "undefined";
        }
        isDeviceHandle(handle) {
          if (typeof WebGL2RenderingContext !== "undefined" && handle instanceof WebGL2RenderingContext) {
            return true;
          }
          if (typeof WebGLRenderingContext !== "undefined" && handle instanceof WebGLRenderingContext) {
            log2.warn("WebGL1 is not supported", handle)();
          }
          return false;
        }
        /**
         * Get a device instance from a GL context
         * Creates a WebGLCanvasContext against the contexts canvas
         * @note autoResize will be disabled, assuming that whoever created the external context will be handling resizes.
         * @param gl
         * @returns
         */
        async attach(gl, props = {}) {
          const { WebGLDevice: WebGLDevice2 } = await Promise.resolve().then(() => (init_webgl_device(), webgl_device_exports));
          if (gl instanceof WebGLDevice2) {
            return gl;
          }
          if (gl?.device instanceof WebGLDevice2) {
            return gl.device;
          }
          if (!isWebGL(gl)) {
            throw new Error("Invalid WebGL2RenderingContext");
          }
          const createCanvasContext = props.createCanvasContext === true ? {} : props.createCanvasContext;
          return new WebGLDevice2({
            ...props,
            _handle: gl,
            createCanvasContext: { canvas: gl.canvas, autoResize: false, ...createCanvasContext }
          });
        }
        async create(props = {}) {
          const { WebGLDevice: WebGLDevice2 } = await Promise.resolve().then(() => (init_webgl_device(), webgl_device_exports));
          log2.groupCollapsed(LOG_LEVEL2, "WebGLDevice created")();
          try {
            const promises = [];
            if (props.debugWebGL || props.debug) {
              promises.push(loadWebGLDeveloperTools());
            }
            if (props.debugSpectorJS) {
              promises.push(loadSpectorJS(props));
            }
            const results = await Promise.allSettled(promises);
            for (const result of results) {
              if (result.status === "rejected") {
                log2.error(`Failed to initialize debug libraries ${result.reason}`)();
              }
            }
            const device = new WebGLDevice2(props);
            const message2 = `${device._reused ? "Reusing" : "Created"} device with WebGL2 ${device.props.debug ? "debug " : ""}context: ${device.info.vendor}, ${device.info.renderer} for canvas: ${device.canvasContext.id}`;
            log2.probe(LOG_LEVEL2, message2)();
            log2.table(LOG_LEVEL2, device.info)();
            return device;
          } finally {
            log2.groupEnd(LOG_LEVEL2)();
          }
        }
      };
      webgl2Adapter = new WebGLAdapter();
    }
  });

  // ../../node_modules/@luma.gl/webgl/dist/index.js
  var init_dist6 = __esm({
    "../../node_modules/@luma.gl/webgl/dist/index.js"() {
      init_webgl_adapter();
      init_webgl_device();
      init_webgl_buffer();
    }
  });

  // ../../node_modules/earcut/src/earcut.js
  var require_earcut = __commonJS({
    "../../node_modules/earcut/src/earcut.js"(exports, module) {
      "use strict";
      module.exports = earcut4;
      module.exports.default = earcut4;
      function earcut4(data, holeIndices, dim) {
        dim = dim || 2;
        var hasHoles = holeIndices && holeIndices.length, outerLen = hasHoles ? holeIndices[0] * dim : data.length, outerNode = linkedList2(data, 0, outerLen, dim, true), triangles = [];
        if (!outerNode || outerNode.next === outerNode.prev)
          return triangles;
        var minX, minY, maxX, maxY, x4, y5, invSize;
        if (hasHoles)
          outerNode = eliminateHoles2(data, holeIndices, outerNode, dim);
        if (data.length > 80 * dim) {
          minX = maxX = data[0];
          minY = maxY = data[1];
          for (var i7 = dim; i7 < outerLen; i7 += dim) {
            x4 = data[i7];
            y5 = data[i7 + 1];
            if (x4 < minX)
              minX = x4;
            if (y5 < minY)
              minY = y5;
            if (x4 > maxX)
              maxX = x4;
            if (y5 > maxY)
              maxY = y5;
          }
          invSize = Math.max(maxX - minX, maxY - minY);
          invSize = invSize !== 0 ? 32767 / invSize : 0;
        }
        earcutLinked2(outerNode, triangles, dim, minX, minY, invSize, 0);
        return triangles;
      }
      function linkedList2(data, start, end, dim, clockwise) {
        var i7, last;
        if (clockwise === signedArea2(data, start, end, dim) > 0) {
          for (i7 = start; i7 < end; i7 += dim)
            last = insertNode2(i7, data[i7], data[i7 + 1], last);
        } else {
          for (i7 = end - dim; i7 >= start; i7 -= dim)
            last = insertNode2(i7, data[i7], data[i7 + 1], last);
        }
        if (last && equals17(last, last.next)) {
          removeNode2(last);
          last = last.next;
        }
        return last;
      }
      function filterPoints2(start, end) {
        if (!start)
          return start;
        if (!end)
          end = start;
        var p5 = start, again;
        do {
          again = false;
          if (!p5.steiner && (equals17(p5, p5.next) || area2(p5.prev, p5, p5.next) === 0)) {
            removeNode2(p5);
            p5 = end = p5.prev;
            if (p5 === p5.next)
              break;
            again = true;
          } else {
            p5 = p5.next;
          }
        } while (again || p5 !== end);
        return end;
      }
      function earcutLinked2(ear, triangles, dim, minX, minY, invSize, pass) {
        if (!ear)
          return;
        if (!pass && invSize)
          indexCurve2(ear, minX, minY, invSize);
        var stop = ear, prev, next;
        while (ear.prev !== ear.next) {
          prev = ear.prev;
          next = ear.next;
          if (invSize ? isEarHashed2(ear, minX, minY, invSize) : isEar2(ear)) {
            triangles.push(prev.i / dim | 0);
            triangles.push(ear.i / dim | 0);
            triangles.push(next.i / dim | 0);
            removeNode2(ear);
            ear = next.next;
            stop = next.next;
            continue;
          }
          ear = next;
          if (ear === stop) {
            if (!pass) {
              earcutLinked2(filterPoints2(ear), triangles, dim, minX, minY, invSize, 1);
            } else if (pass === 1) {
              ear = cureLocalIntersections2(filterPoints2(ear), triangles, dim);
              earcutLinked2(ear, triangles, dim, minX, minY, invSize, 2);
            } else if (pass === 2) {
              splitEarcut2(ear, triangles, dim, minX, minY, invSize);
            }
            break;
          }
        }
      }
      function isEar2(ear) {
        var a6 = ear.prev, b4 = ear, c5 = ear.next;
        if (area2(a6, b4, c5) >= 0)
          return false;
        var ax = a6.x, bx = b4.x, cx = c5.x, ay = a6.y, by = b4.y, cy = c5.y;
        var x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
        var p5 = c5.next;
        while (p5 !== a6) {
          if (p5.x >= x0 && p5.x <= x1 && p5.y >= y0 && p5.y <= y1 && pointInTriangle2(ax, ay, bx, by, cx, cy, p5.x, p5.y) && area2(p5.prev, p5, p5.next) >= 0)
            return false;
          p5 = p5.next;
        }
        return true;
      }
      function isEarHashed2(ear, minX, minY, invSize) {
        var a6 = ear.prev, b4 = ear, c5 = ear.next;
        if (area2(a6, b4, c5) >= 0)
          return false;
        var ax = a6.x, bx = b4.x, cx = c5.x, ay = a6.y, by = b4.y, cy = c5.y;
        var x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
        var minZ = zOrder2(x0, y0, minX, minY, invSize), maxZ = zOrder2(x1, y1, minX, minY, invSize);
        var p5 = ear.prevZ, n4 = ear.nextZ;
        while (p5 && p5.z >= minZ && n4 && n4.z <= maxZ) {
          if (p5.x >= x0 && p5.x <= x1 && p5.y >= y0 && p5.y <= y1 && p5 !== a6 && p5 !== c5 && pointInTriangle2(ax, ay, bx, by, cx, cy, p5.x, p5.y) && area2(p5.prev, p5, p5.next) >= 0)
            return false;
          p5 = p5.prevZ;
          if (n4.x >= x0 && n4.x <= x1 && n4.y >= y0 && n4.y <= y1 && n4 !== a6 && n4 !== c5 && pointInTriangle2(ax, ay, bx, by, cx, cy, n4.x, n4.y) && area2(n4.prev, n4, n4.next) >= 0)
            return false;
          n4 = n4.nextZ;
        }
        while (p5 && p5.z >= minZ) {
          if (p5.x >= x0 && p5.x <= x1 && p5.y >= y0 && p5.y <= y1 && p5 !== a6 && p5 !== c5 && pointInTriangle2(ax, ay, bx, by, cx, cy, p5.x, p5.y) && area2(p5.prev, p5, p5.next) >= 0)
            return false;
          p5 = p5.prevZ;
        }
        while (n4 && n4.z <= maxZ) {
          if (n4.x >= x0 && n4.x <= x1 && n4.y >= y0 && n4.y <= y1 && n4 !== a6 && n4 !== c5 && pointInTriangle2(ax, ay, bx, by, cx, cy, n4.x, n4.y) && area2(n4.prev, n4, n4.next) >= 0)
            return false;
          n4 = n4.nextZ;
        }
        return true;
      }
      function cureLocalIntersections2(start, triangles, dim) {
        var p5 = start;
        do {
          var a6 = p5.prev, b4 = p5.next.next;
          if (!equals17(a6, b4) && intersects2(a6, p5, p5.next, b4) && locallyInside2(a6, b4) && locallyInside2(b4, a6)) {
            triangles.push(a6.i / dim | 0);
            triangles.push(p5.i / dim | 0);
            triangles.push(b4.i / dim | 0);
            removeNode2(p5);
            removeNode2(p5.next);
            p5 = start = b4;
          }
          p5 = p5.next;
        } while (p5 !== start);
        return filterPoints2(p5);
      }
      function splitEarcut2(start, triangles, dim, minX, minY, invSize) {
        var a6 = start;
        do {
          var b4 = a6.next.next;
          while (b4 !== a6.prev) {
            if (a6.i !== b4.i && isValidDiagonal2(a6, b4)) {
              var c5 = splitPolygon2(a6, b4);
              a6 = filterPoints2(a6, a6.next);
              c5 = filterPoints2(c5, c5.next);
              earcutLinked2(a6, triangles, dim, minX, minY, invSize, 0);
              earcutLinked2(c5, triangles, dim, minX, minY, invSize, 0);
              return;
            }
            b4 = b4.next;
          }
          a6 = a6.next;
        } while (a6 !== start);
      }
      function eliminateHoles2(data, holeIndices, outerNode, dim) {
        var queue = [], i7, len9, start, end, list;
        for (i7 = 0, len9 = holeIndices.length; i7 < len9; i7++) {
          start = holeIndices[i7] * dim;
          end = i7 < len9 - 1 ? holeIndices[i7 + 1] * dim : data.length;
          list = linkedList2(data, start, end, dim, false);
          if (list === list.next)
            list.steiner = true;
          queue.push(getLeftmost2(list));
        }
        queue.sort(compareX2);
        for (i7 = 0; i7 < queue.length; i7++) {
          outerNode = eliminateHole2(queue[i7], outerNode);
        }
        return outerNode;
      }
      function compareX2(a6, b4) {
        return a6.x - b4.x;
      }
      function eliminateHole2(hole, outerNode) {
        var bridge = findHoleBridge2(hole, outerNode);
        if (!bridge) {
          return outerNode;
        }
        var bridgeReverse = splitPolygon2(bridge, hole);
        filterPoints2(bridgeReverse, bridgeReverse.next);
        return filterPoints2(bridge, bridge.next);
      }
      function findHoleBridge2(hole, outerNode) {
        var p5 = outerNode, hx = hole.x, hy = hole.y, qx = -Infinity, m3;
        do {
          if (hy <= p5.y && hy >= p5.next.y && p5.next.y !== p5.y) {
            var x4 = p5.x + (hy - p5.y) * (p5.next.x - p5.x) / (p5.next.y - p5.y);
            if (x4 <= hx && x4 > qx) {
              qx = x4;
              m3 = p5.x < p5.next.x ? p5 : p5.next;
              if (x4 === hx)
                return m3;
            }
          }
          p5 = p5.next;
        } while (p5 !== outerNode);
        if (!m3)
          return null;
        var stop = m3, mx = m3.x, my = m3.y, tanMin = Infinity, tan6;
        p5 = m3;
        do {
          if (hx >= p5.x && p5.x >= mx && hx !== p5.x && pointInTriangle2(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p5.x, p5.y)) {
            tan6 = Math.abs(hy - p5.y) / (hx - p5.x);
            if (locallyInside2(p5, hole) && (tan6 < tanMin || tan6 === tanMin && (p5.x > m3.x || p5.x === m3.x && sectorContainsSector2(m3, p5)))) {
              m3 = p5;
              tanMin = tan6;
            }
          }
          p5 = p5.next;
        } while (p5 !== stop);
        return m3;
      }
      function sectorContainsSector2(m3, p5) {
        return area2(m3.prev, m3, p5.prev) < 0 && area2(p5.next, m3, m3.next) < 0;
      }
      function indexCurve2(start, minX, minY, invSize) {
        var p5 = start;
        do {
          if (p5.z === 0)
            p5.z = zOrder2(p5.x, p5.y, minX, minY, invSize);
          p5.prevZ = p5.prev;
          p5.nextZ = p5.next;
          p5 = p5.next;
        } while (p5 !== start);
        p5.prevZ.nextZ = null;
        p5.prevZ = null;
        sortLinked2(p5);
      }
      function sortLinked2(list) {
        var i7, p5, q3, e6, tail, numMerges, pSize, qSize, inSize = 1;
        do {
          p5 = list;
          list = null;
          tail = null;
          numMerges = 0;
          while (p5) {
            numMerges++;
            q3 = p5;
            pSize = 0;
            for (i7 = 0; i7 < inSize; i7++) {
              pSize++;
              q3 = q3.nextZ;
              if (!q3)
                break;
            }
            qSize = inSize;
            while (pSize > 0 || qSize > 0 && q3) {
              if (pSize !== 0 && (qSize === 0 || !q3 || p5.z <= q3.z)) {
                e6 = p5;
                p5 = p5.nextZ;
                pSize--;
              } else {
                e6 = q3;
                q3 = q3.nextZ;
                qSize--;
              }
              if (tail)
                tail.nextZ = e6;
              else
                list = e6;
              e6.prevZ = tail;
              tail = e6;
            }
            p5 = q3;
          }
          tail.nextZ = null;
          inSize *= 2;
        } while (numMerges > 1);
        return list;
      }
      function zOrder2(x4, y5, minX, minY, invSize) {
        x4 = (x4 - minX) * invSize | 0;
        y5 = (y5 - minY) * invSize | 0;
        x4 = (x4 | x4 << 8) & 16711935;
        x4 = (x4 | x4 << 4) & 252645135;
        x4 = (x4 | x4 << 2) & 858993459;
        x4 = (x4 | x4 << 1) & 1431655765;
        y5 = (y5 | y5 << 8) & 16711935;
        y5 = (y5 | y5 << 4) & 252645135;
        y5 = (y5 | y5 << 2) & 858993459;
        y5 = (y5 | y5 << 1) & 1431655765;
        return x4 | y5 << 1;
      }
      function getLeftmost2(start) {
        var p5 = start, leftmost = start;
        do {
          if (p5.x < leftmost.x || p5.x === leftmost.x && p5.y < leftmost.y)
            leftmost = p5;
          p5 = p5.next;
        } while (p5 !== start);
        return leftmost;
      }
      function pointInTriangle2(ax, ay, bx, by, cx, cy, px, py) {
        return (cx - px) * (ay - py) >= (ax - px) * (cy - py) && (ax - px) * (by - py) >= (bx - px) * (ay - py) && (bx - px) * (cy - py) >= (cx - px) * (by - py);
      }
      function isValidDiagonal2(a6, b4) {
        return a6.next.i !== b4.i && a6.prev.i !== b4.i && !intersectsPolygon2(a6, b4) && // dones't intersect other edges
        (locallyInside2(a6, b4) && locallyInside2(b4, a6) && middleInside2(a6, b4) && // locally visible
        (area2(a6.prev, a6, b4.prev) || area2(a6, b4.prev, b4)) || // does not create opposite-facing sectors
        equals17(a6, b4) && area2(a6.prev, a6, a6.next) > 0 && area2(b4.prev, b4, b4.next) > 0);
      }
      function area2(p5, q3, r5) {
        return (q3.y - p5.y) * (r5.x - q3.x) - (q3.x - p5.x) * (r5.y - q3.y);
      }
      function equals17(p1, p22) {
        return p1.x === p22.x && p1.y === p22.y;
      }
      function intersects2(p1, q1, p22, q22) {
        var o1 = sign2(area2(p1, q1, p22));
        var o22 = sign2(area2(p1, q1, q22));
        var o32 = sign2(area2(p22, q22, p1));
        var o42 = sign2(area2(p22, q22, q1));
        if (o1 !== o22 && o32 !== o42)
          return true;
        if (o1 === 0 && onSegment2(p1, p22, q1))
          return true;
        if (o22 === 0 && onSegment2(p1, q22, q1))
          return true;
        if (o32 === 0 && onSegment2(p22, p1, q22))
          return true;
        if (o42 === 0 && onSegment2(p22, q1, q22))
          return true;
        return false;
      }
      function onSegment2(p5, q3, r5) {
        return q3.x <= Math.max(p5.x, r5.x) && q3.x >= Math.min(p5.x, r5.x) && q3.y <= Math.max(p5.y, r5.y) && q3.y >= Math.min(p5.y, r5.y);
      }
      function sign2(num) {
        return num > 0 ? 1 : num < 0 ? -1 : 0;
      }
      function intersectsPolygon2(a6, b4) {
        var p5 = a6;
        do {
          if (p5.i !== a6.i && p5.next.i !== a6.i && p5.i !== b4.i && p5.next.i !== b4.i && intersects2(p5, p5.next, a6, b4))
            return true;
          p5 = p5.next;
        } while (p5 !== a6);
        return false;
      }
      function locallyInside2(a6, b4) {
        return area2(a6.prev, a6, a6.next) < 0 ? area2(a6, b4, a6.next) >= 0 && area2(a6, a6.prev, b4) >= 0 : area2(a6, b4, a6.prev) < 0 || area2(a6, a6.next, b4) < 0;
      }
      function middleInside2(a6, b4) {
        var p5 = a6, inside = false, px = (a6.x + b4.x) / 2, py = (a6.y + b4.y) / 2;
        do {
          if (p5.y > py !== p5.next.y > py && p5.next.y !== p5.y && px < (p5.next.x - p5.x) * (py - p5.y) / (p5.next.y - p5.y) + p5.x)
            inside = !inside;
          p5 = p5.next;
        } while (p5 !== a6);
        return inside;
      }
      function splitPolygon2(a6, b4) {
        var a22 = new Node(a6.i, a6.x, a6.y), b22 = new Node(b4.i, b4.x, b4.y), an = a6.next, bp = b4.prev;
        a6.next = b4;
        b4.prev = a6;
        a22.next = an;
        an.prev = a22;
        b22.next = a22;
        a22.prev = b22;
        bp.next = b22;
        b22.prev = bp;
        return b22;
      }
      function insertNode2(i7, x4, y5, last) {
        var p5 = new Node(i7, x4, y5);
        if (!last) {
          p5.prev = p5;
          p5.next = p5;
        } else {
          p5.next = last.next;
          p5.prev = last;
          last.next.prev = p5;
          last.next = p5;
        }
        return p5;
      }
      function removeNode2(p5) {
        p5.next.prev = p5.prev;
        p5.prev.next = p5.next;
        if (p5.prevZ)
          p5.prevZ.nextZ = p5.nextZ;
        if (p5.nextZ)
          p5.nextZ.prevZ = p5.prevZ;
      }
      function Node(i7, x4, y5) {
        this.i = i7;
        this.x = x4;
        this.y = y5;
        this.prev = null;
        this.next = null;
        this.z = 0;
        this.prevZ = null;
        this.nextZ = null;
        this.steiner = false;
      }
      earcut4.deviation = function(data, holeIndices, dim, triangles) {
        var hasHoles = holeIndices && holeIndices.length;
        var outerLen = hasHoles ? holeIndices[0] * dim : data.length;
        var polygonArea = Math.abs(signedArea2(data, 0, outerLen, dim));
        if (hasHoles) {
          for (var i7 = 0, len9 = holeIndices.length; i7 < len9; i7++) {
            var start = holeIndices[i7] * dim;
            var end = i7 < len9 - 1 ? holeIndices[i7 + 1] * dim : data.length;
            polygonArea -= Math.abs(signedArea2(data, start, end, dim));
          }
        }
        var trianglesArea = 0;
        for (i7 = 0; i7 < triangles.length; i7 += 3) {
          var a6 = triangles[i7] * dim;
          var b4 = triangles[i7 + 1] * dim;
          var c5 = triangles[i7 + 2] * dim;
          trianglesArea += Math.abs(
            (data[a6] - data[c5]) * (data[b4 + 1] - data[a6 + 1]) - (data[a6] - data[b4]) * (data[c5 + 1] - data[a6 + 1])
          );
        }
        return polygonArea === 0 && trianglesArea === 0 ? 0 : Math.abs((trianglesArea - polygonArea) / polygonArea);
      };
      function signedArea2(data, start, end, dim) {
        var sum2 = 0;
        for (var i7 = start, j4 = end - dim; i7 < end; i7 += dim) {
          sum2 += (data[j4] - data[i7]) * (data[i7 + 1] + data[j4 + 1]);
          j4 = i7;
        }
        return sum2;
      }
      earcut4.flatten = function(data) {
        var dim = data[0][0].length, result = { vertices: [], holes: [], dimensions: dim }, holeIndex = 0;
        for (var i7 = 0; i7 < data.length; i7++) {
          for (var j4 = 0; j4 < data[i7].length; j4++) {
            for (var d5 = 0; d5 < dim; d5++)
              result.vertices.push(data[i7][j4][d5]);
          }
          if (i7 > 0) {
            holeIndex += data[i7 - 1].length;
            result.holes.push(holeIndex);
          }
        }
        return result;
      };
    }
  });

  // external-global-plugin:h3-js
  var require_h3_js = __commonJS({
    "external-global-plugin:h3-js"(exports, module) {
      module.exports = globalThis.h3 || {};
    }
  });

  // ../../node_modules/fast-xml-parser/src/util.js
  var require_util = __commonJS({
    "../../node_modules/fast-xml-parser/src/util.js"(exports) {
      "use strict";
      var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
      var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
      var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
      var regexName = new RegExp("^" + nameRegexp + "$");
      var getAllMatches = function(string, regex) {
        const matches3 = [];
        let match = regex.exec(string);
        while (match) {
          const allmatches = [];
          allmatches.startIndex = regex.lastIndex - match[0].length;
          const len9 = match.length;
          for (let index = 0; index < len9; index++) {
            allmatches.push(match[index]);
          }
          matches3.push(allmatches);
          match = regex.exec(string);
        }
        return matches3;
      };
      var isName = function(string) {
        const match = regexName.exec(string);
        return !(match === null || typeof match === "undefined");
      };
      exports.isExist = function(v5) {
        return typeof v5 !== "undefined";
      };
      exports.isEmptyObject = function(obj) {
        return Object.keys(obj).length === 0;
      };
      exports.merge = function(target2, a6, arrayMode) {
        if (a6) {
          const keys = Object.keys(a6);
          const len9 = keys.length;
          for (let i7 = 0; i7 < len9; i7++) {
            if (arrayMode === "strict") {
              target2[keys[i7]] = [a6[keys[i7]]];
            } else {
              target2[keys[i7]] = a6[keys[i7]];
            }
          }
        }
      };
      exports.getValue = function(v5) {
        if (exports.isExist(v5)) {
          return v5;
        } else {
          return "";
        }
      };
      exports.isName = isName;
      exports.getAllMatches = getAllMatches;
      exports.nameRegexp = nameRegexp;
    }
  });

  // ../../node_modules/fast-xml-parser/src/validator.js
  var require_validator = __commonJS({
    "../../node_modules/fast-xml-parser/src/validator.js"(exports) {
      "use strict";
      var util = require_util();
      var defaultOptions4 = {
        allowBooleanAttributes: false,
        //A tag can have attributes without any value
        unpairedTags: []
      };
      exports.validate = function(xmlData, options) {
        options = Object.assign({}, defaultOptions4, options);
        const tags = [];
        let tagFound = false;
        let reachedRoot = false;
        if (xmlData[0] === "\uFEFF") {
          xmlData = xmlData.substr(1);
        }
        for (let i7 = 0; i7 < xmlData.length; i7++) {
          if (xmlData[i7] === "<" && xmlData[i7 + 1] === "?") {
            i7 += 2;
            i7 = readPI(xmlData, i7);
            if (i7.err)
              return i7;
          } else if (xmlData[i7] === "<") {
            let tagStartPos = i7;
            i7++;
            if (xmlData[i7] === "!") {
              i7 = readCommentAndCDATA(xmlData, i7);
              continue;
            } else {
              let closingTag = false;
              if (xmlData[i7] === "/") {
                closingTag = true;
                i7++;
              }
              let tagName = "";
              for (; i7 < xmlData.length && xmlData[i7] !== ">" && xmlData[i7] !== " " && xmlData[i7] !== "	" && xmlData[i7] !== "\n" && xmlData[i7] !== "\r"; i7++) {
                tagName += xmlData[i7];
              }
              tagName = tagName.trim();
              if (tagName[tagName.length - 1] === "/") {
                tagName = tagName.substring(0, tagName.length - 1);
                i7--;
              }
              if (!validateTagName(tagName)) {
                let msg;
                if (tagName.trim().length === 0) {
                  msg = "Invalid space after '<'.";
                } else {
                  msg = "Tag '" + tagName + "' is an invalid name.";
                }
                return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i7));
              }
              const result = readAttributeStr(xmlData, i7);
              if (result === false) {
                return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i7));
              }
              let attrStr = result.value;
              i7 = result.index;
              if (attrStr[attrStr.length - 1] === "/") {
                const attrStrStart = i7 - attrStr.length;
                attrStr = attrStr.substring(0, attrStr.length - 1);
                const isValid = validateAttributeString(attrStr, options);
                if (isValid === true) {
                  tagFound = true;
                } else {
                  return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
                }
              } else if (closingTag) {
                if (!result.tagClosed) {
                  return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i7));
                } else if (attrStr.trim().length > 0) {
                  return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
                } else if (tags.length === 0) {
                  return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' has not been opened.", getLineNumberForPosition(xmlData, tagStartPos));
                } else {
                  const otg = tags.pop();
                  if (tagName !== otg.tagName) {
                    let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                    return getErrorObject(
                      "InvalidTag",
                      "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.",
                      getLineNumberForPosition(xmlData, tagStartPos)
                    );
                  }
                  if (tags.length == 0) {
                    reachedRoot = true;
                  }
                }
              } else {
                const isValid = validateAttributeString(attrStr, options);
                if (isValid !== true) {
                  return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i7 - attrStr.length + isValid.err.line));
                }
                if (reachedRoot === true) {
                  return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i7));
                } else if (options.unpairedTags.indexOf(tagName) !== -1) {
                } else {
                  tags.push({ tagName, tagStartPos });
                }
                tagFound = true;
              }
              for (i7++; i7 < xmlData.length; i7++) {
                if (xmlData[i7] === "<") {
                  if (xmlData[i7 + 1] === "!") {
                    i7++;
                    i7 = readCommentAndCDATA(xmlData, i7);
                    continue;
                  } else if (xmlData[i7 + 1] === "?") {
                    i7 = readPI(xmlData, ++i7);
                    if (i7.err)
                      return i7;
                  } else {
                    break;
                  }
                } else if (xmlData[i7] === "&") {
                  const afterAmp = validateAmpersand(xmlData, i7);
                  if (afterAmp == -1)
                    return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i7));
                  i7 = afterAmp;
                } else {
                  if (reachedRoot === true && !isWhiteSpace(xmlData[i7])) {
                    return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i7));
                  }
                }
              }
              if (xmlData[i7] === "<") {
                i7--;
              }
            }
          } else {
            if (isWhiteSpace(xmlData[i7])) {
              continue;
            }
            return getErrorObject("InvalidChar", "char '" + xmlData[i7] + "' is not expected.", getLineNumberForPosition(xmlData, i7));
          }
        }
        if (!tagFound) {
          return getErrorObject("InvalidXml", "Start tag expected.", 1);
        } else if (tags.length == 1) {
          return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
        } else if (tags.length > 0) {
          return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t5) => t5.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
        }
        return true;
      };
      function isWhiteSpace(char) {
        return char === " " || char === "	" || char === "\n" || char === "\r";
      }
      function readPI(xmlData, i7) {
        const start = i7;
        for (; i7 < xmlData.length; i7++) {
          if (xmlData[i7] == "?" || xmlData[i7] == " ") {
            const tagname = xmlData.substr(start, i7 - start);
            if (i7 > 5 && tagname === "xml") {
              return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i7));
            } else if (xmlData[i7] == "?" && xmlData[i7 + 1] == ">") {
              i7++;
              break;
            } else {
              continue;
            }
          }
        }
        return i7;
      }
      function readCommentAndCDATA(xmlData, i7) {
        if (xmlData.length > i7 + 5 && xmlData[i7 + 1] === "-" && xmlData[i7 + 2] === "-") {
          for (i7 += 3; i7 < xmlData.length; i7++) {
            if (xmlData[i7] === "-" && xmlData[i7 + 1] === "-" && xmlData[i7 + 2] === ">") {
              i7 += 2;
              break;
            }
          }
        } else if (xmlData.length > i7 + 8 && xmlData[i7 + 1] === "D" && xmlData[i7 + 2] === "O" && xmlData[i7 + 3] === "C" && xmlData[i7 + 4] === "T" && xmlData[i7 + 5] === "Y" && xmlData[i7 + 6] === "P" && xmlData[i7 + 7] === "E") {
          let angleBracketsCount = 1;
          for (i7 += 8; i7 < xmlData.length; i7++) {
            if (xmlData[i7] === "<") {
              angleBracketsCount++;
            } else if (xmlData[i7] === ">") {
              angleBracketsCount--;
              if (angleBracketsCount === 0) {
                break;
              }
            }
          }
        } else if (xmlData.length > i7 + 9 && xmlData[i7 + 1] === "[" && xmlData[i7 + 2] === "C" && xmlData[i7 + 3] === "D" && xmlData[i7 + 4] === "A" && xmlData[i7 + 5] === "T" && xmlData[i7 + 6] === "A" && xmlData[i7 + 7] === "[") {
          for (i7 += 8; i7 < xmlData.length; i7++) {
            if (xmlData[i7] === "]" && xmlData[i7 + 1] === "]" && xmlData[i7 + 2] === ">") {
              i7 += 2;
              break;
            }
          }
        }
        return i7;
      }
      var doubleQuote = '"';
      var singleQuote = "'";
      function readAttributeStr(xmlData, i7) {
        let attrStr = "";
        let startChar = "";
        let tagClosed = false;
        for (; i7 < xmlData.length; i7++) {
          if (xmlData[i7] === doubleQuote || xmlData[i7] === singleQuote) {
            if (startChar === "") {
              startChar = xmlData[i7];
            } else if (startChar !== xmlData[i7]) {
            } else {
              startChar = "";
            }
          } else if (xmlData[i7] === ">") {
            if (startChar === "") {
              tagClosed = true;
              break;
            }
          }
          attrStr += xmlData[i7];
        }
        if (startChar !== "") {
          return false;
        }
        return {
          value: attrStr,
          index: i7,
          tagClosed
        };
      }
      var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
      function validateAttributeString(attrStr, options) {
        const matches3 = util.getAllMatches(attrStr, validAttrStrRegxp);
        const attrNames = {};
        for (let i7 = 0; i7 < matches3.length; i7++) {
          if (matches3[i7][1].length === 0) {
            return getErrorObject("InvalidAttr", "Attribute '" + matches3[i7][2] + "' has no space in starting.", getPositionFromMatch(matches3[i7]));
          } else if (matches3[i7][3] !== void 0 && matches3[i7][4] === void 0) {
            return getErrorObject("InvalidAttr", "Attribute '" + matches3[i7][2] + "' is without value.", getPositionFromMatch(matches3[i7]));
          } else if (matches3[i7][3] === void 0 && !options.allowBooleanAttributes) {
            return getErrorObject("InvalidAttr", "boolean attribute '" + matches3[i7][2] + "' is not allowed.", getPositionFromMatch(matches3[i7]));
          }
          const attrName = matches3[i7][2];
          if (!validateAttrName(attrName)) {
            return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches3[i7]));
          }
          if (!attrNames.hasOwnProperty(attrName)) {
            attrNames[attrName] = 1;
          } else {
            return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches3[i7]));
          }
        }
        return true;
      }
      function validateNumberAmpersand(xmlData, i7) {
        let re2 = /\d/;
        if (xmlData[i7] === "x") {
          i7++;
          re2 = /[\da-fA-F]/;
        }
        for (; i7 < xmlData.length; i7++) {
          if (xmlData[i7] === ";")
            return i7;
          if (!xmlData[i7].match(re2))
            break;
        }
        return -1;
      }
      function validateAmpersand(xmlData, i7) {
        i7++;
        if (xmlData[i7] === ";")
          return -1;
        if (xmlData[i7] === "#") {
          i7++;
          return validateNumberAmpersand(xmlData, i7);
        }
        let count3 = 0;
        for (; i7 < xmlData.length; i7++, count3++) {
          if (xmlData[i7].match(/\w/) && count3 < 20)
            continue;
          if (xmlData[i7] === ";")
            break;
          return -1;
        }
        return i7;
      }
      function getErrorObject(code, message2, lineNumber) {
        return {
          err: {
            code,
            msg: message2,
            line: lineNumber.line || lineNumber,
            col: lineNumber.col
          }
        };
      }
      function validateAttrName(attrName) {
        return util.isName(attrName);
      }
      function validateTagName(tagname) {
        return util.isName(tagname);
      }
      function getLineNumberForPosition(xmlData, index) {
        const lines = xmlData.substring(0, index).split(/\r?\n/);
        return {
          line: lines.length,
          // column number is last line's length + 1, because column numbering starts at 1:
          col: lines[lines.length - 1].length + 1
        };
      }
      function getPositionFromMatch(match) {
        return match.startIndex + match[1].length;
      }
    }
  });

  // ../../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js
  var require_OptionsBuilder = __commonJS({
    "../../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js"(exports) {
      var defaultOptions4 = {
        preserveOrder: false,
        attributeNamePrefix: "@_",
        attributesGroupName: false,
        textNodeName: "#text",
        ignoreAttributes: true,
        removeNSPrefix: false,
        // remove NS from tag name or attribute name if true
        allowBooleanAttributes: false,
        //a tag can have attributes without any value
        //ignoreRootElement : false,
        parseTagValue: true,
        parseAttributeValue: false,
        trimValues: true,
        //Trim string values of tag and attributes
        cdataPropName: false,
        numberParseOptions: {
          hex: true,
          leadingZeros: true,
          eNotation: true
        },
        tagValueProcessor: function(tagName, val2) {
          return val2;
        },
        attributeValueProcessor: function(attrName, val2) {
          return val2;
        },
        stopNodes: [],
        //nested tags will not be parsed even for errors
        alwaysCreateTextNode: false,
        isArray: () => false,
        commentPropName: false,
        unpairedTags: [],
        processEntities: true,
        htmlEntities: false,
        ignoreDeclaration: false,
        ignorePiTags: false,
        transformTagName: false,
        transformAttributeName: false,
        updateTag: function(tagName, jPath, attrs) {
          return tagName;
        }
        // skipEmptyListItem: false
      };
      var buildOptions = function(options) {
        return Object.assign({}, defaultOptions4, options);
      };
      exports.buildOptions = buildOptions;
      exports.defaultOptions = defaultOptions4;
    }
  });

  // ../../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js
  var require_xmlNode = __commonJS({
    "../../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js"(exports, module) {
      "use strict";
      var XmlNode = class {
        constructor(tagname) {
          this.tagname = tagname;
          this.child = [];
          this[":@"] = {};
        }
        add(key, val2) {
          if (key === "__proto__")
            key = "#__proto__";
          this.child.push({ [key]: val2 });
        }
        addChild(node) {
          if (node.tagname === "__proto__")
            node.tagname = "#__proto__";
          if (node[":@"] && Object.keys(node[":@"]).length > 0) {
            this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
          } else {
            this.child.push({ [node.tagname]: node.child });
          }
        }
      };
      module.exports = XmlNode;
    }
  });

  // ../../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js
  var require_DocTypeReader = __commonJS({
    "../../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"(exports, module) {
      var util = require_util();
      function readDocType(xmlData, i7) {
        const entities = {};
        if (xmlData[i7 + 3] === "O" && xmlData[i7 + 4] === "C" && xmlData[i7 + 5] === "T" && xmlData[i7 + 6] === "Y" && xmlData[i7 + 7] === "P" && xmlData[i7 + 8] === "E") {
          i7 = i7 + 9;
          let angleBracketsCount = 1;
          let hasBody = false, comment = false;
          let exp2 = "";
          for (; i7 < xmlData.length; i7++) {
            if (xmlData[i7] === "<" && !comment) {
              if (hasBody && isEntity(xmlData, i7)) {
                i7 += 7;
                [entityName, val, i7] = readEntityExp(xmlData, i7 + 1);
                if (val.indexOf("&") === -1)
                  entities[validateEntityName(entityName)] = {
                    regx: RegExp(`&${entityName};`, "g"),
                    val
                  };
              } else if (hasBody && isElement(xmlData, i7))
                i7 += 8;
              else if (hasBody && isAttlist(xmlData, i7))
                i7 += 8;
              else if (hasBody && isNotation(xmlData, i7))
                i7 += 9;
              else if (isComment)
                comment = true;
              else
                throw new Error("Invalid DOCTYPE");
              angleBracketsCount++;
              exp2 = "";
            } else if (xmlData[i7] === ">") {
              if (comment) {
                if (xmlData[i7 - 1] === "-" && xmlData[i7 - 2] === "-") {
                  comment = false;
                  angleBracketsCount--;
                }
              } else {
                angleBracketsCount--;
              }
              if (angleBracketsCount === 0) {
                break;
              }
            } else if (xmlData[i7] === "[") {
              hasBody = true;
            } else {
              exp2 += xmlData[i7];
            }
          }
          if (angleBracketsCount !== 0) {
            throw new Error(`Unclosed DOCTYPE`);
          }
        } else {
          throw new Error(`Invalid Tag instead of DOCTYPE`);
        }
        return { entities, i: i7 };
      }
      function readEntityExp(xmlData, i7) {
        let entityName2 = "";
        for (; i7 < xmlData.length && (xmlData[i7] !== "'" && xmlData[i7] !== '"'); i7++) {
          entityName2 += xmlData[i7];
        }
        entityName2 = entityName2.trim();
        if (entityName2.indexOf(" ") !== -1)
          throw new Error("External entites are not supported");
        const startChar = xmlData[i7++];
        let val2 = "";
        for (; i7 < xmlData.length && xmlData[i7] !== startChar; i7++) {
          val2 += xmlData[i7];
        }
        return [entityName2, val2, i7];
      }
      function isComment(xmlData, i7) {
        if (xmlData[i7 + 1] === "!" && xmlData[i7 + 2] === "-" && xmlData[i7 + 3] === "-")
          return true;
        return false;
      }
      function isEntity(xmlData, i7) {
        if (xmlData[i7 + 1] === "!" && xmlData[i7 + 2] === "E" && xmlData[i7 + 3] === "N" && xmlData[i7 + 4] === "T" && xmlData[i7 + 5] === "I" && xmlData[i7 + 6] === "T" && xmlData[i7 + 7] === "Y")
          return true;
        return false;
      }
      function isElement(xmlData, i7) {
        if (xmlData[i7 + 1] === "!" && xmlData[i7 + 2] === "E" && xmlData[i7 + 3] === "L" && xmlData[i7 + 4] === "E" && xmlData[i7 + 5] === "M" && xmlData[i7 + 6] === "E" && xmlData[i7 + 7] === "N" && xmlData[i7 + 8] === "T")
          return true;
        return false;
      }
      function isAttlist(xmlData, i7) {
        if (xmlData[i7 + 1] === "!" && xmlData[i7 + 2] === "A" && xmlData[i7 + 3] === "T" && xmlData[i7 + 4] === "T" && xmlData[i7 + 5] === "L" && xmlData[i7 + 6] === "I" && xmlData[i7 + 7] === "S" && xmlData[i7 + 8] === "T")
          return true;
        return false;
      }
      function isNotation(xmlData, i7) {
        if (xmlData[i7 + 1] === "!" && xmlData[i7 + 2] === "N" && xmlData[i7 + 3] === "O" && xmlData[i7 + 4] === "T" && xmlData[i7 + 5] === "A" && xmlData[i7 + 6] === "T" && xmlData[i7 + 7] === "I" && xmlData[i7 + 8] === "O" && xmlData[i7 + 9] === "N")
          return true;
        return false;
      }
      function validateEntityName(name13) {
        if (util.isName(name13))
          return name13;
        else
          throw new Error(`Invalid entity name ${name13}`);
      }
      module.exports = readDocType;
    }
  });

  // ../../node_modules/strnum/strnum.js
  var require_strnum = __commonJS({
    "../../node_modules/strnum/strnum.js"(exports, module) {
      var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
      var numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
      if (!Number.parseInt && window.parseInt) {
        Number.parseInt = window.parseInt;
      }
      if (!Number.parseFloat && window.parseFloat) {
        Number.parseFloat = window.parseFloat;
      }
      var consider = {
        hex: true,
        leadingZeros: true,
        decimalPoint: ".",
        eNotation: true
        //skipLike: /regex/
      };
      function toNumber2(str8, options = {}) {
        options = Object.assign({}, consider, options);
        if (!str8 || typeof str8 !== "string")
          return str8;
        let trimmedStr = str8.trim();
        if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr))
          return str8;
        else if (options.hex && hexRegex.test(trimmedStr)) {
          return Number.parseInt(trimmedStr, 16);
        } else {
          const match = numRegex.exec(trimmedStr);
          if (match) {
            const sign2 = match[1];
            const leadingZeros = match[2];
            let numTrimmedByZeros = trimZeros(match[3]);
            const eNotation = match[4] || match[6];
            if (!options.leadingZeros && leadingZeros.length > 0 && sign2 && trimmedStr[2] !== ".")
              return str8;
            else if (!options.leadingZeros && leadingZeros.length > 0 && !sign2 && trimmedStr[1] !== ".")
              return str8;
            else {
              const num = Number(trimmedStr);
              const numStr = "" + num;
              if (numStr.search(/[eE]/) !== -1) {
                if (options.eNotation)
                  return num;
                else
                  return str8;
              } else if (eNotation) {
                if (options.eNotation)
                  return num;
                else
                  return str8;
              } else if (trimmedStr.indexOf(".") !== -1) {
                if (numStr === "0" && numTrimmedByZeros === "")
                  return num;
                else if (numStr === numTrimmedByZeros)
                  return num;
                else if (sign2 && numStr === "-" + numTrimmedByZeros)
                  return num;
                else
                  return str8;
              }
              if (leadingZeros) {
                if (numTrimmedByZeros === numStr)
                  return num;
                else if (sign2 + numTrimmedByZeros === numStr)
                  return num;
                else
                  return str8;
              }
              if (trimmedStr === numStr)
                return num;
              else if (trimmedStr === sign2 + numStr)
                return num;
              return str8;
            }
          } else {
            return str8;
          }
        }
      }
      function trimZeros(numStr) {
        if (numStr && numStr.indexOf(".") !== -1) {
          numStr = numStr.replace(/0+$/, "");
          if (numStr === ".")
            numStr = "0";
          else if (numStr[0] === ".")
            numStr = "0" + numStr;
          else if (numStr[numStr.length - 1] === ".")
            numStr = numStr.substr(0, numStr.length - 1);
          return numStr;
        }
        return numStr;
      }
      module.exports = toNumber2;
    }
  });

  // ../../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js
  var require_OrderedObjParser = __commonJS({
    "../../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"(exports, module) {
      "use strict";
      var util = require_util();
      var xmlNode = require_xmlNode();
      var readDocType = require_DocTypeReader();
      var toNumber2 = require_strnum();
      var OrderedObjParser = class {
        constructor(options) {
          this.options = options;
          this.currentNode = null;
          this.tagsNodeStack = [];
          this.docTypeEntities = {};
          this.lastEntities = {
            "apos": { regex: /&(apos|#39|#x27);/g, val: "'" },
            "gt": { regex: /&(gt|#62|#x3E);/g, val: ">" },
            "lt": { regex: /&(lt|#60|#x3C);/g, val: "<" },
            "quot": { regex: /&(quot|#34|#x22);/g, val: '"' }
          };
          this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
          this.htmlEntities = {
            "space": { regex: /&(nbsp|#160);/g, val: " " },
            // "lt" : { regex: /&(lt|#60);/g, val: "<" },
            // "gt" : { regex: /&(gt|#62);/g, val: ">" },
            // "amp" : { regex: /&(amp|#38);/g, val: "&" },
            // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
            // "apos" : { regex: /&(apos|#39);/g, val: "'" },
            "cent": { regex: /&(cent|#162);/g, val: "\xA2" },
            "pound": { regex: /&(pound|#163);/g, val: "\xA3" },
            "yen": { regex: /&(yen|#165);/g, val: "\xA5" },
            "euro": { regex: /&(euro|#8364);/g, val: "\u20AC" },
            "copyright": { regex: /&(copy|#169);/g, val: "\xA9" },
            "reg": { regex: /&(reg|#174);/g, val: "\xAE" },
            "inr": { regex: /&(inr|#8377);/g, val: "\u20B9" },
            "num_dec": { regex: /&#([0-9]{1,7});/g, val: (_3, str8) => String.fromCharCode(Number.parseInt(str8, 10)) },
            "num_hex": { regex: /&#x([0-9a-fA-F]{1,6});/g, val: (_3, str8) => String.fromCharCode(Number.parseInt(str8, 16)) }
          };
          this.addExternalEntities = addExternalEntities;
          this.parseXml = parseXml;
          this.parseTextData = parseTextData;
          this.resolveNameSpace = resolveNameSpace;
          this.buildAttributesMap = buildAttributesMap;
          this.isItStopNode = isItStopNode;
          this.replaceEntitiesValue = replaceEntitiesValue;
          this.readStopNodeData = readStopNodeData;
          this.saveTextToParentTag = saveTextToParentTag;
          this.addChild = addChild;
        }
      };
      function addExternalEntities(externalEntities) {
        const entKeys = Object.keys(externalEntities);
        for (let i7 = 0; i7 < entKeys.length; i7++) {
          const ent = entKeys[i7];
          this.lastEntities[ent] = {
            regex: new RegExp("&" + ent + ";", "g"),
            val: externalEntities[ent]
          };
        }
      }
      function parseTextData(val2, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
        if (val2 !== void 0) {
          if (this.options.trimValues && !dontTrim) {
            val2 = val2.trim();
          }
          if (val2.length > 0) {
            if (!escapeEntities)
              val2 = this.replaceEntitiesValue(val2);
            const newval = this.options.tagValueProcessor(tagName, val2, jPath, hasAttributes, isLeafNode);
            if (newval === null || newval === void 0) {
              return val2;
            } else if (typeof newval !== typeof val2 || newval !== val2) {
              return newval;
            } else if (this.options.trimValues) {
              return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
            } else {
              const trimmedVal = val2.trim();
              if (trimmedVal === val2) {
                return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
              } else {
                return val2;
              }
            }
          }
        }
      }
      function resolveNameSpace(tagname) {
        if (this.options.removeNSPrefix) {
          const tags = tagname.split(":");
          const prefix = tagname.charAt(0) === "/" ? "/" : "";
          if (tags[0] === "xmlns") {
            return "";
          }
          if (tags.length === 2) {
            tagname = prefix + tags[1];
          }
        }
        return tagname;
      }
      var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
      function buildAttributesMap(attrStr, jPath, tagName) {
        if (!this.options.ignoreAttributes && typeof attrStr === "string") {
          const matches3 = util.getAllMatches(attrStr, attrsRegx);
          const len9 = matches3.length;
          const attrs = {};
          for (let i7 = 0; i7 < len9; i7++) {
            const attrName = this.resolveNameSpace(matches3[i7][1]);
            let oldVal = matches3[i7][4];
            let aName = this.options.attributeNamePrefix + attrName;
            if (attrName.length) {
              if (this.options.transformAttributeName) {
                aName = this.options.transformAttributeName(aName);
              }
              if (aName === "__proto__")
                aName = "#__proto__";
              if (oldVal !== void 0) {
                if (this.options.trimValues) {
                  oldVal = oldVal.trim();
                }
                oldVal = this.replaceEntitiesValue(oldVal);
                const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
                if (newVal === null || newVal === void 0) {
                  attrs[aName] = oldVal;
                } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
                  attrs[aName] = newVal;
                } else {
                  attrs[aName] = parseValue(
                    oldVal,
                    this.options.parseAttributeValue,
                    this.options.numberParseOptions
                  );
                }
              } else if (this.options.allowBooleanAttributes) {
                attrs[aName] = true;
              }
            }
          }
          if (!Object.keys(attrs).length) {
            return;
          }
          if (this.options.attributesGroupName) {
            const attrCollection = {};
            attrCollection[this.options.attributesGroupName] = attrs;
            return attrCollection;
          }
          return attrs;
        }
      }
      var parseXml = function(xmlData) {
        xmlData = xmlData.replace(/\r\n?/g, "\n");
        const xmlObj = new xmlNode("!xml");
        let currentNode = xmlObj;
        let textData = "";
        let jPath = "";
        for (let i7 = 0; i7 < xmlData.length; i7++) {
          const ch = xmlData[i7];
          if (ch === "<") {
            if (xmlData[i7 + 1] === "/") {
              const closeIndex = findClosingIndex(xmlData, ">", i7, "Closing Tag is not closed.");
              let tagName = xmlData.substring(i7 + 2, closeIndex).trim();
              if (this.options.removeNSPrefix) {
                const colonIndex = tagName.indexOf(":");
                if (colonIndex !== -1) {
                  tagName = tagName.substr(colonIndex + 1);
                }
              }
              if (this.options.transformTagName) {
                tagName = this.options.transformTagName(tagName);
              }
              if (currentNode) {
                textData = this.saveTextToParentTag(textData, currentNode, jPath);
              }
              const lastTagName = jPath.substring(jPath.lastIndexOf(".") + 1);
              if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {
                throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);
              }
              let propIndex = 0;
              if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {
                propIndex = jPath.lastIndexOf(".", jPath.lastIndexOf(".") - 1);
                this.tagsNodeStack.pop();
              } else {
                propIndex = jPath.lastIndexOf(".");
              }
              jPath = jPath.substring(0, propIndex);
              currentNode = this.tagsNodeStack.pop();
              textData = "";
              i7 = closeIndex;
            } else if (xmlData[i7 + 1] === "?") {
              let tagData = readTagExp(xmlData, i7, false, "?>");
              if (!tagData)
                throw new Error("Pi Tag is not closed.");
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {
              } else {
                const childNode = new xmlNode(tagData.tagName);
                childNode.add(this.options.textNodeName, "");
                if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);
                }
                this.addChild(currentNode, childNode, jPath);
              }
              i7 = tagData.closeIndex + 1;
            } else if (xmlData.substr(i7 + 1, 3) === "!--") {
              const endIndex = findClosingIndex(xmlData, "-->", i7 + 4, "Comment is not closed.");
              if (this.options.commentPropName) {
                const comment = xmlData.substring(i7 + 4, endIndex - 2);
                textData = this.saveTextToParentTag(textData, currentNode, jPath);
                currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
              }
              i7 = endIndex;
            } else if (xmlData.substr(i7 + 1, 2) === "!D") {
              const result = readDocType(xmlData, i7);
              this.docTypeEntities = result.entities;
              i7 = result.i;
            } else if (xmlData.substr(i7 + 1, 2) === "![") {
              const closeIndex = findClosingIndex(xmlData, "]]>", i7, "CDATA is not closed.") - 2;
              const tagExp = xmlData.substring(i7 + 9, closeIndex);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              let val2 = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);
              if (val2 == void 0)
                val2 = "";
              if (this.options.cdataPropName) {
                currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
              } else {
                currentNode.add(this.options.textNodeName, val2);
              }
              i7 = closeIndex + 2;
            } else {
              let result = readTagExp(xmlData, i7, this.options.removeNSPrefix);
              let tagName = result.tagName;
              const rawTagName = result.rawTagName;
              let tagExp = result.tagExp;
              let attrExpPresent = result.attrExpPresent;
              let closeIndex = result.closeIndex;
              if (this.options.transformTagName) {
                tagName = this.options.transformTagName(tagName);
              }
              if (currentNode && textData) {
                if (currentNode.tagname !== "!xml") {
                  textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
                }
              }
              const lastTag = currentNode;
              if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
                currentNode = this.tagsNodeStack.pop();
                jPath = jPath.substring(0, jPath.lastIndexOf("."));
              }
              if (tagName !== xmlObj.tagname) {
                jPath += jPath ? "." + tagName : tagName;
              }
              if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
                let tagContent = "";
                if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                  if (tagName[tagName.length - 1] === "/") {
                    tagName = tagName.substr(0, tagName.length - 1);
                    jPath = jPath.substr(0, jPath.length - 1);
                    tagExp = tagName;
                  } else {
                    tagExp = tagExp.substr(0, tagExp.length - 1);
                  }
                  i7 = result.closeIndex;
                } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                  i7 = result.closeIndex;
                } else {
                  const result2 = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);
                  if (!result2)
                    throw new Error(`Unexpected end of ${rawTagName}`);
                  i7 = result2.i;
                  tagContent = result2.tagContent;
                }
                const childNode = new xmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                if (tagContent) {
                  tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
                }
                jPath = jPath.substr(0, jPath.lastIndexOf("."));
                childNode.add(this.options.textNodeName, tagContent);
                this.addChild(currentNode, childNode, jPath);
              } else {
                if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                  if (tagName[tagName.length - 1] === "/") {
                    tagName = tagName.substr(0, tagName.length - 1);
                    jPath = jPath.substr(0, jPath.length - 1);
                    tagExp = tagName;
                  } else {
                    tagExp = tagExp.substr(0, tagExp.length - 1);
                  }
                  if (this.options.transformTagName) {
                    tagName = this.options.transformTagName(tagName);
                  }
                  const childNode = new xmlNode(tagName);
                  if (tagName !== tagExp && attrExpPresent) {
                    childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                  }
                  this.addChild(currentNode, childNode, jPath);
                  jPath = jPath.substr(0, jPath.lastIndexOf("."));
                } else {
                  const childNode = new xmlNode(tagName);
                  this.tagsNodeStack.push(currentNode);
                  if (tagName !== tagExp && attrExpPresent) {
                    childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                  }
                  this.addChild(currentNode, childNode, jPath);
                  currentNode = childNode;
                }
                textData = "";
                i7 = closeIndex;
              }
            }
          } else {
            textData += xmlData[i7];
          }
        }
        return xmlObj.child;
      };
      function addChild(currentNode, childNode, jPath) {
        const result = this.options.updateTag(childNode.tagname, jPath, childNode[":@"]);
        if (result === false) {
        } else if (typeof result === "string") {
          childNode.tagname = result;
          currentNode.addChild(childNode);
        } else {
          currentNode.addChild(childNode);
        }
      }
      var replaceEntitiesValue = function(val2) {
        if (this.options.processEntities) {
          for (let entityName2 in this.docTypeEntities) {
            const entity = this.docTypeEntities[entityName2];
            val2 = val2.replace(entity.regx, entity.val);
          }
          for (let entityName2 in this.lastEntities) {
            const entity = this.lastEntities[entityName2];
            val2 = val2.replace(entity.regex, entity.val);
          }
          if (this.options.htmlEntities) {
            for (let entityName2 in this.htmlEntities) {
              const entity = this.htmlEntities[entityName2];
              val2 = val2.replace(entity.regex, entity.val);
            }
          }
          val2 = val2.replace(this.ampEntity.regex, this.ampEntity.val);
        }
        return val2;
      };
      function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
        if (textData) {
          if (isLeafNode === void 0)
            isLeafNode = Object.keys(currentNode.child).length === 0;
          textData = this.parseTextData(
            textData,
            currentNode.tagname,
            jPath,
            false,
            currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false,
            isLeafNode
          );
          if (textData !== void 0 && textData !== "")
            currentNode.add(this.options.textNodeName, textData);
          textData = "";
        }
        return textData;
      }
      function isItStopNode(stopNodes, jPath, currentTagName) {
        const allNodesExp = "*." + currentTagName;
        for (const stopNodePath in stopNodes) {
          const stopNodeExp = stopNodes[stopNodePath];
          if (allNodesExp === stopNodeExp || jPath === stopNodeExp)
            return true;
        }
        return false;
      }
      function tagExpWithClosingIndex(xmlData, i7, closingChar = ">") {
        let attrBoundary;
        let tagExp = "";
        for (let index = i7; index < xmlData.length; index++) {
          let ch = xmlData[index];
          if (attrBoundary) {
            if (ch === attrBoundary)
              attrBoundary = "";
          } else if (ch === '"' || ch === "'") {
            attrBoundary = ch;
          } else if (ch === closingChar[0]) {
            if (closingChar[1]) {
              if (xmlData[index + 1] === closingChar[1]) {
                return {
                  data: tagExp,
                  index
                };
              }
            } else {
              return {
                data: tagExp,
                index
              };
            }
          } else if (ch === "	") {
            ch = " ";
          }
          tagExp += ch;
        }
      }
      function findClosingIndex(xmlData, str8, i7, errMsg) {
        const closingIndex = xmlData.indexOf(str8, i7);
        if (closingIndex === -1) {
          throw new Error(errMsg);
        } else {
          return closingIndex + str8.length - 1;
        }
      }
      function readTagExp(xmlData, i7, removeNSPrefix, closingChar = ">") {
        const result = tagExpWithClosingIndex(xmlData, i7 + 1, closingChar);
        if (!result)
          return;
        let tagExp = result.data;
        const closeIndex = result.index;
        const separatorIndex = tagExp.search(/\s/);
        let tagName = tagExp;
        let attrExpPresent = true;
        if (separatorIndex !== -1) {
          tagName = tagExp.substring(0, separatorIndex);
          tagExp = tagExp.substring(separatorIndex + 1).trimStart();
        }
        const rawTagName = tagName;
        if (removeNSPrefix) {
          const colonIndex = tagName.indexOf(":");
          if (colonIndex !== -1) {
            tagName = tagName.substr(colonIndex + 1);
            attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
          }
        }
        return {
          tagName,
          tagExp,
          closeIndex,
          attrExpPresent,
          rawTagName
        };
      }
      function readStopNodeData(xmlData, tagName, i7) {
        const startIndex = i7;
        let openTagCount = 1;
        for (; i7 < xmlData.length; i7++) {
          if (xmlData[i7] === "<") {
            if (xmlData[i7 + 1] === "/") {
              const closeIndex = findClosingIndex(xmlData, ">", i7, `${tagName} is not closed`);
              let closeTagName = xmlData.substring(i7 + 2, closeIndex).trim();
              if (closeTagName === tagName) {
                openTagCount--;
                if (openTagCount === 0) {
                  return {
                    tagContent: xmlData.substring(startIndex, i7),
                    i: closeIndex
                  };
                }
              }
              i7 = closeIndex;
            } else if (xmlData[i7 + 1] === "?") {
              const closeIndex = findClosingIndex(xmlData, "?>", i7 + 1, "StopNode is not closed.");
              i7 = closeIndex;
            } else if (xmlData.substr(i7 + 1, 3) === "!--") {
              const closeIndex = findClosingIndex(xmlData, "-->", i7 + 3, "StopNode is not closed.");
              i7 = closeIndex;
            } else if (xmlData.substr(i7 + 1, 2) === "![") {
              const closeIndex = findClosingIndex(xmlData, "]]>", i7, "StopNode is not closed.") - 2;
              i7 = closeIndex;
            } else {
              const tagData = readTagExp(xmlData, i7, ">");
              if (tagData) {
                const openTagName = tagData && tagData.tagName;
                if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
                  openTagCount++;
                }
                i7 = tagData.closeIndex;
              }
            }
          }
        }
      }
      function parseValue(val2, shouldParse, options) {
        if (shouldParse && typeof val2 === "string") {
          const newval = val2.trim();
          if (newval === "true")
            return true;
          else if (newval === "false")
            return false;
          else
            return toNumber2(val2, options);
        } else {
          if (util.isExist(val2)) {
            return val2;
          } else {
            return "";
          }
        }
      }
      module.exports = OrderedObjParser;
    }
  });

  // ../../node_modules/fast-xml-parser/src/xmlparser/node2json.js
  var require_node2json = __commonJS({
    "../../node_modules/fast-xml-parser/src/xmlparser/node2json.js"(exports) {
      "use strict";
      function prettify(node, options) {
        return compress(node, options);
      }
      function compress(arr, options, jPath) {
        let text;
        const compressedObj = {};
        for (let i7 = 0; i7 < arr.length; i7++) {
          const tagObj = arr[i7];
          const property = propName(tagObj);
          let newJpath = "";
          if (jPath === void 0)
            newJpath = property;
          else
            newJpath = jPath + "." + property;
          if (property === options.textNodeName) {
            if (text === void 0)
              text = tagObj[property];
            else
              text += "" + tagObj[property];
          } else if (property === void 0) {
            continue;
          } else if (tagObj[property]) {
            let val2 = compress(tagObj[property], options, newJpath);
            const isLeaf = isLeafTag(val2, options);
            if (tagObj[":@"]) {
              assignAttributes(val2, tagObj[":@"], newJpath, options);
            } else if (Object.keys(val2).length === 1 && val2[options.textNodeName] !== void 0 && !options.alwaysCreateTextNode) {
              val2 = val2[options.textNodeName];
            } else if (Object.keys(val2).length === 0) {
              if (options.alwaysCreateTextNode)
                val2[options.textNodeName] = "";
              else
                val2 = "";
            }
            if (compressedObj[property] !== void 0 && compressedObj.hasOwnProperty(property)) {
              if (!Array.isArray(compressedObj[property])) {
                compressedObj[property] = [compressedObj[property]];
              }
              compressedObj[property].push(val2);
            } else {
              if (options.isArray(property, newJpath, isLeaf)) {
                compressedObj[property] = [val2];
              } else {
                compressedObj[property] = val2;
              }
            }
          }
        }
        if (typeof text === "string") {
          if (text.length > 0)
            compressedObj[options.textNodeName] = text;
        } else if (text !== void 0)
          compressedObj[options.textNodeName] = text;
        return compressedObj;
      }
      function propName(obj) {
        const keys = Object.keys(obj);
        for (let i7 = 0; i7 < keys.length; i7++) {
          const key = keys[i7];
          if (key !== ":@")
            return key;
        }
      }
      function assignAttributes(obj, attrMap, jpath, options) {
        if (attrMap) {
          const keys = Object.keys(attrMap);
          const len9 = keys.length;
          for (let i7 = 0; i7 < len9; i7++) {
            const atrrName = keys[i7];
            if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
              obj[atrrName] = [attrMap[atrrName]];
            } else {
              obj[atrrName] = attrMap[atrrName];
            }
          }
        }
      }
      function isLeafTag(obj, options) {
        const { textNodeName } = options;
        const propCount = Object.keys(obj).length;
        if (propCount === 0) {
          return true;
        }
        if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === "boolean" || obj[textNodeName] === 0)) {
          return true;
        }
        return false;
      }
      exports.prettify = prettify;
    }
  });

  // ../../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js
  var require_XMLParser = __commonJS({
    "../../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js"(exports, module) {
      var { buildOptions } = require_OptionsBuilder();
      var OrderedObjParser = require_OrderedObjParser();
      var { prettify } = require_node2json();
      var validator = require_validator();
      var XMLParser = class {
        constructor(options) {
          this.externalEntities = {};
          this.options = buildOptions(options);
        }
        /**
         * Parse XML dats to JS object 
         * @param {string|Buffer} xmlData 
         * @param {boolean|Object} validationOption 
         */
        parse(xmlData, validationOption) {
          if (typeof xmlData === "string") {
          } else if (xmlData.toString) {
            xmlData = xmlData.toString();
          } else {
            throw new Error("XML data is accepted in String or Bytes[] form.");
          }
          if (validationOption) {
            if (validationOption === true)
              validationOption = {};
            const result = validator.validate(xmlData, validationOption);
            if (result !== true) {
              throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
            }
          }
          const orderedObjParser = new OrderedObjParser(this.options);
          orderedObjParser.addExternalEntities(this.externalEntities);
          const orderedResult = orderedObjParser.parseXml(xmlData);
          if (this.options.preserveOrder || orderedResult === void 0)
            return orderedResult;
          else
            return prettify(orderedResult, this.options);
        }
        /**
         * Add Entity which is not by default supported by this library
         * @param {string} key 
         * @param {string} value 
         */
        addEntity(key, value) {
          if (value.indexOf("&") !== -1) {
            throw new Error("Entity value can't have '&'");
          } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
            throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
          } else if (value === "&") {
            throw new Error("An entity with value '&' is not permitted");
          } else {
            this.externalEntities[key] = value;
          }
        }
      };
      module.exports = XMLParser;
    }
  });

  // ../../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js
  var require_orderedJs2Xml = __commonJS({
    "../../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js"(exports, module) {
      var EOL = "\n";
      function toXml(jArray, options) {
        let indentation = "";
        if (options.format && options.indentBy.length > 0) {
          indentation = EOL;
        }
        return arrToStr(jArray, options, "", indentation);
      }
      function arrToStr(arr, options, jPath, indentation) {
        let xmlStr = "";
        let isPreviousElementTag = false;
        for (let i7 = 0; i7 < arr.length; i7++) {
          const tagObj = arr[i7];
          const tagName = propName(tagObj);
          if (tagName === void 0)
            continue;
          let newJPath = "";
          if (jPath.length === 0)
            newJPath = tagName;
          else
            newJPath = `${jPath}.${tagName}`;
          if (tagName === options.textNodeName) {
            let tagText = tagObj[tagName];
            if (!isStopNode(newJPath, options)) {
              tagText = options.tagValueProcessor(tagName, tagText);
              tagText = replaceEntitiesValue(tagText, options);
            }
            if (isPreviousElementTag) {
              xmlStr += indentation;
            }
            xmlStr += tagText;
            isPreviousElementTag = false;
            continue;
          } else if (tagName === options.cdataPropName) {
            if (isPreviousElementTag) {
              xmlStr += indentation;
            }
            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
            isPreviousElementTag = false;
            continue;
          } else if (tagName === options.commentPropName) {
            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
            isPreviousElementTag = true;
            continue;
          } else if (tagName[0] === "?") {
            const attStr2 = attr_to_str(tagObj[":@"], options);
            const tempInd = tagName === "?xml" ? "" : indentation;
            let piTextNodeName = tagObj[tagName][0][options.textNodeName];
            piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : "";
            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
            isPreviousElementTag = true;
            continue;
          }
          let newIdentation = indentation;
          if (newIdentation !== "") {
            newIdentation += options.indentBy;
          }
          const attStr = attr_to_str(tagObj[":@"], options);
          const tagStart = indentation + `<${tagName}${attStr}`;
          const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
          if (options.unpairedTags.indexOf(tagName) !== -1) {
            if (options.suppressUnpairedNode)
              xmlStr += tagStart + ">";
            else
              xmlStr += tagStart + "/>";
          } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {
            xmlStr += tagStart + "/>";
          } else if (tagValue && tagValue.endsWith(">")) {
            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
          } else {
            xmlStr += tagStart + ">";
            if (tagValue && indentation !== "" && (tagValue.includes("/>") || tagValue.includes("</"))) {
              xmlStr += indentation + options.indentBy + tagValue + indentation;
            } else {
              xmlStr += tagValue;
            }
            xmlStr += `</${tagName}>`;
          }
          isPreviousElementTag = true;
        }
        return xmlStr;
      }
      function propName(obj) {
        const keys = Object.keys(obj);
        for (let i7 = 0; i7 < keys.length; i7++) {
          const key = keys[i7];
          if (!obj.hasOwnProperty(key))
            continue;
          if (key !== ":@")
            return key;
        }
      }
      function attr_to_str(attrMap, options) {
        let attrStr = "";
        if (attrMap && !options.ignoreAttributes) {
          for (let attr in attrMap) {
            if (!attrMap.hasOwnProperty(attr))
              continue;
            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
            attrVal = replaceEntitiesValue(attrVal, options);
            if (attrVal === true && options.suppressBooleanAttributes) {
              attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
            } else {
              attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
            }
          }
        }
        return attrStr;
      }
      function isStopNode(jPath, options) {
        jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
        let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
        for (let index in options.stopNodes) {
          if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName)
            return true;
        }
        return false;
      }
      function replaceEntitiesValue(textValue, options) {
        if (textValue && textValue.length > 0 && options.processEntities) {
          for (let i7 = 0; i7 < options.entities.length; i7++) {
            const entity = options.entities[i7];
            textValue = textValue.replace(entity.regex, entity.val);
          }
        }
        return textValue;
      }
      module.exports = toXml;
    }
  });

  // ../../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js
  var require_json2xml = __commonJS({
    "../../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js"(exports, module) {
      "use strict";
      var buildFromOrderedJs = require_orderedJs2Xml();
      var defaultOptions4 = {
        attributeNamePrefix: "@_",
        attributesGroupName: false,
        textNodeName: "#text",
        ignoreAttributes: true,
        cdataPropName: false,
        format: false,
        indentBy: "  ",
        suppressEmptyNode: false,
        suppressUnpairedNode: true,
        suppressBooleanAttributes: true,
        tagValueProcessor: function(key, a6) {
          return a6;
        },
        attributeValueProcessor: function(attrName, a6) {
          return a6;
        },
        preserveOrder: false,
        commentPropName: false,
        unpairedTags: [],
        entities: [
          { regex: new RegExp("&", "g"), val: "&amp;" },
          //it must be on top
          { regex: new RegExp(">", "g"), val: "&gt;" },
          { regex: new RegExp("<", "g"), val: "&lt;" },
          { regex: new RegExp("'", "g"), val: "&apos;" },
          { regex: new RegExp('"', "g"), val: "&quot;" }
        ],
        processEntities: true,
        stopNodes: [],
        // transformTagName: false,
        // transformAttributeName: false,
        oneListGroup: false
      };
      function Builder(options) {
        this.options = Object.assign({}, defaultOptions4, options);
        if (this.options.ignoreAttributes || this.options.attributesGroupName) {
          this.isAttribute = function() {
            return false;
          };
        } else {
          this.attrPrefixLen = this.options.attributeNamePrefix.length;
          this.isAttribute = isAttribute;
        }
        this.processTextOrObjNode = processTextOrObjNode;
        if (this.options.format) {
          this.indentate = indentate;
          this.tagEndChar = ">\n";
          this.newLine = "\n";
        } else {
          this.indentate = function() {
            return "";
          };
          this.tagEndChar = ">";
          this.newLine = "";
        }
      }
      Builder.prototype.build = function(jObj) {
        if (this.options.preserveOrder) {
          return buildFromOrderedJs(jObj, this.options);
        } else {
          if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {
            jObj = {
              [this.options.arrayNodeName]: jObj
            };
          }
          return this.j2x(jObj, 0).val;
        }
      };
      Builder.prototype.j2x = function(jObj, level) {
        let attrStr = "";
        let val2 = "";
        for (let key in jObj) {
          if (!Object.prototype.hasOwnProperty.call(jObj, key))
            continue;
          if (typeof jObj[key] === "undefined") {
            if (this.isAttribute(key)) {
              val2 += "";
            }
          } else if (jObj[key] === null) {
            if (this.isAttribute(key)) {
              val2 += "";
            } else if (key[0] === "?") {
              val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
            } else {
              val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
            }
          } else if (jObj[key] instanceof Date) {
            val2 += this.buildTextValNode(jObj[key], key, "", level);
          } else if (typeof jObj[key] !== "object") {
            const attr = this.isAttribute(key);
            if (attr) {
              attrStr += this.buildAttrPairStr(attr, "" + jObj[key]);
            } else {
              if (key === this.options.textNodeName) {
                let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
                val2 += this.replaceEntitiesValue(newval);
              } else {
                val2 += this.buildTextValNode(jObj[key], key, "", level);
              }
            }
          } else if (Array.isArray(jObj[key])) {
            const arrLen = jObj[key].length;
            let listTagVal = "";
            let listTagAttr = "";
            for (let j4 = 0; j4 < arrLen; j4++) {
              const item = jObj[key][j4];
              if (typeof item === "undefined") {
              } else if (item === null) {
                if (key[0] === "?")
                  val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
                else
                  val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
              } else if (typeof item === "object") {
                if (this.options.oneListGroup) {
                  const result = this.j2x(item, level + 1);
                  listTagVal += result.val;
                  if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {
                    listTagAttr += result.attrStr;
                  }
                } else {
                  listTagVal += this.processTextOrObjNode(item, key, level);
                }
              } else {
                if (this.options.oneListGroup) {
                  let textValue = this.options.tagValueProcessor(key, item);
                  textValue = this.replaceEntitiesValue(textValue);
                  listTagVal += textValue;
                } else {
                  listTagVal += this.buildTextValNode(item, key, "", level);
                }
              }
            }
            if (this.options.oneListGroup) {
              listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);
            }
            val2 += listTagVal;
          } else {
            if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
              const Ks = Object.keys(jObj[key]);
              const L4 = Ks.length;
              for (let j4 = 0; j4 < L4; j4++) {
                attrStr += this.buildAttrPairStr(Ks[j4], "" + jObj[key][Ks[j4]]);
              }
            } else {
              val2 += this.processTextOrObjNode(jObj[key], key, level);
            }
          }
        }
        return { attrStr, val: val2 };
      };
      Builder.prototype.buildAttrPairStr = function(attrName, val2) {
        val2 = this.options.attributeValueProcessor(attrName, "" + val2);
        val2 = this.replaceEntitiesValue(val2);
        if (this.options.suppressBooleanAttributes && val2 === "true") {
          return " " + attrName;
        } else
          return " " + attrName + '="' + val2 + '"';
      };
      function processTextOrObjNode(object, key, level) {
        const result = this.j2x(object, level + 1);
        if (object[this.options.textNodeName] !== void 0 && Object.keys(object).length === 1) {
          return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);
        } else {
          return this.buildObjectNode(result.val, key, result.attrStr, level);
        }
      }
      Builder.prototype.buildObjectNode = function(val2, key, attrStr, level) {
        if (val2 === "") {
          if (key[0] === "?")
            return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
          else {
            return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
          }
        } else {
          let tagEndExp = "</" + key + this.tagEndChar;
          let piClosingChar = "";
          if (key[0] === "?") {
            piClosingChar = "?";
            tagEndExp = "";
          }
          if ((attrStr || attrStr === "") && val2.indexOf("<") === -1) {
            return this.indentate(level) + "<" + key + attrStr + piClosingChar + ">" + val2 + tagEndExp;
          } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
            return this.indentate(level) + `<!--${val2}-->` + this.newLine;
          } else {
            return this.indentate(level) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val2 + this.indentate(level) + tagEndExp;
          }
        }
      };
      Builder.prototype.closeTag = function(key) {
        let closeTag = "";
        if (this.options.unpairedTags.indexOf(key) !== -1) {
          if (!this.options.suppressUnpairedNode)
            closeTag = "/";
        } else if (this.options.suppressEmptyNode) {
          closeTag = "/";
        } else {
          closeTag = `></${key}`;
        }
        return closeTag;
      };
      Builder.prototype.buildTextValNode = function(val2, key, attrStr, level) {
        if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
          return this.indentate(level) + `<![CDATA[${val2}]]>` + this.newLine;
        } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
          return this.indentate(level) + `<!--${val2}-->` + this.newLine;
        } else if (key[0] === "?") {
          return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
        } else {
          let textValue = this.options.tagValueProcessor(key, val2);
          textValue = this.replaceEntitiesValue(textValue);
          if (textValue === "") {
            return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
          } else {
            return this.indentate(level) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
          }
        }
      };
      Builder.prototype.replaceEntitiesValue = function(textValue) {
        if (textValue && textValue.length > 0 && this.options.processEntities) {
          for (let i7 = 0; i7 < this.options.entities.length; i7++) {
            const entity = this.options.entities[i7];
            textValue = textValue.replace(entity.regex, entity.val);
          }
        }
        return textValue;
      };
      function indentate(level) {
        return this.options.indentBy.repeat(level);
      }
      function isAttribute(name13) {
        if (name13.startsWith(this.options.attributeNamePrefix) && name13 !== this.options.textNodeName) {
          return name13.substr(this.attrPrefixLen);
        } else {
          return false;
        }
      }
      module.exports = Builder;
    }
  });

  // ../../node_modules/fast-xml-parser/src/fxp.js
  var require_fxp = __commonJS({
    "../../node_modules/fast-xml-parser/src/fxp.js"(exports, module) {
      "use strict";
      var validator = require_validator();
      var XMLParser = require_XMLParser();
      var XMLBuilder = require_json2xml();
      module.exports = {
        XMLParser,
        XMLValidator: validator,
        XMLBuilder
      };
    }
  });

  // ../../node_modules/long/dist/long.js
  var require_long = __commonJS({
    "../../node_modules/long/dist/long.js"(exports, module) {
      (function(global2, factory) {
        if (typeof define === "function" && define["amd"])
          define([], factory);
        else if (typeof __require === "function" && typeof module === "object" && module && module["exports"])
          module["exports"] = factory();
        else
          (global2["dcodeIO"] = global2["dcodeIO"] || {})["Long"] = factory();
      })(exports, function() {
        "use strict";
        function Long4(low, high, unsigned) {
          this.low = low | 0;
          this.high = high | 0;
          this.unsigned = !!unsigned;
        }
        Long4.prototype.__isLong__;
        Object.defineProperty(Long4.prototype, "__isLong__", {
          value: true,
          enumerable: false,
          configurable: false
        });
        function isLong2(obj) {
          return (obj && obj["__isLong__"]) === true;
        }
        Long4.isLong = isLong2;
        var INT_CACHE2 = {};
        var UINT_CACHE2 = {};
        function fromInt2(value, unsigned) {
          var obj, cachedObj, cache3;
          if (unsigned) {
            value >>>= 0;
            if (cache3 = 0 <= value && value < 256) {
              cachedObj = UINT_CACHE2[value];
              if (cachedObj)
                return cachedObj;
            }
            obj = fromBits2(value, (value | 0) < 0 ? -1 : 0, true);
            if (cache3)
              UINT_CACHE2[value] = obj;
            return obj;
          } else {
            value |= 0;
            if (cache3 = -128 <= value && value < 128) {
              cachedObj = INT_CACHE2[value];
              if (cachedObj)
                return cachedObj;
            }
            obj = fromBits2(value, value < 0 ? -1 : 0, false);
            if (cache3)
              INT_CACHE2[value] = obj;
            return obj;
          }
        }
        Long4.fromInt = fromInt2;
        function fromNumber2(value, unsigned) {
          if (isNaN(value) || !isFinite(value))
            return unsigned ? UZERO2 : ZERO18;
          if (unsigned) {
            if (value < 0)
              return UZERO2;
            if (value >= TWO_PWR_64_DBL2)
              return MAX_UNSIGNED_VALUE2;
          } else {
            if (value <= -TWO_PWR_63_DBL2)
              return MIN_VALUE2;
            if (value + 1 >= TWO_PWR_63_DBL2)
              return MAX_VALUE2;
          }
          if (value < 0)
            return fromNumber2(-value, unsigned).neg();
          return fromBits2(value % TWO_PWR_32_DBL2 | 0, value / TWO_PWR_32_DBL2 | 0, unsigned);
        }
        Long4.fromNumber = fromNumber2;
        function fromBits2(lowBits, highBits, unsigned) {
          return new Long4(lowBits, highBits, unsigned);
        }
        Long4.fromBits = fromBits2;
        var pow_dbl2 = Math.pow;
        function fromString2(str8, unsigned, radix) {
          if (str8.length === 0)
            throw Error("empty string");
          if (str8 === "NaN" || str8 === "Infinity" || str8 === "+Infinity" || str8 === "-Infinity")
            return ZERO18;
          if (typeof unsigned === "number") {
            radix = unsigned, unsigned = false;
          } else {
            unsigned = !!unsigned;
          }
          radix = radix || 10;
          if (radix < 2 || 36 < radix)
            throw RangeError("radix");
          var p5;
          if ((p5 = str8.indexOf("-")) > 0)
            throw Error("interior hyphen");
          else if (p5 === 0) {
            return fromString2(str8.substring(1), unsigned, radix).neg();
          }
          var radixToPower = fromNumber2(pow_dbl2(radix, 8));
          var result = ZERO18;
          for (var i7 = 0; i7 < str8.length; i7 += 8) {
            var size = Math.min(8, str8.length - i7), value = parseInt(str8.substring(i7, i7 + size), radix);
            if (size < 8) {
              var power = fromNumber2(pow_dbl2(radix, size));
              result = result.mul(power).add(fromNumber2(value));
            } else {
              result = result.mul(radixToPower);
              result = result.add(fromNumber2(value));
            }
          }
          result.unsigned = unsigned;
          return result;
        }
        Long4.fromString = fromString2;
        function fromValue2(val2) {
          if (val2 instanceof Long4)
            return val2;
          if (typeof val2 === "number")
            return fromNumber2(val2);
          if (typeof val2 === "string")
            return fromString2(val2);
          return fromBits2(val2.low, val2.high, val2.unsigned);
        }
        Long4.fromValue = fromValue2;
        var TWO_PWR_16_DBL2 = 1 << 16;
        var TWO_PWR_24_DBL2 = 1 << 24;
        var TWO_PWR_32_DBL2 = TWO_PWR_16_DBL2 * TWO_PWR_16_DBL2;
        var TWO_PWR_64_DBL2 = TWO_PWR_32_DBL2 * TWO_PWR_32_DBL2;
        var TWO_PWR_63_DBL2 = TWO_PWR_64_DBL2 / 2;
        var TWO_PWR_242 = fromInt2(TWO_PWR_24_DBL2);
        var ZERO18 = fromInt2(0);
        Long4.ZERO = ZERO18;
        var UZERO2 = fromInt2(0, true);
        Long4.UZERO = UZERO2;
        var ONE2 = fromInt2(1);
        Long4.ONE = ONE2;
        var UONE2 = fromInt2(1, true);
        Long4.UONE = UONE2;
        var NEG_ONE2 = fromInt2(-1);
        Long4.NEG_ONE = NEG_ONE2;
        var MAX_VALUE2 = fromBits2(4294967295 | 0, 2147483647 | 0, false);
        Long4.MAX_VALUE = MAX_VALUE2;
        var MAX_UNSIGNED_VALUE2 = fromBits2(4294967295 | 0, 4294967295 | 0, true);
        Long4.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE2;
        var MIN_VALUE2 = fromBits2(0, 2147483648 | 0, false);
        Long4.MIN_VALUE = MIN_VALUE2;
        var LongPrototype2 = Long4.prototype;
        LongPrototype2.toInt = function toInt2() {
          return this.unsigned ? this.low >>> 0 : this.low;
        };
        LongPrototype2.toNumber = function toNumber2() {
          if (this.unsigned)
            return (this.high >>> 0) * TWO_PWR_32_DBL2 + (this.low >>> 0);
          return this.high * TWO_PWR_32_DBL2 + (this.low >>> 0);
        };
        LongPrototype2.toString = function toString2(radix) {
          radix = radix || 10;
          if (radix < 2 || 36 < radix)
            throw RangeError("radix");
          if (this.isZero())
            return "0";
          if (this.isNegative()) {
            if (this.eq(MIN_VALUE2)) {
              var radixLong = fromNumber2(radix), div6 = this.div(radixLong), rem1 = div6.mul(radixLong).sub(this);
              return div6.toString(radix) + rem1.toInt().toString(radix);
            } else
              return "-" + this.neg().toString(radix);
          }
          var radixToPower = fromNumber2(pow_dbl2(radix, 6), this.unsigned), rem = this;
          var result = "";
          while (true) {
            var remDiv = rem.div(radixToPower), intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0, digits = intval.toString(radix);
            rem = remDiv;
            if (rem.isZero())
              return digits + result;
            else {
              while (digits.length < 6)
                digits = "0" + digits;
              result = "" + digits + result;
            }
          }
        };
        LongPrototype2.getHighBits = function getHighBits2() {
          return this.high;
        };
        LongPrototype2.getHighBitsUnsigned = function getHighBitsUnsigned2() {
          return this.high >>> 0;
        };
        LongPrototype2.getLowBits = function getLowBits2() {
          return this.low;
        };
        LongPrototype2.getLowBitsUnsigned = function getLowBitsUnsigned2() {
          return this.low >>> 0;
        };
        LongPrototype2.getNumBitsAbs = function getNumBitsAbs2() {
          if (this.isNegative())
            return this.eq(MIN_VALUE2) ? 64 : this.neg().getNumBitsAbs();
          var val2 = this.high != 0 ? this.high : this.low;
          for (var bit = 31; bit > 0; bit--)
            if ((val2 & 1 << bit) != 0)
              break;
          return this.high != 0 ? bit + 33 : bit + 1;
        };
        LongPrototype2.isZero = function isZero2() {
          return this.high === 0 && this.low === 0;
        };
        LongPrototype2.isNegative = function isNegative2() {
          return !this.unsigned && this.high < 0;
        };
        LongPrototype2.isPositive = function isPositive2() {
          return this.unsigned || this.high >= 0;
        };
        LongPrototype2.isOdd = function isOdd2() {
          return (this.low & 1) === 1;
        };
        LongPrototype2.isEven = function isEven2() {
          return (this.low & 1) === 0;
        };
        LongPrototype2.equals = function equals17(other) {
          if (!isLong2(other))
            other = fromValue2(other);
          if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)
            return false;
          return this.high === other.high && this.low === other.low;
        };
        LongPrototype2.eq = LongPrototype2.equals;
        LongPrototype2.notEquals = function notEquals2(other) {
          return !this.eq(
            /* validates */
            other
          );
        };
        LongPrototype2.neq = LongPrototype2.notEquals;
        LongPrototype2.lessThan = function lessThan2(other) {
          return this.comp(
            /* validates */
            other
          ) < 0;
        };
        LongPrototype2.lt = LongPrototype2.lessThan;
        LongPrototype2.lessThanOrEqual = function lessThanOrEqual2(other) {
          return this.comp(
            /* validates */
            other
          ) <= 0;
        };
        LongPrototype2.lte = LongPrototype2.lessThanOrEqual;
        LongPrototype2.greaterThan = function greaterThan2(other) {
          return this.comp(
            /* validates */
            other
          ) > 0;
        };
        LongPrototype2.gt = LongPrototype2.greaterThan;
        LongPrototype2.greaterThanOrEqual = function greaterThanOrEqual2(other) {
          return this.comp(
            /* validates */
            other
          ) >= 0;
        };
        LongPrototype2.gte = LongPrototype2.greaterThanOrEqual;
        LongPrototype2.compare = function compare2(other) {
          if (!isLong2(other))
            other = fromValue2(other);
          if (this.eq(other))
            return 0;
          var thisNeg = this.isNegative(), otherNeg = other.isNegative();
          if (thisNeg && !otherNeg)
            return -1;
          if (!thisNeg && otherNeg)
            return 1;
          if (!this.unsigned)
            return this.sub(other).isNegative() ? -1 : 1;
          return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
        };
        LongPrototype2.comp = LongPrototype2.compare;
        LongPrototype2.negate = function negate7() {
          if (!this.unsigned && this.eq(MIN_VALUE2))
            return MIN_VALUE2;
          return this.not().add(ONE2);
        };
        LongPrototype2.neg = LongPrototype2.negate;
        LongPrototype2.add = function add17(addend) {
          if (!isLong2(addend))
            addend = fromValue2(addend);
          var a48 = this.high >>> 16;
          var a32 = this.high & 65535;
          var a16 = this.low >>> 16;
          var a00 = this.low & 65535;
          var b48 = addend.high >>> 16;
          var b32 = addend.high & 65535;
          var b16 = addend.low >>> 16;
          var b00 = addend.low & 65535;
          var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
          c00 += a00 + b00;
          c16 += c00 >>> 16;
          c00 &= 65535;
          c16 += a16 + b16;
          c32 += c16 >>> 16;
          c16 &= 65535;
          c32 += a32 + b32;
          c48 += c32 >>> 16;
          c32 &= 65535;
          c48 += a48 + b48;
          c48 &= 65535;
          return fromBits2(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
        };
        LongPrototype2.subtract = function subtract9(subtrahend) {
          if (!isLong2(subtrahend))
            subtrahend = fromValue2(subtrahend);
          return this.add(subtrahend.neg());
        };
        LongPrototype2.sub = LongPrototype2.subtract;
        LongPrototype2.multiply = function multiply21(multiplier) {
          if (this.isZero())
            return ZERO18;
          if (!isLong2(multiplier))
            multiplier = fromValue2(multiplier);
          if (multiplier.isZero())
            return ZERO18;
          if (this.eq(MIN_VALUE2))
            return multiplier.isOdd() ? MIN_VALUE2 : ZERO18;
          if (multiplier.eq(MIN_VALUE2))
            return this.isOdd() ? MIN_VALUE2 : ZERO18;
          if (this.isNegative()) {
            if (multiplier.isNegative())
              return this.neg().mul(multiplier.neg());
            else
              return this.neg().mul(multiplier).neg();
          } else if (multiplier.isNegative())
            return this.mul(multiplier.neg()).neg();
          if (this.lt(TWO_PWR_242) && multiplier.lt(TWO_PWR_242))
            return fromNumber2(this.toNumber() * multiplier.toNumber(), this.unsigned);
          var a48 = this.high >>> 16;
          var a32 = this.high & 65535;
          var a16 = this.low >>> 16;
          var a00 = this.low & 65535;
          var b48 = multiplier.high >>> 16;
          var b32 = multiplier.high & 65535;
          var b16 = multiplier.low >>> 16;
          var b00 = multiplier.low & 65535;
          var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
          c00 += a00 * b00;
          c16 += c00 >>> 16;
          c00 &= 65535;
          c16 += a16 * b00;
          c32 += c16 >>> 16;
          c16 &= 65535;
          c16 += a00 * b16;
          c32 += c16 >>> 16;
          c16 &= 65535;
          c32 += a32 * b00;
          c48 += c32 >>> 16;
          c32 &= 65535;
          c32 += a16 * b16;
          c48 += c32 >>> 16;
          c32 &= 65535;
          c32 += a00 * b32;
          c48 += c32 >>> 16;
          c32 &= 65535;
          c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
          c48 &= 65535;
          return fromBits2(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
        };
        LongPrototype2.mul = LongPrototype2.multiply;
        LongPrototype2.divide = function divide7(divisor) {
          if (!isLong2(divisor))
            divisor = fromValue2(divisor);
          if (divisor.isZero())
            throw Error("division by zero");
          if (this.isZero())
            return this.unsigned ? UZERO2 : ZERO18;
          var approx, rem, res;
          if (!this.unsigned) {
            if (this.eq(MIN_VALUE2)) {
              if (divisor.eq(ONE2) || divisor.eq(NEG_ONE2))
                return MIN_VALUE2;
              else if (divisor.eq(MIN_VALUE2))
                return ONE2;
              else {
                var halfThis = this.shr(1);
                approx = halfThis.div(divisor).shl(1);
                if (approx.eq(ZERO18)) {
                  return divisor.isNegative() ? ONE2 : NEG_ONE2;
                } else {
                  rem = this.sub(divisor.mul(approx));
                  res = approx.add(rem.div(divisor));
                  return res;
                }
              }
            } else if (divisor.eq(MIN_VALUE2))
              return this.unsigned ? UZERO2 : ZERO18;
            if (this.isNegative()) {
              if (divisor.isNegative())
                return this.neg().div(divisor.neg());
              return this.neg().div(divisor).neg();
            } else if (divisor.isNegative())
              return this.div(divisor.neg()).neg();
            res = ZERO18;
          } else {
            if (!divisor.unsigned)
              divisor = divisor.toUnsigned();
            if (divisor.gt(this))
              return UZERO2;
            if (divisor.gt(this.shru(1)))
              return UONE2;
            res = UZERO2;
          }
          rem = this;
          while (rem.gte(divisor)) {
            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
            var log23 = Math.ceil(Math.log(approx) / Math.LN2), delta = log23 <= 48 ? 1 : pow_dbl2(2, log23 - 48), approxRes = fromNumber2(approx), approxRem = approxRes.mul(divisor);
            while (approxRem.isNegative() || approxRem.gt(rem)) {
              approx -= delta;
              approxRes = fromNumber2(approx, this.unsigned);
              approxRem = approxRes.mul(divisor);
            }
            if (approxRes.isZero())
              approxRes = ONE2;
            res = res.add(approxRes);
            rem = rem.sub(approxRem);
          }
          return res;
        };
        LongPrototype2.div = LongPrototype2.divide;
        LongPrototype2.modulo = function modulo2(divisor) {
          if (!isLong2(divisor))
            divisor = fromValue2(divisor);
          return this.sub(this.div(divisor).mul(divisor));
        };
        LongPrototype2.mod = LongPrototype2.modulo;
        LongPrototype2.not = function not2() {
          return fromBits2(~this.low, ~this.high, this.unsigned);
        };
        LongPrototype2.and = function and2(other) {
          if (!isLong2(other))
            other = fromValue2(other);
          return fromBits2(this.low & other.low, this.high & other.high, this.unsigned);
        };
        LongPrototype2.or = function or2(other) {
          if (!isLong2(other))
            other = fromValue2(other);
          return fromBits2(this.low | other.low, this.high | other.high, this.unsigned);
        };
        LongPrototype2.xor = function xor2(other) {
          if (!isLong2(other))
            other = fromValue2(other);
          return fromBits2(this.low ^ other.low, this.high ^ other.high, this.unsigned);
        };
        LongPrototype2.shiftLeft = function shiftLeft3(numBits) {
          if (isLong2(numBits))
            numBits = numBits.toInt();
          if ((numBits &= 63) === 0)
            return this;
          else if (numBits < 32)
            return fromBits2(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);
          else
            return fromBits2(0, this.low << numBits - 32, this.unsigned);
        };
        LongPrototype2.shl = LongPrototype2.shiftLeft;
        LongPrototype2.shiftRight = function shiftRight3(numBits) {
          if (isLong2(numBits))
            numBits = numBits.toInt();
          if ((numBits &= 63) === 0)
            return this;
          else if (numBits < 32)
            return fromBits2(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);
          else
            return fromBits2(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
        };
        LongPrototype2.shr = LongPrototype2.shiftRight;
        LongPrototype2.shiftRightUnsigned = function shiftRightUnsigned2(numBits) {
          if (isLong2(numBits))
            numBits = numBits.toInt();
          numBits &= 63;
          if (numBits === 0)
            return this;
          else {
            var high = this.high;
            if (numBits < 32) {
              var low = this.low;
              return fromBits2(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);
            } else if (numBits === 32)
              return fromBits2(high, 0, this.unsigned);
            else
              return fromBits2(high >>> numBits - 32, 0, this.unsigned);
          }
        };
        LongPrototype2.shru = LongPrototype2.shiftRightUnsigned;
        LongPrototype2.toSigned = function toSigned2() {
          if (!this.unsigned)
            return this;
          return fromBits2(this.low, this.high, false);
        };
        LongPrototype2.toUnsigned = function toUnsigned2() {
          if (this.unsigned)
            return this;
          return fromBits2(this.low, this.high, true);
        };
        LongPrototype2.toBytes = function(le2) {
          return le2 ? this.toBytesLE() : this.toBytesBE();
        };
        LongPrototype2.toBytesLE = function() {
          var hi = this.high, lo = this.low;
          return [
            lo & 255,
            lo >>> 8 & 255,
            lo >>> 16 & 255,
            lo >>> 24 & 255,
            hi & 255,
            hi >>> 8 & 255,
            hi >>> 16 & 255,
            hi >>> 24 & 255
          ];
        };
        LongPrototype2.toBytesBE = function() {
          var hi = this.high, lo = this.low;
          return [
            hi >>> 24 & 255,
            hi >>> 16 & 255,
            hi >>> 8 & 255,
            hi & 255,
            lo >>> 24 & 255,
            lo >>> 16 & 255,
            lo >>> 8 & 255,
            lo & 255
          ];
        };
        return Long4;
      });
    }
  });

  // ../../node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    "../../node_modules/ieee754/index.js"(exports) {
      exports.read = function(buffer, offset, isLE, mLen, nBytes) {
        var e6, m3;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i7 = isLE ? nBytes - 1 : 0;
        var d5 = isLE ? -1 : 1;
        var s5 = buffer[offset + i7];
        i7 += d5;
        e6 = s5 & (1 << -nBits) - 1;
        s5 >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e6 = e6 * 256 + buffer[offset + i7], i7 += d5, nBits -= 8) {
        }
        m3 = e6 & (1 << -nBits) - 1;
        e6 >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m3 = m3 * 256 + buffer[offset + i7], i7 += d5, nBits -= 8) {
        }
        if (e6 === 0) {
          e6 = 1 - eBias;
        } else if (e6 === eMax) {
          return m3 ? NaN : (s5 ? -1 : 1) * Infinity;
        } else {
          m3 = m3 + Math.pow(2, mLen);
          e6 = e6 - eBias;
        }
        return (s5 ? -1 : 1) * m3 * Math.pow(2, e6 - mLen);
      };
      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
        var e6, m3, c5;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt2 = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i7 = isLE ? 0 : nBytes - 1;
        var d5 = isLE ? 1 : -1;
        var s5 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
          m3 = isNaN(value) ? 1 : 0;
          e6 = eMax;
        } else {
          e6 = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c5 = Math.pow(2, -e6)) < 1) {
            e6--;
            c5 *= 2;
          }
          if (e6 + eBias >= 1) {
            value += rt2 / c5;
          } else {
            value += rt2 * Math.pow(2, 1 - eBias);
          }
          if (value * c5 >= 2) {
            e6++;
            c5 /= 2;
          }
          if (e6 + eBias >= eMax) {
            m3 = 0;
            e6 = eMax;
          } else if (e6 + eBias >= 1) {
            m3 = (value * c5 - 1) * Math.pow(2, mLen);
            e6 = e6 + eBias;
          } else {
            m3 = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e6 = 0;
          }
        }
        for (; mLen >= 8; buffer[offset + i7] = m3 & 255, i7 += d5, m3 /= 256, mLen -= 8) {
        }
        e6 = e6 << mLen | m3;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i7] = e6 & 255, i7 += d5, e6 /= 256, eLen -= 8) {
        }
        buffer[offset + i7 - d5] |= s5 * 128;
      };
    }
  });

  // ../../node_modules/pbf/index.js
  var require_pbf = __commonJS({
    "../../node_modules/pbf/index.js"(exports, module) {
      "use strict";
      module.exports = Pbf;
      var ieee754 = require_ieee754();
      function Pbf(buf) {
        this.buf = ArrayBuffer.isView && ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf || 0);
        this.pos = 0;
        this.type = 0;
        this.length = this.buf.length;
      }
      Pbf.Varint = 0;
      Pbf.Fixed64 = 1;
      Pbf.Bytes = 2;
      Pbf.Fixed32 = 5;
      var SHIFT_LEFT_32 = (1 << 16) * (1 << 16);
      var SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;
      var TEXT_DECODER_MIN_LENGTH = 12;
      var utf8TextDecoder = typeof TextDecoder === "undefined" ? null : new TextDecoder("utf-8");
      Pbf.prototype = {
        destroy: function() {
          this.buf = null;
        },
        // === READING =================================================================
        readFields: function(readField, result, end) {
          end = end || this.length;
          while (this.pos < end) {
            var val2 = this.readVarint(), tag = val2 >> 3, startPos = this.pos;
            this.type = val2 & 7;
            readField(tag, result, this);
            if (this.pos === startPos)
              this.skip(val2);
          }
          return result;
        },
        readMessage: function(readField, result) {
          return this.readFields(readField, result, this.readVarint() + this.pos);
        },
        readFixed32: function() {
          var val2 = readUInt32(this.buf, this.pos);
          this.pos += 4;
          return val2;
        },
        readSFixed32: function() {
          var val2 = readInt32(this.buf, this.pos);
          this.pos += 4;
          return val2;
        },
        // 64-bit int handling is based on github.com/dpw/node-buffer-more-ints (MIT-licensed)
        readFixed64: function() {
          var val2 = readUInt32(this.buf, this.pos) + readUInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
          this.pos += 8;
          return val2;
        },
        readSFixed64: function() {
          var val2 = readUInt32(this.buf, this.pos) + readInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
          this.pos += 8;
          return val2;
        },
        readFloat: function() {
          var val2 = ieee754.read(this.buf, this.pos, true, 23, 4);
          this.pos += 4;
          return val2;
        },
        readDouble: function() {
          var val2 = ieee754.read(this.buf, this.pos, true, 52, 8);
          this.pos += 8;
          return val2;
        },
        readVarint: function(isSigned) {
          var buf = this.buf, val2, b4;
          b4 = buf[this.pos++];
          val2 = b4 & 127;
          if (b4 < 128)
            return val2;
          b4 = buf[this.pos++];
          val2 |= (b4 & 127) << 7;
          if (b4 < 128)
            return val2;
          b4 = buf[this.pos++];
          val2 |= (b4 & 127) << 14;
          if (b4 < 128)
            return val2;
          b4 = buf[this.pos++];
          val2 |= (b4 & 127) << 21;
          if (b4 < 128)
            return val2;
          b4 = buf[this.pos];
          val2 |= (b4 & 15) << 28;
          return readVarintRemainder(val2, isSigned, this);
        },
        readVarint64: function() {
          return this.readVarint(true);
        },
        readSVarint: function() {
          var num = this.readVarint();
          return num % 2 === 1 ? (num + 1) / -2 : num / 2;
        },
        readBoolean: function() {
          return Boolean(this.readVarint());
        },
        readString: function() {
          var end = this.readVarint() + this.pos;
          var pos = this.pos;
          this.pos = end;
          if (end - pos >= TEXT_DECODER_MIN_LENGTH && utf8TextDecoder) {
            return readUtf8TextDecoder(this.buf, pos, end);
          }
          return readUtf8(this.buf, pos, end);
        },
        readBytes: function() {
          var end = this.readVarint() + this.pos, buffer = this.buf.subarray(this.pos, end);
          this.pos = end;
          return buffer;
        },
        // verbose for performance reasons; doesn't affect gzipped size
        readPackedVarint: function(arr, isSigned) {
          if (this.type !== Pbf.Bytes)
            return arr.push(this.readVarint(isSigned));
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end)
            arr.push(this.readVarint(isSigned));
          return arr;
        },
        readPackedSVarint: function(arr) {
          if (this.type !== Pbf.Bytes)
            return arr.push(this.readSVarint());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end)
            arr.push(this.readSVarint());
          return arr;
        },
        readPackedBoolean: function(arr) {
          if (this.type !== Pbf.Bytes)
            return arr.push(this.readBoolean());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end)
            arr.push(this.readBoolean());
          return arr;
        },
        readPackedFloat: function(arr) {
          if (this.type !== Pbf.Bytes)
            return arr.push(this.readFloat());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end)
            arr.push(this.readFloat());
          return arr;
        },
        readPackedDouble: function(arr) {
          if (this.type !== Pbf.Bytes)
            return arr.push(this.readDouble());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end)
            arr.push(this.readDouble());
          return arr;
        },
        readPackedFixed32: function(arr) {
          if (this.type !== Pbf.Bytes)
            return arr.push(this.readFixed32());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end)
            arr.push(this.readFixed32());
          return arr;
        },
        readPackedSFixed32: function(arr) {
          if (this.type !== Pbf.Bytes)
            return arr.push(this.readSFixed32());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end)
            arr.push(this.readSFixed32());
          return arr;
        },
        readPackedFixed64: function(arr) {
          if (this.type !== Pbf.Bytes)
            return arr.push(this.readFixed64());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end)
            arr.push(this.readFixed64());
          return arr;
        },
        readPackedSFixed64: function(arr) {
          if (this.type !== Pbf.Bytes)
            return arr.push(this.readSFixed64());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end)
            arr.push(this.readSFixed64());
          return arr;
        },
        skip: function(val2) {
          var type = val2 & 7;
          if (type === Pbf.Varint)
            while (this.buf[this.pos++] > 127) {
            }
          else if (type === Pbf.Bytes)
            this.pos = this.readVarint() + this.pos;
          else if (type === Pbf.Fixed32)
            this.pos += 4;
          else if (type === Pbf.Fixed64)
            this.pos += 8;
          else
            throw new Error("Unimplemented type: " + type);
        },
        // === WRITING =================================================================
        writeTag: function(tag, type) {
          this.writeVarint(tag << 3 | type);
        },
        realloc: function(min7) {
          var length17 = this.length || 16;
          while (length17 < this.pos + min7)
            length17 *= 2;
          if (length17 !== this.length) {
            var buf = new Uint8Array(length17);
            buf.set(this.buf);
            this.buf = buf;
            this.length = length17;
          }
        },
        finish: function() {
          this.length = this.pos;
          this.pos = 0;
          return this.buf.subarray(0, this.length);
        },
        writeFixed32: function(val2) {
          this.realloc(4);
          writeInt32(this.buf, val2, this.pos);
          this.pos += 4;
        },
        writeSFixed32: function(val2) {
          this.realloc(4);
          writeInt32(this.buf, val2, this.pos);
          this.pos += 4;
        },
        writeFixed64: function(val2) {
          this.realloc(8);
          writeInt32(this.buf, val2 & -1, this.pos);
          writeInt32(this.buf, Math.floor(val2 * SHIFT_RIGHT_32), this.pos + 4);
          this.pos += 8;
        },
        writeSFixed64: function(val2) {
          this.realloc(8);
          writeInt32(this.buf, val2 & -1, this.pos);
          writeInt32(this.buf, Math.floor(val2 * SHIFT_RIGHT_32), this.pos + 4);
          this.pos += 8;
        },
        writeVarint: function(val2) {
          val2 = +val2 || 0;
          if (val2 > 268435455 || val2 < 0) {
            writeBigVarint(val2, this);
            return;
          }
          this.realloc(4);
          this.buf[this.pos++] = val2 & 127 | (val2 > 127 ? 128 : 0);
          if (val2 <= 127)
            return;
          this.buf[this.pos++] = (val2 >>>= 7) & 127 | (val2 > 127 ? 128 : 0);
          if (val2 <= 127)
            return;
          this.buf[this.pos++] = (val2 >>>= 7) & 127 | (val2 > 127 ? 128 : 0);
          if (val2 <= 127)
            return;
          this.buf[this.pos++] = val2 >>> 7 & 127;
        },
        writeSVarint: function(val2) {
          this.writeVarint(val2 < 0 ? -val2 * 2 - 1 : val2 * 2);
        },
        writeBoolean: function(val2) {
          this.writeVarint(Boolean(val2));
        },
        writeString: function(str8) {
          str8 = String(str8);
          this.realloc(str8.length * 4);
          this.pos++;
          var startPos = this.pos;
          this.pos = writeUtf8(this.buf, str8, this.pos);
          var len9 = this.pos - startPos;
          if (len9 >= 128)
            makeRoomForExtraLength(startPos, len9, this);
          this.pos = startPos - 1;
          this.writeVarint(len9);
          this.pos += len9;
        },
        writeFloat: function(val2) {
          this.realloc(4);
          ieee754.write(this.buf, val2, this.pos, true, 23, 4);
          this.pos += 4;
        },
        writeDouble: function(val2) {
          this.realloc(8);
          ieee754.write(this.buf, val2, this.pos, true, 52, 8);
          this.pos += 8;
        },
        writeBytes: function(buffer) {
          var len9 = buffer.length;
          this.writeVarint(len9);
          this.realloc(len9);
          for (var i7 = 0; i7 < len9; i7++)
            this.buf[this.pos++] = buffer[i7];
        },
        writeRawMessage: function(fn, obj) {
          this.pos++;
          var startPos = this.pos;
          fn(obj, this);
          var len9 = this.pos - startPos;
          if (len9 >= 128)
            makeRoomForExtraLength(startPos, len9, this);
          this.pos = startPos - 1;
          this.writeVarint(len9);
          this.pos += len9;
        },
        writeMessage: function(tag, fn, obj) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeRawMessage(fn, obj);
        },
        writePackedVarint: function(tag, arr) {
          if (arr.length)
            this.writeMessage(tag, writePackedVarint, arr);
        },
        writePackedSVarint: function(tag, arr) {
          if (arr.length)
            this.writeMessage(tag, writePackedSVarint, arr);
        },
        writePackedBoolean: function(tag, arr) {
          if (arr.length)
            this.writeMessage(tag, writePackedBoolean, arr);
        },
        writePackedFloat: function(tag, arr) {
          if (arr.length)
            this.writeMessage(tag, writePackedFloat, arr);
        },
        writePackedDouble: function(tag, arr) {
          if (arr.length)
            this.writeMessage(tag, writePackedDouble, arr);
        },
        writePackedFixed32: function(tag, arr) {
          if (arr.length)
            this.writeMessage(tag, writePackedFixed32, arr);
        },
        writePackedSFixed32: function(tag, arr) {
          if (arr.length)
            this.writeMessage(tag, writePackedSFixed32, arr);
        },
        writePackedFixed64: function(tag, arr) {
          if (arr.length)
            this.writeMessage(tag, writePackedFixed64, arr);
        },
        writePackedSFixed64: function(tag, arr) {
          if (arr.length)
            this.writeMessage(tag, writePackedSFixed64, arr);
        },
        writeBytesField: function(tag, buffer) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeBytes(buffer);
        },
        writeFixed32Field: function(tag, val2) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeFixed32(val2);
        },
        writeSFixed32Field: function(tag, val2) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeSFixed32(val2);
        },
        writeFixed64Field: function(tag, val2) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeFixed64(val2);
        },
        writeSFixed64Field: function(tag, val2) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeSFixed64(val2);
        },
        writeVarintField: function(tag, val2) {
          this.writeTag(tag, Pbf.Varint);
          this.writeVarint(val2);
        },
        writeSVarintField: function(tag, val2) {
          this.writeTag(tag, Pbf.Varint);
          this.writeSVarint(val2);
        },
        writeStringField: function(tag, str8) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeString(str8);
        },
        writeFloatField: function(tag, val2) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeFloat(val2);
        },
        writeDoubleField: function(tag, val2) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeDouble(val2);
        },
        writeBooleanField: function(tag, val2) {
          this.writeVarintField(tag, Boolean(val2));
        }
      };
      function readVarintRemainder(l5, s5, p5) {
        var buf = p5.buf, h5, b4;
        b4 = buf[p5.pos++];
        h5 = (b4 & 112) >> 4;
        if (b4 < 128)
          return toNum(l5, h5, s5);
        b4 = buf[p5.pos++];
        h5 |= (b4 & 127) << 3;
        if (b4 < 128)
          return toNum(l5, h5, s5);
        b4 = buf[p5.pos++];
        h5 |= (b4 & 127) << 10;
        if (b4 < 128)
          return toNum(l5, h5, s5);
        b4 = buf[p5.pos++];
        h5 |= (b4 & 127) << 17;
        if (b4 < 128)
          return toNum(l5, h5, s5);
        b4 = buf[p5.pos++];
        h5 |= (b4 & 127) << 24;
        if (b4 < 128)
          return toNum(l5, h5, s5);
        b4 = buf[p5.pos++];
        h5 |= (b4 & 1) << 31;
        if (b4 < 128)
          return toNum(l5, h5, s5);
        throw new Error("Expected varint not more than 10 bytes");
      }
      function readPackedEnd(pbf) {
        return pbf.type === Pbf.Bytes ? pbf.readVarint() + pbf.pos : pbf.pos + 1;
      }
      function toNum(low, high, isSigned) {
        if (isSigned) {
          return high * 4294967296 + (low >>> 0);
        }
        return (high >>> 0) * 4294967296 + (low >>> 0);
      }
      function writeBigVarint(val2, pbf) {
        var low, high;
        if (val2 >= 0) {
          low = val2 % 4294967296 | 0;
          high = val2 / 4294967296 | 0;
        } else {
          low = ~(-val2 % 4294967296);
          high = ~(-val2 / 4294967296);
          if (low ^ 4294967295) {
            low = low + 1 | 0;
          } else {
            low = 0;
            high = high + 1 | 0;
          }
        }
        if (val2 >= 18446744073709552e3 || val2 < -18446744073709552e3) {
          throw new Error("Given varint doesn't fit into 10 bytes");
        }
        pbf.realloc(10);
        writeBigVarintLow(low, high, pbf);
        writeBigVarintHigh(high, pbf);
      }
      function writeBigVarintLow(low, high, pbf) {
        pbf.buf[pbf.pos++] = low & 127 | 128;
        low >>>= 7;
        pbf.buf[pbf.pos++] = low & 127 | 128;
        low >>>= 7;
        pbf.buf[pbf.pos++] = low & 127 | 128;
        low >>>= 7;
        pbf.buf[pbf.pos++] = low & 127 | 128;
        low >>>= 7;
        pbf.buf[pbf.pos] = low & 127;
      }
      function writeBigVarintHigh(high, pbf) {
        var lsb2 = (high & 7) << 4;
        pbf.buf[pbf.pos++] |= lsb2 | ((high >>>= 3) ? 128 : 0);
        if (!high)
          return;
        pbf.buf[pbf.pos++] = high & 127 | ((high >>>= 7) ? 128 : 0);
        if (!high)
          return;
        pbf.buf[pbf.pos++] = high & 127 | ((high >>>= 7) ? 128 : 0);
        if (!high)
          return;
        pbf.buf[pbf.pos++] = high & 127 | ((high >>>= 7) ? 128 : 0);
        if (!high)
          return;
        pbf.buf[pbf.pos++] = high & 127 | ((high >>>= 7) ? 128 : 0);
        if (!high)
          return;
        pbf.buf[pbf.pos++] = high & 127;
      }
      function makeRoomForExtraLength(startPos, len9, pbf) {
        var extraLen = len9 <= 16383 ? 1 : len9 <= 2097151 ? 2 : len9 <= 268435455 ? 3 : Math.floor(Math.log(len9) / (Math.LN2 * 7));
        pbf.realloc(extraLen);
        for (var i7 = pbf.pos - 1; i7 >= startPos; i7--)
          pbf.buf[i7 + extraLen] = pbf.buf[i7];
      }
      function writePackedVarint(arr, pbf) {
        for (var i7 = 0; i7 < arr.length; i7++)
          pbf.writeVarint(arr[i7]);
      }
      function writePackedSVarint(arr, pbf) {
        for (var i7 = 0; i7 < arr.length; i7++)
          pbf.writeSVarint(arr[i7]);
      }
      function writePackedFloat(arr, pbf) {
        for (var i7 = 0; i7 < arr.length; i7++)
          pbf.writeFloat(arr[i7]);
      }
      function writePackedDouble(arr, pbf) {
        for (var i7 = 0; i7 < arr.length; i7++)
          pbf.writeDouble(arr[i7]);
      }
      function writePackedBoolean(arr, pbf) {
        for (var i7 = 0; i7 < arr.length; i7++)
          pbf.writeBoolean(arr[i7]);
      }
      function writePackedFixed32(arr, pbf) {
        for (var i7 = 0; i7 < arr.length; i7++)
          pbf.writeFixed32(arr[i7]);
      }
      function writePackedSFixed32(arr, pbf) {
        for (var i7 = 0; i7 < arr.length; i7++)
          pbf.writeSFixed32(arr[i7]);
      }
      function writePackedFixed64(arr, pbf) {
        for (var i7 = 0; i7 < arr.length; i7++)
          pbf.writeFixed64(arr[i7]);
      }
      function writePackedSFixed64(arr, pbf) {
        for (var i7 = 0; i7 < arr.length; i7++)
          pbf.writeSFixed64(arr[i7]);
      }
      function readUInt32(buf, pos) {
        return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16) + buf[pos + 3] * 16777216;
      }
      function writeInt32(buf, val2, pos) {
        buf[pos] = val2;
        buf[pos + 1] = val2 >>> 8;
        buf[pos + 2] = val2 >>> 16;
        buf[pos + 3] = val2 >>> 24;
      }
      function readInt32(buf, pos) {
        return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16) + (buf[pos + 3] << 24);
      }
      function readUtf8(buf, pos, end) {
        var str8 = "";
        var i7 = pos;
        while (i7 < end) {
          var b0 = buf[i7];
          var c5 = null;
          var bytesPerSequence = b0 > 239 ? 4 : b0 > 223 ? 3 : b0 > 191 ? 2 : 1;
          if (i7 + bytesPerSequence > end)
            break;
          var b1, b22, b32;
          if (bytesPerSequence === 1) {
            if (b0 < 128) {
              c5 = b0;
            }
          } else if (bytesPerSequence === 2) {
            b1 = buf[i7 + 1];
            if ((b1 & 192) === 128) {
              c5 = (b0 & 31) << 6 | b1 & 63;
              if (c5 <= 127) {
                c5 = null;
              }
            }
          } else if (bytesPerSequence === 3) {
            b1 = buf[i7 + 1];
            b22 = buf[i7 + 2];
            if ((b1 & 192) === 128 && (b22 & 192) === 128) {
              c5 = (b0 & 15) << 12 | (b1 & 63) << 6 | b22 & 63;
              if (c5 <= 2047 || c5 >= 55296 && c5 <= 57343) {
                c5 = null;
              }
            }
          } else if (bytesPerSequence === 4) {
            b1 = buf[i7 + 1];
            b22 = buf[i7 + 2];
            b32 = buf[i7 + 3];
            if ((b1 & 192) === 128 && (b22 & 192) === 128 && (b32 & 192) === 128) {
              c5 = (b0 & 15) << 18 | (b1 & 63) << 12 | (b22 & 63) << 6 | b32 & 63;
              if (c5 <= 65535 || c5 >= 1114112) {
                c5 = null;
              }
            }
          }
          if (c5 === null) {
            c5 = 65533;
            bytesPerSequence = 1;
          } else if (c5 > 65535) {
            c5 -= 65536;
            str8 += String.fromCharCode(c5 >>> 10 & 1023 | 55296);
            c5 = 56320 | c5 & 1023;
          }
          str8 += String.fromCharCode(c5);
          i7 += bytesPerSequence;
        }
        return str8;
      }
      function readUtf8TextDecoder(buf, pos, end) {
        return utf8TextDecoder.decode(buf.subarray(pos, end));
      }
      function writeUtf8(buf, str8, pos) {
        for (var i7 = 0, c5, lead; i7 < str8.length; i7++) {
          c5 = str8.charCodeAt(i7);
          if (c5 > 55295 && c5 < 57344) {
            if (lead) {
              if (c5 < 56320) {
                buf[pos++] = 239;
                buf[pos++] = 191;
                buf[pos++] = 189;
                lead = c5;
                continue;
              } else {
                c5 = lead - 55296 << 10 | c5 - 56320 | 65536;
                lead = null;
              }
            } else {
              if (c5 > 56319 || i7 + 1 === str8.length) {
                buf[pos++] = 239;
                buf[pos++] = 191;
                buf[pos++] = 189;
              } else {
                lead = c5;
              }
              continue;
            }
          } else if (lead) {
            buf[pos++] = 239;
            buf[pos++] = 191;
            buf[pos++] = 189;
            lead = null;
          }
          if (c5 < 128) {
            buf[pos++] = c5;
          } else {
            if (c5 < 2048) {
              buf[pos++] = c5 >> 6 | 192;
            } else {
              if (c5 < 65536) {
                buf[pos++] = c5 >> 12 | 224;
              } else {
                buf[pos++] = c5 >> 18 | 240;
                buf[pos++] = c5 >> 12 & 63 | 128;
              }
              buf[pos++] = c5 >> 6 & 63 | 128;
            }
            buf[pos++] = c5 & 63 | 128;
          }
        }
        return pos;
      }
    }
  });

  // bundle.ts
  var bundle_exports = {};
  __export(bundle_exports, {
    A5Layer: () => A5Layer,
    AmbientLight: () => AmbientLight,
    ArcLayer: () => ArcLayer,
    Attribute: () => Attribute,
    AttributeManager: () => AttributeManager,
    BitmapLayer: () => BitmapLayer,
    BrushingExtension: () => BrushingExtension,
    COORDINATE_SYSTEM: () => COORDINATE_SYSTEM,
    CPUAggregator: () => CPUAggregator,
    ClipExtension: () => ClipExtension,
    CollisionFilterExtension: () => CollisionFilterExtension,
    ColumnLayer: () => ColumnLayer,
    CompassWidget: () => CompassWidget,
    CompositeLayer: () => CompositeLayer,
    ContourLayer: () => GridLayer,
    Controller: () => Controller,
    DarkGlassTheme: () => DarkGlassTheme,
    DarkTheme: () => DarkTheme,
    DataFilterExtension: () => DataFilterExtension,
    Deck: () => Deck,
    DeckGL: () => DeckGL,
    DeckRenderer: () => DeckRenderer,
    DirectionalLight: () => DirectionalLight,
    FillStyleExtension: () => FillStyleExtension,
    FirstPersonController: () => FirstPersonController,
    FirstPersonView: () => FirstPersonView,
    FirstPersonViewport: () => FirstPersonViewport,
    FlyToInterpolator: () => FlyToInterpolator,
    Fp64Extension: () => Fp64Extension,
    FullscreenWidget: () => FullscreenWidget,
    GeoJsonLayer: () => GeoJsonLayer,
    GeohashLayer: () => GeohashLayer,
    GimbalWidget: () => GimbalWidget,
    GoogleMapsOverlay: () => GoogleMapsOverlay,
    GreatCircleLayer: () => GreatCircleLayer,
    GridCellLayer: () => GridCellLayer,
    GridLayer: () => GridLayer2,
    H3ClusterLayer: () => H3ClusterLayer,
    H3HexagonLayer: () => H3HexagonLayer,
    HeatmapLayer: () => HeatmapLayer,
    HexagonLayer: () => HexagonLayer,
    IconLayer: () => IconLayer,
    Layer: () => Layer,
    LayerExtension: () => LayerExtension,
    LayerManager: () => LayerManager,
    LightGlassTheme: () => LightGlassTheme,
    LightTheme: () => LightTheme,
    LightingEffect: () => LightingEffect,
    LineLayer: () => LineLayer,
    LinearInterpolator: () => LinearInterpolator,
    MVTLayer: () => MVTLayer,
    MapController: () => MapController,
    MapView: () => MapView,
    MapboxOverlay: () => MapboxOverlay,
    MaskExtension: () => MaskExtension,
    OPERATION: () => OPERATION,
    OrbitController: () => OrbitController,
    OrbitView: () => OrbitView,
    OrbitViewport: () => OrbitViewport,
    OrthographicController: () => OrthographicController,
    OrthographicView: () => OrthographicView,
    OrthographicViewport: () => OrthographicViewport,
    PathLayer: () => PathLayer,
    PathStyleExtension: () => PathStyleExtension,
    PointCloudLayer: () => PointCloudLayer,
    PointLight: () => PointLight,
    PolygonLayer: () => PolygonLayer,
    PostProcessEffect: () => PostProcessEffect,
    QuadkeyLayer: () => QuadkeyLayer,
    ResetViewWidget: () => ResetViewWidget,
    S2Layer: () => S2Layer,
    ScatterplotLayer: () => ScatterplotLayer,
    ScenegraphLayer: () => ScenegraphLayer,
    ScreenGridLayer: () => ScreenGridLayer,
    ScreenshotWidget: () => ScreenshotWidget,
    SimpleMeshLayer: () => SimpleMeshLayer,
    SolidPolygonLayer: () => SolidPolygonLayer,
    TRANSITION_EVENTS: () => TRANSITION_EVENTS,
    TerrainLayer: () => TerrainLayer,
    Tesselator: () => Tesselator,
    TextLayer: () => TextLayer,
    Tile3DLayer: () => Tile3DLayer,
    TileLayer: () => TileLayer,
    TransitionInterpolator: () => TransitionInterpolator,
    TripsLayer: () => TripsLayer,
    UNIT: () => UNIT,
    VERSION: () => VERSION4,
    View: () => View,
    Viewport: () => Viewport,
    WebGLAggregator: () => WebGLAggregator,
    WebMercatorViewport: () => WebMercatorViewport2,
    Widget: () => Widget,
    ZoomWidget: () => ZoomWidget,
    _AggregationLayer: () => AggregationLayer,
    _ButtonGroup: () => ButtonGroup,
    _CameraLight: () => CameraLight,
    _Component: () => Component,
    _ComponentState: () => ComponentState,
    _ContextMenuWidget: () => ContextMenuWidget,
    _CoordinatesGeocoder: () => CoordinatesGeocoder,
    _CurrentLocationGeocoder: () => CurrentLocationGeocoder,
    _DropdownMenu: () => DropdownMenu,
    _FpsWidget: () => FpsWidget,
    _GeoCellLayer: () => GeoCellLayer,
    _GeocoderWidget: () => GeocoderWidget,
    _GlobeController: () => GlobeController,
    _GlobeView: () => GlobeView,
    _GlobeViewport: () => GlobeViewport,
    _GoogleGeocoder: () => GoogleGeocoder,
    _GroupedIconButton: () => GroupedIconButton,
    _IconButton: () => IconButton,
    _IconMenu: () => IconMenu,
    _InfoWidget: () => InfoWidget,
    _LayersPass: () => LayersPass,
    _LoadingWidget: () => LoadingWidget,
    _MapboxGeocoder: () => MapboxGeocoder,
    _MultiIconLayer: () => MultiIconLayer,
    _OpenCageGeocoder: () => OpenCageGeocoder,
    _PickLayersPass: () => PickLayersPass,
    _ScaleWidget: () => ScaleWidget,
    _SimpleMenu: () => SimpleMenu,
    _SplitterWidget: () => SplitterWidget,
    _StatsWidget: () => StatsWidget,
    _SunLight: () => SunLight,
    _TerrainExtension: () => TerrainExtension,
    _TextBackgroundLayer: () => TextBackgroundLayer,
    _ThemeWidget: () => ThemeWidget,
    _Tile2DHeader: () => Tile2DHeader,
    _Tileset2D: () => Tileset2D,
    _TimelineWidget: () => TimelineWidget,
    _ViewSelectorWidget: () => ViewSelectorWidget,
    _WMSLayer: () => WMSLayer,
    _applyStyles: () => applyStyles,
    _compareProps: () => compareProps,
    _count: () => count,
    _deepEqual: () => deepEqual2,
    _fillArray: () => fillArray,
    _flatten: () => flatten,
    _getURLFromTemplate: () => getURLFromTemplate,
    _memoize: () => memoize,
    _mergeShaders: () => mergeShaders,
    _registerLoggers: () => register,
    _removeStyles: () => removeStyles,
    assert: () => assert8,
    color: () => color_default,
    createIterable: () => createIterable,
    fp64LowPart: () => fp64LowPart2,
    getShaderAssembler: () => getShaderAssembler,
    gouraudMaterial: () => gouraudMaterial,
    log: () => log_default,
    phongMaterial: () => phongMaterial,
    picking: () => picking_default,
    project: () => project_default,
    project32: () => project32_default,
    project64: () => project64_default,
    shadow: () => shadow_default
  });

  // ../../node_modules/@loaders.gl/loader-utils/dist/loader-types.js
  async function parseFromContext(data, loaders, options, context) {
    return context._parse(data, loaders, options, context);
  }

  // ../../node_modules/@loaders.gl/loader-utils/dist/lib/env-utils/assert.js
  function assert2(condition, message2) {
    if (!condition) {
      throw new Error(message2 || "loader assertion failed.");
    }
  }

  // ../../node_modules/@loaders.gl/loader-utils/dist/lib/env-utils/globals.js
  var globals = {
    self: typeof self !== "undefined" && self,
    window: typeof window !== "undefined" && window,
    global: typeof global !== "undefined" && global,
    document: typeof document !== "undefined" && document
  };
  var self_ = globals.self || globals.window || globals.global || {};
  var window_ = globals.window || globals.self || globals.global || {};
  var global_ = globals.global || globals.self || globals.window || {};
  var document_ = globals.document || {};
  var isBrowser = (
    // @ts-ignore process does not exist on browser
    Boolean(typeof process !== "object" || String(process) !== "[object process]" || process.browser)
  );
  var matches = typeof process !== "undefined" && process.version && /v([0-9]*)/.exec(process.version);
  var nodeVersion = matches && parseFloat(matches[1]) || 0;

  // ../../node_modules/@loaders.gl/loader-utils/dist/lib/option-utils/merge-loader-options.js
  function mergeLoaderOptions(baseOptions, newOptions) {
    return mergeOptionsRecursively(baseOptions || {}, newOptions);
  }
  function mergeOptionsRecursively(baseOptions, newOptions, level = 0) {
    if (level > 3) {
      return newOptions;
    }
    const options = { ...baseOptions };
    for (const [key, newValue] of Object.entries(newOptions)) {
      if (newValue && typeof newValue === "object" && !Array.isArray(newValue)) {
        options[key] = mergeOptionsRecursively(options[key] || {}, newOptions[key], level + 1);
      } else {
        options[key] = newOptions[key];
      }
    }
    return options;
  }

  // ../../node_modules/@loaders.gl/loader-utils/dist/lib/module-utils/js-module-utils.js
  function registerJSModules(modules) {
    globalThis.loaders ||= {};
    globalThis.loaders.modules ||= {};
    Object.assign(globalThis.loaders.modules, modules);
  }
  function getJSModuleOrNull(name13) {
    const module = globalThis.loaders?.modules?.[name13];
    return module || null;
  }

  // ../../node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/version.js
  var NPM_TAG = "latest";
  function getVersion() {
    if (!globalThis._loadersgl_?.version) {
      globalThis._loadersgl_ = globalThis._loadersgl_ || {};
      if (false) {
        console.warn("loaders.gl: The __VERSION__ variable is not injected using babel plugin. Latest unstable workers would be fetched from the CDN.");
        globalThis._loadersgl_.version = NPM_TAG;
      } else {
        globalThis._loadersgl_.version = "4.2.1";
      }
    }
    return globalThis._loadersgl_.version;
  }
  var VERSION2 = getVersion();

  // ../../node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/assert.js
  function assert4(condition, message2) {
    if (!condition) {
      throw new Error(message2 || "loaders.gl assertion failed.");
    }
  }

  // ../../node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/globals.js
  var globals2 = {
    self: typeof self !== "undefined" && self,
    window: typeof window !== "undefined" && window,
    global: typeof global !== "undefined" && global,
    document: typeof document !== "undefined" && document
  };
  var self_2 = globals2.self || globals2.window || globals2.global || {};
  var window_3 = globals2.window || globals2.self || globals2.global || {};
  var global_3 = globals2.global || globals2.self || globals2.window || {};
  var document_3 = globals2.document || {};
  var isBrowser3 = (
    // @ts-ignore process.browser
    typeof process !== "object" || String(process) !== "[object process]" || process.browser
  );
  var isWorker = typeof importScripts === "function";
  var isMobile2 = typeof window !== "undefined" && typeof window.orientation !== "undefined";
  var matches2 = typeof process !== "undefined" && process.version && /v([0-9]*)/.exec(process.version);
  var nodeVersion2 = matches2 && parseFloat(matches2[1]) || 0;

  // ../../node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-job.js
  var WorkerJob = class {
    name;
    workerThread;
    isRunning = true;
    /** Promise that resolves when Job is done */
    result;
    _resolve = () => {
    };
    _reject = () => {
    };
    constructor(jobName, workerThread) {
      this.name = jobName;
      this.workerThread = workerThread;
      this.result = new Promise((resolve2, reject) => {
        this._resolve = resolve2;
        this._reject = reject;
      });
    }
    /**
     * Send a message to the job's worker thread
     * @param data any data structure, ideally consisting mostly of transferrable objects
     */
    postMessage(type, payload) {
      this.workerThread.postMessage({
        source: "loaders.gl",
        // Lets worker ignore unrelated messages
        type,
        payload
      });
    }
    /**
     * Call to resolve the `result` Promise with the supplied value
     */
    done(value) {
      assert4(this.isRunning);
      this.isRunning = false;
      this._resolve(value);
    }
    /**
     * Call to reject the `result` Promise with the supplied error
     */
    error(error) {
      assert4(this.isRunning);
      this.isRunning = false;
      this._reject(error);
    }
  };

  // ../../node_modules/@loaders.gl/worker-utils/dist/lib/node/worker_threads-browser.js
  var NodeWorker = class {
    terminate() {
    }
  };

  // ../../node_modules/@loaders.gl/worker-utils/dist/lib/worker-utils/get-loadable-worker-url.js
  var workerURLCache = /* @__PURE__ */ new Map();
  function getLoadableWorkerURL(props) {
    assert4(props.source && !props.url || !props.source && props.url);
    let workerURL = workerURLCache.get(props.source || props.url);
    if (!workerURL) {
      if (props.url) {
        workerURL = getLoadableWorkerURLFromURL(props.url);
        workerURLCache.set(props.url, workerURL);
      }
      if (props.source) {
        workerURL = getLoadableWorkerURLFromSource(props.source);
        workerURLCache.set(props.source, workerURL);
      }
    }
    assert4(workerURL);
    return workerURL;
  }
  function getLoadableWorkerURLFromURL(url) {
    if (!url.startsWith("http")) {
      return url;
    }
    const workerSource = buildScriptSource(url);
    return getLoadableWorkerURLFromSource(workerSource);
  }
  function getLoadableWorkerURLFromSource(workerSource) {
    const blob = new Blob([workerSource], { type: "application/javascript" });
    return URL.createObjectURL(blob);
  }
  function buildScriptSource(workerUrl) {
    return `try {
  importScripts('${workerUrl}');
} catch (error) {
  console.error(error);
  throw error;
}`;
  }

  // ../../node_modules/@loaders.gl/worker-utils/dist/lib/worker-utils/get-transfer-list.js
  function getTransferList(object, recursive = true, transfers) {
    const transfersSet = transfers || /* @__PURE__ */ new Set();
    if (!object) {
    } else if (isTransferable(object)) {
      transfersSet.add(object);
    } else if (isTransferable(object.buffer)) {
      transfersSet.add(object.buffer);
    } else if (ArrayBuffer.isView(object)) {
    } else if (recursive && typeof object === "object") {
      for (const key in object) {
        getTransferList(object[key], recursive, transfersSet);
      }
    }
    return transfers === void 0 ? Array.from(transfersSet) : [];
  }
  function isTransferable(object) {
    if (!object) {
      return false;
    }
    if (object instanceof ArrayBuffer) {
      return true;
    }
    if (typeof MessagePort !== "undefined" && object instanceof MessagePort) {
      return true;
    }
    if (typeof ImageBitmap !== "undefined" && object instanceof ImageBitmap) {
      return true;
    }
    if (typeof OffscreenCanvas !== "undefined" && object instanceof OffscreenCanvas) {
      return true;
    }
    return false;
  }

  // ../../node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-thread.js
  var NOOP = () => {
  };
  var WorkerThread = class {
    name;
    source;
    url;
    terminated = false;
    worker;
    onMessage;
    onError;
    _loadableURL = "";
    /** Checks if workers are supported on this platform */
    static isSupported() {
      return typeof Worker !== "undefined" && isBrowser3 || typeof NodeWorker !== "undefined" && !isBrowser3;
    }
    constructor(props) {
      const { name: name13, source: source4, url } = props;
      assert4(source4 || url);
      this.name = name13;
      this.source = source4;
      this.url = url;
      this.onMessage = NOOP;
      this.onError = (error) => console.log(error);
      this.worker = isBrowser3 ? this._createBrowserWorker() : this._createNodeWorker();
    }
    /**
     * Terminate this worker thread
     * @note Can free up significant memory
     */
    destroy() {
      this.onMessage = NOOP;
      this.onError = NOOP;
      this.worker.terminate();
      this.terminated = true;
    }
    get isRunning() {
      return Boolean(this.onMessage);
    }
    /**
     * Send a message to this worker thread
     * @param data any data structure, ideally consisting mostly of transferrable objects
     * @param transferList If not supplied, calculated automatically by traversing data
     */
    postMessage(data, transferList) {
      transferList = transferList || getTransferList(data);
      this.worker.postMessage(data, transferList);
    }
    // PRIVATE
    /**
     * Generate a standard Error from an ErrorEvent
     * @param event
     */
    _getErrorFromErrorEvent(event) {
      let message2 = "Failed to load ";
      message2 += `worker ${this.name} from ${this.url}. `;
      if (event.message) {
        message2 += `${event.message} in `;
      }
      if (event.lineno) {
        message2 += `:${event.lineno}:${event.colno}`;
      }
      return new Error(message2);
    }
    /**
     * Creates a worker thread on the browser
     */
    _createBrowserWorker() {
      this._loadableURL = getLoadableWorkerURL({ source: this.source, url: this.url });
      const worker = new Worker(this._loadableURL, { name: this.name });
      worker.onmessage = (event) => {
        if (!event.data) {
          this.onError(new Error("No data received"));
        } else {
          this.onMessage(event.data);
        }
      };
      worker.onerror = (error) => {
        this.onError(this._getErrorFromErrorEvent(error));
        this.terminated = true;
      };
      worker.onmessageerror = (event) => console.error(event);
      return worker;
    }
    /**
     * Creates a worker thread in node.js
     * @todo https://nodejs.org/api/async_hooks.html#async-resource-worker-pool
     */
    _createNodeWorker() {
      let worker;
      if (this.url) {
        const absolute = this.url.includes(":/") || this.url.startsWith("/");
        const url = absolute ? this.url : `./${this.url}`;
        worker = new NodeWorker(url, { eval: false });
      } else if (this.source) {
        worker = new NodeWorker(this.source, { eval: true });
      } else {
        throw new Error("no worker");
      }
      worker.on("message", (data) => {
        this.onMessage(data);
      });
      worker.on("error", (error) => {
        this.onError(error);
      });
      worker.on("exit", (code) => {
      });
      return worker;
    }
  };

  // ../../node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-pool.js
  var WorkerPool = class {
    name = "unnamed";
    source;
    // | Function;
    url;
    maxConcurrency = 1;
    maxMobileConcurrency = 1;
    onDebug = () => {
    };
    reuseWorkers = true;
    props = {};
    jobQueue = [];
    idleQueue = [];
    count = 0;
    isDestroyed = false;
    /** Checks if workers are supported on this platform */
    static isSupported() {
      return WorkerThread.isSupported();
    }
    /**
     * @param processor - worker function
     * @param maxConcurrency - max count of workers
     */
    constructor(props) {
      this.source = props.source;
      this.url = props.url;
      this.setProps(props);
    }
    /**
     * Terminates all workers in the pool
     * @note Can free up significant memory
     */
    destroy() {
      this.idleQueue.forEach((worker) => worker.destroy());
      this.isDestroyed = true;
    }
    setProps(props) {
      this.props = { ...this.props, ...props };
      if (props.name !== void 0) {
        this.name = props.name;
      }
      if (props.maxConcurrency !== void 0) {
        this.maxConcurrency = props.maxConcurrency;
      }
      if (props.maxMobileConcurrency !== void 0) {
        this.maxMobileConcurrency = props.maxMobileConcurrency;
      }
      if (props.reuseWorkers !== void 0) {
        this.reuseWorkers = props.reuseWorkers;
      }
      if (props.onDebug !== void 0) {
        this.onDebug = props.onDebug;
      }
    }
    async startJob(name13, onMessage2 = (job, type, data) => job.done(data), onError = (job, error) => job.error(error)) {
      const startPromise = new Promise((onStart) => {
        this.jobQueue.push({ name: name13, onMessage: onMessage2, onError, onStart });
        return this;
      });
      this._startQueuedJob();
      return await startPromise;
    }
    // PRIVATE
    /**
     * Starts first queued job if worker is available or can be created
     * Called when job is started and whenever a worker returns to the idleQueue
     */
    async _startQueuedJob() {
      if (!this.jobQueue.length) {
        return;
      }
      const workerThread = this._getAvailableWorker();
      if (!workerThread) {
        return;
      }
      const queuedJob = this.jobQueue.shift();
      if (queuedJob) {
        this.onDebug({
          message: "Starting job",
          name: queuedJob.name,
          workerThread,
          backlog: this.jobQueue.length
        });
        const job = new WorkerJob(queuedJob.name, workerThread);
        workerThread.onMessage = (data) => queuedJob.onMessage(job, data.type, data.payload);
        workerThread.onError = (error) => queuedJob.onError(job, error);
        queuedJob.onStart(job);
        try {
          await job.result;
        } catch (error) {
          console.error(`Worker exception: ${error}`);
        } finally {
          this.returnWorkerToQueue(workerThread);
        }
      }
    }
    /**
     * Returns a worker to the idle queue
     * Destroys the worker if
     *  - pool is destroyed
     *  - if this pool doesn't reuse workers
     *  - if maxConcurrency has been lowered
     * @param worker
     */
    returnWorkerToQueue(worker) {
      const shouldDestroyWorker = (
        // Workers on Node.js prevent the process from exiting.
        // Until we figure out how to close them before exit, we always destroy them
        !isBrowser3 || // If the pool is destroyed, there is no reason to keep the worker around
        this.isDestroyed || // If the app has disabled worker reuse, any completed workers should be destroyed
        !this.reuseWorkers || // If concurrency has been lowered, this worker might be surplus to requirements
        this.count > this._getMaxConcurrency()
      );
      if (shouldDestroyWorker) {
        worker.destroy();
        this.count--;
      } else {
        this.idleQueue.push(worker);
      }
      if (!this.isDestroyed) {
        this._startQueuedJob();
      }
    }
    /**
     * Returns idle worker or creates new worker if maxConcurrency has not been reached
     */
    _getAvailableWorker() {
      if (this.idleQueue.length > 0) {
        return this.idleQueue.shift() || null;
      }
      if (this.count < this._getMaxConcurrency()) {
        this.count++;
        const name13 = `${this.name.toLowerCase()} (#${this.count} of ${this.maxConcurrency})`;
        return new WorkerThread({ name: name13, source: this.source, url: this.url });
      }
      return null;
    }
    _getMaxConcurrency() {
      return isMobile2 ? this.maxMobileConcurrency : this.maxConcurrency;
    }
  };

  // ../../node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-farm.js
  var DEFAULT_PROPS = {
    maxConcurrency: 3,
    maxMobileConcurrency: 1,
    reuseWorkers: true,
    onDebug: () => {
    }
  };
  var _WorkerFarm = class {
    props;
    workerPools = /* @__PURE__ */ new Map();
    /** Checks if workers are supported on this platform */
    static isSupported() {
      return WorkerThread.isSupported();
    }
    /** Get the singleton instance of the global worker farm */
    static getWorkerFarm(props = {}) {
      _WorkerFarm._workerFarm = _WorkerFarm._workerFarm || new _WorkerFarm({});
      _WorkerFarm._workerFarm.setProps(props);
      return _WorkerFarm._workerFarm;
    }
    /** get global instance with WorkerFarm.getWorkerFarm() */
    constructor(props) {
      this.props = { ...DEFAULT_PROPS };
      this.setProps(props);
      this.workerPools = /* @__PURE__ */ new Map();
    }
    /**
     * Terminate all workers in the farm
     * @note Can free up significant memory
     */
    destroy() {
      for (const workerPool of this.workerPools.values()) {
        workerPool.destroy();
      }
      this.workerPools = /* @__PURE__ */ new Map();
    }
    /**
     * Set props used when initializing worker pools
     * @param props
     */
    setProps(props) {
      this.props = { ...this.props, ...props };
      for (const workerPool of this.workerPools.values()) {
        workerPool.setProps(this._getWorkerPoolProps());
      }
    }
    /**
     * Returns a worker pool for the specified worker
     * @param options - only used first time for a specific worker name
     * @param options.name - the name of the worker - used to identify worker pool
     * @param options.url -
     * @param options.source -
     * @example
     *   const job = WorkerFarm.getWorkerFarm().getWorkerPool({name, url}).startJob(...);
     */
    getWorkerPool(options) {
      const { name: name13, source: source4, url } = options;
      let workerPool = this.workerPools.get(name13);
      if (!workerPool) {
        workerPool = new WorkerPool({
          name: name13,
          source: source4,
          url
        });
        workerPool.setProps(this._getWorkerPoolProps());
        this.workerPools.set(name13, workerPool);
      }
      return workerPool;
    }
    _getWorkerPoolProps() {
      return {
        maxConcurrency: this.props.maxConcurrency,
        maxMobileConcurrency: this.props.maxMobileConcurrency,
        reuseWorkers: this.props.reuseWorkers,
        onDebug: this.props.onDebug
      };
    }
  };
  var WorkerFarm = _WorkerFarm;
  // singleton
  __publicField(WorkerFarm, "_workerFarm");

  // ../../node_modules/@loaders.gl/worker-utils/dist/lib/worker-api/get-worker-url.js
  function getWorkerURL(worker, options = {}) {
    const workerOptions = options[worker.id] || {};
    const workerFile = isBrowser3 ? `${worker.id}-worker.js` : `${worker.id}-worker-node.js`;
    let url = workerOptions.workerUrl;
    if (!url && worker.id === "compression") {
      url = options.workerUrl;
    }
    if (options._workerType === "test") {
      if (isBrowser3) {
        url = `modules/${worker.module}/dist/${workerFile}`;
      } else {
        url = `modules/${worker.module}/src/workers/${worker.id}-worker-node.ts`;
      }
    }
    if (!url) {
      let version = worker.version;
      if (version === "latest") {
        version = NPM_TAG;
      }
      const versionTag = version ? `@${version}` : "";
      url = `https://unpkg.com/@loaders.gl/${worker.module}${versionTag}/dist/${workerFile}`;
    }
    assert4(url);
    return url;
  }

  // ../../node_modules/@loaders.gl/worker-utils/dist/lib/worker-api/validate-worker-version.js
  function validateWorkerVersion(worker, coreVersion = VERSION2) {
    assert4(worker, "no worker provided");
    const workerVersion = worker.version;
    if (!coreVersion || !workerVersion) {
      return false;
    }
    return true;
  }

  // ../../node_modules/@loaders.gl/worker-utils/dist/lib/library-utils/library-utils.js
  var loadLibraryPromises = {};
  async function loadLibrary(libraryUrl, moduleName = null, options = {}, libraryName = null) {
    if (moduleName) {
      libraryUrl = getLibraryUrl(libraryUrl, moduleName, options, libraryName);
    }
    loadLibraryPromises[libraryUrl] = // eslint-disable-next-line @typescript-eslint/no-misused-promises
    loadLibraryPromises[libraryUrl] || loadLibraryFromFile(libraryUrl);
    return await loadLibraryPromises[libraryUrl];
  }
  function getLibraryUrl(library, moduleName, options = {}, libraryName = null) {
    if (!options.useLocalLibraries && library.startsWith("http")) {
      return library;
    }
    libraryName = libraryName || library;
    const modules = options.modules || {};
    if (modules[libraryName]) {
      return modules[libraryName];
    }
    if (!isBrowser3) {
      return `modules/${moduleName}/dist/libs/${libraryName}`;
    }
    if (options.CDN) {
      assert4(options.CDN.startsWith("http"));
      return `${options.CDN}/${moduleName}@${VERSION2}/dist/libs/${libraryName}`;
    }
    if (isWorker) {
      return `../src/libs/${libraryName}`;
    }
    return `modules/${moduleName}/src/libs/${libraryName}`;
  }
  async function loadLibraryFromFile(libraryUrl) {
    if (libraryUrl.endsWith("wasm")) {
      return await loadAsArrayBuffer(libraryUrl);
    }
    if (!isBrowser3) {
      try {
        const { requireFromFile } = globalThis.loaders || {};
        return await requireFromFile?.(libraryUrl);
      } catch (error) {
        console.error(error);
        return null;
      }
    }
    if (isWorker) {
      return importScripts(libraryUrl);
    }
    const scriptSource = await loadAsText(libraryUrl);
    return loadLibraryFromString(scriptSource, libraryUrl);
  }
  function loadLibraryFromString(scriptSource, id) {
    if (!isBrowser3) {
      const { requireFromString } = globalThis.loaders || {};
      return requireFromString?.(scriptSource, id);
    }
    if (isWorker) {
      eval.call(globalThis, scriptSource);
      return null;
    }
    const script = document.createElement("script");
    script.id = id;
    try {
      script.appendChild(document.createTextNode(scriptSource));
    } catch (e6) {
      script.text = scriptSource;
    }
    document.body.appendChild(script);
    return null;
  }
  async function loadAsArrayBuffer(url) {
    const { readFileAsArrayBuffer } = globalThis.loaders || {};
    if (isBrowser3 || !readFileAsArrayBuffer || url.startsWith("http")) {
      const response = await fetch(url);
      return await response.arrayBuffer();
    }
    return await readFileAsArrayBuffer(url);
  }
  async function loadAsText(url) {
    const { readFileAsText } = globalThis.loaders || {};
    if (isBrowser3 || !readFileAsText || url.startsWith("http")) {
      const response = await fetch(url);
      return await response.text();
    }
    return await readFileAsText(url);
  }

  // ../../node_modules/@loaders.gl/loader-utils/dist/lib/worker-loader-utils/parse-with-worker.js
  function canParseWithWorker(loader, options) {
    if (!WorkerFarm.isSupported()) {
      return false;
    }
    if (!isBrowser3 && !options?._nodeWorkers) {
      return false;
    }
    return loader.worker && options?.worker;
  }
  async function parseWithWorker(loader, data, options, context, parseOnMainThread) {
    const name13 = loader.id;
    const url = getWorkerURL(loader, options);
    const workerFarm = WorkerFarm.getWorkerFarm(options);
    const workerPool = workerFarm.getWorkerPool({ name: name13, url });
    options = JSON.parse(JSON.stringify(options));
    context = JSON.parse(JSON.stringify(context || {}));
    const job = await workerPool.startJob(
      "process-on-worker",
      // @ts-expect-error
      onMessage.bind(null, parseOnMainThread)
      // eslint-disable-line @typescript-eslint/no-misused-promises
    );
    job.postMessage("process", {
      // @ts-ignore
      input: data,
      options,
      context
    });
    const result = await job.result;
    return await result.result;
  }
  async function onMessage(parseOnMainThread, job, type, payload) {
    switch (type) {
      case "done":
        job.done(payload);
        break;
      case "error":
        job.error(new Error(payload.error));
        break;
      case "process":
        const { id, input, options } = payload;
        try {
          const result = await parseOnMainThread(input, options);
          job.postMessage("done", { id, result });
        } catch (error) {
          const message2 = error instanceof Error ? error.message : "unknown error";
          job.postMessage("error", { id, error: message2 });
        }
        break;
      default:
        console.warn(`parse-with-worker unknown message ${type}`);
    }
  }

  // ../../node_modules/@loaders.gl/loader-utils/dist/lib/binary-utils/get-first-characters.js
  function getFirstCharacters(data, length17 = 5) {
    if (typeof data === "string") {
      return data.slice(0, length17);
    } else if (ArrayBuffer.isView(data)) {
      return getMagicString(data.buffer, data.byteOffset, length17);
    } else if (data instanceof ArrayBuffer) {
      const byteOffset = 0;
      return getMagicString(data, byteOffset, length17);
    }
    return "";
  }
  function getMagicString(arrayBuffer2, byteOffset, length17) {
    if (arrayBuffer2.byteLength <= byteOffset + length17) {
      return "";
    }
    const dataView = new DataView(arrayBuffer2);
    let magic = "";
    for (let i7 = 0; i7 < length17; i7++) {
      magic += String.fromCharCode(dataView.getUint8(byteOffset + i7));
    }
    return magic;
  }

  // ../../node_modules/@loaders.gl/loader-utils/dist/lib/parser-utils/parse-json.js
  function parseJSON(string) {
    try {
      return JSON.parse(string);
    } catch (_3) {
      throw new Error(`Failed to parse JSON from data starting with "${getFirstCharacters(string)}"`);
    }
  }

  // ../../node_modules/@loaders.gl/loader-utils/dist/lib/binary-utils/array-buffer-utils.js
  function compareArrayBuffers(arrayBuffer1, arrayBuffer2, byteLength) {
    byteLength = byteLength || arrayBuffer1.byteLength;
    if (arrayBuffer1.byteLength < byteLength || arrayBuffer2.byteLength < byteLength) {
      return false;
    }
    const array1 = new Uint8Array(arrayBuffer1);
    const array2 = new Uint8Array(arrayBuffer2);
    for (let i7 = 0; i7 < array1.length; ++i7) {
      if (array1[i7] !== array2[i7]) {
        return false;
      }
    }
    return true;
  }
  function concatenateArrayBuffers(...sources) {
    return concatenateArrayBuffersFromArray(sources);
  }
  function concatenateArrayBuffersFromArray(sources) {
    const sourceArrays = sources.map((source22) => source22 instanceof ArrayBuffer ? new Uint8Array(source22) : source22);
    const byteLength = sourceArrays.reduce((length17, typedArray) => length17 + typedArray.byteLength, 0);
    const result = new Uint8Array(byteLength);
    let offset = 0;
    for (const sourceArray of sourceArrays) {
      result.set(sourceArray, offset);
      offset += sourceArray.byteLength;
    }
    return result.buffer;
  }
  function concatenateTypedArrays(...typedArrays) {
    const arrays = typedArrays;
    const TypedArrayConstructor = arrays && arrays.length > 1 && arrays[0].constructor || null;
    if (!TypedArrayConstructor) {
      throw new Error('"concatenateTypedArrays" - incorrect quantity of arguments or arguments have incompatible data types');
    }
    const sumLength = arrays.reduce((acc, value) => acc + value.length, 0);
    const result = new TypedArrayConstructor(sumLength);
    let offset = 0;
    for (const array of arrays) {
      result.set(array, offset);
      offset += array.length;
    }
    return result;
  }
  function sliceArrayBuffer(arrayBuffer2, byteOffset, byteLength) {
    const subArray = byteLength !== void 0 ? new Uint8Array(arrayBuffer2).subarray(byteOffset, byteOffset + byteLength) : new Uint8Array(arrayBuffer2).subarray(byteOffset);
    const arrayCopy2 = new Uint8Array(subArray);
    return arrayCopy2.buffer;
  }

  // ../../node_modules/@loaders.gl/loader-utils/dist/lib/binary-utils/memory-copy-utils.js
  function padToNBytes(byteLength, padding) {
    assert2(byteLength >= 0);
    assert2(padding > 0);
    return byteLength + (padding - 1) & ~(padding - 1);
  }
  function copyToArray(source4, target2, targetOffset) {
    let sourceArray;
    if (source4 instanceof ArrayBuffer) {
      sourceArray = new Uint8Array(source4);
    } else {
      const srcByteOffset = source4.byteOffset;
      const srcByteLength = source4.byteLength;
      sourceArray = new Uint8Array(source4.buffer || source4.arrayBuffer, srcByteOffset, srcByteLength);
    }
    target2.set(sourceArray, targetOffset);
    return targetOffset + padToNBytes(sourceArray.byteLength, 4);
  }

  // ../../node_modules/@loaders.gl/loader-utils/dist/lib/iterators/async-iteration.js
  async function concatenateArrayBuffersAsync(asyncIterator) {
    const arrayBuffers = [];
    for await (const chunk of asyncIterator) {
      arrayBuffers.push(chunk);
    }
    return concatenateArrayBuffers(...arrayBuffers);
  }

  // ../../node_modules/@loaders.gl/loader-utils/dist/lib/request-utils/request-scheduler.js
  init_dist3();
  var STAT_QUEUED_REQUESTS = "Queued Requests";
  var STAT_ACTIVE_REQUESTS = "Active Requests";
  var STAT_CANCELLED_REQUESTS = "Cancelled Requests";
  var STAT_QUEUED_REQUESTS_EVER = "Queued Requests Ever";
  var STAT_ACTIVE_REQUESTS_EVER = "Active Requests Ever";
  var DEFAULT_PROPS2 = {
    id: "request-scheduler",
    /** Specifies if the request scheduler should throttle incoming requests, mainly for comparative testing. */
    throttleRequests: true,
    /** The maximum number of simultaneous active requests. Un-throttled requests do not observe this limit. */
    maxRequests: 6,
    /**
     * Specifies a debounce time, in milliseconds. All requests are queued, until no new requests have
     * been added to the queue for this amount of time.
     */
    debounceTime: 0
  };
  var RequestScheduler = class {
    props;
    stats;
    activeRequestCount = 0;
    /** Tracks the number of active requests and prioritizes/cancels queued requests. */
    requestQueue = [];
    requestMap = /* @__PURE__ */ new Map();
    updateTimer = null;
    constructor(props = {}) {
      this.props = { ...DEFAULT_PROPS2, ...props };
      this.stats = new Stats({ id: this.props.id });
      this.stats.get(STAT_QUEUED_REQUESTS);
      this.stats.get(STAT_ACTIVE_REQUESTS);
      this.stats.get(STAT_CANCELLED_REQUESTS);
      this.stats.get(STAT_QUEUED_REQUESTS_EVER);
      this.stats.get(STAT_ACTIVE_REQUESTS_EVER);
    }
    /**
     * Called by an application that wants to issue a request, without having it deeply queued by the browser
     *
     * When the returned promise resolved, it is OK for the application to issue a request.
     * The promise resolves to an object that contains a `done` method.
     * When the application's request has completed (or failed), the application must call the `done` function
     *
     * @param handle
     * @param getPriority will be called when request "slots" open up,
     *    allowing the caller to update priority or cancel the request
     *    Highest priority executes first, priority < 0 cancels the request
     * @returns a promise
     *   - resolves to a object (with a `done` field) when the request can be issued without queueing,
     *   - resolves to `null` if the request has been cancelled (by the callback return < 0).
     *     In this case the application should not issue the request
     */
    scheduleRequest(handle, getPriority = () => 0) {
      if (!this.props.throttleRequests) {
        return Promise.resolve({ done: () => {
        } });
      }
      if (this.requestMap.has(handle)) {
        return this.requestMap.get(handle);
      }
      const request = { handle, priority: 0, getPriority };
      const promise = new Promise((resolve2) => {
        request.resolve = resolve2;
        return request;
      });
      this.requestQueue.push(request);
      this.requestMap.set(handle, promise);
      this._issueNewRequests();
      return promise;
    }
    // PRIVATE
    _issueRequest(request) {
      const { handle, resolve: resolve2 } = request;
      let isDone = false;
      const done = () => {
        if (!isDone) {
          isDone = true;
          this.requestMap.delete(handle);
          this.activeRequestCount--;
          this._issueNewRequests();
        }
      };
      this.activeRequestCount++;
      return resolve2 ? resolve2({ done }) : Promise.resolve({ done });
    }
    /** We check requests asynchronously, to prevent multiple updates */
    _issueNewRequests() {
      if (this.updateTimer !== null) {
        clearTimeout(this.updateTimer);
      }
      this.updateTimer = setTimeout(() => this._issueNewRequestsAsync(), this.props.debounceTime);
    }
    /** Refresh all requests  */
    _issueNewRequestsAsync() {
      if (this.updateTimer !== null) {
        clearTimeout(this.updateTimer);
      }
      this.updateTimer = null;
      const freeSlots = Math.max(this.props.maxRequests - this.activeRequestCount, 0);
      if (freeSlots === 0) {
        return;
      }
      this._updateAllRequests();
      for (let i7 = 0; i7 < freeSlots; ++i7) {
        const request = this.requestQueue.shift();
        if (request) {
          this._issueRequest(request);
        }
      }
    }
    /** Ensure all requests have updated priorities, and that no longer valid requests are cancelled */
    _updateAllRequests() {
      const requestQueue = this.requestQueue;
      for (let i7 = 0; i7 < requestQueue.length; ++i7) {
        const request = requestQueue[i7];
        if (!this._updateRequest(request)) {
          requestQueue.splice(i7, 1);
          this.requestMap.delete(request.handle);
          i7--;
        }
      }
      requestQueue.sort((a6, b4) => a6.priority - b4.priority);
    }
    /** Update a single request by calling the callback */
    _updateRequest(request) {
      request.priority = request.getPriority(request.handle);
      if (request.priority < 0) {
        request.resolve(null);
        return false;
      }
      return true;
    }
  };

  // ../../node_modules/@loaders.gl/loader-utils/dist/lib/path-utils/file-aliases.js
  var pathPrefix = "";
  var fileAliases = {};
  function resolvePath(filename2) {
    for (const alias in fileAliases) {
      if (filename2.startsWith(alias)) {
        const replacement = fileAliases[alias];
        filename2 = filename2.replace(alias, replacement);
      }
    }
    if (!filename2.startsWith("http://") && !filename2.startsWith("https://")) {
      filename2 = `${pathPrefix}${filename2}`;
    }
    return filename2;
  }

  // ../../node_modules/@loaders.gl/loader-utils/dist/lib/node/buffer.browser.js
  function toArrayBuffer(buffer) {
    return buffer;
  }

  // ../../node_modules/@loaders.gl/loader-utils/dist/lib/binary-utils/memory-conversion-utils.js
  function isBuffer(value) {
    return value && typeof value === "object" && value.isBuffer;
  }
  function toArrayBuffer2(data) {
    if (isBuffer(data)) {
      return toArrayBuffer(data);
    }
    if (data instanceof ArrayBuffer) {
      return data;
    }
    if (ArrayBuffer.isView(data)) {
      if (data.byteOffset === 0 && data.byteLength === data.buffer.byteLength) {
        return data.buffer;
      }
      return data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);
    }
    if (typeof data === "string") {
      const text = data;
      const uint8Array = new TextEncoder().encode(text);
      return uint8Array.buffer;
    }
    if (data && typeof data === "object" && data._toArrayBuffer) {
      return data._toArrayBuffer();
    }
    throw new Error("toArrayBuffer");
  }

  // ../../node_modules/@loaders.gl/loader-utils/dist/lib/path-utils/path.js
  var path_exports = {};
  __export(path_exports, {
    dirname: () => dirname,
    filename: () => filename,
    join: () => join,
    resolve: () => resolve
  });

  // ../../node_modules/@loaders.gl/loader-utils/dist/lib/path-utils/get-cwd.js
  function getCWD() {
    if (typeof process !== "undefined" && typeof process.cwd !== "undefined") {
      return process.cwd();
    }
    const pathname = window.location?.pathname;
    return pathname?.slice(0, pathname.lastIndexOf("/") + 1) || "";
  }

  // ../../node_modules/@loaders.gl/loader-utils/dist/lib/path-utils/path.js
  function filename(url) {
    const slashIndex = url ? url.lastIndexOf("/") : -1;
    return slashIndex >= 0 ? url.substr(slashIndex + 1) : "";
  }
  function dirname(url) {
    const slashIndex = url ? url.lastIndexOf("/") : -1;
    return slashIndex >= 0 ? url.substr(0, slashIndex) : "";
  }
  function join(...parts) {
    const separator = "/";
    parts = parts.map((part, index) => {
      if (index) {
        part = part.replace(new RegExp(`^${separator}`), "");
      }
      if (index !== parts.length - 1) {
        part = part.replace(new RegExp(`${separator}$`), "");
      }
      return part;
    });
    return parts.join(separator);
  }
  function resolve(...components) {
    const paths = [];
    for (let _i = 0; _i < components.length; _i++) {
      paths[_i] = components[_i];
    }
    let resolvedPath = "";
    let resolvedAbsolute = false;
    let cwd;
    for (let i7 = paths.length - 1; i7 >= -1 && !resolvedAbsolute; i7--) {
      let path;
      if (i7 >= 0) {
        path = paths[i7];
      } else {
        if (cwd === void 0) {
          cwd = getCWD();
        }
        path = cwd;
      }
      if (path.length === 0) {
        continue;
      }
      resolvedPath = `${path}/${resolvedPath}`;
      resolvedAbsolute = path.charCodeAt(0) === SLASH;
    }
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
    if (resolvedAbsolute) {
      return `/${resolvedPath}`;
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    }
    return ".";
  }
  var SLASH = 47;
  var DOT = 46;
  function normalizeStringPosix(path, allowAboveRoot) {
    let res = "";
    let lastSlash = -1;
    let dots = 0;
    let code;
    let isAboveRoot = false;
    for (let i7 = 0; i7 <= path.length; ++i7) {
      if (i7 < path.length) {
        code = path.charCodeAt(i7);
      } else if (code === SLASH) {
        break;
      } else {
        code = SLASH;
      }
      if (code === SLASH) {
        if (lastSlash === i7 - 1 || dots === 1) {
        } else if (lastSlash !== i7 - 1 && dots === 2) {
          if (res.length < 2 || !isAboveRoot || res.charCodeAt(res.length - 1) !== DOT || res.charCodeAt(res.length - 2) !== DOT) {
            if (res.length > 2) {
              const start = res.length - 1;
              let j4 = start;
              for (; j4 >= 0; --j4) {
                if (res.charCodeAt(j4) === SLASH) {
                  break;
                }
              }
              if (j4 !== start) {
                res = j4 === -1 ? "" : res.slice(0, j4);
                lastSlash = i7;
                dots = 0;
                isAboveRoot = false;
                continue;
              }
            } else if (res.length === 2 || res.length === 1) {
              res = "";
              lastSlash = i7;
              dots = 0;
              isAboveRoot = false;
              continue;
            }
          }
          if (allowAboveRoot) {
            if (res.length > 0) {
              res += "/..";
            } else {
              res = "..";
            }
            isAboveRoot = true;
          }
        } else {
          const slice = path.slice(lastSlash + 1, i7);
          if (res.length > 0) {
            res += `/${slice}`;
          } else {
            res = slice;
          }
          isAboveRoot = false;
        }
        lastSlash = i7;
        dots = 0;
      } else if (code === DOT && dots !== -1) {
        ++dots;
      } else {
        dots = -1;
      }
    }
    return res;
  }

  // ../../node_modules/@loaders.gl/loader-utils/dist/lib/sources/data-source.js
  var DataSource = class {
    /** A resolved fetch function extracted from loadOptions prop */
    fetch;
    /** The actual load options, if calling a loaders.gl loader */
    loadOptions;
    _needsRefresh = true;
    props;
    constructor(props) {
      this.props = { ...props };
      this.loadOptions = { ...props.loadOptions };
      this.fetch = getFetchFunction(this.loadOptions);
    }
    setProps(props) {
      this.props = Object.assign(this.props, props);
      this.setNeedsRefresh();
    }
    /** Mark this data source as needing a refresh (redraw) */
    setNeedsRefresh() {
      this._needsRefresh = true;
    }
    /**
     * Does this data source need refreshing?
     * @note The specifics of the refresh mechanism depends on type of data source
     */
    getNeedsRefresh(clear = true) {
      const needsRefresh = this._needsRefresh;
      if (clear) {
        this._needsRefresh = false;
      }
      return needsRefresh;
    }
  };
  function getFetchFunction(options) {
    const fetchFunction = options?.fetch;
    if (fetchFunction && typeof fetchFunction === "function") {
      return (url, fetchOptions2) => fetchFunction(url, fetchOptions2);
    }
    const fetchOptions = options?.fetch;
    if (fetchOptions && typeof fetchOptions !== "function") {
      return (url) => fetch(url, fetchOptions);
    }
    return (url) => fetch(url);
  }

  // ../../node_modules/@loaders.gl/loader-utils/dist/lib/sources/image-source.js
  var ImageSource = class extends DataSource {
  };
  __publicField(ImageSource, "type", "template");
  __publicField(ImageSource, "testURL", (url) => false);

  // ../../node_modules/@loaders.gl/core/dist/javascript-utils/is-type.js
  var isBoolean = (x4) => typeof x4 === "boolean";
  var isFunction = (x4) => typeof x4 === "function";
  var isObject = (x4) => x4 !== null && typeof x4 === "object";
  var isPureObject = (x4) => isObject(x4) && x4.constructor === {}.constructor;
  var isIterable = (x4) => Boolean(x4) && typeof x4[Symbol.iterator] === "function";
  var isAsyncIterable = (x4) => x4 && typeof x4[Symbol.asyncIterator] === "function";
  var isResponse = (x4) => typeof Response !== "undefined" && x4 instanceof Response || x4 && x4.arrayBuffer && x4.text && x4.json;
  var isBlob = (x4) => typeof Blob !== "undefined" && x4 instanceof Blob;
  var isBuffer2 = (x4) => x4 && typeof x4 === "object" && x4.isBuffer;
  var isReadableDOMStream = (x4) => typeof ReadableStream !== "undefined" && x4 instanceof ReadableStream || isObject(x4) && isFunction(x4.tee) && isFunction(x4.cancel) && isFunction(x4.getReader);
  var isReadableNodeStream = (x4) => isObject(x4) && isFunction(x4.read) && isFunction(x4.pipe) && isBoolean(x4.readable);
  var isReadableStream = (x4) => isReadableDOMStream(x4) || isReadableNodeStream(x4);

  // ../../node_modules/@loaders.gl/core/dist/lib/fetch/fetch-error.js
  var FetchError = class extends Error {
    constructor(message2, info) {
      super(message2);
      this.reason = info.reason;
      this.url = info.url;
      this.response = info.response;
    }
    /** A best effort reason for why the fetch failed */
    reason;
    /** The URL that failed to load. Empty string if not available. */
    url;
    /** The Response object, if any. */
    response;
  };

  // ../../node_modules/@loaders.gl/core/dist/lib/utils/mime-type-utils.js
  var DATA_URL_PATTERN = /^data:([-\w.]+\/[-\w.+]+)(;|,)/;
  var MIME_TYPE_PATTERN = /^([-\w.]+\/[-\w.+]+)/;
  function compareMIMETypes(mimeType1, mimeType2) {
    if (mimeType1.toLowerCase() === mimeType2.toLowerCase()) {
      return true;
    }
    return false;
  }
  function parseMIMEType(mimeString) {
    const matches3 = MIME_TYPE_PATTERN.exec(mimeString);
    if (matches3) {
      return matches3[1];
    }
    return mimeString;
  }
  function parseMIMETypeFromURL(url) {
    const matches3 = DATA_URL_PATTERN.exec(url);
    if (matches3) {
      return matches3[1];
    }
    return "";
  }

  // ../../node_modules/@loaders.gl/core/dist/lib/utils/url-utils.js
  var QUERY_STRING_PATTERN = /\?.*/;
  function extractQueryString(url) {
    const matches3 = url.match(QUERY_STRING_PATTERN);
    return matches3 && matches3[0];
  }
  function stripQueryString(url) {
    return url.replace(QUERY_STRING_PATTERN, "");
  }
  function shortenUrlForDisplay(url) {
    if (url.length < 50) {
      return url;
    }
    const urlEnd = url.slice(url.length - 15);
    const urlStart = url.substr(0, 32);
    return `${urlStart}...${urlEnd}`;
  }

  // ../../node_modules/@loaders.gl/core/dist/lib/utils/resource-utils.js
  function getResourceUrl(resource) {
    if (isResponse(resource)) {
      const response = resource;
      return response.url;
    }
    if (isBlob(resource)) {
      const blob = resource;
      return blob.name || "";
    }
    if (typeof resource === "string") {
      return resource;
    }
    return "";
  }
  function getResourceMIMEType(resource) {
    if (isResponse(resource)) {
      const response = resource;
      const contentTypeHeader = response.headers.get("content-type") || "";
      const noQueryUrl = stripQueryString(response.url);
      return parseMIMEType(contentTypeHeader) || parseMIMETypeFromURL(noQueryUrl);
    }
    if (isBlob(resource)) {
      const blob = resource;
      return blob.type || "";
    }
    if (typeof resource === "string") {
      return parseMIMETypeFromURL(resource);
    }
    return "";
  }
  function getResourceContentLength(resource) {
    if (isResponse(resource)) {
      const response = resource;
      return response.headers["content-length"] || -1;
    }
    if (isBlob(resource)) {
      const blob = resource;
      return blob.size;
    }
    if (typeof resource === "string") {
      return resource.length;
    }
    if (resource instanceof ArrayBuffer) {
      return resource.byteLength;
    }
    if (ArrayBuffer.isView(resource)) {
      return resource.byteLength;
    }
    return -1;
  }

  // ../../node_modules/@loaders.gl/core/dist/lib/utils/response-utils.js
  async function makeResponse(resource) {
    if (isResponse(resource)) {
      return resource;
    }
    const headers = {};
    const contentLength = getResourceContentLength(resource);
    if (contentLength >= 0) {
      headers["content-length"] = String(contentLength);
    }
    const url = getResourceUrl(resource);
    const type = getResourceMIMEType(resource);
    if (type) {
      headers["content-type"] = type;
    }
    const initialDataUrl = await getInitialDataUrl(resource);
    if (initialDataUrl) {
      headers["x-first-bytes"] = initialDataUrl;
    }
    if (typeof resource === "string") {
      resource = new TextEncoder().encode(resource);
    }
    const response = new Response(resource, { headers });
    Object.defineProperty(response, "url", { value: url });
    return response;
  }
  async function checkResponse(response) {
    if (!response.ok) {
      const error = await getResponseError(response);
      throw error;
    }
  }
  async function getResponseError(response) {
    const shortUrl = shortenUrlForDisplay(response.url);
    let message2 = `Failed to fetch resource (${response.status}) ${response.statusText}: ${shortUrl}`;
    message2 = message2.length > 100 ? `${message2.slice(0, 100)}...` : message2;
    const info = {
      reason: response.statusText,
      url: response.url,
      response
    };
    try {
      const contentType = response.headers.get("Content-Type");
      info.reason = contentType?.includes("application/json") ? await response.json() : response.text();
    } catch (error) {
    }
    return new FetchError(message2, info);
  }
  async function getInitialDataUrl(resource) {
    const INITIAL_DATA_LENGTH = 5;
    if (typeof resource === "string") {
      return `data:,${resource.slice(0, INITIAL_DATA_LENGTH)}`;
    }
    if (resource instanceof Blob) {
      const blobSlice = resource.slice(0, 5);
      return await new Promise((resolve2) => {
        const reader = new FileReader();
        reader.onload = (event) => resolve2(event?.target?.result);
        reader.readAsDataURL(blobSlice);
      });
    }
    if (resource instanceof ArrayBuffer) {
      const slice = resource.slice(0, INITIAL_DATA_LENGTH);
      const base64 = arrayBufferToBase64(slice);
      return `data:base64,${base64}`;
    }
    return null;
  }
  function arrayBufferToBase64(buffer) {
    let binary = "";
    const bytes = new Uint8Array(buffer);
    for (let i7 = 0; i7 < bytes.byteLength; i7++) {
      binary += String.fromCharCode(bytes[i7]);
    }
    return btoa(binary);
  }

  // ../../node_modules/@loaders.gl/core/dist/lib/fetch/fetch-file.js
  function isNodePath(url) {
    return !isRequestURL(url) && !isDataURL(url);
  }
  function isRequestURL(url) {
    return url.startsWith("http:") || url.startsWith("https:");
  }
  function isDataURL(url) {
    return url.startsWith("data:");
  }
  async function fetchFile(urlOrData, fetchOptions) {
    if (typeof urlOrData === "string") {
      const url = resolvePath(urlOrData);
      if (isNodePath(url)) {
        if (globalThis.loaders?.fetchNode) {
          return globalThis.loaders?.fetchNode(url, fetchOptions);
        }
      }
      return await fetch(url, fetchOptions);
    }
    return await makeResponse(urlOrData);
  }

  // ../../node_modules/@loaders.gl/core/dist/lib/loader-utils/loggers.js
  init_dist2();
  var probeLog = new Log({ id: "loaders.gl" });
  var NullLog = class {
    log() {
      return () => {
      };
    }
    info() {
      return () => {
      };
    }
    warn() {
      return () => {
      };
    }
    error() {
      return () => {
      };
    }
  };
  var ConsoleLog = class {
    console;
    constructor() {
      this.console = console;
    }
    log(...args) {
      return this.console.log.bind(this.console, ...args);
    }
    info(...args) {
      return this.console.info.bind(this.console, ...args);
    }
    warn(...args) {
      return this.console.warn.bind(this.console, ...args);
    }
    error(...args) {
      return this.console.error.bind(this.console, ...args);
    }
  };

  // ../../node_modules/@loaders.gl/core/dist/lib/loader-utils/option-defaults.js
  var DEFAULT_LOADER_OPTIONS = {
    // baseUri
    fetch: null,
    mimeType: void 0,
    nothrow: false,
    log: new ConsoleLog(),
    // A probe.gl compatible (`log.log()()` syntax) that just logs to console
    useLocalLibraries: false,
    CDN: "https://unpkg.com/@loaders.gl",
    worker: true,
    // By default, use worker if provided by loader.
    maxConcurrency: 3,
    // How many worker instances should be created for each loader.
    maxMobileConcurrency: 1,
    // How many worker instances should be created for each loader on mobile devices.
    reuseWorkers: isBrowser,
    // By default reuse workers in browser (Node.js refuses to terminate if browsers are running)
    _nodeWorkers: false,
    // By default do not support node workers
    _workerType: "",
    // 'test' to use locally generated workers
    limit: 0,
    _limitMB: 0,
    batchSize: "auto",
    batchDebounceMs: 0,
    metadata: false,
    // TODO - currently only implemented for parseInBatches, adds initial metadata batch,
    transforms: []
  };
  var REMOVED_LOADER_OPTIONS = {
    throws: "nothrow",
    dataType: "(no longer used)",
    uri: "baseUri",
    // Warn if fetch options are used on top-level
    method: "fetch.method",
    headers: "fetch.headers",
    body: "fetch.body",
    mode: "fetch.mode",
    credentials: "fetch.credentials",
    cache: "fetch.cache",
    redirect: "fetch.redirect",
    referrer: "fetch.referrer",
    referrerPolicy: "fetch.referrerPolicy",
    integrity: "fetch.integrity",
    keepalive: "fetch.keepalive",
    signal: "fetch.signal"
  };

  // ../../node_modules/@loaders.gl/core/dist/lib/loader-utils/option-utils.js
  function getGlobalLoaderState() {
    globalThis.loaders = globalThis.loaders || {};
    const { loaders } = globalThis;
    if (!loaders._state) {
      loaders._state = {};
    }
    return loaders._state;
  }
  function getGlobalLoaderOptions() {
    const state = getGlobalLoaderState();
    state.globalOptions = state.globalOptions || { ...DEFAULT_LOADER_OPTIONS };
    return state.globalOptions;
  }
  function normalizeOptions(options, loader, loaders, url) {
    loaders = loaders || [];
    loaders = Array.isArray(loaders) ? loaders : [loaders];
    validateOptions(options, loaders);
    return normalizeOptionsInternal(loader, options, url);
  }
  function validateOptions(options, loaders) {
    validateOptionsObject(options, null, DEFAULT_LOADER_OPTIONS, REMOVED_LOADER_OPTIONS, loaders);
    for (const loader of loaders) {
      const idOptions = options && options[loader.id] || {};
      const loaderOptions = loader.options && loader.options[loader.id] || {};
      const deprecatedOptions = loader.deprecatedOptions && loader.deprecatedOptions[loader.id] || {};
      validateOptionsObject(idOptions, loader.id, loaderOptions, deprecatedOptions, loaders);
    }
  }
  function validateOptionsObject(options, id, defaultOptions4, deprecatedOptions, loaders) {
    const loaderName = id || "Top level";
    const prefix = id ? `${id}.` : "";
    for (const key in options) {
      const isSubOptions = !id && isObject(options[key]);
      const isBaseUriOption = key === "baseUri" && !id;
      const isWorkerUrlOption = key === "workerUrl" && id;
      if (!(key in defaultOptions4) && !isBaseUriOption && !isWorkerUrlOption) {
        if (key in deprecatedOptions) {
          probeLog.warn(`${loaderName} loader option '${prefix}${key}' no longer supported, use '${deprecatedOptions[key]}'`)();
        } else if (!isSubOptions) {
          const suggestion = findSimilarOption(key, loaders);
          probeLog.warn(`${loaderName} loader option '${prefix}${key}' not recognized. ${suggestion}`)();
        }
      }
    }
  }
  function findSimilarOption(optionKey, loaders) {
    const lowerCaseOptionKey = optionKey.toLowerCase();
    let bestSuggestion = "";
    for (const loader of loaders) {
      for (const key in loader.options) {
        if (optionKey === key) {
          return `Did you mean '${loader.id}.${key}'?`;
        }
        const lowerCaseKey = key.toLowerCase();
        const isPartialMatch = lowerCaseOptionKey.startsWith(lowerCaseKey) || lowerCaseKey.startsWith(lowerCaseOptionKey);
        if (isPartialMatch) {
          bestSuggestion = bestSuggestion || `Did you mean '${loader.id}.${key}'?`;
        }
      }
    }
    return bestSuggestion;
  }
  function normalizeOptionsInternal(loader, options, url) {
    const loaderDefaultOptions = loader.options || {};
    const mergedOptions = { ...loaderDefaultOptions };
    addUrlOptions(mergedOptions, url);
    if (mergedOptions.log === null) {
      mergedOptions.log = new NullLog();
    }
    mergeNestedFields(mergedOptions, getGlobalLoaderOptions());
    mergeNestedFields(mergedOptions, options);
    return mergedOptions;
  }
  function mergeNestedFields(mergedOptions, options) {
    for (const key in options) {
      if (key in options) {
        const value = options[key];
        if (isPureObject(value) && isPureObject(mergedOptions[key])) {
          mergedOptions[key] = {
            ...mergedOptions[key],
            ...options[key]
          };
        } else {
          mergedOptions[key] = options[key];
        }
      }
    }
  }
  function addUrlOptions(options, url) {
    if (url && !("baseUri" in options)) {
      options.baseUri = url;
    }
  }

  // ../../node_modules/@loaders.gl/core/dist/lib/loader-utils/normalize-loader.js
  function isLoaderObject(loader) {
    if (!loader) {
      return false;
    }
    if (Array.isArray(loader)) {
      loader = loader[0];
    }
    const hasExtensions = Array.isArray(loader?.extensions);
    return hasExtensions;
  }
  function normalizeLoader(loader) {
    assert2(loader, "null loader");
    assert2(isLoaderObject(loader), "invalid loader");
    let options;
    if (Array.isArray(loader)) {
      options = loader[1];
      loader = loader[0];
      loader = {
        ...loader,
        options: { ...loader.options, ...options }
      };
    }
    if (loader?.parseTextSync || loader?.parseText) {
      loader.text = true;
    }
    if (!loader.text) {
      loader.binary = true;
    }
    return loader;
  }

  // ../../node_modules/@loaders.gl/core/dist/lib/api/register-loaders.js
  var getGlobalLoaderRegistry = () => {
    const state = getGlobalLoaderState();
    state.loaderRegistry = state.loaderRegistry || [];
    return state.loaderRegistry;
  };
  function registerLoaders(loaders) {
    const loaderRegistry = getGlobalLoaderRegistry();
    loaders = Array.isArray(loaders) ? loaders : [loaders];
    for (const loader of loaders) {
      const normalizedLoader = normalizeLoader(loader);
      if (!loaderRegistry.find((registeredLoader) => normalizedLoader === registeredLoader)) {
        loaderRegistry.unshift(normalizedLoader);
      }
    }
  }
  function getRegisteredLoaders() {
    return getGlobalLoaderRegistry();
  }

  // ../../node_modules/@loaders.gl/core/dist/lib/utils/log.js
  init_dist2();
  var log = new Log({ id: "loaders.gl" });

  // ../../node_modules/@loaders.gl/core/dist/lib/api/select-loader.js
  var EXT_PATTERN = /\.([^.]+)$/;
  async function selectLoader(data, loaders = [], options, context) {
    if (!validHTTPResponse(data)) {
      return null;
    }
    let loader = selectLoaderSync(data, loaders, { ...options, nothrow: true }, context);
    if (loader) {
      return loader;
    }
    if (isBlob(data)) {
      data = await data.slice(0, 10).arrayBuffer();
      loader = selectLoaderSync(data, loaders, options, context);
    }
    if (!loader && !options?.nothrow) {
      throw new Error(getNoValidLoaderMessage(data));
    }
    return loader;
  }
  function selectLoaderSync(data, loaders = [], options, context) {
    if (!validHTTPResponse(data)) {
      return null;
    }
    if (loaders && !Array.isArray(loaders)) {
      return normalizeLoader(loaders);
    }
    let candidateLoaders = [];
    if (loaders) {
      candidateLoaders = candidateLoaders.concat(loaders);
    }
    if (!options?.ignoreRegisteredLoaders) {
      candidateLoaders.push(...getRegisteredLoaders());
    }
    normalizeLoaders(candidateLoaders);
    const loader = selectLoaderInternal(data, candidateLoaders, options, context);
    if (!loader && !options?.nothrow) {
      throw new Error(getNoValidLoaderMessage(data));
    }
    return loader;
  }
  function selectLoaderInternal(data, loaders, options, context) {
    const url = getResourceUrl(data);
    const type = getResourceMIMEType(data);
    const testUrl = stripQueryString(url) || context?.url;
    let loader = null;
    let reason = "";
    if (options?.mimeType) {
      loader = findLoaderByMIMEType(loaders, options?.mimeType);
      reason = `match forced by supplied MIME type ${options?.mimeType}`;
    }
    loader = loader || findLoaderByUrl(loaders, testUrl);
    reason = reason || (loader ? `matched url ${testUrl}` : "");
    loader = loader || findLoaderByMIMEType(loaders, type);
    reason = reason || (loader ? `matched MIME type ${type}` : "");
    loader = loader || findLoaderByInitialBytes(loaders, data);
    reason = reason || (loader ? `matched initial data ${getFirstCharacters2(data)}` : "");
    if (options?.fallbackMimeType) {
      loader = loader || findLoaderByMIMEType(loaders, options?.fallbackMimeType);
      reason = reason || (loader ? `matched fallback MIME type ${type}` : "");
    }
    if (reason) {
      log.log(1, `selectLoader selected ${loader?.name}: ${reason}.`);
    }
    return loader;
  }
  function validHTTPResponse(data) {
    if (data instanceof Response) {
      if (data.status === 204) {
        return false;
      }
    }
    return true;
  }
  function getNoValidLoaderMessage(data) {
    const url = getResourceUrl(data);
    const type = getResourceMIMEType(data);
    let message2 = "No valid loader found (";
    message2 += url ? `${path_exports.filename(url)}, ` : "no url provided, ";
    message2 += `MIME type: ${type ? `"${type}"` : "not provided"}, `;
    const firstCharacters = data ? getFirstCharacters2(data) : "";
    message2 += firstCharacters ? ` first bytes: "${firstCharacters}"` : "first bytes: not available";
    message2 += ")";
    return message2;
  }
  function normalizeLoaders(loaders) {
    for (const loader of loaders) {
      normalizeLoader(loader);
    }
  }
  function findLoaderByUrl(loaders, url) {
    const match = url && EXT_PATTERN.exec(url);
    const extension = match && match[1];
    return extension ? findLoaderByExtension(loaders, extension) : null;
  }
  function findLoaderByExtension(loaders, extension) {
    extension = extension.toLowerCase();
    for (const loader of loaders) {
      for (const loaderExtension of loader.extensions) {
        if (loaderExtension.toLowerCase() === extension) {
          return loader;
        }
      }
    }
    return null;
  }
  function findLoaderByMIMEType(loaders, mimeType) {
    for (const loader of loaders) {
      if (loader.mimeTypes?.some((mimeType1) => compareMIMETypes(mimeType, mimeType1))) {
        return loader;
      }
      if (compareMIMETypes(mimeType, `application/x.${loader.id}`)) {
        return loader;
      }
    }
    return null;
  }
  function findLoaderByInitialBytes(loaders, data) {
    if (!data) {
      return null;
    }
    for (const loader of loaders) {
      if (typeof data === "string") {
        if (testDataAgainstText(data, loader)) {
          return loader;
        }
      } else if (ArrayBuffer.isView(data)) {
        if (testDataAgainstBinary(data.buffer, data.byteOffset, loader)) {
          return loader;
        }
      } else if (data instanceof ArrayBuffer) {
        const byteOffset = 0;
        if (testDataAgainstBinary(data, byteOffset, loader)) {
          return loader;
        }
      }
    }
    return null;
  }
  function testDataAgainstText(data, loader) {
    if (loader.testText) {
      return loader.testText(data);
    }
    const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];
    return tests.some((test) => data.startsWith(test));
  }
  function testDataAgainstBinary(data, byteOffset, loader) {
    const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];
    return tests.some((test) => testBinary(data, byteOffset, loader, test));
  }
  function testBinary(data, byteOffset, loader, test) {
    if (test instanceof ArrayBuffer) {
      return compareArrayBuffers(test, data, test.byteLength);
    }
    switch (typeof test) {
      case "function":
        return test(data);
      case "string":
        const magic = getMagicString2(data, byteOffset, test.length);
        return test === magic;
      default:
        return false;
    }
  }
  function getFirstCharacters2(data, length17 = 5) {
    if (typeof data === "string") {
      return data.slice(0, length17);
    } else if (ArrayBuffer.isView(data)) {
      return getMagicString2(data.buffer, data.byteOffset, length17);
    } else if (data instanceof ArrayBuffer) {
      const byteOffset = 0;
      return getMagicString2(data, byteOffset, length17);
    }
    return "";
  }
  function getMagicString2(arrayBuffer2, byteOffset, length17) {
    if (arrayBuffer2.byteLength < byteOffset + length17) {
      return "";
    }
    const dataView = new DataView(arrayBuffer2);
    let magic = "";
    for (let i7 = 0; i7 < length17; i7++) {
      magic += String.fromCharCode(dataView.getUint8(byteOffset + i7));
    }
    return magic;
  }

  // ../../node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-string-iterator.js
  var DEFAULT_CHUNK_SIZE = 256 * 1024;
  function* makeStringIterator(string, options) {
    const chunkSize = options?.chunkSize || DEFAULT_CHUNK_SIZE;
    let offset = 0;
    const textEncoder = new TextEncoder();
    while (offset < string.length) {
      const chunkLength = Math.min(string.length - offset, chunkSize);
      const chunk = string.slice(offset, offset + chunkLength);
      offset += chunkLength;
      yield textEncoder.encode(chunk);
    }
  }

  // ../../node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-array-buffer-iterator.js
  var DEFAULT_CHUNK_SIZE2 = 256 * 1024;
  function* makeArrayBufferIterator(arrayBuffer2, options = {}) {
    const { chunkSize = DEFAULT_CHUNK_SIZE2 } = options;
    let byteOffset = 0;
    while (byteOffset < arrayBuffer2.byteLength) {
      const chunkByteLength = Math.min(arrayBuffer2.byteLength - byteOffset, chunkSize);
      const chunk = new ArrayBuffer(chunkByteLength);
      const sourceArray = new Uint8Array(arrayBuffer2, byteOffset, chunkByteLength);
      const chunkArray = new Uint8Array(chunk);
      chunkArray.set(sourceArray);
      byteOffset += chunkByteLength;
      yield chunk;
    }
  }

  // ../../node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-blob-iterator.js
  var DEFAULT_CHUNK_SIZE3 = 1024 * 1024;
  async function* makeBlobIterator(blob, options) {
    const chunkSize = options?.chunkSize || DEFAULT_CHUNK_SIZE3;
    let offset = 0;
    while (offset < blob.size) {
      const end = offset + chunkSize;
      const chunk = await blob.slice(offset, end).arrayBuffer();
      offset = end;
      yield chunk;
    }
  }

  // ../../node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-stream-iterator.js
  function makeStreamIterator(stream, options) {
    return isBrowser ? makeBrowserStreamIterator(stream, options) : makeNodeStreamIterator(stream, options);
  }
  async function* makeBrowserStreamIterator(stream, options) {
    const reader = stream.getReader();
    let nextBatchPromise;
    try {
      while (true) {
        const currentBatchPromise = nextBatchPromise || reader.read();
        if (options?._streamReadAhead) {
          nextBatchPromise = reader.read();
        }
        const { done, value } = await currentBatchPromise;
        if (done) {
          return;
        }
        yield toArrayBuffer2(value);
      }
    } catch (error) {
      reader.releaseLock();
    }
  }
  async function* makeNodeStreamIterator(stream, options) {
    for await (const chunk of stream) {
      yield toArrayBuffer2(chunk);
    }
  }

  // ../../node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-iterator.js
  function makeIterator(data, options) {
    if (typeof data === "string") {
      return makeStringIterator(data, options);
    }
    if (data instanceof ArrayBuffer) {
      return makeArrayBufferIterator(data, options);
    }
    if (isBlob(data)) {
      return makeBlobIterator(data, options);
    }
    if (isReadableStream(data)) {
      return makeStreamIterator(data, options);
    }
    if (isResponse(data)) {
      const response = data;
      return makeStreamIterator(response.body, options);
    }
    throw new Error("makeIterator");
  }

  // ../../node_modules/@loaders.gl/core/dist/lib/loader-utils/get-data.js
  var ERR_DATA = "Cannot convert supplied data type";
  function getArrayBufferOrStringFromDataSync(data, loader, options) {
    if (loader.text && typeof data === "string") {
      return data;
    }
    if (isBuffer2(data)) {
      data = data.buffer;
    }
    if (data instanceof ArrayBuffer) {
      const arrayBuffer2 = data;
      if (loader.text && !loader.binary) {
        const textDecoder = new TextDecoder("utf8");
        return textDecoder.decode(arrayBuffer2);
      }
      return arrayBuffer2;
    }
    if (ArrayBuffer.isView(data)) {
      if (loader.text && !loader.binary) {
        const textDecoder = new TextDecoder("utf8");
        return textDecoder.decode(data);
      }
      let arrayBuffer2 = data.buffer;
      const byteLength = data.byteLength || data.length;
      if (data.byteOffset !== 0 || byteLength !== arrayBuffer2.byteLength) {
        arrayBuffer2 = arrayBuffer2.slice(data.byteOffset, data.byteOffset + byteLength);
      }
      return arrayBuffer2;
    }
    throw new Error(ERR_DATA);
  }
  async function getArrayBufferOrStringFromData(data, loader, options) {
    const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);
    if (typeof data === "string" || isArrayBuffer) {
      return getArrayBufferOrStringFromDataSync(data, loader, options);
    }
    if (isBlob(data)) {
      data = await makeResponse(data);
    }
    if (isResponse(data)) {
      const response = data;
      await checkResponse(response);
      return loader.binary ? await response.arrayBuffer() : await response.text();
    }
    if (isReadableStream(data)) {
      data = makeIterator(data, options);
    }
    if (isIterable(data) || isAsyncIterable(data)) {
      return concatenateArrayBuffersAsync(data);
    }
    throw new Error(ERR_DATA);
  }

  // ../../node_modules/@loaders.gl/core/dist/lib/loader-utils/get-fetch-function.js
  function getFetchFunction2(options, context) {
    const globalOptions = getGlobalLoaderOptions();
    const loaderOptions = options || globalOptions;
    if (typeof loaderOptions.fetch === "function") {
      return loaderOptions.fetch;
    }
    if (isObject(loaderOptions.fetch)) {
      return (url) => fetchFile(url, loaderOptions.fetch);
    }
    if (context?.fetch) {
      return context?.fetch;
    }
    return fetchFile;
  }

  // ../../node_modules/@loaders.gl/core/dist/lib/loader-utils/loader-context.js
  function getLoaderContext(context, options, parentContext) {
    if (parentContext) {
      return parentContext;
    }
    const newContext = {
      fetch: getFetchFunction2(options, context),
      ...context
    };
    if (newContext.url) {
      const baseUrl = stripQueryString(newContext.url);
      newContext.baseUrl = baseUrl;
      newContext.queryString = extractQueryString(newContext.url);
      newContext.filename = path_exports.filename(baseUrl);
      newContext.baseUrl = path_exports.dirname(baseUrl);
    }
    if (!Array.isArray(newContext.loaders)) {
      newContext.loaders = null;
    }
    return newContext;
  }
  function getLoadersFromContext(loaders, context) {
    if (loaders && !Array.isArray(loaders)) {
      return loaders;
    }
    let candidateLoaders;
    if (loaders) {
      candidateLoaders = Array.isArray(loaders) ? loaders : [loaders];
    }
    if (context && context.loaders) {
      const contextLoaders = Array.isArray(context.loaders) ? context.loaders : [context.loaders];
      candidateLoaders = candidateLoaders ? [...candidateLoaders, ...contextLoaders] : contextLoaders;
    }
    return candidateLoaders && candidateLoaders.length ? candidateLoaders : void 0;
  }

  // ../../node_modules/@loaders.gl/core/dist/lib/api/parse.js
  async function parse(data, loaders, options, context) {
    if (loaders && !Array.isArray(loaders) && !isLoaderObject(loaders)) {
      context = void 0;
      options = loaders;
      loaders = void 0;
    }
    data = await data;
    options = options || {};
    const url = getResourceUrl(data);
    const typedLoaders = loaders;
    const candidateLoaders = getLoadersFromContext(typedLoaders, context);
    const loader = await selectLoader(data, candidateLoaders, options);
    if (!loader) {
      return null;
    }
    options = normalizeOptions(options, loader, candidateLoaders, url);
    context = getLoaderContext(
      // @ts-expect-error
      { url, _parse: parse, loaders: candidateLoaders },
      options,
      context || null
    );
    return await parseWithLoader(loader, data, options, context);
  }
  async function parseWithLoader(loader, data, options, context) {
    validateWorkerVersion(loader);
    options = mergeLoaderOptions(loader.options, options);
    if (isResponse(data)) {
      const response = data;
      const { ok, redirected, status, statusText, type, url } = response;
      const headers = Object.fromEntries(response.headers.entries());
      context.response = { headers, ok, redirected, status, statusText, type, url };
    }
    data = await getArrayBufferOrStringFromData(data, loader, options);
    const loaderWithParser = loader;
    if (loaderWithParser.parseTextSync && typeof data === "string") {
      return loaderWithParser.parseTextSync(data, options, context);
    }
    if (canParseWithWorker(loader, options)) {
      return await parseWithWorker(loader, data, options, context, parse);
    }
    if (loaderWithParser.parseText && typeof data === "string") {
      return await loaderWithParser.parseText(data, options, context);
    }
    if (loaderWithParser.parse) {
      return await loaderWithParser.parse(data, options, context);
    }
    assert4(!loaderWithParser.parseSync);
    throw new Error(`${loader.id} loader - no parser found and worker is disabled`);
  }

  // ../../node_modules/@loaders.gl/schema/dist/lib/table/simple-table/data-type.js
  function getDataTypeFromTypedArray(array) {
    switch (array.constructor) {
      case Int8Array:
        return "int8";
      case Uint8Array:
      case Uint8ClampedArray:
        return "uint8";
      case Int16Array:
        return "int16";
      case Uint16Array:
        return "uint16";
      case Int32Array:
        return "int32";
      case Uint32Array:
        return "uint32";
      case Float32Array:
        return "float32";
      case Float64Array:
        return "float64";
      default:
        return "null";
    }
  }

  // ../../node_modules/@loaders.gl/schema/dist/lib/mesh/mesh-utils.js
  function getMeshBoundingBox(attributes) {
    let minX = Infinity;
    let minY = Infinity;
    let minZ = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    let maxZ = -Infinity;
    const positions = attributes.POSITION ? attributes.POSITION.value : [];
    const len9 = positions && positions.length;
    for (let i7 = 0; i7 < len9; i7 += 3) {
      const x4 = positions[i7];
      const y5 = positions[i7 + 1];
      const z4 = positions[i7 + 2];
      minX = x4 < minX ? x4 : minX;
      minY = y5 < minY ? y5 : minY;
      minZ = z4 < minZ ? z4 : minZ;
      maxX = x4 > maxX ? x4 : maxX;
      maxY = y5 > maxY ? y5 : maxY;
      maxZ = z4 > maxZ ? z4 : maxZ;
    }
    return [
      [minX, minY, minZ],
      [maxX, maxY, maxZ]
    ];
  }

  // ../../node_modules/@loaders.gl/schema/dist/lib/mesh/deduce-mesh-schema.js
  function deduceMeshField(name13, attribute, optionalMetadata) {
    const type = getDataTypeFromTypedArray(attribute.value);
    const metadata = optionalMetadata ? optionalMetadata : makeMeshAttributeMetadata(attribute);
    return {
      name: name13,
      type: { type: "fixed-size-list", listSize: attribute.size, children: [{ name: "value", type }] },
      nullable: false,
      metadata
    };
  }
  function makeMeshAttributeMetadata(attribute) {
    const result = {};
    if ("byteOffset" in attribute) {
      result.byteOffset = attribute.byteOffset.toString(10);
    }
    if ("byteStride" in attribute) {
      result.byteStride = attribute.byteStride.toString(10);
    }
    if ("normalized" in attribute) {
      result.normalized = attribute.normalized.toString();
    }
    return result;
  }

  // ../../node_modules/@loaders.gl/core/dist/lib/api/load.js
  async function load(url, loaders, options, context) {
    let resolvedLoaders;
    let resolvedOptions;
    if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {
      resolvedLoaders = [];
      resolvedOptions = loaders;
      context = void 0;
    } else {
      resolvedLoaders = loaders;
      resolvedOptions = options;
    }
    const fetch2 = getFetchFunction2(resolvedOptions);
    let data = url;
    if (typeof url === "string") {
      data = await fetch2(url);
    }
    if (isBlob(url)) {
      data = await fetch2(url);
    }
    return Array.isArray(resolvedLoaders) ? await parse(data, resolvedLoaders, resolvedOptions) : await parse(data, resolvedLoaders, resolvedOptions);
  }

  // ../../node_modules/@loaders.gl/images/dist/lib/utils/version.js
  var VERSION3 = true ? "4.2.1" : "latest";

  // ../../node_modules/@loaders.gl/images/dist/lib/category-api/image-type.js
  var parseImageNode = globalThis.loaders?.parseImageNode;
  var IMAGE_SUPPORTED = typeof Image !== "undefined";
  var IMAGE_BITMAP_SUPPORTED = typeof ImageBitmap !== "undefined";
  var NODE_IMAGE_SUPPORTED = Boolean(parseImageNode);
  var DATA_SUPPORTED = isBrowser ? true : NODE_IMAGE_SUPPORTED;
  function isImageTypeSupported(type) {
    switch (type) {
      case "auto":
        return IMAGE_BITMAP_SUPPORTED || IMAGE_SUPPORTED || DATA_SUPPORTED;
      case "imagebitmap":
        return IMAGE_BITMAP_SUPPORTED;
      case "image":
        return IMAGE_SUPPORTED;
      case "data":
        return DATA_SUPPORTED;
      default:
        throw new Error(`@loaders.gl/images: image ${type} not supported in this environment`);
    }
  }
  function getDefaultImageType() {
    if (IMAGE_BITMAP_SUPPORTED) {
      return "imagebitmap";
    }
    if (IMAGE_SUPPORTED) {
      return "image";
    }
    if (DATA_SUPPORTED) {
      return "data";
    }
    throw new Error("Install '@loaders.gl/polyfills' to parse images under Node.js");
  }

  // ../../node_modules/@loaders.gl/images/dist/lib/category-api/parsed-image-api.js
  function getImageType(image) {
    const format = getImageTypeOrNull(image);
    if (!format) {
      throw new Error("Not an image");
    }
    return format;
  }
  function getImageData(image) {
    switch (getImageType(image)) {
      case "data":
        return image;
      case "image":
      case "imagebitmap":
        const canvas2 = document.createElement("canvas");
        const context = canvas2.getContext("2d");
        if (!context) {
          throw new Error("getImageData");
        }
        canvas2.width = image.width;
        canvas2.height = image.height;
        context.drawImage(image, 0, 0);
        return context.getImageData(0, 0, image.width, image.height);
      default:
        throw new Error("getImageData");
    }
  }
  function getImageTypeOrNull(image) {
    if (typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
      return "imagebitmap";
    }
    if (typeof Image !== "undefined" && image instanceof Image) {
      return "image";
    }
    if (image && typeof image === "object" && image.data && image.width && image.height) {
      return "data";
    }
    return null;
  }

  // ../../node_modules/@loaders.gl/images/dist/lib/parsers/svg-utils.js
  var SVG_DATA_URL_PATTERN = /^data:image\/svg\+xml/;
  var SVG_URL_PATTERN = /\.svg((\?|#).*)?$/;
  function isSVG(url) {
    return url && (SVG_DATA_URL_PATTERN.test(url) || SVG_URL_PATTERN.test(url));
  }
  function getBlobOrSVGDataUrl(arrayBuffer2, url) {
    if (isSVG(url)) {
      const textDecoder = new TextDecoder();
      let xmlText = textDecoder.decode(arrayBuffer2);
      try {
        if (typeof unescape === "function" && typeof encodeURIComponent === "function") {
          xmlText = unescape(encodeURIComponent(xmlText));
        }
      } catch (error) {
        throw new Error(error.message);
      }
      const src = `data:image/svg+xml;base64,${btoa(xmlText)}`;
      return src;
    }
    return getBlob(arrayBuffer2, url);
  }
  function getBlob(arrayBuffer2, url) {
    if (isSVG(url)) {
      throw new Error("SVG cannot be parsed directly to imagebitmap");
    }
    return new Blob([new Uint8Array(arrayBuffer2)]);
  }

  // ../../node_modules/@loaders.gl/images/dist/lib/parsers/parse-to-image.js
  async function parseToImage(arrayBuffer2, options, url) {
    const blobOrDataUrl = getBlobOrSVGDataUrl(arrayBuffer2, url);
    const URL2 = self.URL || self.webkitURL;
    const objectUrl = typeof blobOrDataUrl !== "string" && URL2.createObjectURL(blobOrDataUrl);
    try {
      return await loadToImage(objectUrl || blobOrDataUrl, options);
    } finally {
      if (objectUrl) {
        URL2.revokeObjectURL(objectUrl);
      }
    }
  }
  async function loadToImage(url, options) {
    const image = new Image();
    image.src = url;
    if (options.image && options.image.decode && image.decode) {
      await image.decode();
      return image;
    }
    return await new Promise((resolve2, reject) => {
      try {
        image.onload = () => resolve2(image);
        image.onerror = (error) => {
          const message2 = error instanceof Error ? error.message : "error";
          reject(new Error(message2));
        };
      } catch (error) {
        reject(error);
      }
    });
  }

  // ../../node_modules/@loaders.gl/images/dist/lib/parsers/parse-to-image-bitmap.js
  var EMPTY_OBJECT = {};
  var imagebitmapOptionsSupported = true;
  async function parseToImageBitmap(arrayBuffer2, options, url) {
    let blob;
    if (isSVG(url)) {
      const image = await parseToImage(arrayBuffer2, options, url);
      blob = image;
    } else {
      blob = getBlob(arrayBuffer2, url);
    }
    const imagebitmapOptions = options && options.imagebitmap;
    return await safeCreateImageBitmap(blob, imagebitmapOptions);
  }
  async function safeCreateImageBitmap(blob, imagebitmapOptions = null) {
    if (isEmptyObject(imagebitmapOptions) || !imagebitmapOptionsSupported) {
      imagebitmapOptions = null;
    }
    if (imagebitmapOptions) {
      try {
        return await createImageBitmap(blob, imagebitmapOptions);
      } catch (error) {
        console.warn(error);
        imagebitmapOptionsSupported = false;
      }
    }
    return await createImageBitmap(blob);
  }
  function isEmptyObject(object) {
    for (const key in object || EMPTY_OBJECT) {
      return false;
    }
    return true;
  }

  // ../../node_modules/@loaders.gl/images/dist/lib/category-api/parse-isobmff-binary.js
  function getISOBMFFMediaType(buffer) {
    if (!checkString(buffer, "ftyp", 4)) {
      return null;
    }
    if ((buffer[8] & 96) === 0) {
      return null;
    }
    return decodeMajorBrand(buffer);
  }
  function decodeMajorBrand(buffer) {
    const brandMajor = getUTF8String(buffer, 8, 12).replace("\0", " ").trim();
    switch (brandMajor) {
      case "avif":
      case "avis":
        return { extension: "avif", mimeType: "image/avif" };
      default:
        return null;
    }
  }
  function getUTF8String(array, start, end) {
    return String.fromCharCode(...array.slice(start, end));
  }
  function stringToBytes(string) {
    return [...string].map((character) => character.charCodeAt(0));
  }
  function checkString(buffer, header, offset = 0) {
    const headerBytes = stringToBytes(header);
    for (let i7 = 0; i7 < headerBytes.length; ++i7) {
      if (headerBytes[i7] !== buffer[i7 + offset]) {
        return false;
      }
    }
    return true;
  }

  // ../../node_modules/@loaders.gl/images/dist/lib/category-api/binary-image-api.js
  var BIG_ENDIAN = false;
  var LITTLE_ENDIAN = true;
  function getBinaryImageMetadata(binaryData) {
    const dataView = toDataView(binaryData);
    return getPngMetadata(dataView) || getJpegMetadata(dataView) || getGifMetadata(dataView) || getBmpMetadata(dataView) || getISOBMFFMetadata(dataView);
  }
  function getISOBMFFMetadata(binaryData) {
    const buffer = new Uint8Array(binaryData instanceof DataView ? binaryData.buffer : binaryData);
    const mediaType = getISOBMFFMediaType(buffer);
    if (!mediaType) {
      return null;
    }
    return {
      mimeType: mediaType.mimeType,
      // TODO - decode width and height
      width: 0,
      height: 0
    };
  }
  function getPngMetadata(binaryData) {
    const dataView = toDataView(binaryData);
    const isPng = dataView.byteLength >= 24 && dataView.getUint32(0, BIG_ENDIAN) === 2303741511;
    if (!isPng) {
      return null;
    }
    return {
      mimeType: "image/png",
      width: dataView.getUint32(16, BIG_ENDIAN),
      height: dataView.getUint32(20, BIG_ENDIAN)
    };
  }
  function getGifMetadata(binaryData) {
    const dataView = toDataView(binaryData);
    const isGif = dataView.byteLength >= 10 && dataView.getUint32(0, BIG_ENDIAN) === 1195984440;
    if (!isGif) {
      return null;
    }
    return {
      mimeType: "image/gif",
      width: dataView.getUint16(6, LITTLE_ENDIAN),
      height: dataView.getUint16(8, LITTLE_ENDIAN)
    };
  }
  function getBmpMetadata(binaryData) {
    const dataView = toDataView(binaryData);
    const isBmp = dataView.byteLength >= 14 && dataView.getUint16(0, BIG_ENDIAN) === 16973 && dataView.getUint32(2, LITTLE_ENDIAN) === dataView.byteLength;
    if (!isBmp) {
      return null;
    }
    return {
      mimeType: "image/bmp",
      width: dataView.getUint32(18, LITTLE_ENDIAN),
      height: dataView.getUint32(22, LITTLE_ENDIAN)
    };
  }
  function getJpegMetadata(binaryData) {
    const dataView = toDataView(binaryData);
    const isJpeg = dataView.byteLength >= 3 && dataView.getUint16(0, BIG_ENDIAN) === 65496 && dataView.getUint8(2) === 255;
    if (!isJpeg) {
      return null;
    }
    const { tableMarkers, sofMarkers } = getJpegMarkers();
    let i7 = 2;
    while (i7 + 9 < dataView.byteLength) {
      const marker2 = dataView.getUint16(i7, BIG_ENDIAN);
      if (sofMarkers.has(marker2)) {
        return {
          mimeType: "image/jpeg",
          height: dataView.getUint16(i7 + 5, BIG_ENDIAN),
          // Number of lines
          width: dataView.getUint16(i7 + 7, BIG_ENDIAN)
          // Number of pixels per line
        };
      }
      if (!tableMarkers.has(marker2)) {
        return null;
      }
      i7 += 2;
      i7 += dataView.getUint16(i7, BIG_ENDIAN);
    }
    return null;
  }
  function getJpegMarkers() {
    const tableMarkers = /* @__PURE__ */ new Set([65499, 65476, 65484, 65501, 65534]);
    for (let i7 = 65504; i7 < 65520; ++i7) {
      tableMarkers.add(i7);
    }
    const sofMarkers = /* @__PURE__ */ new Set([
      65472,
      65473,
      65474,
      65475,
      65477,
      65478,
      65479,
      65481,
      65482,
      65483,
      65485,
      65486,
      65487,
      65502
    ]);
    return { tableMarkers, sofMarkers };
  }
  function toDataView(data) {
    if (data instanceof DataView) {
      return data;
    }
    if (ArrayBuffer.isView(data)) {
      return new DataView(data.buffer);
    }
    if (data instanceof ArrayBuffer) {
      return new DataView(data);
    }
    throw new Error("toDataView");
  }

  // ../../node_modules/@loaders.gl/images/dist/lib/parsers/parse-to-node-image.js
  async function parseToNodeImage(arrayBuffer2, options) {
    const { mimeType } = getBinaryImageMetadata(arrayBuffer2) || {};
    const parseImageNode2 = globalThis.loaders?.parseImageNode;
    assert2(parseImageNode2);
    return await parseImageNode2(arrayBuffer2, mimeType);
  }

  // ../../node_modules/@loaders.gl/images/dist/lib/parsers/parse-image.js
  async function parseImage(arrayBuffer2, options, context) {
    options = options || {};
    const imageOptions = options.image || {};
    const imageType = imageOptions.type || "auto";
    const { url } = context || {};
    const loadType = getLoadableImageType(imageType);
    let image;
    switch (loadType) {
      case "imagebitmap":
        image = await parseToImageBitmap(arrayBuffer2, options, url);
        break;
      case "image":
        image = await parseToImage(arrayBuffer2, options, url);
        break;
      case "data":
        image = await parseToNodeImage(arrayBuffer2, options);
        break;
      default:
        assert2(false);
    }
    if (imageType === "data") {
      image = getImageData(image);
    }
    return image;
  }
  function getLoadableImageType(type) {
    switch (type) {
      case "auto":
      case "data":
        return getDefaultImageType();
      default:
        isImageTypeSupported(type);
        return type;
    }
  }

  // ../../node_modules/@loaders.gl/images/dist/image-loader.js
  var EXTENSIONS = ["png", "jpg", "jpeg", "gif", "webp", "bmp", "ico", "svg", "avif"];
  var MIME_TYPES = [
    "image/png",
    "image/jpeg",
    "image/gif",
    "image/webp",
    "image/avif",
    "image/bmp",
    "image/vnd.microsoft.icon",
    "image/svg+xml"
  ];
  var DEFAULT_IMAGE_LOADER_OPTIONS = {
    image: {
      type: "auto",
      decode: true
      // if format is HTML
    }
    // imagebitmap: {} - passes (platform dependent) parameters to ImageBitmap constructor
  };
  var ImageLoader = {
    dataType: null,
    batchType: null,
    id: "image",
    module: "images",
    name: "Images",
    version: VERSION3,
    mimeTypes: MIME_TYPES,
    extensions: EXTENSIONS,
    parse: parseImage,
    // TODO: byteOffset, byteLength;
    tests: [(arrayBuffer2) => Boolean(getBinaryImageMetadata(new DataView(arrayBuffer2)))],
    options: DEFAULT_IMAGE_LOADER_OPTIONS
  };

  // ../../node_modules/@loaders.gl/images/dist/lib/category-api/image-format.js
  var mimeTypeSupportedSync = {};
  function isImageFormatSupported(mimeType) {
    if (mimeTypeSupportedSync[mimeType] === void 0) {
      const supported = isBrowser ? checkBrowserImageFormatSupport(mimeType) : checkNodeImageFormatSupport(mimeType);
      mimeTypeSupportedSync[mimeType] = supported;
    }
    return mimeTypeSupportedSync[mimeType];
  }
  function checkNodeImageFormatSupport(mimeType) {
    const NODE_FORMAT_SUPPORT = ["image/png", "image/jpeg", "image/gif"];
    const imageFormatsNode = globalThis.loaders?.imageFormatsNode || NODE_FORMAT_SUPPORT;
    const parseImageNode2 = globalThis.loaders?.parseImageNode;
    return Boolean(parseImageNode2) && imageFormatsNode.includes(mimeType);
  }
  function checkBrowserImageFormatSupport(mimeType) {
    switch (mimeType) {
      case "image/avif":
      case "image/webp":
        return testBrowserImageFormatSupport(mimeType);
      default:
        return true;
    }
  }
  function testBrowserImageFormatSupport(mimeType) {
    try {
      const element = document.createElement("canvas");
      const dataURL = element.toDataURL(mimeType);
      return dataURL.indexOf(`data:${mimeType}`) === 0;
    } catch {
      return false;
    }
  }

  // ../core/src/utils/log.ts
  init_dist2();
  var defaultLogger = new Log({ id: "deck" });
  var log_default = defaultLogger;

  // ../core/src/debug/loggers.ts
  var logState = {
    attributeUpdateStart: -1,
    attributeManagerUpdateStart: -1,
    attributeUpdateMessages: []
  };
  var LOG_LEVEL_MAJOR_UPDATE = 1;
  var LOG_LEVEL_MINOR_UPDATE = 2;
  var LOG_LEVEL_UPDATE_DETAIL = 3;
  var LOG_LEVEL_INFO = 4;
  var LOG_LEVEL_DRAW = 2;
  var getLoggers = (log3) => ({
    /* Layer events */
    "layer.changeFlag": (layer, key, flags) => {
      log3.log(LOG_LEVEL_UPDATE_DETAIL, `${layer.id} ${key}: `, flags[key])();
    },
    "layer.initialize": (layer) => {
      log3.log(LOG_LEVEL_MAJOR_UPDATE, `Initializing ${layer}`)();
    },
    "layer.update": (layer, needsUpdate) => {
      if (needsUpdate) {
        const flags = layer.getChangeFlags();
        log3.log(
          LOG_LEVEL_MINOR_UPDATE,
          `Updating ${layer} because: ${Object.keys(flags).filter((key) => flags[key]).join(", ")}`
        )();
      } else {
        log3.log(LOG_LEVEL_INFO, `${layer} does not need update`)();
      }
    },
    "layer.matched": (layer, changed) => {
      if (changed) {
        log3.log(LOG_LEVEL_INFO, `Matched ${layer}, state transfered`)();
      }
    },
    "layer.finalize": (layer) => {
      log3.log(LOG_LEVEL_MAJOR_UPDATE, `Finalizing ${layer}`)();
    },
    /* CompositeLayer events */
    "compositeLayer.renderLayers": (layer, updated, subLayers) => {
      if (updated) {
        log3.log(
          LOG_LEVEL_MINOR_UPDATE,
          `Composite layer rendered new subLayers ${layer}`,
          subLayers
        )();
      } else {
        log3.log(LOG_LEVEL_INFO, `Composite layer reused subLayers ${layer}`, subLayers)();
      }
    },
    /* LayerManager events */
    "layerManager.setLayers": (layerManager, updated, layers) => {
      if (updated) {
        log3.log(LOG_LEVEL_MINOR_UPDATE, `Updating ${layers.length} deck layers`)();
      }
    },
    "layerManager.activateViewport": (layerManager, viewport) => {
      log3.log(LOG_LEVEL_UPDATE_DETAIL, "Viewport changed", viewport)();
    },
    /* AttributeManager events */
    "attributeManager.invalidate": (attributeManager, trigger, attributeNames) => {
      log3.log(
        LOG_LEVEL_MAJOR_UPDATE,
        attributeNames ? `invalidated attributes ${attributeNames} (${trigger}) for ${attributeManager.id}` : `invalidated all attributes for ${attributeManager.id}`
      )();
    },
    "attributeManager.updateStart": (attributeManager) => {
      logState.attributeUpdateMessages.length = 0;
      logState.attributeManagerUpdateStart = Date.now();
    },
    "attributeManager.updateEnd": (attributeManager, numInstances) => {
      const timeMs = Math.round(Date.now() - logState.attributeManagerUpdateStart);
      log3.groupCollapsed(
        LOG_LEVEL_MINOR_UPDATE,
        `Updated attributes for ${numInstances} instances in ${attributeManager.id} in ${timeMs}ms`
      )();
      for (const updateMessage of logState.attributeUpdateMessages) {
        log3.log(LOG_LEVEL_UPDATE_DETAIL, updateMessage)();
      }
      log3.groupEnd(LOG_LEVEL_MINOR_UPDATE)();
    },
    /* Attribute events */
    "attribute.updateStart": (attribute) => {
      logState.attributeUpdateStart = Date.now();
    },
    "attribute.allocate": (attribute, numInstances) => {
      const message2 = `${attribute.id} allocated ${numInstances}`;
      logState.attributeUpdateMessages.push(message2);
    },
    "attribute.updateEnd": (attribute, numInstances) => {
      const timeMs = Math.round(Date.now() - logState.attributeUpdateStart);
      const message2 = `${attribute.id} updated ${numInstances} in ${timeMs}ms`;
      logState.attributeUpdateMessages.push(message2);
    },
    /* Render events */
    "deckRenderer.renderLayers": (deckRenderer, renderStats, opts) => {
      const { pass, redrawReason, stats: stats2 } = opts;
      for (const status of renderStats) {
        const { totalCount, visibleCount, compositeCount, pickableCount } = status;
        const primitiveCount = totalCount - compositeCount;
        const hiddenCount = primitiveCount - visibleCount;
        log3.log(
          LOG_LEVEL_DRAW,
          `RENDER #${deckRenderer.renderCount}   ${visibleCount} (of ${totalCount} layers) to ${pass} because ${redrawReason}   (${hiddenCount} hidden, ${compositeCount} composite ${pickableCount} pickable)`
        )();
        if (stats2) {
          stats2.get("Redraw Layers").add(visibleCount);
        }
      }
    }
  });

  // ../core/src/debug/index.ts
  var loggers = {};
  if (true) {
    loggers = getLoggers(log_default);
  }
  function register(handlers) {
    loggers = handlers;
  }
  function debug(eventType, arg1, arg2, arg3) {
    if (log_default.level > 0 && loggers[eventType]) {
      loggers[eventType].call(null, arg1, arg2, arg3);
    }
  }

  // ../core/src/utils/json-loader.ts
  function isJSON(text) {
    const firstChar = text[0];
    const lastChar = text[text.length - 1];
    return firstChar === "{" && lastChar === "}" || firstChar === "[" && lastChar === "]";
  }
  var json_loader_default = {
    dataType: null,
    batchType: null,
    id: "JSON",
    name: "JSON",
    module: "",
    version: "",
    options: {},
    extensions: ["json", "geojson"],
    mimeTypes: ["application/json", "application/geo+json"],
    testText: isJSON,
    parseTextSync: JSON.parse
  };

  // ../core/src/lib/init.ts
  function checkVersion() {
    const version = typeof __VERSION__ !== "undefined" ? __VERSION__ : globalThis.DECK_VERSION || "untranspiled source";
    const existingVersion = globalThis.deck && globalThis.deck.VERSION;
    if (existingVersion && existingVersion !== version) {
      throw new Error(`deck.gl - multiple versions detected: ${existingVersion} vs ${version}`);
    }
    if (!existingVersion) {
      log_default.log(1, `deck.gl ${version}`)();
      globalThis.deck = {
        ...globalThis.deck,
        VERSION: version,
        version,
        log: log_default,
        // experimental
        _registerLoggers: register
      };
      registerLoaders([
        json_loader_default,
        // @ts-expect-error non-standard Loader format
        [ImageLoader, { imagebitmap: { premultiplyAlpha: "none" } }]
      ]);
    }
    return version;
  }
  var VERSION4 = checkVersion();

  // ../../node_modules/@luma.gl/shadertools/dist/lib/utils/assert.js
  function assert5(condition, message2) {
    if (!condition) {
      throw new Error(message2 || "shadertools: assertion failed.");
    }
  }

  // ../../node_modules/@luma.gl/shadertools/dist/lib/filters/prop-types.js
  var DEFAULT_PROP_VALIDATORS = {
    number: {
      type: "number",
      validate(value, propType) {
        return Number.isFinite(value) && typeof propType === "object" && (propType.max === void 0 || value <= propType.max) && (propType.min === void 0 || value >= propType.min);
      }
    },
    array: {
      type: "array",
      validate(value, propType) {
        return Array.isArray(value) || ArrayBuffer.isView(value);
      }
    }
  };
  function makePropValidators(propTypes) {
    const propValidators = {};
    for (const [name13, propType] of Object.entries(propTypes)) {
      propValidators[name13] = makePropValidator(propType);
    }
    return propValidators;
  }
  function makePropValidator(propType) {
    let type = getTypeOf(propType);
    if (type !== "object") {
      return { value: propType, ...DEFAULT_PROP_VALIDATORS[type], type };
    }
    if (typeof propType === "object") {
      if (!propType) {
        return { type: "object", value: null };
      }
      if (propType.type !== void 0) {
        return { ...propType, ...DEFAULT_PROP_VALIDATORS[propType.type], type: propType.type };
      }
      if (propType.value === void 0) {
        return { type: "object", value: propType };
      }
      type = getTypeOf(propType.value);
      return { ...propType, ...DEFAULT_PROP_VALIDATORS[type], type };
    }
    throw new Error("props");
  }
  function getTypeOf(value) {
    if (Array.isArray(value) || ArrayBuffer.isView(value)) {
      return "array";
    }
    return typeof value;
  }

  // ../../node_modules/@luma.gl/shadertools/dist/module-injectors.js
  var MODULE_INJECTORS_VS = (
    /* glsl */
    `#ifdef MODULE_LOGDEPTH
  logdepth_adjustPosition(gl_Position);
#endif
`
  );
  var MODULE_INJECTORS_FS = (
    /* glsl */
    `#ifdef MODULE_MATERIAL
  fragColor = material_filterColor(fragColor);
#endif

#ifdef MODULE_LIGHTING
  fragColor = lighting_filterColor(fragColor);
#endif

#ifdef MODULE_FOG
  fragColor = fog_filterColor(fragColor);
#endif

#ifdef MODULE_PICKING
  fragColor = picking_filterHighlightColor(fragColor);
  fragColor = picking_filterPickingColor(fragColor);
#endif

#ifdef MODULE_LOGDEPTH
  logdepth_setFragDepth();
#endif
`
  );

  // ../../node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/shader-injections.js
  var MODULE_INJECTORS = {
    vertex: MODULE_INJECTORS_VS,
    fragment: MODULE_INJECTORS_FS
  };
  var REGEX_START_OF_MAIN = /void\s+main\s*\([^)]*\)\s*\{\n?/;
  var REGEX_END_OF_MAIN = /}\n?[^{}]*$/;
  var fragments = [];
  var DECLARATION_INJECT_MARKER = "__LUMA_INJECT_DECLARATIONS__";
  function normalizeInjections(injections) {
    const result = { vertex: {}, fragment: {} };
    for (const hook in injections) {
      let injection = injections[hook];
      const stage = getHookStage(hook);
      if (typeof injection === "string") {
        injection = {
          order: 0,
          injection
        };
      }
      result[stage][hook] = injection;
    }
    return result;
  }
  function getHookStage(hook) {
    const type = hook.slice(0, 2);
    switch (type) {
      case "vs":
        return "vertex";
      case "fs":
        return "fragment";
      default:
        throw new Error(type);
    }
  }
  function injectShader(source4, stage, inject6, injectStandardStubs = false) {
    const isVertex = stage === "vertex";
    for (const key in inject6) {
      const fragmentData = inject6[key];
      fragmentData.sort((a6, b4) => a6.order - b4.order);
      fragments.length = fragmentData.length;
      for (let i7 = 0, len9 = fragmentData.length; i7 < len9; ++i7) {
        fragments[i7] = fragmentData[i7].injection;
      }
      const fragmentString = `${fragments.join("\n")}
`;
      switch (key) {
        case "vs:#decl":
          if (isVertex) {
            source4 = source4.replace(DECLARATION_INJECT_MARKER, fragmentString);
          }
          break;
        case "vs:#main-start":
          if (isVertex) {
            source4 = source4.replace(REGEX_START_OF_MAIN, (match) => match + fragmentString);
          }
          break;
        case "vs:#main-end":
          if (isVertex) {
            source4 = source4.replace(REGEX_END_OF_MAIN, (match) => fragmentString + match);
          }
          break;
        case "fs:#decl":
          if (!isVertex) {
            source4 = source4.replace(DECLARATION_INJECT_MARKER, fragmentString);
          }
          break;
        case "fs:#main-start":
          if (!isVertex) {
            source4 = source4.replace(REGEX_START_OF_MAIN, (match) => match + fragmentString);
          }
          break;
        case "fs:#main-end":
          if (!isVertex) {
            source4 = source4.replace(REGEX_END_OF_MAIN, (match) => fragmentString + match);
          }
          break;
        default:
          source4 = source4.replace(key, (match) => match + fragmentString);
      }
    }
    source4 = source4.replace(DECLARATION_INJECT_MARKER, "");
    if (injectStandardStubs) {
      source4 = source4.replace(/\}\s*$/, (match) => match + MODULE_INJECTORS[stage]);
    }
    return source4;
  }

  // ../../node_modules/@luma.gl/shadertools/dist/lib/shader-module/shader-module.js
  function initializeShaderModules(modules) {
    modules.map((module) => initializeShaderModule(module));
  }
  function initializeShaderModule(module) {
    if (module.instance) {
      return;
    }
    initializeShaderModules(module.dependencies || []);
    const {
      propTypes = {},
      deprecations = [],
      // defines = {},
      inject: inject6 = {}
    } = module;
    const instance = {
      normalizedInjections: normalizeInjections(inject6),
      parsedDeprecations: parseDeprecationDefinitions(deprecations)
    };
    if (propTypes) {
      instance.propValidators = makePropValidators(propTypes);
    }
    module.instance = instance;
    let defaultProps49 = {};
    if (propTypes) {
      defaultProps49 = Object.entries(propTypes).reduce((obj, [key, propType]) => {
        const value = propType?.value;
        if (value) {
          obj[key] = value;
        }
        return obj;
      }, {});
    }
    module.defaultUniforms = { ...module.defaultUniforms, ...defaultProps49 };
  }
  function checkShaderModuleDeprecations(shaderModule, shaderSource, log3) {
    shaderModule.deprecations?.forEach((def) => {
      if (def.regex?.test(shaderSource)) {
        if (def.deprecated) {
          log3.deprecated(def.old, def.new)();
        } else {
          log3.removed(def.old, def.new)();
        }
      }
    });
  }
  function parseDeprecationDefinitions(deprecations) {
    deprecations.forEach((def) => {
      switch (def.type) {
        case "function":
          def.regex = new RegExp(`\\b${def.old}\\(`);
          break;
        default:
          def.regex = new RegExp(`${def.type} ${def.old};`);
      }
    });
    return deprecations;
  }

  // ../../node_modules/@luma.gl/shadertools/dist/lib/shader-module/shader-module-dependencies.js
  function getShaderModuleDependencies(modules) {
    initializeShaderModules(modules);
    const moduleMap = {};
    const moduleDepth = {};
    getDependencyGraph({ modules, level: 0, moduleMap, moduleDepth });
    const dependencies = Object.keys(moduleDepth).sort((a6, b4) => moduleDepth[b4] - moduleDepth[a6]).map((name13) => moduleMap[name13]);
    initializeShaderModules(dependencies);
    return dependencies;
  }
  function getDependencyGraph(options) {
    const { modules, level, moduleMap, moduleDepth } = options;
    if (level >= 5) {
      throw new Error("Possible loop in shader dependency graph");
    }
    for (const module of modules) {
      moduleMap[module.name] = module;
      if (moduleDepth[module.name] === void 0 || moduleDepth[module.name] < level) {
        moduleDepth[module.name] = level;
      }
    }
    for (const module of modules) {
      if (module.dependencies) {
        getDependencyGraph({ modules: module.dependencies, level: level + 1, moduleMap, moduleDepth });
      }
    }
  }

  // ../../node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/platform-defines.js
  function getPlatformShaderDefines(platformInfo) {
    switch (platformInfo?.gpu.toLowerCase()) {
      case "apple":
        return (
          /* glsl */
          `#define APPLE_GPU
// Apple optimizes away the calculation necessary for emulated fp64
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1
// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow
#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1
`
        );
      case "nvidia":
        return (
          /* glsl */
          `#define NVIDIA_GPU
// Nvidia optimizes away the calculation necessary for emulated fp64
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
`
        );
      case "intel":
        return (
          /* glsl */
          `#define INTEL_GPU
// Intel optimizes away the calculation necessary for emulated fp64
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
// Intel's built-in 'tan' function doesn't have acceptable precision
#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1
// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow
#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1
`
        );
      case "amd":
        return (
          /* glsl */
          `#define AMD_GPU
`
        );
      default:
        return (
          /* glsl */
          `#define DEFAULT_GPU
// Prevent driver from optimizing away the calculation necessary for emulated fp64
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
// Headless Chrome's software shader 'tan' function doesn't have acceptable precision
#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1
// If the GPU doesn't have full 32 bits precision, will causes overflow
#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1
`
        );
    }
  }

  // ../../node_modules/@luma.gl/shadertools/dist/lib/shader-transpiler/transpile-glsl-shader.js
  function transpileGLSLShader(source4, stage) {
    const sourceGLSLVersion = Number(source4.match(/^#version[ \t]+(\d+)/m)?.[1] || 100);
    if (sourceGLSLVersion !== 300) {
      throw new Error("luma.gl v9 only supports GLSL 3.00 shader sources");
    }
    switch (stage) {
      case "vertex":
        source4 = convertShader(source4, ES300_VERTEX_REPLACEMENTS);
        return source4;
      case "fragment":
        source4 = convertShader(source4, ES300_FRAGMENT_REPLACEMENTS);
        return source4;
      default:
        throw new Error(stage);
    }
  }
  var ES300_REPLACEMENTS = [
    // Fix poorly formatted version directive
    [/^(#version[ \t]+(100|300[ \t]+es))?[ \t]*\n/, "#version 300 es\n"],
    // The individual `texture...()` functions were replaced with `texture()` overloads
    [/\btexture(2D|2DProj|Cube)Lod(EXT)?\(/g, "textureLod("],
    [/\btexture(2D|2DProj|Cube)(EXT)?\(/g, "texture("]
  ];
  var ES300_VERTEX_REPLACEMENTS = [
    ...ES300_REPLACEMENTS,
    // `attribute` keyword replaced with `in`
    [makeVariableTextRegExp("attribute"), "in $1"],
    // `varying` keyword replaced with `out`
    [makeVariableTextRegExp("varying"), "out $1"]
  ];
  var ES300_FRAGMENT_REPLACEMENTS = [
    ...ES300_REPLACEMENTS,
    // `varying` keyword replaced with `in`
    [makeVariableTextRegExp("varying"), "in $1"]
  ];
  function convertShader(source4, replacements) {
    for (const [pattern, replacement] of replacements) {
      source4 = source4.replace(pattern, replacement);
    }
    return source4;
  }
  function makeVariableTextRegExp(qualifier) {
    return new RegExp(`\\b${qualifier}[ \\t]+(\\w+[ \\t]+\\w+(\\[\\w+\\])?;)`, "g");
  }

  // ../../node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/shader-hooks.js
  function getShaderHooks(hookFunctions, hookInjections) {
    let result = "";
    for (const hookName in hookFunctions) {
      const hookFunction = hookFunctions[hookName];
      result += `void ${hookFunction.signature} {
`;
      if (hookFunction.header) {
        result += `  ${hookFunction.header}`;
      }
      if (hookInjections[hookName]) {
        const injections = hookInjections[hookName];
        injections.sort((a6, b4) => a6.order - b4.order);
        for (const injection of injections) {
          result += `  ${injection.injection}
`;
        }
      }
      if (hookFunction.footer) {
        result += `  ${hookFunction.footer}`;
      }
      result += "}\n";
    }
    return result;
  }
  function normalizeShaderHooks(hookFunctions) {
    const result = { vertex: {}, fragment: {} };
    for (const hookFunction of hookFunctions) {
      let opts;
      let hook;
      if (typeof hookFunction !== "string") {
        opts = hookFunction;
        hook = opts.hook;
      } else {
        opts = {};
        hook = hookFunction;
      }
      hook = hook.trim();
      const [shaderStage, signature] = hook.split(":");
      const name13 = hook.replace(/\(.+/, "");
      const normalizedHook = Object.assign(opts, { signature });
      switch (shaderStage) {
        case "vs":
          result.vertex[name13] = normalizedHook;
          break;
        case "fs":
          result.fragment[name13] = normalizedHook;
          break;
        default:
          throw new Error(shaderStage);
      }
    }
    return result;
  }

  // ../../node_modules/@luma.gl/shadertools/dist/lib/glsl-utils/get-shader-info.js
  function getShaderInfo(source4, defaultName) {
    return {
      name: getShaderName(source4, defaultName),
      language: "glsl",
      version: getShaderVersion(source4)
    };
  }
  function getShaderName(shader, defaultName = "unnamed") {
    const SHADER_NAME_REGEXP = /#define[^\S\r\n]*SHADER_NAME[^\S\r\n]*([A-Za-z0-9_-]+)\s*/;
    const match = SHADER_NAME_REGEXP.exec(shader);
    return match ? match[1] : defaultName;
  }
  function getShaderVersion(source4) {
    let version = 100;
    const words = source4.match(/[^\s]+/g);
    if (words && words.length >= 2 && words[0] === "#version") {
      const parsedVersion = parseInt(words[1], 10);
      if (Number.isFinite(parsedVersion)) {
        version = parsedVersion;
      }
    }
    if (version !== 100 && version !== 300) {
      throw new Error(`Invalid GLSL version ${version}`);
    }
    return version;
  }

  // ../../node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/assemble-shaders.js
  var INJECT_SHADER_DECLARATIONS = `

${DECLARATION_INJECT_MARKER}
`;
  var FRAGMENT_SHADER_PROLOGUE = (
    /* glsl */
    `precision highp float;
`
  );
  function assembleWGSLShader(options) {
    const modules = getShaderModuleDependencies(options.modules || []);
    return {
      source: assembleShaderWGSL(options.platformInfo, {
        ...options,
        source: options.source,
        stage: "vertex",
        modules
      }),
      getUniforms: assembleGetUniforms(modules)
    };
  }
  function assembleGLSLShaderPair(options) {
    const { vs: vs14, fs: fs11 } = options;
    const modules = getShaderModuleDependencies(options.modules || []);
    return {
      vs: assembleShaderGLSL(options.platformInfo, {
        ...options,
        source: vs14,
        stage: "vertex",
        modules
      }),
      fs: assembleShaderGLSL(options.platformInfo, {
        ...options,
        // @ts-expect-error
        source: fs11,
        stage: "fragment",
        modules
      }),
      getUniforms: assembleGetUniforms(modules)
    };
  }
  function assembleShaderWGSL(platformInfo, options) {
    const {
      // id,
      source: source4,
      stage,
      modules,
      // defines = {},
      hookFunctions = [],
      inject: inject6 = {},
      log: log3
    } = options;
    assert5(typeof source4 === "string", "shader source must be a string");
    const coreSource = source4;
    let assembledSource = "";
    const hookFunctionMap = normalizeShaderHooks(hookFunctions);
    const hookInjections = {};
    const declInjections = {};
    const mainInjections = {};
    for (const key in inject6) {
      const injection = typeof inject6[key] === "string" ? { injection: inject6[key], order: 0 } : inject6[key];
      const match = /^(v|f)s:(#)?([\w-]+)$/.exec(key);
      if (match) {
        const hash = match[2];
        const name13 = match[3];
        if (hash) {
          if (name13 === "decl") {
            declInjections[key] = [injection];
          } else {
            mainInjections[key] = [injection];
          }
        } else {
          hookInjections[key] = [injection];
        }
      } else {
        mainInjections[key] = [injection];
      }
    }
    const modulesToInject = modules;
    for (const module of modulesToInject) {
      if (log3) {
        checkShaderModuleDeprecations(module, coreSource, log3);
      }
      const moduleSource = getShaderModuleSource(module, "wgsl");
      assembledSource += moduleSource;
      const injections = module.injections?.[stage] || {};
      for (const key in injections) {
        const match = /^(v|f)s:#([\w-]+)$/.exec(key);
        if (match) {
          const name13 = match[2];
          const injectionType = name13 === "decl" ? declInjections : mainInjections;
          injectionType[key] = injectionType[key] || [];
          injectionType[key].push(injections[key]);
        } else {
          hookInjections[key] = hookInjections[key] || [];
          hookInjections[key].push(injections[key]);
        }
      }
    }
    assembledSource += INJECT_SHADER_DECLARATIONS;
    assembledSource = injectShader(assembledSource, stage, declInjections);
    assembledSource += getShaderHooks(hookFunctionMap[stage], hookInjections);
    assembledSource += coreSource;
    assembledSource = injectShader(assembledSource, stage, mainInjections);
    return assembledSource;
  }
  function assembleShaderGLSL(platformInfo, options) {
    const { source: source4, stage, language = "glsl", modules, defines: defines2 = {}, hookFunctions = [], inject: inject6 = {}, prologue = true, log: log3 } = options;
    assert5(typeof source4 === "string", "shader source must be a string");
    const sourceVersion = language === "glsl" ? getShaderInfo(source4).version : -1;
    const targetVersion = platformInfo.shaderLanguageVersion;
    const sourceVersionDirective = sourceVersion === 100 ? "#version 100" : "#version 300 es";
    const sourceLines = source4.split("\n");
    const coreSource = sourceLines.slice(1).join("\n");
    const allDefines = {};
    modules.forEach((module) => {
      Object.assign(allDefines, module.defines);
    });
    Object.assign(allDefines, defines2);
    let assembledSource = "";
    switch (language) {
      case "wgsl":
        break;
      case "glsl":
        assembledSource = prologue ? `${sourceVersionDirective}

// ----- PROLOGUE -------------------------
${`#define SHADER_TYPE_${stage.toUpperCase()}`}

${getPlatformShaderDefines(platformInfo)}
${stage === "fragment" ? FRAGMENT_SHADER_PROLOGUE : ""}

// ----- APPLICATION DEFINES -------------------------

${getApplicationDefines(allDefines)}

` : `${sourceVersionDirective}
`;
        break;
    }
    const hookFunctionMap = normalizeShaderHooks(hookFunctions);
    const hookInjections = {};
    const declInjections = {};
    const mainInjections = {};
    for (const key in inject6) {
      const injection = typeof inject6[key] === "string" ? { injection: inject6[key], order: 0 } : inject6[key];
      const match = /^(v|f)s:(#)?([\w-]+)$/.exec(key);
      if (match) {
        const hash = match[2];
        const name13 = match[3];
        if (hash) {
          if (name13 === "decl") {
            declInjections[key] = [injection];
          } else {
            mainInjections[key] = [injection];
          }
        } else {
          hookInjections[key] = [injection];
        }
      } else {
        mainInjections[key] = [injection];
      }
    }
    for (const module of modules) {
      if (log3) {
        checkShaderModuleDeprecations(module, coreSource, log3);
      }
      const moduleSource = getShaderModuleSource(module, stage);
      assembledSource += moduleSource;
      const injections = module.instance?.normalizedInjections[stage] || {};
      for (const key in injections) {
        const match = /^(v|f)s:#([\w-]+)$/.exec(key);
        if (match) {
          const name13 = match[2];
          const injectionType = name13 === "decl" ? declInjections : mainInjections;
          injectionType[key] = injectionType[key] || [];
          injectionType[key].push(injections[key]);
        } else {
          hookInjections[key] = hookInjections[key] || [];
          hookInjections[key].push(injections[key]);
        }
      }
    }
    assembledSource += "// ----- MAIN SHADER SOURCE -------------------------";
    assembledSource += INJECT_SHADER_DECLARATIONS;
    assembledSource = injectShader(assembledSource, stage, declInjections);
    assembledSource += getShaderHooks(hookFunctionMap[stage], hookInjections);
    assembledSource += coreSource;
    assembledSource = injectShader(assembledSource, stage, mainInjections);
    if (language === "glsl" && sourceVersion !== targetVersion) {
      assembledSource = transpileGLSLShader(assembledSource, stage);
    }
    return assembledSource.trim();
  }
  function assembleGetUniforms(modules) {
    return function getUniforms6(opts) {
      const uniforms = {};
      for (const module of modules) {
        const moduleUniforms = module.getUniforms?.(opts, uniforms);
        Object.assign(uniforms, moduleUniforms);
      }
      return uniforms;
    };
  }
  function getApplicationDefines(defines2 = {}) {
    let sourceText = "";
    for (const define2 in defines2) {
      const value = defines2[define2];
      if (value || Number.isFinite(value)) {
        sourceText += `#define ${define2.toUpperCase()} ${defines2[define2]}
`;
      }
    }
    return sourceText;
  }
  function getShaderModuleSource(module, stage) {
    let moduleSource;
    switch (stage) {
      case "vertex":
        moduleSource = module.vs || "";
        break;
      case "fragment":
        moduleSource = module.fs || "";
        break;
      case "wgsl":
        moduleSource = module.source || "";
        break;
      default:
        assert5(false);
    }
    if (!module.name) {
      throw new Error("Shader module must have a name");
    }
    const moduleName = module.name.toUpperCase().replace(/[^0-9a-z]/gi, "_");
    let source4 = `// ----- MODULE ${module.name} ---------------

`;
    if (stage !== "wgsl") {
      source4 += `#define MODULE_${moduleName}
`;
    }
    source4 += `${moduleSource}
`;
    return source4;
  }

  // ../../node_modules/@luma.gl/shadertools/dist/lib/preprocessor/preprocessor.js
  var IFDEF_REGEXP = /^\s*\#\s*ifdef\s*([a-zA-Z_]+)\s*$/;
  var ENDIF_REGEXP = /^\s*\#\s*endif\s*$/;
  function preprocess(source4, options) {
    const lines = source4.split("\n");
    const output = [];
    let conditional = true;
    let currentDefine = null;
    for (const line of lines) {
      const matchIf = line.match(IFDEF_REGEXP);
      const matchEnd = line.match(ENDIF_REGEXP);
      if (matchIf) {
        currentDefine = matchIf[1];
        conditional = Boolean(options?.defines?.[currentDefine]);
      } else if (matchEnd) {
        conditional = true;
      } else if (conditional) {
        output.push(line);
      }
    }
    return output.join("\n");
  }

  // ../../node_modules/@luma.gl/shadertools/dist/lib/shader-assembler.js
  var _ShaderAssembler = class {
    /** Hook functions */
    _hookFunctions = [];
    /** Shader modules */
    _defaultModules = [];
    /**
     * A default shader assembler instance - the natural place to register default modules and hooks
     * @returns
     */
    static getDefaultShaderAssembler() {
      _ShaderAssembler.defaultShaderAssembler = _ShaderAssembler.defaultShaderAssembler || new _ShaderAssembler();
      return _ShaderAssembler.defaultShaderAssembler;
    }
    /**
     * Add a default module that does not have to be provided with every call to assembleShaders()
     */
    addDefaultModule(module) {
      if (!this._defaultModules.find((m3) => m3.name === (typeof module === "string" ? module : module.name))) {
        this._defaultModules.push(module);
      }
    }
    /**
     * Remove a default module
     */
    removeDefaultModule(module) {
      const moduleName = typeof module === "string" ? module : module.name;
      this._defaultModules = this._defaultModules.filter((m3) => m3.name !== moduleName);
    }
    /**
     * Register a shader hook
     * @param hook
     * @param opts
     */
    addShaderHook(hook, opts) {
      if (opts) {
        hook = Object.assign(opts, { hook });
      }
      this._hookFunctions.push(hook);
    }
    /**
     * Assemble a WGSL unified shader
     * @param platformInfo
     * @param props
     * @returns
     */
    assembleWGSLShader(props) {
      const modules = this._getModuleList(props.modules);
      const hookFunctions = this._hookFunctions;
      const { source: source4, getUniforms: getUniforms6 } = assembleWGSLShader({
        ...props,
        // @ts-expect-error
        source: props.source,
        modules,
        hookFunctions
      });
      const preprocessedSource = props.platformInfo.shaderLanguage === "wgsl" ? preprocess(source4) : source4;
      return { source: preprocessedSource, getUniforms: getUniforms6, modules };
    }
    /**
     * Assemble a pair of shaders into a single shader program
     * @param platformInfo
     * @param props
     * @returns
     */
    assembleGLSLShaderPair(props) {
      const modules = this._getModuleList(props.modules);
      const hookFunctions = this._hookFunctions;
      const assembled = assembleGLSLShaderPair({
        ...props,
        // @ts-expect-error
        vs: props.vs,
        // @ts-expect-error
        fs: props.fs,
        modules,
        hookFunctions
      });
      return { ...assembled, modules };
    }
    /**
     * Dedupe and combine with default modules
     */
    _getModuleList(appModules = []) {
      const modules = new Array(this._defaultModules.length + appModules.length);
      const seen = {};
      let count3 = 0;
      for (let i7 = 0, len9 = this._defaultModules.length; i7 < len9; ++i7) {
        const module = this._defaultModules[i7];
        const name13 = module.name;
        modules[count3++] = module;
        seen[name13] = true;
      }
      for (let i7 = 0, len9 = appModules.length; i7 < len9; ++i7) {
        const module = appModules[i7];
        const name13 = module.name;
        if (!seen[name13]) {
          modules[count3++] = module;
          seen[name13] = true;
        }
      }
      modules.length = count3;
      initializeShaderModules(modules);
      return modules;
    }
  };
  var ShaderAssembler = _ShaderAssembler;
  /** Default ShaderAssembler instance */
  __publicField(ShaderAssembler, "defaultShaderAssembler");

  // ../../node_modules/@luma.gl/shadertools/dist/lib/glsl-utils/shader-utils.js
  var FS_GLES = (
    /* glsl */
    `out vec4 transform_output;
void main() {
  transform_output = vec4(0);
}`
  );
  var FS300 = `#version 300 es
${FS_GLES}`;
  function getPassthroughFS(options) {
    const { input, inputChannels, output } = options || {};
    if (!input) {
      return FS300;
    }
    if (!inputChannels) {
      throw new Error("inputChannels");
    }
    const inputType = channelCountToType(inputChannels);
    const outputValue = convertToVec4(input, inputChannels);
    return `#version 300 es
in ${inputType} ${input};
out vec4 ${output};
void main() {
  ${output} = ${outputValue};
}`;
  }
  function channelCountToType(channels) {
    switch (channels) {
      case 1:
        return "float";
      case 2:
        return "vec2";
      case 3:
        return "vec3";
      case 4:
        return "vec4";
      default:
        throw new Error(`invalid channels: ${channels}`);
    }
  }
  function convertToVec4(variable, channels) {
    switch (channels) {
      case 1:
        return `vec4(${variable}, 0.0, 0.0, 1.0)`;
      case 2:
        return `vec4(${variable}, 0.0, 1.0)`;
      case 3:
        return `vec4(${variable}, 1.0)`;
      case 4:
        return variable;
      default:
        throw new Error(`invalid channels: ${channels}`);
    }
  }

  // ../../node_modules/@luma.gl/shadertools/dist/lib/wgsl/get-shader-layout-wgsl.js
  init_dist4();

  // ../../node_modules/wgsl_reflect/wgsl_reflect.module.js
  var e = class {
    constructor(e6, t5) {
      this.name = e6, this.attributes = t5, this.size = 0;
    }
    get isArray() {
      return false;
    }
    get isStruct() {
      return false;
    }
    get isTemplate() {
      return false;
    }
    getTypeName() {
      return this.name;
    }
  };
  var t = class {
    constructor(e6, t5, n4) {
      this.name = e6, this.type = t5, this.attributes = n4, this.offset = 0, this.size = 0;
    }
    get isArray() {
      return this.type.isArray;
    }
    get isStruct() {
      return this.type.isStruct;
    }
    get isTemplate() {
      return this.type.isTemplate;
    }
    get align() {
      return this.type.isStruct ? this.type.align : 0;
    }
    get members() {
      return this.type.isStruct ? this.type.members : null;
    }
    get format() {
      return this.type.isArray || this.type.isTemplate ? this.type.format : null;
    }
    get count() {
      return this.type.isArray ? this.type.count : 0;
    }
    get stride() {
      return this.type.isArray ? this.type.stride : this.size;
    }
  };
  var n = class extends e {
    constructor(e6, t5) {
      super(e6, t5), this.members = [], this.align = 0, this.startLine = -1, this.endLine = -1, this.inUse = false;
    }
    get isStruct() {
      return true;
    }
  };
  var s = class extends e {
    constructor(e6, t5) {
      super(e6, t5), this.count = 0, this.stride = 0;
    }
    get isArray() {
      return true;
    }
  };
  var r = class extends e {
    constructor(e6, t5, n4, s5) {
      super(e6, n4), this.format = t5, this.access = s5;
    }
    get isTemplate() {
      return true;
    }
    getTypeName() {
      let e6 = this.name;
      if (null !== this.format) {
        if ("vec2" === e6 || "vec3" === e6 || "vec4" === e6 || "mat2x2" === e6 || "mat2x3" === e6 || "mat2x4" === e6 || "mat3x2" === e6 || "mat3x3" === e6 || "mat3x4" === e6 || "mat4x2" === e6 || "mat4x3" === e6 || "mat4x4" === e6) {
          if ("f32" === this.format.name)
            return e6 += "f", e6;
          if ("i32" === this.format.name)
            return e6 += "i", e6;
          if ("u32" === this.format.name)
            return e6 += "u", e6;
          if ("bool" === this.format.name)
            return e6 += "b", e6;
          if ("f16" === this.format.name)
            return e6 += "h", e6;
        }
        e6 += `<${this.format.name}>`;
      } else if ("vec2" === e6 || "vec3" === e6 || "vec4" === e6)
        return e6;
      return e6;
    }
  };
  var a;
  ((e6) => {
    e6[e6.Uniform = 0] = "Uniform", e6[e6.Storage = 1] = "Storage", e6[e6.Texture = 2] = "Texture", e6[e6.Sampler = 3] = "Sampler", e6[e6.StorageTexture = 4] = "StorageTexture";
  })(a || (a = {}));
  var i = class {
    constructor(e6, t5, n4, s5, r5, a6, i7) {
      this.name = e6, this.type = t5, this.group = n4, this.binding = s5, this.attributes = r5, this.resourceType = a6, this.access = i7;
    }
    get isArray() {
      return this.type.isArray;
    }
    get isStruct() {
      return this.type.isStruct;
    }
    get isTemplate() {
      return this.type.isTemplate;
    }
    get size() {
      return this.type.size;
    }
    get align() {
      return this.type.isStruct ? this.type.align : 0;
    }
    get members() {
      return this.type.isStruct ? this.type.members : null;
    }
    get format() {
      return this.type.isArray || this.type.isTemplate ? this.type.format : null;
    }
    get count() {
      return this.type.isArray ? this.type.count : 0;
    }
    get stride() {
      return this.type.isArray ? this.type.stride : this.size;
    }
  };
  var o = class {
    constructor(e6, t5) {
      this.name = e6, this.type = t5;
    }
  };
  var l = class {
    constructor(e6, t5, n4, s5) {
      this.name = e6, this.type = t5, this.locationType = n4, this.location = s5, this.interpolation = null;
    }
  };
  var c = class {
    constructor(e6, t5, n4, s5) {
      this.name = e6, this.type = t5, this.locationType = n4, this.location = s5;
    }
  };
  var u = class {
    constructor(e6, t5, n4, s5) {
      this.name = e6, this.type = t5, this.attributes = n4, this.id = s5;
    }
  };
  var h = class {
    constructor(e6, t5, n4) {
      this.name = e6, this.type = t5, this.attributes = n4;
    }
  };
  var f = class {
    constructor(e6, t5 = null, n4) {
      this.stage = null, this.inputs = [], this.outputs = [], this.arguments = [], this.returnType = null, this.resources = [], this.overrides = [], this.startLine = -1, this.endLine = -1, this.inUse = false, this.calls = /* @__PURE__ */ new Set(), this.name = e6, this.stage = t5, this.attributes = n4;
    }
  };
  var p = class {
    constructor() {
      this.vertex = [], this.fragment = [], this.compute = [];
    }
  };
  var d = new Float32Array(1);
  var m = new Int32Array(d.buffer);
  var _ = new Uint16Array(1);
  function g(e6) {
    d[0] = e6;
    const t5 = m[0], n4 = t5 >> 31 & 1;
    let s5 = t5 >> 23 & 255, r5 = 8388607 & t5;
    if (255 === s5)
      return _[0] = n4 << 15 | 31744 | (0 !== r5 ? 512 : 0), _[0];
    if (0 === s5) {
      if (0 === r5)
        return _[0] = n4 << 15, _[0];
      r5 |= 8388608;
      let e7 = 113;
      for (; !(8388608 & r5); )
        r5 <<= 1, e7--;
      return s5 = 127 - e7, r5 &= 8388607, s5 > 0 ? (r5 = (r5 >> 126 - s5) + (r5 >> 127 - s5 & 1), _[0] = n4 << 15 | s5 << 10 | r5 >> 13, _[0]) : (_[0] = n4 << 15, _[0]);
    }
    return s5 = s5 - 127 + 15, s5 >= 31 ? (_[0] = n4 << 15 | 31744, _[0]) : s5 <= 0 ? s5 < -10 ? (_[0] = n4 << 15, _[0]) : (r5 = (8388608 | r5) >> 1 - s5, _[0] = n4 << 15 | r5 >> 13, _[0]) : (r5 >>= 13, _[0] = n4 << 15 | s5 << 10 | r5, _[0]);
  }
  var x = new Uint32Array(1);
  var y = new Float32Array(x.buffer, 0, 1);
  function b(e6) {
    const t5 = 112 + (e6 >> 6 & 31) << 23 | (63 & e6) << 17;
    return x[0] = t5, y[0];
  }
  function v(e6, t5, n4, s5, r5, a6, i7, o5, l5) {
    const c5 = s5 * (i7 >>= r5) * (a6 >>= r5) + n4 * i7 + t5 * o5;
    switch (l5) {
      case "r8unorm":
        return [w(e6, c5, "8unorm", 1)[0]];
      case "r8snorm":
        return [w(e6, c5, "8snorm", 1)[0]];
      case "r8uint":
        return [w(e6, c5, "8uint", 1)[0]];
      case "r8sint":
        return [w(e6, c5, "8sint", 1)[0]];
      case "rg8unorm": {
        const t6 = w(e6, c5, "8unorm", 2);
        return [t6[0], t6[1]];
      }
      case "rg8snorm": {
        const t6 = w(e6, c5, "8snorm", 2);
        return [t6[0], t6[1]];
      }
      case "rg8uint": {
        const t6 = w(e6, c5, "8uint", 2);
        return [t6[0], t6[1]];
      }
      case "rg8sint": {
        const t6 = w(e6, c5, "8sint", 2);
        return [t6[0], t6[1]];
      }
      case "rgba8unorm-srgb":
      case "rgba8unorm": {
        const t6 = w(e6, c5, "8unorm", 4);
        return [t6[0], t6[1], t6[2], t6[3]];
      }
      case "rgba8snorm": {
        const t6 = w(e6, c5, "8snorm", 4);
        return [t6[0], t6[1], t6[2], t6[3]];
      }
      case "rgba8uint": {
        const t6 = w(e6, c5, "8uint", 4);
        return [t6[0], t6[1], t6[2], t6[3]];
      }
      case "rgba8sint": {
        const t6 = w(e6, c5, "8sint", 4);
        return [t6[0], t6[1], t6[2], t6[3]];
      }
      case "bgra8unorm-srgb":
      case "bgra8unorm": {
        const t6 = w(e6, c5, "8unorm", 4);
        return [t6[2], t6[1], t6[0], t6[3]];
      }
      case "r16uint":
        return [w(e6, c5, "16uint", 1)[0]];
      case "r16sint":
        return [w(e6, c5, "16sint", 1)[0]];
      case "r16float":
        return [w(e6, c5, "16float", 1)[0]];
      case "rg16uint": {
        const t6 = w(e6, c5, "16uint", 2);
        return [t6[0], t6[1]];
      }
      case "rg16sint": {
        const t6 = w(e6, c5, "16sint", 2);
        return [t6[0], t6[1]];
      }
      case "rg16float": {
        const t6 = w(e6, c5, "16float", 2);
        return [t6[0], t6[1]];
      }
      case "rgba16uint": {
        const t6 = w(e6, c5, "16uint", 4);
        return [t6[0], t6[1], t6[2], t6[3]];
      }
      case "rgba16sint": {
        const t6 = w(e6, c5, "16sint", 4);
        return [t6[0], t6[1], t6[2], t6[3]];
      }
      case "rgba16float": {
        const t6 = w(e6, c5, "16float", 4);
        return [t6[0], t6[1], t6[2], t6[3]];
      }
      case "r32uint":
        return [w(e6, c5, "32uint", 1)[0]];
      case "r32sint":
        return [w(e6, c5, "32sint", 1)[0]];
      case "depth16unorm":
      case "depth24plus":
      case "depth24plus-stencil8":
      case "depth32float":
      case "depth32float-stencil8":
      case "r32float":
        return [w(e6, c5, "32float", 1)[0]];
      case "rg32uint": {
        const t6 = w(e6, c5, "32uint", 2);
        return [t6[0], t6[1]];
      }
      case "rg32sint": {
        const t6 = w(e6, c5, "32sint", 2);
        return [t6[0], t6[1]];
      }
      case "rg32float": {
        const t6 = w(e6, c5, "32float", 2);
        return [t6[0], t6[1]];
      }
      case "rgba32uint": {
        const t6 = w(e6, c5, "32uint", 4);
        return [t6[0], t6[1], t6[2], t6[3]];
      }
      case "rgba32sint": {
        const t6 = w(e6, c5, "32sint", 4);
        return [t6[0], t6[1], t6[2], t6[3]];
      }
      case "rgba32float": {
        const t6 = w(e6, c5, "32float", 4);
        return [t6[0], t6[1], t6[2], t6[3]];
      }
      case "rg11b10ufloat": {
        const t6 = new Uint32Array(e6.buffer, c5, 1)[0], n5 = (4192256 & t6) >> 11, s6 = (4290772992 & t6) >> 22;
        return [b(2047 & t6), b(n5), function(e7) {
          const t7 = 112 + (e7 >> 5 & 31) << 23 | (31 & e7) << 18;
          return x[0] = t7, y[0];
        }(s6), 1];
      }
    }
    return null;
  }
  function w(e6, t5, n4, s5) {
    const r5 = [0, 0, 0, 0];
    for (let c5 = 0; c5 < s5; ++c5)
      switch (n4) {
        case "8unorm":
          r5[c5] = e6[t5] / 255, t5++;
          break;
        case "8snorm":
          r5[c5] = e6[t5] / 255 * 2 - 1, t5++;
          break;
        case "8uint":
          r5[c5] = e6[t5], t5++;
          break;
        case "8sint":
          r5[c5] = e6[t5] - 127, t5++;
          break;
        case "16uint":
          r5[c5] = e6[t5] | e6[t5 + 1] << 8, t5 += 2;
          break;
        case "16sint":
          r5[c5] = (e6[t5] | e6[t5 + 1] << 8) - 32768, t5 += 2;
          break;
        case "16float":
          r5[c5] = (a6 = e6[t5] | e6[t5 + 1] << 8, i7 = void 0, o5 = void 0, l5 = void 0, i7 = (32768 & a6) >> 15, l5 = 1023 & a6, 0 == (o5 = (31744 & a6) >> 10) ? (i7 ? -1 : 1) * Math.pow(2, -14) * (l5 / Math.pow(2, 10)) : 31 == o5 ? l5 ? NaN : 1 / 0 * (i7 ? -1 : 1) : (i7 ? -1 : 1) * Math.pow(2, o5 - 15) * (1 + l5 / Math.pow(2, 10))), t5 += 2;
          break;
        case "32uint":
        case "32sint":
          r5[c5] = e6[t5] | e6[t5 + 1] << 8 | e6[t5 + 2] << 16 | e6[t5 + 3] << 24, t5 += 4;
          break;
        case "32float":
          r5[c5] = new Float32Array(e6.buffer, t5, 1)[0], t5 += 4;
      }
    var a6, i7, o5, l5;
    return r5;
  }
  function k(e6, t5, n4, s5, r5) {
    for (let a6 = 0; a6 < s5; ++a6)
      switch (n4) {
        case "8unorm":
          e6[t5] = 255 * r5[a6], t5++;
          break;
        case "8snorm":
          e6[t5] = 0.5 * (r5[a6] + 1) * 255, t5++;
          break;
        case "8uint":
          e6[t5] = r5[a6], t5++;
          break;
        case "8sint":
          e6[t5] = r5[a6] + 127, t5++;
          break;
        case "16uint":
          new Uint16Array(e6.buffer, t5, 1)[0] = r5[a6], t5 += 2;
          break;
        case "16sint":
          new Int16Array(e6.buffer, t5, 1)[0] = r5[a6], t5 += 2;
          break;
        case "16float": {
          const n5 = g(r5[a6]);
          new Uint16Array(e6.buffer, t5, 1)[0] = n5, t5 += 2;
          break;
        }
        case "32uint":
          new Uint32Array(e6.buffer, t5, 1)[0] = r5[a6], t5 += 4;
          break;
        case "32sint":
          new Int32Array(e6.buffer, t5, 1)[0] = r5[a6], t5 += 4;
          break;
        case "32float":
          new Float32Array(e6.buffer, t5, 1)[0] = r5[a6], t5 += 4;
      }
    return r5;
  }
  var I = { r8unorm: { bytesPerBlock: 1, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, r8snorm: { bytesPerBlock: 1, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, r8uint: { bytesPerBlock: 1, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, r8sint: { bytesPerBlock: 1, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, rg8unorm: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rg8snorm: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rg8uint: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rg8sint: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rgba8unorm: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, "rgba8unorm-srgb": { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgba8snorm: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgba8uint: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgba8sint: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, bgra8unorm: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, "bgra8unorm-srgb": { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, r16uint: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, r16sint: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, r16float: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, rg16uint: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rg16sint: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rg16float: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rgba16uint: { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgba16sint: { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgba16float: { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, r32uint: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, r32sint: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, r32float: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, rg32uint: { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rg32sint: { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rg32float: { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rgba32uint: { bytesPerBlock: 16, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgba32sint: { bytesPerBlock: 16, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgba32float: { bytesPerBlock: 16, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgb10a2uint: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgb10a2unorm: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rg11b10ufloat: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, stencil8: { bytesPerBlock: 1, blockWidth: 1, blockHeight: 1, isCompressed: false, isDepthStencil: true, hasDepth: false, hasStencil: true, channels: 1 }, depth16unorm: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, isDepthStencil: true, hasDepth: true, hasStencil: false, channels: 1 }, depth24plus: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, isDepthStencil: true, hasDepth: true, hasStencil: false, depthOnlyFormat: "depth32float", channels: 1 }, "depth24plus-stencil8": { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, isDepthStencil: true, hasDepth: true, hasStencil: true, depthOnlyFormat: "depth32float", channels: 1 }, depth32float: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, isDepthStencil: true, hasDepth: true, hasStencil: false, channels: 1 }, "depth32float-stencil8": { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, isDepthStencil: true, hasDepth: true, hasStencil: true, stencilOnlyFormat: "depth32float", channels: 1 }, rgb9e5ufloat: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, "bc1-rgba-unorm": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc1-rgba-unorm-srgb": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc2-rgba-unorm": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc2-rgba-unorm-srgb": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc3-rgba-unorm": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc3-rgba-unorm-srgb": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc4-r-unorm": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 1 }, "bc4-r-snorm": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 1 }, "bc5-rg-unorm": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 2 }, "bc5-rg-snorm": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 2 }, "bc6h-rgb-ufloat": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc6h-rgb-float": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc7-rgba-unorm": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc7-rgba-unorm-srgb": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "etc2-rgb8unorm": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "etc2-rgb8unorm-srgb": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "etc2-rgb8a1unorm": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "etc2-rgb8a1unorm-srgb": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "etc2-rgba8unorm": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "etc2-rgba8unorm-srgb": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "eac-r11unorm": { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: true, channels: 1 }, "eac-r11snorm": { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: true, channels: 1 }, "eac-rg11unorm": { bytesPerBlock: 16, blockWidth: 1, blockHeight: 1, isCompressed: true, channels: 2 }, "eac-rg11snorm": { bytesPerBlock: 16, blockWidth: 1, blockHeight: 1, isCompressed: true, channels: 2 }, "astc-4x4-unorm": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "astc-4x4-unorm-srgb": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "astc-5x4-unorm": { bytesPerBlock: 16, blockWidth: 5, blockHeight: 4, isCompressed: true, channels: 4 }, "astc-5x4-unorm-srgb": { bytesPerBlock: 16, blockWidth: 5, blockHeight: 4, isCompressed: true, channels: 4 }, "astc-5x5-unorm": { bytesPerBlock: 16, blockWidth: 5, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-5x5-unorm-srgb": { bytesPerBlock: 16, blockWidth: 5, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-6x5-unorm": { bytesPerBlock: 16, blockWidth: 6, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-6x5-unorm-srgb": { bytesPerBlock: 16, blockWidth: 6, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-6x6-unorm": { bytesPerBlock: 16, blockWidth: 6, blockHeight: 6, isCompressed: true, channels: 4 }, "astc-6x6-unorm-srgb": { bytesPerBlock: 16, blockWidth: 6, blockHeight: 6, isCompressed: true, channels: 4 }, "astc-8x5-unorm": { bytesPerBlock: 16, blockWidth: 8, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-8x5-unorm-srgb": { bytesPerBlock: 16, blockWidth: 8, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-8x6-unorm": { bytesPerBlock: 16, blockWidth: 8, blockHeight: 6, isCompressed: true, channels: 4 }, "astc-8x6-unorm-srgb": { bytesPerBlock: 16, blockWidth: 8, blockHeight: 6, isCompressed: true, channels: 4 }, "astc-8x8-unorm": { bytesPerBlock: 16, blockWidth: 8, blockHeight: 8, isCompressed: true, channels: 4 }, "astc-8x8-unorm-srgb": { bytesPerBlock: 16, blockWidth: 8, blockHeight: 8, isCompressed: true, channels: 4 }, "astc-10x5-unorm": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-10x5-unorm-srgb": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-10x6-unorm": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 6, isCompressed: true, channels: 4 }, "astc-10x6-unorm-srgb": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 6, isCompressed: true, channels: 4 }, "astc-10x8-unorm": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 8, isCompressed: true, channels: 4 }, "astc-10x8-unorm-srgb": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 8, isCompressed: true, channels: 4 }, "astc-10x10-unorm": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 10, isCompressed: true, channels: 4 }, "astc-10x10-unorm-srgb": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 10, isCompressed: true, channels: 4 }, "astc-12x10-unorm": { bytesPerBlock: 16, blockWidth: 12, blockHeight: 10, isCompressed: true, channels: 4 }, "astc-12x10-unorm-srgb": { bytesPerBlock: 16, blockWidth: 12, blockHeight: 10, isCompressed: true, channels: 4 }, "astc-12x12-unorm": { bytesPerBlock: 16, blockWidth: 12, blockHeight: 12, isCompressed: true, channels: 4 }, "astc-12x12-unorm-srgb": { bytesPerBlock: 16, blockWidth: 12, blockHeight: 12, isCompressed: true, channels: 4 } };
  var T = class {
    constructor() {
      this.id = T._id++, this.line = 0;
    }
    get isAstNode() {
      return true;
    }
    get astNodeType() {
      return "";
    }
    search(e6) {
      e6(this);
    }
    searchBlock(e6, t5) {
      if (e6) {
        t5(S.instance);
        for (const n4 of e6)
          n4 instanceof Array ? this.searchBlock(n4, t5) : n4.search(t5);
        t5(A.instance);
      }
    }
    constEvaluate(e6, t5) {
      throw new Error("Cannot evaluate node");
    }
    constEvaluateString(e6) {
      return this.constEvaluate(e6).toString();
    }
  };
  T._id = 0;
  var S = class extends T {
  };
  S.instance = new S();
  var A = class extends T {
  };
  A.instance = new A();
  var E = /* @__PURE__ */ new Set(["all", "all", "any", "select", "arrayLength", "abs", "acos", "acosh", "asin", "asinh", "atan", "atanh", "atan2", "ceil", "clamp", "cos", "cosh", "countLeadingZeros", "countOneBits", "countTrailingZeros", "cross", "degrees", "determinant", "distance", "dot", "dot4U8Packed", "dot4I8Packed", "exp", "exp2", "extractBits", "faceForward", "firstLeadingBit", "firstTrailingBit", "floor", "fma", "fract", "frexp", "insertBits", "inverseSqrt", "ldexp", "length", "log", "log2", "max", "min", "mix", "modf", "normalize", "pow", "quantizeToF16", "radians", "reflect", "refract", "reverseBits", "round", "saturate", "sign", "sin", "sinh", "smoothStep", "sqrt", "step", "tan", "tanh", "transpose", "trunc", "dpdx", "dpdxCoarse", "dpdxFine", "dpdy", "dpdyCoarse", "dpdyFine", "fwidth", "fwidthCoarse", "fwidthFine", "textureDimensions", "textureGather", "textureGatherCompare", "textureLoad", "textureNumLayers", "textureNumLevels", "textureNumSamples", "textureSample", "textureSampleBias", "textureSampleCompare", "textureSampleCompareLevel", "textureSampleGrad", "textureSampleLevel", "textureSampleBaseClampToEdge", "textureStore", "atomicLoad", "atomicStore", "atomicAdd", "atomicSub", "atomicMax", "atomicMin", "atomicAnd", "atomicOr", "atomicXor", "atomicExchange", "atomicCompareExchangeWeak", "pack4x8snorm", "pack4x8unorm", "pack4xI8", "pack4xU8", "pack4x8Clamp", "pack4xU8Clamp", "pack2x16snorm", "pack2x16unorm", "pack2x16float", "unpack4x8snorm", "unpack4x8unorm", "unpack4xI8", "unpack4xU8", "unpack2x16snorm", "unpack2x16unorm", "unpack2x16float", "storageBarrier", "textureBarrier", "workgroupBarrier", "workgroupUniformLoad", "subgroupAdd", "subgroupExclusiveAdd", "subgroupInclusiveAdd", "subgroupAll", "subgroupAnd", "subgroupAny", "subgroupBallot", "subgroupBroadcast", "subgroupBroadcastFirst", "subgroupElect", "subgroupMax", "subgroupMin", "subgroupMul", "subgroupExclusiveMul", "subgroupInclusiveMul", "subgroupOr", "subgroupShuffle", "subgroupShuffleDown", "subgroupShuffleUp", "subgroupShuffleXor", "subgroupXor", "quadBroadcast", "quadSwapDiagonal", "quadSwapX", "quadSwapY"]);
  var $ = class extends T {
    constructor() {
      super();
    }
  };
  var L = class extends $ {
    constructor(e6, t5, n4, s5, r5, a6) {
      super(), this.calls = /* @__PURE__ */ new Set(), this.name = e6, this.args = t5, this.returnType = n4, this.body = s5, this.startLine = r5, this.endLine = a6;
    }
    get astNodeType() {
      return "function";
    }
    search(e6) {
      if (this.attributes)
        for (const t5 of this.attributes)
          e6(t5);
      e6(this);
      for (const t5 of this.args)
        e6(t5);
      this.searchBlock(this.body, e6);
    }
  };
  var C = class extends $ {
    constructor(e6) {
      super(), this.expression = e6;
    }
    get astNodeType() {
      return "staticAssert";
    }
    search(e6) {
      this.expression.search(e6);
    }
  };
  var D = class extends $ {
    constructor(e6, t5) {
      super(), this.condition = e6, this.body = t5;
    }
    get astNodeType() {
      return "while";
    }
    search(e6) {
      this.condition.search(e6), this.searchBlock(this.body, e6);
    }
  };
  var N = class extends $ {
    constructor(e6, t5) {
      super(), this.body = e6, this.loopId = t5;
    }
    get astNodeType() {
      return "continuing";
    }
    search(e6) {
      this.searchBlock(this.body, e6);
    }
  };
  var V = class extends $ {
    constructor(e6, t5, n4, s5) {
      super(), this.init = e6, this.condition = t5, this.increment = n4, this.body = s5;
    }
    get astNodeType() {
      return "for";
    }
    search(e6) {
      var t5, n4, s5;
      null === (t5 = this.init) || void 0 === t5 || t5.search(e6), null === (n4 = this.condition) || void 0 === n4 || n4.search(e6), null === (s5 = this.increment) || void 0 === s5 || s5.search(e6), this.searchBlock(this.body, e6);
    }
  };
  var O = class extends $ {
    constructor(e6, t5, n4, s5, r5) {
      super(), this.attributes = null, this.name = e6, this.type = t5, this.storage = n4, this.access = s5, this.value = r5;
    }
    get astNodeType() {
      return "var";
    }
    search(e6) {
      var t5;
      e6(this), null === (t5 = this.value) || void 0 === t5 || t5.search(e6);
    }
  };
  var B = class extends $ {
    constructor(e6, t5, n4) {
      super(), this.attributes = null, this.name = e6, this.type = t5, this.value = n4;
    }
    get astNodeType() {
      return "override";
    }
    search(e6) {
      var t5;
      null === (t5 = this.value) || void 0 === t5 || t5.search(e6);
    }
  };
  var F = class extends $ {
    constructor(e6, t5, n4, s5, r5) {
      super(), this.attributes = null, this.name = e6, this.type = t5, this.storage = n4, this.access = s5, this.value = r5;
    }
    get astNodeType() {
      return "let";
    }
    search(e6) {
      var t5;
      e6(this), null === (t5 = this.value) || void 0 === t5 || t5.search(e6);
    }
  };
  var M = class extends $ {
    constructor(e6, t5, n4, s5, r5) {
      super(), this.attributes = null, this.name = e6, this.type = t5, this.storage = n4, this.access = s5, this.value = r5;
    }
    get astNodeType() {
      return "const";
    }
    constEvaluate(e6, t5) {
      return this.value.constEvaluate(e6, t5);
    }
    search(e6) {
      var t5;
      e6(this), null === (t5 = this.value) || void 0 === t5 || t5.search(e6);
    }
  };
  var U;
  var P;
  var W;
  var q;
  ((e6) => {
    e6.increment = "++", e6.decrement = "--";
  })(U || (U = {})), ((e6) => {
    e6.parse = function(t5) {
      const n4 = t5;
      if ("parse" == n4)
        throw new Error("Invalid value for IncrementOperator");
      return e6[n4];
    };
  })(U || (U = {}));
  var H = class extends $ {
    constructor(e6, t5) {
      super(), this.operator = e6, this.variable = t5;
    }
    get astNodeType() {
      return "increment";
    }
    search(e6) {
      this.variable.search(e6);
    }
  };
  ((e6) => {
    e6.assign = "=", e6.addAssign = "+=", e6.subtractAssin = "-=", e6.multiplyAssign = "*=", e6.divideAssign = "/=", e6.moduloAssign = "%=", e6.andAssign = "&=", e6.orAssign = "|=", e6.xorAssign = "^=", e6.shiftLeftAssign = "<<=", e6.shiftRightAssign = ">>=";
  })(P || (P = {})), ((e6) => {
    e6.parse = function(e7) {
      const t5 = e7;
      if ("parse" == t5)
        throw new Error("Invalid value for AssignOperator");
      return t5;
    };
  })(P || (P = {}));
  var z = class extends $ {
    constructor(e6, t5, n4) {
      super(), this.operator = e6, this.variable = t5, this.value = n4;
    }
    get astNodeType() {
      return "assign";
    }
    search(e6) {
      this.variable.search(e6), this.value.search(e6);
    }
  };
  var R = class extends $ {
    constructor(e6, t5) {
      super(), this.name = e6, this.args = t5;
    }
    get astNodeType() {
      return "call";
    }
    isBuiltin() {
      return E.has(this.name);
    }
    search(e6) {
      for (const t5 of this.args)
        t5.search(e6);
      e6(this);
    }
  };
  var G = class extends $ {
    constructor(e6, t5) {
      super(), this.body = e6, this.continuing = t5;
    }
    get astNodeType() {
      return "loop";
    }
  };
  var X = class extends $ {
    constructor(e6, t5) {
      super(), this.condition = e6, this.cases = t5;
    }
    get astNodeType() {
      return "switch";
    }
  };
  var j = class extends $ {
    constructor(e6, t5, n4, s5) {
      super(), this.condition = e6, this.body = t5, this.elseif = n4, this.else = s5;
    }
    get astNodeType() {
      return "if";
    }
    search(e6) {
      this.condition.search(e6), this.searchBlock(this.body, e6), this.searchBlock(this.elseif, e6), this.searchBlock(this.else, e6);
    }
  };
  var Z = class extends $ {
    constructor(e6) {
      super(), this.value = e6;
    }
    get astNodeType() {
      return "return";
    }
    search(e6) {
      var t5;
      null === (t5 = this.value) || void 0 === t5 || t5.search(e6);
    }
  };
  var Q = class extends $ {
    constructor(e6) {
      super(), this.name = e6;
    }
    get astNodeType() {
      return "enable";
    }
  };
  var Y = class extends $ {
    constructor(e6) {
      super(), this.extensions = e6;
    }
    get astNodeType() {
      return "requires";
    }
  };
  var K = class extends $ {
    constructor(e6, t5) {
      super(), this.severity = e6, this.rule = t5;
    }
    get astNodeType() {
      return "diagnostic";
    }
  };
  var J = class extends $ {
    constructor(e6, t5) {
      super(), this.name = e6, this.type = t5;
    }
    get astNodeType() {
      return "alias";
    }
  };
  var ee = class extends $ {
    constructor() {
      super();
    }
    get astNodeType() {
      return "discard";
    }
  };
  var te = class extends $ {
    constructor() {
      super(), this.condition = null, this.loopId = -1;
    }
    get astNodeType() {
      return "break";
    }
  };
  var ne = class extends $ {
    constructor() {
      super(), this.loopId = -1;
    }
    get astNodeType() {
      return "continue";
    }
  };
  var se = class extends $ {
    constructor(e6) {
      super(), this.attributes = null, this.name = e6;
    }
    get astNodeType() {
      return "type";
    }
    get isStruct() {
      return false;
    }
    get isArray() {
      return false;
    }
    static maxFormatType(e6) {
      let t5 = e6[0];
      if ("f32" === t5.name)
        return t5;
      for (let n4 = 1; n4 < e6.length; ++n4) {
        const s5 = se._priority.get(t5.name);
        se._priority.get(e6[n4].name) < s5 && (t5 = e6[n4]);
      }
      return "x32" === t5.name ? se.i32 : t5;
    }
    getTypeName() {
      return this.name;
    }
  };
  se.x32 = new se("x32"), se.f32 = new se("f32"), se.i32 = new se("i32"), se.u32 = new se("u32"), se.f16 = new se("f16"), se.bool = new se("bool"), se.void = new se("void"), se._priority = /* @__PURE__ */ new Map([["f32", 0], ["f16", 1], ["u32", 2], ["i32", 3], ["x32", 3]]);
  var re = class extends se {
    constructor(e6) {
      super(e6);
    }
  };
  var ae = class extends se {
    constructor(e6, t5, n4, s5) {
      super(e6), this.members = t5, this.startLine = n4, this.endLine = s5;
    }
    get astNodeType() {
      return "struct";
    }
    get isStruct() {
      return true;
    }
    getMemberIndex(e6) {
      for (let t5 = 0; t5 < this.members.length; t5++)
        if (this.members[t5].name == e6)
          return t5;
      return -1;
    }
    search(e6) {
      for (const t5 of this.members)
        e6(t5);
    }
  };
  var ie = class extends se {
    constructor(e6, t5, n4) {
      super(e6), this.format = t5, this.access = n4;
    }
    get astNodeType() {
      return "template";
    }
    getTypeName() {
      let e6 = this.name;
      if (null !== this.format) {
        if ("vec2" === e6 || "vec3" === e6 || "vec4" === e6 || "mat2x2" === e6 || "mat2x3" === e6 || "mat2x4" === e6 || "mat3x2" === e6 || "mat3x3" === e6 || "mat3x4" === e6 || "mat4x2" === e6 || "mat4x3" === e6 || "mat4x4" === e6) {
          if ("f32" === this.format.name)
            return e6 += "f", e6;
          if ("i32" === this.format.name)
            return e6 += "i", e6;
          if ("u32" === this.format.name)
            return e6 += "u", e6;
          if ("bool" === this.format.name)
            return e6 += "b", e6;
          if ("f16" === this.format.name)
            return e6 += "h", e6;
        }
        e6 += `<${this.format.name}>`;
      } else if ("vec2" === e6 || "vec3" === e6 || "vec4" === e6)
        return e6;
      return e6;
    }
  };
  ie.vec2f = new ie("vec2", se.f32, null), ie.vec3f = new ie("vec3", se.f32, null), ie.vec4f = new ie("vec4", se.f32, null), ie.vec2i = new ie("vec2", se.i32, null), ie.vec3i = new ie("vec3", se.i32, null), ie.vec4i = new ie("vec4", se.i32, null), ie.vec2u = new ie("vec2", se.u32, null), ie.vec3u = new ie("vec3", se.u32, null), ie.vec4u = new ie("vec4", se.u32, null), ie.vec2h = new ie("vec2", se.f16, null), ie.vec3h = new ie("vec3", se.f16, null), ie.vec4h = new ie("vec4", se.f16, null), ie.vec2b = new ie("vec2", se.bool, null), ie.vec3b = new ie("vec3", se.bool, null), ie.vec4b = new ie("vec4", se.bool, null), ie.mat2x2f = new ie("mat2x2", se.f32, null), ie.mat2x3f = new ie("mat2x3", se.f32, null), ie.mat2x4f = new ie("mat2x4", se.f32, null), ie.mat3x2f = new ie("mat3x2", se.f32, null), ie.mat3x3f = new ie("mat3x3", se.f32, null), ie.mat3x4f = new ie("mat3x4", se.f32, null), ie.mat4x2f = new ie("mat4x2", se.f32, null), ie.mat4x3f = new ie("mat4x3", se.f32, null), ie.mat4x4f = new ie("mat4x4", se.f32, null), ie.mat2x2h = new ie("mat2x2", se.f16, null), ie.mat2x3h = new ie("mat2x3", se.f16, null), ie.mat2x4h = new ie("mat2x4", se.f16, null), ie.mat3x2h = new ie("mat3x2", se.f16, null), ie.mat3x3h = new ie("mat3x3", se.f16, null), ie.mat3x4h = new ie("mat3x4", se.f16, null), ie.mat4x2h = new ie("mat4x2", se.f16, null), ie.mat4x3h = new ie("mat4x3", se.f16, null), ie.mat4x4h = new ie("mat4x4", se.f16, null), ie.mat2x2i = new ie("mat2x2", se.i32, null), ie.mat2x3i = new ie("mat2x3", se.i32, null), ie.mat2x4i = new ie("mat2x4", se.i32, null), ie.mat3x2i = new ie("mat3x2", se.i32, null), ie.mat3x3i = new ie("mat3x3", se.i32, null), ie.mat3x4i = new ie("mat3x4", se.i32, null), ie.mat4x2i = new ie("mat4x2", se.i32, null), ie.mat4x3i = new ie("mat4x3", se.i32, null), ie.mat4x4i = new ie("mat4x4", se.i32, null), ie.mat2x2u = new ie("mat2x2", se.u32, null), ie.mat2x3u = new ie("mat2x3", se.u32, null), ie.mat2x4u = new ie("mat2x4", se.u32, null), ie.mat3x2u = new ie("mat3x2", se.u32, null), ie.mat3x3u = new ie("mat3x3", se.u32, null), ie.mat3x4u = new ie("mat3x4", se.u32, null), ie.mat4x2u = new ie("mat4x2", se.u32, null), ie.mat4x3u = new ie("mat4x3", se.u32, null), ie.mat4x4u = new ie("mat4x4", se.u32, null);
  var oe = class extends se {
    constructor(e6, t5, n4, s5) {
      super(e6), this.storage = t5, this.type = n4, this.access = s5;
    }
    get astNodeType() {
      return "pointer";
    }
  };
  var le = class extends se {
    constructor(e6, t5, n4, s5) {
      super(e6), this.attributes = t5, this.format = n4, this.count = s5;
    }
    get astNodeType() {
      return "array";
    }
    get isArray() {
      return true;
    }
  };
  var ce = class extends se {
    constructor(e6, t5, n4) {
      super(e6), this.format = t5, this.access = n4;
    }
    get astNodeType() {
      return "sampler";
    }
  };
  var ue = class extends T {
    constructor() {
      super(), this.postfix = null;
    }
  };
  var he = class extends ue {
    constructor(e6) {
      super(), this.value = e6;
    }
    get astNodeType() {
      return "stringExpr";
    }
    toString() {
      return this.value;
    }
    constEvaluateString() {
      return this.value;
    }
  };
  var fe = class extends ue {
    constructor(e6, t5) {
      super(), this.type = e6, this.args = t5;
    }
    get astNodeType() {
      return "createExpr";
    }
    search(e6) {
      if (e6(this), this.args)
        for (const t5 of this.args)
          t5.search(e6);
    }
    constEvaluate(e6, t5) {
      return t5 && (t5[0] = this.type), e6.evalExpression(this, e6.context);
    }
  };
  var pe = class extends ue {
    constructor(e6, t5) {
      super(), this.cachedReturnValue = null, this.name = e6, this.args = t5;
    }
    get astNodeType() {
      return "callExpr";
    }
    setCachedReturnValue(e6) {
      this.cachedReturnValue = e6;
    }
    get isBuiltin() {
      return E.has(this.name);
    }
    constEvaluate(e6, t5) {
      return e6.evalExpression(this, e6.context);
    }
    search(e6) {
      for (const t5 of this.args)
        t5.search(e6);
      e6(this);
    }
  };
  var de = class extends ue {
    constructor(e6) {
      super(), this.name = e6;
    }
    get astNodeType() {
      return "varExpr";
    }
    search(e6) {
      e6(this), this.postfix && this.postfix.search(e6);
    }
    constEvaluate(e6, t5) {
      return e6.evalExpression(this, e6.context);
    }
  };
  var me = class extends ue {
    constructor(e6, t5) {
      super(), this.name = e6, this.initializer = t5;
    }
    get astNodeType() {
      return "constExpr";
    }
    constEvaluate(e6, t5) {
      if (this.initializer) {
        const t6 = e6.evalExpression(this.initializer, e6.context);
        return null !== t6 && this.postfix ? t6.getSubData(e6, this.postfix, e6.context) : t6;
      }
      return null;
    }
    search(e6) {
      this.initializer.search(e6);
    }
  };
  var _e = class extends ue {
    constructor(e6, t5) {
      super(), this.value = e6, this.type = t5;
    }
    get astNodeType() {
      return "literalExpr";
    }
    constEvaluate(e6, t5) {
      return void 0 !== t5 && (t5[0] = this.type), this.value;
    }
    get isScalar() {
      return this.value instanceof Ve;
    }
    get isVector() {
      return this.value instanceof Be || this.value instanceof Fe;
    }
    get scalarValue() {
      return this.value instanceof Ve ? this.value.value : (console.error("Value is not scalar."), 0);
    }
    get vectorValue() {
      return this.value instanceof Be || this.value instanceof Fe ? this.value.data : (console.error("Value is not a vector or matrix."), new Float32Array(0));
    }
  };
  var ge = class extends ue {
    constructor(e6, t5) {
      super(), this.type = e6, this.value = t5;
    }
    get astNodeType() {
      return "bitcastExpr";
    }
    search(e6) {
      this.value.search(e6);
    }
  };
  var ye = class extends ue {
    constructor(e6) {
      super(), this.index = e6;
    }
    search(e6) {
      this.index.search(e6);
    }
  };
  var be = class extends ue {
    constructor() {
      super();
    }
  };
  var ve = class extends be {
    constructor(e6, t5) {
      super(), this.operator = e6, this.right = t5;
    }
    get astNodeType() {
      return "unaryOp";
    }
    constEvaluate(e6, t5) {
      return e6.evalExpression(this, e6.context);
    }
    search(e6) {
      this.right.search(e6);
    }
  };
  var we = class extends be {
    constructor(e6, t5, n4) {
      super(), this.operator = e6, this.left = t5, this.right = n4;
    }
    get astNodeType() {
      return "binaryOp";
    }
    _getPromotedType(e6, t5) {
      return e6.name === t5.name ? e6 : "f32" === e6.name || "f32" === t5.name ? se.f32 : "u32" === e6.name || "u32" === t5.name ? se.u32 : se.i32;
    }
    constEvaluate(e6, t5) {
      return e6.evalExpression(this, e6.context);
    }
    search(e6) {
      this.left.search(e6), this.right.search(e6);
    }
  };
  var ke = class extends T {
    constructor(e6) {
      super(), this.body = e6;
    }
  };
  var Ie = class extends ue {
    constructor() {
      super();
    }
    get astNodeType() {
      return "default";
    }
  };
  var Te = class extends ke {
    constructor(e6, t5) {
      super(t5), this.selectors = e6;
    }
    get astNodeType() {
      return "case";
    }
    search(e6) {
      this.searchBlock(this.body, e6);
    }
  };
  var Se = class extends ke {
    constructor(e6) {
      super(e6);
    }
    get astNodeType() {
      return "default";
    }
    search(e6) {
      this.searchBlock(this.body, e6);
    }
  };
  var Ae = class extends T {
    constructor(e6, t5, n4) {
      super(), this.name = e6, this.type = t5, this.attributes = n4;
    }
    get astNodeType() {
      return "argument";
    }
  };
  var Ee = class extends T {
    constructor(e6, t5) {
      super(), this.condition = e6, this.body = t5;
    }
    get astNodeType() {
      return "elseif";
    }
    search(e6) {
      this.condition.search(e6), this.searchBlock(this.body, e6);
    }
  };
  var $e = class extends T {
    constructor(e6, t5, n4) {
      super(), this.name = e6, this.type = t5, this.attributes = n4;
    }
    get astNodeType() {
      return "member";
    }
  };
  var Le = class extends T {
    constructor(e6, t5) {
      super(), this.name = e6, this.value = t5;
    }
    get astNodeType() {
      return "attribute";
    }
  };
  var Ce = class {
    constructor(e6, t5) {
      this.parent = null, this.typeInfo = e6, this.parent = t5, this.id = Ce._id++;
    }
    clone() {
      throw `Clone: Not implemented for ${this.constructor.name}`;
    }
    setDataValue(e6, t5, n4, s5) {
      console.error(`SetDataValue: Not implemented for ${this.constructor.name}`);
    }
    getSubData(e6, t5, n4) {
      return console.error(`GetDataValue: Not implemented for ${this.constructor.name}`), null;
    }
    toString() {
      return `<${this.typeInfo.name}>`;
    }
  };
  Ce._id = 0;
  var De = class extends Ce {
    constructor() {
      super(new e("void", null), null);
    }
    toString() {
      return "void";
    }
  };
  De.void = new De();
  var Ne = class extends Ce {
    constructor(t5) {
      super(new e("pointer", null), null), this.reference = t5;
    }
    clone() {
      return this;
    }
    setDataValue(e6, t5, n4, s5) {
      this.reference.setDataValue(e6, t5, n4, s5);
    }
    getSubData(e6, t5, n4) {
      return t5 ? this.reference.getSubData(e6, t5, n4) : this;
    }
  };
  var Ve = class extends Ce {
    constructor(e6, t5, n4 = null) {
      super(t5, n4), e6 instanceof Int32Array || e6 instanceof Uint32Array || e6 instanceof Float32Array ? this.data = e6 : "x32" === this.typeInfo.name ? e6 - Math.floor(e6) != 0 ? this.data = new Float32Array([e6]) : this.data = e6 >= 0 ? new Uint32Array([e6]) : new Int32Array([e6]) : "i32" === this.typeInfo.name || "bool" === this.typeInfo.name ? this.data = new Int32Array([e6]) : "u32" === this.typeInfo.name ? this.data = new Uint32Array([e6]) : "f32" === this.typeInfo.name || "f16" === this.typeInfo.name ? this.data = new Float32Array([e6]) : console.error("ScalarData2: Invalid type", t5);
    }
    clone() {
      if (this.data instanceof Float32Array)
        return new Ve(new Float32Array(this.data), this.typeInfo, null);
      if (this.data instanceof Int32Array)
        return new Ve(new Int32Array(this.data), this.typeInfo, null);
      if (this.data instanceof Uint32Array)
        return new Ve(new Uint32Array(this.data), this.typeInfo, null);
      throw "ScalarData: Invalid data type";
    }
    get value() {
      return this.data[0];
    }
    set value(e6) {
      this.data[0] = e6;
    }
    setDataValue(e6, t5, n4, s5) {
      if (n4)
        return void console.error("SetDataValue: Scalar data does not support postfix", n4);
      if (!(t5 instanceof Ve))
        return void console.error("SetDataValue: Invalid value", t5);
      let r5 = t5.data[0];
      "i32" === this.typeInfo.name || "u32" === this.typeInfo.name ? r5 = Math.floor(r5) : "bool" === this.typeInfo.name && (r5 = r5 ? 1 : 0), this.data[0] = r5;
    }
    getSubData(e6, t5, n4) {
      return t5 ? (console.error("getSubData: Scalar data does not support postfix", t5), null) : this;
    }
    toString() {
      return `${this.value}`;
    }
  };
  function Oe(e6, t5, n4) {
    const s5 = t5.length;
    return 2 === s5 ? "f32" === n4 ? new Be(new Float32Array(t5), e6.getTypeInfo("vec2f")) : "i32" === n4 || "bool" === n4 ? new Be(new Int32Array(t5), e6.getTypeInfo("vec2i")) : "u32" === n4 ? new Be(new Uint32Array(t5), e6.getTypeInfo("vec2u")) : "f16" === n4 ? new Be(new Float32Array(t5), e6.getTypeInfo("vec2h")) : (console.error(`getSubData: Unknown format ${n4}`), null) : 3 === s5 ? "f32" === n4 ? new Be(new Float32Array(t5), e6.getTypeInfo("vec3f")) : "i32" === n4 || "bool" === n4 ? new Be(new Int32Array(t5), e6.getTypeInfo("vec3i")) : "u32" === n4 ? new Be(new Uint32Array(t5), e6.getTypeInfo("vec3u")) : "f16" === n4 ? new Be(new Float32Array(t5), e6.getTypeInfo("vec3h")) : (console.error(`getSubData: Unknown format ${n4}`), null) : 4 === s5 ? "f32" === n4 ? new Be(new Float32Array(t5), e6.getTypeInfo("vec4f")) : "i32" === n4 || "bool" === n4 ? new Be(new Int32Array(t5), e6.getTypeInfo("vec4i")) : "u32" === n4 ? new Be(new Uint32Array(t5), e6.getTypeInfo("vec4u")) : "f16" === n4 ? new Be(new Float32Array(t5), e6.getTypeInfo("vec4h")) : (console.error(`getSubData: Unknown format ${n4}`), null) : (console.error(`getSubData: Invalid vector size ${t5.length}`), null);
  }
  var Be = class extends Ce {
    constructor(e6, t5, n4 = null) {
      if (super(t5, n4), e6 instanceof Float32Array || e6 instanceof Uint32Array || e6 instanceof Int32Array)
        this.data = e6;
      else {
        const t6 = this.typeInfo.name;
        "vec2f" === t6 || "vec3f" === t6 || "vec4f" === t6 ? this.data = new Float32Array(e6) : "vec2i" === t6 || "vec3i" === t6 || "vec4i" === t6 ? this.data = new Int32Array(e6) : "vec2u" === t6 || "vec3u" === t6 || "vec4u" === t6 ? this.data = new Uint32Array(e6) : "vec2h" === t6 || "vec3h" === t6 || "vec4h" === t6 ? this.data = new Float32Array(e6) : "vec2b" === t6 || "vec3b" === t6 || "vec4b" === t6 ? this.data = new Int32Array(e6) : "vec2" === t6 || "vec3" === t6 || "vec4" === t6 ? this.data = new Float32Array(e6) : console.error(`VectorData: Invalid type ${t6}`);
      }
    }
    clone() {
      if (this.data instanceof Float32Array)
        return new Be(new Float32Array(this.data), this.typeInfo, null);
      if (this.data instanceof Int32Array)
        return new Be(new Int32Array(this.data), this.typeInfo, null);
      if (this.data instanceof Uint32Array)
        return new Be(new Uint32Array(this.data), this.typeInfo, null);
      throw "VectorData: Invalid data type";
    }
    setDataValue(e6, t5, n4, s5) {
      n4 instanceof he ? console.error("TODO: Set vector postfix") : t5 instanceof Be ? this.data = t5.data : console.error("SetDataValue: Invalid value", t5);
    }
    getSubData(e6, t5, n4) {
      if (null === t5)
        return this;
      let s5 = e6.getTypeInfo("f32");
      if (this.typeInfo instanceof r)
        s5 = this.typeInfo.format || s5;
      else {
        const t6 = this.typeInfo.name;
        "vec2f" === t6 || "vec3f" === t6 || "vec4f" === t6 ? s5 = e6.getTypeInfo("f32") : "vec2i" === t6 || "vec3i" === t6 || "vec4i" === t6 ? s5 = e6.getTypeInfo("i32") : "vec2b" === t6 || "vec3b" === t6 || "vec4b" === t6 ? s5 = e6.getTypeInfo("bool") : "vec2u" === t6 || "vec3u" === t6 || "vec4u" === t6 ? s5 = e6.getTypeInfo("u32") : "vec2h" === t6 || "vec3h" === t6 || "vec4h" === t6 ? s5 = e6.getTypeInfo("f16") : console.error(`GetSubData: Unknown type ${t6}`);
      }
      let a6 = this;
      for (; null !== t5 && null !== a6; ) {
        if (t5 instanceof ye) {
          const r5 = t5.index;
          let i7 = -1;
          if (r5 instanceof _e) {
            if (!(r5.value instanceof Ve))
              return console.error(`GetSubData: Invalid array index ${r5.value}`), null;
            i7 = r5.value.value;
          } else {
            const t6 = e6.evalExpression(r5, n4);
            if (!(t6 instanceof Ve))
              return console.error("GetSubData: Unknown index type", r5), null;
            i7 = t6.value;
          }
          if (i7 < 0 || i7 >= a6.data.length)
            return console.error("GetSubData: Index out of range", i7), null;
          if (a6.data instanceof Float32Array) {
            const e7 = new Float32Array(a6.data.buffer, a6.data.byteOffset + 4 * i7, 1);
            return new Ve(e7, s5);
          }
          if (a6.data instanceof Int32Array) {
            const e7 = new Int32Array(a6.data.buffer, a6.data.byteOffset + 4 * i7, 1);
            return new Ve(e7, s5);
          }
          if (a6.data instanceof Uint32Array) {
            const e7 = new Uint32Array(a6.data.buffer, a6.data.byteOffset + 4 * i7, 1);
            return new Ve(e7, s5);
          }
          throw "GetSubData: Invalid data type";
        }
        if (!(t5 instanceof he))
          return console.error("GetSubData: Unknown postfix", t5), null;
        {
          const n5 = t5.value.toLowerCase();
          if (1 === n5.length) {
            let e7 = 0;
            if ("x" === n5 || "r" === n5)
              e7 = 0;
            else if ("y" === n5 || "g" === n5)
              e7 = 1;
            else if ("z" === n5 || "b" === n5)
              e7 = 2;
            else {
              if ("w" !== n5 && "a" !== n5)
                return console.error(`GetSubData: Unknown member ${n5}`), null;
              e7 = 3;
            }
            if (this.data instanceof Float32Array) {
              let t6 = new Float32Array(this.data.buffer, this.data.byteOffset + 4 * e7, 1);
              return new Ve(t6, s5, this);
            }
            if (this.data instanceof Int32Array) {
              let t6 = new Int32Array(this.data.buffer, this.data.byteOffset + 4 * e7, 1);
              return new Ve(t6, s5, this);
            }
            if (this.data instanceof Uint32Array) {
              let t6 = new Uint32Array(this.data.buffer, this.data.byteOffset + 4 * e7, 1);
              return new Ve(t6, s5, this);
            }
          }
          const r5 = [];
          for (const e7 of n5)
            "x" === e7 || "r" === e7 ? r5.push(this.data[0]) : "y" === e7 || "g" === e7 ? r5.push(this.data[1]) : "z" === e7 || "b" === e7 ? r5.push(this.data[2]) : "w" === e7 || "a" === e7 ? r5.push(this.data[3]) : console.error(`GetDataValue: Unknown member ${e7}`);
          a6 = Oe(e6, r5, s5.name);
        }
        t5 = t5.postfix;
      }
      return a6;
    }
    toString() {
      let e6 = `${this.data[0]}`;
      for (let t5 = 1; t5 < this.data.length; ++t5)
        e6 += `, ${this.data[t5]}`;
      return e6;
    }
  };
  var Fe = class extends Ce {
    constructor(e6, t5, n4 = null) {
      super(t5, n4), e6 instanceof Float32Array ? this.data = e6 : this.data = new Float32Array(e6);
    }
    clone() {
      return new Fe(new Float32Array(this.data), this.typeInfo, null);
    }
    setDataValue(e6, t5, n4, s5) {
      n4 instanceof he ? console.error("TODO: Set matrix postfix") : t5 instanceof Fe ? this.data = t5.data : console.error("SetDataValue: Invalid value", t5);
    }
    getSubData(e6, t5, n4) {
      if (null === t5)
        return this;
      const s5 = this.typeInfo.name;
      if (e6.getTypeInfo("f32"), this.typeInfo instanceof r)
        this.typeInfo.format;
      else if (s5.endsWith("f"))
        e6.getTypeInfo("f32");
      else if (s5.endsWith("i"))
        e6.getTypeInfo("i32");
      else if (s5.endsWith("u"))
        e6.getTypeInfo("u32");
      else {
        if (!s5.endsWith("h"))
          return console.error(`GetDataValue: Unknown type ${s5}`), null;
        e6.getTypeInfo("f16");
      }
      if (t5 instanceof ye) {
        const r5 = t5.index;
        let a6 = -1;
        if (r5 instanceof _e) {
          if (!(r5.value instanceof Ve))
            return console.error(`GetDataValue: Invalid array index ${r5.value}`), null;
          a6 = r5.value.value;
        } else {
          const t6 = e6.evalExpression(r5, n4);
          if (!(t6 instanceof Ve))
            return console.error("GetDataValue: Unknown index type", r5), null;
          a6 = t6.value;
        }
        if (a6 < 0 || a6 >= this.data.length)
          return console.error("GetDataValue: Index out of range", a6), null;
        const i7 = s5.endsWith("h") ? "h" : "f";
        let o5;
        if ("mat2x2" === s5 || "mat2x2f" === s5 || "mat2x2h" === s5 || "mat3x2" === s5 || "mat3x2f" === s5 || "mat3x2h" === s5 || "mat4x2" === s5 || "mat4x2f" === s5 || "mat4x2h" === s5)
          o5 = new Be(new Float32Array(this.data.buffer, this.data.byteOffset + 2 * a6 * 4, 2), e6.getTypeInfo(`vec2${i7}`));
        else if ("mat2x3" === s5 || "mat2x3f" === s5 || "mat2x3h" === s5 || "mat3x3" === s5 || "mat3x3f" === s5 || "mat3x3h" === s5 || "mat4x3" === s5 || "mat4x3f" === s5 || "mat4x3h" === s5)
          o5 = new Be(new Float32Array(this.data.buffer, this.data.byteOffset + 3 * a6 * 4, 3), e6.getTypeInfo(`vec3${i7}`));
        else {
          if ("mat2x4" !== s5 && "mat2x4f" !== s5 && "mat2x4h" !== s5 && "mat3x4" !== s5 && "mat3x4f" !== s5 && "mat3x4h" !== s5 && "mat4x4" !== s5 && "mat4x4f" !== s5 && "mat4x4h" !== s5)
            return console.error(`GetDataValue: Unknown type ${s5}`), null;
          o5 = new Be(new Float32Array(this.data.buffer, this.data.byteOffset + 4 * a6 * 4, 4), e6.getTypeInfo(`vec4${i7}`));
        }
        return t5.postfix ? o5.getSubData(e6, t5.postfix, n4) : o5;
      }
      return console.error("GetDataValue: Invalid postfix", t5), null;
    }
    toString() {
      let e6 = `${this.data[0]}`;
      for (let t5 = 1; t5 < this.data.length; ++t5)
        e6 += `, ${this.data[t5]}`;
      return e6;
    }
  };
  var Me = class extends Ce {
    constructor(e6, t5, n4 = 0, s5 = null) {
      super(t5, s5), this.buffer = e6 instanceof ArrayBuffer ? e6 : e6.buffer, this.offset = n4;
    }
    clone() {
      const e6 = new Uint8Array(new Uint8Array(this.buffer, this.offset, this.typeInfo.size));
      return new Me(e6.buffer, this.typeInfo, 0, null);
    }
    setDataValue(t5, r5, a6, i7) {
      if (null === r5)
        return void console.log("setDataValue: NULL data.");
      let o5 = this.offset, l5 = this.typeInfo;
      for (; a6; ) {
        if (a6 instanceof ye)
          if (l5 instanceof s) {
            const e6 = a6.index;
            if (e6 instanceof _e) {
              if (!(e6.value instanceof Ve))
                return void console.error(`SetDataValue: Invalid index type ${e6.value}`);
              o5 += e6.value.value * l5.stride;
            } else {
              const n4 = t5.evalExpression(e6, i7);
              if (!(n4 instanceof Ve))
                return void console.error("SetDataValue: Unknown index type", e6);
              o5 += n4.value * l5.stride;
            }
            l5 = l5.format;
          } else
            console.error(`SetDataValue: Type ${l5.getTypeName()} is not an array`);
        else {
          if (!(a6 instanceof he))
            return void console.error("SetDataValue: Unknown postfix type", a6);
          {
            const t6 = a6.value;
            if (l5 instanceof n) {
              let e6 = false;
              for (const n4 of l5.members)
                if (n4.name === t6) {
                  o5 += n4.offset, l5 = n4.type, e6 = true;
                  break;
                }
              if (!e6)
                return void console.error(`SetDataValue: Member ${t6} not found`);
            } else if (l5 instanceof e) {
              const e6 = l5.getTypeName();
              let n4 = 0;
              if ("x" === t6 || "r" === t6)
                n4 = 0;
              else if ("y" === t6 || "g" === t6)
                n4 = 1;
              else if ("z" === t6 || "b" === t6)
                n4 = 2;
              else {
                if ("w" !== t6 && "a" !== t6)
                  return void console.error(`SetDataValue: Unknown member ${t6}`);
                n4 = 3;
              }
              if (!(r5 instanceof Ve))
                return void console.error("SetDataValue: Invalid value", r5);
              const s5 = r5.value;
              return "vec2f" === e6 ? void (new Float32Array(this.buffer, o5, 2)[n4] = s5) : "vec3f" === e6 ? void (new Float32Array(this.buffer, o5, 3)[n4] = s5) : "vec4f" === e6 ? void (new Float32Array(this.buffer, o5, 4)[n4] = s5) : "vec2i" === e6 ? void (new Int32Array(this.buffer, o5, 2)[n4] = s5) : "vec3i" === e6 ? void (new Int32Array(this.buffer, o5, 3)[n4] = s5) : "vec4i" === e6 ? void (new Int32Array(this.buffer, o5, 4)[n4] = s5) : "vec2u" === e6 ? void (new Uint32Array(this.buffer, o5, 2)[n4] = s5) : "vec3u" === e6 ? void (new Uint32Array(this.buffer, o5, 3)[n4] = s5) : "vec4u" === e6 ? void (new Uint32Array(this.buffer, o5, 4)[n4] = s5) : void console.error(`SetDataValue: Type ${e6} is not a struct`);
            }
          }
        }
        a6 = a6.postfix;
      }
      this.setData(t5, r5, l5, o5, i7);
    }
    setData(e6, t5, n4, s5, r5) {
      const a6 = n4.getTypeName();
      if ("f32" !== a6 && "f16" !== a6)
        if ("i32" !== a6 && "atomic<i32>" !== a6 && "x32" !== a6)
          if ("u32" !== a6 && "atomic<u32>" !== a6)
            if ("bool" !== a6)
              if ("vec2f" !== a6 && "vec2h" !== a6)
                if ("vec3f" !== a6 && "vec3h" !== a6)
                  if ("vec4f" !== a6 && "vec4h" !== a6)
                    if ("vec2i" !== a6)
                      if ("vec3i" !== a6)
                        if ("vec4i" !== a6)
                          if ("vec2u" !== a6)
                            if ("vec3u" !== a6)
                              if ("vec4u" !== a6)
                                if ("vec2b" !== a6)
                                  if ("vec3b" !== a6)
                                    if ("vec4b" !== a6)
                                      if ("mat2x2f" !== a6 && "mat2x2h" !== a6)
                                        if ("mat2x3f" !== a6 && "mat2x3h" !== a6)
                                          if ("mat2x4f" !== a6 && "mat2x4h" !== a6)
                                            if ("mat3x2f" !== a6 && "mat3x2h" !== a6)
                                              if ("mat3x3f" !== a6 && "mat3x3h" !== a6)
                                                if ("mat3x4f" !== a6 && "mat3x4h" !== a6)
                                                  if ("mat4x2f" !== a6 && "mat4x2h" !== a6)
                                                    if ("mat4x3f" !== a6 && "mat4x3h" !== a6)
                                                      if ("mat4x4f" !== a6 && "mat4x4h" !== a6)
                                                        if (t5 instanceof Me) {
                                                          if (n4 === t5.typeInfo) {
                                                            return void new Uint8Array(this.buffer, s5, t5.buffer.byteLength).set(new Uint8Array(t5.buffer));
                                                          }
                                                          console.error("SetDataValue: Type mismatch", a6, t5.typeInfo.getTypeName());
                                                        } else
                                                          console.error(`SetData: Unknown type ${a6}`);
                                                      else {
                                                        const e7 = new Float32Array(this.buffer, s5, 16);
                                                        t5 instanceof Fe ? (e7[0] = t5.data[0], e7[1] = t5.data[1], e7[2] = t5.data[2], e7[3] = t5.data[3], e7[4] = t5.data[4], e7[5] = t5.data[5], e7[6] = t5.data[6], e7[7] = t5.data[7], e7[8] = t5.data[8], e7[9] = t5.data[9], e7[10] = t5.data[10], e7[11] = t5.data[11], e7[12] = t5.data[12], e7[13] = t5.data[13], e7[14] = t5.data[14], e7[15] = t5.data[15]) : (e7[0] = t5[0], e7[1] = t5[1], e7[2] = t5[2], e7[3] = t5[3], e7[4] = t5[4], e7[5] = t5[5], e7[6] = t5[6], e7[7] = t5[7], e7[8] = t5[8], e7[9] = t5[9], e7[10] = t5[10], e7[11] = t5[11], e7[12] = t5[12], e7[13] = t5[13], e7[14] = t5[14], e7[15] = t5[15]);
                                                      }
                                                    else {
                                                      const e7 = new Float32Array(this.buffer, s5, 12);
                                                      t5 instanceof Fe ? (e7[0] = t5.data[0], e7[1] = t5.data[1], e7[2] = t5.data[2], e7[3] = t5.data[3], e7[4] = t5.data[4], e7[5] = t5.data[5], e7[6] = t5.data[6], e7[7] = t5.data[7], e7[8] = t5.data[8], e7[9] = t5.data[9], e7[10] = t5.data[10], e7[11] = t5.data[11]) : (e7[0] = t5[0], e7[1] = t5[1], e7[2] = t5[2], e7[3] = t5[3], e7[4] = t5[4], e7[5] = t5[5], e7[6] = t5[6], e7[7] = t5[7], e7[8] = t5[8], e7[9] = t5[9], e7[10] = t5[10], e7[11] = t5[11]);
                                                    }
                                                  else {
                                                    const e7 = new Float32Array(this.buffer, s5, 8);
                                                    t5 instanceof Fe ? (e7[0] = t5.data[0], e7[1] = t5.data[1], e7[2] = t5.data[2], e7[3] = t5.data[3], e7[4] = t5.data[4], e7[5] = t5.data[5], e7[6] = t5.data[6], e7[7] = t5.data[7]) : (e7[0] = t5[0], e7[1] = t5[1], e7[2] = t5[2], e7[3] = t5[3], e7[4] = t5[4], e7[5] = t5[5], e7[6] = t5[6], e7[7] = t5[7]);
                                                  }
                                                else {
                                                  const e7 = new Float32Array(this.buffer, s5, 12);
                                                  t5 instanceof Fe ? (e7[0] = t5.data[0], e7[1] = t5.data[1], e7[2] = t5.data[2], e7[3] = t5.data[3], e7[4] = t5.data[4], e7[5] = t5.data[5], e7[6] = t5.data[6], e7[7] = t5.data[7], e7[8] = t5.data[8], e7[9] = t5.data[9], e7[10] = t5.data[10], e7[11] = t5.data[11]) : (e7[0] = t5[0], e7[1] = t5[1], e7[2] = t5[2], e7[3] = t5[3], e7[4] = t5[4], e7[5] = t5[5], e7[6] = t5[6], e7[7] = t5[7], e7[8] = t5[8], e7[9] = t5[9], e7[10] = t5[10], e7[11] = t5[11]);
                                                }
                                              else {
                                                const e7 = new Float32Array(this.buffer, s5, 9);
                                                t5 instanceof Fe ? (e7[0] = t5.data[0], e7[1] = t5.data[1], e7[2] = t5.data[2], e7[3] = t5.data[3], e7[4] = t5.data[4], e7[5] = t5.data[5], e7[6] = t5.data[6], e7[7] = t5.data[7], e7[8] = t5.data[8]) : (e7[0] = t5[0], e7[1] = t5[1], e7[2] = t5[2], e7[3] = t5[3], e7[4] = t5[4], e7[5] = t5[5], e7[6] = t5[6], e7[7] = t5[7], e7[8] = t5[8]);
                                              }
                                            else {
                                              const e7 = new Float32Array(this.buffer, s5, 6);
                                              t5 instanceof Fe ? (e7[0] = t5.data[0], e7[1] = t5.data[1], e7[2] = t5.data[2], e7[3] = t5.data[3], e7[4] = t5.data[4], e7[5] = t5.data[5]) : (e7[0] = t5[0], e7[1] = t5[1], e7[2] = t5[2], e7[3] = t5[3], e7[4] = t5[4], e7[5] = t5[5]);
                                            }
                                          else {
                                            const e7 = new Float32Array(this.buffer, s5, 8);
                                            t5 instanceof Fe ? (e7[0] = t5.data[0], e7[1] = t5.data[1], e7[2] = t5.data[2], e7[3] = t5.data[3], e7[4] = t5.data[4], e7[5] = t5.data[5], e7[6] = t5.data[6], e7[7] = t5.data[7]) : (e7[0] = t5[0], e7[1] = t5[1], e7[2] = t5[2], e7[3] = t5[3], e7[4] = t5[4], e7[5] = t5[5], e7[6] = t5[6], e7[7] = t5[7]);
                                          }
                                        else {
                                          const e7 = new Float32Array(this.buffer, s5, 6);
                                          t5 instanceof Fe ? (e7[0] = t5.data[0], e7[1] = t5.data[1], e7[2] = t5.data[2], e7[3] = t5.data[3], e7[4] = t5.data[4], e7[5] = t5.data[5]) : (e7[0] = t5[0], e7[1] = t5[1], e7[2] = t5[2], e7[3] = t5[3], e7[4] = t5[4], e7[5] = t5[5]);
                                        }
                                      else {
                                        const e7 = new Float32Array(this.buffer, s5, 4);
                                        t5 instanceof Fe ? (e7[0] = t5.data[0], e7[1] = t5.data[1], e7[2] = t5.data[2], e7[3] = t5.data[3]) : (e7[0] = t5[0], e7[1] = t5[1], e7[2] = t5[2], e7[3] = t5[3]);
                                      }
                                    else {
                                      const e7 = new Uint32Array(this.buffer, s5, 4);
                                      t5 instanceof Be ? (e7[0] = t5.data[0], e7[1] = t5.data[1], e7[2] = t5.data[2], e7[3] = t5.data[3]) : (e7[0] = t5[0], e7[1] = t5[1], e7[2] = t5[2], e7[3] = t5[3]);
                                    }
                                  else {
                                    const e7 = new Uint32Array(this.buffer, s5, 3);
                                    t5 instanceof Be ? (e7[0] = t5.data[0], e7[1] = t5.data[1], e7[2] = t5.data[2]) : (e7[0] = t5[0], e7[1] = t5[1], e7[2] = t5[2]);
                                  }
                                else {
                                  const e7 = new Uint32Array(this.buffer, s5, 2);
                                  t5 instanceof Be ? (e7[0] = t5.data[0], e7[1] = t5.data[1]) : (e7[0] = t5[0], e7[1] = t5[1]);
                                }
                              else {
                                const e7 = new Uint32Array(this.buffer, s5, 4);
                                t5 instanceof Be ? (e7[0] = t5.data[0], e7[1] = t5.data[1], e7[2] = t5.data[2], e7[3] = t5.data[3]) : (e7[0] = t5[0], e7[1] = t5[1], e7[2] = t5[2], e7[3] = t5[3]);
                              }
                            else {
                              const e7 = new Uint32Array(this.buffer, s5, 3);
                              t5 instanceof Be ? (e7[0] = t5.data[0], e7[1] = t5.data[1], e7[2] = t5.data[2]) : (e7[0] = t5[0], e7[1] = t5[1], e7[2] = t5[2]);
                            }
                          else {
                            const e7 = new Uint32Array(this.buffer, s5, 2);
                            t5 instanceof Be ? (e7[0] = t5.data[0], e7[1] = t5.data[1]) : (e7[0] = t5[0], e7[1] = t5[1]);
                          }
                        else {
                          const e7 = new Int32Array(this.buffer, s5, 4);
                          t5 instanceof Be ? (e7[0] = t5.data[0], e7[1] = t5.data[1], e7[2] = t5.data[2], e7[3] = t5.data[3]) : (e7[0] = t5[0], e7[1] = t5[1], e7[2] = t5[2], e7[3] = t5[3]);
                        }
                      else {
                        const e7 = new Int32Array(this.buffer, s5, 3);
                        t5 instanceof Be ? (e7[0] = t5.data[0], e7[1] = t5.data[1], e7[2] = t5.data[2]) : (e7[0] = t5[0], e7[1] = t5[1], e7[2] = t5[2]);
                      }
                    else {
                      const e7 = new Int32Array(this.buffer, s5, 2);
                      t5 instanceof Be ? (e7[0] = t5.data[0], e7[1] = t5.data[1]) : (e7[0] = t5[0], e7[1] = t5[1]);
                    }
                  else {
                    const e7 = new Float32Array(this.buffer, s5, 4);
                    t5 instanceof Be ? (e7[0] = t5.data[0], e7[1] = t5.data[1], e7[2] = t5.data[2], e7[3] = t5.data[3]) : (e7[0] = t5[0], e7[1] = t5[1], e7[2] = t5[2], e7[3] = t5[3]);
                  }
                else {
                  const e7 = new Float32Array(this.buffer, s5, 3);
                  t5 instanceof Be ? (e7[0] = t5.data[0], e7[1] = t5.data[1], e7[2] = t5.data[2]) : (e7[0] = t5[0], e7[1] = t5[1], e7[2] = t5[2]);
                }
              else {
                const e7 = new Float32Array(this.buffer, s5, 2);
                t5 instanceof Be ? (e7[0] = t5.data[0], e7[1] = t5.data[1]) : (e7[0] = t5[0], e7[1] = t5[1]);
              }
            else
              t5 instanceof Ve && (new Int32Array(this.buffer, s5, 1)[0] = t5.value);
          else
            t5 instanceof Ve && (new Uint32Array(this.buffer, s5, 1)[0] = t5.value);
        else
          t5 instanceof Ve && (new Int32Array(this.buffer, s5, 1)[0] = t5.value);
      else
        t5 instanceof Ve && (new Float32Array(this.buffer, s5, 1)[0] = t5.value);
    }
    getSubData(t5, a6, i7) {
      var o5, l5, c5;
      if (null === a6)
        return this;
      let u6 = this.offset, h5 = this.typeInfo;
      for (; a6; ) {
        if (a6 instanceof ye) {
          const e6 = a6.index, n4 = t5.evalExpression(e6, i7);
          let r5 = 0;
          if (n4 instanceof Ve ? r5 = n4.value : console.error("GetDataValue: Invalid index type", e6), h5 instanceof s)
            u6 += r5 * h5.stride, h5 = h5.format;
          else {
            const e7 = h5.getTypeName();
            "mat4x4" === e7 || "mat4x4f" === e7 || "mat4x4h" === e7 ? (u6 += 16 * r5, h5 = t5.getTypeInfo("vec4f")) : console.error(`getDataValue: Type ${h5.getTypeName()} is not an array`);
          }
        } else {
          if (!(a6 instanceof he))
            return console.error("GetDataValue: Unknown postfix type", a6), null;
          {
            const s5 = a6.value;
            if (h5 instanceof n) {
              let e6 = false;
              for (const t6 of h5.members)
                if (t6.name === s5) {
                  u6 += t6.offset, h5 = t6.type, e6 = true;
                  break;
                }
              if (!e6)
                return console.error(`GetDataValue: Member ${s5} not found`), null;
            } else if (h5 instanceof e) {
              const e6 = h5.getTypeName();
              if ("vec2f" === e6 || "vec3f" === e6 || "vec4f" === e6 || "vec2i" === e6 || "vec3i" === e6 || "vec4i" === e6 || "vec2u" === e6 || "vec3u" === e6 || "vec4u" === e6 || "vec2b" === e6 || "vec3b" === e6 || "vec4b" === e6 || "vec2h" === e6 || "vec3h" === e6 || "vec4h" === e6 || "vec2" === e6 || "vec3" === e6 || "vec4" === e6) {
                if (s5.length > 0 && s5.length < 5) {
                  let n4 = "f";
                  const r5 = [];
                  for (let a7 = 0; a7 < s5.length; ++a7) {
                    const i8 = s5[a7].toLowerCase();
                    let o6 = 0;
                    if ("x" === i8 || "r" === i8)
                      o6 = 0;
                    else if ("y" === i8 || "g" === i8)
                      o6 = 1;
                    else if ("z" === i8 || "b" === i8)
                      o6 = 2;
                    else {
                      if ("w" !== i8 && "a" !== i8)
                        return console.error(`Unknown member ${s5}`), null;
                      o6 = 3;
                    }
                    if (1 === s5.length) {
                      if (e6.endsWith("f"))
                        return this.buffer.byteLength < u6 + 4 * o6 + 4 ? (console.log("Insufficient buffer data"), null) : new Ve(new Float32Array(this.buffer, u6 + 4 * o6, 1), t5.getTypeInfo("f32"), this);
                      if (e6.endsWith("h"))
                        return new Ve(new Float32Array(this.buffer, u6 + 4 * o6, 1), t5.getTypeInfo("f16"), this);
                      if (e6.endsWith("i"))
                        return new Ve(new Int32Array(this.buffer, u6 + 4 * o6, 1), t5.getTypeInfo("i32"), this);
                      if (e6.endsWith("b"))
                        return new Ve(new Int32Array(this.buffer, u6 + 4 * o6, 1), t5.getTypeInfo("bool"), this);
                      if (e6.endsWith("u"))
                        return new Ve(new Uint32Array(this.buffer, u6 + 4 * o6, 1), t5.getTypeInfo("i32"), this);
                    }
                    if ("vec2f" === e6)
                      r5.push(new Float32Array(this.buffer, u6, 2)[o6]);
                    else if ("vec3f" === e6) {
                      if (u6 + 12 >= this.buffer.byteLength)
                        return console.log("Insufficient buffer data"), null;
                      const e7 = new Float32Array(this.buffer, u6, 3);
                      r5.push(e7[o6]);
                    } else if ("vec4f" === e6)
                      r5.push(new Float32Array(this.buffer, u6, 4)[o6]);
                    else if ("vec2i" === e6)
                      n4 = "i", r5.push(new Int32Array(this.buffer, u6, 2)[o6]);
                    else if ("vec3i" === e6)
                      n4 = "i", r5.push(new Int32Array(this.buffer, u6, 3)[o6]);
                    else if ("vec4i" === e6)
                      n4 = "i", r5.push(new Int32Array(this.buffer, u6, 4)[o6]);
                    else if ("vec2u" === e6) {
                      n4 = "u";
                      const e7 = new Uint32Array(this.buffer, u6, 2);
                      r5.push(e7[o6]);
                    } else
                      "vec3u" === e6 ? (n4 = "u", r5.push(new Uint32Array(this.buffer, u6, 3)[o6])) : "vec4u" === e6 && (n4 = "u", r5.push(new Uint32Array(this.buffer, u6, 4)[o6]));
                  }
                  return 2 === r5.length ? h5 = t5.getTypeInfo(`vec2${n4}`) : 3 === r5.length ? h5 = t5.getTypeInfo(`vec3${n4}`) : 4 === r5.length ? h5 = t5.getTypeInfo(`vec4${n4}`) : console.error(`GetDataValue: Invalid vector length ${r5.length}`), new Be(r5, h5, null);
                }
                return console.error(`GetDataValue: Unknown member ${s5}`), null;
              }
              return console.error(`GetDataValue: Type ${e6} is not a struct`), null;
            }
          }
        }
        a6 = a6.postfix;
      }
      const f6 = h5.getTypeName();
      return "f32" === f6 ? new Ve(new Float32Array(this.buffer, u6, 1), h5, this) : "i32" === f6 ? new Ve(new Int32Array(this.buffer, u6, 1), h5, this) : "u32" === f6 ? new Ve(new Uint32Array(this.buffer, u6, 1), h5, this) : "vec2f" === f6 ? new Be(new Float32Array(this.buffer, u6, 2), h5, this) : "vec3f" === f6 ? new Be(new Float32Array(this.buffer, u6, 3), h5, this) : "vec4f" === f6 ? new Be(new Float32Array(this.buffer, u6, 4), h5, this) : "vec2i" === f6 ? new Be(new Int32Array(this.buffer, u6, 2), h5, this) : "vec3i" === f6 ? new Be(new Int32Array(this.buffer, u6, 3), h5, this) : "vec4i" === f6 ? new Be(new Int32Array(this.buffer, u6, 4), h5, this) : "vec2u" === f6 ? new Be(new Uint32Array(this.buffer, u6, 2), h5, this) : "vec3u" === f6 ? new Be(new Uint32Array(this.buffer, u6, 3), h5, this) : "vec4u" === f6 ? new Be(new Uint32Array(this.buffer, u6, 4), h5, this) : h5 instanceof r && "atomic" === h5.name ? "u32" === (null === (o5 = h5.format) || void 0 === o5 ? void 0 : o5.name) ? new Ve(new Uint32Array(this.buffer, u6, 1)[0], h5.format, this) : "i32" === (null === (l5 = h5.format) || void 0 === l5 ? void 0 : l5.name) ? new Ve(new Int32Array(this.buffer, u6, 1)[0], h5.format, this) : (console.error(`GetDataValue: Invalid atomic format ${null === (c5 = h5.format) || void 0 === c5 ? void 0 : c5.name}`), null) : new Me(this.buffer, h5, u6, this);
    }
    toString() {
      let e6 = "";
      if (this.typeInfo instanceof s)
        if ("f32" === this.typeInfo.format.name) {
          const t5 = new Float32Array(this.buffer, this.offset);
          e6 = `[${t5[0]}`;
          for (let n4 = 1; n4 < t5.length; ++n4)
            e6 += `, ${t5[n4]}`;
        } else if ("i32" === this.typeInfo.format.name) {
          const t5 = new Int32Array(this.buffer, this.offset);
          e6 = `[${t5[0]}`;
          for (let n4 = 1; n4 < t5.length; ++n4)
            e6 += `, ${t5[n4]}`;
        } else if ("u32" === this.typeInfo.format.name) {
          const t5 = new Uint32Array(this.buffer, this.offset);
          e6 = `[${t5[0]}`;
          for (let n4 = 1; n4 < t5.length; ++n4)
            e6 += `, ${t5[n4]}`;
        } else if ("vec2f" === this.typeInfo.format.name) {
          const t5 = new Float32Array(this.buffer, this.offset);
          e6 = `[${t5[0]}, ${t5[1]}]`;
          for (let n4 = 1; n4 < t5.length / 2; ++n4)
            e6 += `, [${t5[2 * n4]}, ${t5[2 * n4 + 1]}]`;
        } else if ("vec3f" === this.typeInfo.format.name) {
          const t5 = new Float32Array(this.buffer, this.offset);
          e6 = `[${t5[0]}, ${t5[1]}, ${t5[2]}]`;
          for (let n4 = 4; n4 < t5.length; n4 += 4)
            e6 += `, [${t5[n4]}, ${t5[n4 + 1]}, ${t5[n4 + 2]}]`;
        } else if ("vec4f" === this.typeInfo.format.name) {
          const t5 = new Float32Array(this.buffer, this.offset);
          e6 = `[${t5[0]}, ${t5[1]}, ${t5[2]}, ${t5[3]}]`;
          for (let n4 = 4; n4 < t5.length; n4 += 4)
            e6 += `, [${t5[n4]}, ${t5[n4 + 1]}, ${t5[n4 + 2]}, ${t5[n4 + 3]}]`;
        } else
          e6 = "[...]";
      else
        this.typeInfo instanceof n ? e6 += "{...}" : e6 = "[...]";
      return e6;
    }
  };
  var Ue = class extends Ce {
    constructor(e6, t5, n4, s5) {
      super(t5, null), this.data = e6, this.descriptor = n4, this.view = s5;
    }
    clone() {
      return new Ue(this.data, this.typeInfo, this.descriptor, this.view);
    }
    get width() {
      var e6, t5;
      const n4 = this.descriptor.size;
      return n4 instanceof Array && n4.length > 0 ? null !== (e6 = n4[0]) && void 0 !== e6 ? e6 : 0 : n4 instanceof Object && null !== (t5 = n4.width) && void 0 !== t5 ? t5 : 0;
    }
    get height() {
      var e6, t5;
      const n4 = this.descriptor.size;
      return n4 instanceof Array && n4.length > 1 ? null !== (e6 = n4[1]) && void 0 !== e6 ? e6 : 0 : n4 instanceof Object && null !== (t5 = n4.height) && void 0 !== t5 ? t5 : 0;
    }
    get depthOrArrayLayers() {
      var e6, t5;
      const n4 = this.descriptor.size;
      return n4 instanceof Array && n4.length > 2 ? null !== (e6 = n4[2]) && void 0 !== e6 ? e6 : 0 : n4 instanceof Object && null !== (t5 = n4.depthOrArrayLayers) && void 0 !== t5 ? t5 : 0;
    }
    get format() {
      var e6;
      return this.descriptor && null !== (e6 = this.descriptor.format) && void 0 !== e6 ? e6 : "rgba8unorm";
    }
    get sampleCount() {
      var e6;
      return this.descriptor && null !== (e6 = this.descriptor.sampleCount) && void 0 !== e6 ? e6 : 1;
    }
    get mipLevelCount() {
      var e6;
      return this.descriptor && null !== (e6 = this.descriptor.mipLevelCount) && void 0 !== e6 ? e6 : 1;
    }
    get dimension() {
      var e6;
      return this.descriptor && null !== (e6 = this.descriptor.dimension) && void 0 !== e6 ? e6 : "2d";
    }
    getMipLevelSize(e6) {
      if (e6 >= this.mipLevelCount)
        return [0, 0, 0];
      const t5 = [this.width, this.height, this.depthOrArrayLayers];
      for (let n4 = 0; n4 < t5.length; ++n4)
        t5[n4] = Math.max(1, t5[n4] >> e6);
      return t5;
    }
    get texelByteSize() {
      const e6 = this.format, t5 = I[e6];
      return t5 ? t5.isDepthStencil ? 4 : t5.bytesPerBlock : 0;
    }
    get bytesPerRow() {
      return this.width * this.texelByteSize;
    }
    get isDepthStencil() {
      const e6 = this.format, t5 = I[e6];
      return !!t5 && t5.isDepthStencil;
    }
    getGpuSize() {
      const e6 = this.format, t5 = I[e6], n4 = this.width;
      if (!e6 || n4 <= 0 || !t5)
        return -1;
      const s5 = this.height, r5 = this.depthOrArrayLayers, a6 = this.dimension;
      return n4 / t5.blockWidth * ("1d" === a6 ? 1 : s5 / t5.blockHeight) * t5.bytesPerBlock * r5;
    }
    getPixel(e6, t5, n4 = 0, s5 = 0) {
      const r5 = this.texelByteSize, a6 = this.bytesPerRow, i7 = this.height, o5 = this.data[s5];
      return v(new Uint8Array(o5), e6, t5, n4, s5, i7, a6, r5, this.format);
    }
    setPixel(e6, t5, n4, s5, r5) {
      const a6 = this.texelByteSize, i7 = this.bytesPerRow, o5 = this.height, l5 = this.data[s5];
      !function(e7, t6, n5, s6, r6, a7, i8, o6, l6, c5) {
        const u6 = s6 * (i8 >>= r6) * (a7 >>= r6) + n5 * i8 + t6 * o6;
        switch (l6) {
          case "r8unorm":
            return void k(e7, u6, "8unorm", 1, c5);
          case "r8snorm":
            return void k(e7, u6, "8snorm", 1, c5);
          case "r8uint":
            return void k(e7, u6, "8uint", 1, c5);
          case "r8sint":
            return void k(e7, u6, "8sint", 1, c5);
          case "rg8unorm":
            return void k(e7, u6, "8unorm", 2, c5);
          case "rg8snorm":
            return void k(e7, u6, "8snorm", 2, c5);
          case "rg8uint":
            return void k(e7, u6, "8uint", 2, c5);
          case "rg8sint":
            return void k(e7, u6, "8sint", 2, c5);
          case "rgba8unorm-srgb":
          case "rgba8unorm":
          case "bgra8unorm-srgb":
          case "bgra8unorm":
            return void k(e7, u6, "8unorm", 4, c5);
          case "rgba8snorm":
            return void k(e7, u6, "8snorm", 4, c5);
          case "rgba8uint":
            return void k(e7, u6, "8uint", 4, c5);
          case "rgba8sint":
            return void k(e7, u6, "8sint", 4, c5);
          case "r16uint":
            return void k(e7, u6, "16uint", 1, c5);
          case "r16sint":
            return void k(e7, u6, "16sint", 1, c5);
          case "r16float":
            return void k(e7, u6, "16float", 1, c5);
          case "rg16uint":
            return void k(e7, u6, "16uint", 2, c5);
          case "rg16sint":
            return void k(e7, u6, "16sint", 2, c5);
          case "rg16float":
            return void k(e7, u6, "16float", 2, c5);
          case "rgba16uint":
            return void k(e7, u6, "16uint", 4, c5);
          case "rgba16sint":
            return void k(e7, u6, "16sint", 4, c5);
          case "rgba16float":
            return void k(e7, u6, "16float", 4, c5);
          case "r32uint":
            return void k(e7, u6, "32uint", 1, c5);
          case "r32sint":
            return void k(e7, u6, "32sint", 1, c5);
          case "depth16unorm":
          case "depth24plus":
          case "depth24plus-stencil8":
          case "depth32float":
          case "depth32float-stencil8":
          case "r32float":
            return void k(e7, u6, "32float", 1, c5);
          case "rg32uint":
            return void k(e7, u6, "32uint", 2, c5);
          case "rg32sint":
            return void k(e7, u6, "32sint", 2, c5);
          case "rg32float":
            return void k(e7, u6, "32float", 2, c5);
          case "rgba32uint":
            return void k(e7, u6, "32uint", 4, c5);
          case "rgba32sint":
            return void k(e7, u6, "32sint", 4, c5);
          case "rgba32float":
            return void k(e7, u6, "32float", 4, c5);
          case "rg11b10ufloat":
            console.error("TODO: rg11b10ufloat not supported for writing");
        }
      }(new Uint8Array(l5), e6, t5, n4, s5, o5, i7, a6, this.format, r5);
    }
  };
  ((e6) => {
    e6[e6.token = 0] = "token", e6[e6.keyword = 1] = "keyword", e6[e6.reserved = 2] = "reserved";
  })(q || (q = {}));
  var Pe = class {
    constructor(e6, t5, n4) {
      this.name = e6, this.type = t5, this.rule = n4;
    }
    toString() {
      return this.name;
    }
  };
  var We = class {
  };
  W = We, We.none = new Pe("", q.reserved, ""), We.eof = new Pe("EOF", q.token, ""), We.reserved = { asm: new Pe("asm", q.reserved, "asm"), bf16: new Pe("bf16", q.reserved, "bf16"), do: new Pe("do", q.reserved, "do"), enum: new Pe("enum", q.reserved, "enum"), f16: new Pe("f16", q.reserved, "f16"), f64: new Pe("f64", q.reserved, "f64"), handle: new Pe("handle", q.reserved, "handle"), i8: new Pe("i8", q.reserved, "i8"), i16: new Pe("i16", q.reserved, "i16"), i64: new Pe("i64", q.reserved, "i64"), mat: new Pe("mat", q.reserved, "mat"), premerge: new Pe("premerge", q.reserved, "premerge"), regardless: new Pe("regardless", q.reserved, "regardless"), typedef: new Pe("typedef", q.reserved, "typedef"), u8: new Pe("u8", q.reserved, "u8"), u16: new Pe("u16", q.reserved, "u16"), u64: new Pe("u64", q.reserved, "u64"), unless: new Pe("unless", q.reserved, "unless"), using: new Pe("using", q.reserved, "using"), vec: new Pe("vec", q.reserved, "vec"), void: new Pe("void", q.reserved, "void") }, We.keywords = { array: new Pe("array", q.keyword, "array"), atomic: new Pe("atomic", q.keyword, "atomic"), bool: new Pe("bool", q.keyword, "bool"), f32: new Pe("f32", q.keyword, "f32"), i32: new Pe("i32", q.keyword, "i32"), mat2x2: new Pe("mat2x2", q.keyword, "mat2x2"), mat2x3: new Pe("mat2x3", q.keyword, "mat2x3"), mat2x4: new Pe("mat2x4", q.keyword, "mat2x4"), mat3x2: new Pe("mat3x2", q.keyword, "mat3x2"), mat3x3: new Pe("mat3x3", q.keyword, "mat3x3"), mat3x4: new Pe("mat3x4", q.keyword, "mat3x4"), mat4x2: new Pe("mat4x2", q.keyword, "mat4x2"), mat4x3: new Pe("mat4x3", q.keyword, "mat4x3"), mat4x4: new Pe("mat4x4", q.keyword, "mat4x4"), ptr: new Pe("ptr", q.keyword, "ptr"), sampler: new Pe("sampler", q.keyword, "sampler"), sampler_comparison: new Pe("sampler_comparison", q.keyword, "sampler_comparison"), struct: new Pe("struct", q.keyword, "struct"), texture_1d: new Pe("texture_1d", q.keyword, "texture_1d"), texture_2d: new Pe("texture_2d", q.keyword, "texture_2d"), texture_2d_array: new Pe("texture_2d_array", q.keyword, "texture_2d_array"), texture_3d: new Pe("texture_3d", q.keyword, "texture_3d"), texture_cube: new Pe("texture_cube", q.keyword, "texture_cube"), texture_cube_array: new Pe("texture_cube_array", q.keyword, "texture_cube_array"), texture_multisampled_2d: new Pe("texture_multisampled_2d", q.keyword, "texture_multisampled_2d"), texture_storage_1d: new Pe("texture_storage_1d", q.keyword, "texture_storage_1d"), texture_storage_2d: new Pe("texture_storage_2d", q.keyword, "texture_storage_2d"), texture_storage_2d_array: new Pe("texture_storage_2d_array", q.keyword, "texture_storage_2d_array"), texture_storage_3d: new Pe("texture_storage_3d", q.keyword, "texture_storage_3d"), texture_depth_2d: new Pe("texture_depth_2d", q.keyword, "texture_depth_2d"), texture_depth_2d_array: new Pe("texture_depth_2d_array", q.keyword, "texture_depth_2d_array"), texture_depth_cube: new Pe("texture_depth_cube", q.keyword, "texture_depth_cube"), texture_depth_cube_array: new Pe("texture_depth_cube_array", q.keyword, "texture_depth_cube_array"), texture_depth_multisampled_2d: new Pe("texture_depth_multisampled_2d", q.keyword, "texture_depth_multisampled_2d"), texture_external: new Pe("texture_external", q.keyword, "texture_external"), u32: new Pe("u32", q.keyword, "u32"), vec2: new Pe("vec2", q.keyword, "vec2"), vec3: new Pe("vec3", q.keyword, "vec3"), vec4: new Pe("vec4", q.keyword, "vec4"), bitcast: new Pe("bitcast", q.keyword, "bitcast"), block: new Pe("block", q.keyword, "block"), break: new Pe("break", q.keyword, "break"), case: new Pe("case", q.keyword, "case"), continue: new Pe("continue", q.keyword, "continue"), continuing: new Pe("continuing", q.keyword, "continuing"), default: new Pe("default", q.keyword, "default"), diagnostic: new Pe("diagnostic", q.keyword, "diagnostic"), discard: new Pe("discard", q.keyword, "discard"), else: new Pe("else", q.keyword, "else"), enable: new Pe("enable", q.keyword, "enable"), fallthrough: new Pe("fallthrough", q.keyword, "fallthrough"), false: new Pe("false", q.keyword, "false"), fn: new Pe("fn", q.keyword, "fn"), for: new Pe("for", q.keyword, "for"), function: new Pe("function", q.keyword, "function"), if: new Pe("if", q.keyword, "if"), let: new Pe("let", q.keyword, "let"), const: new Pe("const", q.keyword, "const"), loop: new Pe("loop", q.keyword, "loop"), while: new Pe("while", q.keyword, "while"), private: new Pe("private", q.keyword, "private"), read: new Pe("read", q.keyword, "read"), read_write: new Pe("read_write", q.keyword, "read_write"), return: new Pe("return", q.keyword, "return"), requires: new Pe("requires", q.keyword, "requires"), storage: new Pe("storage", q.keyword, "storage"), switch: new Pe("switch", q.keyword, "switch"), true: new Pe("true", q.keyword, "true"), alias: new Pe("alias", q.keyword, "alias"), type: new Pe("type", q.keyword, "type"), uniform: new Pe("uniform", q.keyword, "uniform"), var: new Pe("var", q.keyword, "var"), override: new Pe("override", q.keyword, "override"), workgroup: new Pe("workgroup", q.keyword, "workgroup"), write: new Pe("write", q.keyword, "write"), r8unorm: new Pe("r8unorm", q.keyword, "r8unorm"), r8snorm: new Pe("r8snorm", q.keyword, "r8snorm"), r8uint: new Pe("r8uint", q.keyword, "r8uint"), r8sint: new Pe("r8sint", q.keyword, "r8sint"), r16uint: new Pe("r16uint", q.keyword, "r16uint"), r16sint: new Pe("r16sint", q.keyword, "r16sint"), r16float: new Pe("r16float", q.keyword, "r16float"), rg8unorm: new Pe("rg8unorm", q.keyword, "rg8unorm"), rg8snorm: new Pe("rg8snorm", q.keyword, "rg8snorm"), rg8uint: new Pe("rg8uint", q.keyword, "rg8uint"), rg8sint: new Pe("rg8sint", q.keyword, "rg8sint"), r32uint: new Pe("r32uint", q.keyword, "r32uint"), r32sint: new Pe("r32sint", q.keyword, "r32sint"), r32float: new Pe("r32float", q.keyword, "r32float"), rg16uint: new Pe("rg16uint", q.keyword, "rg16uint"), rg16sint: new Pe("rg16sint", q.keyword, "rg16sint"), rg16float: new Pe("rg16float", q.keyword, "rg16float"), rgba8unorm: new Pe("rgba8unorm", q.keyword, "rgba8unorm"), rgba8unorm_srgb: new Pe("rgba8unorm_srgb", q.keyword, "rgba8unorm_srgb"), rgba8snorm: new Pe("rgba8snorm", q.keyword, "rgba8snorm"), rgba8uint: new Pe("rgba8uint", q.keyword, "rgba8uint"), rgba8sint: new Pe("rgba8sint", q.keyword, "rgba8sint"), bgra8unorm: new Pe("bgra8unorm", q.keyword, "bgra8unorm"), bgra8unorm_srgb: new Pe("bgra8unorm_srgb", q.keyword, "bgra8unorm_srgb"), rgb10a2unorm: new Pe("rgb10a2unorm", q.keyword, "rgb10a2unorm"), rg11b10float: new Pe("rg11b10float", q.keyword, "rg11b10float"), rg32uint: new Pe("rg32uint", q.keyword, "rg32uint"), rg32sint: new Pe("rg32sint", q.keyword, "rg32sint"), rg32float: new Pe("rg32float", q.keyword, "rg32float"), rgba16uint: new Pe("rgba16uint", q.keyword, "rgba16uint"), rgba16sint: new Pe("rgba16sint", q.keyword, "rgba16sint"), rgba16float: new Pe("rgba16float", q.keyword, "rgba16float"), rgba32uint: new Pe("rgba32uint", q.keyword, "rgba32uint"), rgba32sint: new Pe("rgba32sint", q.keyword, "rgba32sint"), rgba32float: new Pe("rgba32float", q.keyword, "rgba32float"), static_assert: new Pe("static_assert", q.keyword, "static_assert") }, We.tokens = { decimal_float_literal: new Pe("decimal_float_literal", q.token, /((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?[fh]?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+[fh]?)|(-?[0-9]+[fh])/), hex_float_literal: new Pe("hex_float_literal", q.token, /-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+[fh]?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+[fh]?))/), int_literal: new Pe("int_literal", q.token, /-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/), uint_literal: new Pe("uint_literal", q.token, /0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/), name: new Pe("name", q.token, /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/u), ident: new Pe("ident", q.token, /[_a-zA-Z][0-9a-zA-Z_]*/), and: new Pe("and", q.token, "&"), and_and: new Pe("and_and", q.token, "&&"), arrow: new Pe("arrow ", q.token, "->"), attr: new Pe("attr", q.token, "@"), forward_slash: new Pe("forward_slash", q.token, "/"), bang: new Pe("bang", q.token, "!"), bracket_left: new Pe("bracket_left", q.token, "["), bracket_right: new Pe("bracket_right", q.token, "]"), brace_left: new Pe("brace_left", q.token, "{"), brace_right: new Pe("brace_right", q.token, "}"), colon: new Pe("colon", q.token, ":"), comma: new Pe("comma", q.token, ","), equal: new Pe("equal", q.token, "="), equal_equal: new Pe("equal_equal", q.token, "=="), not_equal: new Pe("not_equal", q.token, "!="), greater_than: new Pe("greater_than", q.token, ">"), greater_than_equal: new Pe("greater_than_equal", q.token, ">="), shift_right: new Pe("shift_right", q.token, ">>"), less_than: new Pe("less_than", q.token, "<"), less_than_equal: new Pe("less_than_equal", q.token, "<="), shift_left: new Pe("shift_left", q.token, "<<"), modulo: new Pe("modulo", q.token, "%"), minus: new Pe("minus", q.token, "-"), minus_minus: new Pe("minus_minus", q.token, "--"), period: new Pe("period", q.token, "."), plus: new Pe("plus", q.token, "+"), plus_plus: new Pe("plus_plus", q.token, "++"), or: new Pe("or", q.token, "|"), or_or: new Pe("or_or", q.token, "||"), paren_left: new Pe("paren_left", q.token, "("), paren_right: new Pe("paren_right", q.token, ")"), semicolon: new Pe("semicolon", q.token, ";"), star: new Pe("star", q.token, "*"), tilde: new Pe("tilde", q.token, "~"), underscore: new Pe("underscore", q.token, "_"), xor: new Pe("xor", q.token, "^"), plus_equal: new Pe("plus_equal", q.token, "+="), minus_equal: new Pe("minus_equal", q.token, "-="), times_equal: new Pe("times_equal", q.token, "*="), division_equal: new Pe("division_equal", q.token, "/="), modulo_equal: new Pe("modulo_equal", q.token, "%="), and_equal: new Pe("and_equal", q.token, "&="), or_equal: new Pe("or_equal", q.token, "|="), xor_equal: new Pe("xor_equal", q.token, "^="), shift_right_equal: new Pe("shift_right_equal", q.token, ">>="), shift_left_equal: new Pe("shift_left_equal", q.token, "<<=") }, We.simpleTokens = { "@": W.tokens.attr, "{": W.tokens.brace_left, "}": W.tokens.brace_right, ":": W.tokens.colon, ",": W.tokens.comma, "(": W.tokens.paren_left, ")": W.tokens.paren_right, ";": W.tokens.semicolon }, We.literalTokens = { "&": W.tokens.and, "&&": W.tokens.and_and, "->": W.tokens.arrow, "/": W.tokens.forward_slash, "!": W.tokens.bang, "[": W.tokens.bracket_left, "]": W.tokens.bracket_right, "=": W.tokens.equal, "==": W.tokens.equal_equal, "!=": W.tokens.not_equal, ">": W.tokens.greater_than, ">=": W.tokens.greater_than_equal, ">>": W.tokens.shift_right, "<": W.tokens.less_than, "<=": W.tokens.less_than_equal, "<<": W.tokens.shift_left, "%": W.tokens.modulo, "-": W.tokens.minus, "--": W.tokens.minus_minus, ".": W.tokens.period, "+": W.tokens.plus, "++": W.tokens.plus_plus, "|": W.tokens.or, "||": W.tokens.or_or, "*": W.tokens.star, "~": W.tokens.tilde, _: W.tokens.underscore, "^": W.tokens.xor, "+=": W.tokens.plus_equal, "-=": W.tokens.minus_equal, "*=": W.tokens.times_equal, "/=": W.tokens.division_equal, "%=": W.tokens.modulo_equal, "&=": W.tokens.and_equal, "|=": W.tokens.or_equal, "^=": W.tokens.xor_equal, ">>=": W.tokens.shift_right_equal, "<<=": W.tokens.shift_left_equal }, We.regexTokens = { decimal_float_literal: W.tokens.decimal_float_literal, hex_float_literal: W.tokens.hex_float_literal, int_literal: W.tokens.int_literal, uint_literal: W.tokens.uint_literal, ident: W.tokens.ident }, We.storage_class = [W.keywords.function, W.keywords.private, W.keywords.workgroup, W.keywords.uniform, W.keywords.storage], We.access_mode = [W.keywords.read, W.keywords.write, W.keywords.read_write], We.sampler_type = [W.keywords.sampler, W.keywords.sampler_comparison], We.sampled_texture_type = [W.keywords.texture_1d, W.keywords.texture_2d, W.keywords.texture_2d_array, W.keywords.texture_3d, W.keywords.texture_cube, W.keywords.texture_cube_array], We.multisampled_texture_type = [W.keywords.texture_multisampled_2d], We.storage_texture_type = [W.keywords.texture_storage_1d, W.keywords.texture_storage_2d, W.keywords.texture_storage_2d_array, W.keywords.texture_storage_3d], We.depth_texture_type = [W.keywords.texture_depth_2d, W.keywords.texture_depth_2d_array, W.keywords.texture_depth_cube, W.keywords.texture_depth_cube_array, W.keywords.texture_depth_multisampled_2d], We.texture_external_type = [W.keywords.texture_external], We.any_texture_type = [...W.sampled_texture_type, ...W.multisampled_texture_type, ...W.storage_texture_type, ...W.depth_texture_type, ...W.texture_external_type], We.texel_format = [W.keywords.r8unorm, W.keywords.r8snorm, W.keywords.r8uint, W.keywords.r8sint, W.keywords.r16uint, W.keywords.r16sint, W.keywords.r16float, W.keywords.rg8unorm, W.keywords.rg8snorm, W.keywords.rg8uint, W.keywords.rg8sint, W.keywords.r32uint, W.keywords.r32sint, W.keywords.r32float, W.keywords.rg16uint, W.keywords.rg16sint, W.keywords.rg16float, W.keywords.rgba8unorm, W.keywords.rgba8unorm_srgb, W.keywords.rgba8snorm, W.keywords.rgba8uint, W.keywords.rgba8sint, W.keywords.bgra8unorm, W.keywords.bgra8unorm_srgb, W.keywords.rgb10a2unorm, W.keywords.rg11b10float, W.keywords.rg32uint, W.keywords.rg32sint, W.keywords.rg32float, W.keywords.rgba16uint, W.keywords.rgba16sint, W.keywords.rgba16float, W.keywords.rgba32uint, W.keywords.rgba32sint, W.keywords.rgba32float], We.const_literal = [W.tokens.int_literal, W.tokens.uint_literal, W.tokens.decimal_float_literal, W.tokens.hex_float_literal, W.keywords.true, W.keywords.false], We.literal_or_ident = [W.tokens.ident, W.tokens.int_literal, W.tokens.uint_literal, W.tokens.decimal_float_literal, W.tokens.hex_float_literal, W.tokens.name], We.element_count_expression = [W.tokens.int_literal, W.tokens.uint_literal, W.tokens.ident], We.template_types = [W.keywords.vec2, W.keywords.vec3, W.keywords.vec4, W.keywords.mat2x2, W.keywords.mat2x3, W.keywords.mat2x4, W.keywords.mat3x2, W.keywords.mat3x3, W.keywords.mat3x4, W.keywords.mat4x2, W.keywords.mat4x3, W.keywords.mat4x4, W.keywords.atomic, W.keywords.bitcast, ...W.any_texture_type], We.attribute_name = [W.tokens.ident, W.keywords.block, W.keywords.diagnostic], We.assignment_operators = [W.tokens.equal, W.tokens.plus_equal, W.tokens.minus_equal, W.tokens.times_equal, W.tokens.division_equal, W.tokens.modulo_equal, W.tokens.and_equal, W.tokens.or_equal, W.tokens.xor_equal, W.tokens.shift_right_equal, W.tokens.shift_left_equal], We.increment_operators = [W.tokens.plus_plus, W.tokens.minus_minus];
  var qe = class {
    constructor(e6, t5, n4, s5, r5) {
      this.type = e6, this.lexeme = t5, this.line = n4, this.start = s5, this.end = r5;
    }
    toString() {
      return this.lexeme;
    }
    isTemplateType() {
      return -1 != We.template_types.indexOf(this.type);
    }
    isArrayType() {
      return this.type == We.keywords.array;
    }
    isArrayOrTemplateType() {
      return this.isArrayType() || this.isTemplateType();
    }
  };
  var He = class {
    constructor(e6) {
      this._tokens = [], this._start = 0, this._current = 0, this._line = 1, this._source = null != e6 ? e6 : "";
    }
    scanTokens() {
      for (; !this._isAtEnd(); )
        if (this._start = this._current, !this.scanToken())
          throw `Invalid syntax at line ${this._line}`;
      return this._tokens.push(new qe(We.eof, "", this._line, this._current, this._current)), this._tokens;
    }
    scanToken() {
      let e6 = this._advance();
      if ("\n" == e6)
        return this._line++, true;
      if (this._isWhitespace(e6))
        return true;
      if ("/" == e6) {
        if ("/" == this._peekAhead()) {
          for (; "\n" != e6; ) {
            if (this._isAtEnd())
              return true;
            e6 = this._advance();
          }
          return this._line++, true;
        }
        if ("*" == this._peekAhead()) {
          this._advance();
          let t6 = 1;
          for (; t6 > 0; ) {
            if (this._isAtEnd())
              return true;
            if (e6 = this._advance(), "\n" == e6)
              this._line++;
            else if ("*" == e6) {
              if ("/" == this._peekAhead() && (this._advance(), t6--, 0 == t6))
                return true;
            } else
              "/" == e6 && "*" == this._peekAhead() && (this._advance(), t6++);
          }
          return true;
        }
      }
      const t5 = We.simpleTokens[e6];
      if (t5)
        return this._addToken(t5), true;
      let n4 = We.none;
      const s5 = this._isAlpha(e6), r5 = "_" === e6;
      if (this._isAlphaNumeric(e6)) {
        let t6 = this._peekAhead();
        for (; this._isAlphaNumeric(t6); )
          e6 += this._advance(), t6 = this._peekAhead();
      }
      if (s5) {
        const t6 = We.keywords[e6];
        if (t6)
          return this._addToken(t6), true;
      }
      if (s5 || r5)
        return this._addToken(We.tokens.ident), true;
      for (; ; ) {
        let t6 = this._findType(e6);
        const s6 = this._peekAhead();
        if ("-" == e6 && this._tokens.length > 0) {
          if ("=" == s6)
            return this._current++, e6 += s6, this._addToken(We.tokens.minus_equal), true;
          if ("-" == s6)
            return this._current++, e6 += s6, this._addToken(We.tokens.minus_minus), true;
          const n5 = this._tokens.length - 1;
          if ((-1 != We.literal_or_ident.indexOf(this._tokens[n5].type) || this._tokens[n5].type == We.tokens.paren_right) && ">" != s6)
            return this._addToken(t6), true;
        }
        if (">" == e6 && (">" == s6 || "=" == s6)) {
          let e7 = false, n5 = this._tokens.length - 1;
          for (let t7 = 0; t7 < 5 && n5 >= 0 && -1 === We.assignment_operators.indexOf(this._tokens[n5].type); ++t7, --n5)
            if (this._tokens[n5].type === We.tokens.less_than) {
              n5 > 0 && this._tokens[n5 - 1].isArrayOrTemplateType() && (e7 = true);
              break;
            }
          if (e7)
            return this._addToken(t6), true;
        }
        if (t6 === We.none) {
          let s7 = e6, r6 = 0;
          const a6 = 2;
          for (let e7 = 0; e7 < a6; ++e7)
            if (s7 += this._peekAhead(e7), t6 = this._findType(s7), t6 !== We.none) {
              r6 = e7;
              break;
            }
          if (t6 === We.none)
            return n4 !== We.none && (this._current--, this._addToken(n4), true);
          e6 = s7, this._current += r6 + 1;
        }
        if (n4 = t6, this._isAtEnd())
          break;
        e6 += this._advance();
      }
      return n4 !== We.none && (this._addToken(n4), true);
    }
    _findType(e6) {
      for (const t6 in We.regexTokens) {
        const n4 = We.regexTokens[t6];
        if (this._match(e6, n4.rule))
          return n4;
      }
      const t5 = We.literalTokens[e6];
      return t5 || We.none;
    }
    _match(e6, t5) {
      const n4 = t5.exec(e6);
      return n4 && 0 == n4.index && n4[0] == e6;
    }
    _isAtEnd() {
      return this._current >= this._source.length;
    }
    _isAlpha(e6) {
      return !this._isNumeric(e6) && !this._isWhitespace(e6) && "_" !== e6 && "." !== e6 && "(" !== e6 && ")" !== e6 && "[" !== e6 && "]" !== e6 && "{" !== e6 && "}" !== e6 && "," !== e6 && ";" !== e6 && ":" !== e6 && "=" !== e6 && "!" !== e6 && "<" !== e6 && ">" !== e6 && "+" !== e6 && "-" !== e6 && "*" !== e6 && "/" !== e6 && "%" !== e6 && "&" !== e6 && "|" !== e6 && "^" !== e6 && "~" !== e6 && "@" !== e6 && "#" !== e6 && "?" !== e6 && "'" !== e6 && "`" !== e6 && '"' !== e6 && "\\" !== e6 && "\n" !== e6 && "\r" !== e6 && "	" !== e6 && "\0" !== e6;
    }
    _isNumeric(e6) {
      return e6 >= "0" && e6 <= "9";
    }
    _isAlphaNumeric(e6) {
      return this._isAlpha(e6) || this._isNumeric(e6) || "_" === e6;
    }
    _isWhitespace(e6) {
      return " " == e6 || "	" == e6 || "\r" == e6;
    }
    _advance(e6 = 0) {
      let t5 = this._source[this._current];
      return e6 = e6 || 0, e6++, this._current += e6, t5;
    }
    _peekAhead(e6 = 0) {
      return e6 = e6 || 0, this._current + e6 >= this._source.length ? "\0" : this._source[this._current + e6];
    }
    _addToken(e6) {
      const t5 = this._source.substring(this._start, this._current);
      this._tokens.push(new qe(e6, t5, this._line, this._start, this._current));
    }
  };
  function ze(e6) {
    return Array.isArray(e6) || (null == e6 ? void 0 : e6.buffer) instanceof ArrayBuffer;
  }
  var Re = new Float32Array(1);
  var Ge = new Uint32Array(Re.buffer);
  var Xe = new Uint32Array(Re.buffer);
  var je = new Int32Array(1);
  var Ze = new Float32Array(je.buffer);
  var Qe = new Uint32Array(je.buffer);
  var Ye = new Uint32Array(1);
  var Ke = new Float32Array(Ye.buffer);
  var Je = new Int32Array(Ye.buffer);
  function et(e6, t5, n4) {
    if (t5 === n4)
      return e6;
    if ("f32" === t5) {
      if ("i32" === n4 || "x32" === n4)
        return Re[0] = e6, Ge[0];
      if ("u32" === n4)
        return Re[0] = e6, Xe[0];
    } else if ("i32" === t5 || "x32" === t5) {
      if ("f32" === n4)
        return je[0] = e6, Ze[0];
      if ("u32" === n4)
        return je[0] = e6, Qe[0];
    } else if ("u32" === t5) {
      if ("f32" === n4)
        return Ye[0] = e6, Ke[0];
      if ("i32" === n4 || "x32" === n4)
        return Ye[0] = e6, Je[0];
    }
    return console.error(`Unsupported cast from ${t5} to ${n4}`), e6;
  }
  var tt = class {
    constructor(e6) {
      this.resources = null, this.inUse = false, this.info = null, this.node = e6;
    }
  };
  var nt = class {
    constructor(e6, t5) {
      this.align = e6, this.size = t5;
    }
  };
  var st = class {
    constructor() {
      this.uniforms = [], this.storage = [], this.textures = [], this.samplers = [], this.aliases = [], this.overrides = [], this.structs = [], this.entry = new p(), this.functions = [], this._types = /* @__PURE__ */ new Map(), this._functions = /* @__PURE__ */ new Map();
    }
    _isStorageTexture(e6) {
      return "texture_storage_1d" == e6.name || "texture_storage_2d" == e6.name || "texture_storage_2d_array" == e6.name || "texture_storage_3d" == e6.name;
    }
    updateAST(e6) {
      for (const t5 of e6)
        t5 instanceof L && this._functions.set(t5.name, new tt(t5));
      for (const t5 of e6)
        if (t5 instanceof ae) {
          const e7 = this.getTypeInfo(t5, null);
          e7 instanceof n && this.structs.push(e7);
        }
      for (const t5 of e6)
        if (t5 instanceof J)
          this.aliases.push(this._getAliasInfo(t5));
        else if (t5 instanceof B) {
          const e7 = t5, n4 = this._getAttributeNum(e7.attributes, "id", 0), s5 = null != e7.type ? this.getTypeInfo(e7.type, e7.attributes) : null;
          this.overrides.push(new u(e7.name, s5, e7.attributes, n4));
        } else if (this._isUniformVar(t5)) {
          const e7 = t5, n4 = this._getAttributeNum(e7.attributes, "group", 0), s5 = this._getAttributeNum(e7.attributes, "binding", 0), r5 = this.getTypeInfo(e7.type, e7.attributes), o5 = new i(e7.name, r5, n4, s5, e7.attributes, a.Uniform, e7.access);
          o5.access || (o5.access = "read"), this.uniforms.push(o5);
        } else if (this._isStorageVar(t5)) {
          const e7 = t5, n4 = this._getAttributeNum(e7.attributes, "group", 0), s5 = this._getAttributeNum(e7.attributes, "binding", 0), r5 = this.getTypeInfo(e7.type, e7.attributes), o5 = this._isStorageTexture(r5), l5 = new i(e7.name, r5, n4, s5, e7.attributes, o5 ? a.StorageTexture : a.Storage, e7.access);
          l5.access || (l5.access = "read"), this.storage.push(l5);
        } else if (this._isTextureVar(t5)) {
          const e7 = t5, n4 = this._getAttributeNum(e7.attributes, "group", 0), s5 = this._getAttributeNum(e7.attributes, "binding", 0), r5 = this.getTypeInfo(e7.type, e7.attributes), o5 = this._isStorageTexture(r5), l5 = new i(e7.name, r5, n4, s5, e7.attributes, o5 ? a.StorageTexture : a.Texture, e7.access);
          l5.access || (l5.access = "read"), o5 ? this.storage.push(l5) : this.textures.push(l5);
        } else if (this._isSamplerVar(t5)) {
          const e7 = t5, n4 = this._getAttributeNum(e7.attributes, "group", 0), s5 = this._getAttributeNum(e7.attributes, "binding", 0), r5 = this.getTypeInfo(e7.type, e7.attributes), o5 = new i(e7.name, r5, n4, s5, e7.attributes, a.Sampler, e7.access);
          this.samplers.push(o5);
        } else if (t5 instanceof L) {
          const e7 = this._getAttribute(t5, "vertex"), n4 = this._getAttribute(t5, "fragment"), s5 = this._getAttribute(t5, "compute"), r5 = e7 || n4 || s5, a6 = new f(t5.name, null == r5 ? void 0 : r5.name, t5.attributes);
          a6.attributes = t5.attributes, a6.startLine = t5.startLine, a6.endLine = t5.endLine, this.functions.push(a6), this._functions.get(t5.name).info = a6, r5 && (this._functions.get(t5.name).inUse = true, a6.inUse = true, a6.resources = this._findResources(t5, !!r5), a6.inputs = this._getInputs(t5.args), a6.outputs = this._getOutputs(t5.returnType), this.entry[r5.name].push(a6)), a6.arguments = t5.args.map((e8) => new h(e8.name, this.getTypeInfo(e8.type, e8.attributes), e8.attributes)), a6.returnType = t5.returnType ? this.getTypeInfo(t5.returnType, t5.attributes) : null;
        } else
          ;
      for (const e7 of this._functions.values())
        e7.info && (e7.info.inUse = e7.inUse, this._addCalls(e7.node, e7.info.calls));
      for (const e7 of this._functions.values())
        e7.node.search((t5) => {
          var n4, s5, r5;
          if (t5 instanceof Le) {
            if (t5.value)
              if (ze(t5.value))
                for (const s6 of t5.value)
                  for (const t6 of this.overrides)
                    s6 === t6.name && (null === (n4 = e7.info) || void 0 === n4 || n4.overrides.push(t6));
              else
                for (const n5 of this.overrides)
                  t5.value === n5.name && (null === (s5 = e7.info) || void 0 === s5 || s5.overrides.push(n5));
          } else if (t5 instanceof de)
            for (const n5 of this.overrides)
              t5.name === n5.name && (null === (r5 = e7.info) || void 0 === r5 || r5.overrides.push(n5));
        });
      for (const e7 of this.uniforms)
        this._markStructsInUse(e7.type);
      for (const e7 of this.storage)
        this._markStructsInUse(e7.type);
    }
    getStructInfo(e6) {
      for (const t5 of this.structs)
        if (t5.name == e6)
          return t5;
      return null;
    }
    getOverrideInfo(e6) {
      for (const t5 of this.overrides)
        if (t5.name == e6)
          return t5;
      return null;
    }
    _markStructsInUse(e6) {
      if (e6)
        if (e6.isStruct) {
          if (e6.inUse = true, e6.members)
            for (const t5 of e6.members)
              this._markStructsInUse(t5.type);
        } else if (e6.isArray)
          this._markStructsInUse(e6.format);
        else if (e6.isTemplate)
          e6.format && this._markStructsInUse(e6.format);
        else {
          const t5 = this._getAlias(e6.name);
          t5 && this._markStructsInUse(t5);
        }
    }
    _addCalls(e6, t5) {
      var n4;
      for (const s5 of e6.calls) {
        const e7 = null === (n4 = this._functions.get(s5.name)) || void 0 === n4 ? void 0 : n4.info;
        e7 && t5.add(e7);
      }
    }
    findResource(e6, t5, n4) {
      if (n4) {
        for (const s5 of this.entry.compute)
          if (s5.name === n4) {
            for (const n5 of s5.resources)
              if (n5.group == e6 && n5.binding == t5)
                return n5;
          }
        for (const s5 of this.entry.vertex)
          if (s5.name === n4) {
            for (const n5 of s5.resources)
              if (n5.group == e6 && n5.binding == t5)
                return n5;
          }
        for (const s5 of this.entry.fragment)
          if (s5.name === n4) {
            for (const n5 of s5.resources)
              if (n5.group == e6 && n5.binding == t5)
                return n5;
          }
      }
      for (const n5 of this.uniforms)
        if (n5.group == e6 && n5.binding == t5)
          return n5;
      for (const n5 of this.storage)
        if (n5.group == e6 && n5.binding == t5)
          return n5;
      for (const n5 of this.textures)
        if (n5.group == e6 && n5.binding == t5)
          return n5;
      for (const n5 of this.samplers)
        if (n5.group == e6 && n5.binding == t5)
          return n5;
      return null;
    }
    _findResource(e6) {
      for (const t5 of this.uniforms)
        if (t5.name == e6)
          return t5;
      for (const t5 of this.storage)
        if (t5.name == e6)
          return t5;
      for (const t5 of this.textures)
        if (t5.name == e6)
          return t5;
      for (const t5 of this.samplers)
        if (t5.name == e6)
          return t5;
      return null;
    }
    _markStructsFromAST(e6) {
      const t5 = this.getTypeInfo(e6, null);
      this._markStructsInUse(t5);
    }
    _findResources(e6, t5) {
      const n4 = [], s5 = this, r5 = [];
      return e6.search((a6) => {
        if (a6 instanceof S)
          r5.push({});
        else if (a6 instanceof A)
          r5.pop();
        else if (a6 instanceof O) {
          const e7 = a6;
          t5 && null !== e7.type && this._markStructsFromAST(e7.type), r5.length > 0 && (r5[r5.length - 1][e7.name] = e7);
        } else if (a6 instanceof fe) {
          const e7 = a6;
          t5 && null !== e7.type && this._markStructsFromAST(e7.type);
        } else if (a6 instanceof F) {
          const e7 = a6;
          t5 && null !== e7.type && this._markStructsFromAST(e7.type), r5.length > 0 && (r5[r5.length - 1][e7.name] = e7);
        } else if (a6 instanceof de) {
          const e7 = a6;
          if (r5.length > 0) {
            if (r5[r5.length - 1][e7.name])
              return;
          }
          const t6 = s5._findResource(e7.name);
          t6 && n4.push(t6);
        } else if (a6 instanceof pe) {
          const r6 = a6, i7 = s5._functions.get(r6.name);
          i7 && (t5 && (i7.inUse = true), e6.calls.add(i7.node), null === i7.resources && (i7.resources = s5._findResources(i7.node, t5)), n4.push(...i7.resources));
        } else if (a6 instanceof R) {
          const r6 = a6, i7 = s5._functions.get(r6.name);
          i7 && (t5 && (i7.inUse = true), e6.calls.add(i7.node), null === i7.resources && (i7.resources = s5._findResources(i7.node, t5)), n4.push(...i7.resources));
        }
      }), [...new Map(n4.map((e7) => [e7.name, e7])).values()];
    }
    getBindGroups() {
      const e6 = [];
      function t5(t6, n4) {
        t6 >= e6.length && (e6.length = t6 + 1), void 0 === e6[t6] && (e6[t6] = []), n4 >= e6[t6].length && (e6[t6].length = n4 + 1);
      }
      for (const n4 of this.uniforms) {
        t5(n4.group, n4.binding);
        e6[n4.group][n4.binding] = n4;
      }
      for (const n4 of this.storage) {
        t5(n4.group, n4.binding);
        e6[n4.group][n4.binding] = n4;
      }
      for (const n4 of this.textures) {
        t5(n4.group, n4.binding);
        e6[n4.group][n4.binding] = n4;
      }
      for (const n4 of this.samplers) {
        t5(n4.group, n4.binding);
        e6[n4.group][n4.binding] = n4;
      }
      return e6;
    }
    _getOutputs(e6, t5 = void 0) {
      if (void 0 === t5 && (t5 = []), e6 instanceof ae)
        this._getStructOutputs(e6, t5);
      else {
        const n4 = this._getOutputInfo(e6);
        null !== n4 && t5.push(n4);
      }
      return t5;
    }
    _getStructOutputs(e6, t5) {
      for (const n4 of e6.members)
        if (n4.type instanceof ae)
          this._getStructOutputs(n4.type, t5);
        else {
          const e7 = this._getAttribute(n4, "location") || this._getAttribute(n4, "builtin");
          if (null !== e7) {
            const s5 = this.getTypeInfo(n4.type, n4.type.attributes), r5 = this._parseInt(e7.value), a6 = new c(n4.name, s5, e7.name, r5);
            t5.push(a6);
          }
        }
    }
    _getOutputInfo(e6) {
      const t5 = this._getAttribute(e6, "location") || this._getAttribute(e6, "builtin");
      if (null !== t5) {
        const n4 = this.getTypeInfo(e6, e6.attributes), s5 = this._parseInt(t5.value);
        return new c("", n4, t5.name, s5);
      }
      return null;
    }
    _getInputs(e6, t5 = void 0) {
      void 0 === t5 && (t5 = []);
      for (const n4 of e6)
        if (n4.type instanceof ae)
          this._getStructInputs(n4.type, t5);
        else {
          const e7 = this._getInputInfo(n4);
          null !== e7 && t5.push(e7);
        }
      return t5;
    }
    _getStructInputs(e6, t5) {
      for (const n4 of e6.members)
        if (n4.type instanceof ae)
          this._getStructInputs(n4.type, t5);
        else {
          const e7 = this._getInputInfo(n4);
          null !== e7 && t5.push(e7);
        }
    }
    _getInputInfo(e6) {
      const t5 = this._getAttribute(e6, "location") || this._getAttribute(e6, "builtin");
      if (null !== t5) {
        const n4 = this._getAttribute(e6, "interpolation"), s5 = this.getTypeInfo(e6.type, e6.attributes), r5 = this._parseInt(t5.value), a6 = new l(e6.name, s5, t5.name, r5);
        return null !== n4 && (a6.interpolation = this._parseString(n4.value)), a6;
      }
      return null;
    }
    _parseString(e6) {
      return e6 instanceof Array && (e6 = e6[0]), e6;
    }
    _parseInt(e6) {
      e6 instanceof Array && (e6 = e6[0]);
      const t5 = parseInt(e6);
      return isNaN(t5) ? e6 : t5;
    }
    _getAlias(e6) {
      for (const t5 of this.aliases)
        if (t5.name == e6)
          return t5.type;
      return null;
    }
    _getAliasInfo(e6) {
      return new o(e6.name, this.getTypeInfo(e6.type, null));
    }
    getTypeInfoByName(e6) {
      for (const t5 of this.structs)
        if (t5.name == e6)
          return t5;
      for (const t5 of this.aliases)
        if (t5.name == e6)
          return t5.type;
      return null;
    }
    getTypeInfo(a6, i7 = null) {
      if (this._types.has(a6))
        return this._types.get(a6);
      if (a6 instanceof le) {
        const e6 = a6, t5 = e6.format ? this.getTypeInfo(e6.format, e6.attributes) : null, n4 = new s(e6.name, i7);
        return n4.format = t5, n4.count = e6.count, this._types.set(a6, n4), this._updateTypeInfo(n4), n4;
      }
      if (a6 instanceof ae) {
        const e6 = a6, s5 = new n(e6.name, i7);
        s5.startLine = e6.startLine, s5.endLine = e6.endLine;
        for (const n4 of e6.members) {
          const e7 = this.getTypeInfo(n4.type, n4.attributes);
          s5.members.push(new t(n4.name, e7, n4.attributes));
        }
        return this._types.set(a6, s5), this._updateTypeInfo(s5), s5;
      }
      if (a6 instanceof ce) {
        const t5 = a6, n4 = t5.format instanceof se, s5 = t5.format ? n4 ? this.getTypeInfo(t5.format, null) : new e(t5.format, null) : null, o6 = new r(t5.name, s5, i7, t5.access);
        return this._types.set(a6, o6), this._updateTypeInfo(o6), o6;
      }
      if (a6 instanceof ie) {
        const e6 = a6, t5 = e6.format ? this.getTypeInfo(e6.format, null) : null, n4 = new r(e6.name, t5, i7, e6.access);
        return this._types.set(a6, n4), this._updateTypeInfo(n4), n4;
      }
      const o5 = new e(a6.name, i7);
      return this._types.set(a6, o5), this._updateTypeInfo(o5), o5;
    }
    _updateTypeInfo(e6) {
      var t5, r5, a6;
      const i7 = this._getTypeSize(e6);
      if (e6.size = null !== (t5 = null == i7 ? void 0 : i7.size) && void 0 !== t5 ? t5 : 0, e6 instanceof s && e6.format) {
        const t6 = this._getTypeSize(e6.format);
        e6.stride = Math.max(null !== (r5 = null == t6 ? void 0 : t6.size) && void 0 !== r5 ? r5 : 0, null !== (a6 = null == t6 ? void 0 : t6.align) && void 0 !== a6 ? a6 : 0), this._updateTypeInfo(e6.format);
      }
      e6 instanceof n && this._updateStructInfo(e6);
    }
    _updateStructInfo(e6) {
      var t5;
      let n4 = 0, s5 = 0, r5 = 0, a6 = 0;
      for (let i7 = 0, o5 = e6.members.length; i7 < o5; ++i7) {
        const o6 = e6.members[i7], l5 = this._getTypeSize(o6);
        if (!l5)
          continue;
        null !== (t5 = this._getAlias(o6.type.name)) && void 0 !== t5 || o6.type;
        const c5 = l5.align, u6 = l5.size;
        n4 = this._roundUp(c5, n4 + s5), s5 = u6, r5 = n4, a6 = Math.max(a6, c5), o6.offset = n4, o6.size = u6, this._updateTypeInfo(o6.type);
      }
      e6.size = this._roundUp(a6, r5 + s5), e6.align = a6;
    }
    _getTypeSize(r5) {
      var a6, i7;
      if (null == r5)
        return null;
      const o5 = this._getAttributeNum(r5.attributes, "size", 0), l5 = this._getAttributeNum(r5.attributes, "align", 0);
      if (r5 instanceof t && (r5 = r5.type), r5 instanceof e) {
        const e6 = this._getAlias(r5.name);
        null !== e6 && (r5 = e6);
      }
      {
        const e6 = st._typeInfo[r5.name];
        if (void 0 !== e6) {
          const t5 = "f16" === (null === (a6 = r5.format) || void 0 === a6 ? void 0 : a6.name) ? 2 : 1;
          return new nt(Math.max(l5, e6.align / t5), Math.max(o5, e6.size / t5));
        }
      }
      {
        const e6 = st._typeInfo[r5.name.substring(0, r5.name.length - 1)];
        if (e6) {
          const t5 = "h" === r5.name[r5.name.length - 1] ? 2 : 1;
          return new nt(Math.max(l5, e6.align / t5), Math.max(o5, e6.size / t5));
        }
      }
      if (r5 instanceof s) {
        let e6 = r5, t5 = 8, n4 = 8;
        const s5 = this._getTypeSize(e6.format);
        null !== s5 && (n4 = s5.size, t5 = s5.align);
        return n4 = e6.count * this._getAttributeNum(null !== (i7 = null == r5 ? void 0 : r5.attributes) && void 0 !== i7 ? i7 : null, "stride", this._roundUp(t5, n4)), o5 && (n4 = o5), new nt(Math.max(l5, t5), Math.max(o5, n4));
      }
      if (r5 instanceof n) {
        let e6 = 0, t5 = 0, n4 = 0, s5 = 0, a7 = 0;
        for (const t6 of r5.members) {
          const r6 = this._getTypeSize(t6.type);
          null !== r6 && (e6 = Math.max(r6.align, e6), n4 = this._roundUp(r6.align, n4 + s5), s5 = r6.size, a7 = n4);
        }
        return t5 = this._roundUp(e6, a7 + s5), new nt(Math.max(l5, e6), Math.max(o5, t5));
      }
      return null;
    }
    _isUniformVar(e6) {
      return e6 instanceof O && "uniform" == e6.storage;
    }
    _isStorageVar(e6) {
      return e6 instanceof O && "storage" == e6.storage;
    }
    _isTextureVar(e6) {
      return e6 instanceof O && null !== e6.type && -1 != st._textureTypes.indexOf(e6.type.name);
    }
    _isSamplerVar(e6) {
      return e6 instanceof O && null !== e6.type && -1 != st._samplerTypes.indexOf(e6.type.name);
    }
    _getAttribute(e6, t5) {
      const n4 = e6;
      if (!n4 || !n4.attributes)
        return null;
      const s5 = n4.attributes;
      for (let e7 of s5)
        if (e7.name == t5)
          return e7;
      return null;
    }
    _getAttributeNum(e6, t5, n4) {
      if (null === e6)
        return n4;
      for (let s5 of e6)
        if (s5.name == t5) {
          let e7 = null !== s5 && null !== s5.value ? s5.value : n4;
          return e7 instanceof Array && (e7 = e7[0]), "number" == typeof e7 ? e7 : "string" == typeof e7 ? parseInt(e7) : n4;
        }
      return n4;
    }
    _roundUp(e6, t5) {
      return Math.ceil(t5 / e6) * e6;
    }
  };
  st._typeInfo = { f16: { align: 2, size: 2 }, i32: { align: 4, size: 4 }, u32: { align: 4, size: 4 }, f32: { align: 4, size: 4 }, atomic: { align: 4, size: 4 }, vec2: { align: 8, size: 8 }, vec3: { align: 16, size: 12 }, vec4: { align: 16, size: 16 }, mat2x2: { align: 8, size: 16 }, mat3x2: { align: 8, size: 24 }, mat4x2: { align: 8, size: 32 }, mat2x3: { align: 16, size: 32 }, mat3x3: { align: 16, size: 48 }, mat4x3: { align: 16, size: 64 }, mat2x4: { align: 16, size: 32 }, mat3x4: { align: 16, size: 48 }, mat4x4: { align: 16, size: 64 } }, st._textureTypes = We.any_texture_type.map((e6) => e6.name), st._samplerTypes = We.sampler_type.map((e6) => e6.name);
  var rt = class {
    constructor(e6, t5, n4) {
      this.name = e6, this.value = t5, this.node = n4;
    }
    clone() {
      return new rt(this.name, this.value, this.node);
    }
  };
  var at = class {
    constructor(e6) {
      this.name = e6.name, this.node = e6;
    }
    clone() {
      return new at(this.node);
    }
  };
  var it = class {
    constructor(e6) {
      this.parent = null, this.variables = /* @__PURE__ */ new Map(), this.functions = /* @__PURE__ */ new Map(), this.currentFunctionName = "", e6 && (this.parent = e6, this.currentFunctionName = e6.currentFunctionName);
    }
    getVariable(e6) {
      var t5;
      return this.variables.has(e6) ? null !== (t5 = this.variables.get(e6)) && void 0 !== t5 ? t5 : null : this.parent ? this.parent.getVariable(e6) : null;
    }
    getFunction(e6) {
      var t5;
      return this.functions.has(e6) ? null !== (t5 = this.functions.get(e6)) && void 0 !== t5 ? t5 : null : this.parent ? this.parent.getFunction(e6) : null;
    }
    createVariable(e6, t5, n4) {
      this.variables.set(e6, new rt(e6, t5, null != n4 ? n4 : null));
    }
    setVariable(e6, t5, n4) {
      const s5 = this.getVariable(e6);
      null !== s5 ? s5.value = t5 : this.createVariable(e6, t5, n4);
    }
    getVariableValue(e6) {
      var t5;
      const n4 = this.getVariable(e6);
      return null !== (t5 = null == n4 ? void 0 : n4.value) && void 0 !== t5 ? t5 : null;
    }
    clone() {
      return new it(this);
    }
  };
  var ot = class {
    evalExpression(e6, t5) {
      return null;
    }
    getTypeInfo(e6) {
      return null;
    }
    getVariableName(e6, t5) {
      return "";
    }
  };
  var lt = class {
    constructor(e6) {
      this.exec = e6;
    }
    getTypeInfo(e6) {
      return this.exec.getTypeInfo(e6);
    }
    All(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      let s5 = true;
      if (n4 instanceof Be)
        return n4.data.forEach((e7) => {
          e7 || (s5 = false);
        }), new Ve(s5 ? 1 : 0, this.getTypeInfo("bool"));
      throw new Error(`All() expects a vector argument. Line ${e6.line}`);
    }
    Any(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be) {
        const e7 = n4.data.some((e8) => e8);
        return new Ve(e7 ? 1 : 0, this.getTypeInfo("bool"));
      }
      throw new Error(`Any() expects a vector argument. Line ${e6.line}`);
    }
    Select(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[2], t5);
      if (!(n4 instanceof Ve))
        throw new Error(`Select() expects a bool condition. Line ${e6.line}`);
      return n4.value ? this.exec.evalExpression(e6.args[1], t5) : this.exec.evalExpression(e6.args[0], t5);
    }
    ArrayLength(e6, t5) {
      let n4 = e6.args[0];
      n4 instanceof ve && (n4 = n4.right);
      const s5 = this.exec.evalExpression(n4, t5);
      if (s5 instanceof Me && 0 === s5.typeInfo.size) {
        const e7 = s5.typeInfo, t6 = s5.buffer.byteLength / e7.stride;
        return new Ve(t6, this.getTypeInfo("u32"));
      }
      return new Ve(s5.typeInfo.size, this.getTypeInfo("u32"));
    }
    Abs(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.abs(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.abs(s5.value), s5.typeInfo);
    }
    Acos(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.acos(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.acos(s5.value), n4.typeInfo);
    }
    Acosh(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.acosh(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.acosh(s5.value), n4.typeInfo);
    }
    Asin(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.asin(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.asin(s5.value), n4.typeInfo);
    }
    Asinh(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.asinh(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.asinh(s5.value), n4.typeInfo);
    }
    Atan(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.atan(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.atan(s5.value), n4.typeInfo);
    }
    Atanh(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.atanh(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.atanh(s5.value), n4.typeInfo);
    }
    Atan2(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5), s5 = this.exec.evalExpression(e6.args[1], t5);
      if (n4 instanceof Be && s5 instanceof Be)
        return new Be(n4.data.map((e7, t6) => Math.atan2(e7, s5.data[t6])), n4.typeInfo);
      const r5 = n4, a6 = s5;
      return new Ve(Math.atan2(r5.value, a6.value), n4.typeInfo);
    }
    Ceil(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.ceil(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.ceil(s5.value), n4.typeInfo);
    }
    _clamp(e6, t5, n4) {
      return Math.min(Math.max(e6, t5), n4);
    }
    Clamp(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5), s5 = this.exec.evalExpression(e6.args[1], t5), r5 = this.exec.evalExpression(e6.args[2], t5);
      if (n4 instanceof Be && s5 instanceof Be && r5 instanceof Be)
        return new Be(n4.data.map((e7, t6) => this._clamp(e7, s5.data[t6], r5.data[t6])), n4.typeInfo);
      const a6 = n4, i7 = s5, o5 = r5;
      return new Ve(this._clamp(a6.value, i7.value, o5.value), n4.typeInfo);
    }
    Cos(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.cos(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.cos(s5.value), n4.typeInfo);
    }
    Cosh(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.cosh(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.cos(s5.value), n4.typeInfo);
    }
    CountLeadingZeros(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.clz32(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.clz32(s5.value), n4.typeInfo);
    }
    _countOneBits(e6) {
      let t5 = 0;
      for (; 0 !== e6; )
        1 & e6 && t5++, e6 >>= 1;
      return t5;
    }
    CountOneBits(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => this._countOneBits(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(this._countOneBits(s5.value), n4.typeInfo);
    }
    _countTrailingZeros(e6) {
      if (0 === e6)
        return 32;
      let t5 = 0;
      for (; !(1 & e6); )
        e6 >>= 1, t5++;
      return t5;
    }
    CountTrailingZeros(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => this._countTrailingZeros(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(this._countTrailingZeros(s5.value), n4.typeInfo);
    }
    Cross(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5), s5 = this.exec.evalExpression(e6.args[1], t5);
      if (n4 instanceof Be && s5 instanceof Be) {
        if (3 !== n4.data.length || 3 !== s5.data.length)
          return console.error(`Cross() expects 3D vectors. Line ${e6.line}`), null;
        const t6 = n4.data, r5 = s5.data;
        return new Be([t6[1] * r5[2] - r5[1] * t6[2], t6[2] * r5[0] - r5[2] * t6[0], t6[0] * r5[1] - r5[0] * t6[1]], n4.typeInfo);
      }
      return console.error(`Cross() expects vector arguments. Line ${e6.line}`), null;
    }
    Degrees(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5), s5 = 180 / Math.PI;
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => e7 * s5), n4.typeInfo);
      return new Ve(n4.value * s5, this.getTypeInfo("f32"));
    }
    Determinant(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Fe) {
        const e7 = n4.data, t6 = n4.typeInfo.getTypeName(), s5 = t6.endsWith("h") ? this.getTypeInfo("f16") : this.getTypeInfo("f32");
        if ("mat2x2" === t6 || "mat2x2f" === t6 || "mat2x2h" === t6)
          return new Ve(e7[0] * e7[3] - e7[1] * e7[2], s5);
        if ("mat2x3" === t6 || "mat2x3f" === t6 || "mat2x3h" === t6)
          return new Ve(e7[0] * (e7[4] * e7[8] - e7[5] * e7[7]) - e7[1] * (e7[3] * e7[8] - e7[5] * e7[6]) + e7[2] * (e7[3] * e7[7] - e7[4] * e7[6]), s5);
        if ("mat2x4" === t6 || "mat2x4f" === t6 || "mat2x4h" === t6)
          console.error(`TODO: Determinant for ${t6}`);
        else if ("mat3x2" === t6 || "mat3x2f" === t6 || "mat3x2h" === t6)
          console.error(`TODO: Determinant for ${t6}`);
        else {
          if ("mat3x3" === t6 || "mat3x3f" === t6 || "mat3x3h" === t6)
            return new Ve(e7[0] * (e7[4] * e7[8] - e7[5] * e7[7]) - e7[1] * (e7[3] * e7[8] - e7[5] * e7[6]) + e7[2] * (e7[3] * e7[7] - e7[4] * e7[6]), s5);
          "mat3x4" === t6 || "mat3x4f" === t6 || "mat3x4h" === t6 || "mat4x2" === t6 || "mat4x2f" === t6 || "mat4x2h" === t6 || "mat4x3" === t6 || "mat4x3f" === t6 || "mat4x3h" === t6 ? console.error(`TODO: Determinant for ${t6}`) : "mat4x4" !== t6 && "mat4x4f" !== t6 && "mat4x4h" !== t6 || console.error(`TODO: Determinant for ${t6}`);
        }
      }
      return console.error(`Determinant expects a matrix argument. Line ${e6.line}`), null;
    }
    Distance(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5), s5 = this.exec.evalExpression(e6.args[1], t5);
      if (n4 instanceof Be && s5 instanceof Be) {
        let e7 = 0;
        for (let t6 = 0; t6 < n4.data.length; ++t6)
          e7 += (n4.data[t6] - s5.data[t6]) * (n4.data[t6] - s5.data[t6]);
        return new Ve(Math.sqrt(e7), this.getTypeInfo("f32"));
      }
      const r5 = n4, a6 = s5;
      return new Ve(Math.abs(r5.value - a6.value), n4.typeInfo);
    }
    _dot(e6, t5) {
      let n4 = 0;
      for (let s5 = 0; s5 < e6.length; ++s5)
        n4 += t5[s5] * e6[s5];
      return n4;
    }
    Dot(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5), s5 = this.exec.evalExpression(e6.args[1], t5);
      return n4 instanceof Be && s5 instanceof Be ? new Ve(this._dot(n4.data, s5.data), this.getTypeInfo("f32")) : (console.error(`Dot() expects vector arguments. Line ${e6.line}`), null);
    }
    Dot4U8Packed(e6, t5) {
      return console.error(`TODO: dot4U8Packed. Line ${e6.line}`), null;
    }
    Dot4I8Packed(e6, t5) {
      return console.error(`TODO: dot4I8Packed. Line ${e6.line}`), null;
    }
    Exp(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.exp(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.exp(s5.value), n4.typeInfo);
    }
    Exp2(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.pow(2, e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.pow(2, s5.value), n4.typeInfo);
    }
    ExtractBits(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5), s5 = this.exec.evalExpression(e6.args[1], t5), r5 = this.exec.evalExpression(e6.args[2], t5);
      if ("u32" !== s5.typeInfo.name && "x32" !== s5.typeInfo.name)
        return console.error(`ExtractBits() expects an i32 offset argument. Line ${e6.line}`), null;
      if ("u32" !== r5.typeInfo.name && "x32" !== r5.typeInfo.name)
        return console.error(`ExtractBits() expects an i32 count argument. Line ${e6.line}`), null;
      const a6 = s5.value, i7 = r5.value;
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => e7 >> a6 & (1 << i7) - 1), n4.typeInfo);
      if ("i32" !== n4.typeInfo.name && "x32" !== n4.typeInfo.name)
        return console.error(`ExtractBits() expects an i32 argument. Line ${e6.line}`), null;
      const o5 = n4.value;
      return new Ve(o5 >> a6 & (1 << i7) - 1, this.getTypeInfo("i32"));
    }
    FaceForward(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5), s5 = this.exec.evalExpression(e6.args[1], t5), r5 = this.exec.evalExpression(e6.args[2], t5);
      if (n4 instanceof Be && s5 instanceof Be && r5 instanceof Be) {
        const e7 = this._dot(s5.data, r5.data);
        return new Be(e7 < 0 ? Array.from(n4.data) : n4.data.map((e8) => -e8), n4.typeInfo);
      }
      return console.error(`FaceForward() expects vector arguments. Line ${e6.line}`), null;
    }
    _firstLeadingBit(e6) {
      return 0 === e6 ? -1 : 31 - Math.clz32(e6);
    }
    FirstLeadingBit(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => this._firstLeadingBit(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(this._firstLeadingBit(s5.value), n4.typeInfo);
    }
    _firstTrailingBit(e6) {
      return 0 === e6 ? -1 : Math.log2(e6 & -e6);
    }
    FirstTrailingBit(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => this._firstTrailingBit(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(this._firstTrailingBit(s5.value), n4.typeInfo);
    }
    Floor(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.floor(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.floor(s5.value), n4.typeInfo);
    }
    Fma(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5), s5 = this.exec.evalExpression(e6.args[1], t5), r5 = this.exec.evalExpression(e6.args[2], t5);
      if (n4 instanceof Be && s5 instanceof Be && r5 instanceof Be)
        return n4.data.length !== s5.data.length || n4.data.length !== r5.data.length ? (console.error(`Fma() expects vectors of the same length. Line ${e6.line}`), null) : new Be(n4.data.map((e7, t6) => e7 * s5.data[t6] + r5.data[t6]), n4.typeInfo);
      const a6 = n4, i7 = s5, o5 = r5;
      return new Ve(a6.value * i7.value + o5.value, a6.typeInfo);
    }
    Fract(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => e7 - Math.floor(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(s5.value - Math.floor(s5.value), n4.typeInfo);
    }
    Frexp(e6, t5) {
      return console.error(`TODO: frexp. Line ${e6.line}`), null;
    }
    InsertBits(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5), s5 = this.exec.evalExpression(e6.args[1], t5), r5 = this.exec.evalExpression(e6.args[2], t5), a6 = this.exec.evalExpression(e6.args[3], t5);
      if ("u32" !== r5.typeInfo.name && "x32" !== r5.typeInfo.name)
        return console.error(`InsertBits() expects an i32 offset argument. Line ${e6.line}`), null;
      const i7 = r5.value, o5 = (1 << a6.value) - 1 << i7, l5 = ~o5;
      if (n4 instanceof Be && s5 instanceof Be)
        return new Be(n4.data.map((e7, t6) => e7 & l5 | s5.data[t6] << i7 & o5), n4.typeInfo);
      const c5 = n4.value, u6 = s5.value;
      return new Ve(c5 & l5 | u6 << i7 & o5, n4.typeInfo);
    }
    InverseSqrt(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => 1 / Math.sqrt(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(1 / Math.sqrt(s5.value), n4.typeInfo);
    }
    Ldexp(e6, t5) {
      return console.error(`TODO: ldexp. Line ${e6.line}`), null;
    }
    Length(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be) {
        let e7 = 0;
        return n4.data.forEach((t6) => {
          e7 += t6 * t6;
        }), new Ve(Math.sqrt(e7), this.getTypeInfo("f32"));
      }
      const s5 = n4;
      return new Ve(Math.abs(s5.value), n4.typeInfo);
    }
    Log(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.log(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.log(s5.value), n4.typeInfo);
    }
    Log2(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.log2(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.log2(s5.value), n4.typeInfo);
    }
    Max(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5), s5 = this.exec.evalExpression(e6.args[1], t5);
      if (n4 instanceof Be && s5 instanceof Be)
        return new Be(n4.data.map((e7, t6) => Math.max(e7, s5.data[t6])), n4.typeInfo);
      const r5 = n4, a6 = s5;
      return new Ve(Math.max(r5.value, a6.value), n4.typeInfo);
    }
    Min(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5), s5 = this.exec.evalExpression(e6.args[1], t5);
      if (n4 instanceof Be && s5 instanceof Be)
        return new Be(n4.data.map((e7, t6) => Math.min(e7, s5.data[t6])), n4.typeInfo);
      const r5 = n4, a6 = s5;
      return new Ve(Math.min(r5.value, a6.value), n4.typeInfo);
    }
    Mix(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5), s5 = this.exec.evalExpression(e6.args[1], t5), r5 = this.exec.evalExpression(e6.args[2], t5);
      if (n4 instanceof Be && s5 instanceof Be && r5 instanceof Be)
        return new Be(n4.data.map((e7, t6) => n4.data[t6] * (1 - r5.data[t6]) + s5.data[t6] * r5.data[t6]), n4.typeInfo);
      const a6 = s5, i7 = r5;
      return new Ve(n4.value * (1 - i7.value) + a6.value * i7.value, n4.typeInfo);
    }
    Modf(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5), s5 = this.exec.evalExpression(e6.args[1], t5);
      if (n4 instanceof Be && s5 instanceof Be)
        return new Be(n4.data.map((e7, t6) => e7 % s5.data[t6]), n4.typeInfo);
      const r5 = s5;
      return new Ve(n4.value % r5.value, n4.typeInfo);
    }
    Normalize(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be) {
        const s5 = this.Length(e6, t5).value;
        return new Be(n4.data.map((e7) => e7 / s5), n4.typeInfo);
      }
      return console.error(`Normalize() expects a vector argument. Line ${e6.line}`), null;
    }
    Pow(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5), s5 = this.exec.evalExpression(e6.args[1], t5);
      if (n4 instanceof Be && s5 instanceof Be)
        return new Be(n4.data.map((e7, t6) => Math.pow(e7, s5.data[t6])), n4.typeInfo);
      const r5 = n4, a6 = s5;
      return new Ve(Math.pow(r5.value, a6.value), n4.typeInfo);
    }
    QuantizeToF16(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => e7), n4.typeInfo);
      return new Ve(n4.value, n4.typeInfo);
    }
    Radians(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => e7 * Math.PI / 180), n4.typeInfo);
      return new Ve(n4.value * Math.PI / 180, this.getTypeInfo("f32"));
    }
    Reflect(e6, t5) {
      let n4 = this.exec.evalExpression(e6.args[0], t5), s5 = this.exec.evalExpression(e6.args[1], t5);
      if (n4 instanceof Be && s5 instanceof Be) {
        const e7 = this._dot(n4.data, s5.data);
        return new Be(n4.data.map((t6, n5) => t6 - 2 * e7 * s5.data[n5]), n4.typeInfo);
      }
      return console.error(`Reflect() expects vector arguments. Line ${e6.line}`), null;
    }
    Refract(e6, t5) {
      let n4 = this.exec.evalExpression(e6.args[0], t5), s5 = this.exec.evalExpression(e6.args[1], t5), r5 = this.exec.evalExpression(e6.args[2], t5);
      if (n4 instanceof Be && s5 instanceof Be && r5 instanceof Ve) {
        const e7 = this._dot(s5.data, n4.data);
        return new Be(n4.data.map((t6, n5) => {
          const a6 = 1 - r5.value * r5.value * (1 - e7 * e7);
          if (a6 < 0)
            return 0;
          const i7 = Math.sqrt(a6);
          return r5.value * t6 - (r5.value * e7 + i7) * s5.data[n5];
        }), n4.typeInfo);
      }
      return console.error(`Refract() expects vector arguments and a scalar argument. Line ${e6.line}`), null;
    }
    ReverseBits(e6, t5) {
      return console.error(`TODO: reverseBits. Line ${e6.line}`), null;
    }
    Round(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.round(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.round(s5.value), n4.typeInfo);
    }
    Saturate(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.min(Math.max(e7, 0), 1)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.min(Math.max(s5.value, 0), 1), n4.typeInfo);
    }
    Sign(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.sign(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.sign(s5.value), n4.typeInfo);
    }
    Sin(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.sin(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.sin(s5.value), n4.typeInfo);
    }
    Sinh(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.sinh(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.sinh(s5.value), n4.typeInfo);
    }
    _smoothstep(e6, t5, n4) {
      const s5 = Math.min(Math.max((n4 - e6) / (t5 - e6), 0), 1);
      return s5 * s5 * (3 - 2 * s5);
    }
    SmoothStep(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5), s5 = this.exec.evalExpression(e6.args[1], t5), r5 = this.exec.evalExpression(e6.args[2], t5);
      if (r5 instanceof Be && n4 instanceof Be && s5 instanceof Be)
        return new Be(r5.data.map((e7, t6) => this._smoothstep(n4.data[t6], s5.data[t6], e7)), r5.typeInfo);
      const a6 = n4, i7 = s5, o5 = r5;
      return new Ve(this._smoothstep(a6.value, i7.value, o5.value), r5.typeInfo);
    }
    Sqrt(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.sqrt(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.sqrt(s5.value), n4.typeInfo);
    }
    Step(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5), s5 = this.exec.evalExpression(e6.args[1], t5);
      if (s5 instanceof Be && n4 instanceof Be)
        return new Be(s5.data.map((e7, t6) => e7 < n4.data[t6] ? 0 : 1), s5.typeInfo);
      const r5 = n4;
      return new Ve(s5.value < r5.value ? 0 : 1, r5.typeInfo);
    }
    Tan(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.tan(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.tan(s5.value), n4.typeInfo);
    }
    Tanh(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.tanh(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.tanh(s5.value), n4.typeInfo);
    }
    _getTransposeType(e6) {
      const t5 = e6.getTypeName();
      return "mat2x2f" === t5 || "mat2x2h" === t5 ? e6 : "mat2x3f" === t5 ? this.getTypeInfo("mat3x2f") : "mat2x3h" === t5 ? this.getTypeInfo("mat3x2h") : "mat2x4f" === t5 ? this.getTypeInfo("mat4x2f") : "mat2x4h" === t5 ? this.getTypeInfo("mat4x2h") : "mat3x2f" === t5 ? this.getTypeInfo("mat2x3f") : "mat3x2h" === t5 ? this.getTypeInfo("mat2x3h") : "mat3x3f" === t5 || "mat3x3h" === t5 ? e6 : "mat3x4f" === t5 ? this.getTypeInfo("mat4x3f") : "mat3x4h" === t5 ? this.getTypeInfo("mat4x3h") : "mat4x2f" === t5 ? this.getTypeInfo("mat2x4f") : "mat4x2h" === t5 ? this.getTypeInfo("mat2x4h") : "mat4x3f" === t5 ? this.getTypeInfo("mat3x4f") : "mat4x3h" === t5 ? this.getTypeInfo("mat3x4h") : ("mat4x4f" === t5 || "mat4x4h" === t5 || console.error(`Invalid matrix type ${t5}`), e6);
    }
    Transpose(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (!(n4 instanceof Fe))
        return console.error(`Transpose() expects a matrix argument. Line ${e6.line}`), null;
      const s5 = this._getTransposeType(n4.typeInfo);
      if ("mat2x2" === n4.typeInfo.name || "mat2x2f" === n4.typeInfo.name || "mat2x2h" === n4.typeInfo.name) {
        const e7 = n4.data;
        return new Fe([e7[0], e7[2], e7[1], e7[3]], s5);
      }
      if ("mat2x3" === n4.typeInfo.name || "mat2x3f" === n4.typeInfo.name || "mat2x3h" === n4.typeInfo.name) {
        const e7 = n4.data;
        return new Fe([e7[0], e7[3], e7[6], e7[1], e7[4], e7[7]], s5);
      }
      if ("mat2x4" === n4.typeInfo.name || "mat2x4f" === n4.typeInfo.name || "mat2x4h" === n4.typeInfo.name) {
        const e7 = n4.data;
        return new Fe([e7[0], e7[4], e7[8], e7[12], e7[1], e7[5], e7[9], e7[13]], s5);
      }
      if ("mat3x2" === n4.typeInfo.name || "mat3x2f" === n4.typeInfo.name || "mat3x2h" === n4.typeInfo.name) {
        const e7 = n4.data;
        return new Fe([e7[0], e7[3], e7[1], e7[4], e7[2], e7[5]], s5);
      }
      if ("mat3x3" === n4.typeInfo.name || "mat3x3f" === n4.typeInfo.name || "mat3x3h" === n4.typeInfo.name) {
        const e7 = n4.data;
        return new Fe([e7[0], e7[3], e7[6], e7[1], e7[4], e7[7], e7[2], e7[5], e7[8]], s5);
      }
      if ("mat3x4" === n4.typeInfo.name || "mat3x4f" === n4.typeInfo.name || "mat3x4h" === n4.typeInfo.name) {
        const e7 = n4.data;
        return new Fe([e7[0], e7[4], e7[8], e7[12], e7[1], e7[5], e7[9], e7[13], e7[2], e7[6], e7[10], e7[14]], s5);
      }
      if ("mat4x2" === n4.typeInfo.name || "mat4x2f" === n4.typeInfo.name || "mat4x2h" === n4.typeInfo.name) {
        const e7 = n4.data;
        return new Fe([e7[0], e7[4], e7[1], e7[5], e7[2], e7[6]], s5);
      }
      if ("mat4x3" === n4.typeInfo.name || "mat4x3f" === n4.typeInfo.name || "mat4x3h" === n4.typeInfo.name) {
        const e7 = n4.data;
        return new Fe([e7[0], e7[4], e7[8], e7[1], e7[5], e7[9], e7[2], e7[6], e7[10]], s5);
      }
      if ("mat4x4" === n4.typeInfo.name || "mat4x4f" === n4.typeInfo.name || "mat4x4h" === n4.typeInfo.name) {
        const e7 = n4.data;
        return new Fe([e7[0], e7[4], e7[8], e7[12], e7[1], e7[5], e7[9], e7[13], e7[2], e7[6], e7[10], e7[14], e7[3], e7[7], e7[11], e7[15]], s5);
      }
      return console.error(`Invalid matrix type ${n4.typeInfo.name}`), null;
    }
    Trunc(e6, t5) {
      const n4 = this.exec.evalExpression(e6.args[0], t5);
      if (n4 instanceof Be)
        return new Be(n4.data.map((e7) => Math.trunc(e7)), n4.typeInfo);
      const s5 = n4;
      return new Ve(Math.trunc(s5.value), n4.typeInfo);
    }
    Dpdx(e6, t5) {
      return console.error(`TODO: dpdx. Line ${e6.line}`), null;
    }
    DpdxCoarse(e6, t5) {
      return console.error(`TODO: dpdxCoarse. Line ${e6.line}`), null;
    }
    DpdxFine(e6, t5) {
      return console.error("TODO: dpdxFine"), null;
    }
    Dpdy(e6, t5) {
      return console.error("TODO: dpdy"), null;
    }
    DpdyCoarse(e6, t5) {
      return console.error("TODO: dpdyCoarse"), null;
    }
    DpdyFine(e6, t5) {
      return console.error("TODO: dpdyFine"), null;
    }
    Fwidth(e6, t5) {
      return console.error("TODO: fwidth"), null;
    }
    FwidthCoarse(e6, t5) {
      return console.error("TODO: fwidthCoarse"), null;
    }
    FwidthFine(e6, t5) {
      return console.error("TODO: fwidthFine"), null;
    }
    TextureDimensions(e6, t5) {
      const n4 = e6.args[0], s5 = e6.args.length > 1 ? this.exec.evalExpression(e6.args[1], t5).value : 0;
      if (n4 instanceof de) {
        const r5 = n4.name, a6 = t5.getVariableValue(r5);
        if (a6 instanceof Ue) {
          if (s5 < 0 || s5 >= a6.mipLevelCount)
            return console.error(`Invalid mip level for textureDimensions. Line ${e6.line}`), null;
          const t6 = a6.getMipLevelSize(s5), n5 = a6.dimension;
          return "1d" === n5 ? new Ve(t6[0], this.getTypeInfo("u32")) : "3d" === n5 ? new Be(t6, this.getTypeInfo("vec3u")) : "2d" === n5 ? new Be(t6.slice(0, 2), this.getTypeInfo("vec2u")) : (console.error(`Invalid texture dimension ${n5} not found. Line ${e6.line}`), null);
        }
        return console.error(`Texture ${r5} not found. Line ${e6.line}`), null;
      }
      return console.error(`Invalid texture argument for textureDimensions. Line ${e6.line}`), null;
    }
    TextureGather(e6, t5) {
      return console.error("TODO: textureGather"), null;
    }
    TextureGatherCompare(e6, t5) {
      return console.error("TODO: textureGatherCompare"), null;
    }
    TextureLoad(e6, t5) {
      const n4 = e6.args[0], s5 = this.exec.evalExpression(e6.args[1], t5), r5 = e6.args.length > 2 ? this.exec.evalExpression(e6.args[2], t5).value : 0;
      if (!(s5 instanceof Be) || 2 !== s5.data.length)
        return console.error(`Invalid UV argument for textureLoad. Line ${e6.line}`), null;
      if (n4 instanceof de) {
        const a6 = n4.name, i7 = t5.getVariableValue(a6);
        if (i7 instanceof Ue) {
          const t6 = Math.floor(s5.data[0]), n5 = Math.floor(s5.data[1]);
          if (t6 < 0 || t6 >= i7.width || n5 < 0 || n5 >= i7.height)
            return console.error(`Texture ${a6} out of bounds. Line ${e6.line}`), null;
          const o5 = i7.getPixel(t6, n5, 0, r5);
          return null === o5 ? (console.error(`Invalid texture format for textureLoad. Line ${e6.line}`), null) : new Be(o5, this.getTypeInfo("vec4f"));
        }
        return console.error(`Texture ${a6} not found. Line ${e6.line}`), null;
      }
      return console.error(`Invalid texture argument for textureLoad. Line ${e6.line}`), null;
    }
    TextureNumLayers(e6, t5) {
      const n4 = e6.args[0];
      if (n4 instanceof de) {
        const s5 = n4.name, r5 = t5.getVariableValue(s5);
        return r5 instanceof Ue ? new Ve(r5.depthOrArrayLayers, this.getTypeInfo("u32")) : (console.error(`Texture ${s5} not found. Line ${e6.line}`), null);
      }
      return console.error(`Invalid texture argument for textureNumLayers. Line ${e6.line}`), null;
    }
    TextureNumLevels(e6, t5) {
      const n4 = e6.args[0];
      if (n4 instanceof de) {
        const s5 = n4.name, r5 = t5.getVariableValue(s5);
        return r5 instanceof Ue ? new Ve(r5.mipLevelCount, this.getTypeInfo("u32")) : (console.error(`Texture ${s5} not found. Line ${e6.line}`), null);
      }
      return console.error(`Invalid texture argument for textureNumLevels. Line ${e6.line}`), null;
    }
    TextureNumSamples(e6, t5) {
      const n4 = e6.args[0];
      if (n4 instanceof de) {
        const s5 = n4.name, r5 = t5.getVariableValue(s5);
        return r5 instanceof Ue ? new Ve(r5.sampleCount, this.getTypeInfo("u32")) : (console.error(`Texture ${s5} not found. Line ${e6.line}`), null);
      }
      return console.error(`Invalid texture argument for textureNumSamples. Line ${e6.line}`), null;
    }
    TextureSample(e6, t5) {
      return console.error("TODO: textureSample"), null;
    }
    TextureSampleBias(e6, t5) {
      return console.error("TODO: textureSampleBias"), null;
    }
    TextureSampleCompare(e6, t5) {
      return console.error("TODO: textureSampleCompare"), null;
    }
    TextureSampleCompareLevel(e6, t5) {
      return console.error("TODO: textureSampleCompareLevel"), null;
    }
    TextureSampleGrad(e6, t5) {
      return console.error("TODO: textureSampleGrad"), null;
    }
    TextureSampleLevel(e6, t5) {
      return console.error("TODO: textureSampleLevel"), null;
    }
    TextureSampleBaseClampToEdge(e6, t5) {
      return console.error("TODO: textureSampleBaseClampToEdge"), null;
    }
    TextureStore(e6, t5) {
      const n4 = e6.args[0], s5 = this.exec.evalExpression(e6.args[1], t5), r5 = 4 === e6.args.length ? this.exec.evalExpression(e6.args[2], t5).value : 0, a6 = 4 === e6.args.length ? this.exec.evalExpression(e6.args[3], t5).data : this.exec.evalExpression(e6.args[2], t5).data;
      if (4 !== a6.length)
        return console.error(`Invalid value argument for textureStore. Line ${e6.line}`), null;
      if (!(s5 instanceof Be) || 2 !== s5.data.length)
        return console.error(`Invalid UV argument for textureStore. Line ${e6.line}`), null;
      if (n4 instanceof de) {
        const i7 = n4.name, o5 = t5.getVariableValue(i7);
        if (o5 instanceof Ue) {
          const t6 = o5.getMipLevelSize(0), n5 = Math.floor(s5.data[0]), l5 = Math.floor(s5.data[1]);
          return n5 < 0 || n5 >= t6[0] || l5 < 0 || l5 >= t6[1] ? (console.error(`Texture ${i7} out of bounds. Line ${e6.line}`), null) : (o5.setPixel(n5, l5, 0, r5, Array.from(a6)), null);
        }
        return console.error(`Texture ${i7} not found. Line ${e6.line}`), null;
      }
      return console.error(`Invalid texture argument for textureStore. Line ${e6.line}`), null;
    }
    AtomicLoad(e6, t5) {
      let n4 = e6.args[0];
      n4 instanceof ve && (n4 = n4.right);
      const s5 = this.exec.getVariableName(n4, t5);
      return t5.getVariable(s5).value.getSubData(this.exec, n4.postfix, t5);
    }
    AtomicStore(e6, t5) {
      let n4 = e6.args[0];
      n4 instanceof ve && (n4 = n4.right);
      const s5 = this.exec.getVariableName(n4, t5), r5 = t5.getVariable(s5);
      let a6 = e6.args[1];
      const i7 = this.exec.evalExpression(a6, t5), o5 = r5.value.getSubData(this.exec, n4.postfix, t5);
      return o5 instanceof Ve && i7 instanceof Ve && (o5.value = i7.value), r5.value instanceof Me && r5.value.setDataValue(this.exec, o5, n4.postfix, t5), null;
    }
    AtomicAdd(e6, t5) {
      let n4 = e6.args[0];
      n4 instanceof ve && (n4 = n4.right);
      const s5 = this.exec.getVariableName(n4, t5), r5 = t5.getVariable(s5);
      let a6 = e6.args[1];
      const i7 = this.exec.evalExpression(a6, t5), o5 = r5.value.getSubData(this.exec, n4.postfix, t5), l5 = new Ve(o5.value, o5.typeInfo);
      return o5 instanceof Ve && i7 instanceof Ve && (o5.value += i7.value), r5.value instanceof Me && r5.value.setDataValue(this.exec, o5, n4.postfix, t5), l5;
    }
    AtomicSub(e6, t5) {
      let n4 = e6.args[0];
      n4 instanceof ve && (n4 = n4.right);
      const s5 = this.exec.getVariableName(n4, t5), r5 = t5.getVariable(s5);
      let a6 = e6.args[1];
      const i7 = this.exec.evalExpression(a6, t5), o5 = r5.value.getSubData(this.exec, n4.postfix, t5), l5 = new Ve(o5.value, o5.typeInfo);
      return o5 instanceof Ve && i7 instanceof Ve && (o5.value -= i7.value), r5.value instanceof Me && r5.value.setDataValue(this.exec, o5, n4.postfix, t5), l5;
    }
    AtomicMax(e6, t5) {
      let n4 = e6.args[0];
      n4 instanceof ve && (n4 = n4.right);
      const s5 = this.exec.getVariableName(n4, t5), r5 = t5.getVariable(s5);
      let a6 = e6.args[1];
      const i7 = this.exec.evalExpression(a6, t5), o5 = r5.value.getSubData(this.exec, n4.postfix, t5), l5 = new Ve(o5.value, o5.typeInfo);
      return o5 instanceof Ve && i7 instanceof Ve && (o5.value = Math.max(o5.value, i7.value)), r5.value instanceof Me && r5.value.setDataValue(this.exec, o5, n4.postfix, t5), l5;
    }
    AtomicMin(e6, t5) {
      let n4 = e6.args[0];
      n4 instanceof ve && (n4 = n4.right);
      const s5 = this.exec.getVariableName(n4, t5), r5 = t5.getVariable(s5);
      let a6 = e6.args[1];
      const i7 = this.exec.evalExpression(a6, t5), o5 = r5.value.getSubData(this.exec, n4.postfix, t5), l5 = new Ve(o5.value, o5.typeInfo);
      return o5 instanceof Ve && i7 instanceof Ve && (o5.value = Math.min(o5.value, i7.value)), r5.value instanceof Me && r5.value.setDataValue(this.exec, o5, n4.postfix, t5), l5;
    }
    AtomicAnd(e6, t5) {
      let n4 = e6.args[0];
      n4 instanceof ve && (n4 = n4.right);
      const s5 = this.exec.getVariableName(n4, t5), r5 = t5.getVariable(s5);
      let a6 = e6.args[1];
      const i7 = this.exec.evalExpression(a6, t5), o5 = r5.value.getSubData(this.exec, n4.postfix, t5), l5 = new Ve(o5.value, o5.typeInfo);
      return o5 instanceof Ve && i7 instanceof Ve && (o5.value = o5.value & i7.value), r5.value instanceof Me && r5.value.setDataValue(this.exec, o5, n4.postfix, t5), l5;
    }
    AtomicOr(e6, t5) {
      let n4 = e6.args[0];
      n4 instanceof ve && (n4 = n4.right);
      const s5 = this.exec.getVariableName(n4, t5), r5 = t5.getVariable(s5);
      let a6 = e6.args[1];
      const i7 = this.exec.evalExpression(a6, t5), o5 = r5.value.getSubData(this.exec, n4.postfix, t5), l5 = new Ve(o5.value, o5.typeInfo);
      return o5 instanceof Ve && i7 instanceof Ve && (o5.value = o5.value | i7.value), r5.value instanceof Me && r5.value.setDataValue(this.exec, o5, n4.postfix, t5), l5;
    }
    AtomicXor(e6, t5) {
      let n4 = e6.args[0];
      n4 instanceof ve && (n4 = n4.right);
      const s5 = this.exec.getVariableName(n4, t5), r5 = t5.getVariable(s5);
      let a6 = e6.args[1];
      const i7 = this.exec.evalExpression(a6, t5), o5 = r5.value.getSubData(this.exec, n4.postfix, t5), l5 = new Ve(o5.value, o5.typeInfo);
      return o5 instanceof Ve && i7 instanceof Ve && (o5.value = o5.value ^ i7.value), r5.value instanceof Me && r5.value.setDataValue(this.exec, o5, n4.postfix, t5), l5;
    }
    AtomicExchange(e6, t5) {
      let n4 = e6.args[0];
      n4 instanceof ve && (n4 = n4.right);
      const s5 = this.exec.getVariableName(n4, t5), r5 = t5.getVariable(s5);
      let a6 = e6.args[1];
      const i7 = this.exec.evalExpression(a6, t5), o5 = r5.value.getSubData(this.exec, n4.postfix, t5), l5 = new Ve(o5.value, o5.typeInfo);
      return o5 instanceof Ve && i7 instanceof Ve && (o5.value = i7.value), r5.value instanceof Me && r5.value.setDataValue(this.exec, o5, n4.postfix, t5), l5;
    }
    AtomicCompareExchangeWeak(e6, t5) {
      return console.error("TODO: atomicCompareExchangeWeak"), null;
    }
    Pack4x8snorm(e6, t5) {
      return console.error("TODO: pack4x8snorm"), null;
    }
    Pack4x8unorm(e6, t5) {
      return console.error("TODO: pack4x8unorm"), null;
    }
    Pack4xI8(e6, t5) {
      return console.error("TODO: pack4xI8"), null;
    }
    Pack4xU8(e6, t5) {
      return console.error("TODO: pack4xU8"), null;
    }
    Pack4x8Clamp(e6, t5) {
      return console.error("TODO: pack4x8Clamp"), null;
    }
    Pack4xU8Clamp(e6, t5) {
      return console.error("TODO: pack4xU8Clamp"), null;
    }
    Pack2x16snorm(e6, t5) {
      return console.error("TODO: pack2x16snorm"), null;
    }
    Pack2x16unorm(e6, t5) {
      return console.error("TODO: pack2x16unorm"), null;
    }
    Pack2x16float(e6, t5) {
      return console.error("TODO: pack2x16float"), null;
    }
    Unpack4x8snorm(e6, t5) {
      return console.error("TODO: unpack4x8snorm"), null;
    }
    Unpack4x8unorm(e6, t5) {
      return console.error("TODO: unpack4x8unorm"), null;
    }
    Unpack4xI8(e6, t5) {
      return console.error("TODO: unpack4xI8"), null;
    }
    Unpack4xU8(e6, t5) {
      return console.error("TODO: unpack4xU8"), null;
    }
    Unpack2x16snorm(e6, t5) {
      return console.error("TODO: unpack2x16snorm"), null;
    }
    Unpack2x16unorm(e6, t5) {
      return console.error("TODO: unpack2x16unorm"), null;
    }
    Unpack2x16float(e6, t5) {
      return console.error("TODO: unpack2x16float"), null;
    }
    StorageBarrier(e6, t5) {
      return null;
    }
    TextureBarrier(e6, t5) {
      return null;
    }
    WorkgroupBarrier(e6, t5) {
      return null;
    }
    WorkgroupUniformLoad(e6, t5) {
      return null;
    }
    SubgroupAdd(e6, t5) {
      return console.error("TODO: subgroupAdd"), null;
    }
    SubgroupExclusiveAdd(e6, t5) {
      return console.error("TODO: subgroupExclusiveAdd"), null;
    }
    SubgroupInclusiveAdd(e6, t5) {
      return console.error("TODO: subgroupInclusiveAdd"), null;
    }
    SubgroupAll(e6, t5) {
      return console.error("TODO: subgroupAll"), null;
    }
    SubgroupAnd(e6, t5) {
      return console.error("TODO: subgroupAnd"), null;
    }
    SubgroupAny(e6, t5) {
      return console.error("TODO: subgroupAny"), null;
    }
    SubgroupBallot(e6, t5) {
      return console.error("TODO: subgroupBallot"), null;
    }
    SubgroupBroadcast(e6, t5) {
      return console.error("TODO: subgroupBroadcast"), null;
    }
    SubgroupBroadcastFirst(e6, t5) {
      return console.error("TODO: subgroupBroadcastFirst"), null;
    }
    SubgroupElect(e6, t5) {
      return console.error("TODO: subgroupElect"), null;
    }
    SubgroupMax(e6, t5) {
      return console.error("TODO: subgroupMax"), null;
    }
    SubgroupMin(e6, t5) {
      return console.error("TODO: subgroupMin"), null;
    }
    SubgroupMul(e6, t5) {
      return console.error("TODO: subgroupMul"), null;
    }
    SubgroupExclusiveMul(e6, t5) {
      return console.error("TODO: subgroupExclusiveMul"), null;
    }
    SubgroupInclusiveMul(e6, t5) {
      return console.error("TODO: subgroupInclusiveMul"), null;
    }
    SubgroupOr(e6, t5) {
      return console.error("TODO: subgroupOr"), null;
    }
    SubgroupShuffle(e6, t5) {
      return console.error("TODO: subgroupShuffle"), null;
    }
    SubgroupShuffleDown(e6, t5) {
      return console.error("TODO: subgroupShuffleDown"), null;
    }
    SubgroupShuffleUp(e6, t5) {
      return console.error("TODO: subgroupShuffleUp"), null;
    }
    SubgroupShuffleXor(e6, t5) {
      return console.error("TODO: subgroupShuffleXor"), null;
    }
    SubgroupXor(e6, t5) {
      return console.error("TODO: subgroupXor"), null;
    }
    QuadBroadcast(e6, t5) {
      return console.error("TODO: quadBroadcast"), null;
    }
    QuadSwapDiagonal(e6, t5) {
      return console.error("TODO: quadSwapDiagonal"), null;
    }
    QuadSwapX(e6, t5) {
      return console.error("TODO: quadSwapX"), null;
    }
    QuadSwapY(e6, t5) {
      return console.error("TODO: quadSwapY"), null;
    }
  };
  var ct = { vec2: 2, vec2f: 2, vec2i: 2, vec2u: 2, vec2b: 2, vec2h: 2, vec3: 3, vec3f: 3, vec3i: 3, vec3u: 3, vec3b: 3, vec3h: 3, vec4: 4, vec4f: 4, vec4i: 4, vec4u: 4, vec4b: 4, vec4h: 4 };
  var ut = { mat2x2: [2, 2, 4], mat2x2f: [2, 2, 4], mat2x2h: [2, 2, 4], mat2x3: [2, 3, 6], mat2x3f: [2, 3, 6], mat2x3h: [2, 3, 6], mat2x4: [2, 4, 8], mat2x4f: [2, 4, 8], mat2x4h: [2, 4, 8], mat3x2: [3, 2, 6], mat3x2f: [3, 2, 6], mat3x2h: [3, 2, 6], mat3x3: [3, 3, 9], mat3x3f: [3, 3, 9], mat3x3h: [3, 3, 9], mat3x4: [3, 4, 12], mat3x4f: [3, 4, 12], mat3x4h: [3, 4, 12], mat4x2: [4, 2, 8], mat4x2f: [4, 2, 8], mat4x2h: [4, 2, 8], mat4x3: [4, 3, 12], mat4x3f: [4, 3, 12], mat4x3h: [4, 3, 12], mat4x4: [4, 4, 16], mat4x4f: [4, 4, 16], mat4x4h: [4, 4, 16] };
  var ht = class extends ot {
    constructor(e6, t5) {
      var n4;
      super(), this.ast = null != e6 ? e6 : [], this.reflection = new st(), this.reflection.updateAST(this.ast), this.context = null !== (n4 = null == t5 ? void 0 : t5.clone()) && void 0 !== n4 ? n4 : new it(), this.builtins = new lt(this), this.typeInfo = { bool: this.getTypeInfo(se.bool), i32: this.getTypeInfo(se.i32), u32: this.getTypeInfo(se.u32), f32: this.getTypeInfo(se.f32), f16: this.getTypeInfo(se.f16), vec2f: this.getTypeInfo(ie.vec2f), vec2u: this.getTypeInfo(ie.vec2u), vec2i: this.getTypeInfo(ie.vec2i), vec2h: this.getTypeInfo(ie.vec2h), vec3f: this.getTypeInfo(ie.vec3f), vec3u: this.getTypeInfo(ie.vec3u), vec3i: this.getTypeInfo(ie.vec3i), vec3h: this.getTypeInfo(ie.vec3h), vec4f: this.getTypeInfo(ie.vec4f), vec4u: this.getTypeInfo(ie.vec4u), vec4i: this.getTypeInfo(ie.vec4i), vec4h: this.getTypeInfo(ie.vec4h), mat2x2f: this.getTypeInfo(ie.mat2x2f), mat2x3f: this.getTypeInfo(ie.mat2x3f), mat2x4f: this.getTypeInfo(ie.mat2x4f), mat3x2f: this.getTypeInfo(ie.mat3x2f), mat3x3f: this.getTypeInfo(ie.mat3x3f), mat3x4f: this.getTypeInfo(ie.mat3x4f), mat4x2f: this.getTypeInfo(ie.mat4x2f), mat4x3f: this.getTypeInfo(ie.mat4x3f), mat4x4f: this.getTypeInfo(ie.mat4x4f) };
    }
    getVariableValue(e6) {
      var t5, n4;
      const r5 = null !== (n4 = null === (t5 = this.context.getVariable(e6)) || void 0 === t5 ? void 0 : t5.value) && void 0 !== n4 ? n4 : null;
      if (null === r5)
        return null;
      if (r5 instanceof Ve)
        return r5.value;
      if (r5 instanceof Be)
        return Array.from(r5.data);
      if (r5 instanceof Fe)
        return Array.from(r5.data);
      if (r5 instanceof Me && r5.typeInfo instanceof s) {
        if ("u32" === r5.typeInfo.format.name)
          return Array.from(new Uint32Array(r5.buffer, r5.offset, r5.typeInfo.count));
        if ("i32" === r5.typeInfo.format.name)
          return Array.from(new Int32Array(r5.buffer, r5.offset, r5.typeInfo.count));
        if ("f32" === r5.typeInfo.format.name)
          return Array.from(new Float32Array(r5.buffer, r5.offset, r5.typeInfo.count));
      }
      return console.error(`Unsupported return variable type ${r5.typeInfo.name}`), null;
    }
    execute(e6) {
      (e6 = null != e6 ? e6 : {}).constants && this._setOverrides(e6.constants, this.context), this._execStatements(this.ast, this.context);
    }
    dispatchWorkgroups(e6, t5, n4, s5) {
      const r5 = this.context.clone();
      (s5 = null != s5 ? s5 : {}).constants && this._setOverrides(s5.constants, r5), this._execStatements(this.ast, r5);
      const a6 = r5.getFunction(e6);
      if (!a6)
        return void console.error(`Function ${e6} not found`);
      if ("number" == typeof t5)
        t5 = [t5, 1, 1];
      else {
        if (0 === t5.length)
          return void console.error("Invalid dispatch count");
        1 === t5.length ? t5 = [t5[0], 1, 1] : 2 === t5.length ? t5 = [t5[0], t5[1], 1] : t5.length > 3 && (t5 = [t5[0], t5[1], t5[2]]);
      }
      const i7 = t5[0], o5 = t5[1], l5 = t5[2], c5 = this.getTypeInfo("vec3u");
      r5.setVariable("@num_workgroups", new Be(t5, c5));
      for (const e7 in n4)
        for (const t6 in n4[e7]) {
          const s6 = n4[e7][t6];
          r5.variables.forEach((n5) => {
            var r6;
            const a7 = n5.node;
            if (null == a7 ? void 0 : a7.attributes) {
              let i8 = null, o6 = null;
              for (const e8 of a7.attributes)
                "binding" === e8.name ? i8 = e8.value : "group" === e8.name && (o6 = e8.value);
              if (t6 == i8 && e7 == o6)
                if (void 0 !== s6.texture && void 0 !== s6.descriptor) {
                  const e8 = new Ue(s6.texture, this.getTypeInfo(a7.type), s6.descriptor, null !== (r6 = s6.texture.view) && void 0 !== r6 ? r6 : null);
                  n5.value = e8;
                } else
                  void 0 !== s6.uniform ? n5.value = new Me(s6.uniform, this.getTypeInfo(a7.type)) : n5.value = new Me(s6, this.getTypeInfo(a7.type));
            }
          });
        }
      for (let e7 = 0; e7 < l5; ++e7)
        for (let t6 = 0; t6 < o5; ++t6)
          for (let n5 = 0; n5 < i7; ++n5)
            r5.setVariable("@workgroup_id", new Be([n5, t6, e7], this.getTypeInfo("vec3u"))), this._dispatchWorkgroup(a6, [n5, t6, e7], r5);
    }
    execStatement(e6, t5) {
      if (e6 instanceof Z)
        return this.evalExpression(e6.value, t5);
      if (e6 instanceof te) {
        if (e6.condition) {
          const n4 = this.evalExpression(e6.condition, t5);
          if (!(n4 instanceof Ve))
            throw new Error("Invalid break-if condition");
          if (!n4.value)
            return null;
        }
        return ht._breakObj;
      }
      if (e6 instanceof ne)
        return ht._continueObj;
      if (e6 instanceof F)
        this._let(e6, t5);
      else if (e6 instanceof O)
        this._var(e6, t5);
      else if (e6 instanceof M)
        this._const(e6, t5);
      else if (e6 instanceof L)
        this._function(e6, t5);
      else {
        if (e6 instanceof j)
          return this._if(e6, t5);
        if (e6 instanceof X)
          return this._switch(e6, t5);
        if (e6 instanceof V)
          return this._for(e6, t5);
        if (e6 instanceof D)
          return this._while(e6, t5);
        if (e6 instanceof G)
          return this._loop(e6, t5);
        if (e6 instanceof N) {
          const n4 = t5.clone();
          return n4.currentFunctionName = t5.currentFunctionName, this._execStatements(e6.body, n4);
        }
        if (e6 instanceof z)
          this._assign(e6, t5);
        else if (e6 instanceof H)
          this._increment(e6, t5);
        else {
          if (e6 instanceof ae)
            return null;
          if (e6 instanceof B) {
            const n4 = e6.name;
            null === t5.getVariable(n4) && t5.setVariable(n4, new Ve(0, this.getTypeInfo("u32")));
          } else if (e6 instanceof R)
            this._call(e6, t5);
          else {
            if (e6 instanceof K)
              return null;
            if (e6 instanceof J)
              return null;
            console.error("Invalid statement type.", e6, `Line ${e6.line}`);
          }
        }
      }
      return null;
    }
    evalExpression(e6, t5) {
      return e6 instanceof we ? this._evalBinaryOp(e6, t5) : e6 instanceof _e ? this._evalLiteral(e6, t5) : e6 instanceof de ? this._evalVariable(e6, t5) : e6 instanceof pe ? this._evalCall(e6, t5) : e6 instanceof fe ? this._evalCreate(e6, t5) : e6 instanceof me ? this._evalConst(e6, t5) : e6 instanceof ge ? this._evalBitcast(e6, t5) : e6 instanceof ve ? this._evalUnaryOp(e6, t5) : (console.error("Invalid expression type", e6, `Line ${e6.line}`), null);
    }
    getTypeInfo(e6) {
      var t5;
      if (e6 instanceof se) {
        const t6 = this.reflection.getTypeInfo(e6);
        if (null !== t6)
          return t6;
      }
      let n4 = null !== (t5 = this.typeInfo[e6]) && void 0 !== t5 ? t5 : null;
      return null !== n4 || (n4 = this.reflection.getTypeInfoByName(e6)), n4;
    }
    _setOverrides(e6, t5) {
      for (const n4 in e6) {
        const s5 = e6[n4], r5 = this.reflection.getOverrideInfo(n4);
        null !== r5 ? (null === r5.type && (r5.type = this.getTypeInfo("u32")), "u32" === r5.type.name || "i32" === r5.type.name || "f32" === r5.type.name || "f16" === r5.type.name ? t5.setVariable(n4, new Ve(s5, r5.type)) : "bool" === r5.type.name ? t5.setVariable(n4, new Ve(s5 ? 1 : 0, r5.type)) : "vec2" === r5.type.name || "vec3" === r5.type.name || "vec4" === r5.type.name || "vec2f" === r5.type.name || "vec3f" === r5.type.name || "vec4f" === r5.type.name || "vec2i" === r5.type.name || "vec3i" === r5.type.name || "vec4i" === r5.type.name || "vec2u" === r5.type.name || "vec3u" === r5.type.name || "vec4u" === r5.type.name || "vec2h" === r5.type.name || "vec3h" === r5.type.name || "vec4h" === r5.type.name ? t5.setVariable(n4, new Be(s5, r5.type)) : console.error(`Invalid constant type for ${n4}`)) : console.error(`Override ${n4} does not exist in the shader.`);
      }
    }
    _dispatchWorkgroup(e6, t5, n4) {
      const s5 = [1, 1, 1];
      for (const t6 of e6.node.attributes)
        if ("workgroup_size" === t6.name) {
          if (t6.value.length > 0) {
            const e7 = n4.getVariableValue(t6.value[0]);
            s5[0] = e7 instanceof Ve ? e7.value : parseInt(t6.value[0]);
          }
          if (t6.value.length > 1) {
            const e7 = n4.getVariableValue(t6.value[1]);
            s5[1] = e7 instanceof Ve ? e7.value : parseInt(t6.value[1]);
          }
          if (t6.value.length > 2) {
            const e7 = n4.getVariableValue(t6.value[2]);
            s5[2] = e7 instanceof Ve ? e7.value : parseInt(t6.value[2]);
          }
        }
      const r5 = this.getTypeInfo("vec3u"), a6 = this.getTypeInfo("u32");
      n4.setVariable("@workgroup_size", new Be(s5, r5));
      const i7 = s5[0], o5 = s5[1], l5 = s5[2];
      for (let c5 = 0, u6 = 0; c5 < l5; ++c5)
        for (let l6 = 0; l6 < o5; ++l6)
          for (let o6 = 0; o6 < i7; ++o6, ++u6) {
            const i8 = [o6, l6, c5], h5 = [o6 + t5[0] * s5[0], l6 + t5[1] * s5[1], c5 + t5[2] * s5[2]];
            n4.setVariable("@local_invocation_id", new Be(i8, r5)), n4.setVariable("@global_invocation_id", new Be(h5, r5)), n4.setVariable("@local_invocation_index", new Ve(u6, a6)), this._dispatchExec(e6, n4);
          }
    }
    _dispatchExec(e6, t5) {
      for (const n4 of e6.node.args)
        for (const e7 of n4.attributes)
          if ("builtin" === e7.name) {
            const s5 = `@${e7.value}`, r5 = t5.getVariable(s5);
            void 0 !== r5 && t5.variables.set(n4.name, r5);
          }
      this._execStatements(e6.node.body, t5);
    }
    getVariableName(e6, t5) {
      for (; e6 instanceof ve; )
        e6 = e6.right;
      return e6 instanceof de ? e6.name : (console.error("Unknown variable type", e6, "Line", e6.line), null);
    }
    _execStatements(e6, t5) {
      for (const n4 of e6) {
        if (n4 instanceof Array) {
          const e8 = t5.clone(), s5 = this._execStatements(n4, e8);
          if (s5)
            return s5;
          continue;
        }
        const e7 = this.execStatement(n4, t5);
        if (e7)
          return e7;
      }
      return null;
    }
    _call(e6, t5) {
      const n4 = t5.clone();
      n4.currentFunctionName = e6.name;
      const s5 = t5.getFunction(e6.name);
      if (s5) {
        for (let t6 = 0; t6 < s5.node.args.length; ++t6) {
          const r5 = s5.node.args[t6], a6 = this.evalExpression(e6.args[t6], n4);
          n4.setVariable(r5.name, a6, r5);
        }
        this._execStatements(s5.node.body, n4);
      } else if (e6.isBuiltin)
        this._callBuiltinFunction(e6, n4);
      else {
        this.getTypeInfo(e6.name) && this._evalCreate(e6, t5);
      }
    }
    _increment(e6, t5) {
      const n4 = this.getVariableName(e6.variable, t5), s5 = t5.getVariable(n4);
      s5 ? "++" === e6.operator ? s5.value instanceof Ve ? s5.value.value++ : console.error(`Variable ${n4} is not a scalar. Line ${e6.line}`) : "--" === e6.operator ? s5.value instanceof Ve ? s5.value.value-- : console.error(`Variable ${n4} is not a scalar. Line ${e6.line}`) : console.error(`Unknown increment operator ${e6.operator}. Line ${e6.line}`) : console.error(`Variable ${n4} not found. Line ${e6.line}`);
    }
    _getVariableData(e6, t5) {
      if (e6 instanceof de) {
        const n4 = this.getVariableName(e6, t5), s5 = t5.getVariable(n4);
        return null === s5 ? (console.error(`Variable ${n4} not found. Line ${e6.line}`), null) : s5.value.getSubData(this, e6.postfix, t5);
      }
      if (e6 instanceof ve) {
        if ("*" === e6.operator) {
          const n4 = this._getVariableData(e6.right, t5);
          return n4 instanceof Ne ? n4.reference.getSubData(this, e6.postfix, t5) : (console.error(`Variable ${e6.right} is not a pointer. Line ${e6.line}`), null);
        }
        if ("&" === e6.operator) {
          const n4 = this._getVariableData(e6.right, t5);
          return new Ne(n4);
        }
      }
      return null;
    }
    _assign(e6, t5) {
      let n4 = null, s5 = "<var>", r5 = null;
      if (e6.variable instanceof ve) {
        const n5 = this._getVariableData(e6.variable, t5), s6 = this.evalExpression(e6.value, t5), r6 = e6.operator;
        if ("=" === r6) {
          if (n5 instanceof Ve || n5 instanceof Be || n5 instanceof Fe) {
            if (s6 instanceof Ve || s6 instanceof Be || s6 instanceof Fe && n5.data.length === s6.data.length)
              return void n5.data.set(s6.data);
            console.error(`Invalid assignment. Line ${e6.line}`);
          } else if (n5 instanceof Me && s6 instanceof Me && n5.buffer.byteLength - n5.offset >= s6.buffer.byteLength - s6.offset)
            return void (n5.buffer.byteLength % 4 == 0 ? new Uint32Array(n5.buffer, n5.offset, n5.typeInfo.size / 4).set(new Uint32Array(s6.buffer, s6.offset, s6.typeInfo.size / 4)) : new Uint8Array(n5.buffer, n5.offset, n5.typeInfo.size).set(new Uint8Array(s6.buffer, s6.offset, s6.typeInfo.size)));
          return console.error(`Invalid assignment. Line ${e6.line}`), null;
        }
        if ("+=" === r6)
          return n5 instanceof Ve || n5 instanceof Be || n5 instanceof Fe ? s6 instanceof Ve || s6 instanceof Be || s6 instanceof Fe ? void n5.data.set(s6.data.map((e7, t6) => n5.data[t6] + e7)) : void console.error(`Invalid assignment . Line ${e6.line}`) : void console.error(`Invalid assignment. Line ${e6.line}`);
        if ("-=" === r6)
          return (n5 instanceof Ve || n5 instanceof Be || n5 instanceof Fe) && (s6 instanceof Ve || s6 instanceof Be || s6 instanceof Fe) ? void n5.data.set(s6.data.map((e7, t6) => n5.data[t6] - e7)) : void console.error(`Invalid assignment. Line ${e6.line}`);
      }
      if (e6.variable instanceof ve) {
        if ("*" === e6.variable.operator) {
          s5 = this.getVariableName(e6.variable.right, t5);
          const r6 = t5.getVariable(s5);
          if (!(r6 && r6.value instanceof Ne))
            return void console.error(`Variable ${s5} is not a pointer. Line ${e6.line}`);
          n4 = r6.value.reference;
          let a7 = e6.variable.postfix;
          if (!a7) {
            let t6 = e6.variable.right;
            for (; t6 instanceof ve; ) {
              if (t6.postfix) {
                a7 = t6.postfix;
                break;
              }
              t6 = t6.right;
            }
          }
          a7 && (n4 = n4.getSubData(this, a7, t5));
        }
      } else {
        r5 = e6.variable.postfix, s5 = this.getVariableName(e6.variable, t5);
        const a7 = t5.getVariable(s5);
        if (null === a7)
          return void console.error(`Variable ${s5} not found. Line ${e6.line}`);
        n4 = a7.value;
      }
      if (n4 instanceof Ne && (n4 = n4.reference), null === n4)
        return void console.error(`Variable ${s5} not found. Line ${e6.line}`);
      const a6 = this.evalExpression(e6.value, t5), i7 = e6.operator;
      if ("=" === i7)
        if (n4 instanceof Me)
          n4.setDataValue(this, a6, r5, t5);
        else if (r5) {
          if (!(n4 instanceof Be || n4 instanceof Fe))
            return void console.error(`Variable ${s5} is not a vector or matrix. Line ${e6.line}`);
          if (r5 instanceof ye) {
            const i8 = this.evalExpression(r5.index, t5).value;
            if (n4 instanceof Be) {
              if (!(a6 instanceof Ve))
                return void console.error(`Invalid assignment to ${s5}. Line ${e6.line}`);
              n4.data[i8] = a6.value;
            } else {
              if (!(n4 instanceof Fe))
                return void console.error(`Invalid assignment to ${s5}. Line ${e6.line}`);
              {
                const i9 = this.evalExpression(r5.index, t5).value;
                if (i9 < 0)
                  return void console.error(`Invalid assignment to ${s5}. Line ${e6.line}`);
                if (!(a6 instanceof Be))
                  return void console.error(`Invalid assignment to ${s5}. Line ${e6.line}`);
                {
                  const t6 = n4.typeInfo.getTypeName();
                  if ("mat2x2" === t6 || "mat2x2f" === t6 || "mat2x2h" === t6) {
                    if (!(i9 < 2 && 2 === a6.data.length))
                      return void console.error(`Invalid assignment to ${s5}. Line ${e6.line}`);
                    n4.data[2 * i9] = a6.data[0], n4.data[2 * i9 + 1] = a6.data[1];
                  } else if ("mat2x3" === t6 || "mat2x3f" === t6 || "mat2x3h" === t6) {
                    if (!(i9 < 2 && 3 === a6.data.length))
                      return void console.error(`Invalid assignment to ${s5}. Line ${e6.line}`);
                    n4.data[3 * i9] = a6.data[0], n4.data[3 * i9 + 1] = a6.data[1], n4.data[3 * i9 + 2] = a6.data[2];
                  } else if ("mat2x4" === t6 || "mat2x4f" === t6 || "mat2x4h" === t6) {
                    if (!(i9 < 2 && 4 === a6.data.length))
                      return void console.error(`Invalid assignment to ${s5}. Line ${e6.line}`);
                    n4.data[4 * i9] = a6.data[0], n4.data[4 * i9 + 1] = a6.data[1], n4.data[4 * i9 + 2] = a6.data[2], n4.data[4 * i9 + 3] = a6.data[3];
                  } else if ("mat3x2" === t6 || "mat3x2f" === t6 || "mat3x2h" === t6) {
                    if (!(i9 < 3 && 2 === a6.data.length))
                      return void console.error(`Invalid assignment to ${s5}. Line ${e6.line}`);
                    n4.data[2 * i9] = a6.data[0], n4.data[2 * i9 + 1] = a6.data[1];
                  } else if ("mat3x3" === t6 || "mat3x3f" === t6 || "mat3x3h" === t6) {
                    if (!(i9 < 3 && 3 === a6.data.length))
                      return void console.error(`Invalid assignment to ${s5}. Line ${e6.line}`);
                    n4.data[3 * i9] = a6.data[0], n4.data[3 * i9 + 1] = a6.data[1], n4.data[3 * i9 + 2] = a6.data[2];
                  } else if ("mat3x4" === t6 || "mat3x4f" === t6 || "mat3x4h" === t6) {
                    if (!(i9 < 3 && 4 === a6.data.length))
                      return void console.error(`Invalid assignment to ${s5}. Line ${e6.line}`);
                    n4.data[4 * i9] = a6.data[0], n4.data[4 * i9 + 1] = a6.data[1], n4.data[4 * i9 + 2] = a6.data[2], n4.data[4 * i9 + 3] = a6.data[3];
                  } else if ("mat4x2" === t6 || "mat4x2f" === t6 || "mat4x2h" === t6) {
                    if (!(i9 < 4 && 2 === a6.data.length))
                      return void console.error(`Invalid assignment to ${s5}. Line ${e6.line}`);
                    n4.data[2 * i9] = a6.data[0], n4.data[2 * i9 + 1] = a6.data[1];
                  } else if ("mat4x3" === t6 || "mat4x3f" === t6 || "mat4x3h" === t6) {
                    if (!(i9 < 4 && 3 === a6.data.length))
                      return void console.error(`Invalid assignment to ${s5}. Line ${e6.line}`);
                    n4.data[3 * i9] = a6.data[0], n4.data[3 * i9 + 1] = a6.data[1], n4.data[3 * i9 + 2] = a6.data[2];
                  } else {
                    if ("mat4x4" !== t6 && "mat4x4f" !== t6 && "mat4x4h" !== t6)
                      return void console.error(`Invalid assignment to ${s5}. Line ${e6.line}`);
                    if (!(i9 < 4 && 4 === a6.data.length))
                      return void console.error(`Invalid assignment to ${s5}. Line ${e6.line}`);
                    n4.data[4 * i9] = a6.data[0], n4.data[4 * i9 + 1] = a6.data[1], n4.data[4 * i9 + 2] = a6.data[2], n4.data[4 * i9 + 3] = a6.data[3];
                  }
                }
              }
            }
          } else if (r5 instanceof he) {
            const t6 = r5.value;
            if (!(n4 instanceof Be))
              return void console.error(`Invalid assignment to ${t6}. Variable ${s5} is not a vector. Line ${e6.line}`);
            if (a6 instanceof Ve) {
              if (t6.length > 1)
                return void console.error(`Invalid assignment to ${t6} for variable ${s5}. Line ${e6.line}`);
              if ("x" === t6)
                n4.data[0] = a6.value;
              else if ("y" === t6) {
                if (n4.data.length < 2)
                  return void console.error(`Invalid assignment to ${t6} for variable ${s5}. Line ${e6.line}`);
                n4.data[1] = a6.value;
              } else if ("z" === t6) {
                if (n4.data.length < 3)
                  return void console.error(`Invalid assignment to ${t6} for variable ${s5}. Line ${e6.line}`);
                n4.data[2] = a6.value;
              } else if ("w" === t6) {
                if (n4.data.length < 4)
                  return void console.error(`Invalid assignment to ${t6} for variable ${s5}. Line ${e6.line}`);
                n4.data[3] = a6.value;
              }
            } else {
              if (!(a6 instanceof Be))
                return void console.error(`Invalid assignment to ${s5}. Line ${e6.line}`);
              if (t6.length !== a6.data.length)
                return void console.error(`Invalid assignment to ${t6} for variable ${s5}. Line ${e6.line}`);
              for (let r6 = 0; r6 < t6.length; ++r6) {
                const i8 = t6[r6];
                if ("x" === i8 || "r" === i8)
                  n4.data[0] = a6.data[r6];
                else if ("y" === i8 || "g" === i8) {
                  if (a6.data.length < 2)
                    return void console.error(`Invalid assignment to ${i8} for variable ${s5}. Line ${e6.line}`);
                  n4.data[1] = a6.data[r6];
                } else if ("z" === i8 || "b" === i8) {
                  if (a6.data.length < 3)
                    return void console.error(`Invalid assignment to ${i8} for variable ${s5}. Line ${e6.line}`);
                  n4.data[2] = a6.data[r6];
                } else {
                  if ("w" !== i8 && "a" !== i8)
                    return void console.error(`Invalid assignment to ${i8} for variable ${s5}. Line ${e6.line}`);
                  if (a6.data.length < 4)
                    return void console.error(`Invalid assignment to ${i8} for variable ${s5}. Line ${e6.line}`);
                  n4.data[3] = a6.data[r6];
                }
              }
            }
          }
        } else
          n4 instanceof Ve && a6 instanceof Ve ? n4.value = a6.value : n4 instanceof Be && a6 instanceof Be || n4 instanceof Fe && a6 instanceof Fe ? n4.data.set(a6.data) : console.error(`Invalid assignment to ${s5}. Line ${e6.line}`);
      else {
        const s6 = n4.getSubData(this, r5, t5);
        if (s6 instanceof Be && a6 instanceof Ve) {
          const t6 = s6.data, n5 = a6.value;
          if ("+=" === i7)
            for (let e7 = 0; e7 < t6.length; ++e7)
              t6[e7] += n5;
          else if ("-=" === i7)
            for (let e7 = 0; e7 < t6.length; ++e7)
              t6[e7] -= n5;
          else if ("*=" === i7)
            for (let e7 = 0; e7 < t6.length; ++e7)
              t6[e7] *= n5;
          else if ("/=" === i7)
            for (let e7 = 0; e7 < t6.length; ++e7)
              t6[e7] /= n5;
          else if ("%=" === i7)
            for (let e7 = 0; e7 < t6.length; ++e7)
              t6[e7] %= n5;
          else if ("&=" === i7)
            for (let e7 = 0; e7 < t6.length; ++e7)
              t6[e7] &= n5;
          else if ("|=" === i7)
            for (let e7 = 0; e7 < t6.length; ++e7)
              t6[e7] |= n5;
          else if ("^=" === i7)
            for (let e7 = 0; e7 < t6.length; ++e7)
              t6[e7] ^= n5;
          else if ("<<=" === i7)
            for (let e7 = 0; e7 < t6.length; ++e7)
              t6[e7] <<= n5;
          else if (">>=" === i7)
            for (let e7 = 0; e7 < t6.length; ++e7)
              t6[e7] >>= n5;
          else
            console.error(`Invalid operator ${i7}. Line ${e6.line}`);
        } else if (s6 instanceof Be && a6 instanceof Be) {
          const t6 = s6.data, n5 = a6.data;
          if (t6.length !== n5.length)
            return void console.error(`Vector length mismatch. Line ${e6.line}`);
          if ("+=" === i7)
            for (let e7 = 0; e7 < t6.length; ++e7)
              t6[e7] += n5[e7];
          else if ("-=" === i7)
            for (let e7 = 0; e7 < t6.length; ++e7)
              t6[e7] -= n5[e7];
          else if ("*=" === i7)
            for (let e7 = 0; e7 < t6.length; ++e7)
              t6[e7] *= n5[e7];
          else if ("/=" === i7)
            for (let e7 = 0; e7 < t6.length; ++e7)
              t6[e7] /= n5[e7];
          else if ("%=" === i7)
            for (let e7 = 0; e7 < t6.length; ++e7)
              t6[e7] %= n5[e7];
          else if ("&=" === i7)
            for (let e7 = 0; e7 < t6.length; ++e7)
              t6[e7] &= n5[e7];
          else if ("|=" === i7)
            for (let e7 = 0; e7 < t6.length; ++e7)
              t6[e7] |= n5[e7];
          else if ("^=" === i7)
            for (let e7 = 0; e7 < t6.length; ++e7)
              t6[e7] ^= n5[e7];
          else if ("<<=" === i7)
            for (let e7 = 0; e7 < t6.length; ++e7)
              t6[e7] <<= n5[e7];
          else if (">>=" === i7)
            for (let e7 = 0; e7 < t6.length; ++e7)
              t6[e7] >>= n5[e7];
          else
            console.error(`Invalid operator ${i7}. Line ${e6.line}`);
        } else {
          if (!(s6 instanceof Ve && a6 instanceof Ve))
            return void console.error(`Invalid type for ${e6.operator} operator. Line ${e6.line}`);
          "+=" === i7 ? s6.value += a6.value : "-=" === i7 ? s6.value -= a6.value : "*=" === i7 ? s6.value *= a6.value : "/=" === i7 ? s6.value /= a6.value : "%=" === i7 ? s6.value %= a6.value : "&=" === i7 ? s6.value &= a6.value : "|=" === i7 ? s6.value |= a6.value : "^=" === i7 ? s6.value ^= a6.value : "<<=" === i7 ? s6.value <<= a6.value : ">>=" === i7 ? s6.value >>= a6.value : console.error(`Invalid operator ${i7}. Line ${e6.line}`);
        }
        n4 instanceof Me && n4.setDataValue(this, s6, r5, t5);
      }
    }
    _function(e6, t5) {
      const n4 = new at(e6);
      t5.functions.set(e6.name, n4);
    }
    _const(e6, t5) {
      let n4 = null;
      null !== e6.value && (n4 = this.evalExpression(e6.value, t5)), t5.createVariable(e6.name, n4, e6);
    }
    _let(e6, t5) {
      let n4 = null;
      if (null !== e6.value) {
        if (n4 = this.evalExpression(e6.value, t5), null === n4)
          return void console.error(`Invalid value for variable ${e6.name}. Line ${e6.line}`);
        e6.value instanceof ve || (n4 = n4.clone());
      } else {
        const s5 = e6.type.name;
        if ("f32" === s5 || "i32" === s5 || "u32" === s5 || "bool" === s5 || "f16" === s5 || "vec2" === s5 || "vec3" === s5 || "vec4" === s5 || "vec2f" === s5 || "vec3f" === s5 || "vec4f" === s5 || "vec2i" === s5 || "vec3i" === s5 || "vec4i" === s5 || "vec2u" === s5 || "vec3u" === s5 || "vec4u" === s5 || "vec2h" === s5 || "vec3h" === s5 || "vec4h" === s5 || "vec2b" === s5 || "vec3b" === s5 || "vec4b" === s5 || "mat2x2" === s5 || "mat2x3" === s5 || "mat2x4" === s5 || "mat3x2" === s5 || "mat3x3" === s5 || "mat3x4" === s5 || "mat4x2" === s5 || "mat4x3" === s5 || "mat4x4" === s5 || "mat2x2f" === s5 || "mat2x3f" === s5 || "mat2x4f" === s5 || "mat3x2f" === s5 || "mat3x3f" === s5 || "mat3x4f" === s5 || "mat4x2f" === s5 || "mat4x3f" === s5 || "mat4x4f" === s5 || "mat2x2h" === s5 || "mat2x3h" === s5 || "mat2x4h" === s5 || "mat3x2h" === s5 || "mat3x3h" === s5 || "mat3x4h" === s5 || "mat4x2h" === s5 || "mat4x3h" === s5 || "mat4x4h" === s5 || "array" === s5) {
          const s6 = new fe(e6.type, []);
          n4 = this._evalCreate(s6, t5);
        }
      }
      t5.createVariable(e6.name, n4, e6);
    }
    _var(e6, t5) {
      let n4 = null;
      if (null !== e6.value) {
        if (n4 = this.evalExpression(e6.value, t5), null === n4)
          return void console.error(`Invalid value for variable ${e6.name}. Line ${e6.line}`);
        e6.value instanceof ve || (n4 = n4.clone());
      } else {
        if (null === e6.type)
          return void console.error(`Variable ${e6.name} has no type. Line ${e6.line}`);
        const s5 = e6.type.name;
        if ("f32" === s5 || "i32" === s5 || "u32" === s5 || "bool" === s5 || "f16" === s5 || "vec2" === s5 || "vec3" === s5 || "vec4" === s5 || "vec2f" === s5 || "vec3f" === s5 || "vec4f" === s5 || "vec2i" === s5 || "vec3i" === s5 || "vec4i" === s5 || "vec2u" === s5 || "vec3u" === s5 || "vec4u" === s5 || "vec2h" === s5 || "vec3h" === s5 || "vec4h" === s5 || "vec2b" === s5 || "vec3b" === s5 || "vec4b" === s5 || "mat2x2" === s5 || "mat2x3" === s5 || "mat2x4" === s5 || "mat3x2" === s5 || "mat3x3" === s5 || "mat3x4" === s5 || "mat4x2" === s5 || "mat4x3" === s5 || "mat4x4" === s5 || "mat2x2f" === s5 || "mat2x3f" === s5 || "mat2x4f" === s5 || "mat3x2f" === s5 || "mat3x3f" === s5 || "mat3x4f" === s5 || "mat4x2f" === s5 || "mat4x3f" === s5 || "mat4x4f" === s5 || "mat2x2h" === s5 || "mat2x3h" === s5 || "mat2x4h" === s5 || "mat3x2h" === s5 || "mat3x3h" === s5 || "mat3x4h" === s5 || "mat4x2h" === s5 || "mat4x3h" === s5 || "mat4x4h" === s5 || e6.type instanceof le || e6.type instanceof ae || e6.type instanceof ie) {
          const s6 = new fe(e6.type, []);
          n4 = this._evalCreate(s6, t5);
        }
      }
      t5.createVariable(e6.name, n4, e6);
    }
    _switch(e6, t5) {
      t5 = t5.clone();
      const n4 = this.evalExpression(e6.condition, t5);
      if (!(n4 instanceof Ve))
        return console.error(`Invalid if condition. Line ${e6.line}`), null;
      let s5 = null;
      for (const r5 of e6.cases)
        if (r5 instanceof Te)
          for (const a6 of r5.selectors) {
            if (a6 instanceof Ie) {
              s5 = r5;
              continue;
            }
            const i7 = this.evalExpression(a6, t5);
            if (!(i7 instanceof Ve))
              return console.error(`Invalid case selector. Line ${e6.line}`), null;
            if (i7.value === n4.value)
              return this._execStatements(r5.body, t5);
          }
        else
          r5 instanceof Se && (s5 = r5);
      return s5 ? this._execStatements(s5.body, t5) : null;
    }
    _if(e6, t5) {
      t5 = t5.clone();
      const n4 = this.evalExpression(e6.condition, t5);
      if (!(n4 instanceof Ve))
        return console.error(`Invalid if condition. Line ${e6.line}`), null;
      if (n4.value)
        return this._execStatements(e6.body, t5);
      for (const n5 of e6.elseif) {
        const s5 = this.evalExpression(n5.condition, t5);
        if (!(s5 instanceof Ve))
          return console.error(`Invalid if condition. Line ${e6.line}`), null;
        if (s5.value)
          return this._execStatements(n5.body, t5);
      }
      return e6.else ? this._execStatements(e6.else, t5) : null;
    }
    _getScalarValue(e6) {
      return e6 instanceof Ve ? e6.value : (console.error("Expected scalar value.", e6), 0);
    }
    _for(e6, t5) {
      for (t5 = t5.clone(), this.execStatement(e6.init, t5); this._getScalarValue(this.evalExpression(e6.condition, t5)); ) {
        const n4 = this._execStatements(e6.body, t5);
        if (n4 === ht._breakObj)
          break;
        if (null !== n4 && n4 !== ht._continueObj)
          return n4;
        this.execStatement(e6.increment, t5);
      }
      return null;
    }
    _loop(e6, t5) {
      for (t5 = t5.clone(); ; ) {
        const n4 = this._execStatements(e6.body, t5);
        if (n4 === ht._breakObj)
          break;
        if (n4 === ht._continueObj) {
          if (e6.continuing) {
            if (this._execStatements(e6.continuing.body, t5) === ht._breakObj)
              break;
          }
        } else if (null !== n4)
          return n4;
      }
      return null;
    }
    _while(e6, t5) {
      for (t5 = t5.clone(); this._getScalarValue(this.evalExpression(e6.condition, t5)); ) {
        const n4 = this._execStatements(e6.body, t5);
        if (n4 === ht._breakObj)
          break;
        if (n4 !== ht._continueObj && null !== n4)
          return n4;
      }
      return null;
    }
    _evalBitcast(e6, t5) {
      const n4 = this.evalExpression(e6.value, t5), s5 = e6.type;
      if (n4 instanceof Ve) {
        const e7 = et(n4.value, n4.typeInfo.name, s5.name);
        return new Ve(e7, this.getTypeInfo(s5));
      }
      if (n4 instanceof Be) {
        const t6 = n4.typeInfo.getTypeName();
        let r5 = "";
        if (t6.endsWith("f"))
          r5 = "f32";
        else if (t6.endsWith("i"))
          r5 = "i32";
        else if (t6.endsWith("u"))
          r5 = "u32";
        else if (t6.endsWith("b"))
          r5 = "bool";
        else {
          if (!t6.endsWith("h"))
            return console.error(`Unknown vector type ${t6}. Line ${e6.line}`), null;
          r5 = "f16";
        }
        const a6 = s5.getTypeName();
        let i7 = "";
        if (a6.endsWith("f"))
          i7 = "f32";
        else if (a6.endsWith("i"))
          i7 = "i32";
        else if (a6.endsWith("u"))
          i7 = "u32";
        else if (a6.endsWith("b"))
          i7 = "bool";
        else {
          if (!a6.endsWith("h"))
            return console.error(`Unknown vector type ${i7}. Line ${e6.line}`), null;
          i7 = "f16";
        }
        const o5 = function(e7, t7, n5) {
          if (t7 === n5)
            return e7;
          const s6 = new Array(e7.length);
          for (let r6 = 0; r6 < e7.length; r6++)
            s6[r6] = et(e7[r6], t7, n5);
          return s6;
        }(Array.from(n4.data), r5, i7);
        return new Be(o5, this.getTypeInfo(s5));
      }
      return console.error(`TODO: bitcast for ${n4.typeInfo.name}. Line ${e6.line}`), null;
    }
    _evalConst(e6, t5) {
      return t5.getVariableValue(e6.name).clone().getSubData(this, e6.postfix, t5);
    }
    _evalCreate(e6, t5) {
      var r5;
      if (e6 instanceof fe) {
        if (null === e6.type)
          return De.void;
        switch (e6.type.getTypeName()) {
          case "bool":
          case "i32":
          case "u32":
          case "f32":
          case "f16":
            return this._callConstructorValue(e6, t5);
          case "vec2":
          case "vec3":
          case "vec4":
          case "vec2f":
          case "vec3f":
          case "vec4f":
          case "vec2h":
          case "vec3h":
          case "vec4h":
          case "vec2i":
          case "vec3i":
          case "vec4i":
          case "vec2u":
          case "vec3u":
          case "vec4u":
          case "vec2b":
          case "vec3b":
          case "vec4b":
            return this._callConstructorVec(e6, t5);
          case "mat2x2":
          case "mat2x2f":
          case "mat2x2h":
          case "mat2x3":
          case "mat2x3f":
          case "mat2x3h":
          case "mat2x4":
          case "mat2x4f":
          case "mat2x4h":
          case "mat3x2":
          case "mat3x2f":
          case "mat3x2h":
          case "mat3x3":
          case "mat3x3f":
          case "mat3x3h":
          case "mat3x4":
          case "mat3x4f":
          case "mat3x4h":
          case "mat4x2":
          case "mat4x2f":
          case "mat4x2h":
          case "mat4x3":
          case "mat4x3f":
          case "mat4x3h":
          case "mat4x4":
          case "mat4x4f":
          case "mat4x4h":
            return this._callConstructorMatrix(e6, t5);
        }
      }
      const a6 = e6 instanceof fe ? e6.type.name : e6.name, i7 = e6 instanceof fe ? this.getTypeInfo(e6.type) : this.getTypeInfo(e6.name);
      if (null === i7)
        return console.error(`Unknown type ${a6}. Line ${e6.line}`), null;
      if (0 === i7.size)
        return null;
      const o5 = new Me(new ArrayBuffer(i7.size), i7, 0);
      if (i7 instanceof n) {
        if (e6.args)
          for (let n4 = 0; n4 < e6.args.length; ++n4) {
            const s5 = i7.members[n4], r6 = e6.args[n4], a7 = this.evalExpression(r6, t5);
            o5.setData(this, a7, s5.type, s5.offset, t5);
          }
      } else if (i7 instanceof s) {
        let n4 = 0;
        if (e6.args)
          for (let s5 = 0; s5 < e6.args.length; ++s5) {
            const a7 = e6.args[s5], l5 = this.evalExpression(a7, t5);
            null === i7.format && ("x32" === (null === (r5 = l5.typeInfo) || void 0 === r5 ? void 0 : r5.name) ? i7.format = this.getTypeInfo("i32") : i7.format = l5.typeInfo), o5.setData(this, l5, i7.format, n4, t5), n4 += i7.stride;
          }
      } else
        console.error(`Unknown type "${a6}". Line ${e6.line}`);
      return e6 instanceof fe ? o5.getSubData(this, e6.postfix, t5) : o5;
    }
    _evalLiteral(e6, t5) {
      const n4 = this.getTypeInfo(e6.type), s5 = n4.name;
      if ("x32" === s5 || "u32" === s5 || "f32" === s5 || "f16" === s5 || "i32" === s5 || "bool" === s5) {
        return new Ve(e6.scalarValue, n4);
      }
      return "vec2" === s5 || "vec3" === s5 || "vec4" === s5 || "vec2f" === s5 || "vec3f" === s5 || "vec4f" === s5 || "vec2h" === s5 || "vec3h" === s5 || "vec4h" === s5 || "vec2i" === s5 || "vec3i" === s5 || "vec4i" === s5 || "vec2u" === s5 || "vec3u" === s5 || "vec4u" === s5 ? this._callConstructorVec(e6, t5) : "mat2x2" === s5 || "mat2x3" === s5 || "mat2x4" === s5 || "mat3x2" === s5 || "mat3x3" === s5 || "mat3x4" === s5 || "mat4x2" === s5 || "mat4x3" === s5 || "mat4x4" === s5 || "mat2x2f" === s5 || "mat2x3f" === s5 || "mat2x4f" === s5 || "mat3x2f" === s5 || "mat3x3f" === s5 || "mat3x4f" === s5 || "mat4x2f" === s5 || "mat4x3f" === s5 || "mat4x4f" === s5 || "mat2x2h" === s5 || "mat2x3h" === s5 || "mat2x4h" === s5 || "mat3x2h" === s5 || "mat3x3h" === s5 || "mat3x4h" === s5 || "mat4x2h" === s5 || "mat4x3h" === s5 || "mat4x4h" === s5 ? this._callConstructorMatrix(e6, t5) : e6.value;
    }
    _evalVariable(e6, t5) {
      const n4 = t5.getVariableValue(e6.name);
      return null === n4 ? n4 : n4.getSubData(this, e6.postfix, t5);
    }
    _maxFormatTypeInfo(e6) {
      let t5 = e6[0];
      if ("f32" === t5.name)
        return t5;
      for (let n4 = 1; n4 < e6.length; ++n4) {
        const s5 = ht._priority.get(t5.name);
        ht._priority.get(e6[n4].name) < s5 && (t5 = e6[n4]);
      }
      return "x32" === t5.name ? this.getTypeInfo("i32") : t5;
    }
    _evalUnaryOp(e6, t5) {
      const n4 = this.evalExpression(e6.right, t5);
      if ("&" === e6.operator)
        return new Ne(n4);
      if ("*" === e6.operator)
        return n4 instanceof Ne ? n4.reference.getSubData(this, e6.postfix, t5) : (console.error(`Invalid dereference. Line ${e6.line}`), null);
      const s5 = n4 instanceof Ve ? n4.value : n4 instanceof Be ? Array.from(n4.data) : null;
      switch (e6.operator) {
        case "+": {
          if (ze(s5)) {
            const e8 = s5.map((e9, t7) => +e9);
            return new Be(e8, n4.typeInfo);
          }
          const e7 = s5, t6 = this._maxFormatTypeInfo([n4.typeInfo, n4.typeInfo]);
          return new Ve(+e7, t6);
        }
        case "-": {
          if (ze(s5)) {
            const e8 = s5.map((e9, t7) => -e9);
            return new Be(e8, n4.typeInfo);
          }
          const e7 = s5, t6 = this._maxFormatTypeInfo([n4.typeInfo, n4.typeInfo]);
          return new Ve(-e7, t6);
        }
        case "!": {
          if (ze(s5)) {
            const e8 = s5.map((e9, t7) => e9 ? 0 : 1);
            return new Be(e8, n4.typeInfo);
          }
          const e7 = s5, t6 = this._maxFormatTypeInfo([n4.typeInfo, n4.typeInfo]);
          return new Ve(e7 ? 0 : 1, t6);
        }
        case "~": {
          if (ze(s5)) {
            const e8 = s5.map((e9, t7) => ~e9);
            return new Be(e8, n4.typeInfo);
          }
          const e7 = s5, t6 = this._maxFormatTypeInfo([n4.typeInfo, n4.typeInfo]);
          return new Ve(~e7, t6);
        }
      }
      return console.error(`Invalid unary operator ${e6.operator}. Line ${e6.line}`), null;
    }
    _evalBinaryOp(e6, t5) {
      const n4 = this.evalExpression(e6.left, t5), s5 = this.evalExpression(e6.right, t5), r5 = n4 instanceof Ve ? n4.value : n4 instanceof Be || n4 instanceof Fe ? Array.from(n4.data) : null, a6 = s5 instanceof Ve ? s5.value : s5 instanceof Be || s5 instanceof Fe ? Array.from(s5.data) : null;
      switch (e6.operator) {
        case "+": {
          if (ze(r5) && ze(a6)) {
            const t7 = r5, s6 = a6;
            if (t7.length !== s6.length)
              return console.error(`Vector length mismatch. Line ${e6.line}.`), null;
            const i8 = t7.map((e7, t8) => e7 + s6[t8]);
            return new Be(i8, n4.typeInfo);
          }
          if (ze(r5)) {
            const e7 = a6, t7 = r5.map((t8, n5) => t8 + e7);
            return new Be(t7, n4.typeInfo);
          }
          if (ze(a6)) {
            const e7 = r5, t7 = a6.map((t8, n5) => e7 + t8);
            return new Be(t7, s5.typeInfo);
          }
          const t6 = r5, i7 = a6, o5 = this._maxFormatTypeInfo([n4.typeInfo, s5.typeInfo]);
          return new Ve(t6 + i7, o5);
        }
        case "-": {
          if (ze(r5) && ze(a6)) {
            const t7 = r5, s6 = a6;
            if (t7.length !== s6.length)
              return console.error(`Vector length mismatch. Line ${e6.line}.`), null;
            const i8 = t7.map((e7, t8) => e7 - s6[t8]);
            return new Be(i8, n4.typeInfo);
          }
          if (ze(r5)) {
            const e7 = a6, t7 = r5.map((t8, n5) => t8 - e7);
            return new Be(t7, n4.typeInfo);
          }
          if (ze(a6)) {
            const e7 = r5, t7 = a6.map((t8, n5) => e7 - t8);
            return new Be(t7, s5.typeInfo);
          }
          const t6 = r5, i7 = a6, o5 = this._maxFormatTypeInfo([n4.typeInfo, s5.typeInfo]);
          return new Ve(t6 - i7, o5);
        }
        case "*": {
          if (ze(r5) && ze(a6)) {
            const t7 = r5, i8 = a6;
            if (n4 instanceof Fe && s5 instanceof Fe) {
              const r6 = function(e7, t8, n5, s6) {
                if (void 0 === ut[t8.name] || void 0 === ut[s6.name])
                  return null;
                const r7 = ut[t8.name][0], a8 = ut[t8.name][1], i9 = ut[s6.name][0];
                if (r7 !== ut[s6.name][1])
                  return null;
                const o7 = new Array(i9 * a8);
                for (let t9 = 0; t9 < a8; t9++)
                  for (let s7 = 0; s7 < i9; s7++) {
                    let l6 = 0;
                    for (let i10 = 0; i10 < r7; i10++)
                      l6 += e7[i10 * a8 + t9] * n5[s7 * r7 + i10];
                    o7[t9 * i9 + s7] = l6;
                  }
                return o7;
              }(t7, n4.typeInfo, i8, s5.typeInfo);
              if (null === r6)
                return console.error(`Matrix multiplication failed. Line ${e6.line}.`), null;
              const a7 = ut[s5.typeInfo.name][0], o6 = ut[n4.typeInfo.name][1], l5 = this.getTypeInfo(`mat${a7}x${o6}f`);
              return new Fe(r6, l5);
            }
            if (n4 instanceof Fe && s5 instanceof Be) {
              const r6 = function(e7, t8, n5, s6) {
                if (void 0 === ut[t8.name] || void 0 === ct[s6.name])
                  return null;
                const r7 = ut[t8.name][0], a7 = ut[t8.name][1];
                if (r7 !== n5.length)
                  return null;
                const i9 = new Array(a7);
                for (let t9 = 0; t9 < a7; t9++) {
                  let s7 = 0;
                  for (let i10 = 0; i10 < r7; i10++)
                    s7 += e7[i10 * a7 + t9] * n5[i10];
                  i9[t9] = s7;
                }
                return i9;
              }(t7, n4.typeInfo, i8, s5.typeInfo);
              return null === r6 ? (console.error(`Matrix vector multiplication failed. Line ${e6.line}.`), null) : new Be(r6, s5.typeInfo);
            }
            if (n4 instanceof Be && s5 instanceof Fe) {
              const r6 = function(e7, t8, n5, s6) {
                if (void 0 === ct[t8.name] || void 0 === ut[s6.name])
                  return null;
                const r7 = ut[s6.name][0], a7 = ut[s6.name][1];
                if (a7 !== e7.length)
                  return null;
                const i9 = [];
                for (let t9 = 0; t9 < r7; t9++) {
                  let s7 = 0;
                  for (let i10 = 0; i10 < a7; i10++)
                    s7 += e7[i10] * n5[i10 * r7 + t9];
                  i9[t9] = s7;
                }
                return i9;
              }(t7, n4.typeInfo, i8, s5.typeInfo);
              return null === r6 ? (console.error(`Matrix vector multiplication failed. Line ${e6.line}.`), null) : new Be(r6, n4.typeInfo);
            }
            {
              if (t7.length !== i8.length)
                return console.error(`Vector length mismatch. Line ${e6.line}.`), null;
              const s6 = t7.map((e7, t8) => e7 * i8[t8]);
              return new Be(s6, n4.typeInfo);
            }
          }
          if (ze(r5)) {
            const e7 = a6, t7 = r5.map((t8, n5) => t8 * e7);
            return n4 instanceof Fe ? new Fe(t7, n4.typeInfo) : new Be(t7, n4.typeInfo);
          }
          if (ze(a6)) {
            const e7 = r5, t7 = a6.map((t8, n5) => e7 * t8);
            return s5 instanceof Fe ? new Fe(t7, s5.typeInfo) : new Be(t7, s5.typeInfo);
          }
          const t6 = r5, i7 = a6, o5 = this._maxFormatTypeInfo([n4.typeInfo, s5.typeInfo]);
          return new Ve(t6 * i7, o5);
        }
        case "%": {
          if (ze(r5) && ze(a6)) {
            const t7 = r5, s6 = a6;
            if (t7.length !== s6.length)
              return console.error(`Vector length mismatch. Line ${e6.line}.`), null;
            const i8 = t7.map((e7, t8) => e7 % s6[t8]);
            return new Be(i8, n4.typeInfo);
          }
          if (ze(r5)) {
            const e7 = a6, t7 = r5.map((t8, n5) => t8 % e7);
            return new Be(t7, n4.typeInfo);
          }
          if (ze(a6)) {
            const e7 = r5, t7 = a6.map((t8, n5) => e7 % t8);
            return new Be(t7, s5.typeInfo);
          }
          const t6 = r5, i7 = a6, o5 = this._maxFormatTypeInfo([n4.typeInfo, s5.typeInfo]);
          return new Ve(t6 % i7, o5);
        }
        case "/": {
          if (ze(r5) && ze(a6)) {
            const t7 = r5, s6 = a6;
            if (t7.length !== s6.length)
              return console.error(`Vector length mismatch. Line ${e6.line}.`), null;
            const i8 = t7.map((e7, t8) => e7 / s6[t8]);
            return new Be(i8, n4.typeInfo);
          }
          if (ze(r5)) {
            const e7 = a6, t7 = r5.map((t8, n5) => t8 / e7);
            return new Be(t7, n4.typeInfo);
          }
          if (ze(a6)) {
            const e7 = r5, t7 = a6.map((t8, n5) => e7 / t8);
            return new Be(t7, s5.typeInfo);
          }
          const t6 = r5, i7 = a6, o5 = this._maxFormatTypeInfo([n4.typeInfo, s5.typeInfo]);
          return new Ve(t6 / i7, o5);
        }
        case "&": {
          if (ze(r5) && ze(a6)) {
            const t7 = r5, s6 = a6;
            if (t7.length !== s6.length)
              return console.error(`Vector length mismatch. Line ${e6.line}.`), null;
            const i8 = t7.map((e7, t8) => e7 & s6[t8]);
            return new Be(i8, n4.typeInfo);
          }
          if (ze(r5)) {
            const e7 = a6, t7 = r5.map((t8, n5) => t8 & e7);
            return new Be(t7, n4.typeInfo);
          }
          if (ze(a6)) {
            const e7 = r5, t7 = a6.map((t8, n5) => e7 & t8);
            return new Be(t7, s5.typeInfo);
          }
          const t6 = r5, i7 = a6, o5 = this._maxFormatTypeInfo([n4.typeInfo, s5.typeInfo]);
          return new Ve(t6 & i7, o5);
        }
        case "|": {
          if (ze(r5) && ze(a6)) {
            const t7 = r5, s6 = a6;
            if (t7.length !== s6.length)
              return console.error(`Vector length mismatch. Line ${e6.line}.`), null;
            const i8 = t7.map((e7, t8) => e7 | s6[t8]);
            return new Be(i8, n4.typeInfo);
          }
          if (ze(r5)) {
            const e7 = a6, t7 = r5.map((t8, n5) => t8 | e7);
            return new Be(t7, n4.typeInfo);
          }
          if (ze(a6)) {
            const e7 = r5, t7 = a6.map((t8, n5) => e7 | t8);
            return new Be(t7, s5.typeInfo);
          }
          const t6 = r5, i7 = a6, o5 = this._maxFormatTypeInfo([n4.typeInfo, s5.typeInfo]);
          return new Ve(t6 | i7, o5);
        }
        case "^": {
          if (ze(r5) && ze(a6)) {
            const t7 = r5, s6 = a6;
            if (t7.length !== s6.length)
              return console.error(`Vector length mismatch. Line ${e6.line}.`), null;
            const i8 = t7.map((e7, t8) => e7 ^ s6[t8]);
            return new Be(i8, n4.typeInfo);
          }
          if (ze(r5)) {
            const e7 = a6, t7 = r5.map((t8, n5) => t8 ^ e7);
            return new Be(t7, n4.typeInfo);
          }
          if (ze(a6)) {
            const e7 = r5, t7 = a6.map((t8, n5) => e7 ^ t8);
            return new Be(t7, s5.typeInfo);
          }
          const t6 = r5, i7 = a6, o5 = this._maxFormatTypeInfo([n4.typeInfo, s5.typeInfo]);
          return new Ve(t6 ^ i7, o5);
        }
        case "<<": {
          if (ze(r5) && ze(a6)) {
            const t7 = r5, s6 = a6;
            if (t7.length !== s6.length)
              return console.error(`Vector length mismatch. Line ${e6.line}.`), null;
            const i8 = t7.map((e7, t8) => e7 << s6[t8]);
            return new Be(i8, n4.typeInfo);
          }
          if (ze(r5)) {
            const e7 = a6, t7 = r5.map((t8, n5) => t8 << e7);
            return new Be(t7, n4.typeInfo);
          }
          if (ze(a6)) {
            const e7 = r5, t7 = a6.map((t8, n5) => e7 << t8);
            return new Be(t7, s5.typeInfo);
          }
          const t6 = r5, i7 = a6, o5 = this._maxFormatTypeInfo([n4.typeInfo, s5.typeInfo]);
          return new Ve(t6 << i7, o5);
        }
        case ">>": {
          if (ze(r5) && ze(a6)) {
            const t7 = r5, s6 = a6;
            if (t7.length !== s6.length)
              return console.error(`Vector length mismatch. Line ${e6.line}.`), null;
            const i8 = t7.map((e7, t8) => e7 >> s6[t8]);
            return new Be(i8, n4.typeInfo);
          }
          if (ze(r5)) {
            const e7 = a6, t7 = r5.map((t8, n5) => t8 >> e7);
            return new Be(t7, n4.typeInfo);
          }
          if (ze(a6)) {
            const e7 = r5, t7 = a6.map((t8, n5) => e7 >> t8);
            return new Be(t7, s5.typeInfo);
          }
          const t6 = r5, i7 = a6, o5 = this._maxFormatTypeInfo([n4.typeInfo, s5.typeInfo]);
          return new Ve(t6 >> i7, o5);
        }
        case ">":
          if (ze(r5) && ze(a6)) {
            const t6 = r5, s6 = a6;
            if (t6.length !== s6.length)
              return console.error(`Vector length mismatch. Line ${e6.line}.`), null;
            const i7 = t6.map((e7, t7) => e7 > s6[t7] ? 1 : 0);
            return new Be(i7, n4.typeInfo);
          }
          if (ze(r5)) {
            const e7 = a6, t6 = r5.map((t7, n5) => t7 > e7 ? 1 : 0);
            return new Be(t6, n4.typeInfo);
          }
          if (ze(a6)) {
            const e7 = r5, t6 = a6.map((t7, n5) => e7 > t7 ? 1 : 0);
            return new Be(t6, s5.typeInfo);
          }
          return new Ve(r5 > a6 ? 1 : 0, this.getTypeInfo("bool"));
        case "<":
          if (ze(r5) && ze(a6)) {
            const t6 = r5, s6 = a6;
            if (t6.length !== s6.length)
              return console.error(`Vector length mismatch. Line ${e6.line}.`), null;
            const i7 = t6.map((e7, t7) => e7 < s6[t7] ? 1 : 0);
            return new Be(i7, n4.typeInfo);
          }
          if (ze(r5)) {
            const e7 = a6, t6 = r5.map((t7, n5) => t7 < e7 ? 1 : 0);
            return new Be(t6, n4.typeInfo);
          }
          if (ze(a6)) {
            const e7 = r5, t6 = a6.map((t7, n5) => e7 < t7 ? 1 : 0);
            return new Be(t6, s5.typeInfo);
          }
          return new Ve(r5 < a6 ? 1 : 0, this.getTypeInfo("bool"));
        case "==":
          if (ze(r5) && ze(a6)) {
            const t6 = r5, s6 = a6;
            if (t6.length !== s6.length)
              return console.error(`Vector length mismatch. Line ${e6.line}.`), null;
            const i7 = t6.map((e7, t7) => e7 === s6[t7] ? 1 : 0);
            return new Be(i7, n4.typeInfo);
          }
          if (ze(r5)) {
            const e7 = a6, t6 = r5.map((t7, n5) => t7 == e7 ? 1 : 0);
            return new Be(t6, n4.typeInfo);
          }
          if (ze(a6)) {
            const e7 = r5, t6 = a6.map((t7, n5) => e7 == t7 ? 1 : 0);
            return new Be(t6, s5.typeInfo);
          }
          return new Ve(r5 === a6 ? 1 : 0, this.getTypeInfo("bool"));
        case "!=":
          if (ze(r5) && ze(a6)) {
            const t6 = r5, s6 = a6;
            if (t6.length !== s6.length)
              return console.error(`Vector length mismatch. Line ${e6.line}.`), null;
            const i7 = t6.map((e7, t7) => e7 !== s6[t7] ? 1 : 0);
            return new Be(i7, n4.typeInfo);
          }
          if (ze(r5)) {
            const e7 = a6, t6 = r5.map((t7, n5) => t7 !== e7 ? 1 : 0);
            return new Be(t6, n4.typeInfo);
          }
          if (ze(a6)) {
            const e7 = r5, t6 = a6.map((t7, n5) => e7 !== t7 ? 1 : 0);
            return new Be(t6, s5.typeInfo);
          }
          return new Ve(r5 !== a6 ? 1 : 0, this.getTypeInfo("bool"));
        case ">=":
          if (ze(r5) && ze(a6)) {
            const t6 = r5, s6 = a6;
            if (t6.length !== s6.length)
              return console.error(`Vector length mismatch. Line ${e6.line}.`), null;
            const i7 = t6.map((e7, t7) => e7 >= s6[t7] ? 1 : 0);
            return new Be(i7, n4.typeInfo);
          }
          if (ze(r5)) {
            const e7 = a6, t6 = r5.map((t7, n5) => t7 >= e7 ? 1 : 0);
            return new Be(t6, n4.typeInfo);
          }
          if (ze(a6)) {
            const e7 = r5, t6 = a6.map((t7, n5) => e7 >= t7 ? 1 : 0);
            return new Be(t6, s5.typeInfo);
          }
          return new Ve(r5 >= a6 ? 1 : 0, this.getTypeInfo("bool"));
        case "<=":
          if (ze(r5) && ze(a6)) {
            const t6 = r5, s6 = a6;
            if (t6.length !== s6.length)
              return console.error(`Vector length mismatch. Line ${e6.line}.`), null;
            const i7 = t6.map((e7, t7) => e7 <= s6[t7] ? 1 : 0);
            return new Be(i7, n4.typeInfo);
          }
          if (ze(r5)) {
            const e7 = a6, t6 = r5.map((t7, n5) => t7 <= e7 ? 1 : 0);
            return new Be(t6, n4.typeInfo);
          }
          if (ze(a6)) {
            const e7 = r5, t6 = a6.map((t7, n5) => e7 <= t7 ? 1 : 0);
            return new Be(t6, s5.typeInfo);
          }
          return new Ve(r5 <= a6 ? 1 : 0, this.getTypeInfo("bool"));
        case "&&":
          if (ze(r5) && ze(a6)) {
            const t6 = r5, s6 = a6;
            if (t6.length !== s6.length)
              return console.error(`Vector length mismatch. Line ${e6.line}.`), null;
            const i7 = t6.map((e7, t7) => e7 && s6[t7] ? 1 : 0);
            return new Be(i7, n4.typeInfo);
          }
          if (ze(r5)) {
            const e7 = a6, t6 = r5.map((t7, n5) => t7 && e7 ? 1 : 0);
            return new Be(t6, n4.typeInfo);
          }
          if (ze(a6)) {
            const e7 = r5, t6 = a6.map((t7, n5) => e7 && t7 ? 1 : 0);
            return new Be(t6, s5.typeInfo);
          }
          return new Ve(r5 && a6 ? 1 : 0, this.getTypeInfo("bool"));
        case "||":
          if (ze(r5) && ze(a6)) {
            const t6 = r5, s6 = a6;
            if (t6.length !== s6.length)
              return console.error(`Vector length mismatch. Line ${e6.line}.`), null;
            const i7 = t6.map((e7, t7) => e7 || s6[t7] ? 1 : 0);
            return new Be(i7, n4.typeInfo);
          }
          if (ze(r5)) {
            const e7 = a6, t6 = r5.map((t7, n5) => t7 || e7 ? 1 : 0);
            return new Be(t6, n4.typeInfo);
          }
          if (ze(a6)) {
            const e7 = r5, t6 = a6.map((t7, n5) => e7 || t7 ? 1 : 0);
            return new Be(t6, s5.typeInfo);
          }
          return new Ve(r5 || a6 ? 1 : 0, this.getTypeInfo("bool"));
      }
      return console.error(`Unknown operator ${e6.operator}. Line ${e6.line}`), null;
    }
    _evalCall(e6, t5) {
      if (null !== e6.cachedReturnValue)
        return e6.cachedReturnValue;
      const n4 = t5.clone();
      n4.currentFunctionName = e6.name;
      const s5 = t5.getFunction(e6.name);
      if (!s5) {
        if (e6.isBuiltin)
          return this._callBuiltinFunction(e6, n4);
        return this.getTypeInfo(e6.name) ? this._evalCreate(e6, t5) : (console.error(`Unknown function "${e6.name}". Line ${e6.line}`), null);
      }
      for (let t6 = 0; t6 < s5.node.args.length; ++t6) {
        const r5 = s5.node.args[t6], a6 = this.evalExpression(e6.args[t6], n4);
        n4.createVariable(r5.name, a6, r5);
      }
      return this._execStatements(s5.node.body, n4);
    }
    _callBuiltinFunction(e6, t5) {
      switch (e6.name) {
        case "all":
          return this.builtins.All(e6, t5);
        case "any":
          return this.builtins.Any(e6, t5);
        case "select":
          return this.builtins.Select(e6, t5);
        case "arrayLength":
          return this.builtins.ArrayLength(e6, t5);
        case "abs":
          return this.builtins.Abs(e6, t5);
        case "acos":
          return this.builtins.Acos(e6, t5);
        case "acosh":
          return this.builtins.Acosh(e6, t5);
        case "asin":
          return this.builtins.Asin(e6, t5);
        case "asinh":
          return this.builtins.Asinh(e6, t5);
        case "atan":
          return this.builtins.Atan(e6, t5);
        case "atanh":
          return this.builtins.Atanh(e6, t5);
        case "atan2":
          return this.builtins.Atan2(e6, t5);
        case "ceil":
          return this.builtins.Ceil(e6, t5);
        case "clamp":
          return this.builtins.Clamp(e6, t5);
        case "cos":
          return this.builtins.Cos(e6, t5);
        case "cosh":
          return this.builtins.Cosh(e6, t5);
        case "countLeadingZeros":
          return this.builtins.CountLeadingZeros(e6, t5);
        case "countOneBits":
          return this.builtins.CountOneBits(e6, t5);
        case "countTrailingZeros":
          return this.builtins.CountTrailingZeros(e6, t5);
        case "cross":
          return this.builtins.Cross(e6, t5);
        case "degrees":
          return this.builtins.Degrees(e6, t5);
        case "determinant":
          return this.builtins.Determinant(e6, t5);
        case "distance":
          return this.builtins.Distance(e6, t5);
        case "dot":
          return this.builtins.Dot(e6, t5);
        case "dot4U8Packed":
          return this.builtins.Dot4U8Packed(e6, t5);
        case "dot4I8Packed":
          return this.builtins.Dot4I8Packed(e6, t5);
        case "exp":
          return this.builtins.Exp(e6, t5);
        case "exp2":
          return this.builtins.Exp2(e6, t5);
        case "extractBits":
          return this.builtins.ExtractBits(e6, t5);
        case "faceForward":
          return this.builtins.FaceForward(e6, t5);
        case "firstLeadingBit":
          return this.builtins.FirstLeadingBit(e6, t5);
        case "firstTrailingBit":
          return this.builtins.FirstTrailingBit(e6, t5);
        case "floor":
          return this.builtins.Floor(e6, t5);
        case "fma":
          return this.builtins.Fma(e6, t5);
        case "fract":
          return this.builtins.Fract(e6, t5);
        case "frexp":
          return this.builtins.Frexp(e6, t5);
        case "insertBits":
          return this.builtins.InsertBits(e6, t5);
        case "inverseSqrt":
          return this.builtins.InverseSqrt(e6, t5);
        case "ldexp":
          return this.builtins.Ldexp(e6, t5);
        case "length":
          return this.builtins.Length(e6, t5);
        case "log":
          return this.builtins.Log(e6, t5);
        case "log2":
          return this.builtins.Log2(e6, t5);
        case "max":
          return this.builtins.Max(e6, t5);
        case "min":
          return this.builtins.Min(e6, t5);
        case "mix":
          return this.builtins.Mix(e6, t5);
        case "modf":
          return this.builtins.Modf(e6, t5);
        case "normalize":
          return this.builtins.Normalize(e6, t5);
        case "pow":
          return this.builtins.Pow(e6, t5);
        case "quantizeToF16":
          return this.builtins.QuantizeToF16(e6, t5);
        case "radians":
          return this.builtins.Radians(e6, t5);
        case "reflect":
          return this.builtins.Reflect(e6, t5);
        case "refract":
          return this.builtins.Refract(e6, t5);
        case "reverseBits":
          return this.builtins.ReverseBits(e6, t5);
        case "round":
          return this.builtins.Round(e6, t5);
        case "saturate":
          return this.builtins.Saturate(e6, t5);
        case "sign":
          return this.builtins.Sign(e6, t5);
        case "sin":
          return this.builtins.Sin(e6, t5);
        case "sinh":
          return this.builtins.Sinh(e6, t5);
        case "smoothStep":
          return this.builtins.SmoothStep(e6, t5);
        case "sqrt":
          return this.builtins.Sqrt(e6, t5);
        case "step":
          return this.builtins.Step(e6, t5);
        case "tan":
          return this.builtins.Tan(e6, t5);
        case "tanh":
          return this.builtins.Tanh(e6, t5);
        case "transpose":
          return this.builtins.Transpose(e6, t5);
        case "trunc":
          return this.builtins.Trunc(e6, t5);
        case "dpdx":
          return this.builtins.Dpdx(e6, t5);
        case "dpdxCoarse":
          return this.builtins.DpdxCoarse(e6, t5);
        case "dpdxFine":
          return this.builtins.DpdxFine(e6, t5);
        case "dpdy":
          return this.builtins.Dpdy(e6, t5);
        case "dpdyCoarse":
          return this.builtins.DpdyCoarse(e6, t5);
        case "dpdyFine":
          return this.builtins.DpdyFine(e6, t5);
        case "fwidth":
          return this.builtins.Fwidth(e6, t5);
        case "fwidthCoarse":
          return this.builtins.FwidthCoarse(e6, t5);
        case "fwidthFine":
          return this.builtins.FwidthFine(e6, t5);
        case "textureDimensions":
          return this.builtins.TextureDimensions(e6, t5);
        case "textureGather":
          return this.builtins.TextureGather(e6, t5);
        case "textureGatherCompare":
          return this.builtins.TextureGatherCompare(e6, t5);
        case "textureLoad":
          return this.builtins.TextureLoad(e6, t5);
        case "textureNumLayers":
          return this.builtins.TextureNumLayers(e6, t5);
        case "textureNumLevels":
          return this.builtins.TextureNumLevels(e6, t5);
        case "textureNumSamples":
          return this.builtins.TextureNumSamples(e6, t5);
        case "textureSample":
          return this.builtins.TextureSample(e6, t5);
        case "textureSampleBias":
          return this.builtins.TextureSampleBias(e6, t5);
        case "textureSampleCompare":
          return this.builtins.TextureSampleCompare(e6, t5);
        case "textureSampleCompareLevel":
          return this.builtins.TextureSampleCompareLevel(e6, t5);
        case "textureSampleGrad":
          return this.builtins.TextureSampleGrad(e6, t5);
        case "textureSampleLevel":
          return this.builtins.TextureSampleLevel(e6, t5);
        case "textureSampleBaseClampToEdge":
          return this.builtins.TextureSampleBaseClampToEdge(e6, t5);
        case "textureStore":
          return this.builtins.TextureStore(e6, t5);
        case "atomicLoad":
          return this.builtins.AtomicLoad(e6, t5);
        case "atomicStore":
          return this.builtins.AtomicStore(e6, t5);
        case "atomicAdd":
          return this.builtins.AtomicAdd(e6, t5);
        case "atomicSub":
          return this.builtins.AtomicSub(e6, t5);
        case "atomicMax":
          return this.builtins.AtomicMax(e6, t5);
        case "atomicMin":
          return this.builtins.AtomicMin(e6, t5);
        case "atomicAnd":
          return this.builtins.AtomicAnd(e6, t5);
        case "atomicOr":
          return this.builtins.AtomicOr(e6, t5);
        case "atomicXor":
          return this.builtins.AtomicXor(e6, t5);
        case "atomicExchange":
          return this.builtins.AtomicExchange(e6, t5);
        case "atomicCompareExchangeWeak":
          return this.builtins.AtomicCompareExchangeWeak(e6, t5);
        case "pack4x8snorm":
          return this.builtins.Pack4x8snorm(e6, t5);
        case "pack4x8unorm":
          return this.builtins.Pack4x8unorm(e6, t5);
        case "pack4xI8":
          return this.builtins.Pack4xI8(e6, t5);
        case "pack4xU8":
          return this.builtins.Pack4xU8(e6, t5);
        case "pack4x8Clamp":
          return this.builtins.Pack4x8Clamp(e6, t5);
        case "pack4xU8Clamp":
          return this.builtins.Pack4xU8Clamp(e6, t5);
        case "pack2x16snorm":
          return this.builtins.Pack2x16snorm(e6, t5);
        case "pack2x16unorm":
          return this.builtins.Pack2x16unorm(e6, t5);
        case "pack2x16float":
          return this.builtins.Pack2x16float(e6, t5);
        case "unpack4x8snorm":
          return this.builtins.Unpack4x8snorm(e6, t5);
        case "unpack4x8unorm":
          return this.builtins.Unpack4x8unorm(e6, t5);
        case "unpack4xI8":
          return this.builtins.Unpack4xI8(e6, t5);
        case "unpack4xU8":
          return this.builtins.Unpack4xU8(e6, t5);
        case "unpack2x16snorm":
          return this.builtins.Unpack2x16snorm(e6, t5);
        case "unpack2x16unorm":
          return this.builtins.Unpack2x16unorm(e6, t5);
        case "unpack2x16float":
          return this.builtins.Unpack2x16float(e6, t5);
        case "storageBarrier":
          return this.builtins.StorageBarrier(e6, t5);
        case "textureBarrier":
          return this.builtins.TextureBarrier(e6, t5);
        case "workgroupBarrier":
          return this.builtins.WorkgroupBarrier(e6, t5);
        case "workgroupUniformLoad":
          return this.builtins.WorkgroupUniformLoad(e6, t5);
        case "subgroupAdd":
          return this.builtins.SubgroupAdd(e6, t5);
        case "subgroupExclusiveAdd":
          return this.builtins.SubgroupExclusiveAdd(e6, t5);
        case "subgroupInclusiveAdd":
          return this.builtins.SubgroupInclusiveAdd(e6, t5);
        case "subgroupAll":
          return this.builtins.SubgroupAll(e6, t5);
        case "subgroupAnd":
          return this.builtins.SubgroupAnd(e6, t5);
        case "subgroupAny":
          return this.builtins.SubgroupAny(e6, t5);
        case "subgroupBallot":
          return this.builtins.SubgroupBallot(e6, t5);
        case "subgroupBroadcast":
          return this.builtins.SubgroupBroadcast(e6, t5);
        case "subgroupBroadcastFirst":
          return this.builtins.SubgroupBroadcastFirst(e6, t5);
        case "subgroupElect":
          return this.builtins.SubgroupElect(e6, t5);
        case "subgroupMax":
          return this.builtins.SubgroupMax(e6, t5);
        case "subgroupMin":
          return this.builtins.SubgroupMin(e6, t5);
        case "subgroupMul":
          return this.builtins.SubgroupMul(e6, t5);
        case "subgroupExclusiveMul":
          return this.builtins.SubgroupExclusiveMul(e6, t5);
        case "subgroupInclusiveMul":
          return this.builtins.SubgroupInclusiveMul(e6, t5);
        case "subgroupOr":
          return this.builtins.SubgroupOr(e6, t5);
        case "subgroupShuffle":
          return this.builtins.SubgroupShuffle(e6, t5);
        case "subgroupShuffleDown":
          return this.builtins.SubgroupShuffleDown(e6, t5);
        case "subgroupShuffleUp":
          return this.builtins.SubgroupShuffleUp(e6, t5);
        case "subgroupShuffleXor":
          return this.builtins.SubgroupShuffleXor(e6, t5);
        case "subgroupXor":
          return this.builtins.SubgroupXor(e6, t5);
        case "quadBroadcast":
          return this.builtins.QuadBroadcast(e6, t5);
        case "quadSwapDiagonal":
          return this.builtins.QuadSwapDiagonal(e6, t5);
        case "quadSwapX":
          return this.builtins.QuadSwapX(e6, t5);
        case "quadSwapY":
          return this.builtins.QuadSwapY(e6, t5);
      }
      const n4 = t5.getFunction(e6.name);
      if (n4) {
        const s5 = t5.clone();
        for (let t6 = 0; t6 < n4.node.args.length; ++t6) {
          const r5 = n4.node.args[t6], a6 = this.evalExpression(e6.args[t6], s5);
          s5.setVariable(r5.name, a6, r5);
        }
        return this._execStatements(n4.node.body, s5);
      }
      return null;
    }
    _callConstructorValue(e6, t5) {
      if (!e6.args || 0 === e6.args.length)
        return new Ve(0, this.getTypeInfo(e6.type));
      const n4 = this.evalExpression(e6.args[0], t5);
      return n4.typeInfo = this.getTypeInfo(e6.type), n4.getSubData(this, e6.postfix, t5).clone();
    }
    _callConstructorVec(e6, t5) {
      const n4 = this.getTypeInfo(e6.type), s5 = e6.type.getTypeName(), r5 = ct[s5];
      if (void 0 === r5)
        return console.error(`Invalid vec constructor ${s5}. Line ${e6.line}`), null;
      const a6 = [];
      if (e6 instanceof _e)
        if (e6.isVector) {
          const t6 = e6.vectorValue;
          for (const e7 of t6)
            a6.push(e7);
        } else
          a6.push(e6.scalarValue);
      else if (e6.args)
        for (const n5 of e6.args) {
          const e7 = this.evalExpression(n5, t5);
          if (e7 instanceof Be) {
            const t6 = e7.data;
            for (let e8 = 0; e8 < t6.length; ++e8) {
              let n6 = t6[e8];
              a6.push(n6);
            }
          } else if (e7 instanceof Ve) {
            let t6 = e7.value;
            a6.push(t6);
          }
        }
      if (e6.type instanceof ie && null === e6.type.format && (e6.type.format = ie.f32), 0 === a6.length) {
        const s6 = new Array(r5).fill(0);
        return new Be(s6, n4).getSubData(this, e6.postfix, t5);
      }
      if (1 === a6.length)
        for (; a6.length < r5; )
          a6.push(a6[0]);
      if (a6.length < r5)
        return console.error(`Invalid vec constructor. Line ${e6.line}`), null;
      return new Be(a6.length > r5 ? a6.slice(0, r5) : a6, n4).getSubData(this, e6.postfix, t5);
    }
    _callConstructorMatrix(e6, t5) {
      const n4 = this.getTypeInfo(e6.type), s5 = e6.type.getTypeName(), a6 = ut[s5];
      if (void 0 === a6)
        return console.error(`Invalid matrix constructor ${s5}. Line ${e6.line}`), null;
      const i7 = [];
      if (e6 instanceof _e)
        if (e6.isVector) {
          const t6 = e6.vectorValue;
          for (const e7 of t6)
            i7.push(e7);
        } else
          i7.push(e6.scalarValue);
      else if (e6.args)
        for (const n5 of e6.args) {
          const e7 = this.evalExpression(n5, t5);
          e7 instanceof Be ? i7.push(...e7.data) : e7 instanceof Ve ? i7.push(e7.value) : e7 instanceof Fe && i7.push(...e7.data);
        }
      if (n4 instanceof r && null === n4.format && (n4.format = this.getTypeInfo("f32")), 0 === i7.length) {
        const s6 = new Array(a6[2]).fill(0);
        return new Fe(s6, n4).getSubData(this, e6.postfix, t5);
      }
      return i7.length !== a6[2] ? (console.error(`Invalid matrix constructor. Line ${e6.line}`), null) : new Fe(i7, n4).getSubData(this, e6.postfix, t5);
    }
  };
  ht._breakObj = new Ce(new e("BREAK", null), null), ht._continueObj = new Ce(new e("CONTINUE", null), null), ht._priority = /* @__PURE__ */ new Map([["f32", 0], ["f16", 1], ["u32", 2], ["i32", 3], ["x32", 3]]);
  var ft = class {
    constructor() {
      this.constants = /* @__PURE__ */ new Map(), this.aliases = /* @__PURE__ */ new Map(), this.structs = /* @__PURE__ */ new Map();
    }
  };
  var pt = class {
    constructor() {
      this._tokens = [], this._current = 0, this._currentLine = 1, this._deferArrayCountEval = [], this._currentLoop = [], this._context = new ft(), this._exec = new ht(), this._forwardTypeCount = 0;
    }
    parse(e6) {
      this._initialize(e6), this._deferArrayCountEval.length = 0;
      const t5 = [];
      for (; !this._isAtEnd(); ) {
        const e7 = this._global_decl_or_directive();
        if (!e7)
          break;
        t5.push(e7);
      }
      if (this._deferArrayCountEval.length > 0) {
        for (const e7 of this._deferArrayCountEval) {
          const t6 = e7.arrayType, n4 = e7.countNode;
          if (n4 instanceof de) {
            const e8 = n4.name, s5 = this._context.constants.get(e8);
            if (s5)
              try {
                const e9 = s5.constEvaluate(this._exec);
                t6.count = e9;
              } catch (e9) {
              }
          }
        }
        this._deferArrayCountEval.length = 0;
      }
      if (this._forwardTypeCount > 0)
        for (const e7 of t5)
          e7.search((e8) => {
            e8 instanceof $e || e8 instanceof oe ? e8.type = this._forwardType(e8.type) : e8 instanceof le ? e8.format = this._forwardType(e8.format) : e8 instanceof O || e8 instanceof F || e8 instanceof M ? e8.type = this._forwardType(e8.type) : e8 instanceof L ? e8.returnType = this._forwardType(e8.returnType) : e8 instanceof Ae && (e8.type = this._forwardType(e8.type));
          });
      return t5;
    }
    _forwardType(e6) {
      if (e6 instanceof re) {
        const t5 = this._getType(e6.name);
        if (t5)
          return t5;
      } else
        e6 instanceof oe ? e6.type = this._forwardType(e6.type) : e6 instanceof le && (e6.format = this._forwardType(e6.format));
      return e6;
    }
    _initialize(e6) {
      if (e6)
        if ("string" == typeof e6) {
          const t5 = new He(e6);
          this._tokens = t5.scanTokens();
        } else
          this._tokens = e6;
      else
        this._tokens = [];
      this._current = 0;
    }
    _updateNode(e6, t5) {
      return e6.line = null != t5 ? t5 : this._currentLine, e6;
    }
    _error(e6, t5) {
      return { token: e6, message: t5, toString: () => `${t5}` };
    }
    _isAtEnd() {
      return this._current >= this._tokens.length || this._peek().type == We.eof;
    }
    _match(e6) {
      if (e6 instanceof Pe)
        return !!this._check(e6) && (this._advance(), true);
      for (let t5 = 0, n4 = e6.length; t5 < n4; ++t5) {
        const n5 = e6[t5];
        if (this._check(n5))
          return this._advance(), true;
      }
      return false;
    }
    _consume(e6, t5) {
      if (this._check(e6))
        return this._advance();
      throw this._error(this._peek(), `${t5}. Line:${this._currentLine}`);
    }
    _check(e6) {
      if (this._isAtEnd())
        return false;
      const t5 = this._peek();
      if (e6 instanceof Array) {
        const n4 = t5.type;
        let s5 = false;
        for (const t6 of e6) {
          if (n4 === t6)
            return true;
          t6 === We.tokens.name && (s5 = true);
        }
        if (s5) {
          const e7 = We.tokens.name.rule.exec(t5.lexeme);
          if (e7 && 0 == e7.index && e7[0] == t5.lexeme)
            return true;
        }
        return false;
      }
      if (t5.type === e6)
        return true;
      if (e6 === We.tokens.name) {
        const e7 = We.tokens.name.rule.exec(t5.lexeme);
        return e7 && 0 == e7.index && e7[0] == t5.lexeme;
      }
      return false;
    }
    _advance() {
      var e6, t5;
      return this._currentLine = null !== (t5 = null === (e6 = this._peek()) || void 0 === e6 ? void 0 : e6.line) && void 0 !== t5 ? t5 : -1, this._isAtEnd() || this._current++, this._previous();
    }
    _peek() {
      return this._tokens[this._current];
    }
    _previous() {
      return this._tokens[this._current - 1];
    }
    _global_decl_or_directive() {
      for (; this._match(We.tokens.semicolon) && !this._isAtEnd(); )
        ;
      if (this._match(We.keywords.alias)) {
        const e7 = this._type_alias();
        return this._consume(We.tokens.semicolon, "Expected ';'"), this._exec.reflection.updateAST([e7]), e7;
      }
      if (this._match(We.keywords.diagnostic)) {
        const e7 = this._diagnostic();
        return this._consume(We.tokens.semicolon, "Expected ';'"), this._exec.reflection.updateAST([e7]), e7;
      }
      if (this._match(We.keywords.requires)) {
        const e7 = this._requires_directive();
        return this._consume(We.tokens.semicolon, "Expected ';'"), this._exec.reflection.updateAST([e7]), e7;
      }
      if (this._match(We.keywords.enable)) {
        const e7 = this._enable_directive();
        return this._consume(We.tokens.semicolon, "Expected ';'"), this._exec.reflection.updateAST([e7]), e7;
      }
      const e6 = this._attribute();
      if (this._check(We.keywords.var)) {
        const t5 = this._global_variable_decl();
        return null != t5 && (t5.attributes = e6), this._consume(We.tokens.semicolon, "Expected ';'."), this._exec.reflection.updateAST([t5]), t5;
      }
      if (this._check(We.keywords.override)) {
        const t5 = this._override_variable_decl();
        return null != t5 && (t5.attributes = e6), this._consume(We.tokens.semicolon, "Expected ';'."), this._exec.reflection.updateAST([t5]), t5;
      }
      if (this._check(We.keywords.let)) {
        const t5 = this._global_let_decl();
        return null != t5 && (t5.attributes = e6), this._consume(We.tokens.semicolon, "Expected ';'."), this._exec.reflection.updateAST([t5]), t5;
      }
      if (this._check(We.keywords.const)) {
        const t5 = this._global_const_decl();
        return null != t5 && (t5.attributes = e6), this._consume(We.tokens.semicolon, "Expected ';'."), this._exec.reflection.updateAST([t5]), t5;
      }
      if (this._check(We.keywords.struct)) {
        const t5 = this._struct_decl();
        return null != t5 && (t5.attributes = e6), this._exec.reflection.updateAST([t5]), t5;
      }
      if (this._check(We.keywords.fn)) {
        const t5 = this._function_decl();
        return null != t5 && (t5.attributes = e6), this._exec.reflection.updateAST([t5]), t5;
      }
      return null;
    }
    _function_decl() {
      if (!this._match(We.keywords.fn))
        return null;
      const e6 = this._currentLine, t5 = this._consume(We.tokens.ident, "Expected function name.").toString();
      this._consume(We.tokens.paren_left, "Expected '(' for function arguments.");
      const n4 = [];
      if (!this._check(We.tokens.paren_right))
        do {
          if (this._check(We.tokens.paren_right))
            break;
          const e7 = this._attribute(), t6 = this._consume(We.tokens.name, "Expected argument name.").toString();
          this._consume(We.tokens.colon, "Expected ':' for argument type.");
          const s6 = this._attribute(), r6 = this._type_decl();
          null != r6 && (r6.attributes = s6, n4.push(this._updateNode(new Ae(t6, r6, e7))));
        } while (this._match(We.tokens.comma));
      this._consume(We.tokens.paren_right, "Expected ')' after function arguments.");
      let s5 = null;
      if (this._match(We.tokens.arrow)) {
        const e7 = this._attribute();
        s5 = this._type_decl(), null != s5 && (s5.attributes = e7);
      }
      const r5 = this._compound_statement(), a6 = this._currentLine;
      return this._updateNode(new L(t5, n4, s5, r5, e6, a6), e6);
    }
    _compound_statement() {
      const e6 = [];
      for (this._consume(We.tokens.brace_left, "Expected '{' for block."); !this._check(We.tokens.brace_right); ) {
        const t5 = this._statement();
        null !== t5 && e6.push(t5);
      }
      return this._consume(We.tokens.brace_right, "Expected '}' for block."), e6;
    }
    _statement() {
      for (; this._match(We.tokens.semicolon) && !this._isAtEnd(); )
        ;
      if (this._check(We.tokens.attr) && this._attribute(), this._check(We.keywords.if))
        return this._if_statement();
      if (this._check(We.keywords.switch))
        return this._switch_statement();
      if (this._check(We.keywords.loop))
        return this._loop_statement();
      if (this._check(We.keywords.for))
        return this._for_statement();
      if (this._check(We.keywords.while))
        return this._while_statement();
      if (this._check(We.keywords.continuing))
        return this._continuing_statement();
      if (this._check(We.keywords.static_assert))
        return this._static_assert_statement();
      if (this._check(We.tokens.brace_left))
        return this._compound_statement();
      let e6 = null;
      if (this._check(We.keywords.return))
        e6 = this._return_statement();
      else if (this._check([We.keywords.var, We.keywords.let, We.keywords.const]))
        e6 = this._variable_statement();
      else if (this._match(We.keywords.discard))
        e6 = this._updateNode(new ee());
      else if (this._match(We.keywords.break)) {
        const t5 = this._updateNode(new te());
        if (this._currentLoop.length > 0) {
          const e7 = this._currentLoop[this._currentLoop.length - 1];
          t5.loopId = e7.id;
        }
        e6 = t5, this._check(We.keywords.if) && (this._advance(), t5.condition = this._optional_paren_expression());
      } else if (this._match(We.keywords.continue)) {
        const t5 = this._updateNode(new ne());
        if (!(this._currentLoop.length > 0))
          throw this._error(this._peek(), `Continue statement must be inside a loop. Line: ${t5.line}`);
        {
          const e7 = this._currentLoop[this._currentLoop.length - 1];
          t5.loopId = e7.id;
        }
        e6 = t5;
      } else
        e6 = this._increment_decrement_statement() || this._func_call_statement() || this._assignment_statement();
      return null != e6 && this._consume(We.tokens.semicolon, "Expected ';' after statement."), e6;
    }
    _static_assert_statement() {
      if (!this._match(We.keywords.static_assert))
        return null;
      const e6 = this._currentLine, t5 = this._optional_paren_expression();
      return this._updateNode(new C(t5), e6);
    }
    _while_statement() {
      if (!this._match(We.keywords.while))
        return null;
      const e6 = this._updateNode(new D(null, null));
      return this._currentLoop.push(e6), e6.condition = this._optional_paren_expression(), this._check(We.tokens.attr) && this._attribute(), e6.body = this._compound_statement(), this._currentLoop.pop(), e6;
    }
    _continuing_statement() {
      const e6 = this._currentLoop.length > 0 ? this._currentLoop[this._currentLoop.length - 1].id : -1;
      if (!this._match(We.keywords.continuing))
        return null;
      const t5 = this._currentLine, n4 = this._compound_statement();
      return this._updateNode(new N(n4, e6), t5);
    }
    _for_statement() {
      if (!this._match(We.keywords.for))
        return null;
      this._consume(We.tokens.paren_left, "Expected '('.");
      const e6 = this._updateNode(new V(null, null, null, null));
      return this._currentLoop.push(e6), e6.init = this._check(We.tokens.semicolon) ? null : this._for_init(), this._consume(We.tokens.semicolon, "Expected ';'."), e6.condition = this._check(We.tokens.semicolon) ? null : this._short_circuit_or_expression(), this._consume(We.tokens.semicolon, "Expected ';'."), e6.increment = this._check(We.tokens.paren_right) ? null : this._for_increment(), this._consume(We.tokens.paren_right, "Expected ')'."), this._check(We.tokens.attr) && this._attribute(), e6.body = this._compound_statement(), this._currentLoop.pop(), e6;
    }
    _for_init() {
      return this._variable_statement() || this._func_call_statement() || this._assignment_statement();
    }
    _for_increment() {
      return this._func_call_statement() || this._increment_decrement_statement() || this._assignment_statement();
    }
    _variable_statement() {
      if (this._check(We.keywords.var)) {
        const e6 = this._variable_decl();
        if (null === e6)
          throw this._error(this._peek(), "Variable declaration expected.");
        let t5 = null;
        return this._match(We.tokens.equal) && (t5 = this._short_circuit_or_expression()), this._updateNode(new O(e6.name, e6.type, e6.storage, e6.access, t5), e6.line);
      }
      if (this._match(We.keywords.let)) {
        const e6 = this._currentLine, t5 = this._consume(We.tokens.name, "Expected name for let.").toString();
        let n4 = null;
        if (this._match(We.tokens.colon)) {
          const e7 = this._attribute();
          n4 = this._type_decl(), null != n4 && (n4.attributes = e7);
        }
        this._consume(We.tokens.equal, "Expected '=' for let.");
        const s5 = this._short_circuit_or_expression();
        return this._updateNode(new F(t5, n4, null, null, s5), e6);
      }
      if (this._match(We.keywords.const)) {
        const e6 = this._currentLine, t5 = this._consume(We.tokens.name, "Expected name for const.").toString();
        let n4 = null;
        if (this._match(We.tokens.colon)) {
          const e7 = this._attribute();
          n4 = this._type_decl(), null != n4 && (n4.attributes = e7);
        }
        this._consume(We.tokens.equal, "Expected '=' for const.");
        const s5 = this._short_circuit_or_expression();
        return null === n4 && s5 instanceof _e && (n4 = s5.type), this._updateNode(new M(t5, n4, null, null, s5), e6);
      }
      return null;
    }
    _increment_decrement_statement() {
      const e6 = this._current, t5 = this._unary_expression();
      if (null == t5)
        return null;
      if (!this._check(We.increment_operators))
        return this._current = e6, null;
      const n4 = this._consume(We.increment_operators, "Expected increment operator");
      return this._updateNode(new H(n4.type === We.tokens.plus_plus ? U.increment : U.decrement, t5));
    }
    _assignment_statement() {
      let e6 = null;
      const t5 = this._currentLine;
      if (this._check(We.tokens.brace_right))
        return null;
      let n4 = this._match(We.tokens.underscore);
      if (n4 || (e6 = this._unary_expression()), !n4 && null == e6)
        return null;
      const s5 = this._consume(We.assignment_operators, "Expected assignment operator."), r5 = this._short_circuit_or_expression();
      return this._updateNode(new z(P.parse(s5.lexeme), e6, r5), t5);
    }
    _func_call_statement() {
      if (!this._check(We.tokens.ident))
        return null;
      const e6 = this._currentLine, t5 = this._current, n4 = this._consume(We.tokens.ident, "Expected function name."), s5 = this._argument_expression_list();
      return null === s5 ? (this._current = t5, null) : this._updateNode(new R(n4.lexeme, s5), e6);
    }
    _loop_statement() {
      if (!this._match(We.keywords.loop))
        return null;
      this._check(We.tokens.attr) && this._attribute(), this._consume(We.tokens.brace_left, "Expected '{' for loop.");
      const e6 = this._updateNode(new G([], null));
      this._currentLoop.push(e6);
      let t5 = this._statement();
      for (; null !== t5; ) {
        if (Array.isArray(t5))
          for (let n4 of t5)
            e6.body.push(n4);
        else
          e6.body.push(t5);
        if (t5 instanceof N) {
          e6.continuing = t5;
          break;
        }
        t5 = this._statement();
      }
      return this._currentLoop.pop(), this._consume(We.tokens.brace_right, "Expected '}' for loop."), e6;
    }
    _switch_statement() {
      if (!this._match(We.keywords.switch))
        return null;
      const e6 = this._updateNode(new X(null, []));
      if (this._currentLoop.push(e6), e6.condition = this._optional_paren_expression(), this._check(We.tokens.attr) && this._attribute(), this._consume(We.tokens.brace_left, "Expected '{' for switch."), e6.cases = this._switch_body(), null == e6.cases || 0 == e6.cases.length)
        throw this._error(this._previous(), "Expected 'case' or 'default'.");
      return this._consume(We.tokens.brace_right, "Expected '}' for switch."), this._currentLoop.pop(), e6;
    }
    _switch_body() {
      const e6 = [];
      let t5 = false;
      for (; this._check([We.keywords.default, We.keywords.case]); ) {
        if (this._match(We.keywords.case)) {
          const n4 = this._case_selectors();
          for (const e7 of n4)
            if (e7 instanceof Ie) {
              if (t5)
                throw this._error(this._previous(), "Multiple default cases in switch statement.");
              t5 = true;
              break;
            }
          this._match(We.tokens.colon), this._check(We.tokens.attr) && this._attribute(), this._consume(We.tokens.brace_left, "Exected '{' for switch case.");
          const s5 = this._case_body();
          this._consume(We.tokens.brace_right, "Exected '}' for switch case."), e6.push(this._updateNode(new Te(n4, s5)));
        }
        if (this._match(We.keywords.default)) {
          if (t5)
            throw this._error(this._previous(), "Multiple default cases in switch statement.");
          this._match(We.tokens.colon), this._check(We.tokens.attr) && this._attribute(), this._consume(We.tokens.brace_left, "Exected '{' for switch default.");
          const n4 = this._case_body();
          this._consume(We.tokens.brace_right, "Exected '}' for switch default."), e6.push(this._updateNode(new Se(n4)));
        }
      }
      return e6;
    }
    _case_selectors() {
      const e6 = [];
      for (this._match(We.keywords.default) ? e6.push(this._updateNode(new Ie())) : e6.push(this._shift_expression()); this._match(We.tokens.comma); )
        this._match(We.keywords.default) ? e6.push(this._updateNode(new Ie())) : e6.push(this._shift_expression());
      return e6;
    }
    _case_body() {
      if (this._match(We.keywords.fallthrough))
        return this._consume(We.tokens.semicolon, "Expected ';'"), [];
      let e6 = this._statement();
      if (null == e6)
        return [];
      e6 instanceof Array || (e6 = [e6]);
      const t5 = this._case_body();
      return 0 == t5.length ? e6 : [...e6, t5[0]];
    }
    _if_statement() {
      if (!this._match(We.keywords.if))
        return null;
      const e6 = this._currentLine, t5 = this._optional_paren_expression();
      this._check(We.tokens.attr) && this._attribute();
      const n4 = this._compound_statement();
      let s5 = [];
      this._match_elseif() && (this._check(We.tokens.attr) && this._attribute(), s5 = this._elseif_statement(s5));
      let r5 = null;
      return this._match(We.keywords.else) && (this._check(We.tokens.attr) && this._attribute(), r5 = this._compound_statement()), this._updateNode(new j(t5, n4, s5, r5), e6);
    }
    _match_elseif() {
      return this._tokens[this._current].type === We.keywords.else && this._tokens[this._current + 1].type === We.keywords.if && (this._advance(), this._advance(), true);
    }
    _elseif_statement(e6 = []) {
      const t5 = this._optional_paren_expression(), n4 = this._compound_statement();
      return e6.push(this._updateNode(new Ee(t5, n4))), this._match_elseif() && (this._check(We.tokens.attr) && this._attribute(), this._elseif_statement(e6)), e6;
    }
    _return_statement() {
      if (!this._match(We.keywords.return))
        return null;
      const e6 = this._short_circuit_or_expression();
      return this._updateNode(new Z(e6));
    }
    _short_circuit_or_expression() {
      let e6 = this._short_circuit_and_expr();
      for (; this._match(We.tokens.or_or); )
        e6 = this._updateNode(new we(this._previous().toString(), e6, this._short_circuit_and_expr()));
      return e6;
    }
    _short_circuit_and_expr() {
      let e6 = this._inclusive_or_expression();
      for (; this._match(We.tokens.and_and); )
        e6 = this._updateNode(new we(this._previous().toString(), e6, this._inclusive_or_expression()));
      return e6;
    }
    _inclusive_or_expression() {
      let e6 = this._exclusive_or_expression();
      for (; this._match(We.tokens.or); )
        e6 = this._updateNode(new we(this._previous().toString(), e6, this._exclusive_or_expression()));
      return e6;
    }
    _exclusive_or_expression() {
      let e6 = this._and_expression();
      for (; this._match(We.tokens.xor); )
        e6 = this._updateNode(new we(this._previous().toString(), e6, this._and_expression()));
      return e6;
    }
    _and_expression() {
      let e6 = this._equality_expression();
      for (; this._match(We.tokens.and); )
        e6 = this._updateNode(new we(this._previous().toString(), e6, this._equality_expression()));
      return e6;
    }
    _equality_expression() {
      const e6 = this._relational_expression();
      return this._match([We.tokens.equal_equal, We.tokens.not_equal]) ? this._updateNode(new we(this._previous().toString(), e6, this._relational_expression())) : e6;
    }
    _relational_expression() {
      let e6 = this._shift_expression();
      for (; this._match([We.tokens.less_than, We.tokens.greater_than, We.tokens.less_than_equal, We.tokens.greater_than_equal]); )
        e6 = this._updateNode(new we(this._previous().toString(), e6, this._shift_expression()));
      return e6;
    }
    _shift_expression() {
      let e6 = this._additive_expression();
      for (; this._match([We.tokens.shift_left, We.tokens.shift_right]); )
        e6 = this._updateNode(new we(this._previous().toString(), e6, this._additive_expression()));
      return e6;
    }
    _additive_expression() {
      let e6 = this._multiplicative_expression();
      for (; this._match([We.tokens.plus, We.tokens.minus]); )
        e6 = this._updateNode(new we(this._previous().toString(), e6, this._multiplicative_expression()));
      return e6;
    }
    _multiplicative_expression() {
      let e6 = this._unary_expression();
      for (; this._match([We.tokens.star, We.tokens.forward_slash, We.tokens.modulo]); )
        e6 = this._updateNode(new we(this._previous().toString(), e6, this._unary_expression()));
      return e6;
    }
    _unary_expression() {
      return this._match([We.tokens.minus, We.tokens.bang, We.tokens.tilde, We.tokens.star, We.tokens.and]) ? this._updateNode(new ve(this._previous().toString(), this._unary_expression())) : this._singular_expression();
    }
    _singular_expression() {
      const e6 = this._primary_expression(), t5 = this._postfix_expression();
      return t5 && (e6.postfix = t5), e6;
    }
    _postfix_expression() {
      if (this._match(We.tokens.bracket_left)) {
        const e6 = this._short_circuit_or_expression();
        this._consume(We.tokens.bracket_right, "Expected ']'.");
        const t5 = this._updateNode(new ye(e6)), n4 = this._postfix_expression();
        return n4 && (t5.postfix = n4), t5;
      }
      if (this._match(We.tokens.period)) {
        const e6 = this._consume(We.tokens.name, "Expected member name."), t5 = this._postfix_expression(), n4 = this._updateNode(new he(e6.lexeme));
        return t5 && (n4.postfix = t5), n4;
      }
      return null;
    }
    _getStruct(e6) {
      if (this._context.aliases.has(e6)) {
        return this._context.aliases.get(e6).type;
      }
      if (this._context.structs.has(e6)) {
        return this._context.structs.get(e6);
      }
      return null;
    }
    _getType(e6) {
      const t5 = this._getStruct(e6);
      if (null !== t5)
        return t5;
      switch (e6) {
        case "void":
          return se.void;
        case "bool":
          return se.bool;
        case "i32":
          return se.i32;
        case "u32":
          return se.u32;
        case "f32":
          return se.f32;
        case "f16":
          return se.f16;
        case "vec2f":
          return ie.vec2f;
        case "vec3f":
          return ie.vec3f;
        case "vec4f":
          return ie.vec4f;
        case "vec2i":
          return ie.vec2i;
        case "vec3i":
          return ie.vec3i;
        case "vec4i":
          return ie.vec4i;
        case "vec2u":
          return ie.vec2u;
        case "vec3u":
          return ie.vec3u;
        case "vec4u":
          return ie.vec4u;
        case "vec2h":
          return ie.vec2h;
        case "vec3h":
          return ie.vec3h;
        case "vec4h":
          return ie.vec4h;
        case "mat2x2f":
          return ie.mat2x2f;
        case "mat2x3f":
          return ie.mat2x3f;
        case "mat2x4f":
          return ie.mat2x4f;
        case "mat3x2f":
          return ie.mat3x2f;
        case "mat3x3f":
          return ie.mat3x3f;
        case "mat3x4f":
          return ie.mat3x4f;
        case "mat4x2f":
          return ie.mat4x2f;
        case "mat4x3f":
          return ie.mat4x3f;
        case "mat4x4f":
          return ie.mat4x4f;
        case "mat2x2h":
          return ie.mat2x2h;
        case "mat2x3h":
          return ie.mat2x3h;
        case "mat2x4h":
          return ie.mat2x4h;
        case "mat3x2h":
          return ie.mat3x2h;
        case "mat3x3h":
          return ie.mat3x3h;
        case "mat3x4h":
          return ie.mat3x4h;
        case "mat4x2h":
          return ie.mat4x2h;
        case "mat4x3h":
          return ie.mat4x3h;
        case "mat4x4h":
          return ie.mat4x4h;
        case "mat2x2i":
          return ie.mat2x2i;
        case "mat2x3i":
          return ie.mat2x3i;
        case "mat2x4i":
          return ie.mat2x4i;
        case "mat3x2i":
          return ie.mat3x2i;
        case "mat3x3i":
          return ie.mat3x3i;
        case "mat3x4i":
          return ie.mat3x4i;
        case "mat4x2i":
          return ie.mat4x2i;
        case "mat4x3i":
          return ie.mat4x3i;
        case "mat4x4i":
          return ie.mat4x4i;
        case "mat2x2u":
          return ie.mat2x2u;
        case "mat2x3u":
          return ie.mat2x3u;
        case "mat2x4u":
          return ie.mat2x4u;
        case "mat3x2u":
          return ie.mat3x2u;
        case "mat3x3u":
          return ie.mat3x3u;
        case "mat3x4u":
          return ie.mat3x4u;
        case "mat4x2u":
          return ie.mat4x2u;
        case "mat4x3u":
          return ie.mat4x3u;
        case "mat4x4u":
          return ie.mat4x4u;
      }
      return null;
    }
    _validateTypeRange(e6, t5) {
      if ("i32" === t5.name) {
        if (e6 < -2147483648 || e6 > 2147483647)
          throw this._error(this._previous(), `Value out of range for i32: ${e6}. Line: ${this._currentLine}.`);
      } else if ("u32" === t5.name && (e6 < 0 || e6 > 4294967295))
        throw this._error(this._previous(), `Value out of range for u32: ${e6}. Line: ${this._currentLine}.`);
    }
    _primary_expression() {
      if (this._match(We.tokens.ident)) {
        const e7 = this._previous().toString();
        if (this._check(We.tokens.paren_left)) {
          const t6 = this._argument_expression_list(), n4 = this._getType(e7);
          return null !== n4 ? this._updateNode(new fe(n4, t6)) : this._updateNode(new pe(e7, t6));
        }
        if (this._context.constants.has(e7)) {
          const t6 = this._context.constants.get(e7);
          return this._updateNode(new me(e7, t6.value));
        }
        return this._updateNode(new de(e7));
      }
      if (this._match(We.tokens.int_literal)) {
        const e7 = this._previous().toString();
        let t6 = e7.endsWith("i") || e7.endsWith("i") ? se.i32 : e7.endsWith("u") || e7.endsWith("U") ? se.u32 : se.x32;
        const n4 = parseInt(e7);
        return this._validateTypeRange(n4, t6), this._updateNode(new _e(new Ve(n4, this._exec.getTypeInfo(t6)), t6));
      }
      if (this._match(We.tokens.uint_literal)) {
        const e7 = parseInt(this._previous().toString());
        return this._validateTypeRange(e7, se.u32), this._updateNode(new _e(new Ve(e7, this._exec.getTypeInfo(se.u32)), se.u32));
      }
      if (this._match([We.tokens.decimal_float_literal, We.tokens.hex_float_literal])) {
        let e7 = this._previous().toString(), t6 = e7.endsWith("h");
        t6 && (e7 = e7.substring(0, e7.length - 1));
        const n4 = parseFloat(e7);
        this._validateTypeRange(n4, t6 ? se.f16 : se.f32);
        const s5 = t6 ? se.f16 : se.f32;
        return this._updateNode(new _e(new Ve(n4, this._exec.getTypeInfo(s5)), s5));
      }
      if (this._match([We.keywords.true, We.keywords.false])) {
        let e7 = this._previous().toString() === We.keywords.true.rule;
        return this._updateNode(new _e(new Ve(e7 ? 1 : 0, this._exec.getTypeInfo(se.bool)), se.bool));
      }
      if (this._check(We.tokens.paren_left))
        return this._paren_expression();
      if (this._match(We.keywords.bitcast)) {
        this._consume(We.tokens.less_than, "Expected '<'.");
        const e7 = this._type_decl();
        this._consume(We.tokens.greater_than, "Expected '>'.");
        const t6 = this._paren_expression();
        return this._updateNode(new ge(e7, t6));
      }
      const e6 = this._type_decl(), t5 = this._argument_expression_list();
      return this._updateNode(new fe(e6, t5));
    }
    _argument_expression_list() {
      if (!this._match(We.tokens.paren_left))
        return null;
      const e6 = [];
      do {
        if (this._check(We.tokens.paren_right))
          break;
        const t5 = this._short_circuit_or_expression();
        e6.push(t5);
      } while (this._match(We.tokens.comma));
      return this._consume(We.tokens.paren_right, "Expected ')' for agument list"), e6;
    }
    _optional_paren_expression() {
      this._match(We.tokens.paren_left);
      const e6 = this._short_circuit_or_expression();
      return this._match(We.tokens.paren_right), e6;
    }
    _paren_expression() {
      this._consume(We.tokens.paren_left, "Expected '('.");
      const e6 = this._short_circuit_or_expression();
      return this._consume(We.tokens.paren_right, "Expected ')'."), e6;
    }
    _struct_decl() {
      if (!this._match(We.keywords.struct))
        return null;
      const e6 = this._currentLine, t5 = this._consume(We.tokens.ident, "Expected name for struct.").toString();
      this._consume(We.tokens.brace_left, "Expected '{' for struct body.");
      const n4 = [];
      for (; !this._check(We.tokens.brace_right); ) {
        const e7 = this._attribute(), t6 = this._consume(We.tokens.name, "Expected variable name.").toString();
        this._consume(We.tokens.colon, "Expected ':' for struct member type.");
        const s6 = this._attribute(), r6 = this._type_decl();
        null != r6 && (r6.attributes = s6), this._check(We.tokens.brace_right) ? this._match(We.tokens.comma) : this._consume(We.tokens.comma, "Expected ',' for struct member."), n4.push(this._updateNode(new $e(t6, r6, e7)));
      }
      this._consume(We.tokens.brace_right, "Expected '}' after struct body.");
      const s5 = this._currentLine, r5 = this._updateNode(new ae(t5, n4, e6, s5), e6);
      return this._context.structs.set(t5, r5), r5;
    }
    _global_variable_decl() {
      const e6 = this._variable_decl();
      if (!e6)
        return null;
      if (this._match(We.tokens.equal)) {
        const t5 = this._const_expression();
        e6.value = t5;
      }
      if (null !== e6.type && e6.value instanceof _e) {
        if ("x32" !== e6.value.type.name) {
          if (e6.type.getTypeName() !== e6.value.type.getTypeName())
            throw this._error(this._peek(), `Invalid cast from ${e6.value.type.name} to ${e6.type.name}. Line:${this._currentLine}`);
        }
        e6.value.isScalar && this._validateTypeRange(e6.value.scalarValue, e6.type), e6.value.type = e6.type;
      } else
        null === e6.type && e6.value instanceof _e && (e6.type = "x32" === e6.value.type.name ? se.i32 : e6.value.type, e6.value.isScalar && this._validateTypeRange(e6.value.scalarValue, e6.type));
      return e6;
    }
    _override_variable_decl() {
      const e6 = this._override_decl();
      return e6 && this._match(We.tokens.equal) && (e6.value = this._const_expression()), e6;
    }
    _global_const_decl() {
      var e6;
      if (!this._match(We.keywords.const))
        return null;
      const t5 = this._consume(We.tokens.name, "Expected variable name"), n4 = this._currentLine;
      let s5 = null;
      if (this._match(We.tokens.colon)) {
        const e7 = this._attribute();
        s5 = this._type_decl(), null != s5 && (s5.attributes = e7);
      }
      let a6 = null;
      this._consume(We.tokens.equal, "const declarations require an assignment");
      const i7 = this._short_circuit_or_expression();
      try {
        let e7 = [se.f32], n5 = i7.constEvaluate(this._exec, e7);
        n5 instanceof Ve && this._validateTypeRange(n5.value, e7[0]), e7[0] instanceof ie && null === e7[0].format && n5.typeInfo instanceof r && null !== n5.typeInfo.format && ("f16" === n5.typeInfo.format.name ? e7[0].format = se.f16 : "f32" === n5.typeInfo.format.name ? e7[0].format = se.f32 : "i32" === n5.typeInfo.format.name ? e7[0].format = se.i32 : "u32" === n5.typeInfo.format.name ? e7[0].format = se.u32 : "bool" === n5.typeInfo.format.name ? e7[0].format = se.bool : console.error(`TODO: impelement template format type ${n5.typeInfo.format.name}`)), a6 = this._updateNode(new _e(n5, e7[0])), this._exec.context.setVariable(t5.toString(), n5);
      } catch (e7) {
        a6 = i7;
      }
      if (null !== s5 && a6 instanceof _e) {
        if ("x32" !== a6.type.name) {
          if (s5.getTypeName() !== a6.type.getTypeName())
            throw this._error(this._peek(), `Invalid cast from ${a6.type.name} to ${s5.name}. Line:${this._currentLine}`);
        }
        a6.type = s5, a6.isScalar && this._validateTypeRange(a6.scalarValue, a6.type);
      } else
        null === s5 && a6 instanceof _e && (s5 = null !== (e6 = null == a6 ? void 0 : a6.type) && void 0 !== e6 ? e6 : se.f32, s5 === se.x32 && (s5 = se.i32));
      const o5 = this._updateNode(new M(t5.toString(), s5, "", "", a6), n4);
      return this._context.constants.set(o5.name, o5), o5;
    }
    _global_let_decl() {
      if (!this._match(We.keywords.let))
        return null;
      const e6 = this._currentLine, t5 = this._consume(We.tokens.name, "Expected variable name");
      let n4 = null;
      if (this._match(We.tokens.colon)) {
        const e7 = this._attribute();
        n4 = this._type_decl(), null != n4 && (n4.attributes = e7);
      }
      let s5 = null;
      if (this._match(We.tokens.equal) && (s5 = this._const_expression()), null !== n4 && s5 instanceof _e) {
        if ("x32" !== s5.type.name) {
          if (n4.getTypeName() !== s5.type.getTypeName())
            throw this._error(this._peek(), `Invalid cast from ${s5.type.name} to ${n4.name}. Line:${this._currentLine}`);
        }
        s5.type = n4;
      } else
        null === n4 && s5 instanceof _e && (n4 = "x32" === s5.type.name ? se.i32 : s5.type);
      return s5 instanceof _e && s5.isScalar && this._validateTypeRange(s5.scalarValue, n4), this._updateNode(new F(t5.toString(), n4, "", "", s5), e6);
    }
    _const_expression() {
      return this._short_circuit_or_expression();
    }
    _variable_decl() {
      if (!this._match(We.keywords.var))
        return null;
      const e6 = this._currentLine;
      let t5 = "", n4 = "";
      this._match(We.tokens.less_than) && (t5 = this._consume(We.storage_class, "Expected storage_class.").toString(), this._match(We.tokens.comma) && (n4 = this._consume(We.access_mode, "Expected access_mode.").toString()), this._consume(We.tokens.greater_than, "Expected '>'."));
      const s5 = this._consume(We.tokens.name, "Expected variable name");
      let r5 = null;
      if (this._match(We.tokens.colon)) {
        const e7 = this._attribute();
        r5 = this._type_decl(), null != r5 && (r5.attributes = e7);
      }
      return this._updateNode(new O(s5.toString(), r5, t5, n4, null), e6);
    }
    _override_decl() {
      if (!this._match(We.keywords.override))
        return null;
      const e6 = this._consume(We.tokens.name, "Expected variable name");
      let t5 = null;
      if (this._match(We.tokens.colon)) {
        const e7 = this._attribute();
        t5 = this._type_decl(), null != t5 && (t5.attributes = e7);
      }
      return this._updateNode(new B(e6.toString(), t5, null));
    }
    _diagnostic() {
      this._consume(We.tokens.paren_left, "Expected '('");
      const e6 = this._consume(We.tokens.ident, "Expected severity control name.");
      this._consume(We.tokens.comma, "Expected ','");
      let t5 = this._consume(We.tokens.ident, "Expected diagnostic rule name.").toString();
      if (this._match(We.tokens.period)) {
        t5 += `.${this._consume(We.tokens.ident, "Expected diagnostic message.").toString()}`;
      }
      return this._consume(We.tokens.paren_right, "Expected ')'"), this._updateNode(new K(e6.toString(), t5));
    }
    _enable_directive() {
      const e6 = this._consume(We.tokens.ident, "identity expected.");
      return this._updateNode(new Q(e6.toString()));
    }
    _requires_directive() {
      const e6 = [this._consume(We.tokens.ident, "identity expected.").toString()];
      for (; this._match(We.tokens.comma); ) {
        const t5 = this._consume(We.tokens.ident, "identity expected.");
        e6.push(t5.toString());
      }
      return this._updateNode(new Y(e6));
    }
    _type_alias() {
      const e6 = this._consume(We.tokens.ident, "identity expected.");
      this._consume(We.tokens.equal, "Expected '=' for type alias.");
      let t5 = this._type_decl();
      if (null === t5)
        throw this._error(this._peek(), "Expected Type for Alias.");
      this._context.aliases.has(t5.name) && (t5 = this._context.aliases.get(t5.name).type);
      const n4 = this._updateNode(new J(e6.toString(), t5));
      return this._context.aliases.set(n4.name, n4), n4;
    }
    _type_decl() {
      if (this._check([We.tokens.ident, ...We.texel_format, We.keywords.bool, We.keywords.f32, We.keywords.i32, We.keywords.u32])) {
        const e7 = this._advance().toString();
        if (this._context.structs.has(e7))
          return this._context.structs.get(e7);
        if (this._context.aliases.has(e7))
          return this._context.aliases.get(e7).type;
        if (!this._getType(e7)) {
          const t6 = this._updateNode(new re(e7));
          return this._forwardTypeCount++, t6;
        }
        return this._updateNode(new se(e7));
      }
      let e6 = this._texture_sampler_types();
      if (e6)
        return e6;
      if (this._check(We.template_types)) {
        let e7 = this._advance().toString(), t6 = null, n4 = null;
        this._match(We.tokens.less_than) && (t6 = this._type_decl(), n4 = null, this._match(We.tokens.comma) && (n4 = this._consume(We.access_mode, "Expected access_mode for pointer").toString()), this._consume(We.tokens.greater_than, "Expected '>' for type."));
        return this._updateNode(new ie(e7, t6, n4));
      }
      if (this._match(We.keywords.ptr)) {
        let e7 = this._previous().toString();
        this._consume(We.tokens.less_than, "Expected '<' for pointer.");
        const t6 = this._consume(We.storage_class, "Expected storage_class for pointer");
        this._consume(We.tokens.comma, "Expected ',' for pointer.");
        const n4 = this._type_decl();
        let s5 = null;
        this._match(We.tokens.comma) && (s5 = this._consume(We.access_mode, "Expected access_mode for pointer").toString()), this._consume(We.tokens.greater_than, "Expected '>' for pointer.");
        return this._updateNode(new oe(e7, t6.toString(), n4, s5));
      }
      const t5 = this._attribute();
      if (this._match(We.keywords.array)) {
        let e7 = null, n4 = -1;
        const s5 = this._previous();
        let r5 = null;
        if (this._match(We.tokens.less_than)) {
          e7 = this._type_decl(), this._context.aliases.has(e7.name) && (e7 = this._context.aliases.get(e7.name).type);
          let t6 = "";
          if (this._match(We.tokens.comma)) {
            r5 = this._shift_expression();
            try {
              t6 = r5.constEvaluate(this._exec).toString(), r5 = null;
            } catch (e8) {
              t6 = "1";
            }
          }
          this._consume(We.tokens.greater_than, "Expected '>' for array."), n4 = t6 ? parseInt(t6) : 0;
        }
        const a6 = this._updateNode(new le(s5.toString(), t5, e7, n4));
        return r5 && this._deferArrayCountEval.push({ arrayType: a6, countNode: r5 }), a6;
      }
      return null;
    }
    _texture_sampler_types() {
      if (this._match(We.sampler_type))
        return this._updateNode(new ce(this._previous().toString(), null, null));
      if (this._match(We.depth_texture_type))
        return this._updateNode(new ce(this._previous().toString(), null, null));
      if (this._match(We.sampled_texture_type) || this._match(We.multisampled_texture_type)) {
        const e6 = this._previous();
        this._consume(We.tokens.less_than, "Expected '<' for sampler type.");
        const t5 = this._type_decl();
        return this._consume(We.tokens.greater_than, "Expected '>' for sampler type."), this._updateNode(new ce(e6.toString(), t5, null));
      }
      if (this._match(We.storage_texture_type)) {
        const e6 = this._previous();
        this._consume(We.tokens.less_than, "Expected '<' for sampler type.");
        const t5 = this._consume(We.texel_format, "Invalid texel format.").toString();
        this._consume(We.tokens.comma, "Expected ',' after texel format.");
        const n4 = this._consume(We.access_mode, "Expected access mode for storage texture type.").toString();
        return this._consume(We.tokens.greater_than, "Expected '>' for sampler type."), this._updateNode(new ce(e6.toString(), t5, n4));
      }
      return null;
    }
    _attribute() {
      let e6 = [];
      for (; this._match(We.tokens.attr); ) {
        const t5 = this._consume(We.attribute_name, "Expected attribute name"), n4 = this._updateNode(new Le(t5.toString(), null));
        if (this._match(We.tokens.paren_left)) {
          if (n4.value = this._consume(We.literal_or_ident, "Expected attribute value").toString(), this._check(We.tokens.comma)) {
            this._advance();
            do {
              const e7 = this._consume(We.literal_or_ident, "Expected attribute value").toString();
              n4.value instanceof Array || (n4.value = [n4.value]), n4.value.push(e7);
            } while (this._match(We.tokens.comma));
          }
          this._consume(We.tokens.paren_right, "Expected ')'");
        }
        e6.push(n4);
      }
      return 0 == e6.length ? null : e6;
    }
  };
  var dt = class extends st {
    constructor(e6) {
      super(), e6 && this.update(e6);
    }
    update(e6) {
      const t5 = new pt().parse(e6);
      this.updateAST(t5);
    }
  };

  // ../../node_modules/@luma.gl/shadertools/dist/lib/wgsl/get-shader-layout-wgsl.js
  function getShaderLayoutFromWGSL(source4) {
    const shaderLayout = { attributes: [], bindings: [] };
    let parsedWGSL;
    try {
      parsedWGSL = parseWGSL(source4);
    } catch (error) {
      log2.error(error.message)();
      return shaderLayout;
    }
    for (const uniform of parsedWGSL.uniforms) {
      const members = [];
      for (const attribute of uniform.type?.members || []) {
        members.push({
          name: attribute.name,
          type: getType(attribute.type)
        });
      }
      shaderLayout.bindings.push({
        type: "uniform",
        name: uniform.name,
        group: uniform.group,
        location: uniform.binding,
        // @ts-expect-error TODO - unused for now but needs fixing
        members
      });
    }
    for (const texture of parsedWGSL.textures) {
      shaderLayout.bindings.push({
        type: "texture",
        name: texture.name,
        group: texture.group,
        location: texture.binding
      });
    }
    for (const sampler of parsedWGSL.samplers) {
      shaderLayout.bindings.push({
        type: "sampler",
        name: sampler.name,
        group: sampler.group,
        location: sampler.binding
      });
    }
    const vertex5 = parsedWGSL.entry.vertex[0];
    const attributeCount = vertex5?.inputs.length || 0;
    for (let i7 = 0; i7 < attributeCount; i7++) {
      const wgslAttribute = vertex5.inputs[i7];
      if (wgslAttribute.locationType === "location") {
        const type = getType(wgslAttribute.type);
        shaderLayout.attributes.push({
          name: wgslAttribute.name,
          location: Number(wgslAttribute.location),
          type
        });
      }
    }
    return shaderLayout;
  }
  function getType(type) {
    return type?.format ? `${type.name}<${type.format.name}>` : type.name;
  }
  function parseWGSL(source4) {
    try {
      return new dt(source4);
    } catch (error) {
      if (error instanceof Error) {
        throw error;
      }
      let message2 = "WGSL parse error";
      if (typeof error === "object" && error?.message) {
        message2 += `: ${error.message} `;
      }
      if (typeof error === "object" && error?.token) {
        message2 += error.token.line || "";
      }
      throw new Error(message2, { cause: error });
    }
  }

  // ../../node_modules/@math.gl/core/dist/lib/common.js
  var RADIANS_TO_DEGREES = 1 / Math.PI * 180;
  var DEGREES_TO_RADIANS = 1 / 180 * Math.PI;
  var DEFAULT_CONFIG = {
    EPSILON: 1e-12,
    debug: false,
    precision: 4,
    printTypes: false,
    printDegrees: false,
    printRowMajor: true,
    _cartographicRadians: false
  };
  globalThis.mathgl = globalThis.mathgl || { config: { ...DEFAULT_CONFIG } };
  var config = globalThis.mathgl.config;
  function formatValue(value, { precision = config.precision } = {}) {
    value = round(value);
    return `${parseFloat(value.toPrecision(precision))}`;
  }
  function isArray(value) {
    return Array.isArray(value) || ArrayBuffer.isView(value) && !(value instanceof DataView);
  }
  function radians(degrees6, result) {
    return map(degrees6, (degrees7) => degrees7 * DEGREES_TO_RADIANS, result);
  }
  function degrees(radians6, result) {
    return map(radians6, (radians7) => radians7 * RADIANS_TO_DEGREES, result);
  }
  function clamp(value, min7, max7) {
    return map(value, (value2) => Math.max(min7, Math.min(max7, value2)));
  }
  function lerp(a6, b4, t5) {
    if (isArray(a6)) {
      return a6.map((ai, i7) => lerp(ai, b4[i7], t5));
    }
    return t5 * b4 + (1 - t5) * a6;
  }
  function equals(a6, b4, epsilon) {
    const oldEpsilon = config.EPSILON;
    if (epsilon) {
      config.EPSILON = epsilon;
    }
    try {
      if (a6 === b4) {
        return true;
      }
      if (isArray(a6) && isArray(b4)) {
        if (a6.length !== b4.length) {
          return false;
        }
        for (let i7 = 0; i7 < a6.length; ++i7) {
          if (!equals(a6[i7], b4[i7])) {
            return false;
          }
        }
        return true;
      }
      if (a6 && a6.equals) {
        return a6.equals(b4);
      }
      if (b4 && b4.equals) {
        return b4.equals(a6);
      }
      if (typeof a6 === "number" && typeof b4 === "number") {
        return Math.abs(a6 - b4) <= config.EPSILON * Math.max(1, Math.abs(a6), Math.abs(b4));
      }
      return false;
    } finally {
      config.EPSILON = oldEpsilon;
    }
  }
  function round(value) {
    return Math.round(value / config.EPSILON) * config.EPSILON;
  }
  function duplicateArray(array) {
    return array.clone ? array.clone() : new Array(array.length);
  }
  function map(value, func, result) {
    if (isArray(value)) {
      const array = value;
      result = result || duplicateArray(array);
      for (let i7 = 0; i7 < result.length && i7 < array.length; ++i7) {
        const val2 = typeof value === "number" ? value : value[i7];
        result[i7] = func(val2, i7, result);
      }
      return result;
    }
    return func(value);
  }

  // ../../node_modules/@math.gl/core/dist/classes/base/math-array.js
  var MathArray = class extends Array {
    // Common methods
    /**
     * Clone the current object
     * @returns a new copy of this object
     */
    clone() {
      return new this.constructor().copy(this);
    }
    fromArray(array, offset = 0) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = array[i7 + offset];
      }
      return this.check();
    }
    toArray(targetArray = [], offset = 0) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        targetArray[offset + i7] = this[i7];
      }
      return targetArray;
    }
    toObject(targetObject) {
      return targetObject;
    }
    from(arrayOrObject) {
      return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : (
        // @ts-ignore
        this.fromObject(arrayOrObject)
      );
    }
    to(arrayOrObject) {
      if (arrayOrObject === this) {
        return this;
      }
      return isArray(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);
    }
    toTarget(target2) {
      return target2 ? this.to(target2) : this;
    }
    /** @deprecated */
    toFloat32Array() {
      return new Float32Array(this);
    }
    toString() {
      return this.formatString(config);
    }
    /** Formats string according to options */
    formatString(opts) {
      let string = "";
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        string += (i7 > 0 ? ", " : "") + formatValue(this[i7], opts);
      }
      return `${opts.printTypes ? this.constructor.name : ""}[${string}]`;
    }
    equals(array) {
      if (!array || this.length !== array.length) {
        return false;
      }
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        if (!equals(this[i7], array[i7])) {
          return false;
        }
      }
      return true;
    }
    exactEquals(array) {
      if (!array || this.length !== array.length) {
        return false;
      }
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        if (this[i7] !== array[i7]) {
          return false;
        }
      }
      return true;
    }
    // Modifiers
    /** Negates all values in this object */
    negate() {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = -this[i7];
      }
      return this.check();
    }
    lerp(a6, b4, t5) {
      if (t5 === void 0) {
        return this.lerp(this, a6, b4);
      }
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        const ai = a6[i7];
        const endValue = typeof b4 === "number" ? b4 : b4[i7];
        this[i7] = ai + t5 * (endValue - ai);
      }
      return this.check();
    }
    /** Minimal */
    min(vector) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.min(vector[i7], this[i7]);
      }
      return this.check();
    }
    /** Maximal */
    max(vector) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.max(vector[i7], this[i7]);
      }
      return this.check();
    }
    clamp(minVector, maxVector) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.min(Math.max(this[i7], minVector[i7]), maxVector[i7]);
      }
      return this.check();
    }
    add(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] += vector[i7];
        }
      }
      return this.check();
    }
    subtract(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] -= vector[i7];
        }
      }
      return this.check();
    }
    scale(scale24) {
      if (typeof scale24 === "number") {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] *= scale24;
        }
      } else {
        for (let i7 = 0; i7 < this.ELEMENTS && i7 < scale24.length; ++i7) {
          this[i7] *= scale24[i7];
        }
      }
      return this.check();
    }
    /**
     * Multiplies all elements by `scale`
     * Note: `Matrix4.multiplyByScalar` only scales its 3x3 "minor"
     */
    multiplyByScalar(scalar) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] *= scalar;
      }
      return this.check();
    }
    // Debug checks
    /** Throws an error if array length is incorrect or contains illegal values */
    check() {
      if (config.debug && !this.validate()) {
        throw new Error(`math.gl: ${this.constructor.name} some fields set to invalid numbers'`);
      }
      return this;
    }
    /** Returns false if the array length is incorrect or contains illegal values */
    validate() {
      let valid = this.length === this.ELEMENTS;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        valid = valid && Number.isFinite(this[i7]);
      }
      return valid;
    }
    // three.js compatibility
    /** @deprecated */
    sub(a6) {
      return this.subtract(a6);
    }
    /** @deprecated */
    setScalar(a6) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = a6;
      }
      return this.check();
    }
    /** @deprecated */
    addScalar(a6) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] += a6;
      }
      return this.check();
    }
    /** @deprecated */
    subScalar(a6) {
      return this.addScalar(-a6);
    }
    /** @deprecated */
    multiplyScalar(scalar) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] *= scalar;
      }
      return this.check();
    }
    /** @deprecated */
    divideScalar(a6) {
      return this.multiplyByScalar(1 / a6);
    }
    /** @deprecated */
    clampScalar(min7, max7) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.min(Math.max(this[i7], min7), max7);
      }
      return this.check();
    }
    /** @deprecated */
    get elements() {
      return this;
    }
  };

  // ../../node_modules/@math.gl/core/dist/lib/validators.js
  function validateVector(v5, length17) {
    if (v5.length !== length17) {
      return false;
    }
    for (let i7 = 0; i7 < v5.length; ++i7) {
      if (!Number.isFinite(v5[i7])) {
        return false;
      }
    }
    return true;
  }
  function checkNumber(value) {
    if (!Number.isFinite(value)) {
      throw new Error(`Invalid number ${JSON.stringify(value)}`);
    }
    return value;
  }
  function checkVector(v5, length17, callerName = "") {
    if (config.debug && !validateVector(v5, length17)) {
      throw new Error(`math.gl: ${callerName} some fields set to invalid numbers'`);
    }
    return v5;
  }

  // ../../node_modules/@math.gl/core/dist/lib/assert.js
  function assert6(condition, message2) {
    if (!condition) {
      throw new Error(`math.gl assertion ${message2}`);
    }
  }

  // ../../node_modules/@math.gl/core/dist/classes/base/vector.js
  var Vector = class extends MathArray {
    // ACCESSORS
    get x() {
      return this[0];
    }
    set x(value) {
      this[0] = checkNumber(value);
    }
    get y() {
      return this[1];
    }
    set y(value) {
      this[1] = checkNumber(value);
    }
    /**
     * Returns the length of the vector from the origin to the point described by this vector
     *
     * @note `length` is a reserved word for Arrays, so `v.length()` will return number of elements
     * Instead we provide `len` and `magnitude`
     */
    len() {
      return Math.sqrt(this.lengthSquared());
    }
    /**
     * Returns the length of the vector from the origin to the point described by this vector
     */
    magnitude() {
      return this.len();
    }
    /**
     * Returns the squared length of the vector from the origin to the point described by this vector
     */
    lengthSquared() {
      let length17 = 0;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        length17 += this[i7] * this[i7];
      }
      return length17;
    }
    /**
     * Returns the squared length of the vector from the origin to the point described by this vector
     */
    magnitudeSquared() {
      return this.lengthSquared();
    }
    distance(mathArray) {
      return Math.sqrt(this.distanceSquared(mathArray));
    }
    distanceSquared(mathArray) {
      let length17 = 0;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        const dist6 = this[i7] - mathArray[i7];
        length17 += dist6 * dist6;
      }
      return checkNumber(length17);
    }
    dot(mathArray) {
      let product = 0;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        product += this[i7] * mathArray[i7];
      }
      return checkNumber(product);
    }
    // MODIFIERS
    normalize() {
      const length17 = this.magnitude();
      if (length17 !== 0) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] /= length17;
        }
      }
      return this.check();
    }
    multiply(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] *= vector[i7];
        }
      }
      return this.check();
    }
    divide(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] /= vector[i7];
        }
      }
      return this.check();
    }
    // THREE.js compatibility
    lengthSq() {
      return this.lengthSquared();
    }
    distanceTo(vector) {
      return this.distance(vector);
    }
    distanceToSquared(vector) {
      return this.distanceSquared(vector);
    }
    getComponent(i7) {
      assert6(i7 >= 0 && i7 < this.ELEMENTS, "index is out of range");
      return checkNumber(this[i7]);
    }
    setComponent(i7, value) {
      assert6(i7 >= 0 && i7 < this.ELEMENTS, "index is out of range");
      this[i7] = value;
      return this.check();
    }
    addVectors(a6, b4) {
      return this.copy(a6).add(b4);
    }
    subVectors(a6, b4) {
      return this.copy(a6).subtract(b4);
    }
    multiplyVectors(a6, b4) {
      return this.copy(a6).multiply(b4);
    }
    addScaledVector(a6, b4) {
      return this.add(new this.constructor(a6).multiplyScalar(b4));
    }
  };

  // ../../node_modules/@math.gl/core/dist/gl-matrix/vec2.js
  var vec2_exports = {};
  __export(vec2_exports, {
    add: () => add,
    angle: () => angle,
    ceil: () => ceil,
    clone: () => clone,
    copy: () => copy,
    create: () => create,
    cross: () => cross,
    dist: () => dist,
    distance: () => distance,
    div: () => div,
    divide: () => divide,
    dot: () => dot,
    equals: () => equals2,
    exactEquals: () => exactEquals,
    floor: () => floor,
    forEach: () => forEach2,
    fromValues: () => fromValues,
    inverse: () => inverse,
    len: () => len,
    length: () => length,
    lerp: () => lerp2,
    max: () => max,
    min: () => min,
    mul: () => mul,
    multiply: () => multiply,
    negate: () => negate,
    normalize: () => normalize,
    random: () => random,
    rotate: () => rotate,
    round: () => round3,
    scale: () => scale,
    scaleAndAdd: () => scaleAndAdd,
    set: () => set,
    sqrDist: () => sqrDist,
    sqrLen: () => sqrLen,
    squaredDistance: () => squaredDistance,
    squaredLength: () => squaredLength,
    str: () => str,
    sub: () => sub,
    subtract: () => subtract,
    transformMat2: () => transformMat2,
    transformMat2d: () => transformMat2d,
    transformMat3: () => transformMat3,
    transformMat4: () => transformMat4,
    zero: () => zero
  });

  // ../../node_modules/@math.gl/core/dist/gl-matrix/common.js
  var EPSILON = 1e-6;
  var ARRAY_TYPE = typeof Float32Array !== "undefined" ? Float32Array : Array;
  var RANDOM = Math.random;
  function round2(a6) {
    if (a6 >= 0)
      return Math.round(a6);
    return a6 % 0.5 === 0 ? Math.floor(a6) : Math.round(a6);
  }
  var degree = Math.PI / 180;

  // ../../node_modules/@math.gl/core/dist/gl-matrix/vec2.js
  function create() {
    const out = new ARRAY_TYPE(2);
    if (ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
    }
    return out;
  }
  function clone(a6) {
    const out = new ARRAY_TYPE(2);
    out[0] = a6[0];
    out[1] = a6[1];
    return out;
  }
  function fromValues(x4, y5) {
    const out = new ARRAY_TYPE(2);
    out[0] = x4;
    out[1] = y5;
    return out;
  }
  function copy(out, a6) {
    out[0] = a6[0];
    out[1] = a6[1];
    return out;
  }
  function set(out, x4, y5) {
    out[0] = x4;
    out[1] = y5;
    return out;
  }
  function add(out, a6, b4) {
    out[0] = a6[0] + b4[0];
    out[1] = a6[1] + b4[1];
    return out;
  }
  function subtract(out, a6, b4) {
    out[0] = a6[0] - b4[0];
    out[1] = a6[1] - b4[1];
    return out;
  }
  function multiply(out, a6, b4) {
    out[0] = a6[0] * b4[0];
    out[1] = a6[1] * b4[1];
    return out;
  }
  function divide(out, a6, b4) {
    out[0] = a6[0] / b4[0];
    out[1] = a6[1] / b4[1];
    return out;
  }
  function ceil(out, a6) {
    out[0] = Math.ceil(a6[0]);
    out[1] = Math.ceil(a6[1]);
    return out;
  }
  function floor(out, a6) {
    out[0] = Math.floor(a6[0]);
    out[1] = Math.floor(a6[1]);
    return out;
  }
  function min(out, a6, b4) {
    out[0] = Math.min(a6[0], b4[0]);
    out[1] = Math.min(a6[1], b4[1]);
    return out;
  }
  function max(out, a6, b4) {
    out[0] = Math.max(a6[0], b4[0]);
    out[1] = Math.max(a6[1], b4[1]);
    return out;
  }
  function round3(out, a6) {
    out[0] = round2(a6[0]);
    out[1] = round2(a6[1]);
    return out;
  }
  function scale(out, a6, b4) {
    out[0] = a6[0] * b4;
    out[1] = a6[1] * b4;
    return out;
  }
  function scaleAndAdd(out, a6, b4, scale24) {
    out[0] = a6[0] + b4[0] * scale24;
    out[1] = a6[1] + b4[1] * scale24;
    return out;
  }
  function distance(a6, b4) {
    const x4 = b4[0] - a6[0];
    const y5 = b4[1] - a6[1];
    return Math.sqrt(x4 * x4 + y5 * y5);
  }
  function squaredDistance(a6, b4) {
    const x4 = b4[0] - a6[0];
    const y5 = b4[1] - a6[1];
    return x4 * x4 + y5 * y5;
  }
  function length(a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    return Math.sqrt(x4 * x4 + y5 * y5);
  }
  function squaredLength(a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    return x4 * x4 + y5 * y5;
  }
  function negate(out, a6) {
    out[0] = -a6[0];
    out[1] = -a6[1];
    return out;
  }
  function inverse(out, a6) {
    out[0] = 1 / a6[0];
    out[1] = 1 / a6[1];
    return out;
  }
  function normalize(out, a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    let len9 = x4 * x4 + y5 * y5;
    if (len9 > 0) {
      len9 = 1 / Math.sqrt(len9);
    }
    out[0] = a6[0] * len9;
    out[1] = a6[1] * len9;
    return out;
  }
  function dot(a6, b4) {
    return a6[0] * b4[0] + a6[1] * b4[1];
  }
  function cross(out, a6, b4) {
    const z4 = a6[0] * b4[1] - a6[1] * b4[0];
    out[0] = out[1] = 0;
    out[2] = z4;
    return out;
  }
  function lerp2(out, a6, b4, t5) {
    const ax = a6[0];
    const ay = a6[1];
    out[0] = ax + t5 * (b4[0] - ax);
    out[1] = ay + t5 * (b4[1] - ay);
    return out;
  }
  function random(out, scale24) {
    scale24 = scale24 === void 0 ? 1 : scale24;
    const r5 = RANDOM() * 2 * Math.PI;
    out[0] = Math.cos(r5) * scale24;
    out[1] = Math.sin(r5) * scale24;
    return out;
  }
  function transformMat2(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[2] * y5;
    out[1] = m3[1] * x4 + m3[3] * y5;
    return out;
  }
  function transformMat2d(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[2] * y5 + m3[4];
    out[1] = m3[1] * x4 + m3[3] * y5 + m3[5];
    return out;
  }
  function transformMat3(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[3] * y5 + m3[6];
    out[1] = m3[1] * x4 + m3[4] * y5 + m3[7];
    return out;
  }
  function transformMat4(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[4] * y5 + m3[12];
    out[1] = m3[1] * x4 + m3[5] * y5 + m3[13];
    return out;
  }
  function rotate(out, a6, b4, rad) {
    const p0 = a6[0] - b4[0];
    const p1 = a6[1] - b4[1];
    const sinC = Math.sin(rad);
    const cosC = Math.cos(rad);
    out[0] = p0 * cosC - p1 * sinC + b4[0];
    out[1] = p0 * sinC + p1 * cosC + b4[1];
    return out;
  }
  function angle(a6, b4) {
    const x1 = a6[0];
    const y1 = a6[1];
    const x22 = b4[0];
    const y22 = b4[1];
    const mag = Math.sqrt((x1 * x1 + y1 * y1) * (x22 * x22 + y22 * y22));
    const cosine = mag && (x1 * x22 + y1 * y22) / mag;
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
  }
  function zero(out) {
    out[0] = 0;
    out[1] = 0;
    return out;
  }
  function str(a6) {
    return `vec2(${a6[0]}, ${a6[1]})`;
  }
  function exactEquals(a6, b4) {
    return a6[0] === b4[0] && a6[1] === b4[1];
  }
  function equals2(a6, b4) {
    const a0 = a6[0];
    const a1 = a6[1];
    const b0 = b4[0];
    const b1 = b4[1];
    return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1));
  }
  var len = length;
  var sub = subtract;
  var mul = multiply;
  var div = divide;
  var dist = distance;
  var sqrDist = squaredDistance;
  var sqrLen = squaredLength;
  var forEach2 = function() {
    const vec = create();
    return function(a6, stride, offset, count3, fn, arg) {
      let i7;
      let l5;
      if (!stride) {
        stride = 2;
      }
      if (!offset) {
        offset = 0;
      }
      if (count3) {
        l5 = Math.min(count3 * stride + offset, a6.length);
      } else {
        l5 = a6.length;
      }
      for (i7 = offset; i7 < l5; i7 += stride) {
        vec[0] = a6[i7];
        vec[1] = a6[i7 + 1];
        fn(vec, vec, arg);
        a6[i7] = vec[0];
        a6[i7 + 1] = vec[1];
      }
      return a6;
    };
  }();

  // ../../node_modules/@math.gl/core/dist/lib/gl-matrix-extras.js
  function vec2_transformMat4AsVector(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const w5 = m3[3] * x4 + m3[7] * y5 || 1;
    out[0] = (m3[0] * x4 + m3[4] * y5) / w5;
    out[1] = (m3[1] * x4 + m3[5] * y5) / w5;
    return out;
  }
  function vec3_transformMat4AsVector(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = m3[3] * x4 + m3[7] * y5 + m3[11] * z4 || 1;
    out[0] = (m3[0] * x4 + m3[4] * y5 + m3[8] * z4) / w5;
    out[1] = (m3[1] * x4 + m3[5] * y5 + m3[9] * z4) / w5;
    out[2] = (m3[2] * x4 + m3[6] * y5 + m3[10] * z4) / w5;
    return out;
  }
  function vec3_transformMat2(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[2] * y5;
    out[1] = m3[1] * x4 + m3[3] * y5;
    out[2] = a6[2];
    return out;
  }
  function vec4_transformMat2(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[2] * y5;
    out[1] = m3[1] * x4 + m3[3] * y5;
    out[2] = a6[2];
    out[3] = a6[3];
    return out;
  }
  function vec4_transformMat3(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    out[0] = m3[0] * x4 + m3[3] * y5 + m3[6] * z4;
    out[1] = m3[1] * x4 + m3[4] * y5 + m3[7] * z4;
    out[2] = m3[2] * x4 + m3[5] * y5 + m3[8] * z4;
    out[3] = a6[3];
    return out;
  }

  // ../../node_modules/@math.gl/core/dist/classes/vector2.js
  var Vector2 = class extends Vector {
    // Creates a new, empty vec2
    constructor(x4 = 0, y5 = 0) {
      super(2);
      if (isArray(x4) && arguments.length === 1) {
        this.copy(x4);
      } else {
        if (config.debug) {
          checkNumber(x4);
          checkNumber(y5);
        }
        this[0] = x4;
        this[1] = y5;
      }
    }
    set(x4, y5) {
      this[0] = x4;
      this[1] = y5;
      return this.check();
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      return this.check();
    }
    fromObject(object) {
      if (config.debug) {
        checkNumber(object.x);
        checkNumber(object.y);
      }
      this[0] = object.x;
      this[1] = object.y;
      return this.check();
    }
    toObject(object) {
      object.x = this[0];
      object.y = this[1];
      return object;
    }
    // Getters/setters
    get ELEMENTS() {
      return 2;
    }
    /**
     * Returns angle from x axis
     * @returns
     */
    horizontalAngle() {
      return Math.atan2(this.y, this.x);
    }
    /**
     * Returns angle from y axis
     * @returns
     */
    verticalAngle() {
      return Math.atan2(this.x, this.y);
    }
    // Transforms
    /**
     * Transforms as point
     * @param matrix4
     * @returns
     */
    transform(matrix4) {
      return this.transformAsPoint(matrix4);
    }
    /**
     * transforms as point (4th component is implicitly 1)
     * @param matrix4
     * @returns
     */
    transformAsPoint(matrix4) {
      transformMat4(this, this, matrix4);
      return this.check();
    }
    /**
     * transforms as vector (4th component is implicitly 0, ignores translation. slightly faster)
     * @param matrix4
     * @returns
     */
    transformAsVector(matrix4) {
      vec2_transformMat4AsVector(this, this, matrix4);
      return this.check();
    }
    transformByMatrix3(matrix3) {
      transformMat3(this, this, matrix3);
      return this.check();
    }
    transformByMatrix2x3(matrix2x3) {
      transformMat2d(this, this, matrix2x3);
      return this.check();
    }
    transformByMatrix2(matrix2) {
      transformMat2(this, this, matrix2);
      return this.check();
    }
  };

  // ../../node_modules/@math.gl/core/dist/gl-matrix/vec3.js
  var vec3_exports = {};
  __export(vec3_exports, {
    add: () => add2,
    angle: () => angle2,
    bezier: () => bezier,
    ceil: () => ceil2,
    clone: () => clone2,
    copy: () => copy2,
    create: () => create2,
    cross: () => cross2,
    dist: () => dist2,
    distance: () => distance2,
    div: () => div2,
    divide: () => divide2,
    dot: () => dot2,
    equals: () => equals3,
    exactEquals: () => exactEquals2,
    floor: () => floor2,
    forEach: () => forEach3,
    fromValues: () => fromValues2,
    hermite: () => hermite,
    inverse: () => inverse2,
    len: () => len2,
    length: () => length2,
    lerp: () => lerp3,
    max: () => max2,
    min: () => min2,
    mul: () => mul2,
    multiply: () => multiply2,
    negate: () => negate2,
    normalize: () => normalize2,
    random: () => random2,
    rotateX: () => rotateX,
    rotateY: () => rotateY,
    rotateZ: () => rotateZ,
    round: () => round4,
    scale: () => scale2,
    scaleAndAdd: () => scaleAndAdd2,
    set: () => set2,
    slerp: () => slerp,
    sqrDist: () => sqrDist2,
    sqrLen: () => sqrLen2,
    squaredDistance: () => squaredDistance2,
    squaredLength: () => squaredLength2,
    str: () => str2,
    sub: () => sub2,
    subtract: () => subtract2,
    transformMat3: () => transformMat32,
    transformMat4: () => transformMat42,
    transformQuat: () => transformQuat,
    zero: () => zero2
  });
  function create2() {
    const out = new ARRAY_TYPE(3);
    if (ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }
    return out;
  }
  function clone2(a6) {
    const out = new ARRAY_TYPE(3);
    out[0] = a6[0];
    out[1] = a6[1];
    out[2] = a6[2];
    return out;
  }
  function length2(a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    return Math.sqrt(x4 * x4 + y5 * y5 + z4 * z4);
  }
  function fromValues2(x4, y5, z4) {
    const out = new ARRAY_TYPE(3);
    out[0] = x4;
    out[1] = y5;
    out[2] = z4;
    return out;
  }
  function copy2(out, a6) {
    out[0] = a6[0];
    out[1] = a6[1];
    out[2] = a6[2];
    return out;
  }
  function set2(out, x4, y5, z4) {
    out[0] = x4;
    out[1] = y5;
    out[2] = z4;
    return out;
  }
  function add2(out, a6, b4) {
    out[0] = a6[0] + b4[0];
    out[1] = a6[1] + b4[1];
    out[2] = a6[2] + b4[2];
    return out;
  }
  function subtract2(out, a6, b4) {
    out[0] = a6[0] - b4[0];
    out[1] = a6[1] - b4[1];
    out[2] = a6[2] - b4[2];
    return out;
  }
  function multiply2(out, a6, b4) {
    out[0] = a6[0] * b4[0];
    out[1] = a6[1] * b4[1];
    out[2] = a6[2] * b4[2];
    return out;
  }
  function divide2(out, a6, b4) {
    out[0] = a6[0] / b4[0];
    out[1] = a6[1] / b4[1];
    out[2] = a6[2] / b4[2];
    return out;
  }
  function ceil2(out, a6) {
    out[0] = Math.ceil(a6[0]);
    out[1] = Math.ceil(a6[1]);
    out[2] = Math.ceil(a6[2]);
    return out;
  }
  function floor2(out, a6) {
    out[0] = Math.floor(a6[0]);
    out[1] = Math.floor(a6[1]);
    out[2] = Math.floor(a6[2]);
    return out;
  }
  function min2(out, a6, b4) {
    out[0] = Math.min(a6[0], b4[0]);
    out[1] = Math.min(a6[1], b4[1]);
    out[2] = Math.min(a6[2], b4[2]);
    return out;
  }
  function max2(out, a6, b4) {
    out[0] = Math.max(a6[0], b4[0]);
    out[1] = Math.max(a6[1], b4[1]);
    out[2] = Math.max(a6[2], b4[2]);
    return out;
  }
  function round4(out, a6) {
    out[0] = round2(a6[0]);
    out[1] = round2(a6[1]);
    out[2] = round2(a6[2]);
    return out;
  }
  function scale2(out, a6, b4) {
    out[0] = a6[0] * b4;
    out[1] = a6[1] * b4;
    out[2] = a6[2] * b4;
    return out;
  }
  function scaleAndAdd2(out, a6, b4, scale24) {
    out[0] = a6[0] + b4[0] * scale24;
    out[1] = a6[1] + b4[1] * scale24;
    out[2] = a6[2] + b4[2] * scale24;
    return out;
  }
  function distance2(a6, b4) {
    const x4 = b4[0] - a6[0];
    const y5 = b4[1] - a6[1];
    const z4 = b4[2] - a6[2];
    return Math.sqrt(x4 * x4 + y5 * y5 + z4 * z4);
  }
  function squaredDistance2(a6, b4) {
    const x4 = b4[0] - a6[0];
    const y5 = b4[1] - a6[1];
    const z4 = b4[2] - a6[2];
    return x4 * x4 + y5 * y5 + z4 * z4;
  }
  function squaredLength2(a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    return x4 * x4 + y5 * y5 + z4 * z4;
  }
  function negate2(out, a6) {
    out[0] = -a6[0];
    out[1] = -a6[1];
    out[2] = -a6[2];
    return out;
  }
  function inverse2(out, a6) {
    out[0] = 1 / a6[0];
    out[1] = 1 / a6[1];
    out[2] = 1 / a6[2];
    return out;
  }
  function normalize2(out, a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    let len9 = x4 * x4 + y5 * y5 + z4 * z4;
    if (len9 > 0) {
      len9 = 1 / Math.sqrt(len9);
    }
    out[0] = a6[0] * len9;
    out[1] = a6[1] * len9;
    out[2] = a6[2] * len9;
    return out;
  }
  function dot2(a6, b4) {
    return a6[0] * b4[0] + a6[1] * b4[1] + a6[2] * b4[2];
  }
  function cross2(out, a6, b4) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const bx = b4[0];
    const by = b4[1];
    const bz = b4[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
  }
  function lerp3(out, a6, b4, t5) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    out[0] = ax + t5 * (b4[0] - ax);
    out[1] = ay + t5 * (b4[1] - ay);
    out[2] = az + t5 * (b4[2] - az);
    return out;
  }
  function slerp(out, a6, b4, t5) {
    const angle10 = Math.acos(Math.min(Math.max(dot2(a6, b4), -1), 1));
    const sinTotal = Math.sin(angle10);
    const ratioA = Math.sin((1 - t5) * angle10) / sinTotal;
    const ratioB = Math.sin(t5 * angle10) / sinTotal;
    out[0] = ratioA * a6[0] + ratioB * b4[0];
    out[1] = ratioA * a6[1] + ratioB * b4[1];
    out[2] = ratioA * a6[2] + ratioB * b4[2];
    return out;
  }
  function hermite(out, a6, b4, c5, d5, t5) {
    const factorTimes2 = t5 * t5;
    const factor1 = factorTimes2 * (2 * t5 - 3) + 1;
    const factor2 = factorTimes2 * (t5 - 2) + t5;
    const factor3 = factorTimes2 * (t5 - 1);
    const factor4 = factorTimes2 * (3 - 2 * t5);
    out[0] = a6[0] * factor1 + b4[0] * factor2 + c5[0] * factor3 + d5[0] * factor4;
    out[1] = a6[1] * factor1 + b4[1] * factor2 + c5[1] * factor3 + d5[1] * factor4;
    out[2] = a6[2] * factor1 + b4[2] * factor2 + c5[2] * factor3 + d5[2] * factor4;
    return out;
  }
  function bezier(out, a6, b4, c5, d5, t5) {
    const inverseFactor = 1 - t5;
    const inverseFactorTimesTwo = inverseFactor * inverseFactor;
    const factorTimes2 = t5 * t5;
    const factor1 = inverseFactorTimesTwo * inverseFactor;
    const factor2 = 3 * t5 * inverseFactorTimesTwo;
    const factor3 = 3 * factorTimes2 * inverseFactor;
    const factor4 = factorTimes2 * t5;
    out[0] = a6[0] * factor1 + b4[0] * factor2 + c5[0] * factor3 + d5[0] * factor4;
    out[1] = a6[1] * factor1 + b4[1] * factor2 + c5[1] * factor3 + d5[1] * factor4;
    out[2] = a6[2] * factor1 + b4[2] * factor2 + c5[2] * factor3 + d5[2] * factor4;
    return out;
  }
  function random2(out, scale24) {
    scale24 = scale24 === void 0 ? 1 : scale24;
    const r5 = RANDOM() * 2 * Math.PI;
    const z4 = RANDOM() * 2 - 1;
    const zScale = Math.sqrt(1 - z4 * z4) * scale24;
    out[0] = Math.cos(r5) * zScale;
    out[1] = Math.sin(r5) * zScale;
    out[2] = z4 * scale24;
    return out;
  }
  function transformMat42(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    let w5 = m3[3] * x4 + m3[7] * y5 + m3[11] * z4 + m3[15];
    w5 = w5 || 1;
    out[0] = (m3[0] * x4 + m3[4] * y5 + m3[8] * z4 + m3[12]) / w5;
    out[1] = (m3[1] * x4 + m3[5] * y5 + m3[9] * z4 + m3[13]) / w5;
    out[2] = (m3[2] * x4 + m3[6] * y5 + m3[10] * z4 + m3[14]) / w5;
    return out;
  }
  function transformMat32(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    out[0] = x4 * m3[0] + y5 * m3[3] + z4 * m3[6];
    out[1] = x4 * m3[1] + y5 * m3[4] + z4 * m3[7];
    out[2] = x4 * m3[2] + y5 * m3[5] + z4 * m3[8];
    return out;
  }
  function transformQuat(out, a6, q3) {
    const qx = q3[0];
    const qy = q3[1];
    const qz = q3[2];
    const qw = q3[3];
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    let uvx = qy * z4 - qz * y5;
    let uvy = qz * x4 - qx * z4;
    let uvz = qx * y5 - qy * x4;
    let uuvx = qy * uvz - qz * uvy;
    let uuvy = qz * uvx - qx * uvz;
    let uuvz = qx * uvy - qy * uvx;
    const w22 = qw * 2;
    uvx *= w22;
    uvy *= w22;
    uvz *= w22;
    uuvx *= 2;
    uuvy *= 2;
    uuvz *= 2;
    out[0] = x4 + uvx + uuvx;
    out[1] = y5 + uvy + uuvy;
    out[2] = z4 + uvz + uuvz;
    return out;
  }
  function rotateX(out, a6, b4, rad) {
    const p5 = [];
    const r5 = [];
    p5[0] = a6[0] - b4[0];
    p5[1] = a6[1] - b4[1];
    p5[2] = a6[2] - b4[2];
    r5[0] = p5[0];
    r5[1] = p5[1] * Math.cos(rad) - p5[2] * Math.sin(rad);
    r5[2] = p5[1] * Math.sin(rad) + p5[2] * Math.cos(rad);
    out[0] = r5[0] + b4[0];
    out[1] = r5[1] + b4[1];
    out[2] = r5[2] + b4[2];
    return out;
  }
  function rotateY(out, a6, b4, rad) {
    const p5 = [];
    const r5 = [];
    p5[0] = a6[0] - b4[0];
    p5[1] = a6[1] - b4[1];
    p5[2] = a6[2] - b4[2];
    r5[0] = p5[2] * Math.sin(rad) + p5[0] * Math.cos(rad);
    r5[1] = p5[1];
    r5[2] = p5[2] * Math.cos(rad) - p5[0] * Math.sin(rad);
    out[0] = r5[0] + b4[0];
    out[1] = r5[1] + b4[1];
    out[2] = r5[2] + b4[2];
    return out;
  }
  function rotateZ(out, a6, b4, rad) {
    const p5 = [];
    const r5 = [];
    p5[0] = a6[0] - b4[0];
    p5[1] = a6[1] - b4[1];
    p5[2] = a6[2] - b4[2];
    r5[0] = p5[0] * Math.cos(rad) - p5[1] * Math.sin(rad);
    r5[1] = p5[0] * Math.sin(rad) + p5[1] * Math.cos(rad);
    r5[2] = p5[2];
    out[0] = r5[0] + b4[0];
    out[1] = r5[1] + b4[1];
    out[2] = r5[2] + b4[2];
    return out;
  }
  function angle2(a6, b4) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const bx = b4[0];
    const by = b4[1];
    const bz = b4[2];
    const mag = Math.sqrt((ax * ax + ay * ay + az * az) * (bx * bx + by * by + bz * bz));
    const cosine = mag && dot2(a6, b4) / mag;
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
  }
  function zero2(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    return out;
  }
  function str2(a6) {
    return `vec3(${a6[0]}, ${a6[1]}, ${a6[2]})`;
  }
  function exactEquals2(a6, b4) {
    return a6[0] === b4[0] && a6[1] === b4[1] && a6[2] === b4[2];
  }
  function equals3(a6, b4) {
    const a0 = a6[0];
    const a1 = a6[1];
    const a22 = a6[2];
    const b0 = b4[0];
    const b1 = b4[1];
    const b22 = b4[2];
    return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a22 - b22) <= EPSILON * Math.max(1, Math.abs(a22), Math.abs(b22));
  }
  var sub2 = subtract2;
  var mul2 = multiply2;
  var div2 = divide2;
  var dist2 = distance2;
  var sqrDist2 = squaredDistance2;
  var len2 = length2;
  var sqrLen2 = squaredLength2;
  var forEach3 = function() {
    const vec = create2();
    return function(a6, stride, offset, count3, fn, arg) {
      let i7;
      let l5;
      if (!stride) {
        stride = 3;
      }
      if (!offset) {
        offset = 0;
      }
      if (count3) {
        l5 = Math.min(count3 * stride + offset, a6.length);
      } else {
        l5 = a6.length;
      }
      for (i7 = offset; i7 < l5; i7 += stride) {
        vec[0] = a6[i7];
        vec[1] = a6[i7 + 1];
        vec[2] = a6[i7 + 2];
        fn(vec, vec, arg);
        a6[i7] = vec[0];
        a6[i7 + 1] = vec[1];
        a6[i7 + 2] = vec[2];
      }
      return a6;
    };
  }();

  // ../../node_modules/@math.gl/core/dist/classes/vector3.js
  var ORIGIN = [0, 0, 0];
  var ZERO;
  var Vector3 = class extends Vector {
    static get ZERO() {
      if (!ZERO) {
        ZERO = new Vector3(0, 0, 0);
        Object.freeze(ZERO);
      }
      return ZERO;
    }
    /**
     * @class
     * @param x
     * @param y
     * @param z
     */
    constructor(x4 = 0, y5 = 0, z4 = 0) {
      super(-0, -0, -0);
      if (arguments.length === 1 && isArray(x4)) {
        this.copy(x4);
      } else {
        if (config.debug) {
          checkNumber(x4);
          checkNumber(y5);
          checkNumber(z4);
        }
        this[0] = x4;
        this[1] = y5;
        this[2] = z4;
      }
    }
    set(x4, y5, z4) {
      this[0] = x4;
      this[1] = y5;
      this[2] = z4;
      return this.check();
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      return this.check();
    }
    fromObject(object) {
      if (config.debug) {
        checkNumber(object.x);
        checkNumber(object.y);
        checkNumber(object.z);
      }
      this[0] = object.x;
      this[1] = object.y;
      this[2] = object.z;
      return this.check();
    }
    toObject(object) {
      object.x = this[0];
      object.y = this[1];
      object.z = this[2];
      return object;
    }
    // Getters/setters
    get ELEMENTS() {
      return 3;
    }
    get z() {
      return this[2];
    }
    set z(value) {
      this[2] = checkNumber(value);
    }
    // ACCESSORS
    angle(vector) {
      return angle2(this, vector);
    }
    // MODIFIERS
    cross(vector) {
      cross2(this, this, vector);
      return this.check();
    }
    rotateX({ radians: radians6, origin = ORIGIN }) {
      rotateX(this, this, origin, radians6);
      return this.check();
    }
    rotateY({ radians: radians6, origin = ORIGIN }) {
      rotateY(this, this, origin, radians6);
      return this.check();
    }
    rotateZ({ radians: radians6, origin = ORIGIN }) {
      rotateZ(this, this, origin, radians6);
      return this.check();
    }
    // Transforms
    // transforms as point (4th component is implicitly 1)
    transform(matrix4) {
      return this.transformAsPoint(matrix4);
    }
    // transforms as point (4th component is implicitly 1)
    transformAsPoint(matrix4) {
      transformMat42(this, this, matrix4);
      return this.check();
    }
    // transforms as vector  (4th component is implicitly 0, ignores translation. slightly faster)
    transformAsVector(matrix4) {
      vec3_transformMat4AsVector(this, this, matrix4);
      return this.check();
    }
    transformByMatrix3(matrix3) {
      transformMat32(this, this, matrix3);
      return this.check();
    }
    transformByMatrix2(matrix2) {
      vec3_transformMat2(this, this, matrix2);
      return this.check();
    }
    transformByQuaternion(quaternion) {
      transformQuat(this, this, quaternion);
      return this.check();
    }
  };

  // ../../node_modules/@math.gl/core/dist/classes/vector4.js
  var ZERO2;
  var Vector4 = class extends Vector {
    static get ZERO() {
      if (!ZERO2) {
        ZERO2 = new Vector4(0, 0, 0, 0);
        Object.freeze(ZERO2);
      }
      return ZERO2;
    }
    constructor(x4 = 0, y5 = 0, z4 = 0, w5 = 0) {
      super(-0, -0, -0, -0);
      if (isArray(x4) && arguments.length === 1) {
        this.copy(x4);
      } else {
        if (config.debug) {
          checkNumber(x4);
          checkNumber(y5);
          checkNumber(z4);
          checkNumber(w5);
        }
        this[0] = x4;
        this[1] = y5;
        this[2] = z4;
        this[3] = w5;
      }
    }
    set(x4, y5, z4, w5) {
      this[0] = x4;
      this[1] = y5;
      this[2] = z4;
      this[3] = w5;
      return this.check();
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      this[3] = array[3];
      return this.check();
    }
    fromObject(object) {
      if (config.debug) {
        checkNumber(object.x);
        checkNumber(object.y);
        checkNumber(object.z);
        checkNumber(object.w);
      }
      this[0] = object.x;
      this[1] = object.y;
      this[2] = object.z;
      this[3] = object.w;
      return this;
    }
    toObject(object) {
      object.x = this[0];
      object.y = this[1];
      object.z = this[2];
      object.w = this[3];
      return object;
    }
    // Getters/setters
    /* eslint-disable no-multi-spaces, brace-style, no-return-assign */
    get ELEMENTS() {
      return 4;
    }
    get z() {
      return this[2];
    }
    set z(value) {
      this[2] = checkNumber(value);
    }
    get w() {
      return this[3];
    }
    set w(value) {
      this[3] = checkNumber(value);
    }
    transform(matrix4) {
      transformMat42(this, this, matrix4);
      return this.check();
    }
    transformByMatrix3(matrix3) {
      vec4_transformMat3(this, this, matrix3);
      return this.check();
    }
    transformByMatrix2(matrix2) {
      vec4_transformMat2(this, this, matrix2);
      return this.check();
    }
    transformByQuaternion(quaternion) {
      transformQuat(this, this, quaternion);
      return this.check();
    }
    // three.js compatibility
    applyMatrix4(m3) {
      m3.transform(this, this);
      return this;
    }
  };

  // ../../node_modules/@math.gl/core/dist/classes/base/matrix.js
  var Matrix = class extends MathArray {
    // fromObject(object) {
    //   const array = object.elements;
    //   return this.fromRowMajor(array);
    // }
    // toObject(object) {
    //   const array = object.elements;
    //   this.toRowMajor(array);
    //   return object;
    // }
    // TODO better override formatString?
    toString() {
      let string = "[";
      if (config.printRowMajor) {
        string += "row-major:";
        for (let row = 0; row < this.RANK; ++row) {
          for (let col = 0; col < this.RANK; ++col) {
            string += ` ${this[col * this.RANK + row]}`;
          }
        }
      } else {
        string += "column-major:";
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          string += ` ${this[i7]}`;
        }
      }
      string += "]";
      return string;
    }
    getElementIndex(row, col) {
      return col * this.RANK + row;
    }
    // By default assumes row major indices
    getElement(row, col) {
      return this[col * this.RANK + row];
    }
    // By default assumes row major indices
    setElement(row, col, value) {
      this[col * this.RANK + row] = checkNumber(value);
      return this;
    }
    getColumn(columnIndex, result = new Array(this.RANK).fill(-0)) {
      const firstIndex = columnIndex * this.RANK;
      for (let i7 = 0; i7 < this.RANK; ++i7) {
        result[i7] = this[firstIndex + i7];
      }
      return result;
    }
    setColumn(columnIndex, columnVector) {
      const firstIndex = columnIndex * this.RANK;
      for (let i7 = 0; i7 < this.RANK; ++i7) {
        this[firstIndex + i7] = columnVector[i7];
      }
      return this;
    }
  };

  // ../../node_modules/@math.gl/core/dist/gl-matrix/mat3.js
  function create3() {
    const out = new ARRAY_TYPE(9);
    if (ARRAY_TYPE != Float32Array) {
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[5] = 0;
      out[6] = 0;
      out[7] = 0;
    }
    out[0] = 1;
    out[4] = 1;
    out[8] = 1;
    return out;
  }
  function transpose(out, a6) {
    if (out === a6) {
      const a01 = a6[1];
      const a02 = a6[2];
      const a12 = a6[5];
      out[1] = a6[3];
      out[2] = a6[6];
      out[3] = a01;
      out[5] = a6[7];
      out[6] = a02;
      out[7] = a12;
    } else {
      out[0] = a6[0];
      out[1] = a6[3];
      out[2] = a6[6];
      out[3] = a6[1];
      out[4] = a6[4];
      out[5] = a6[7];
      out[6] = a6[2];
      out[7] = a6[5];
      out[8] = a6[8];
    }
    return out;
  }
  function invert(out, a6) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    const b01 = a22 * a11 - a12 * a21;
    const b11 = -a22 * a10 + a12 * a20;
    const b21 = a21 * a10 - a11 * a20;
    let det = a00 * b01 + a01 * b11 + a02 * b21;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
  }
  function determinant(a6) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
  }
  function multiply3(out, a6, b4) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    const b00 = b4[0];
    const b01 = b4[1];
    const b02 = b4[2];
    const b10 = b4[3];
    const b11 = b4[4];
    const b12 = b4[5];
    const b20 = b4[6];
    const b21 = b4[7];
    const b22 = b4[8];
    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;
    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;
    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
  }
  function translate(out, a6, v5) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    const x4 = v5[0];
    const y5 = v5[1];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a10;
    out[4] = a11;
    out[5] = a12;
    out[6] = x4 * a00 + y5 * a10 + a20;
    out[7] = x4 * a01 + y5 * a11 + a21;
    out[8] = x4 * a02 + y5 * a12 + a22;
    return out;
  }
  function rotate2(out, a6, rad) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    out[0] = c5 * a00 + s5 * a10;
    out[1] = c5 * a01 + s5 * a11;
    out[2] = c5 * a02 + s5 * a12;
    out[3] = c5 * a10 - s5 * a00;
    out[4] = c5 * a11 - s5 * a01;
    out[5] = c5 * a12 - s5 * a02;
    out[6] = a20;
    out[7] = a21;
    out[8] = a22;
    return out;
  }
  function scale3(out, a6, v5) {
    const x4 = v5[0];
    const y5 = v5[1];
    out[0] = x4 * a6[0];
    out[1] = x4 * a6[1];
    out[2] = x4 * a6[2];
    out[3] = y5 * a6[3];
    out[4] = y5 * a6[4];
    out[5] = y5 * a6[5];
    out[6] = a6[6];
    out[7] = a6[7];
    out[8] = a6[8];
    return out;
  }
  function fromQuat(out, q3) {
    const x4 = q3[0];
    const y5 = q3[1];
    const z4 = q3[2];
    const w5 = q3[3];
    const x22 = x4 + x4;
    const y22 = y5 + y5;
    const z22 = z4 + z4;
    const xx = x4 * x22;
    const yx = y5 * x22;
    const yy = y5 * y22;
    const zx = z4 * x22;
    const zy = z4 * y22;
    const zz = z4 * z22;
    const wx = w5 * x22;
    const wy = w5 * y22;
    const wz = w5 * z22;
    out[0] = 1 - yy - zz;
    out[3] = yx - wz;
    out[6] = zx + wy;
    out[1] = yx + wz;
    out[4] = 1 - xx - zz;
    out[7] = zy - wx;
    out[2] = zx - wy;
    out[5] = zy + wx;
    out[8] = 1 - xx - yy;
    return out;
  }

  // ../../node_modules/@math.gl/core/dist/classes/matrix3.js
  var INDICES;
  (function(INDICES10) {
    INDICES10[INDICES10["COL0ROW0"] = 0] = "COL0ROW0";
    INDICES10[INDICES10["COL0ROW1"] = 1] = "COL0ROW1";
    INDICES10[INDICES10["COL0ROW2"] = 2] = "COL0ROW2";
    INDICES10[INDICES10["COL1ROW0"] = 3] = "COL1ROW0";
    INDICES10[INDICES10["COL1ROW1"] = 4] = "COL1ROW1";
    INDICES10[INDICES10["COL1ROW2"] = 5] = "COL1ROW2";
    INDICES10[INDICES10["COL2ROW0"] = 6] = "COL2ROW0";
    INDICES10[INDICES10["COL2ROW1"] = 7] = "COL2ROW1";
    INDICES10[INDICES10["COL2ROW2"] = 8] = "COL2ROW2";
  })(INDICES || (INDICES = {}));
  var IDENTITY_MATRIX = Object.freeze([1, 0, 0, 0, 1, 0, 0, 0, 1]);
  var Matrix3 = class extends Matrix {
    static get IDENTITY() {
      return getIdentityMatrix();
    }
    static get ZERO() {
      return getZeroMatrix();
    }
    get ELEMENTS() {
      return 9;
    }
    get RANK() {
      return 3;
    }
    get INDICES() {
      return INDICES;
    }
    constructor(array, ...args) {
      super(-0, -0, -0, -0, -0, -0, -0, -0, -0);
      if (arguments.length === 1 && Array.isArray(array)) {
        this.copy(array);
      } else if (args.length > 0) {
        this.copy([array, ...args]);
      } else {
        this.identity();
      }
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      this[3] = array[3];
      this[4] = array[4];
      this[5] = array[5];
      this[6] = array[6];
      this[7] = array[7];
      this[8] = array[8];
      return this.check();
    }
    // Constructors
    identity() {
      return this.copy(IDENTITY_MATRIX);
    }
    /**
     *
     * @param object
     * @returns self
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    fromObject(object) {
      return this.check();
    }
    /** Calculates a 3x3 matrix from the given quaternion
     * q quat  Quaternion to create matrix from
     */
    fromQuaternion(q3) {
      fromQuat(this, q3);
      return this.check();
    }
    /**
     * accepts column major order, stores in column major order
     */
    // eslint-disable-next-line max-params
    set(m00, m10, m20, m01, m11, m21, m02, m12, m22) {
      this[0] = m00;
      this[1] = m10;
      this[2] = m20;
      this[3] = m01;
      this[4] = m11;
      this[5] = m21;
      this[6] = m02;
      this[7] = m12;
      this[8] = m22;
      return this.check();
    }
    /**
     * accepts row major order, stores as column major
     */
    // eslint-disable-next-line max-params
    setRowMajor(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
      this[0] = m00;
      this[1] = m10;
      this[2] = m20;
      this[3] = m01;
      this[4] = m11;
      this[5] = m21;
      this[6] = m02;
      this[7] = m12;
      this[8] = m22;
      return this.check();
    }
    // Accessors
    determinant() {
      return determinant(this);
    }
    // Modifiers
    transpose() {
      transpose(this, this);
      return this.check();
    }
    /** Invert a matrix. Note that this can fail if the matrix is not invertible */
    invert() {
      invert(this, this);
      return this.check();
    }
    // Operations
    multiplyLeft(a6) {
      multiply3(this, a6, this);
      return this.check();
    }
    multiplyRight(a6) {
      multiply3(this, this, a6);
      return this.check();
    }
    rotate(radians6) {
      rotate2(this, this, radians6);
      return this.check();
    }
    scale(factor) {
      if (Array.isArray(factor)) {
        scale3(this, this, factor);
      } else {
        scale3(this, this, [factor, factor]);
      }
      return this.check();
    }
    translate(vec) {
      translate(this, this, vec);
      return this.check();
    }
    // Transforms
    transform(vector, result) {
      let out;
      switch (vector.length) {
        case 2:
          out = transformMat3(result || [-0, -0], vector, this);
          break;
        case 3:
          out = transformMat32(result || [-0, -0, -0], vector, this);
          break;
        case 4:
          out = vec4_transformMat3(result || [-0, -0, -0, -0], vector, this);
          break;
        default:
          throw new Error("Illegal vector");
      }
      checkVector(out, vector.length);
      return out;
    }
    /** @deprecated */
    transformVector(vector, result) {
      return this.transform(vector, result);
    }
    /** @deprecated */
    transformVector2(vector, result) {
      return this.transform(vector, result);
    }
    /** @deprecated */
    transformVector3(vector, result) {
      return this.transform(vector, result);
    }
  };
  var ZERO_MATRIX3;
  var IDENTITY_MATRIX3 = null;
  function getZeroMatrix() {
    if (!ZERO_MATRIX3) {
      ZERO_MATRIX3 = new Matrix3([0, 0, 0, 0, 0, 0, 0, 0, 0]);
      Object.freeze(ZERO_MATRIX3);
    }
    return ZERO_MATRIX3;
  }
  function getIdentityMatrix() {
    if (!IDENTITY_MATRIX3) {
      IDENTITY_MATRIX3 = new Matrix3();
      Object.freeze(IDENTITY_MATRIX3);
    }
    return IDENTITY_MATRIX3;
  }

  // ../../node_modules/@math.gl/core/dist/gl-matrix/mat4.js
  var mat4_exports = {};
  __export(mat4_exports, {
    add: () => add3,
    adjoint: () => adjoint,
    clone: () => clone3,
    copy: () => copy3,
    create: () => create4,
    decompose: () => decompose,
    determinant: () => determinant2,
    equals: () => equals4,
    exactEquals: () => exactEquals3,
    frob: () => frob,
    fromQuat: () => fromQuat3,
    fromQuat2: () => fromQuat2,
    fromRotation: () => fromRotation,
    fromRotationTranslation: () => fromRotationTranslation,
    fromRotationTranslationScale: () => fromRotationTranslationScale,
    fromRotationTranslationScaleOrigin: () => fromRotationTranslationScaleOrigin,
    fromScaling: () => fromScaling,
    fromTranslation: () => fromTranslation,
    fromValues: () => fromValues3,
    fromXRotation: () => fromXRotation,
    fromYRotation: () => fromYRotation,
    fromZRotation: () => fromZRotation,
    frustum: () => frustum,
    getRotation: () => getRotation,
    getScaling: () => getScaling,
    getTranslation: () => getTranslation,
    identity: () => identity,
    invert: () => invert2,
    lookAt: () => lookAt,
    mul: () => mul3,
    multiply: () => multiply4,
    multiplyScalar: () => multiplyScalar,
    multiplyScalarAndAdd: () => multiplyScalarAndAdd,
    ortho: () => ortho,
    orthoNO: () => orthoNO,
    orthoZO: () => orthoZO,
    perspective: () => perspective,
    perspectiveFromFieldOfView: () => perspectiveFromFieldOfView,
    perspectiveNO: () => perspectiveNO,
    perspectiveZO: () => perspectiveZO,
    rotate: () => rotate3,
    rotateX: () => rotateX2,
    rotateY: () => rotateY2,
    rotateZ: () => rotateZ2,
    scale: () => scale4,
    set: () => set3,
    str: () => str3,
    sub: () => sub3,
    subtract: () => subtract3,
    targetTo: () => targetTo,
    translate: () => translate2,
    transpose: () => transpose2
  });
  function create4() {
    const out = new ARRAY_TYPE(16);
    if (ARRAY_TYPE != Float32Array) {
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
    }
    out[0] = 1;
    out[5] = 1;
    out[10] = 1;
    out[15] = 1;
    return out;
  }
  function clone3(a6) {
    const out = new ARRAY_TYPE(16);
    out[0] = a6[0];
    out[1] = a6[1];
    out[2] = a6[2];
    out[3] = a6[3];
    out[4] = a6[4];
    out[5] = a6[5];
    out[6] = a6[6];
    out[7] = a6[7];
    out[8] = a6[8];
    out[9] = a6[9];
    out[10] = a6[10];
    out[11] = a6[11];
    out[12] = a6[12];
    out[13] = a6[13];
    out[14] = a6[14];
    out[15] = a6[15];
    return out;
  }
  function copy3(out, a6) {
    out[0] = a6[0];
    out[1] = a6[1];
    out[2] = a6[2];
    out[3] = a6[3];
    out[4] = a6[4];
    out[5] = a6[5];
    out[6] = a6[6];
    out[7] = a6[7];
    out[8] = a6[8];
    out[9] = a6[9];
    out[10] = a6[10];
    out[11] = a6[11];
    out[12] = a6[12];
    out[13] = a6[13];
    out[14] = a6[14];
    out[15] = a6[15];
    return out;
  }
  function fromValues3(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    const out = new ARRAY_TYPE(16);
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
  }
  function set3(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
  }
  function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function transpose2(out, a6) {
    if (out === a6) {
      const a01 = a6[1];
      const a02 = a6[2];
      const a03 = a6[3];
      const a12 = a6[6];
      const a13 = a6[7];
      const a23 = a6[11];
      out[1] = a6[4];
      out[2] = a6[8];
      out[3] = a6[12];
      out[4] = a01;
      out[6] = a6[9];
      out[7] = a6[13];
      out[8] = a02;
      out[9] = a12;
      out[11] = a6[14];
      out[12] = a03;
      out[13] = a13;
      out[14] = a23;
    } else {
      out[0] = a6[0];
      out[1] = a6[4];
      out[2] = a6[8];
      out[3] = a6[12];
      out[4] = a6[1];
      out[5] = a6[5];
      out[6] = a6[9];
      out[7] = a6[13];
      out[8] = a6[2];
      out[9] = a6[6];
      out[10] = a6[10];
      out[11] = a6[14];
      out[12] = a6[3];
      out[13] = a6[7];
      out[14] = a6[11];
      out[15] = a6[15];
    }
    return out;
  }
  function invert2(out, a6) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    const a30 = a6[12];
    const a31 = a6[13];
    const a32 = a6[14];
    const a33 = a6[15];
    const b00 = a00 * a11 - a01 * a10;
    const b01 = a00 * a12 - a02 * a10;
    const b02 = a00 * a13 - a03 * a10;
    const b03 = a01 * a12 - a02 * a11;
    const b04 = a01 * a13 - a03 * a11;
    const b05 = a02 * a13 - a03 * a12;
    const b06 = a20 * a31 - a21 * a30;
    const b07 = a20 * a32 - a22 * a30;
    const b08 = a20 * a33 - a23 * a30;
    const b09 = a21 * a32 - a22 * a31;
    const b10 = a21 * a33 - a23 * a31;
    const b11 = a22 * a33 - a23 * a32;
    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
    return out;
  }
  function adjoint(out, a6) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    const a30 = a6[12];
    const a31 = a6[13];
    const a32 = a6[14];
    const a33 = a6[15];
    const b00 = a00 * a11 - a01 * a10;
    const b01 = a00 * a12 - a02 * a10;
    const b02 = a00 * a13 - a03 * a10;
    const b03 = a01 * a12 - a02 * a11;
    const b04 = a01 * a13 - a03 * a11;
    const b05 = a02 * a13 - a03 * a12;
    const b06 = a20 * a31 - a21 * a30;
    const b07 = a20 * a32 - a22 * a30;
    const b08 = a20 * a33 - a23 * a30;
    const b09 = a21 * a32 - a22 * a31;
    const b10 = a21 * a33 - a23 * a31;
    const b11 = a22 * a33 - a23 * a32;
    out[0] = a11 * b11 - a12 * b10 + a13 * b09;
    out[1] = a02 * b10 - a01 * b11 - a03 * b09;
    out[2] = a31 * b05 - a32 * b04 + a33 * b03;
    out[3] = a22 * b04 - a21 * b05 - a23 * b03;
    out[4] = a12 * b08 - a10 * b11 - a13 * b07;
    out[5] = a00 * b11 - a02 * b08 + a03 * b07;
    out[6] = a32 * b02 - a30 * b05 - a33 * b01;
    out[7] = a20 * b05 - a22 * b02 + a23 * b01;
    out[8] = a10 * b10 - a11 * b08 + a13 * b06;
    out[9] = a01 * b08 - a00 * b10 - a03 * b06;
    out[10] = a30 * b04 - a31 * b02 + a33 * b00;
    out[11] = a21 * b02 - a20 * b04 - a23 * b00;
    out[12] = a11 * b07 - a10 * b09 - a12 * b06;
    out[13] = a00 * b09 - a01 * b07 + a02 * b06;
    out[14] = a31 * b01 - a30 * b03 - a32 * b00;
    out[15] = a20 * b03 - a21 * b01 + a22 * b00;
    return out;
  }
  function determinant2(a6) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    const a30 = a6[12];
    const a31 = a6[13];
    const a32 = a6[14];
    const a33 = a6[15];
    const b0 = a00 * a11 - a01 * a10;
    const b1 = a00 * a12 - a02 * a10;
    const b22 = a01 * a12 - a02 * a11;
    const b32 = a20 * a31 - a21 * a30;
    const b4 = a20 * a32 - a22 * a30;
    const b5 = a21 * a32 - a22 * a31;
    const b6 = a00 * b5 - a01 * b4 + a02 * b32;
    const b7 = a10 * b5 - a11 * b4 + a12 * b32;
    const b8 = a20 * b22 - a21 * b1 + a22 * b0;
    const b9 = a30 * b22 - a31 * b1 + a32 * b0;
    return a13 * b6 - a03 * b7 + a33 * b8 - a23 * b9;
  }
  function multiply4(out, a6, b4) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    const a30 = a6[12];
    const a31 = a6[13];
    const a32 = a6[14];
    const a33 = a6[15];
    let b0 = b4[0];
    let b1 = b4[1];
    let b22 = b4[2];
    let b32 = b4[3];
    out[0] = b0 * a00 + b1 * a10 + b22 * a20 + b32 * a30;
    out[1] = b0 * a01 + b1 * a11 + b22 * a21 + b32 * a31;
    out[2] = b0 * a02 + b1 * a12 + b22 * a22 + b32 * a32;
    out[3] = b0 * a03 + b1 * a13 + b22 * a23 + b32 * a33;
    b0 = b4[4];
    b1 = b4[5];
    b22 = b4[6];
    b32 = b4[7];
    out[4] = b0 * a00 + b1 * a10 + b22 * a20 + b32 * a30;
    out[5] = b0 * a01 + b1 * a11 + b22 * a21 + b32 * a31;
    out[6] = b0 * a02 + b1 * a12 + b22 * a22 + b32 * a32;
    out[7] = b0 * a03 + b1 * a13 + b22 * a23 + b32 * a33;
    b0 = b4[8];
    b1 = b4[9];
    b22 = b4[10];
    b32 = b4[11];
    out[8] = b0 * a00 + b1 * a10 + b22 * a20 + b32 * a30;
    out[9] = b0 * a01 + b1 * a11 + b22 * a21 + b32 * a31;
    out[10] = b0 * a02 + b1 * a12 + b22 * a22 + b32 * a32;
    out[11] = b0 * a03 + b1 * a13 + b22 * a23 + b32 * a33;
    b0 = b4[12];
    b1 = b4[13];
    b22 = b4[14];
    b32 = b4[15];
    out[12] = b0 * a00 + b1 * a10 + b22 * a20 + b32 * a30;
    out[13] = b0 * a01 + b1 * a11 + b22 * a21 + b32 * a31;
    out[14] = b0 * a02 + b1 * a12 + b22 * a22 + b32 * a32;
    out[15] = b0 * a03 + b1 * a13 + b22 * a23 + b32 * a33;
    return out;
  }
  function translate2(out, a6, v5) {
    const x4 = v5[0];
    const y5 = v5[1];
    const z4 = v5[2];
    let a00;
    let a01;
    let a02;
    let a03;
    let a10;
    let a11;
    let a12;
    let a13;
    let a20;
    let a21;
    let a22;
    let a23;
    if (a6 === out) {
      out[12] = a6[0] * x4 + a6[4] * y5 + a6[8] * z4 + a6[12];
      out[13] = a6[1] * x4 + a6[5] * y5 + a6[9] * z4 + a6[13];
      out[14] = a6[2] * x4 + a6[6] * y5 + a6[10] * z4 + a6[14];
      out[15] = a6[3] * x4 + a6[7] * y5 + a6[11] * z4 + a6[15];
    } else {
      a00 = a6[0];
      a01 = a6[1];
      a02 = a6[2];
      a03 = a6[3];
      a10 = a6[4];
      a11 = a6[5];
      a12 = a6[6];
      a13 = a6[7];
      a20 = a6[8];
      a21 = a6[9];
      a22 = a6[10];
      a23 = a6[11];
      out[0] = a00;
      out[1] = a01;
      out[2] = a02;
      out[3] = a03;
      out[4] = a10;
      out[5] = a11;
      out[6] = a12;
      out[7] = a13;
      out[8] = a20;
      out[9] = a21;
      out[10] = a22;
      out[11] = a23;
      out[12] = a00 * x4 + a10 * y5 + a20 * z4 + a6[12];
      out[13] = a01 * x4 + a11 * y5 + a21 * z4 + a6[13];
      out[14] = a02 * x4 + a12 * y5 + a22 * z4 + a6[14];
      out[15] = a03 * x4 + a13 * y5 + a23 * z4 + a6[15];
    }
    return out;
  }
  function scale4(out, a6, v5) {
    const x4 = v5[0];
    const y5 = v5[1];
    const z4 = v5[2];
    out[0] = a6[0] * x4;
    out[1] = a6[1] * x4;
    out[2] = a6[2] * x4;
    out[3] = a6[3] * x4;
    out[4] = a6[4] * y5;
    out[5] = a6[5] * y5;
    out[6] = a6[6] * y5;
    out[7] = a6[7] * y5;
    out[8] = a6[8] * z4;
    out[9] = a6[9] * z4;
    out[10] = a6[10] * z4;
    out[11] = a6[11] * z4;
    out[12] = a6[12];
    out[13] = a6[13];
    out[14] = a6[14];
    out[15] = a6[15];
    return out;
  }
  function rotate3(out, a6, rad, axis) {
    let x4 = axis[0];
    let y5 = axis[1];
    let z4 = axis[2];
    let len9 = Math.sqrt(x4 * x4 + y5 * y5 + z4 * z4);
    let c5;
    let s5;
    let t5;
    let a00;
    let a01;
    let a02;
    let a03;
    let a10;
    let a11;
    let a12;
    let a13;
    let a20;
    let a21;
    let a22;
    let a23;
    let b00;
    let b01;
    let b02;
    let b10;
    let b11;
    let b12;
    let b20;
    let b21;
    let b22;
    if (len9 < EPSILON) {
      return null;
    }
    len9 = 1 / len9;
    x4 *= len9;
    y5 *= len9;
    z4 *= len9;
    s5 = Math.sin(rad);
    c5 = Math.cos(rad);
    t5 = 1 - c5;
    a00 = a6[0];
    a01 = a6[1];
    a02 = a6[2];
    a03 = a6[3];
    a10 = a6[4];
    a11 = a6[5];
    a12 = a6[6];
    a13 = a6[7];
    a20 = a6[8];
    a21 = a6[9];
    a22 = a6[10];
    a23 = a6[11];
    b00 = x4 * x4 * t5 + c5;
    b01 = y5 * x4 * t5 + z4 * s5;
    b02 = z4 * x4 * t5 - y5 * s5;
    b10 = x4 * y5 * t5 - z4 * s5;
    b11 = y5 * y5 * t5 + c5;
    b12 = z4 * y5 * t5 + x4 * s5;
    b20 = x4 * z4 * t5 + y5 * s5;
    b21 = y5 * z4 * t5 - x4 * s5;
    b22 = z4 * z4 * t5 + c5;
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;
    if (a6 !== out) {
      out[12] = a6[12];
      out[13] = a6[13];
      out[14] = a6[14];
      out[15] = a6[15];
    }
    return out;
  }
  function rotateX2(out, a6, rad) {
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    if (a6 !== out) {
      out[0] = a6[0];
      out[1] = a6[1];
      out[2] = a6[2];
      out[3] = a6[3];
      out[12] = a6[12];
      out[13] = a6[13];
      out[14] = a6[14];
      out[15] = a6[15];
    }
    out[4] = a10 * c5 + a20 * s5;
    out[5] = a11 * c5 + a21 * s5;
    out[6] = a12 * c5 + a22 * s5;
    out[7] = a13 * c5 + a23 * s5;
    out[8] = a20 * c5 - a10 * s5;
    out[9] = a21 * c5 - a11 * s5;
    out[10] = a22 * c5 - a12 * s5;
    out[11] = a23 * c5 - a13 * s5;
    return out;
  }
  function rotateY2(out, a6, rad) {
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    if (a6 !== out) {
      out[4] = a6[4];
      out[5] = a6[5];
      out[6] = a6[6];
      out[7] = a6[7];
      out[12] = a6[12];
      out[13] = a6[13];
      out[14] = a6[14];
      out[15] = a6[15];
    }
    out[0] = a00 * c5 - a20 * s5;
    out[1] = a01 * c5 - a21 * s5;
    out[2] = a02 * c5 - a22 * s5;
    out[3] = a03 * c5 - a23 * s5;
    out[8] = a00 * s5 + a20 * c5;
    out[9] = a01 * s5 + a21 * c5;
    out[10] = a02 * s5 + a22 * c5;
    out[11] = a03 * s5 + a23 * c5;
    return out;
  }
  function rotateZ2(out, a6, rad) {
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    if (a6 !== out) {
      out[8] = a6[8];
      out[9] = a6[9];
      out[10] = a6[10];
      out[11] = a6[11];
      out[12] = a6[12];
      out[13] = a6[13];
      out[14] = a6[14];
      out[15] = a6[15];
    }
    out[0] = a00 * c5 + a10 * s5;
    out[1] = a01 * c5 + a11 * s5;
    out[2] = a02 * c5 + a12 * s5;
    out[3] = a03 * c5 + a13 * s5;
    out[4] = a10 * c5 - a00 * s5;
    out[5] = a11 * c5 - a01 * s5;
    out[6] = a12 * c5 - a02 * s5;
    out[7] = a13 * c5 - a03 * s5;
    return out;
  }
  function fromTranslation(out, v5) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = v5[0];
    out[13] = v5[1];
    out[14] = v5[2];
    out[15] = 1;
    return out;
  }
  function fromScaling(out, v5) {
    out[0] = v5[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = v5[1];
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = v5[2];
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromRotation(out, rad, axis) {
    let x4 = axis[0];
    let y5 = axis[1];
    let z4 = axis[2];
    let len9 = Math.sqrt(x4 * x4 + y5 * y5 + z4 * z4);
    let c5;
    let s5;
    let t5;
    if (len9 < EPSILON) {
      return null;
    }
    len9 = 1 / len9;
    x4 *= len9;
    y5 *= len9;
    z4 *= len9;
    s5 = Math.sin(rad);
    c5 = Math.cos(rad);
    t5 = 1 - c5;
    out[0] = x4 * x4 * t5 + c5;
    out[1] = y5 * x4 * t5 + z4 * s5;
    out[2] = z4 * x4 * t5 - y5 * s5;
    out[3] = 0;
    out[4] = x4 * y5 * t5 - z4 * s5;
    out[5] = y5 * y5 * t5 + c5;
    out[6] = z4 * y5 * t5 + x4 * s5;
    out[7] = 0;
    out[8] = x4 * z4 * t5 + y5 * s5;
    out[9] = y5 * z4 * t5 - x4 * s5;
    out[10] = z4 * z4 * t5 + c5;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromXRotation(out, rad) {
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = c5;
    out[6] = s5;
    out[7] = 0;
    out[8] = 0;
    out[9] = -s5;
    out[10] = c5;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromYRotation(out, rad) {
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    out[0] = c5;
    out[1] = 0;
    out[2] = -s5;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = s5;
    out[9] = 0;
    out[10] = c5;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromZRotation(out, rad) {
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    out[0] = c5;
    out[1] = s5;
    out[2] = 0;
    out[3] = 0;
    out[4] = -s5;
    out[5] = c5;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromRotationTranslation(out, q3, v5) {
    const x4 = q3[0];
    const y5 = q3[1];
    const z4 = q3[2];
    const w5 = q3[3];
    const x22 = x4 + x4;
    const y22 = y5 + y5;
    const z22 = z4 + z4;
    const xx = x4 * x22;
    const xy = x4 * y22;
    const xz = x4 * z22;
    const yy = y5 * y22;
    const yz = y5 * z22;
    const zz = z4 * z22;
    const wx = w5 * x22;
    const wy = w5 * y22;
    const wz = w5 * z22;
    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v5[0];
    out[13] = v5[1];
    out[14] = v5[2];
    out[15] = 1;
    return out;
  }
  function fromQuat2(out, a6) {
    const translation2 = new ARRAY_TYPE(3);
    const bx = -a6[0];
    const by = -a6[1];
    const bz = -a6[2];
    const bw = a6[3];
    const ax = a6[4];
    const ay = a6[5];
    const az = a6[6];
    const aw = a6[7];
    const magnitude = bx * bx + by * by + bz * bz + bw * bw;
    if (magnitude > 0) {
      translation2[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
      translation2[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
      translation2[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
    } else {
      translation2[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
      translation2[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
      translation2[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
    }
    fromRotationTranslation(out, a6, translation2);
    return out;
  }
  function getTranslation(out, mat) {
    out[0] = mat[12];
    out[1] = mat[13];
    out[2] = mat[14];
    return out;
  }
  function getScaling(out, mat) {
    const m11 = mat[0];
    const m12 = mat[1];
    const m13 = mat[2];
    const m21 = mat[4];
    const m22 = mat[5];
    const m23 = mat[6];
    const m31 = mat[8];
    const m32 = mat[9];
    const m33 = mat[10];
    out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
    out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
    out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);
    return out;
  }
  function getRotation(out, mat) {
    const scaling = new ARRAY_TYPE(3);
    getScaling(scaling, mat);
    const is1 = 1 / scaling[0];
    const is2 = 1 / scaling[1];
    const is3 = 1 / scaling[2];
    const sm11 = mat[0] * is1;
    const sm12 = mat[1] * is2;
    const sm13 = mat[2] * is3;
    const sm21 = mat[4] * is1;
    const sm22 = mat[5] * is2;
    const sm23 = mat[6] * is3;
    const sm31 = mat[8] * is1;
    const sm32 = mat[9] * is2;
    const sm33 = mat[10] * is3;
    const trace = sm11 + sm22 + sm33;
    let S3 = 0;
    if (trace > 0) {
      S3 = Math.sqrt(trace + 1) * 2;
      out[3] = 0.25 * S3;
      out[0] = (sm23 - sm32) / S3;
      out[1] = (sm31 - sm13) / S3;
      out[2] = (sm12 - sm21) / S3;
    } else if (sm11 > sm22 && sm11 > sm33) {
      S3 = Math.sqrt(1 + sm11 - sm22 - sm33) * 2;
      out[3] = (sm23 - sm32) / S3;
      out[0] = 0.25 * S3;
      out[1] = (sm12 + sm21) / S3;
      out[2] = (sm31 + sm13) / S3;
    } else if (sm22 > sm33) {
      S3 = Math.sqrt(1 + sm22 - sm11 - sm33) * 2;
      out[3] = (sm31 - sm13) / S3;
      out[0] = (sm12 + sm21) / S3;
      out[1] = 0.25 * S3;
      out[2] = (sm23 + sm32) / S3;
    } else {
      S3 = Math.sqrt(1 + sm33 - sm11 - sm22) * 2;
      out[3] = (sm12 - sm21) / S3;
      out[0] = (sm31 + sm13) / S3;
      out[1] = (sm23 + sm32) / S3;
      out[2] = 0.25 * S3;
    }
    return out;
  }
  function decompose(out_r, out_t, out_s, mat) {
    out_t[0] = mat[12];
    out_t[1] = mat[13];
    out_t[2] = mat[14];
    const m11 = mat[0];
    const m12 = mat[1];
    const m13 = mat[2];
    const m21 = mat[4];
    const m22 = mat[5];
    const m23 = mat[6];
    const m31 = mat[8];
    const m32 = mat[9];
    const m33 = mat[10];
    out_s[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
    out_s[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
    out_s[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);
    const is1 = 1 / out_s[0];
    const is2 = 1 / out_s[1];
    const is3 = 1 / out_s[2];
    const sm11 = m11 * is1;
    const sm12 = m12 * is2;
    const sm13 = m13 * is3;
    const sm21 = m21 * is1;
    const sm22 = m22 * is2;
    const sm23 = m23 * is3;
    const sm31 = m31 * is1;
    const sm32 = m32 * is2;
    const sm33 = m33 * is3;
    const trace = sm11 + sm22 + sm33;
    let S3 = 0;
    if (trace > 0) {
      S3 = Math.sqrt(trace + 1) * 2;
      out_r[3] = 0.25 * S3;
      out_r[0] = (sm23 - sm32) / S3;
      out_r[1] = (sm31 - sm13) / S3;
      out_r[2] = (sm12 - sm21) / S3;
    } else if (sm11 > sm22 && sm11 > sm33) {
      S3 = Math.sqrt(1 + sm11 - sm22 - sm33) * 2;
      out_r[3] = (sm23 - sm32) / S3;
      out_r[0] = 0.25 * S3;
      out_r[1] = (sm12 + sm21) / S3;
      out_r[2] = (sm31 + sm13) / S3;
    } else if (sm22 > sm33) {
      S3 = Math.sqrt(1 + sm22 - sm11 - sm33) * 2;
      out_r[3] = (sm31 - sm13) / S3;
      out_r[0] = (sm12 + sm21) / S3;
      out_r[1] = 0.25 * S3;
      out_r[2] = (sm23 + sm32) / S3;
    } else {
      S3 = Math.sqrt(1 + sm33 - sm11 - sm22) * 2;
      out_r[3] = (sm12 - sm21) / S3;
      out_r[0] = (sm31 + sm13) / S3;
      out_r[1] = (sm23 + sm32) / S3;
      out_r[2] = 0.25 * S3;
    }
    return out_r;
  }
  function fromRotationTranslationScale(out, q3, v5, s5) {
    const x4 = q3[0];
    const y5 = q3[1];
    const z4 = q3[2];
    const w5 = q3[3];
    const x22 = x4 + x4;
    const y22 = y5 + y5;
    const z22 = z4 + z4;
    const xx = x4 * x22;
    const xy = x4 * y22;
    const xz = x4 * z22;
    const yy = y5 * y22;
    const yz = y5 * z22;
    const zz = z4 * z22;
    const wx = w5 * x22;
    const wy = w5 * y22;
    const wz = w5 * z22;
    const sx = s5[0];
    const sy = s5[1];
    const sz = s5[2];
    out[0] = (1 - (yy + zz)) * sx;
    out[1] = (xy + wz) * sx;
    out[2] = (xz - wy) * sx;
    out[3] = 0;
    out[4] = (xy - wz) * sy;
    out[5] = (1 - (xx + zz)) * sy;
    out[6] = (yz + wx) * sy;
    out[7] = 0;
    out[8] = (xz + wy) * sz;
    out[9] = (yz - wx) * sz;
    out[10] = (1 - (xx + yy)) * sz;
    out[11] = 0;
    out[12] = v5[0];
    out[13] = v5[1];
    out[14] = v5[2];
    out[15] = 1;
    return out;
  }
  function fromRotationTranslationScaleOrigin(out, q3, v5, s5, o5) {
    const x4 = q3[0];
    const y5 = q3[1];
    const z4 = q3[2];
    const w5 = q3[3];
    const x22 = x4 + x4;
    const y22 = y5 + y5;
    const z22 = z4 + z4;
    const xx = x4 * x22;
    const xy = x4 * y22;
    const xz = x4 * z22;
    const yy = y5 * y22;
    const yz = y5 * z22;
    const zz = z4 * z22;
    const wx = w5 * x22;
    const wy = w5 * y22;
    const wz = w5 * z22;
    const sx = s5[0];
    const sy = s5[1];
    const sz = s5[2];
    const ox = o5[0];
    const oy = o5[1];
    const oz = o5[2];
    const out0 = (1 - (yy + zz)) * sx;
    const out1 = (xy + wz) * sx;
    const out2 = (xz - wy) * sx;
    const out4 = (xy - wz) * sy;
    const out5 = (1 - (xx + zz)) * sy;
    const out6 = (yz + wx) * sy;
    const out8 = (xz + wy) * sz;
    const out9 = (yz - wx) * sz;
    const out10 = (1 - (xx + yy)) * sz;
    out[0] = out0;
    out[1] = out1;
    out[2] = out2;
    out[3] = 0;
    out[4] = out4;
    out[5] = out5;
    out[6] = out6;
    out[7] = 0;
    out[8] = out8;
    out[9] = out9;
    out[10] = out10;
    out[11] = 0;
    out[12] = v5[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
    out[13] = v5[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
    out[14] = v5[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
    out[15] = 1;
    return out;
  }
  function fromQuat3(out, q3) {
    const x4 = q3[0];
    const y5 = q3[1];
    const z4 = q3[2];
    const w5 = q3[3];
    const x22 = x4 + x4;
    const y22 = y5 + y5;
    const z22 = z4 + z4;
    const xx = x4 * x22;
    const yx = y5 * x22;
    const yy = y5 * y22;
    const zx = z4 * x22;
    const zy = z4 * y22;
    const zz = z4 * z22;
    const wx = w5 * x22;
    const wy = w5 * y22;
    const wz = w5 * z22;
    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;
    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;
    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function frustum(out, left, right, bottom, top, near, far) {
    const rl = 1 / (right - left);
    const tb = 1 / (top - bottom);
    const nf = 1 / (near - far);
    out[0] = near * 2 * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = near * 2 * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = far * near * 2 * nf;
    out[15] = 0;
    return out;
  }
  function perspectiveNO(out, fovy, aspect, near, far) {
    const f6 = 1 / Math.tan(fovy / 2);
    out[0] = f6 / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f6;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
      const nf = 1 / (near - far);
      out[10] = (far + near) * nf;
      out[14] = 2 * far * near * nf;
    } else {
      out[10] = -1;
      out[14] = -2 * near;
    }
    return out;
  }
  var perspective = perspectiveNO;
  function perspectiveZO(out, fovy, aspect, near, far) {
    const f6 = 1 / Math.tan(fovy / 2);
    out[0] = f6 / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f6;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
      const nf = 1 / (near - far);
      out[10] = far * nf;
      out[14] = far * near * nf;
    } else {
      out[10] = -1;
      out[14] = -near;
    }
    return out;
  }
  function perspectiveFromFieldOfView(out, fov, near, far) {
    const upTan = Math.tan(fov.upDegrees * Math.PI / 180);
    const downTan = Math.tan(fov.downDegrees * Math.PI / 180);
    const leftTan = Math.tan(fov.leftDegrees * Math.PI / 180);
    const rightTan = Math.tan(fov.rightDegrees * Math.PI / 180);
    const xScale = 2 / (leftTan + rightTan);
    const yScale = 2 / (upTan + downTan);
    out[0] = xScale;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = yScale;
    out[6] = 0;
    out[7] = 0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = (upTan - downTan) * yScale * 0.5;
    out[10] = far / (near - far);
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = far * near / (near - far);
    out[15] = 0;
    return out;
  }
  function orthoNO(out, left, right, bottom, top, near, far) {
    const lr = 1 / (left - right);
    const bt = 1 / (bottom - top);
    const nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
  }
  var ortho = orthoNO;
  function orthoZO(out, left, right, bottom, top, near, far) {
    const lr = 1 / (left - right);
    const bt = 1 / (bottom - top);
    const nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = near * nf;
    out[15] = 1;
    return out;
  }
  function lookAt(out, eye, center2, up) {
    let len9;
    let x0;
    let x1;
    let x22;
    let y0;
    let y1;
    let y22;
    let z0;
    let z1;
    let z22;
    const eyex = eye[0];
    const eyey = eye[1];
    const eyez = eye[2];
    const upx = up[0];
    const upy = up[1];
    const upz = up[2];
    const centerx = center2[0];
    const centery = center2[1];
    const centerz = center2[2];
    if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) {
      return identity(out);
    }
    z0 = eyex - centerx;
    z1 = eyey - centery;
    z22 = eyez - centerz;
    len9 = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z22 * z22);
    z0 *= len9;
    z1 *= len9;
    z22 *= len9;
    x0 = upy * z22 - upz * z1;
    x1 = upz * z0 - upx * z22;
    x22 = upx * z1 - upy * z0;
    len9 = Math.sqrt(x0 * x0 + x1 * x1 + x22 * x22);
    if (!len9) {
      x0 = 0;
      x1 = 0;
      x22 = 0;
    } else {
      len9 = 1 / len9;
      x0 *= len9;
      x1 *= len9;
      x22 *= len9;
    }
    y0 = z1 * x22 - z22 * x1;
    y1 = z22 * x0 - z0 * x22;
    y22 = z0 * x1 - z1 * x0;
    len9 = Math.sqrt(y0 * y0 + y1 * y1 + y22 * y22);
    if (!len9) {
      y0 = 0;
      y1 = 0;
      y22 = 0;
    } else {
      len9 = 1 / len9;
      y0 *= len9;
      y1 *= len9;
      y22 *= len9;
    }
    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x22;
    out[9] = y22;
    out[10] = z22;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x22 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y22 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z22 * eyez);
    out[15] = 1;
    return out;
  }
  function targetTo(out, eye, target2, up) {
    const eyex = eye[0];
    const eyey = eye[1];
    const eyez = eye[2];
    const upx = up[0];
    const upy = up[1];
    const upz = up[2];
    let z0 = eyex - target2[0];
    let z1 = eyey - target2[1];
    let z22 = eyez - target2[2];
    let len9 = z0 * z0 + z1 * z1 + z22 * z22;
    if (len9 > 0) {
      len9 = 1 / Math.sqrt(len9);
      z0 *= len9;
      z1 *= len9;
      z22 *= len9;
    }
    let x0 = upy * z22 - upz * z1;
    let x1 = upz * z0 - upx * z22;
    let x22 = upx * z1 - upy * z0;
    len9 = x0 * x0 + x1 * x1 + x22 * x22;
    if (len9 > 0) {
      len9 = 1 / Math.sqrt(len9);
      x0 *= len9;
      x1 *= len9;
      x22 *= len9;
    }
    out[0] = x0;
    out[1] = x1;
    out[2] = x22;
    out[3] = 0;
    out[4] = z1 * x22 - z22 * x1;
    out[5] = z22 * x0 - z0 * x22;
    out[6] = z0 * x1 - z1 * x0;
    out[7] = 0;
    out[8] = z0;
    out[9] = z1;
    out[10] = z22;
    out[11] = 0;
    out[12] = eyex;
    out[13] = eyey;
    out[14] = eyez;
    out[15] = 1;
    return out;
  }
  function str3(a6) {
    return `mat4(${a6[0]}, ${a6[1]}, ${a6[2]}, ${a6[3]}, ${a6[4]}, ${a6[5]}, ${a6[6]}, ${a6[7]}, ${a6[8]}, ${a6[9]}, ${a6[10]}, ${a6[11]}, ${a6[12]}, ${a6[13]}, ${a6[14]}, ${a6[15]})`;
  }
  function frob(a6) {
    return Math.sqrt(a6[0] * a6[0] + a6[1] * a6[1] + a6[2] * a6[2] + a6[3] * a6[3] + a6[4] * a6[4] + a6[5] * a6[5] + a6[6] * a6[6] + a6[7] * a6[7] + a6[8] * a6[8] + a6[9] * a6[9] + a6[10] * a6[10] + a6[11] * a6[11] + a6[12] * a6[12] + a6[13] * a6[13] + a6[14] * a6[14] + a6[15] * a6[15]);
  }
  function add3(out, a6, b4) {
    out[0] = a6[0] + b4[0];
    out[1] = a6[1] + b4[1];
    out[2] = a6[2] + b4[2];
    out[3] = a6[3] + b4[3];
    out[4] = a6[4] + b4[4];
    out[5] = a6[5] + b4[5];
    out[6] = a6[6] + b4[6];
    out[7] = a6[7] + b4[7];
    out[8] = a6[8] + b4[8];
    out[9] = a6[9] + b4[9];
    out[10] = a6[10] + b4[10];
    out[11] = a6[11] + b4[11];
    out[12] = a6[12] + b4[12];
    out[13] = a6[13] + b4[13];
    out[14] = a6[14] + b4[14];
    out[15] = a6[15] + b4[15];
    return out;
  }
  function subtract3(out, a6, b4) {
    out[0] = a6[0] - b4[0];
    out[1] = a6[1] - b4[1];
    out[2] = a6[2] - b4[2];
    out[3] = a6[3] - b4[3];
    out[4] = a6[4] - b4[4];
    out[5] = a6[5] - b4[5];
    out[6] = a6[6] - b4[6];
    out[7] = a6[7] - b4[7];
    out[8] = a6[8] - b4[8];
    out[9] = a6[9] - b4[9];
    out[10] = a6[10] - b4[10];
    out[11] = a6[11] - b4[11];
    out[12] = a6[12] - b4[12];
    out[13] = a6[13] - b4[13];
    out[14] = a6[14] - b4[14];
    out[15] = a6[15] - b4[15];
    return out;
  }
  function multiplyScalar(out, a6, b4) {
    out[0] = a6[0] * b4;
    out[1] = a6[1] * b4;
    out[2] = a6[2] * b4;
    out[3] = a6[3] * b4;
    out[4] = a6[4] * b4;
    out[5] = a6[5] * b4;
    out[6] = a6[6] * b4;
    out[7] = a6[7] * b4;
    out[8] = a6[8] * b4;
    out[9] = a6[9] * b4;
    out[10] = a6[10] * b4;
    out[11] = a6[11] * b4;
    out[12] = a6[12] * b4;
    out[13] = a6[13] * b4;
    out[14] = a6[14] * b4;
    out[15] = a6[15] * b4;
    return out;
  }
  function multiplyScalarAndAdd(out, a6, b4, scale24) {
    out[0] = a6[0] + b4[0] * scale24;
    out[1] = a6[1] + b4[1] * scale24;
    out[2] = a6[2] + b4[2] * scale24;
    out[3] = a6[3] + b4[3] * scale24;
    out[4] = a6[4] + b4[4] * scale24;
    out[5] = a6[5] + b4[5] * scale24;
    out[6] = a6[6] + b4[6] * scale24;
    out[7] = a6[7] + b4[7] * scale24;
    out[8] = a6[8] + b4[8] * scale24;
    out[9] = a6[9] + b4[9] * scale24;
    out[10] = a6[10] + b4[10] * scale24;
    out[11] = a6[11] + b4[11] * scale24;
    out[12] = a6[12] + b4[12] * scale24;
    out[13] = a6[13] + b4[13] * scale24;
    out[14] = a6[14] + b4[14] * scale24;
    out[15] = a6[15] + b4[15] * scale24;
    return out;
  }
  function exactEquals3(a6, b4) {
    return a6[0] === b4[0] && a6[1] === b4[1] && a6[2] === b4[2] && a6[3] === b4[3] && a6[4] === b4[4] && a6[5] === b4[5] && a6[6] === b4[6] && a6[7] === b4[7] && a6[8] === b4[8] && a6[9] === b4[9] && a6[10] === b4[10] && a6[11] === b4[11] && a6[12] === b4[12] && a6[13] === b4[13] && a6[14] === b4[14] && a6[15] === b4[15];
  }
  function equals4(a6, b4) {
    const a0 = a6[0];
    const a1 = a6[1];
    const a22 = a6[2];
    const a32 = a6[3];
    const a42 = a6[4];
    const a52 = a6[5];
    const a62 = a6[6];
    const a7 = a6[7];
    const a8 = a6[8];
    const a9 = a6[9];
    const a10 = a6[10];
    const a11 = a6[11];
    const a12 = a6[12];
    const a13 = a6[13];
    const a14 = a6[14];
    const a15 = a6[15];
    const b0 = b4[0];
    const b1 = b4[1];
    const b22 = b4[2];
    const b32 = b4[3];
    const b42 = b4[4];
    const b5 = b4[5];
    const b6 = b4[6];
    const b7 = b4[7];
    const b8 = b4[8];
    const b9 = b4[9];
    const b10 = b4[10];
    const b11 = b4[11];
    const b12 = b4[12];
    const b13 = b4[13];
    const b14 = b4[14];
    const b15 = b4[15];
    return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a22 - b22) <= EPSILON * Math.max(1, Math.abs(a22), Math.abs(b22)) && Math.abs(a32 - b32) <= EPSILON * Math.max(1, Math.abs(a32), Math.abs(b32)) && Math.abs(a42 - b42) <= EPSILON * Math.max(1, Math.abs(a42), Math.abs(b42)) && Math.abs(a52 - b5) <= EPSILON * Math.max(1, Math.abs(a52), Math.abs(b5)) && Math.abs(a62 - b6) <= EPSILON * Math.max(1, Math.abs(a62), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON * Math.max(1, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON * Math.max(1, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON * Math.max(1, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON * Math.max(1, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON * Math.max(1, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON * Math.max(1, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON * Math.max(1, Math.abs(a15), Math.abs(b15));
  }
  var mul3 = multiply4;
  var sub3 = subtract3;

  // ../../node_modules/@math.gl/core/dist/gl-matrix/vec4.js
  var vec4_exports = {};
  __export(vec4_exports, {
    add: () => add4,
    ceil: () => ceil3,
    clone: () => clone4,
    copy: () => copy4,
    create: () => create5,
    cross: () => cross3,
    dist: () => dist3,
    distance: () => distance3,
    div: () => div3,
    divide: () => divide3,
    dot: () => dot3,
    equals: () => equals5,
    exactEquals: () => exactEquals4,
    floor: () => floor3,
    forEach: () => forEach4,
    fromValues: () => fromValues4,
    inverse: () => inverse3,
    len: () => len3,
    length: () => length3,
    lerp: () => lerp4,
    max: () => max3,
    min: () => min3,
    mul: () => mul4,
    multiply: () => multiply5,
    negate: () => negate3,
    normalize: () => normalize3,
    random: () => random3,
    round: () => round5,
    scale: () => scale5,
    scaleAndAdd: () => scaleAndAdd3,
    set: () => set4,
    sqrDist: () => sqrDist3,
    sqrLen: () => sqrLen3,
    squaredDistance: () => squaredDistance3,
    squaredLength: () => squaredLength3,
    str: () => str4,
    sub: () => sub4,
    subtract: () => subtract4,
    transformMat4: () => transformMat43,
    transformQuat: () => transformQuat2,
    zero: () => zero3
  });
  function create5() {
    const out = new ARRAY_TYPE(4);
    if (ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
    }
    return out;
  }
  function clone4(a6) {
    const out = new ARRAY_TYPE(4);
    out[0] = a6[0];
    out[1] = a6[1];
    out[2] = a6[2];
    out[3] = a6[3];
    return out;
  }
  function fromValues4(x4, y5, z4, w5) {
    const out = new ARRAY_TYPE(4);
    out[0] = x4;
    out[1] = y5;
    out[2] = z4;
    out[3] = w5;
    return out;
  }
  function copy4(out, a6) {
    out[0] = a6[0];
    out[1] = a6[1];
    out[2] = a6[2];
    out[3] = a6[3];
    return out;
  }
  function set4(out, x4, y5, z4, w5) {
    out[0] = x4;
    out[1] = y5;
    out[2] = z4;
    out[3] = w5;
    return out;
  }
  function add4(out, a6, b4) {
    out[0] = a6[0] + b4[0];
    out[1] = a6[1] + b4[1];
    out[2] = a6[2] + b4[2];
    out[3] = a6[3] + b4[3];
    return out;
  }
  function subtract4(out, a6, b4) {
    out[0] = a6[0] - b4[0];
    out[1] = a6[1] - b4[1];
    out[2] = a6[2] - b4[2];
    out[3] = a6[3] - b4[3];
    return out;
  }
  function multiply5(out, a6, b4) {
    out[0] = a6[0] * b4[0];
    out[1] = a6[1] * b4[1];
    out[2] = a6[2] * b4[2];
    out[3] = a6[3] * b4[3];
    return out;
  }
  function divide3(out, a6, b4) {
    out[0] = a6[0] / b4[0];
    out[1] = a6[1] / b4[1];
    out[2] = a6[2] / b4[2];
    out[3] = a6[3] / b4[3];
    return out;
  }
  function ceil3(out, a6) {
    out[0] = Math.ceil(a6[0]);
    out[1] = Math.ceil(a6[1]);
    out[2] = Math.ceil(a6[2]);
    out[3] = Math.ceil(a6[3]);
    return out;
  }
  function floor3(out, a6) {
    out[0] = Math.floor(a6[0]);
    out[1] = Math.floor(a6[1]);
    out[2] = Math.floor(a6[2]);
    out[3] = Math.floor(a6[3]);
    return out;
  }
  function min3(out, a6, b4) {
    out[0] = Math.min(a6[0], b4[0]);
    out[1] = Math.min(a6[1], b4[1]);
    out[2] = Math.min(a6[2], b4[2]);
    out[3] = Math.min(a6[3], b4[3]);
    return out;
  }
  function max3(out, a6, b4) {
    out[0] = Math.max(a6[0], b4[0]);
    out[1] = Math.max(a6[1], b4[1]);
    out[2] = Math.max(a6[2], b4[2]);
    out[3] = Math.max(a6[3], b4[3]);
    return out;
  }
  function round5(out, a6) {
    out[0] = round2(a6[0]);
    out[1] = round2(a6[1]);
    out[2] = round2(a6[2]);
    out[3] = round2(a6[3]);
    return out;
  }
  function scale5(out, a6, b4) {
    out[0] = a6[0] * b4;
    out[1] = a6[1] * b4;
    out[2] = a6[2] * b4;
    out[3] = a6[3] * b4;
    return out;
  }
  function scaleAndAdd3(out, a6, b4, scale24) {
    out[0] = a6[0] + b4[0] * scale24;
    out[1] = a6[1] + b4[1] * scale24;
    out[2] = a6[2] + b4[2] * scale24;
    out[3] = a6[3] + b4[3] * scale24;
    return out;
  }
  function distance3(a6, b4) {
    const x4 = b4[0] - a6[0];
    const y5 = b4[1] - a6[1];
    const z4 = b4[2] - a6[2];
    const w5 = b4[3] - a6[3];
    return Math.sqrt(x4 * x4 + y5 * y5 + z4 * z4 + w5 * w5);
  }
  function squaredDistance3(a6, b4) {
    const x4 = b4[0] - a6[0];
    const y5 = b4[1] - a6[1];
    const z4 = b4[2] - a6[2];
    const w5 = b4[3] - a6[3];
    return x4 * x4 + y5 * y5 + z4 * z4 + w5 * w5;
  }
  function length3(a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = a6[3];
    return Math.sqrt(x4 * x4 + y5 * y5 + z4 * z4 + w5 * w5);
  }
  function squaredLength3(a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = a6[3];
    return x4 * x4 + y5 * y5 + z4 * z4 + w5 * w5;
  }
  function negate3(out, a6) {
    out[0] = -a6[0];
    out[1] = -a6[1];
    out[2] = -a6[2];
    out[3] = -a6[3];
    return out;
  }
  function inverse3(out, a6) {
    out[0] = 1 / a6[0];
    out[1] = 1 / a6[1];
    out[2] = 1 / a6[2];
    out[3] = 1 / a6[3];
    return out;
  }
  function normalize3(out, a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = a6[3];
    let len9 = x4 * x4 + y5 * y5 + z4 * z4 + w5 * w5;
    if (len9 > 0) {
      len9 = 1 / Math.sqrt(len9);
    }
    out[0] = x4 * len9;
    out[1] = y5 * len9;
    out[2] = z4 * len9;
    out[3] = w5 * len9;
    return out;
  }
  function dot3(a6, b4) {
    return a6[0] * b4[0] + a6[1] * b4[1] + a6[2] * b4[2] + a6[3] * b4[3];
  }
  function cross3(out, u6, v5, w5) {
    const A5 = v5[0] * w5[1] - v5[1] * w5[0];
    const B5 = v5[0] * w5[2] - v5[2] * w5[0];
    const C5 = v5[0] * w5[3] - v5[3] * w5[0];
    const D4 = v5[1] * w5[2] - v5[2] * w5[1];
    const E3 = v5[1] * w5[3] - v5[3] * w5[1];
    const F4 = v5[2] * w5[3] - v5[3] * w5[2];
    const G3 = u6[0];
    const H2 = u6[1];
    const I3 = u6[2];
    const J2 = u6[3];
    out[0] = H2 * F4 - I3 * E3 + J2 * D4;
    out[1] = -(G3 * F4) + I3 * C5 - J2 * B5;
    out[2] = G3 * E3 - H2 * C5 + J2 * A5;
    out[3] = -(G3 * D4) + H2 * B5 - I3 * A5;
    return out;
  }
  function lerp4(out, a6, b4, t5) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    out[0] = ax + t5 * (b4[0] - ax);
    out[1] = ay + t5 * (b4[1] - ay);
    out[2] = az + t5 * (b4[2] - az);
    out[3] = aw + t5 * (b4[3] - aw);
    return out;
  }
  function random3(out, scale24) {
    scale24 = scale24 === void 0 ? 1 : scale24;
    let v1;
    let v22;
    let v32;
    let v42;
    let s1;
    let s22;
    do {
      v1 = RANDOM() * 2 - 1;
      v22 = RANDOM() * 2 - 1;
      s1 = v1 * v1 + v22 * v22;
    } while (s1 >= 1);
    do {
      v32 = RANDOM() * 2 - 1;
      v42 = RANDOM() * 2 - 1;
      s22 = v32 * v32 + v42 * v42;
    } while (s22 >= 1);
    const d5 = Math.sqrt((1 - s1) / s22);
    out[0] = scale24 * v1;
    out[1] = scale24 * v22;
    out[2] = scale24 * v32 * d5;
    out[3] = scale24 * v42 * d5;
    return out;
  }
  function transformMat43(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = a6[3];
    out[0] = m3[0] * x4 + m3[4] * y5 + m3[8] * z4 + m3[12] * w5;
    out[1] = m3[1] * x4 + m3[5] * y5 + m3[9] * z4 + m3[13] * w5;
    out[2] = m3[2] * x4 + m3[6] * y5 + m3[10] * z4 + m3[14] * w5;
    out[3] = m3[3] * x4 + m3[7] * y5 + m3[11] * z4 + m3[15] * w5;
    return out;
  }
  function transformQuat2(out, a6, q3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const qx = q3[0];
    const qy = q3[1];
    const qz = q3[2];
    const qw = q3[3];
    const ix = qw * x4 + qy * z4 - qz * y5;
    const iy = qw * y5 + qz * x4 - qx * z4;
    const iz = qw * z4 + qx * y5 - qy * x4;
    const iw = -qx * x4 - qy * y5 - qz * z4;
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    out[3] = a6[3];
    return out;
  }
  function zero3(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    return out;
  }
  function str4(a6) {
    return `vec4(${a6[0]}, ${a6[1]}, ${a6[2]}, ${a6[3]})`;
  }
  function exactEquals4(a6, b4) {
    return a6[0] === b4[0] && a6[1] === b4[1] && a6[2] === b4[2] && a6[3] === b4[3];
  }
  function equals5(a6, b4) {
    const a0 = a6[0];
    const a1 = a6[1];
    const a22 = a6[2];
    const a32 = a6[3];
    const b0 = b4[0];
    const b1 = b4[1];
    const b22 = b4[2];
    const b32 = b4[3];
    return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a22 - b22) <= EPSILON * Math.max(1, Math.abs(a22), Math.abs(b22)) && Math.abs(a32 - b32) <= EPSILON * Math.max(1, Math.abs(a32), Math.abs(b32));
  }
  var sub4 = subtract4;
  var mul4 = multiply5;
  var div3 = divide3;
  var dist3 = distance3;
  var sqrDist3 = squaredDistance3;
  var len3 = length3;
  var sqrLen3 = squaredLength3;
  var forEach4 = function() {
    const vec = create5();
    return function(a6, stride, offset, count3, fn, arg) {
      let i7;
      let l5;
      if (!stride) {
        stride = 4;
      }
      if (!offset) {
        offset = 0;
      }
      if (count3) {
        l5 = Math.min(count3 * stride + offset, a6.length);
      } else {
        l5 = a6.length;
      }
      for (i7 = offset; i7 < l5; i7 += stride) {
        vec[0] = a6[i7];
        vec[1] = a6[i7 + 1];
        vec[2] = a6[i7 + 2];
        vec[3] = a6[i7 + 3];
        fn(vec, vec, arg);
        a6[i7] = vec[0];
        a6[i7 + 1] = vec[1];
        a6[i7 + 2] = vec[2];
        a6[i7 + 3] = vec[3];
      }
      return a6;
    };
  }();

  // ../../node_modules/@math.gl/core/dist/classes/matrix4.js
  var INDICES2;
  (function(INDICES10) {
    INDICES10[INDICES10["COL0ROW0"] = 0] = "COL0ROW0";
    INDICES10[INDICES10["COL0ROW1"] = 1] = "COL0ROW1";
    INDICES10[INDICES10["COL0ROW2"] = 2] = "COL0ROW2";
    INDICES10[INDICES10["COL0ROW3"] = 3] = "COL0ROW3";
    INDICES10[INDICES10["COL1ROW0"] = 4] = "COL1ROW0";
    INDICES10[INDICES10["COL1ROW1"] = 5] = "COL1ROW1";
    INDICES10[INDICES10["COL1ROW2"] = 6] = "COL1ROW2";
    INDICES10[INDICES10["COL1ROW3"] = 7] = "COL1ROW3";
    INDICES10[INDICES10["COL2ROW0"] = 8] = "COL2ROW0";
    INDICES10[INDICES10["COL2ROW1"] = 9] = "COL2ROW1";
    INDICES10[INDICES10["COL2ROW2"] = 10] = "COL2ROW2";
    INDICES10[INDICES10["COL2ROW3"] = 11] = "COL2ROW3";
    INDICES10[INDICES10["COL3ROW0"] = 12] = "COL3ROW0";
    INDICES10[INDICES10["COL3ROW1"] = 13] = "COL3ROW1";
    INDICES10[INDICES10["COL3ROW2"] = 14] = "COL3ROW2";
    INDICES10[INDICES10["COL3ROW3"] = 15] = "COL3ROW3";
  })(INDICES2 || (INDICES2 = {}));
  var DEFAULT_FOVY = 45 * Math.PI / 180;
  var DEFAULT_ASPECT = 1;
  var DEFAULT_NEAR = 0.1;
  var DEFAULT_FAR = 500;
  var IDENTITY_MATRIX2 = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
  var Matrix4 = class extends Matrix {
    static get IDENTITY() {
      return getIdentityMatrix2();
    }
    static get ZERO() {
      return getZeroMatrix2();
    }
    get ELEMENTS() {
      return 16;
    }
    get RANK() {
      return 4;
    }
    get INDICES() {
      return INDICES2;
    }
    constructor(array) {
      super(-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0);
      if (arguments.length === 1 && Array.isArray(array)) {
        this.copy(array);
      } else {
        this.identity();
      }
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      this[3] = array[3];
      this[4] = array[4];
      this[5] = array[5];
      this[6] = array[6];
      this[7] = array[7];
      this[8] = array[8];
      this[9] = array[9];
      this[10] = array[10];
      this[11] = array[11];
      this[12] = array[12];
      this[13] = array[13];
      this[14] = array[14];
      this[15] = array[15];
      return this.check();
    }
    // eslint-disable-next-line max-params
    set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {
      this[0] = m00;
      this[1] = m10;
      this[2] = m20;
      this[3] = m30;
      this[4] = m01;
      this[5] = m11;
      this[6] = m21;
      this[7] = m31;
      this[8] = m02;
      this[9] = m12;
      this[10] = m22;
      this[11] = m32;
      this[12] = m03;
      this[13] = m13;
      this[14] = m23;
      this[15] = m33;
      return this.check();
    }
    // accepts row major order, stores as column major
    // eslint-disable-next-line max-params
    setRowMajor(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
      this[0] = m00;
      this[1] = m10;
      this[2] = m20;
      this[3] = m30;
      this[4] = m01;
      this[5] = m11;
      this[6] = m21;
      this[7] = m31;
      this[8] = m02;
      this[9] = m12;
      this[10] = m22;
      this[11] = m32;
      this[12] = m03;
      this[13] = m13;
      this[14] = m23;
      this[15] = m33;
      return this.check();
    }
    toRowMajor(result) {
      result[0] = this[0];
      result[1] = this[4];
      result[2] = this[8];
      result[3] = this[12];
      result[4] = this[1];
      result[5] = this[5];
      result[6] = this[9];
      result[7] = this[13];
      result[8] = this[2];
      result[9] = this[6];
      result[10] = this[10];
      result[11] = this[14];
      result[12] = this[3];
      result[13] = this[7];
      result[14] = this[11];
      result[15] = this[15];
      return result;
    }
    // Constructors
    /** Set to identity matrix */
    identity() {
      return this.copy(IDENTITY_MATRIX2);
    }
    /**
     *
     * @param object
     * @returns self
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    fromObject(object) {
      return this.check();
    }
    /**
     * Calculates a 4x4 matrix from the given quaternion
     * @param quaternion Quaternion to create matrix from
     * @returns self
     */
    fromQuaternion(quaternion) {
      fromQuat3(this, quaternion);
      return this.check();
    }
    /**
     * Generates a frustum matrix with the given bounds
     * @param view.left - Left bound of the frustum
     * @param view.right - Right bound of the frustum
     * @param view.bottom - Bottom bound of the frustum
     * @param view.top - Top bound of the frustum
     * @param view.near - Near bound of the frustum
     * @param view.far - Far bound of the frustum. Can be set to Infinity.
     * @returns self
     */
    frustum(view) {
      const { left, right, bottom, top, near = DEFAULT_NEAR, far = DEFAULT_FAR } = view;
      if (far === Infinity) {
        computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);
      } else {
        frustum(this, left, right, bottom, top, near, far);
      }
      return this.check();
    }
    /**
     * Generates a look-at matrix with the given eye position, focal point,
     * and up axis
     * @param view.eye - (vector) Position of the viewer
     * @param view.center - (vector) Point the viewer is looking at
     * @param view.up - (vector) Up axis
     * @returns self
     */
    lookAt(view) {
      const { eye, center: center2 = [0, 0, 0], up = [0, 1, 0] } = view;
      lookAt(this, eye, center2, up);
      return this.check();
    }
    /**
     * Generates a orthogonal projection matrix with the given bounds
     * from "traditional" view space parameters
     * @param view.left - Left bound of the frustum
     * @param view.right number  Right bound of the frustum
     * @param view.bottom - Bottom bound of the frustum
     * @param view.top number  Top bound of the frustum
     * @param view.near - Near bound of the frustum
     * @param view.far number  Far bound of the frustum
     * @returns self
     */
    ortho(view) {
      const { left, right, bottom, top, near = DEFAULT_NEAR, far = DEFAULT_FAR } = view;
      ortho(this, left, right, bottom, top, near, far);
      return this.check();
    }
    /**
     * Generates an orthogonal projection matrix with the same parameters
     * as a perspective matrix (plus focalDistance)
     * @param view.fovy Vertical field of view in radians
     * @param view.aspect Aspect ratio. Typically viewport width / viewport height
     * @param view.focalDistance Distance in the view frustum used for extent calculations
     * @param view.near Near bound of the frustum
     * @param view.far Far bound of the frustum
     * @returns self
     */
    orthographic(view) {
      const { fovy = DEFAULT_FOVY, aspect = DEFAULT_ASPECT, focalDistance = 1, near = DEFAULT_NEAR, far = DEFAULT_FAR } = view;
      checkRadians(fovy);
      const halfY = fovy / 2;
      const top = focalDistance * Math.tan(halfY);
      const right = top * aspect;
      return this.ortho({
        left: -right,
        right,
        bottom: -top,
        top,
        near,
        far
      });
    }
    /**
     * Generates a perspective projection matrix with the given bounds
     * @param view.fovy Vertical field of view in radians
     * @param view.aspect Aspect ratio. typically viewport width/height
     * @param view.near Near bound of the frustum
     * @param view.far Far bound of the frustum
     * @returns self
     */
    perspective(view) {
      const { fovy = 45 * Math.PI / 180, aspect = 1, near = 0.1, far = 500 } = view;
      checkRadians(fovy);
      perspective(this, fovy, aspect, near, far);
      return this.check();
    }
    // Accessors
    determinant() {
      return determinant2(this);
    }
    /**
     * Extracts the non-uniform scale assuming the matrix is an affine transformation.
     * The scales are the "lengths" of the column vectors in the upper-left 3x3 matrix.
     * @param result
     * @returns self
     */
    getScale(result = [-0, -0, -0]) {
      result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);
      result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);
      result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);
      return result;
    }
    /**
     * Gets the translation portion, assuming the matrix is a affine transformation matrix.
     * @param result
     * @returns self
     */
    getTranslation(result = [-0, -0, -0]) {
      result[0] = this[12];
      result[1] = this[13];
      result[2] = this[14];
      return result;
    }
    /**
     * Gets upper left 3x3 pure rotation matrix (non-scaling), assume affine transformation matrix
     * @param result
     * @param scaleResult
     * @returns self
     */
    getRotation(result, scaleResult) {
      result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];
      scaleResult = scaleResult || [-0, -0, -0];
      const scale24 = this.getScale(scaleResult);
      const inverseScale0 = 1 / scale24[0];
      const inverseScale1 = 1 / scale24[1];
      const inverseScale2 = 1 / scale24[2];
      result[0] = this[0] * inverseScale0;
      result[1] = this[1] * inverseScale1;
      result[2] = this[2] * inverseScale2;
      result[3] = 0;
      result[4] = this[4] * inverseScale0;
      result[5] = this[5] * inverseScale1;
      result[6] = this[6] * inverseScale2;
      result[7] = 0;
      result[8] = this[8] * inverseScale0;
      result[9] = this[9] * inverseScale1;
      result[10] = this[10] * inverseScale2;
      result[11] = 0;
      result[12] = 0;
      result[13] = 0;
      result[14] = 0;
      result[15] = 1;
      return result;
    }
    /**
     *
     * @param result
     * @param scaleResult
     * @returns self
     */
    getRotationMatrix3(result, scaleResult) {
      result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0];
      scaleResult = scaleResult || [-0, -0, -0];
      const scale24 = this.getScale(scaleResult);
      const inverseScale0 = 1 / scale24[0];
      const inverseScale1 = 1 / scale24[1];
      const inverseScale2 = 1 / scale24[2];
      result[0] = this[0] * inverseScale0;
      result[1] = this[1] * inverseScale1;
      result[2] = this[2] * inverseScale2;
      result[3] = this[4] * inverseScale0;
      result[4] = this[5] * inverseScale1;
      result[5] = this[6] * inverseScale2;
      result[6] = this[8] * inverseScale0;
      result[7] = this[9] * inverseScale1;
      result[8] = this[10] * inverseScale2;
      return result;
    }
    // Modifiers
    transpose() {
      transpose2(this, this);
      return this.check();
    }
    invert() {
      invert2(this, this);
      return this.check();
    }
    // Operations
    multiplyLeft(a6) {
      multiply4(this, a6, this);
      return this.check();
    }
    multiplyRight(a6) {
      multiply4(this, this, a6);
      return this.check();
    }
    // Rotates a matrix by the given angle around the X axis
    rotateX(radians6) {
      rotateX2(this, this, radians6);
      return this.check();
    }
    // Rotates a matrix by the given angle around the Y axis.
    rotateY(radians6) {
      rotateY2(this, this, radians6);
      return this.check();
    }
    /**
     * Rotates a matrix by the given angle around the Z axis.
     * @param radians
     * @returns self
     */
    rotateZ(radians6) {
      rotateZ2(this, this, radians6);
      return this.check();
    }
    /**
     *
     * @param param0
     * @returns self
     */
    rotateXYZ(angleXYZ) {
      return this.rotateX(angleXYZ[0]).rotateY(angleXYZ[1]).rotateZ(angleXYZ[2]);
    }
    /**
     *
     * @param radians
     * @param axis
     * @returns self
     */
    rotateAxis(radians6, axis) {
      rotate3(this, this, radians6, axis);
      return this.check();
    }
    /**
     *
     * @param factor
     * @returns self
     */
    scale(factor) {
      scale4(this, this, Array.isArray(factor) ? factor : [factor, factor, factor]);
      return this.check();
    }
    /**
     *
     * @param vec
     * @returns self
     */
    translate(vector) {
      translate2(this, this, vector);
      return this.check();
    }
    // Transforms
    /**
     * Transforms any 2, 3 or 4 element vector. 2 and 3 elements are treated as points
     * @param vector
     * @param result
     * @returns self
     */
    transform(vector, result) {
      if (vector.length === 4) {
        result = transformMat43(result || [-0, -0, -0, -0], vector, this);
        checkVector(result, 4);
        return result;
      }
      return this.transformAsPoint(vector, result);
    }
    /**
     * Transforms any 2 or 3 element array as point (w implicitly 1)
     * @param vector
     * @param result
     * @returns self
     */
    transformAsPoint(vector, result) {
      const { length: length17 } = vector;
      let out;
      switch (length17) {
        case 2:
          out = transformMat4(result || [-0, -0], vector, this);
          break;
        case 3:
          out = transformMat42(result || [-0, -0, -0], vector, this);
          break;
        default:
          throw new Error("Illegal vector");
      }
      checkVector(out, vector.length);
      return out;
    }
    /**
     * Transforms any 2 or 3 element array as vector (w implicitly 0)
     * @param vector
     * @param result
     * @returns self
     */
    transformAsVector(vector, result) {
      let out;
      switch (vector.length) {
        case 2:
          out = vec2_transformMat4AsVector(result || [-0, -0], vector, this);
          break;
        case 3:
          out = vec3_transformMat4AsVector(result || [-0, -0, -0], vector, this);
          break;
        default:
          throw new Error("Illegal vector");
      }
      checkVector(out, vector.length);
      return out;
    }
    /** @deprecated */
    transformPoint(vector, result) {
      return this.transformAsPoint(vector, result);
    }
    /** @deprecated */
    transformVector(vector, result) {
      return this.transformAsPoint(vector, result);
    }
    /** @deprecated */
    transformDirection(vector, result) {
      return this.transformAsVector(vector, result);
    }
    // three.js math API compatibility
    makeRotationX(radians6) {
      return this.identity().rotateX(radians6);
    }
    makeTranslation(x4, y5, z4) {
      return this.identity().translate([x4, y5, z4]);
    }
  };
  var ZERO3;
  var IDENTITY;
  function getZeroMatrix2() {
    if (!ZERO3) {
      ZERO3 = new Matrix4([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
      Object.freeze(ZERO3);
    }
    return ZERO3;
  }
  function getIdentityMatrix2() {
    if (!IDENTITY) {
      IDENTITY = new Matrix4();
      Object.freeze(IDENTITY);
    }
    return IDENTITY;
  }
  function checkRadians(possiblyDegrees) {
    if (possiblyDegrees > Math.PI * 2) {
      throw Error("expected radians");
    }
  }
  function computeInfinitePerspectiveOffCenter(result, left, right, bottom, top, near) {
    const column0Row0 = 2 * near / (right - left);
    const column1Row1 = 2 * near / (top - bottom);
    const column2Row0 = (right + left) / (right - left);
    const column2Row1 = (top + bottom) / (top - bottom);
    const column2Row2 = -1;
    const column2Row3 = -1;
    const column3Row2 = -2 * near;
    result[0] = column0Row0;
    result[1] = 0;
    result[2] = 0;
    result[3] = 0;
    result[4] = 0;
    result[5] = column1Row1;
    result[6] = 0;
    result[7] = 0;
    result[8] = column2Row0;
    result[9] = column2Row1;
    result[10] = column2Row2;
    result[11] = column2Row3;
    result[12] = 0;
    result[13] = 0;
    result[14] = column3Row2;
    result[15] = 0;
    return result;
  }

  // ../../node_modules/@math.gl/core/dist/gl-matrix/quat.js
  function create6() {
    const out = new ARRAY_TYPE(4);
    if (ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }
    out[3] = 1;
    return out;
  }
  function identity2(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
  }
  function setAxisAngle(out, axis, rad) {
    rad = rad * 0.5;
    const s5 = Math.sin(rad);
    out[0] = s5 * axis[0];
    out[1] = s5 * axis[1];
    out[2] = s5 * axis[2];
    out[3] = Math.cos(rad);
    return out;
  }
  function multiply6(out, a6, b4) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    const bx = b4[0];
    const by = b4[1];
    const bz = b4[2];
    const bw = b4[3];
    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
  }
  function rotateX3(out, a6, rad) {
    rad *= 0.5;
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    const bx = Math.sin(rad);
    const bw = Math.cos(rad);
    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
  }
  function rotateY3(out, a6, rad) {
    rad *= 0.5;
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    const by = Math.sin(rad);
    const bw = Math.cos(rad);
    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
  }
  function rotateZ3(out, a6, rad) {
    rad *= 0.5;
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    const bz = Math.sin(rad);
    const bw = Math.cos(rad);
    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
  }
  function calculateW(out, a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    out[0] = x4;
    out[1] = y5;
    out[2] = z4;
    out[3] = Math.sqrt(Math.abs(1 - x4 * x4 - y5 * y5 - z4 * z4));
    return out;
  }
  function slerp2(out, a6, b4, t5) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    let bx = b4[0];
    let by = b4[1];
    let bz = b4[2];
    let bw = b4[3];
    let cosom;
    let omega;
    let scale0;
    let scale1;
    let sinom;
    cosom = ax * bx + ay * by + az * bz + aw * bw;
    if (cosom < 0) {
      cosom = -cosom;
      bx = -bx;
      by = -by;
      bz = -bz;
      bw = -bw;
    }
    if (1 - cosom > EPSILON) {
      omega = Math.acos(cosom);
      sinom = Math.sin(omega);
      scale0 = Math.sin((1 - t5) * omega) / sinom;
      scale1 = Math.sin(t5 * omega) / sinom;
    } else {
      scale0 = 1 - t5;
      scale1 = t5;
    }
    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    return out;
  }
  function invert3(out, a6) {
    const a0 = a6[0];
    const a1 = a6[1];
    const a22 = a6[2];
    const a32 = a6[3];
    const dot18 = a0 * a0 + a1 * a1 + a22 * a22 + a32 * a32;
    const invDot = dot18 ? 1 / dot18 : 0;
    out[0] = -a0 * invDot;
    out[1] = -a1 * invDot;
    out[2] = -a22 * invDot;
    out[3] = a32 * invDot;
    return out;
  }
  function conjugate(out, a6) {
    out[0] = -a6[0];
    out[1] = -a6[1];
    out[2] = -a6[2];
    out[3] = a6[3];
    return out;
  }
  function fromMat3(out, m3) {
    const fTrace = m3[0] + m3[4] + m3[8];
    let fRoot;
    if (fTrace > 0) {
      fRoot = Math.sqrt(fTrace + 1);
      out[3] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[0] = (m3[5] - m3[7]) * fRoot;
      out[1] = (m3[6] - m3[2]) * fRoot;
      out[2] = (m3[1] - m3[3]) * fRoot;
    } else {
      let i7 = 0;
      if (m3[4] > m3[0])
        i7 = 1;
      if (m3[8] > m3[i7 * 3 + i7])
        i7 = 2;
      const j4 = (i7 + 1) % 3;
      const k4 = (i7 + 2) % 3;
      fRoot = Math.sqrt(m3[i7 * 3 + i7] - m3[j4 * 3 + j4] - m3[k4 * 3 + k4] + 1);
      out[i7] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[3] = (m3[j4 * 3 + k4] - m3[k4 * 3 + j4]) * fRoot;
      out[j4] = (m3[j4 * 3 + i7] + m3[i7 * 3 + j4]) * fRoot;
      out[k4] = (m3[k4 * 3 + i7] + m3[i7 * 3 + k4]) * fRoot;
    }
    return out;
  }
  var add5 = add4;
  var scale6 = scale5;
  var dot4 = dot3;
  var lerp5 = lerp4;
  var length4 = length3;
  var squaredLength4 = squaredLength3;
  var normalize4 = normalize3;
  var rotationTo = function() {
    const tmpvec3 = create2();
    const xUnitVec3 = fromValues2(1, 0, 0);
    const yUnitVec3 = fromValues2(0, 1, 0);
    return function(out, a6, b4) {
      const dot18 = dot2(a6, b4);
      if (dot18 < -0.999999) {
        cross2(tmpvec3, xUnitVec3, a6);
        if (len2(tmpvec3) < 1e-6)
          cross2(tmpvec3, yUnitVec3, a6);
        normalize2(tmpvec3, tmpvec3);
        setAxisAngle(out, tmpvec3, Math.PI);
        return out;
      } else if (dot18 > 0.999999) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        return out;
      }
      cross2(tmpvec3, a6, b4);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot18;
      return normalize4(out, out);
    };
  }();
  var sqlerp = function() {
    const temp1 = create6();
    const temp2 = create6();
    return function(out, a6, b4, c5, d5, t5) {
      slerp2(temp1, a6, d5, t5);
      slerp2(temp2, b4, c5, t5);
      slerp2(out, temp1, temp2, 2 * t5 * (1 - t5));
      return out;
    };
  }();
  var setAxes = function() {
    const matr = create3();
    return function(out, view, right, up) {
      matr[0] = right[0];
      matr[3] = right[1];
      matr[6] = right[2];
      matr[1] = up[0];
      matr[4] = up[1];
      matr[7] = up[2];
      matr[2] = -view[0];
      matr[5] = -view[1];
      matr[8] = -view[2];
      return normalize4(out, fromMat3(out, matr));
    };
  }();

  // ../../node_modules/@math.gl/core/dist/classes/quaternion.js
  var IDENTITY_QUATERNION = [0, 0, 0, 1];
  var Quaternion = class extends MathArray {
    constructor(x4 = 0, y5 = 0, z4 = 0, w5 = 1) {
      super(-0, -0, -0, -0);
      if (Array.isArray(x4) && arguments.length === 1) {
        this.copy(x4);
      } else {
        this.set(x4, y5, z4, w5);
      }
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      this[3] = array[3];
      return this.check();
    }
    set(x4, y5, z4, w5) {
      this[0] = x4;
      this[1] = y5;
      this[2] = z4;
      this[3] = w5;
      return this.check();
    }
    fromObject(object) {
      this[0] = object.x;
      this[1] = object.y;
      this[2] = object.z;
      this[3] = object.w;
      return this.check();
    }
    /**
     * Creates a quaternion from the given 3x3 rotation matrix.
     * NOTE: The resultant quaternion is not normalized, so you should
     * be sure to renormalize the quaternion yourself where necessary.
     * @param m
     * @returns
     */
    fromMatrix3(m3) {
      fromMat3(this, m3);
      return this.check();
    }
    fromAxisRotation(axis, rad) {
      setAxisAngle(this, axis, rad);
      return this.check();
    }
    /** Set a quat to the identity quaternion */
    identity() {
      identity2(this);
      return this.check();
    }
    // Set the components of a quat to the given values
    // set(i, j, k, l) {
    //   quat_set(this, i, j, k, l);
    //   return this.check();
    // }
    // Sets a quat from the given angle and rotation axis, then returns it.
    setAxisAngle(axis, rad) {
      return this.fromAxisRotation(axis, rad);
    }
    // Getters/setters
    get ELEMENTS() {
      return 4;
    }
    get x() {
      return this[0];
    }
    set x(value) {
      this[0] = checkNumber(value);
    }
    get y() {
      return this[1];
    }
    set y(value) {
      this[1] = checkNumber(value);
    }
    get z() {
      return this[2];
    }
    set z(value) {
      this[2] = checkNumber(value);
    }
    get w() {
      return this[3];
    }
    set w(value) {
      this[3] = checkNumber(value);
    }
    // Calculates the length of a quat
    len() {
      return length4(this);
    }
    // Calculates the squared length of a quat
    lengthSquared() {
      return squaredLength4(this);
    }
    // Calculates the dot product of two quat's
    // @return {Number}
    dot(a6) {
      return dot4(this, a6);
    }
    // Gets the rotation axis and angle for a given quaternion.
    // If a quaternion is created with setAxisAngle, this method will
    // return the same values as providied in the original parameter
    // list OR functionally equivalent values.
    // Example: The quaternion formed by axis [0, 0, 1] and angle -90
    // is the same as the quaternion formed by [0, 0, 1] and 270.
    // This method favors the latter.
    // @return {{[x,y,z], Number}}
    // getAxisAngle() {
    //   const axis = [];
    // //   const angle = quat_getAxisAngle(axis, this);
    //   return {axis, angle};
    // }
    // MODIFIERS
    // Sets a quaternion to represent the shortest rotation from one vector
    // to another. Both vectors are assumed to be unit length.
    rotationTo(vectorA, vectorB) {
      rotationTo(this, vectorA, vectorB);
      return this.check();
    }
    // Sets the specified quaternion with values corresponding to the given axes.
    // Each axis is a vec3 and is expected to be unit length and perpendicular
    // to all other specified axes.
    // setAxes() {
    //   Number
    // }
    // Performs a spherical linear interpolation with two control points
    // sqlerp() {
    //   Number;
    // }
    // Adds two quat's
    add(a6) {
      add5(this, this, a6);
      return this.check();
    }
    // Calculates the W component of a quat from the X, Y, and Z components.
    // Any existing W component will be ignored.
    calculateW() {
      calculateW(this, this);
      return this.check();
    }
    // Calculates the conjugate of a quat If the quaternion is normalized,
    // this function is faster than quat_invert and produces the same result.
    conjugate() {
      conjugate(this, this);
      return this.check();
    }
    // Calculates the inverse of a quat
    invert() {
      invert3(this, this);
      return this.check();
    }
    // Performs a linear interpolation between two quat's
    lerp(a6, b4, t5) {
      if (t5 === void 0) {
        return this.lerp(this, a6, b4);
      }
      lerp5(this, a6, b4, t5);
      return this.check();
    }
    // Multiplies two quat's
    multiplyRight(a6) {
      multiply6(this, this, a6);
      return this.check();
    }
    multiplyLeft(a6) {
      multiply6(this, a6, this);
      return this.check();
    }
    // Normalize a quat
    normalize() {
      const length17 = this.len();
      const l5 = length17 > 0 ? 1 / length17 : 0;
      this[0] = this[0] * l5;
      this[1] = this[1] * l5;
      this[2] = this[2] * l5;
      this[3] = this[3] * l5;
      if (length17 === 0) {
        this[3] = 1;
      }
      return this.check();
    }
    // Rotates a quaternion by the given angle about the X axis
    rotateX(rad) {
      rotateX3(this, this, rad);
      return this.check();
    }
    // Rotates a quaternion by the given angle about the Y axis
    rotateY(rad) {
      rotateY3(this, this, rad);
      return this.check();
    }
    // Rotates a quaternion by the given angle about the Z axis
    rotateZ(rad) {
      rotateZ3(this, this, rad);
      return this.check();
    }
    // Scales a quat by a scalar number
    scale(b4) {
      scale6(this, this, b4);
      return this.check();
    }
    // Performs a spherical linear interpolation between two quat
    slerp(arg0, arg1, arg2) {
      let start;
      let target2;
      let ratio;
      switch (arguments.length) {
        case 1:
          ({
            start = IDENTITY_QUATERNION,
            target: target2,
            ratio
          } = arg0);
          break;
        case 2:
          start = this;
          target2 = arg0;
          ratio = arg1;
          break;
        default:
          start = arg0;
          target2 = arg1;
          ratio = arg2;
      }
      slerp2(this, start, target2, ratio);
      return this.check();
    }
    transformVector4(vector, result = new Vector4()) {
      transformQuat2(result, vector, this);
      return checkVector(result, 4);
    }
    // THREE.js Math API compatibility
    lengthSq() {
      return this.lengthSquared();
    }
    setFromAxisAngle(axis, rad) {
      return this.setAxisAngle(axis, rad);
    }
    premultiply(a6) {
      return this.multiplyLeft(a6);
    }
    multiply(a6) {
      return this.multiplyRight(a6);
    }
  };

  // ../../node_modules/@math.gl/core/dist/classes/spherical-coordinates.js
  var EPSILON2 = 1e-6;
  var EARTH_RADIUS_METERS = 6371e3;
  var SphericalCoordinates = class {
    // bearing: number;
    // pitch: number;
    // altitude: number;
    // lnglatZ coordinates
    // longitude: number;
    // latitude: number;
    // lng: number;
    // lat: number;
    // z: number;
    /**
     * Creates a new SphericalCoordinates object
     * @param options
     * @param [options.phi] =0 - rotation around X (latitude)
     * @param [options.theta] =0 - rotation around Y (longitude)
     * @param [options.radius] =1 - Distance from center
     * @param [options.bearing]
     * @param [options.pitch]
     * @param [options.altitude]
     * @param [options.radiusScale] =1
     */
    // eslint-disable-next-line complexity
    constructor({ phi = 0, theta = 0, radius = 1, bearing, pitch, altitude, radiusScale = EARTH_RADIUS_METERS } = {}) {
      this.phi = phi;
      this.theta = theta;
      this.radius = radius || altitude || 1;
      this.radiusScale = radiusScale || 1;
      if (bearing !== void 0) {
        this.bearing = bearing;
      }
      if (pitch !== void 0) {
        this.pitch = pitch;
      }
      this.check();
    }
    toString() {
      return this.formatString(config);
    }
    formatString({ printTypes = false }) {
      const f6 = formatValue;
      return `${printTypes ? "Spherical" : ""}[rho:${f6(this.radius)},theta:${f6(this.theta)},phi:${f6(this.phi)}]`;
    }
    equals(other) {
      return equals(this.radius, other.radius) && equals(this.theta, other.theta) && equals(this.phi, other.phi);
    }
    exactEquals(other) {
      return this.radius === other.radius && this.theta === other.theta && this.phi === other.phi;
    }
    /* eslint-disable brace-style */
    // Cartographic (bearing 0 north, pitch 0 look from above)
    get bearing() {
      return 180 - degrees(this.phi);
    }
    set bearing(v5) {
      this.phi = Math.PI - radians(v5);
    }
    get pitch() {
      return degrees(this.theta);
    }
    set pitch(v5) {
      this.theta = radians(v5);
    }
    // get pitch() { return 90 - degrees(this.phi); }
    // set pitch(v) { this.phi = radians(v) + Math.PI / 2; }
    // get altitude() { return this.radius - 1; } // relative altitude
    // lnglatZ coordinates
    get longitude() {
      return degrees(this.phi);
    }
    get latitude() {
      return degrees(this.theta);
    }
    get lng() {
      return degrees(this.phi);
    }
    get lat() {
      return degrees(this.theta);
    }
    get z() {
      return (this.radius - 1) * this.radiusScale;
    }
    /* eslint-enable brace-style */
    set(radius, phi, theta) {
      this.radius = radius;
      this.phi = phi;
      this.theta = theta;
      return this.check();
    }
    clone() {
      return new SphericalCoordinates().copy(this);
    }
    copy(other) {
      this.radius = other.radius;
      this.phi = other.phi;
      this.theta = other.theta;
      return this.check();
    }
    fromLngLatZ([lng, lat, z4]) {
      this.radius = 1 + z4 / this.radiusScale;
      this.phi = radians(lat);
      this.theta = radians(lng);
      return this.check();
    }
    fromVector3(v5) {
      this.radius = length2(v5);
      if (this.radius > 0) {
        this.theta = Math.atan2(v5[0], v5[1]);
        this.phi = Math.acos(clamp(v5[2] / this.radius, -1, 1));
      }
      return this.check();
    }
    toVector3() {
      return new Vector3(0, 0, this.radius).rotateX({ radians: this.theta }).rotateZ({ radians: this.phi });
    }
    // restrict phi to be betwee EPS and PI-EPS
    makeSafe() {
      this.phi = Math.max(EPSILON2, Math.min(Math.PI - EPSILON2, this.phi));
      return this;
    }
    check() {
      if (!Number.isFinite(this.phi) || !Number.isFinite(this.theta) || !(this.radius > 0)) {
        throw new Error("SphericalCoordinates: some fields set to invalid numbers");
      }
      return this;
    }
  };

  // ../../node_modules/@math.gl/core/dist/lib/math-utils.js
  var math_utils_exports = {};
  __export(math_utils_exports, {
    EPSILON1: () => EPSILON1,
    EPSILON10: () => EPSILON10,
    EPSILON11: () => EPSILON11,
    EPSILON12: () => EPSILON12,
    EPSILON13: () => EPSILON13,
    EPSILON14: () => EPSILON14,
    EPSILON15: () => EPSILON15,
    EPSILON16: () => EPSILON16,
    EPSILON17: () => EPSILON17,
    EPSILON18: () => EPSILON18,
    EPSILON19: () => EPSILON19,
    EPSILON2: () => EPSILON22,
    EPSILON20: () => EPSILON20,
    EPSILON3: () => EPSILON3,
    EPSILON4: () => EPSILON4,
    EPSILON5: () => EPSILON5,
    EPSILON6: () => EPSILON6,
    EPSILON7: () => EPSILON7,
    EPSILON8: () => EPSILON8,
    EPSILON9: () => EPSILON9,
    PI_OVER_FOUR: () => PI_OVER_FOUR,
    PI_OVER_SIX: () => PI_OVER_SIX,
    PI_OVER_TWO: () => PI_OVER_TWO,
    TWO_PI: () => TWO_PI
  });
  var EPSILON1 = 0.1;
  var EPSILON22 = 0.01;
  var EPSILON3 = 1e-3;
  var EPSILON4 = 1e-4;
  var EPSILON5 = 1e-5;
  var EPSILON6 = 1e-6;
  var EPSILON7 = 1e-7;
  var EPSILON8 = 1e-8;
  var EPSILON9 = 1e-9;
  var EPSILON10 = 1e-10;
  var EPSILON11 = 1e-11;
  var EPSILON12 = 1e-12;
  var EPSILON13 = 1e-13;
  var EPSILON14 = 1e-14;
  var EPSILON15 = 1e-15;
  var EPSILON16 = 1e-16;
  var EPSILON17 = 1e-17;
  var EPSILON18 = 1e-18;
  var EPSILON19 = 1e-19;
  var EPSILON20 = 1e-20;
  var PI_OVER_TWO = Math.PI / 2;
  var PI_OVER_FOUR = Math.PI / 4;
  var PI_OVER_SIX = Math.PI / 6;
  var TWO_PI = Math.PI * 2;

  // ../../node_modules/@luma.gl/shadertools/dist/modules/math/fp64/fp64-utils.js
  function fp64ify(a6, out = [], startIndex = 0) {
    const hiPart = Math.fround(a6);
    const loPart = a6 - hiPart;
    out[startIndex] = hiPart;
    out[startIndex + 1] = loPart;
    return out;
  }
  function fp64LowPart(a6) {
    return a6 - Math.fround(a6);
  }
  function fp64ifyMatrix4(matrix) {
    const matrixFP64 = new Float32Array(32);
    for (let i7 = 0; i7 < 4; ++i7) {
      for (let j4 = 0; j4 < 4; ++j4) {
        const index = i7 * 4 + j4;
        fp64ify(matrix[j4 * 4 + i7], matrixFP64, index * 2);
      }
    }
    return matrixFP64;
  }

  // ../../node_modules/@luma.gl/shadertools/dist/modules/math/fp32/fp32.js
  var fp32shader = (
    /* glsl */
    `#ifdef LUMA_FP32_TAN_PRECISION_WORKAROUND

// All these functions are for substituting tan() function from Intel GPU only
const float TWO_PI = 6.2831854820251465;
const float PI_2 = 1.5707963705062866;
const float PI_16 = 0.1963495463132858;

const float SIN_TABLE_0 = 0.19509032368659973;
const float SIN_TABLE_1 = 0.3826834261417389;
const float SIN_TABLE_2 = 0.5555702447891235;
const float SIN_TABLE_3 = 0.7071067690849304;

const float COS_TABLE_0 = 0.9807852506637573;
const float COS_TABLE_1 = 0.9238795042037964;
const float COS_TABLE_2 = 0.8314695954322815;
const float COS_TABLE_3 = 0.7071067690849304;

const float INVERSE_FACTORIAL_3 = 1.666666716337204e-01; // 1/3!
const float INVERSE_FACTORIAL_5 = 8.333333767950535e-03; // 1/5!
const float INVERSE_FACTORIAL_7 = 1.9841270113829523e-04; // 1/7!
const float INVERSE_FACTORIAL_9 = 2.75573188446287533e-06; // 1/9!

float sin_taylor_fp32(float a) {
  float r, s, t, x;

  if (a == 0.0) {
    return 0.0;
  }

  x = -a * a;
  s = a;
  r = a;

  r = r * x;
  t = r * INVERSE_FACTORIAL_3;
  s = s + t;

  r = r * x;
  t = r * INVERSE_FACTORIAL_5;
  s = s + t;

  r = r * x;
  t = r * INVERSE_FACTORIAL_7;
  s = s + t;

  r = r * x;
  t = r * INVERSE_FACTORIAL_9;
  s = s + t;

  return s;
}

void sincos_taylor_fp32(float a, out float sin_t, out float cos_t) {
  if (a == 0.0) {
    sin_t = 0.0;
    cos_t = 1.0;
  }
  sin_t = sin_taylor_fp32(a);
  cos_t = sqrt(1.0 - sin_t * sin_t);
}

float tan_taylor_fp32(float a) {
    float sin_a;
    float cos_a;

    if (a == 0.0) {
        return 0.0;
    }

    // 2pi range reduction
    float z = floor(a / TWO_PI);
    float r = a - TWO_PI * z;

    float t;
    float q = floor(r / PI_2 + 0.5);
    int j = int(q);

    if (j < -2 || j > 2) {
        return 1.0 / 0.0;
    }

    t = r - PI_2 * q;

    q = floor(t / PI_16 + 0.5);
    int k = int(q);
    int abs_k = int(abs(float(k)));

    if (abs_k > 4) {
        return 1.0 / 0.0;
    } else {
        t = t - PI_16 * q;
    }

    float u = 0.0;
    float v = 0.0;

    float sin_t, cos_t;
    float s, c;
    sincos_taylor_fp32(t, sin_t, cos_t);

    if (k == 0) {
        s = sin_t;
        c = cos_t;
    } else {
        if (abs(float(abs_k) - 1.0) < 0.5) {
            u = COS_TABLE_0;
            v = SIN_TABLE_0;
        } else if (abs(float(abs_k) - 2.0) < 0.5) {
            u = COS_TABLE_1;
            v = SIN_TABLE_1;
        } else if (abs(float(abs_k) - 3.0) < 0.5) {
            u = COS_TABLE_2;
            v = SIN_TABLE_2;
        } else if (abs(float(abs_k) - 4.0) < 0.5) {
            u = COS_TABLE_3;
            v = SIN_TABLE_3;
        }
        if (k > 0) {
            s = u * sin_t + v * cos_t;
            c = u * cos_t - v * sin_t;
        } else {
            s = u * sin_t - v * cos_t;
            c = u * cos_t + v * sin_t;
        }
    }

    if (j == 0) {
        sin_a = s;
        cos_a = c;
    } else if (j == 1) {
        sin_a = c;
        cos_a = -s;
    } else if (j == -1) {
        sin_a = -c;
        cos_a = s;
    } else {
        sin_a = -s;
        cos_a = -c;
    }
    return sin_a / cos_a;
}
#endif

float tan_fp32(float a) {
#ifdef LUMA_FP32_TAN_PRECISION_WORKAROUND
  return tan_taylor_fp32(a);
#else
  return tan(a);
#endif
}
`
  );
  var fp32 = {
    name: "fp32",
    vs: fp32shader
  };

  // ../../node_modules/@luma.gl/shadertools/dist/modules/math/fp64/fp64-arithmetic-glsl.js
  var fp64arithmeticShader = (
    /* glsl */
    `
uniform fp64arithmeticUniforms {
  uniform float ONE;
} fp64;

/*
About LUMA_FP64_CODE_ELIMINATION_WORKAROUND

The purpose of this workaround is to prevent shader compilers from
optimizing away necessary arithmetic operations by swapping their sequences
or transform the equation to some 'equivalent' form.

The method is to multiply an artifical variable, ONE, which will be known to
the compiler to be 1 only at runtime. The whole expression is then represented
as a polynomial with respective to ONE. In the coefficients of all terms, only one a
and one b should appear

err = (a + b) * ONE^6 - a * ONE^5 - (a + b) * ONE^4 + a * ONE^3 - b - (a + b) * ONE^2 + a * ONE
*/

// Divide float number to high and low floats to extend fraction bits
vec2 split(float a) {
  const float SPLIT = 4097.0;
  float t = a * SPLIT;
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float a_hi = t * fp64.ONE - (t - a);
  float a_lo = a * fp64.ONE - a_hi;
#else
  float a_hi = t - (t - a);
  float a_lo = a - a_hi;
#endif
  return vec2(a_hi, a_lo);
}

// Divide float number again when high float uses too many fraction bits
vec2 split2(vec2 a) {
  vec2 b = split(a.x);
  b.y += a.y;
  return b;
}

// Special sum operation when a > b
vec2 quickTwoSum(float a, float b) {
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float sum = (a + b) * fp64.ONE;
  float err = b - (sum - a) * fp64.ONE;
#else
  float sum = a + b;
  float err = b - (sum - a);
#endif
  return vec2(sum, err);
}

// General sum operation
vec2 twoSum(float a, float b) {
  float s = (a + b);
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float v = (s * fp64.ONE - a) * fp64.ONE;
  float err = (a - (s - v) * fp64.ONE) * fp64.ONE * fp64.ONE * fp64.ONE + (b - v);
#else
  float v = s - a;
  float err = (a - (s - v)) + (b - v);
#endif
  return vec2(s, err);
}

vec2 twoSub(float a, float b) {
  float s = (a - b);
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float v = (s * fp64.ONE - a) * fp64.ONE;
  float err = (a - (s - v) * fp64.ONE) * fp64.ONE * fp64.ONE * fp64.ONE - (b + v);
#else
  float v = s - a;
  float err = (a - (s - v)) - (b + v);
#endif
  return vec2(s, err);
}

vec2 twoSqr(float a) {
  float prod = a * a;
  vec2 a_fp64 = split(a);
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float err = ((a_fp64.x * a_fp64.x - prod) * fp64.ONE + 2.0 * a_fp64.x *
    a_fp64.y * fp64.ONE * fp64.ONE) + a_fp64.y * a_fp64.y * fp64.ONE * fp64.ONE * fp64.ONE;
#else
  float err = ((a_fp64.x * a_fp64.x - prod) + 2.0 * a_fp64.x * a_fp64.y) + a_fp64.y * a_fp64.y;
#endif
  return vec2(prod, err);
}

vec2 twoProd(float a, float b) {
  float prod = a * b;
  vec2 a_fp64 = split(a);
  vec2 b_fp64 = split(b);
  float err = ((a_fp64.x * b_fp64.x - prod) + a_fp64.x * b_fp64.y +
    a_fp64.y * b_fp64.x) + a_fp64.y * b_fp64.y;
  return vec2(prod, err);
}

vec2 sum_fp64(vec2 a, vec2 b) {
  vec2 s, t;
  s = twoSum(a.x, b.x);
  t = twoSum(a.y, b.y);
  s.y += t.x;
  s = quickTwoSum(s.x, s.y);
  s.y += t.y;
  s = quickTwoSum(s.x, s.y);
  return s;
}

vec2 sub_fp64(vec2 a, vec2 b) {
  vec2 s, t;
  s = twoSub(a.x, b.x);
  t = twoSub(a.y, b.y);
  s.y += t.x;
  s = quickTwoSum(s.x, s.y);
  s.y += t.y;
  s = quickTwoSum(s.x, s.y);
  return s;
}

vec2 mul_fp64(vec2 a, vec2 b) {
  vec2 prod = twoProd(a.x, b.x);
  // y component is for the error
  prod.y += a.x * b.y;
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
  prod = split2(prod);
#endif
  prod = quickTwoSum(prod.x, prod.y);
  prod.y += a.y * b.x;
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
  prod = split2(prod);
#endif
  prod = quickTwoSum(prod.x, prod.y);
  return prod;
}

vec2 div_fp64(vec2 a, vec2 b) {
  float xn = 1.0 / b.x;
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
  vec2 yn = mul_fp64(a, vec2(xn, 0));
#else
  vec2 yn = a * xn;
#endif
  float diff = (sub_fp64(a, mul_fp64(b, yn))).x;
  vec2 prod = twoProd(xn, diff);
  return sum_fp64(yn, prod);
}

vec2 sqrt_fp64(vec2 a) {
  if (a.x == 0.0 && a.y == 0.0) return vec2(0.0, 0.0);
  if (a.x < 0.0) return vec2(0.0 / 0.0, 0.0 / 0.0);

  float x = 1.0 / sqrt(a.x);
  float yn = a.x * x;
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  vec2 yn_sqr = twoSqr(yn) * fp64.ONE;
#else
  vec2 yn_sqr = twoSqr(yn);
#endif
  float diff = sub_fp64(a, yn_sqr).x;
  vec2 prod = twoProd(x * 0.5, diff);
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
  return sum_fp64(split(yn), prod);
#else
  return sum_fp64(vec2(yn, 0.0), prod);
#endif
}
`
  );

  // ../../node_modules/@luma.gl/shadertools/dist/modules/math/fp64/fp64-functions-glsl.js
  var fp64functionShader = (
    /* glsl */
    `const vec2 E_FP64 = vec2(2.7182817459106445e+00, 8.254840366817007e-08);
const vec2 LOG2_FP64 = vec2(0.6931471824645996e+00, -1.9046542121259336e-09);
const vec2 PI_FP64 = vec2(3.1415927410125732, -8.742278012618954e-8);
const vec2 TWO_PI_FP64 = vec2(6.2831854820251465, -1.7484556025237907e-7);
const vec2 PI_2_FP64 = vec2(1.5707963705062866, -4.371139006309477e-8);
const vec2 PI_4_FP64 = vec2(0.7853981852531433, -2.1855695031547384e-8);
const vec2 PI_16_FP64 = vec2(0.19634954631328583, -5.463923757886846e-9);
const vec2 PI_16_2_FP64 = vec2(0.39269909262657166, -1.0927847515773692e-8);
const vec2 PI_16_3_FP64 = vec2(0.5890486240386963, -1.4906100798128818e-9);
const vec2 PI_180_FP64 = vec2(0.01745329238474369, 1.3519960498364902e-10);

const vec2 SIN_TABLE_0_FP64 = vec2(0.19509032368659973, -1.6704714833615242e-9);
const vec2 SIN_TABLE_1_FP64 = vec2(0.3826834261417389, 6.22335089017767e-9);
const vec2 SIN_TABLE_2_FP64 = vec2(0.5555702447891235, -1.1769521357507529e-8);
const vec2 SIN_TABLE_3_FP64 = vec2(0.7071067690849304, 1.2101617041793133e-8);

const vec2 COS_TABLE_0_FP64 = vec2(0.9807852506637573, 2.9739473106360492e-8);
const vec2 COS_TABLE_1_FP64 = vec2(0.9238795042037964, 2.8307490351764386e-8);
const vec2 COS_TABLE_2_FP64 = vec2(0.8314695954322815, 1.6870263741530778e-8);
const vec2 COS_TABLE_3_FP64 = vec2(0.7071067690849304, 1.2101617152815436e-8);

const vec2 INVERSE_FACTORIAL_3_FP64 = vec2(1.666666716337204e-01, -4.967053879312289e-09); // 1/3!
const vec2 INVERSE_FACTORIAL_4_FP64 = vec2(4.16666679084301e-02, -1.2417634698280722e-09); // 1/4!
const vec2 INVERSE_FACTORIAL_5_FP64 = vec2(8.333333767950535e-03, -4.34617203337595e-10); // 1/5!
const vec2 INVERSE_FACTORIAL_6_FP64 = vec2(1.3888889225199819e-03, -3.3631094437103215e-11); // 1/6!
const vec2 INVERSE_FACTORIAL_7_FP64 = vec2(1.9841270113829523e-04,  -2.725596874933456e-12); // 1/7!
const vec2 INVERSE_FACTORIAL_8_FP64 = vec2(2.4801587642286904e-05, -3.406996025904184e-13); // 1/8!
const vec2 INVERSE_FACTORIAL_9_FP64 = vec2(2.75573188446287533e-06, 3.7935713937038186e-14); // 1/9!
const vec2 INVERSE_FACTORIAL_10_FP64 = vec2(2.755731998149713e-07, -7.575112367869873e-15); // 1/10!

float nint(float d) {
    if (d == floor(d)) return d;
    return floor(d + 0.5);
}

vec2 nint_fp64(vec2 a) {
    float hi = nint(a.x);
    float lo;
    vec2 tmp;
    if (hi == a.x) {
        lo = nint(a.y);
        tmp = quickTwoSum(hi, lo);
    } else {
        lo = 0.0;
        if (abs(hi - a.x) == 0.5 && a.y < 0.0) {
            hi -= 1.0;
        }
        tmp = vec2(hi, lo);
    }
    return tmp;
}

/* k_power controls how much range reduction we would like to have
Range reduction uses the following method:
assume a = k_power * r + m * log(2), k and m being integers.
Set k_power = 4 (we can choose other k to trade accuracy with performance.
we only need to calculate exp(r) and using exp(a) = 2^m * exp(r)^k_power;
*/

vec2 exp_fp64(vec2 a) {
  // We need to make sure these two numbers match
  // as bit-wise shift is not available in GLSL 1.0
  const int k_power = 4;
  const float k = 16.0;

  const float inv_k = 1.0 / k;

  if (a.x <= -88.0) return vec2(0.0, 0.0);
  if (a.x >= 88.0) return vec2(1.0 / 0.0, 1.0 / 0.0);
  if (a.x == 0.0 && a.y == 0.0) return vec2(1.0, 0.0);
  if (a.x == 1.0 && a.y == 0.0) return E_FP64;

  float m = floor(a.x / LOG2_FP64.x + 0.5);
  vec2 r = sub_fp64(a, mul_fp64(LOG2_FP64, vec2(m, 0.0))) * inv_k;
  vec2 s, t, p;

  p = mul_fp64(r, r);
  s = sum_fp64(r, p * 0.5);
  p = mul_fp64(p, r);
  t = mul_fp64(p, INVERSE_FACTORIAL_3_FP64);

  s = sum_fp64(s, t);
  p = mul_fp64(p, r);
  t = mul_fp64(p, INVERSE_FACTORIAL_4_FP64);

  s = sum_fp64(s, t);
  p = mul_fp64(p, r);
  t = mul_fp64(p, INVERSE_FACTORIAL_5_FP64);

  // s = sum_fp64(s, t);
  // p = mul_fp64(p, r);
  // t = mul_fp64(p, INVERSE_FACTORIAL_6_FP64);

  // s = sum_fp64(s, t);
  // p = mul_fp64(p, r);
  // t = mul_fp64(p, INVERSE_FACTORIAL_7_FP64);

  s = sum_fp64(s, t);


  // At this point, s = exp(r) - 1; but after following 4 recursions, we will get exp(r) ^ 512 - 1.
  for (int i = 0; i < k_power; i++) {
    s = sum_fp64(s * 2.0, mul_fp64(s, s));
  }

#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)
  s = sum_fp64(s, vec2(fp64.ONE, 0.0));
#else
  s = sum_fp64(s, vec2(1.0, 0.0));
#endif

  return s * pow(2.0, m);
//   return r;
}

vec2 log_fp64(vec2 a)
{
  if (a.x == 1.0 && a.y == 0.0) return vec2(0.0, 0.0);
  if (a.x <= 0.0) return vec2(0.0 / 0.0, 0.0 / 0.0);
  vec2 x = vec2(log(a.x), 0.0);
  vec2 s;
#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)
  s = vec2(fp64.ONE, 0.0);
#else
  s = vec2(1.0, 0.0);
#endif

  x = sub_fp64(sum_fp64(x, mul_fp64(a, exp_fp64(-x))), s);
  return x;
}

vec2 sin_taylor_fp64(vec2 a) {
  vec2 r, s, t, x;

  if (a.x == 0.0 && a.y == 0.0) {
    return vec2(0.0, 0.0);
  }

  x = -mul_fp64(a, a);
  s = a;
  r = a;

  r = mul_fp64(r, x);
  t = mul_fp64(r, INVERSE_FACTORIAL_3_FP64);
  s = sum_fp64(s, t);

  r = mul_fp64(r, x);
  t = mul_fp64(r, INVERSE_FACTORIAL_5_FP64);
  s = sum_fp64(s, t);

  /* keep the following commented code in case we need them
  for extra accuracy from the Taylor expansion*/

  // r = mul_fp64(r, x);
  // t = mul_fp64(r, INVERSE_FACTORIAL_7_FP64);
  // s = sum_fp64(s, t);

  // r = mul_fp64(r, x);
  // t = mul_fp64(r, INVERSE_FACTORIAL_9_FP64);
  // s = sum_fp64(s, t);

  return s;
}

vec2 cos_taylor_fp64(vec2 a) {
  vec2 r, s, t, x;

  if (a.x == 0.0 && a.y == 0.0) {
    return vec2(1.0, 0.0);
  }

  x = -mul_fp64(a, a);
  r = x;
  s = sum_fp64(vec2(1.0, 0.0), r * 0.5);

  r = mul_fp64(r, x);
  t = mul_fp64(r, INVERSE_FACTORIAL_4_FP64);
  s = sum_fp64(s, t);

  r = mul_fp64(r, x);
  t = mul_fp64(r, INVERSE_FACTORIAL_6_FP64);
  s = sum_fp64(s, t);

  /* keep the following commented code in case we need them
  for extra accuracy from the Taylor expansion*/

  // r = mul_fp64(r, x);
  // t = mul_fp64(r, INVERSE_FACTORIAL_8_FP64);
  // s = sum_fp64(s, t);

  // r = mul_fp64(r, x);
  // t = mul_fp64(r, INVERSE_FACTORIAL_10_FP64);
  // s = sum_fp64(s, t);

  return s;
}

void sincos_taylor_fp64(vec2 a, out vec2 sin_t, out vec2 cos_t) {
  if (a.x == 0.0 && a.y == 0.0) {
    sin_t = vec2(0.0, 0.0);
    cos_t = vec2(1.0, 0.0);
  }

  sin_t = sin_taylor_fp64(a);
  cos_t = sqrt_fp64(sub_fp64(vec2(1.0, 0.0), mul_fp64(sin_t, sin_t)));
}

vec2 sin_fp64(vec2 a) {
    if (a.x == 0.0 && a.y == 0.0) {
        return vec2(0.0, 0.0);
    }

    // 2pi range reduction
    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));
    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));

    vec2 t;
    float q = floor(r.x / PI_2_FP64.x + 0.5);
    int j = int(q);

    if (j < -2 || j > 2) {
        return vec2(0.0 / 0.0, 0.0 / 0.0);
    }

    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));

    q = floor(t.x / PI_16_FP64.x + 0.5);
    int k = int(q);

    if (k == 0) {
        if (j == 0) {
            return sin_taylor_fp64(t);
        } else if (j == 1) {
            return cos_taylor_fp64(t);
        } else if (j == -1) {
            return -cos_taylor_fp64(t);
        } else {
            return -sin_taylor_fp64(t);
        }
    }

    int abs_k = int(abs(float(k)));

    if (abs_k > 4) {
        return vec2(0.0 / 0.0, 0.0 / 0.0);
    } else {
        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));
    }

    vec2 u = vec2(0.0, 0.0);
    vec2 v = vec2(0.0, 0.0);

#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)
    if (abs(float(abs_k) - 1.0) < 0.5) {
        u = COS_TABLE_0_FP64;
        v = SIN_TABLE_0_FP64;
    } else if (abs(float(abs_k) - 2.0) < 0.5) {
        u = COS_TABLE_1_FP64;
        v = SIN_TABLE_1_FP64;
    } else if (abs(float(abs_k) - 3.0) < 0.5) {
        u = COS_TABLE_2_FP64;
        v = SIN_TABLE_2_FP64;
    } else if (abs(float(abs_k) - 4.0) < 0.5) {
        u = COS_TABLE_3_FP64;
        v = SIN_TABLE_3_FP64;
    }
#else
    if (abs_k == 1) {
        u = COS_TABLE_0_FP64;
        v = SIN_TABLE_0_FP64;
    } else if (abs_k == 2) {
        u = COS_TABLE_1_FP64;
        v = SIN_TABLE_1_FP64;
    } else if (abs_k == 3) {
        u = COS_TABLE_2_FP64;
        v = SIN_TABLE_2_FP64;
    } else if (abs_k == 4) {
        u = COS_TABLE_3_FP64;
        v = SIN_TABLE_3_FP64;
    }
#endif

    vec2 sin_t, cos_t;
    sincos_taylor_fp64(t, sin_t, cos_t);



    vec2 result = vec2(0.0, 0.0);
    if (j == 0) {
        if (k > 0) {
            result = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
        } else {
            result = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
        }
    } else if (j == 1) {
        if (k > 0) {
            result = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
        } else {
            result = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
        }
    } else if (j == -1) {
        if (k > 0) {
            result = sub_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));
        } else {
            result = -sum_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));
        }
    } else {
        if (k > 0) {
            result = -sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
        } else {
            result = sub_fp64(mul_fp64(v, cos_t), mul_fp64(u, sin_t));
        }
    }

    return result;
}

vec2 cos_fp64(vec2 a) {
    if (a.x == 0.0 && a.y == 0.0) {
        return vec2(1.0, 0.0);
    }

    // 2pi range reduction
    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));
    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));

    vec2 t;
    float q = floor(r.x / PI_2_FP64.x + 0.5);
    int j = int(q);

    if (j < -2 || j > 2) {
        return vec2(0.0 / 0.0, 0.0 / 0.0);
    }

    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));

    q = floor(t.x / PI_16_FP64.x + 0.5);
    int k = int(q);

    if (k == 0) {
        if (j == 0) {
            return cos_taylor_fp64(t);
        } else if (j == 1) {
            return -sin_taylor_fp64(t);
        } else if (j == -1) {
            return sin_taylor_fp64(t);
        } else {
            return -cos_taylor_fp64(t);
        }
    }

    int abs_k = int(abs(float(k)));

    if (abs_k > 4) {
        return vec2(0.0 / 0.0, 0.0 / 0.0);
    } else {
        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));
    }

    vec2 u = vec2(0.0, 0.0);
    vec2 v = vec2(0.0, 0.0);

#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)
    if (abs(float(abs_k) - 1.0) < 0.5) {
        u = COS_TABLE_0_FP64;
        v = SIN_TABLE_0_FP64;
    } else if (abs(float(abs_k) - 2.0) < 0.5) {
        u = COS_TABLE_1_FP64;
        v = SIN_TABLE_1_FP64;
    } else if (abs(float(abs_k) - 3.0) < 0.5) {
        u = COS_TABLE_2_FP64;
        v = SIN_TABLE_2_FP64;
    } else if (abs(float(abs_k) - 4.0) < 0.5) {
        u = COS_TABLE_3_FP64;
        v = SIN_TABLE_3_FP64;
    }
#else
    if (abs_k == 1) {
        u = COS_TABLE_0_FP64;
        v = SIN_TABLE_0_FP64;
    } else if (abs_k == 2) {
        u = COS_TABLE_1_FP64;
        v = SIN_TABLE_1_FP64;
    } else if (abs_k == 3) {
        u = COS_TABLE_2_FP64;
        v = SIN_TABLE_2_FP64;
    } else if (abs_k == 4) {
        u = COS_TABLE_3_FP64;
        v = SIN_TABLE_3_FP64;
    }
#endif

    vec2 sin_t, cos_t;
    sincos_taylor_fp64(t, sin_t, cos_t);

    vec2 result = vec2(0.0, 0.0);
    if (j == 0) {
        if (k > 0) {
            result = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
        } else {
            result = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
        }
    } else if (j == 1) {
        if (k > 0) {
            result = -sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
        } else {
            result = sub_fp64(mul_fp64(v, cos_t), mul_fp64(u, sin_t));
        }
    } else if (j == -1) {
        if (k > 0) {
            result = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
        } else {
            result = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
        }
    } else {
        if (k > 0) {
            result = sub_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));
        } else {
            result = -sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
        }
    }

    return result;
}

vec2 tan_fp64(vec2 a) {
    vec2 sin_a;
    vec2 cos_a;

    if (a.x == 0.0 && a.y == 0.0) {
        return vec2(0.0, 0.0);
    }

    // 2pi range reduction
    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));
    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));

    vec2 t;
    float q = floor(r.x / PI_2_FP64.x + 0.5);
    int j = int(q);


    if (j < -2 || j > 2) {
        return vec2(0.0 / 0.0, 0.0 / 0.0);
    }

    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));

    q = floor(t.x / PI_16_FP64.x + 0.5);
    int k = int(q);
    int abs_k = int(abs(float(k)));

    // We just can't get PI/16 * 3.0 very accurately.
    // so let's just store it
    if (abs_k > 4) {
        return vec2(0.0 / 0.0, 0.0 / 0.0);
    } else {
        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));
    }


    vec2 u = vec2(0.0, 0.0);
    vec2 v = vec2(0.0, 0.0);

    vec2 sin_t, cos_t;
    vec2 s, c;
    sincos_taylor_fp64(t, sin_t, cos_t);

    if (k == 0) {
        s = sin_t;
        c = cos_t;
    } else {
#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)
        if (abs(float(abs_k) - 1.0) < 0.5) {
            u = COS_TABLE_0_FP64;
            v = SIN_TABLE_0_FP64;
        } else if (abs(float(abs_k) - 2.0) < 0.5) {
            u = COS_TABLE_1_FP64;
            v = SIN_TABLE_1_FP64;
        } else if (abs(float(abs_k) - 3.0) < 0.5) {
            u = COS_TABLE_2_FP64;
            v = SIN_TABLE_2_FP64;
        } else if (abs(float(abs_k) - 4.0) < 0.5) {
            u = COS_TABLE_3_FP64;
            v = SIN_TABLE_3_FP64;
        }
#else
        if (abs_k == 1) {
            u = COS_TABLE_0_FP64;
            v = SIN_TABLE_0_FP64;
        } else if (abs_k == 2) {
            u = COS_TABLE_1_FP64;
            v = SIN_TABLE_1_FP64;
        } else if (abs_k == 3) {
            u = COS_TABLE_2_FP64;
            v = SIN_TABLE_2_FP64;
        } else if (abs_k == 4) {
            u = COS_TABLE_3_FP64;
            v = SIN_TABLE_3_FP64;
        }
#endif
        if (k > 0) {
            s = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
            c = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
        } else {
            s = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
            c = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
        }
    }

    if (j == 0) {
        sin_a = s;
        cos_a = c;
    } else if (j == 1) {
        sin_a = c;
        cos_a = -s;
    } else if (j == -1) {
        sin_a = -c;
        cos_a = s;
    } else {
        sin_a = -s;
        cos_a = -c;
    }
    return div_fp64(sin_a, cos_a);
}

vec2 radians_fp64(vec2 degree) {
  return mul_fp64(degree, PI_180_FP64);
}

vec2 mix_fp64(vec2 a, vec2 b, float x) {
  vec2 range = sub_fp64(b, a);
  return sum_fp64(a, mul_fp64(range, vec2(x, 0.0)));
}

// Vector functions
// vec2 functions
void vec2_sum_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {
    out_val[0] = sum_fp64(a[0], b[0]);
    out_val[1] = sum_fp64(a[1], b[1]);
}

void vec2_sub_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {
    out_val[0] = sub_fp64(a[0], b[0]);
    out_val[1] = sub_fp64(a[1], b[1]);
}

void vec2_mul_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {
    out_val[0] = mul_fp64(a[0], b[0]);
    out_val[1] = mul_fp64(a[1], b[1]);
}

void vec2_div_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {
    out_val[0] = div_fp64(a[0], b[0]);
    out_val[1] = div_fp64(a[1], b[1]);
}

void vec2_mix_fp64(vec2 x[2], vec2 y[2], float a, out vec2 out_val[2]) {
  vec2 range[2];
  vec2_sub_fp64(y, x, range);
  vec2 portion[2];
  portion[0] = range[0] * a;
  portion[1] = range[1] * a;
  vec2_sum_fp64(x, portion, out_val);
}

vec2 vec2_length_fp64(vec2 x[2]) {
  return sqrt_fp64(sum_fp64(mul_fp64(x[0], x[0]), mul_fp64(x[1], x[1])));
}

void vec2_normalize_fp64(vec2 x[2], out vec2 out_val[2]) {
  vec2 length = vec2_length_fp64(x);
  vec2 length_vec2[2];
  length_vec2[0] = length;
  length_vec2[1] = length;

  vec2_div_fp64(x, length_vec2, out_val);
}

vec2 vec2_distance_fp64(vec2 x[2], vec2 y[2]) {
  vec2 diff[2];
  vec2_sub_fp64(x, y, diff);
  return vec2_length_fp64(diff);
}

vec2 vec2_dot_fp64(vec2 a[2], vec2 b[2]) {
  vec2 v[2];

  v[0] = mul_fp64(a[0], b[0]);
  v[1] = mul_fp64(a[1], b[1]);

  return sum_fp64(v[0], v[1]);
}

// vec3 functions
void vec3_sub_fp64(vec2 a[3], vec2 b[3], out vec2 out_val[3]) {
  for (int i = 0; i < 3; i++) {
    out_val[i] = sum_fp64(a[i], b[i]);
  }
}

void vec3_sum_fp64(vec2 a[3], vec2 b[3], out vec2 out_val[3]) {
  for (int i = 0; i < 3; i++) {
    out_val[i] = sum_fp64(a[i], b[i]);
  }
}

vec2 vec3_length_fp64(vec2 x[3]) {
  return sqrt_fp64(sum_fp64(sum_fp64(mul_fp64(x[0], x[0]), mul_fp64(x[1], x[1])),
    mul_fp64(x[2], x[2])));
}

vec2 vec3_distance_fp64(vec2 x[3], vec2 y[3]) {
  vec2 diff[3];
  vec3_sub_fp64(x, y, diff);
  return vec3_length_fp64(diff);
}

// vec4 functions
void vec4_fp64(vec4 a, out vec2 out_val[4]) {
  out_val[0].x = a[0];
  out_val[0].y = 0.0;

  out_val[1].x = a[1];
  out_val[1].y = 0.0;

  out_val[2].x = a[2];
  out_val[2].y = 0.0;

  out_val[3].x = a[3];
  out_val[3].y = 0.0;
}

void vec4_scalar_mul_fp64(vec2 a[4], vec2 b, out vec2 out_val[4]) {
  out_val[0] = mul_fp64(a[0], b);
  out_val[1] = mul_fp64(a[1], b);
  out_val[2] = mul_fp64(a[2], b);
  out_val[3] = mul_fp64(a[3], b);
}

void vec4_sum_fp64(vec2 a[4], vec2 b[4], out vec2 out_val[4]) {
  for (int i = 0; i < 4; i++) {
    out_val[i] = sum_fp64(a[i], b[i]);
  }
}

void vec4_dot_fp64(vec2 a[4], vec2 b[4], out vec2 out_val) {
  vec2 v[4];

  v[0] = mul_fp64(a[0], b[0]);
  v[1] = mul_fp64(a[1], b[1]);
  v[2] = mul_fp64(a[2], b[2]);
  v[3] = mul_fp64(a[3], b[3]);

  out_val = sum_fp64(sum_fp64(v[0], v[1]), sum_fp64(v[2], v[3]));
}

void mat4_vec4_mul_fp64(vec2 b[16], vec2 a[4], out vec2 out_val[4]) {
  vec2 tmp[4];

  for (int i = 0; i < 4; i++)
  {
    for (int j = 0; j < 4; j++)
    {
      tmp[j] = b[j + i * 4];
    }
    vec4_dot_fp64(a, tmp, out_val[i]);
  }
}
`
  );

  // ../../node_modules/@luma.gl/shadertools/dist/modules/math/fp64/fp64.js
  var defaultUniforms = {
    // Used in LUMA_FP64_CODE_ELIMINATION_WORKAROUND
    ONE: 1
  };
  var fp64arithmetic = {
    name: "fp64arithmetic",
    vs: fp64arithmeticShader,
    defaultUniforms,
    uniformTypes: { ONE: "f32" },
    // Additional Functions
    fp64ify,
    fp64LowPart,
    fp64ifyMatrix4
  };
  var fp64 = {
    name: "fp64",
    vs: fp64functionShader,
    dependencies: [fp64arithmetic],
    // Additional Functions
    fp64ify,
    fp64LowPart,
    fp64ifyMatrix4
  };

  // ../../node_modules/@luma.gl/shadertools/dist/modules/engine/picking/picking.js
  var DEFAULT_HIGHLIGHT_COLOR = [0, 1, 1, 1];
  var vs = (
    /* glsl */
    `uniform pickingUniforms {
  float isActive;
  float isAttribute;
  float isHighlightActive;
  float useFloatColors;
  vec3 highlightedObjectColor;
  vec4 highlightColor;
} picking;

out vec4 picking_vRGBcolor_Avalid;

// Normalize unsigned byte color to 0-1 range
vec3 picking_normalizeColor(vec3 color) {
  return picking.useFloatColors > 0.5 ? color : color / 255.0;
}

// Normalize unsigned byte color to 0-1 range
vec4 picking_normalizeColor(vec4 color) {
  return picking.useFloatColors > 0.5 ? color : color / 255.0;
}

bool picking_isColorZero(vec3 color) {
  return dot(color, vec3(1.0)) < 0.00001;
}

bool picking_isColorValid(vec3 color) {
  return dot(color, vec3(1.0)) > 0.00001;
}

// Check if this vertex is highlighted 
bool isVertexHighlighted(vec3 vertexColor) {
  vec3 highlightedObjectColor = picking_normalizeColor(picking.highlightedObjectColor);
  return
    bool(picking.isHighlightActive) && picking_isColorZero(abs(vertexColor - highlightedObjectColor));
}

// Set the current picking color
void picking_setPickingColor(vec3 pickingColor) {
  pickingColor = picking_normalizeColor(pickingColor);

  if (bool(picking.isActive)) {
    // Use alpha as the validity flag. If pickingColor is [0, 0, 0] fragment is non-pickable
    picking_vRGBcolor_Avalid.a = float(picking_isColorValid(pickingColor));

    if (!bool(picking.isAttribute)) {
      // Stores the picking color so that the fragment shader can render it during picking
      picking_vRGBcolor_Avalid.rgb = pickingColor;
    }
  } else {
    // Do the comparison with selected item color in vertex shader as it should mean fewer compares
    picking_vRGBcolor_Avalid.a = float(isVertexHighlighted(pickingColor));
  }
}

void picking_setPickingAttribute(float value) {
  if (bool(picking.isAttribute)) {
    picking_vRGBcolor_Avalid.r = value;
  }
}

void picking_setPickingAttribute(vec2 value) {
  if (bool(picking.isAttribute)) {
    picking_vRGBcolor_Avalid.rg = value;
  }
}

void picking_setPickingAttribute(vec3 value) {
  if (bool(picking.isAttribute)) {
    picking_vRGBcolor_Avalid.rgb = value;
  }
}
`
  );
  var fs = (
    /* glsl */
    `uniform pickingUniforms {
  float isActive;
  float isAttribute;
  float isHighlightActive;
  float useFloatColors;
  vec3 highlightedObjectColor;
  vec4 highlightColor;
} picking;

in vec4 picking_vRGBcolor_Avalid;

/*
 * Returns highlight color if this item is selected.
 */
vec4 picking_filterHighlightColor(vec4 color) {
  // If we are still picking, we don't highlight
  if (picking.isActive > 0.5) {
    return color;
  }

  bool selected = bool(picking_vRGBcolor_Avalid.a);

  if (selected) {
    // Blend in highlight color based on its alpha value
    float highLightAlpha = picking.highlightColor.a;
    float blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);
    float highLightRatio = highLightAlpha / blendedAlpha;

    vec3 blendedRGB = mix(color.rgb, picking.highlightColor.rgb, highLightRatio);
    return vec4(blendedRGB, blendedAlpha);
  } else {
    return color;
  }
}

/*
 * Returns picking color if picking enabled else unmodified argument.
 */
vec4 picking_filterPickingColor(vec4 color) {
  if (bool(picking.isActive)) {
    if (picking_vRGBcolor_Avalid.a == 0.0) {
      discard;
    }
    return picking_vRGBcolor_Avalid;
  }
  return color;
}

/*
 * Returns picking color if picking is enabled if not
 * highlight color if this item is selected, otherwise unmodified argument.
 */
vec4 picking_filterColor(vec4 color) {
  vec4 highlightColor = picking_filterHighlightColor(color);
  return picking_filterPickingColor(highlightColor);
}
`
  );
  var picking = {
    props: {},
    uniforms: {},
    name: "picking",
    uniformTypes: {
      isActive: "f32",
      isAttribute: "f32",
      isHighlightActive: "f32",
      useFloatColors: "f32",
      highlightedObjectColor: "vec3<f32>",
      highlightColor: "vec4<f32>"
    },
    defaultUniforms: {
      isActive: false,
      isAttribute: false,
      isHighlightActive: false,
      useFloatColors: true,
      highlightedObjectColor: [0, 0, 0],
      highlightColor: DEFAULT_HIGHLIGHT_COLOR
    },
    vs,
    fs,
    getUniforms
  };
  function getUniforms(opts = {}, prevUniforms) {
    const uniforms = {};
    if (opts.highlightedObjectColor === void 0) {
    } else if (opts.highlightedObjectColor === null) {
      uniforms.isHighlightActive = false;
    } else {
      uniforms.isHighlightActive = true;
      const highlightedObjectColor = opts.highlightedObjectColor.slice(0, 3);
      uniforms.highlightedObjectColor = highlightedObjectColor;
    }
    if (opts.highlightColor) {
      const color = Array.from(opts.highlightColor, (x4) => x4 / 255);
      if (!Number.isFinite(color[3])) {
        color[3] = 1;
      }
      uniforms.highlightColor = color;
    }
    if (opts.isActive !== void 0) {
      uniforms.isActive = Boolean(opts.isActive);
      uniforms.isAttribute = Boolean(opts.isAttribute);
    }
    if (opts.useFloatColors !== void 0) {
      uniforms.useFloatColors = Boolean(opts.useFloatColors);
    }
    return uniforms;
  }

  // ../../node_modules/@luma.gl/shadertools/dist/modules/lighting/lights/lighting.js
  init_dist4();

  // ../../node_modules/@luma.gl/shadertools/dist/modules/lighting/lights/lighting-glsl.js
  var lightingUniformsGLSL = (
    /* glsl */
    `precision highp int;

// #if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))
struct AmbientLight {
  vec3 color;
};

struct PointLight {
  vec3 color;
  vec3 position;
  vec3 attenuation; // 2nd order x:Constant-y:Linear-z:Exponential
};

struct DirectionalLight {
  vec3 color;
  vec3 direction;
};

uniform lightingUniforms {
  int enabled;
  int lightType;

  int directionalLightCount;
  int pointLightCount;

  vec3 ambientColor;

  vec3 lightColor0;
  vec3 lightPosition0;
  vec3 lightDirection0;
  vec3 lightAttenuation0;

  vec3 lightColor1;
  vec3 lightPosition1;
  vec3 lightDirection1;
  vec3 lightAttenuation1;

  vec3 lightColor2;
  vec3 lightPosition2;
  vec3 lightDirection2;
  vec3 lightAttenuation2;
} lighting;

PointLight lighting_getPointLight(int index) {
  switch (index) {
    case 0:
      return PointLight(lighting.lightColor0, lighting.lightPosition0, lighting.lightAttenuation0);
    case 1:
      return PointLight(lighting.lightColor1, lighting.lightPosition1, lighting.lightAttenuation1);
    case 2:
    default:  
      return PointLight(lighting.lightColor2, lighting.lightPosition2, lighting.lightAttenuation2);
  }
}

DirectionalLight lighting_getDirectionalLight(int index) {
  switch (index) {
    case 0:
      return DirectionalLight(lighting.lightColor0, lighting.lightDirection0);
    case 1:
      return DirectionalLight(lighting.lightColor1, lighting.lightDirection1);
    case 2:
    default:   
      return DirectionalLight(lighting.lightColor2, lighting.lightDirection2);
  }
} 

float getPointLightAttenuation(PointLight pointLight, float distance) {
  return pointLight.attenuation.x
       + pointLight.attenuation.y * distance
       + pointLight.attenuation.z * distance * distance;
}

// #endif
`
  );

  // ../../node_modules/@luma.gl/shadertools/dist/modules/lighting/lights/lighting-wgsl.js
  var lightingUniformsWGSL = (
    /* wgsl */
    `// #if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))
struct AmbientLight {
  color: vec3<f32>,
};

struct PointLight {
  color: vec3<f32>,
  position: vec3<f32>,
  attenuation: vec3<f32>, // 2nd order x:Constant-y:Linear-z:Exponential
};

struct DirectionalLight {
  color: vec3<f32>,
  direction: vec3<f32>,
};

struct lightingUniforms {
  enabled: i32,
  pointLightCount: i32,
  directionalLightCount: i32,

  ambientColor: vec3<f32>,

  // TODO - support multiple lights by uncommenting arrays below
  lightType: i32,
  lightColor: vec3<f32>,
  lightDirection: vec3<f32>,
  lightPosition: vec3<f32>,
  lightAttenuation: vec3<f32>,

  // AmbientLight ambientLight;
  // PointLight pointLight[MAX_LIGHTS];
  // DirectionalLight directionalLight[MAX_LIGHTS];
};

// Binding 0:1 is reserved for lighting (Note: could go into separate bind group as it is stable across draw calls)
@binding(1) @group(0) var<uniform> lighting : lightingUniforms;

fn lighting_getPointLight(index: i32) -> PointLight {
  return PointLight(lighting.lightColor, lighting.lightPosition, lighting.lightAttenuation);
}

fn lighting_getDirectionalLight(index: i32) -> DirectionalLight {
  return DirectionalLight(lighting.lightColor, lighting.lightDirection);
} 

fn getPointLightAttenuation(pointLight: PointLight, distance: f32) -> f32 {
  return pointLight.attenuation.x
       + pointLight.attenuation.y * distance
       + pointLight.attenuation.z * distance * distance;
}
`
  );

  // ../../node_modules/@luma.gl/shadertools/dist/modules/lighting/lights/lighting.js
  var MAX_LIGHTS = 5;
  var COLOR_FACTOR = 255;
  var LIGHT_TYPE;
  (function(LIGHT_TYPE2) {
    LIGHT_TYPE2[LIGHT_TYPE2["POINT"] = 0] = "POINT";
    LIGHT_TYPE2[LIGHT_TYPE2["DIRECTIONAL"] = 1] = "DIRECTIONAL";
  })(LIGHT_TYPE || (LIGHT_TYPE = {}));
  var lighting = {
    props: {},
    uniforms: {},
    name: "lighting",
    defines: {
      // MAX_LIGHTS
    },
    uniformTypes: {
      enabled: "i32",
      lightType: "i32",
      directionalLightCount: "i32",
      pointLightCount: "i32",
      ambientColor: "vec3<f32>",
      // TODO define as arrays once we have appropriate uniformTypes
      lightColor0: "vec3<f32>",
      lightPosition0: "vec3<f32>",
      // TODO - could combine direction and attenuation
      lightDirection0: "vec3<f32>",
      lightAttenuation0: "vec3<f32>",
      lightColor1: "vec3<f32>",
      lightPosition1: "vec3<f32>",
      lightDirection1: "vec3<f32>",
      lightAttenuation1: "vec3<f32>",
      lightColor2: "vec3<f32>",
      lightPosition2: "vec3<f32>",
      lightDirection2: "vec3<f32>",
      lightAttenuation2: "vec3<f32>"
    },
    defaultUniforms: {
      enabled: 1,
      lightType: LIGHT_TYPE.POINT,
      directionalLightCount: 0,
      pointLightCount: 0,
      ambientColor: [0.1, 0.1, 0.1],
      lightColor0: [1, 1, 1],
      lightPosition0: [1, 1, 2],
      // TODO - could combine direction and attenuation
      lightDirection0: [1, 1, 1],
      lightAttenuation0: [1, 0, 0],
      lightColor1: [1, 1, 1],
      lightPosition1: [1, 1, 2],
      lightDirection1: [1, 1, 1],
      lightAttenuation1: [1, 0, 0],
      lightColor2: [1, 1, 1],
      lightPosition2: [1, 1, 2],
      lightDirection2: [1, 1, 1],
      lightAttenuation2: [1, 0, 0]
    },
    source: lightingUniformsWGSL,
    vs: lightingUniformsGLSL,
    fs: lightingUniformsGLSL,
    getUniforms: getUniforms2
  };
  function getUniforms2(props, prevUniforms = {}) {
    props = props ? { ...props } : props;
    if (!props) {
      return { ...lighting.defaultUniforms };
    }
    if (props.lights) {
      props = { ...props, ...extractLightTypes(props.lights), lights: void 0 };
    }
    const { ambientLight, pointLights, directionalLights } = props || {};
    const hasLights = ambientLight || pointLights && pointLights.length > 0 || directionalLights && directionalLights.length > 0;
    if (!hasLights) {
      return { ...lighting.defaultUniforms, enabled: 0 };
    }
    const uniforms = {
      ...lighting.defaultUniforms,
      ...prevUniforms,
      ...getLightSourceUniforms({ ambientLight, pointLights, directionalLights })
    };
    if (props.enabled !== void 0) {
      uniforms.enabled = props.enabled ? 1 : 0;
    }
    return uniforms;
  }
  function getLightSourceUniforms({ ambientLight, pointLights = [], directionalLights = [] }) {
    const lightSourceUniforms = {};
    lightSourceUniforms.ambientColor = convertColor(ambientLight);
    let currentLight = 0;
    for (const pointLight of pointLights) {
      lightSourceUniforms.lightType = LIGHT_TYPE.POINT;
      const i7 = currentLight;
      lightSourceUniforms[`lightColor${i7}`] = convertColor(pointLight);
      lightSourceUniforms[`lightPosition${i7}`] = pointLight.position;
      lightSourceUniforms[`lightAttenuation${i7}`] = pointLight.attenuation || [1, 0, 0];
      currentLight++;
    }
    for (const directionalLight of directionalLights) {
      lightSourceUniforms.lightType = LIGHT_TYPE.DIRECTIONAL;
      const i7 = currentLight;
      lightSourceUniforms[`lightColor${i7}`] = convertColor(directionalLight);
      lightSourceUniforms[`lightDirection${i7}`] = directionalLight.direction;
      currentLight++;
    }
    if (currentLight > MAX_LIGHTS) {
      log2.warn("MAX_LIGHTS exceeded")();
    }
    lightSourceUniforms.directionalLightCount = directionalLights.length;
    lightSourceUniforms.pointLightCount = pointLights.length;
    return lightSourceUniforms;
  }
  function extractLightTypes(lights) {
    const lightSources = { pointLights: [], directionalLights: [] };
    for (const light of lights || []) {
      switch (light.type) {
        case "ambient":
          lightSources.ambientLight = light;
          break;
        case "directional":
          lightSources.directionalLights?.push(light);
          break;
        case "point":
          lightSources.pointLights?.push(light);
          break;
        default:
      }
    }
    return lightSources;
  }
  function convertColor(colorDef = {}) {
    const { color = [0, 0, 0], intensity = 1 } = colorDef;
    return color.map((component) => component * intensity / COLOR_FACTOR);
  }

  // ../../node_modules/@luma.gl/shadertools/dist/modules/lighting/phong-material/phong-shaders-glsl.js
  var PHONG_VS = (
    /* glsl */
    `uniform phongMaterialUniforms {
  uniform float ambient;
  uniform float diffuse;
  uniform float shininess;
  uniform vec3  specularColor;
} material;
`
  );
  var PHONG_FS = (
    /* glsl */
    `#define MAX_LIGHTS 3

uniform phongMaterialUniforms {
  uniform float ambient;
  uniform float diffuse;
  uniform float shininess;
  uniform vec3  specularColor;
} material;

vec3 lighting_getLightColor(vec3 surfaceColor, vec3 light_direction, vec3 view_direction, vec3 normal_worldspace, vec3 color) {
  vec3 halfway_direction = normalize(light_direction + view_direction);
  float lambertian = dot(light_direction, normal_worldspace);
  float specular = 0.0;
  if (lambertian > 0.0) {
    float specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);
    specular = pow(specular_angle, material.shininess);
  }
  lambertian = max(lambertian, 0.0);
  return (lambertian * material.diffuse * surfaceColor + specular * material.specularColor) * color;
}

vec3 lighting_getLightColor(vec3 surfaceColor, vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {
  vec3 lightColor = surfaceColor;

  if (lighting.enabled == 0) {
    return lightColor;
  }

  vec3 view_direction = normalize(cameraPosition - position_worldspace);
  lightColor = material.ambient * surfaceColor * lighting.ambientColor;

  for (int i = 0; i < lighting.pointLightCount; i++) {
    PointLight pointLight = lighting_getPointLight(i);
    vec3 light_position_worldspace = pointLight.position;
    vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
    float light_attenuation = getPointLightAttenuation(pointLight, distance(light_position_worldspace, position_worldspace));
    lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color / light_attenuation);
  }

  int totalLights = min(MAX_LIGHTS, lighting.pointLightCount + lighting.directionalLightCount);
  for (int i = lighting.pointLightCount; i < totalLights; i++) {
    DirectionalLight directionalLight = lighting_getDirectionalLight(i);
    lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
  }
  
  return lightColor;
}
`
  );

  // ../../node_modules/@luma.gl/shadertools/dist/modules/lighting/phong-material/phong-shaders-wgsl.js
  var PHONG_WGSL = (
    /* wgsl */
    `struct phongMaterialUniforms {
  ambient: f32,
  diffuse: f32,
  shininess: f32,
  specularColor: vec3<f32>,
};

@binding(2) @group(0) var<uniform> phongMaterial : phongMaterialUniforms;

fn lighting_getLightColor(surfaceColor: vec3<f32>, light_direction: vec3<f32>, view_direction: vec3<f32>, normal_worldspace: vec3<f32>, color: vec3<f32>) -> vec3<f32> {
  let halfway_direction: vec3<f32> = normalize(light_direction + view_direction);
  var lambertian: f32 = dot(light_direction, normal_worldspace);
  var specular: f32 = 0.0;
  if (lambertian > 0.0) {
    let specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);
    specular = pow(specular_angle, phongMaterial.shininess);
  }
  lambertian = max(lambertian, 0.0);
  return (lambertian * phongMaterial.diffuse * surfaceColor + specular * phongMaterial.specularColor) * color;
}

fn lighting_getLightColor2(surfaceColor: vec3<f32>, cameraPosition: vec3<f32>, position_worldspace: vec3<f32>, normal_worldspace: vec3<f32>) -> vec3<f32> {
  var lightColor: vec3<f32> = surfaceColor;

  if (lighting.enabled == 0) {
    return lightColor;
  }

  let view_direction: vec3<f32> = normalize(cameraPosition - position_worldspace);
  lightColor = phongMaterial.ambient * surfaceColor * lighting.ambientColor;

  if (lighting.lightType == 0) {
    let pointLight: PointLight  = lighting_getPointLight(0);
    let light_position_worldspace: vec3<f32> = pointLight.position;
    let light_direction: vec3<f32> = normalize(light_position_worldspace - position_worldspace);
    lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
  } else if (lighting.lightType == 1) {
    var directionalLight: DirectionalLight = lighting_getDirectionalLight(0);
    lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
  }
  
  return lightColor;
  /*
  for (int i = 0; i < MAX_LIGHTS; i++) {
    if (i >= lighting.pointLightCount) {
      break;
    }
    PointLight pointLight = lighting.pointLight[i];
    vec3 light_position_worldspace = pointLight.position;
    vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
    lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
  }

  for (int i = 0; i < MAX_LIGHTS; i++) {
    if (i >= lighting.directionalLightCount) {
      break;
    }
    DirectionalLight directionalLight = lighting.directionalLight[i];
    lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
  }
  */
}

fn lighting_getSpecularLightColor(cameraPosition: vec3<f32>, position_worldspace: vec3<f32>, normal_worldspace: vec3<f32>) -> vec3<f32>{
  var lightColor = vec3<f32>(0, 0, 0);
  let surfaceColor = vec3<f32>(0, 0, 0);

  if (lighting.enabled == 0) {
    let view_direction = normalize(cameraPosition - position_worldspace);

    switch (lighting.lightType) {
      case 0, default: {
        let pointLight: PointLight = lighting_getPointLight(0);
        let light_position_worldspace: vec3<f32> = pointLight.position;
        let light_direction: vec3<f32> = normalize(light_position_worldspace - position_worldspace);
        lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
      }
      case 1: {
        let directionalLight: DirectionalLight = lighting_getDirectionalLight(0);
        lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
      }
    }
  }
  return lightColor;
}
`
  );

  // ../../node_modules/@luma.gl/shadertools/dist/modules/lighting/gouraud-material/gouraud-material.js
  var gouraudMaterial = {
    props: {},
    name: "gouraudMaterial",
    // Note these are switched between phong and gouraud
    vs: PHONG_FS.replace("phongMaterial", "gouraudMaterial"),
    fs: PHONG_VS.replace("phongMaterial", "gouraudMaterial"),
    source: PHONG_WGSL.replaceAll("phongMaterial", "gouraudMaterial"),
    defines: {
      LIGHTING_VERTEX: true
    },
    dependencies: [lighting],
    uniformTypes: {
      ambient: "f32",
      diffuse: "f32",
      shininess: "f32",
      specularColor: "vec3<f32>"
    },
    defaultUniforms: {
      ambient: 0.35,
      diffuse: 0.6,
      shininess: 32,
      specularColor: [0.15, 0.15, 0.15]
    },
    getUniforms(props) {
      const uniforms = { ...props };
      if (uniforms.specularColor) {
        uniforms.specularColor = uniforms.specularColor.map((x4) => x4 / 255);
      }
      return { ...gouraudMaterial.defaultUniforms, ...uniforms };
    }
  };

  // ../../node_modules/@luma.gl/shadertools/dist/modules/lighting/phong-material/phong-material.js
  var phongMaterial = {
    name: "phongMaterial",
    dependencies: [lighting],
    // Note these are switched between phong and gouraud
    source: PHONG_WGSL,
    vs: PHONG_VS,
    fs: PHONG_FS,
    defines: {
      LIGHTING_FRAGMENT: true
    },
    uniformTypes: {
      ambient: "f32",
      diffuse: "f32",
      shininess: "f32",
      specularColor: "vec3<f32>"
    },
    defaultUniforms: {
      ambient: 0.35,
      diffuse: 0.6,
      shininess: 32,
      specularColor: [0.15, 0.15, 0.15]
    },
    getUniforms(props) {
      const uniforms = { ...props };
      if (uniforms.specularColor) {
        uniforms.specularColor = uniforms.specularColor.map((x4) => x4 / 255);
      }
      return { ...phongMaterial.defaultUniforms, ...uniforms };
    }
  };

  // ../../node_modules/@luma.gl/shadertools/dist/modules/lighting/pbr-material/pbr-material-glsl.js
  var vs2 = (
    /* glsl */
    `out vec3 pbr_vPosition;
out vec2 pbr_vUV;

#ifdef HAS_NORMALS
# ifdef HAS_TANGENTS
out mat3 pbr_vTBN;
# else
out vec3 pbr_vNormal;
# endif
#endif

void pbr_setPositionNormalTangentUV(vec4 position, vec4 normal, vec4 tangent, vec2 uv)
{
  vec4 pos = pbrProjection.modelMatrix * position;
  pbr_vPosition = vec3(pos.xyz) / pos.w;

#ifdef HAS_NORMALS
#ifdef HAS_TANGENTS
  vec3 normalW = normalize(vec3(pbrProjection.normalMatrix * vec4(normal.xyz, 0.0)));
  vec3 tangentW = normalize(vec3(pbrProjection.modelMatrix * vec4(tangent.xyz, 0.0)));
  vec3 bitangentW = cross(normalW, tangentW) * tangent.w;
  pbr_vTBN = mat3(tangentW, bitangentW, normalW);
#else // HAS_TANGENTS != 1
  pbr_vNormal = normalize(vec3(pbrProjection.modelMatrix * vec4(normal.xyz, 0.0)));
#endif
#endif

#ifdef HAS_UV
  pbr_vUV = uv;
#else
  pbr_vUV = vec2(0.,0.);
#endif
}
`
  );
  var fs2 = (
    /* glsl */
    `precision highp float;

uniform pbrMaterialUniforms {
  // Material is unlit
  bool unlit;

  // Base color map
  bool baseColorMapEnabled;
  vec4 baseColorFactor;

  bool normalMapEnabled;  
  float normalScale; // #ifdef HAS_NORMALMAP

  bool emissiveMapEnabled;
  vec3 emissiveFactor; // #ifdef HAS_EMISSIVEMAP

  vec2 metallicRoughnessValues;
  bool metallicRoughnessMapEnabled;

  bool occlusionMapEnabled;
  float occlusionStrength; // #ifdef HAS_OCCLUSIONMAP
  
  bool alphaCutoffEnabled;
  float alphaCutoff; // #ifdef ALPHA_CUTOFF
  
  // IBL
  bool IBLenabled;
  vec2 scaleIBLAmbient; // #ifdef USE_IBL
  
  // debugging flags used for shader output of intermediate PBR variables
  // #ifdef PBR_DEBUG
  vec4 scaleDiffBaseMR;
  vec4 scaleFGDSpec;
  // #endif
} pbrMaterial;

// Samplers
#ifdef HAS_BASECOLORMAP
uniform sampler2D pbr_baseColorSampler;
#endif
#ifdef HAS_NORMALMAP
uniform sampler2D pbr_normalSampler;
#endif
#ifdef HAS_EMISSIVEMAP
uniform sampler2D pbr_emissiveSampler;
#endif
#ifdef HAS_METALROUGHNESSMAP
uniform sampler2D pbr_metallicRoughnessSampler;
#endif
#ifdef HAS_OCCLUSIONMAP
uniform sampler2D pbr_occlusionSampler;
#endif
#ifdef USE_IBL
uniform samplerCube pbr_diffuseEnvSampler;
uniform samplerCube pbr_specularEnvSampler;
uniform sampler2D pbr_brdfLUT;
#endif

// Inputs from vertex shader

in vec3 pbr_vPosition;
in vec2 pbr_vUV;

#ifdef HAS_NORMALS
#ifdef HAS_TANGENTS
in mat3 pbr_vTBN;
#else
in vec3 pbr_vNormal;
#endif
#endif

// Encapsulate the various inputs used by the various functions in the shading equation
// We store values in this struct to simplify the integration of alternative implementations
// of the shading terms, outlined in the Readme.MD Appendix.
struct PBRInfo {
  float NdotL;                  // cos angle between normal and light direction
  float NdotV;                  // cos angle between normal and view direction
  float NdotH;                  // cos angle between normal and half vector
  float LdotH;                  // cos angle between light direction and half vector
  float VdotH;                  // cos angle between view direction and half vector
  float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)
  float metalness;              // metallic value at the surface
  vec3 reflectance0;            // full reflectance color (normal incidence angle)
  vec3 reflectance90;           // reflectance color at grazing angle
  float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])
  vec3 diffuseColor;            // color contribution from diffuse lighting
  vec3 specularColor;           // color contribution from specular lighting
  vec3 n;                       // normal at surface point
  vec3 v;                       // vector from surface point to camera
};

const float M_PI = 3.141592653589793;
const float c_MinRoughness = 0.04;

vec4 SRGBtoLINEAR(vec4 srgbIn)
{
#ifdef MANUAL_SRGB
#ifdef SRGB_FAST_APPROXIMATION
  vec3 linOut = pow(srgbIn.xyz,vec3(2.2));
#else // SRGB_FAST_APPROXIMATION
  vec3 bLess = step(vec3(0.04045),srgbIn.xyz);
  vec3 linOut = mix( srgbIn.xyz/vec3(12.92), pow((srgbIn.xyz+vec3(0.055))/vec3(1.055),vec3(2.4)), bLess );
#endif //SRGB_FAST_APPROXIMATION
  return vec4(linOut,srgbIn.w);;
#else //MANUAL_SRGB
  return srgbIn;
#endif //MANUAL_SRGB
}

// Find the normal for this fragment, pulling either from a predefined normal map
// or from the interpolated mesh normal and tangent attributes.
vec3 getNormal()
{
  // Retrieve the tangent space matrix
#ifndef HAS_TANGENTS
  vec3 pos_dx = dFdx(pbr_vPosition);
  vec3 pos_dy = dFdy(pbr_vPosition);
  vec3 tex_dx = dFdx(vec3(pbr_vUV, 0.0));
  vec3 tex_dy = dFdy(vec3(pbr_vUV, 0.0));
  vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);

#ifdef HAS_NORMALS
  vec3 ng = normalize(pbr_vNormal);
#else
  vec3 ng = cross(pos_dx, pos_dy);
#endif

  t = normalize(t - ng * dot(ng, t));
  vec3 b = normalize(cross(ng, t));
  mat3 tbn = mat3(t, b, ng);
#else // HAS_TANGENTS
  mat3 tbn = pbr_vTBN;
#endif

#ifdef HAS_NORMALMAP
  vec3 n = texture(pbr_normalSampler, pbr_vUV).rgb;
  n = normalize(tbn * ((2.0 * n - 1.0) * vec3(pbrMaterial.normalScale, pbrMaterial.normalScale, 1.0)));
#else
  // The tbn matrix is linearly interpolated, so we need to re-normalize
  vec3 n = normalize(tbn[2].xyz);
#endif

  return n;
}

// Calculation of the lighting contribution from an optional Image Based Light source.
// Precomputed Environment Maps are required uniform inputs and are computed as outlined in [1].
// See our README.md on Environment Maps [3] for additional discussion.
#ifdef USE_IBL
vec3 getIBLContribution(PBRInfo pbrInfo, vec3 n, vec3 reflection)
{
  float mipCount = 9.0; // resolution of 512x512
  float lod = (pbrInfo.perceptualRoughness * mipCount);
  // retrieve a scale and bias to F0. See [1], Figure 3
  vec3 brdf = SRGBtoLINEAR(texture(pbr_brdfLUT,
    vec2(pbrInfo.NdotV, 1.0 - pbrInfo.perceptualRoughness))).rgb;
  vec3 diffuseLight = SRGBtoLINEAR(texture(pbr_diffuseEnvSampler, n)).rgb;

#ifdef USE_TEX_LOD
  vec3 specularLight = SRGBtoLINEAR(texture(pbr_specularEnvSampler, reflection, lod)).rgb;
#else
  vec3 specularLight = SRGBtoLINEAR(texture(pbr_specularEnvSampler, reflection)).rgb;
#endif

  vec3 diffuse = diffuseLight * pbrInfo.diffuseColor;
  vec3 specular = specularLight * (pbrInfo.specularColor * brdf.x + brdf.y);

  // For presentation, this allows us to disable IBL terms
  diffuse *= pbrMaterial.scaleIBLAmbient.x;
  specular *= pbrMaterial.scaleIBLAmbient.y;

  return diffuse + specular;
}
#endif

// Basic Lambertian diffuse
// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog
// See also [1], Equation 1
vec3 diffuse(PBRInfo pbrInfo)
{
  return pbrInfo.diffuseColor / M_PI;
}

// The following equation models the Fresnel reflectance term of the spec equation (aka F())
// Implementation of fresnel from [4], Equation 15
vec3 specularReflection(PBRInfo pbrInfo)
{
  return pbrInfo.reflectance0 +
    (pbrInfo.reflectance90 - pbrInfo.reflectance0) *
    pow(clamp(1.0 - pbrInfo.VdotH, 0.0, 1.0), 5.0);
}

// This calculates the specular geometric attenuation (aka G()),
// where rougher material will reflect less light back to the viewer.
// This implementation is based on [1] Equation 4, and we adopt their modifications to
// alphaRoughness as input as originally proposed in [2].
float geometricOcclusion(PBRInfo pbrInfo)
{
  float NdotL = pbrInfo.NdotL;
  float NdotV = pbrInfo.NdotV;
  float r = pbrInfo.alphaRoughness;

  float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));
  float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));
  return attenuationL * attenuationV;
}

// The following equation(s) model the distribution of microfacet normals across
// the area being drawn (aka D())
// Implementation from "Average Irregularity Representation of a Roughened Surface
// for Ray Reflection" by T. S. Trowbridge, and K. P. Reitz
// Follows the distribution function recommended in the SIGGRAPH 2013 course notes
// from EPIC Games [1], Equation 3.
float microfacetDistribution(PBRInfo pbrInfo)
{
  float roughnessSq = pbrInfo.alphaRoughness * pbrInfo.alphaRoughness;
  float f = (pbrInfo.NdotH * roughnessSq - pbrInfo.NdotH) * pbrInfo.NdotH + 1.0;
  return roughnessSq / (M_PI * f * f);
}

void PBRInfo_setAmbientLight(inout PBRInfo pbrInfo) {
  pbrInfo.NdotL = 1.0;
  pbrInfo.NdotH = 0.0;
  pbrInfo.LdotH = 0.0;
  pbrInfo.VdotH = 1.0;
}

void PBRInfo_setDirectionalLight(inout PBRInfo pbrInfo, vec3 lightDirection) {
  vec3 n = pbrInfo.n;
  vec3 v = pbrInfo.v;
  vec3 l = normalize(lightDirection);             // Vector from surface point to light
  vec3 h = normalize(l+v);                        // Half vector between both l and v

  pbrInfo.NdotL = clamp(dot(n, l), 0.001, 1.0);
  pbrInfo.NdotH = clamp(dot(n, h), 0.0, 1.0);
  pbrInfo.LdotH = clamp(dot(l, h), 0.0, 1.0);
  pbrInfo.VdotH = clamp(dot(v, h), 0.0, 1.0);
}

void PBRInfo_setPointLight(inout PBRInfo pbrInfo, PointLight pointLight) {
  vec3 light_direction = normalize(pointLight.position - pbr_vPosition);
  PBRInfo_setDirectionalLight(pbrInfo, light_direction);
}

vec3 calculateFinalColor(PBRInfo pbrInfo, vec3 lightColor) {
  // Calculate the shading terms for the microfacet specular shading model
  vec3 F = specularReflection(pbrInfo);
  float G = geometricOcclusion(pbrInfo);
  float D = microfacetDistribution(pbrInfo);

  // Calculation of analytical lighting contribution
  vec3 diffuseContrib = (1.0 - F) * diffuse(pbrInfo);
  vec3 specContrib = F * G * D / (4.0 * pbrInfo.NdotL * pbrInfo.NdotV);
  // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)
  return pbrInfo.NdotL * lightColor * (diffuseContrib + specContrib);
}

vec4 pbr_filterColor(vec4 colorUnused)
{
  // The albedo may be defined from a base texture or a flat color
#ifdef HAS_BASECOLORMAP
  vec4 baseColor = SRGBtoLINEAR(texture(pbr_baseColorSampler, pbr_vUV)) * pbrMaterial.baseColorFactor;
#else
  vec4 baseColor = pbrMaterial.baseColorFactor;
#endif

#ifdef ALPHA_CUTOFF
  if (baseColor.a < pbrMaterial.alphaCutoff) {
    discard;
  }
#endif

  vec3 color = vec3(0, 0, 0);

  if(pbrMaterial.unlit){
    color.rgb = baseColor.rgb;
  }
  else{
    // Metallic and Roughness material properties are packed together
    // In glTF, these factors can be specified by fixed scalar values
    // or from a metallic-roughness map
    float perceptualRoughness = pbrMaterial.metallicRoughnessValues.y;
    float metallic = pbrMaterial.metallicRoughnessValues.x;
#ifdef HAS_METALROUGHNESSMAP
    // Roughness is stored in the 'g' channel, metallic is stored in the 'b' channel.
    // This layout intentionally reserves the 'r' channel for (optional) occlusion map data
    vec4 mrSample = texture(pbr_metallicRoughnessSampler, pbr_vUV);
    perceptualRoughness = mrSample.g * perceptualRoughness;
    metallic = mrSample.b * metallic;
#endif
    perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);
    metallic = clamp(metallic, 0.0, 1.0);
    // Roughness is authored as perceptual roughness; as is convention,
    // convert to material roughness by squaring the perceptual roughness [2].
    float alphaRoughness = perceptualRoughness * perceptualRoughness;

    vec3 f0 = vec3(0.04);
    vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);
    diffuseColor *= 1.0 - metallic;
    vec3 specularColor = mix(f0, baseColor.rgb, metallic);

    // Compute reflectance.
    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);

    // For typical incident reflectance range (between 4% to 100%) set the grazing
    // reflectance to 100% for typical fresnel effect.
    // For very low reflectance range on highly diffuse objects (below 4%),
    // incrementally reduce grazing reflecance to 0%.
    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);
    vec3 specularEnvironmentR0 = specularColor.rgb;
    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;

    vec3 n = getNormal();                          // normal at surface point
    vec3 v = normalize(pbrProjection.camera - pbr_vPosition);  // Vector from surface point to camera

    float NdotV = clamp(abs(dot(n, v)), 0.001, 1.0);
    vec3 reflection = -normalize(reflect(v, n));

    PBRInfo pbrInfo = PBRInfo(
      0.0, // NdotL
      NdotV,
      0.0, // NdotH
      0.0, // LdotH
      0.0, // VdotH
      perceptualRoughness,
      metallic,
      specularEnvironmentR0,
      specularEnvironmentR90,
      alphaRoughness,
      diffuseColor,
      specularColor,
      n,
      v
    );


#ifdef USE_LIGHTS
    // Apply ambient light
    PBRInfo_setAmbientLight(pbrInfo);
    color += calculateFinalColor(pbrInfo, lighting.ambientColor);

    // Apply directional light
    for(int i = 0; i < lighting.directionalLightCount; i++) {
      if (i < lighting.directionalLightCount) {
        PBRInfo_setDirectionalLight(pbrInfo, lighting_getDirectionalLight(i).direction);
        color += calculateFinalColor(pbrInfo, lighting_getDirectionalLight(i).color);
      }
    }

    // Apply point light
    for(int i = 0; i < lighting.pointLightCount; i++) {
      if (i < lighting.pointLightCount) {
        PBRInfo_setPointLight(pbrInfo, lighting_getPointLight(i));
        float attenuation = getPointLightAttenuation(lighting_getPointLight(i), distance(lighting_getPointLight(i).position, pbr_vPosition));
        color += calculateFinalColor(pbrInfo, lighting_getPointLight(i).color / attenuation);
      }
    }
#endif

    // Calculate lighting contribution from image based lighting source (IBL)
#ifdef USE_IBL
    if (pbrMaterial.IBLenabled) {
      color += getIBLContribution(pbrInfo, n, reflection);
    }
#endif

 // Apply optional PBR terms for additional (optional) shading
#ifdef HAS_OCCLUSIONMAP
    if (pbrMaterial.occlusionMapEnabled) {
      float ao = texture(pbr_occlusionSampler, pbr_vUV).r;
      color = mix(color, color * ao, pbrMaterial.occlusionStrength);
    }
#endif

#ifdef HAS_EMISSIVEMAP
    if (pbrMaterial.emissiveMapEnabled) {
      vec3 emissive = SRGBtoLINEAR(texture(pbr_emissiveSampler, pbr_vUV)).rgb * pbrMaterial.emissiveFactor;
      color += emissive;
    }
#endif

    // This section uses mix to override final color for reference app visualization
    // of various parameters in the lighting equation.
#ifdef PBR_DEBUG
    // TODO: Figure out how to debug multiple lights

    // color = mix(color, F, pbr_scaleFGDSpec.x);
    // color = mix(color, vec3(G), pbr_scaleFGDSpec.y);
    // color = mix(color, vec3(D), pbr_scaleFGDSpec.z);
    // color = mix(color, specContrib, pbr_scaleFGDSpec.w);

    // color = mix(color, diffuseContrib, pbr_scaleDiffBaseMR.x);
    color = mix(color, baseColor.rgb, pbrMaterial.scaleDiffBaseMR.y);
    color = mix(color, vec3(metallic), pbrMaterial.scaleDiffBaseMR.z);
    color = mix(color, vec3(perceptualRoughness), pbrMaterial.scaleDiffBaseMR.w);
#endif

  }

  return vec4(pow(color,vec3(1.0/2.2)), baseColor.a);
}
`
  );

  // ../../node_modules/@luma.gl/shadertools/dist/modules/lighting/pbr-material/pbr-material-wgsl.js
  var source = (
    /* wgsl */
    `struct PBRFragmentInputs {
  pbr_vPosition: vec3f,
  pbr_vUV: vec2f,
  pbr_vTBN: mat3f,
  pbr_vNormal: vec3f
};

var fragmentInputs: PBRFragmentInputs;

fn pbr_setPositionNormalTangentUV(position: vec4f, normal: vec4f, tangent: vec4f, uv: vec2f)
{
  var pos: vec4f = pbrProjection.modelMatrix * position;
  pbr_vPosition = vec3(pos.xyz) / pos.w;

#ifdef HAS_NORMALS
#ifdef HAS_TANGENTS
  let normalW: vec3f = normalize(vec3(pbrProjection.normalMatrix * vec4(normal.xyz, 0.0)));
  let tangentW: vec3f = normalize(vec3(pbrProjection.modelMatrix * vec4(tangent.xyz, 0.0)));
  let bitangentW: vec3f = cross(normalW, tangentW) * tangent.w;
  fragmentInputs,pbr_vTBN = mat3(tangentW, bitangentW, normalW);
#else // HAS_TANGENTS != 1
  fragmentInputs.pbr_vNormal = normalize(vec3(pbrProjection.modelMatrix * vec4(normal.xyz, 0.0)));
#endif
#endif

#ifdef HAS_UV
  pbr_vUV = uv;
#else
  pbr_vUV = vec2(0.,0.);
#endif
}

struct pbrMaterialUniforms {
  // Material is unlit
  unlit: uint32,

  // Base color map
  baseColorMapEnabled: uint32,
  baseColorFactor: vec4f,

  normalMapEnabled : uint32,
  normalScale: f32,  // #ifdef HAS_NORMALMAP

  emissiveMapEnabled: uint32,
  emissiveFactor: vec3f, // #ifdef HAS_EMISSIVEMAP

  metallicRoughnessValues: vec2f,
  metallicRoughnessMapEnabled: uint32,

  occlusionMapEnabled: i32,
  occlusionStrength: f32, // #ifdef HAS_OCCLUSIONMAP
  
  alphaCutoffEnabled: i32,
  alphaCutoff: f32, // #ifdef ALPHA_CUTOFF
  
  // IBL
  IBLenabled: i32,
  scaleIBLAmbient: vec2f, // #ifdef USE_IBL
  
  // debugging flags used for shader output of intermediate PBR variables
  // #ifdef PBR_DEBUG
  scaleDiffBaseMR: vec4f,
  scaleFGDSpec: vec4f
  // #endif
} 
  
@binding(2) @group(0) var<uniform> material : pbrMaterialUniforms;

// Samplers
#ifdef HAS_BASECOLORMAP
uniform sampler2D pbr_baseColorSampler;
#endif
#ifdef HAS_NORMALMAP
uniform sampler2D pbr_normalSampler;
#endif
#ifdef HAS_EMISSIVEMAP
uniform sampler2D pbr_emissiveSampler;
#endif
#ifdef HAS_METALROUGHNESSMAP
uniform sampler2D pbr_metallicRoughnessSampler;
#endif
#ifdef HAS_OCCLUSIONMAP
uniform sampler2D pbr_occlusionSampler;
#endif
#ifdef USE_IBL
uniform samplerCube pbr_diffuseEnvSampler;
uniform samplerCube pbr_specularEnvSampler;
uniform sampler2D pbr_brdfLUT;
#endif

// Encapsulate the various inputs used by the various functions in the shading equation
// We store values in this struct to simplify the integration of alternative implementations
// of the shading terms, outlined in the Readme.MD Appendix.
struct PBRInfo {
  NdotL: f32,                  // cos angle between normal and light direction
  NdotV: f32,                  // cos angle between normal and view direction
  NdotH: f32,                  // cos angle between normal and half vector
  LdotH: f32,                  // cos angle between light direction and half vector
  VdotH: f32,                  // cos angle between view direction and half vector
  perceptualRoughness: f32,    // roughness value, as authored by the model creator (input to shader)
  metalness: f32,              // metallic value at the surface
  reflectance0: vec3f,            // full reflectance color (normal incidence angle)
  reflectance90: vec3f,           // reflectance color at grazing angle
  alphaRoughness: f32,         // roughness mapped to a more linear change in the roughness (proposed by [2])
  diffuseColor: vec3f,            // color contribution from diffuse lighting
  specularColor: vec3f,           // color contribution from specular lighting
  n: vec3f,                       // normal at surface point
  v: vec3f,                       // vector from surface point to camera
};

const M_PI = 3.141592653589793;
const c_MinRoughness = 0.04;

fn SRGBtoLINEAR(srgbIn: vec4f ) -> vec4f
{
#ifdef MANUAL_SRGB
#ifdef SRGB_FAST_APPROXIMATION
  var linOut: vec3f = pow(srgbIn.xyz,vec3(2.2));
#else // SRGB_FAST_APPROXIMATION
  var bLess: vec3f = step(vec3(0.04045),srgbIn.xyz);
  var linOut: vec3f = mix( srgbIn.xyz/vec3(12.92), pow((srgbIn.xyz+vec3(0.055))/vec3(1.055),vec3(2.4)), bLess );
#endif //SRGB_FAST_APPROXIMATION
  return vec4f(linOut,srgbIn.w);;
#else //MANUAL_SRGB
  return srgbIn;
#endif //MANUAL_SRGB
}

// Find the normal for this fragment, pulling either from a predefined normal map
// or from the interpolated mesh normal and tangent attributes.
fn getNormal() -> vec3f
{
  // Retrieve the tangent space matrix
#ifndef HAS_TANGENTS
  var pos_dx: vec3f = dFdx(pbr_vPosition);
  var pos_dy: vec3f = dFdy(pbr_vPosition);
  var tex_dx: vec3f = dFdx(vec3(pbr_vUV, 0.0));
  var tex_dy: vec3f = dFdy(vec3(pbr_vUV, 0.0));
  var t: vec3f = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);

#ifdef HAS_NORMALS
  var ng: vec3f = normalize(pbr_vNormal);
#else
  var ng: vec3f = cross(pos_dx, pos_dy);
#endif

  t = normalize(t - ng * dot(ng, t));
  var b: vec3f = normalize(cross(ng, t));
  var tbn: mat3f = mat3f(t, b, ng);
#else // HAS_TANGENTS
  var tbn: mat3f = pbr_vTBN;
#endif

#ifdef HAS_NORMALMAP
  vec3 n = texture(pbr_normalSampler, pbr_vUV).rgb;
  n = normalize(tbn * ((2.0 * n - 1.0) * vec3(pbrMaterial.normalScale, pbrMaterial.normalScale, 1.0)));
#else
  // The tbn matrix is linearly interpolated, so we need to re-normalize
  vec3 n = normalize(tbn[2].xyz);
#endif

  return n;
}

// Calculation of the lighting contribution from an optional Image Based Light source.
// Precomputed Environment Maps are required uniform inputs and are computed as outlined in [1].
// See our README.md on Environment Maps [3] for additional discussion.
#ifdef USE_IBL
fn getIBLContribution(PBRInfo pbrInfo, vec3 n, vec3 reflection) -> vec3f
{
  float mipCount = 9.0; // resolution of 512x512
  float lod = (pbrInfo.perceptualRoughness * mipCount);
  // retrieve a scale and bias to F0. See [1], Figure 3
  vec3 brdf = SRGBtoLINEAR(texture(pbr_brdfLUT,
    vec2(pbrInfo.NdotV, 1.0 - pbrInfo.perceptualRoughness))).rgb;
  vec3 diffuseLight = SRGBtoLINEAR(texture(pbr_diffuseEnvSampler, n)).rgb;

#ifdef USE_TEX_LOD
  vec3 specularLight = SRGBtoLINEAR(texture(pbr_specularEnvSampler, reflection, lod)).rgb;
#else
  vec3 specularLight = SRGBtoLINEAR(texture(pbr_specularEnvSampler, reflection)).rgb;
#endif

  vec3 diffuse = diffuseLight * pbrInfo.diffuseColor;
  vec3 specular = specularLight * (pbrInfo.specularColor * brdf.x + brdf.y);

  // For presentation, this allows us to disable IBL terms
  diffuse *= pbrMaterial.scaleIBLAmbient.x;
  specular *= pbrMaterial.scaleIBLAmbient.y;

  return diffuse + specular;
}
#endif

// Basic Lambertian diffuse
// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog
// See also [1], Equation 1
fn diffuse(pbrInfo: PBRInfo) -> vec3<f32> {
  return pbrInfo.diffuseColor / PI;
}

// The following equation models the Fresnel reflectance term of the spec equation (aka F())
// Implementation of fresnel from [4], Equation 15
fn specularReflection(pbrInfo: PBRInfo) -> vec3<f32> {
  return pbrInfo.reflectance0 +
    (pbrInfo.reflectance90 - pbrInfo.reflectance0) *
    pow(clamp(1.0 - pbrInfo.VdotH, 0.0, 1.0), 5.0);
}

// This calculates the specular geometric attenuation (aka G()),
// where rougher material will reflect less light back to the viewer.
// This implementation is based on [1] Equation 4, and we adopt their modifications to
// alphaRoughness as input as originally proposed in [2].
fn geometricOcclusion(pbrInfo: PBRInfo) -> f32 {
  let NdotL: f32 = pbrInfo.NdotL;
  let NdotV: f32 = pbrInfo.NdotV;
  let r: f32 = pbrInfo.alphaRoughness;

  let attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));
  let attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));
  return attenuationL * attenuationV;
}

// The following equation(s) model the distribution of microfacet normals across
// the area being drawn (aka D())
// Implementation from "Average Irregularity Representation of a Roughened Surface
// for Ray Reflection" by T. S. Trowbridge, and K. P. Reitz
// Follows the distribution function recommended in the SIGGRAPH 2013 course notes
// from EPIC Games [1], Equation 3.
fn microfacetDistribution(pbrInfo: PBRInfo) -> f32 {
  let roughnessSq = pbrInfo.alphaRoughness * pbrInfo.alphaRoughness;
  let f = (pbrInfo.NdotH * roughnessSq - pbrInfo.NdotH) * pbrInfo.NdotH + 1.0;
  return roughnessSq / (PI * f * f);
}

fn PBRInfo_setAmbientLight(pbrInfo: ptr<function, PBRInfo>) {
  (*pbrInfo).NdotL = 1.0;
  (*pbrInfo).NdotH = 0.0;
  (*pbrInfo).LdotH = 0.0;
  (*pbrInfo).VdotH = 1.0;
}

fn PBRInfo_setDirectionalLight(pbrInfo: ptr<function, PBRInfo>, lightDirection: vec3<f32>) {
  let n = (*pbrInfo).n;
  let v = (*pbrInfo).v;
  let l = normalize(lightDirection);             // Vector from surface point to light
  let h = normalize(l + v);                      // Half vector between both l and v

  (*pbrInfo).NdotL = clamp(dot(n, l), 0.001, 1.0);
  (*pbrInfo).NdotH = clamp(dot(n, h), 0.0, 1.0);
  (*pbrInfo).LdotH = clamp(dot(l, h), 0.0, 1.0);
  (*pbrInfo).VdotH = clamp(dot(v, h), 0.0, 1.0);
}

fn PBRInfo_setPointLight(pbrInfo: ptr<function, PBRInfo>, pointLight: PointLight) {
  let light_direction = normalize(pointLight.position - pbr_vPosition);
  PBRInfo_setDirectionalLight(pbrInfo, light_direction);
}

fn calculateFinalColor(pbrInfo: PBRInfo, lightColor: vec3<f32>) -> vec3<f32> {
  // Calculate the shading terms for the microfacet specular shading model
  let F = specularReflection(pbrInfo);
  let G = geometricOcclusion(pbrInfo);
  let D = microfacetDistribution(pbrInfo);

  // Calculation of analytical lighting contribution
  let diffuseContrib = (1.0 - F) * diffuse(pbrInfo);
  let specContrib = F * G * D / (4.0 * pbrInfo.NdotL * pbrInfo.NdotV);
  // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)
  return pbrInfo.NdotL * lightColor * (diffuseContrib + specContrib);
}

fn pbr_filterColor(colorUnused: vec4<f32>) -> vec4<f32> {
  // The albedo may be defined from a base texture or a flat color
  var baseColor: vec4<f32>;
  #ifdef HAS_BASECOLORMAP
  baseColor = SRGBtoLINEAR(textureSample(pbr_baseColorSampler, pbr_baseColorSampler, pbr_vUV)) * pbrMaterial.baseColorFactor;
  #else
  baseColor = pbrMaterial.baseColorFactor;
  #endif

  #ifdef ALPHA_CUTOFF
  if (baseColor.a < pbrMaterial.alphaCutoff) {
    discard;
  }
  #endif

  var color = vec3<f32>(0.0, 0.0, 0.0);

  if (pbrMaterial.unlit) {
    color = baseColor.rgb;
  } else {
    // Metallic and Roughness material properties are packed together
    // In glTF, these factors can be specified by fixed scalar values
    // or from a metallic-roughness map
    var perceptualRoughness = pbrMaterial.metallicRoughnessValues.y;
    var metallic = pbrMaterial.metallicRoughnessValues.x;
    #ifdef HAS_METALROUGHNESSMAP
    // Roughness is stored in the 'g' channel, metallic is stored in the 'b' channel.
    // This layout intentionally reserves the 'r' channel for (optional) occlusion map data
    let mrSample = textureSample(pbr_metallicRoughnessSampler, pbr_metallicRoughnessSampler, pbr_vUV);
    perceptualRoughness = mrSample.g * perceptualRoughness;
    metallic = mrSample.b * metallic;
    #endif
    perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);
    metallic = clamp(metallic, 0.0, 1.0);
    // Roughness is authored as perceptual roughness; as is convention,
    // convert to material roughness by squaring the perceptual roughness [2].
    let alphaRoughness = perceptualRoughness * perceptualRoughness;

    let f0 = vec3<f32>(0.04);
    var diffuseColor = baseColor.rgb * (vec3<f32>(1.0) - f0);
    diffuseColor *= 1.0 - metallic;
    let specularColor = mix(f0, baseColor.rgb, metallic);

    // Compute reflectance.
    let reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);

    // For typical incident reflectance range (between 4% to 100%) set the grazing
    // reflectance to 100% for typical fresnel effect.
    // For very low reflectance range on highly diffuse objects (below 4%),
    // incrementally reduce grazing reflectance to 0%.
    let reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);
    let specularEnvironmentR0 = specularColor;
    let specularEnvironmentR90 = vec3<f32>(1.0, 1.0, 1.0) * reflectance90;

    let n = getNormal();                          // normal at surface point
    let v = normalize(pbrProjection.camera - pbr_vPosition);  // Vector from surface point to camera

    let NdotV = clamp(abs(dot(n, v)), 0.001, 1.0);
    let reflection = -normalize(reflect(v, n));

    var pbrInfo = PBRInfo(
      0.0, // NdotL
      NdotV,
      0.0, // NdotH
      0.0, // LdotH
      0.0, // VdotH
      perceptualRoughness,
      metallic,
      specularEnvironmentR0,
      specularEnvironmentR90,
      alphaRoughness,
      diffuseColor,
      specularColor,
      n,
      v
    );

    #ifdef USE_LIGHTS
    // Apply ambient light
    PBRInfo_setAmbientLight(&pbrInfo);
    color += calculateFinalColor(pbrInfo, lighting.ambientColor);

    // Apply directional light
    for (var i = 0; i < lighting.directionalLightCount; i++) {
      if (i < lighting.directionalLightCount) {
        PBRInfo_setDirectionalLight(&pbrInfo, lighting_getDirectionalLight(i).direction);
        color += calculateFinalColor(pbrInfo, lighting_getDirectionalLight(i).color);
      }
    }

    // Apply point light
    for (var i = 0; i < lighting.pointLightCount; i++) {
      if (i < lighting.pointLightCount) {
        PBRInfo_setPointLight(&pbrInfo, lighting_getPointLight(i));
        let attenuation = getPointLightAttenuation(lighting_getPointLight(i), distance(lighting_getPointLight(i).position, pbr_vPosition));
        color += calculateFinalColor(pbrInfo, lighting_getPointLight(i).color / attenuation);
      }
    }
    #endif

    // Calculate lighting contribution from image based lighting source (IBL)
    #ifdef USE_IBL
    if (pbrMaterial.IBLenabled) {
      color += getIBLContribution(pbrInfo, n, reflection);
    }
    #endif

    // Apply optional PBR terms for additional (optional) shading
    #ifdef HAS_OCCLUSIONMAP
    if (pbrMaterial.occlusionMapEnabled) {
      let ao = textureSample(pbr_occlusionSampler, pbr_occlusionSampler, pbr_vUV).r;
      color = mix(color, color * ao, pbrMaterial.occlusionStrength);
    }
    #endif

    #ifdef HAS_EMISSIVEMAP
    if (pbrMaterial.emissiveMapEnabled) {
      let emissive = SRGBtoLINEAR(textureSample(pbr_emissiveSampler, pbr_emissiveSampler, pbr_vUV)).rgb * pbrMaterial.emissiveFactor;
      color += emissive;
    }
    #endif

    // This section uses mix to override final color for reference app visualization
    // of various parameters in the lighting equation.
    #ifdef PBR_DEBUG
    // TODO: Figure out how to debug multiple lights

    // color = mix(color, F, pbr_scaleFGDSpec.x);
    // color = mix(color, vec3(G), pbr_scaleFGDSpec.y);
    // color = mix(color, vec3(D), pbr_scaleFGDSpec.z);
    // color = mix(color, specContrib, pbr_scaleFGDSpec.w);

    // color = mix(color, diffuseContrib, pbr_scaleDiffBaseMR.x);
    color = mix(color, baseColor.rgb, pbrMaterial.scaleDiffBaseMR.y);
    color = mix(color, vec3<f32>(metallic), pbrMaterial.scaleDiffBaseMR.z);
    color = mix(color, vec3<f32>(perceptualRoughness), pbrMaterial.scaleDiffBaseMR.w);
    #endif
  }

  return vec4<f32>(pow(color, vec3<f32>(1.0 / 2.2)), baseColor.a);
}
`
  );

  // ../../node_modules/@luma.gl/shadertools/dist/modules/lighting/pbr-material/pbr-projection.js
  var uniformBlock = (
    /* glsl */
    `uniform pbrProjectionUniforms {
  mat4 modelViewProjectionMatrix;
  mat4 modelMatrix;
  mat4 normalMatrix;
  vec3 camera;
} pbrProjection;
`
  );
  var pbrProjection = {
    name: "pbrProjection",
    vs: uniformBlock,
    fs: uniformBlock,
    // TODO why is this needed?
    getUniforms: (props) => props,
    uniformTypes: {
      modelViewProjectionMatrix: "mat4x4<f32>",
      modelMatrix: "mat4x4<f32>",
      normalMatrix: "mat4x4<f32>",
      camera: "vec3<i32>"
    }
  };

  // ../../node_modules/@luma.gl/shadertools/dist/modules/lighting/pbr-material/pbr-material.js
  var pbrMaterial = {
    props: {},
    uniforms: {},
    name: "pbrMaterial",
    dependencies: [lighting, pbrProjection],
    source,
    vs: vs2,
    fs: fs2,
    defines: {
      LIGHTING_FRAGMENT: true,
      HAS_NORMALMAP: false,
      HAS_EMISSIVEMAP: false,
      HAS_OCCLUSIONMAP: false,
      HAS_BASECOLORMAP: false,
      HAS_METALROUGHNESSMAP: false,
      ALPHA_CUTOFF: false,
      USE_IBL: false,
      PBR_DEBUG: false
    },
    getUniforms: (props) => props,
    uniformTypes: {
      // Material is unlit
      unlit: "i32",
      // Base color map
      baseColorMapEnabled: "i32",
      baseColorFactor: "vec4<f32>",
      normalMapEnabled: "i32",
      normalScale: "f32",
      // #ifdef HAS_NORMALMAP
      emissiveMapEnabled: "i32",
      emissiveFactor: "vec3<f32>",
      // #ifdef HAS_EMISSIVEMAP
      metallicRoughnessValues: "vec2<f32>",
      metallicRoughnessMapEnabled: "i32",
      occlusionMapEnabled: "i32",
      occlusionStrength: "f32",
      // #ifdef HAS_OCCLUSIONMAP
      alphaCutoffEnabled: "i32",
      alphaCutoff: "f32",
      // #ifdef ALPHA_CUTOFF
      // IBL
      IBLenabled: "i32",
      scaleIBLAmbient: "vec2<f32>",
      // #ifdef USE_IBL
      // debugging flags used for shader output of intermediate PBR variables
      // #ifdef PBR_DEBUG
      scaleDiffBaseMR: "vec4<f32>",
      scaleFGDSpec: "vec4<f32>"
    }
  };

  // ../core/src/shaderlib/misc/layer-uniforms.ts
  var uniformBlock2 = `uniform layerUniforms {
  uniform float opacity;
} layer;
`;
  var layerUniforms = {
    name: "layer",
    vs: uniformBlock2,
    fs: uniformBlock2,
    getUniforms: (props) => {
      return {
        // apply gamma to opacity to make it visually "linear"
        // TODO - v10: use raw opacity?
        opacity: Math.pow(props.opacity, 1 / 2.2)
      };
    },
    uniformTypes: {
      opacity: "f32"
    }
  };

  // ../core/src/shaderlib/color/color.ts
  var colorWGSL = (
    /* WGSL */
    `

struct ColorUniforms {
  opacity: f32,
};

var<private> color: ColorUniforms = ColorUniforms(1.0);
// TODO (kaapp) avoiding binding index collisions to handle layer opacity 
// requires some thought.
// @group(0) @binding(0) var<uniform> color: ColorUniforms;

@must_use
fn deckgl_premultiplied_alpha(fragColor: vec4<f32>) -> vec4<f32> {
    return vec4(fragColor.rgb * fragColor.a, fragColor.a); 
};
`
  );
  var color_default = {
    name: "color",
    dependencies: [],
    source: colorWGSL,
    getUniforms: (_props) => {
      return {};
    },
    uniformTypes: {
      opacity: "f32"
    }
    // @ts-ignore TODO v9.1
  };

  // ../core/src/shaderlib/misc/geometry.ts
  var source2 = (
    /* wgsl */
    `const SMOOTH_EDGE_RADIUS: f32 = 0.5;

struct VertexGeometry {
  position: vec4<f32>,
  worldPosition: vec3<f32>,
  worldPositionAlt: vec3<f32>,
  normal: vec3<f32>,
  uv: vec2<f32>,
  pickingColor: vec3<f32>,
};

var<private> geometry_: VertexGeometry = VertexGeometry(
  vec4<f32>(0.0, 0.0, 1.0, 0.0),
  vec3<f32>(0.0, 0.0, 0.0),
  vec3<f32>(0.0, 0.0, 0.0),
  vec3<f32>(0.0, 0.0, 0.0),
  vec2<f32>(0.0, 0.0),
  vec3<f32>(0.0, 0.0, 0.0)
);

struct FragmentGeometry {
  uv: vec2<f32>,
};

var<private> fragmentGeometry: FragmentGeometry;

fn smoothedge(edge: f32, x: f32) -> f32 {
  return smoothstep(edge - SMOOTH_EDGE_RADIUS, edge + SMOOTH_EDGE_RADIUS, x);
}
`
  );
  var defines = "#define SMOOTH_EDGE_RADIUS 0.5";
  var vs3 = (
    /* glsl */
    `${defines}

struct VertexGeometry {
  vec4 position;
  vec3 worldPosition;
  vec3 worldPositionAlt;
  vec3 normal;
  vec2 uv;
  vec3 pickingColor;
} geometry = VertexGeometry(
  vec4(0.0, 0.0, 1.0, 0.0),
  vec3(0.0),
  vec3(0.0),
  vec3(0.0),
  vec2(0.0),
  vec3(0.0)
);
`
  );
  var fs3 = (
    /* glsl */
    `${defines}

struct FragmentGeometry {
  vec2 uv;
} geometry;

float smoothedge(float edge, float x) {
  return smoothstep(edge - SMOOTH_EDGE_RADIUS, edge + SMOOTH_EDGE_RADIUS, x);
}
`
  );
  var geometry_default = {
    name: "geometry",
    source: source2,
    vs: vs3,
    fs: fs3
  };

  // ../../node_modules/mjolnir.js/dist/hammerjs/input/input-consts.js
  var COMPUTE_INTERVAL = 25;
  var InputEvent;
  (function(InputEvent2) {
    InputEvent2[InputEvent2["Start"] = 1] = "Start";
    InputEvent2[InputEvent2["Move"] = 2] = "Move";
    InputEvent2[InputEvent2["End"] = 4] = "End";
    InputEvent2[InputEvent2["Cancel"] = 8] = "Cancel";
  })(InputEvent || (InputEvent = {}));
  var InputDirection;
  (function(InputDirection2) {
    InputDirection2[InputDirection2["None"] = 0] = "None";
    InputDirection2[InputDirection2["Left"] = 1] = "Left";
    InputDirection2[InputDirection2["Right"] = 2] = "Right";
    InputDirection2[InputDirection2["Up"] = 4] = "Up";
    InputDirection2[InputDirection2["Down"] = 8] = "Down";
    InputDirection2[InputDirection2["Horizontal"] = 3] = "Horizontal";
    InputDirection2[InputDirection2["Vertical"] = 12] = "Vertical";
    InputDirection2[InputDirection2["All"] = 15] = "All";
  })(InputDirection || (InputDirection = {}));

  // ../../node_modules/mjolnir.js/dist/hammerjs/recognizer/recognizer-state.js
  var RecognizerState;
  (function(RecognizerState2) {
    RecognizerState2[RecognizerState2["Possible"] = 1] = "Possible";
    RecognizerState2[RecognizerState2["Began"] = 2] = "Began";
    RecognizerState2[RecognizerState2["Changed"] = 4] = "Changed";
    RecognizerState2[RecognizerState2["Ended"] = 8] = "Ended";
    RecognizerState2[RecognizerState2["Recognized"] = 8] = "Recognized";
    RecognizerState2[RecognizerState2["Cancelled"] = 16] = "Cancelled";
    RecognizerState2[RecognizerState2["Failed"] = 32] = "Failed";
  })(RecognizerState || (RecognizerState = {}));

  // ../../node_modules/mjolnir.js/dist/hammerjs/touchaction/touchaction-Consts.js
  var TOUCH_ACTION_COMPUTE = "compute";
  var TOUCH_ACTION_AUTO = "auto";
  var TOUCH_ACTION_MANIPULATION = "manipulation";
  var TOUCH_ACTION_NONE = "none";
  var TOUCH_ACTION_PAN_X = "pan-x";
  var TOUCH_ACTION_PAN_Y = "pan-y";

  // ../../node_modules/mjolnir.js/dist/hammerjs/touchaction/clean-touch-actions.js
  function cleanTouchActions(actions) {
    if (actions.includes(TOUCH_ACTION_NONE)) {
      return TOUCH_ACTION_NONE;
    }
    const hasPanX = actions.includes(TOUCH_ACTION_PAN_X);
    const hasPanY = actions.includes(TOUCH_ACTION_PAN_Y);
    if (hasPanX && hasPanY) {
      return TOUCH_ACTION_NONE;
    }
    if (hasPanX || hasPanY) {
      return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
    }
    if (actions.includes(TOUCH_ACTION_MANIPULATION)) {
      return TOUCH_ACTION_MANIPULATION;
    }
    return TOUCH_ACTION_AUTO;
  }

  // ../../node_modules/mjolnir.js/dist/hammerjs/touchaction/touchaction.js
  var TouchAction = class {
    constructor(manager, value) {
      this.actions = "";
      this.manager = manager;
      this.set(value);
    }
    /**
     * set the touchAction value on the element or enable the polyfill
     */
    set(value) {
      if (value === TOUCH_ACTION_COMPUTE) {
        value = this.compute();
      }
      if (this.manager.element) {
        this.manager.element.style.touchAction = value;
        this.actions = value;
      }
    }
    /**
     * just re-set the touchAction value
     */
    update() {
      this.set(this.manager.options.touchAction);
    }
    /**
     * compute the value for the touchAction property based on the recognizer's settings
     */
    compute() {
      let actions = [];
      for (const recognizer of this.manager.recognizers) {
        if (recognizer.options.enable) {
          actions = actions.concat(recognizer.getTouchAction());
        }
      }
      return cleanTouchActions(actions.join(" "));
    }
  };

  // ../../node_modules/mjolnir.js/dist/hammerjs/utils/split-str.js
  function splitStr(str8) {
    return str8.trim().split(/\s+/g);
  }

  // ../../node_modules/mjolnir.js/dist/hammerjs/utils/event-listeners.js
  function addEventListeners(target2, types, handler) {
    if (!target2) {
      return;
    }
    for (const type of splitStr(types)) {
      target2.addEventListener(type, handler, false);
    }
  }
  function removeEventListeners(target2, types, handler) {
    if (!target2) {
      return;
    }
    for (const type of splitStr(types)) {
      target2.removeEventListener(type, handler, false);
    }
  }

  // ../../node_modules/mjolnir.js/dist/hammerjs/utils/get-window-for-element.js
  function getWindowForElement(element) {
    const doc = element.ownerDocument || element;
    return doc.defaultView;
  }

  // ../../node_modules/mjolnir.js/dist/hammerjs/utils/has-parent.js
  function hasParent(node, parent) {
    let ancestor = node;
    while (ancestor) {
      if (ancestor === parent) {
        return true;
      }
      ancestor = ancestor.parentNode;
    }
    return false;
  }

  // ../../node_modules/mjolnir.js/dist/hammerjs/input/get-center.js
  function getCenter(pointers) {
    const pointersLength = pointers.length;
    if (pointersLength === 1) {
      return {
        x: Math.round(pointers[0].clientX),
        y: Math.round(pointers[0].clientY)
      };
    }
    let x4 = 0;
    let y5 = 0;
    let i7 = 0;
    while (i7 < pointersLength) {
      x4 += pointers[i7].clientX;
      y5 += pointers[i7].clientY;
      i7++;
    }
    return {
      x: Math.round(x4 / pointersLength),
      y: Math.round(y5 / pointersLength)
    };
  }

  // ../../node_modules/mjolnir.js/dist/hammerjs/input/simple-clone-input-data.js
  function simpleCloneInputData(input) {
    const pointers = [];
    let i7 = 0;
    while (i7 < input.pointers.length) {
      pointers[i7] = {
        clientX: Math.round(input.pointers[i7].clientX),
        clientY: Math.round(input.pointers[i7].clientY)
      };
      i7++;
    }
    return {
      timeStamp: Date.now(),
      pointers,
      center: getCenter(pointers),
      deltaX: input.deltaX,
      deltaY: input.deltaY
    };
  }

  // ../../node_modules/mjolnir.js/dist/hammerjs/input/get-distance.js
  function getPointDistance(p1, p22) {
    const x4 = p22.x - p1.x;
    const y5 = p22.y - p1.y;
    return Math.sqrt(x4 * x4 + y5 * y5);
  }
  function getEventDistance(p1, p22) {
    const x4 = p22.clientX - p1.clientX;
    const y5 = p22.clientY - p1.clientY;
    return Math.sqrt(x4 * x4 + y5 * y5);
  }

  // ../../node_modules/mjolnir.js/dist/hammerjs/input/get-angle.js
  function getPointAngle(p1, p22) {
    const x4 = p22.x - p1.x;
    const y5 = p22.y - p1.y;
    return Math.atan2(y5, x4) * 180 / Math.PI;
  }
  function getEventAngle(p1, p22) {
    const x4 = p22.clientX - p1.clientX;
    const y5 = p22.clientY - p1.clientY;
    return Math.atan2(y5, x4) * 180 / Math.PI;
  }

  // ../../node_modules/mjolnir.js/dist/hammerjs/input/get-direction.js
  function getDirection(dx, dy) {
    if (dx === dy) {
      return InputDirection.None;
    }
    if (Math.abs(dx) >= Math.abs(dy)) {
      return dx < 0 ? InputDirection.Left : InputDirection.Right;
    }
    return dy < 0 ? InputDirection.Up : InputDirection.Down;
  }

  // ../../node_modules/mjolnir.js/dist/hammerjs/input/get-delta-xy.js
  function computeDeltaXY(session, input) {
    const center2 = input.center;
    let offset = session.offsetDelta;
    let prevDelta = session.prevDelta;
    const prevInput = session.prevInput;
    if (input.eventType === InputEvent.Start || prevInput?.eventType === InputEvent.End) {
      prevDelta = session.prevDelta = {
        x: prevInput?.deltaX || 0,
        y: prevInput?.deltaY || 0
      };
      offset = session.offsetDelta = {
        x: center2.x,
        y: center2.y
      };
    }
    return {
      deltaX: prevDelta.x + (center2.x - offset.x),
      deltaY: prevDelta.y + (center2.y - offset.y)
    };
  }

  // ../../node_modules/mjolnir.js/dist/hammerjs/input/get-velocity.js
  function getVelocity(deltaTime, x4, y5) {
    return {
      x: x4 / deltaTime || 0,
      y: y5 / deltaTime || 0
    };
  }

  // ../../node_modules/mjolnir.js/dist/hammerjs/input/get-scale.js
  function getScale(start, end) {
    return getEventDistance(end[0], end[1]) / getEventDistance(start[0], start[1]);
  }

  // ../../node_modules/mjolnir.js/dist/hammerjs/input/get-rotation.js
  function getRotation2(start, end) {
    return getEventAngle(end[1], end[0]) - getEventAngle(start[1], start[0]);
  }

  // ../../node_modules/mjolnir.js/dist/hammerjs/input/compute-interval-input-data.js
  function computeIntervalInputData(session, input) {
    const last = session.lastInterval || input;
    const deltaTime = input.timeStamp - last.timeStamp;
    let velocity;
    let velocityX;
    let velocityY;
    let direction;
    if (input.eventType !== InputEvent.Cancel && (deltaTime > COMPUTE_INTERVAL || last.velocity === void 0)) {
      const deltaX = input.deltaX - last.deltaX;
      const deltaY = input.deltaY - last.deltaY;
      const v5 = getVelocity(deltaTime, deltaX, deltaY);
      velocityX = v5.x;
      velocityY = v5.y;
      velocity = Math.abs(v5.x) > Math.abs(v5.y) ? v5.x : v5.y;
      direction = getDirection(deltaX, deltaY);
      session.lastInterval = input;
    } else {
      velocity = last.velocity;
      velocityX = last.velocityX;
      velocityY = last.velocityY;
      direction = last.direction;
    }
    input.velocity = velocity;
    input.velocityX = velocityX;
    input.velocityY = velocityY;
    input.direction = direction;
  }

  // ../../node_modules/mjolnir.js/dist/hammerjs/input/compute-input-data.js
  function computeInputData(manager, input) {
    const { session } = manager;
    const { pointers } = input;
    const { length: pointersLength } = pointers;
    if (!session.firstInput) {
      session.firstInput = simpleCloneInputData(input);
    }
    if (pointersLength > 1 && !session.firstMultiple) {
      session.firstMultiple = simpleCloneInputData(input);
    } else if (pointersLength === 1) {
      session.firstMultiple = false;
    }
    const { firstInput, firstMultiple } = session;
    const offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
    const center2 = input.center = getCenter(pointers);
    input.timeStamp = Date.now();
    input.deltaTime = input.timeStamp - firstInput.timeStamp;
    input.angle = getPointAngle(offsetCenter, center2);
    input.distance = getPointDistance(offsetCenter, center2);
    const { deltaX, deltaY } = computeDeltaXY(session, input);
    input.deltaX = deltaX;
    input.deltaY = deltaY;
    input.offsetDirection = getDirection(input.deltaX, input.deltaY);
    const overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
    input.overallVelocityX = overallVelocity.x;
    input.overallVelocityY = overallVelocity.y;
    input.overallVelocity = Math.abs(overallVelocity.x) > Math.abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
    input.rotation = firstMultiple ? getRotation2(firstMultiple.pointers, pointers) : 0;
    input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
    let target2 = manager.element;
    if (hasParent(input.srcEvent.target, target2)) {
      target2 = input.srcEvent.target;
    }
    input.target = target2;
    computeIntervalInputData(session, input);
    return input;
  }

  // ../../node_modules/mjolnir.js/dist/hammerjs/input/input-handler.js
  function inputHandler(manager, eventType, input) {
    const pointersLen = input.pointers.length;
    const changedPointersLen = input.changedPointers.length;
    const isFirst = eventType & InputEvent.Start && pointersLen - changedPointersLen === 0;
    const isFinal = eventType & (InputEvent.End | InputEvent.Cancel) && pointersLen - changedPointersLen === 0;
    input.isFirst = Boolean(isFirst);
    input.isFinal = Boolean(isFinal);
    if (isFirst) {
      manager.session = {};
    }
    input.eventType = eventType;
    const processedInput = computeInputData(manager, input);
    manager.emit("hammer.input", processedInput);
    manager.recognize(processedInput);
    manager.session.prevInput = processedInput;
  }

  // ../../node_modules/mjolnir.js/dist/hammerjs/input/input.js
  var Input = class {
    constructor(manager) {
      this.evEl = "";
      this.evWin = "";
      this.evTarget = "";
      this.domHandler = (ev) => {
        if (this.manager.options.enable) {
          this.handler(ev);
        }
      };
      this.manager = manager;
      this.element = manager.element;
      this.target = manager.options.inputTarget || manager.element;
    }
    callback(eventType, input) {
      inputHandler(this.manager, eventType, input);
    }
    // eslint-disable @typescript-eslint/unbound-method
    /**
     * bind the events
     */
    init() {
      addEventListeners(this.element, this.evEl, this.domHandler);
      addEventListeners(this.target, this.evTarget, this.domHandler);
      addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    }
    /**
     * unbind the events
     */
    destroy() {
      removeEventListeners(this.element, this.evEl, this.domHandler);
      removeEventListeners(this.target, this.evTarget, this.domHandler);
      removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    }
  };

  // ../../node_modules/mjolnir.js/dist/hammerjs/inputs/pointerevent.js
  var POINTER_INPUT_MAP = {
    pointerdown: InputEvent.Start,
    pointermove: InputEvent.Move,
    pointerup: InputEvent.End,
    pointercancel: InputEvent.Cancel,
    pointerout: InputEvent.Cancel
  };
  var POINTER_ELEMENT_EVENTS = "pointerdown";
  var POINTER_WINDOW_EVENTS = "pointermove pointerup pointercancel";
  var PointerEventInput = class extends Input {
    constructor(manager) {
      super(manager);
      this.evEl = POINTER_ELEMENT_EVENTS;
      this.evWin = POINTER_WINDOW_EVENTS;
      this.store = this.manager.session.pointerEvents = [];
      this.init();
    }
    /**
     * handle mouse events
     */
    handler(ev) {
      const { store } = this;
      let removePointer = false;
      const eventType = POINTER_INPUT_MAP[ev.type];
      const pointerType = ev.pointerType;
      const isTouch = pointerType === "touch";
      let storeIndex = store.findIndex((e6) => e6.pointerId === ev.pointerId);
      if (eventType & InputEvent.Start && (ev.buttons || isTouch)) {
        if (storeIndex < 0) {
          store.push(ev);
          storeIndex = store.length - 1;
        }
      } else if (eventType & (InputEvent.End | InputEvent.Cancel)) {
        removePointer = true;
      }
      if (storeIndex < 0) {
        return;
      }
      store[storeIndex] = ev;
      this.callback(eventType, {
        pointers: store,
        changedPointers: [ev],
        eventType,
        pointerType,
        srcEvent: ev
      });
      if (removePointer) {
        store.splice(storeIndex, 1);
      }
    }
  };

  // ../../node_modules/mjolnir.js/dist/hammerjs/utils/prefixed.js
  var VENDOR_PREFIXES = ["", "webkit", "Moz", "MS", "ms", "o"];
  function prefixed(obj, property) {
    const camelProp = property[0].toUpperCase() + property.slice(1);
    for (const prefix of VENDOR_PREFIXES) {
      const prop = prefix ? prefix + camelProp : property;
      if (prop in obj) {
        return prop;
      }
    }
    return void 0;
  }

  // ../../node_modules/mjolnir.js/dist/hammerjs/manager.js
  var STOP = 1;
  var FORCED_STOP = 2;
  var defaultOptions = {
    touchAction: "compute",
    enable: true,
    inputTarget: null,
    cssProps: {
      /**
       * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
       */
      userSelect: "none",
      /**
       * (Webkit) Disable default dragging behavior
       */
      // @ts-ignore
      userDrag: "none",
      /**
       * (iOS only) Disables the default callout shown when you touch and hold a touch target.
       * When you touch and hold a touch target such as a link, Safari displays
       * a callout containing information about the link. This property allows you to disable that callout.
       */
      // @ts-ignore
      touchCallout: "none",
      /**
       * (iOS only) Sets the color of the highlight that appears over a link while it's being tapped.
       */
      // @ts-ignore
      tapHighlightColor: "rgba(0,0,0,0)"
    }
  };
  var Manager = class {
    constructor(element, options) {
      this.options = {
        ...defaultOptions,
        ...options,
        cssProps: { ...defaultOptions.cssProps, ...options.cssProps },
        inputTarget: options.inputTarget || element
      };
      this.handlers = {};
      this.session = {};
      this.recognizers = [];
      this.oldCssProps = {};
      this.element = element;
      this.input = new PointerEventInput(this);
      this.touchAction = new TouchAction(this, this.options.touchAction);
      this.toggleCssProps(true);
    }
    /**
     * set options
     */
    set(options) {
      Object.assign(this.options, options);
      if (options.touchAction) {
        this.touchAction.update();
      }
      if (options.inputTarget) {
        this.input.destroy();
        this.input.target = options.inputTarget;
        this.input.init();
      }
      return this;
    }
    /**
     * stop recognizing for this session.
     * This session will be discarded, when a new [input]start event is fired.
     * When forced, the recognizer cycle is stopped immediately.
     */
    stop(force) {
      this.session.stopped = force ? FORCED_STOP : STOP;
    }
    /**
     * run the recognizers!
     * called by the inputHandler function on every movement of the pointers (touches)
     * it walks through all the recognizers and tries to detect the gesture that is being made
     */
    recognize(inputData) {
      const { session } = this;
      if (session.stopped) {
        return;
      }
      if (this.session.prevented) {
        inputData.srcEvent.preventDefault();
      }
      let recognizer;
      const { recognizers } = this;
      let { curRecognizer } = session;
      if (!curRecognizer || curRecognizer && curRecognizer.state & RecognizerState.Recognized) {
        curRecognizer = session.curRecognizer = null;
      }
      let i7 = 0;
      while (i7 < recognizers.length) {
        recognizer = recognizers[i7];
        if (session.stopped !== FORCED_STOP && // 1
        (!curRecognizer || recognizer === curRecognizer || // 2
        recognizer.canRecognizeWith(curRecognizer))) {
          recognizer.recognize(inputData);
        } else {
          recognizer.reset();
        }
        if (!curRecognizer && recognizer.state & (RecognizerState.Began | RecognizerState.Changed | RecognizerState.Ended)) {
          curRecognizer = session.curRecognizer = recognizer;
        }
        i7++;
      }
    }
    /**
     * get a recognizer by its event name.
     */
    get(recognizerName) {
      const { recognizers } = this;
      for (let i7 = 0; i7 < recognizers.length; i7++) {
        if (recognizers[i7].options.event === recognizerName) {
          return recognizers[i7];
        }
      }
      return null;
    }
    /**
     * add a recognizer to the manager
     * existing recognizers with the same event name will be removed
     */
    add(recognizer) {
      if (Array.isArray(recognizer)) {
        for (const item of recognizer) {
          this.add(item);
        }
        return this;
      }
      const existing = this.get(recognizer.options.event);
      if (existing) {
        this.remove(existing);
      }
      this.recognizers.push(recognizer);
      recognizer.manager = this;
      this.touchAction.update();
      return recognizer;
    }
    /**
     * remove a recognizer by name or instance
     */
    remove(recognizerOrName) {
      if (Array.isArray(recognizerOrName)) {
        for (const item of recognizerOrName) {
          this.remove(item);
        }
        return this;
      }
      const recognizer = typeof recognizerOrName === "string" ? this.get(recognizerOrName) : recognizerOrName;
      if (recognizer) {
        const { recognizers } = this;
        const index = recognizers.indexOf(recognizer);
        if (index !== -1) {
          recognizers.splice(index, 1);
          this.touchAction.update();
        }
      }
      return this;
    }
    /**
     * bind event
     */
    on(events, handler) {
      if (!events || !handler) {
        return;
      }
      const { handlers } = this;
      for (const event of splitStr(events)) {
        handlers[event] = handlers[event] || [];
        handlers[event].push(handler);
      }
    }
    /**
     * unbind event, leave hander blank to remove all handlers
     */
    off(events, handler) {
      if (!events) {
        return;
      }
      const { handlers } = this;
      for (const event of splitStr(events)) {
        if (!handler) {
          delete handlers[event];
        } else if (handlers[event]) {
          handlers[event].splice(handlers[event].indexOf(handler), 1);
        }
      }
    }
    /**
     * emit event to the listeners
     */
    emit(event, data) {
      const handlers = this.handlers[event] && this.handlers[event].slice();
      if (!handlers || !handlers.length) {
        return;
      }
      const evt = data;
      evt.type = event;
      evt.preventDefault = function() {
        data.srcEvent.preventDefault();
      };
      let i7 = 0;
      while (i7 < handlers.length) {
        handlers[i7](evt);
        i7++;
      }
    }
    /**
     * destroy the manager and unbinds all events
     * it doesn't unbind dom events, that is the user own responsibility
     */
    destroy() {
      this.toggleCssProps(false);
      this.handlers = {};
      this.session = {};
      this.input.destroy();
      this.element = null;
    }
    /**
     * add/remove the css properties as defined in manager.options.cssProps
     */
    toggleCssProps(add17) {
      const { element } = this;
      if (!element) {
        return;
      }
      for (const [name13, value] of Object.entries(this.options.cssProps)) {
        const prop = prefixed(element.style, name13);
        if (add17) {
          this.oldCssProps[prop] = element.style[prop];
          element.style[prop] = value;
        } else {
          element.style[prop] = this.oldCssProps[prop] || "";
        }
      }
      if (!add17) {
        this.oldCssProps = {};
      }
    }
  };

  // ../../node_modules/mjolnir.js/dist/hammerjs/utils/unique-id.js
  var _uniqueId = 1;
  function uniqueId() {
    return _uniqueId++;
  }

  // ../../node_modules/mjolnir.js/dist/hammerjs/recognizer/state-str.js
  function stateStr(state) {
    if (state & RecognizerState.Cancelled) {
      return "cancel";
    } else if (state & RecognizerState.Ended) {
      return "end";
    } else if (state & RecognizerState.Changed) {
      return "move";
    } else if (state & RecognizerState.Began) {
      return "start";
    }
    return "";
  }

  // ../../node_modules/mjolnir.js/dist/hammerjs/recognizer/recognizer.js
  var Recognizer = class {
    constructor(options) {
      this.options = options;
      this.id = uniqueId();
      this.state = RecognizerState.Possible;
      this.simultaneous = {};
      this.requireFail = [];
    }
    /**
     * set options
     */
    set(options) {
      Object.assign(this.options, options);
      this.manager.touchAction.update();
      return this;
    }
    /**
     * recognize simultaneous with an other recognizer.
     */
    recognizeWith(recognizerOrName) {
      if (Array.isArray(recognizerOrName)) {
        for (const item of recognizerOrName) {
          this.recognizeWith(item);
        }
        return this;
      }
      let otherRecognizer;
      if (typeof recognizerOrName === "string") {
        otherRecognizer = this.manager.get(recognizerOrName);
        if (!otherRecognizer) {
          throw new Error(`Cannot find recognizer ${recognizerOrName}`);
        }
      } else {
        otherRecognizer = recognizerOrName;
      }
      const { simultaneous } = this;
      if (!simultaneous[otherRecognizer.id]) {
        simultaneous[otherRecognizer.id] = otherRecognizer;
        otherRecognizer.recognizeWith(this);
      }
      return this;
    }
    /**
     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
     */
    dropRecognizeWith(recognizerOrName) {
      if (Array.isArray(recognizerOrName)) {
        for (const item of recognizerOrName) {
          this.dropRecognizeWith(item);
        }
        return this;
      }
      let otherRecognizer;
      if (typeof recognizerOrName === "string") {
        otherRecognizer = this.manager.get(recognizerOrName);
      } else {
        otherRecognizer = recognizerOrName;
      }
      if (otherRecognizer) {
        delete this.simultaneous[otherRecognizer.id];
      }
      return this;
    }
    /**
     * recognizer can only run when an other is failing
     */
    requireFailure(recognizerOrName) {
      if (Array.isArray(recognizerOrName)) {
        for (const item of recognizerOrName) {
          this.requireFailure(item);
        }
        return this;
      }
      let otherRecognizer;
      if (typeof recognizerOrName === "string") {
        otherRecognizer = this.manager.get(recognizerOrName);
        if (!otherRecognizer) {
          throw new Error(`Cannot find recognizer ${recognizerOrName}`);
        }
      } else {
        otherRecognizer = recognizerOrName;
      }
      const { requireFail } = this;
      if (requireFail.indexOf(otherRecognizer) === -1) {
        requireFail.push(otherRecognizer);
        otherRecognizer.requireFailure(this);
      }
      return this;
    }
    /**
     * drop the requireFailure link. it does not remove the link on the other recognizer.
     */
    dropRequireFailure(recognizerOrName) {
      if (Array.isArray(recognizerOrName)) {
        for (const item of recognizerOrName) {
          this.dropRequireFailure(item);
        }
        return this;
      }
      let otherRecognizer;
      if (typeof recognizerOrName === "string") {
        otherRecognizer = this.manager.get(recognizerOrName);
      } else {
        otherRecognizer = recognizerOrName;
      }
      if (otherRecognizer) {
        const index = this.requireFail.indexOf(otherRecognizer);
        if (index > -1) {
          this.requireFail.splice(index, 1);
        }
      }
      return this;
    }
    /**
     * has require failures boolean
     */
    hasRequireFailures() {
      return Boolean(this.requireFail.find((recognier) => recognier.options.enable));
    }
    /**
     * if the recognizer can recognize simultaneous with an other recognizer
     */
    canRecognizeWith(otherRecognizer) {
      return Boolean(this.simultaneous[otherRecognizer.id]);
    }
    /**
     * You should use `tryEmit` instead of `emit` directly to check
     * that all the needed recognizers has failed before emitting.
     */
    emit(input) {
      if (!input)
        return;
      const { state } = this;
      if (state < RecognizerState.Ended) {
        this.manager.emit(this.options.event + stateStr(state), input);
      }
      this.manager.emit(this.options.event, input);
      if (input.additionalEvent) {
        this.manager.emit(input.additionalEvent, input);
      }
      if (state >= RecognizerState.Ended) {
        this.manager.emit(this.options.event + stateStr(state), input);
      }
    }
    /**
     * Check that all the require failure recognizers has failed,
     * if true, it emits a gesture event,
     * otherwise, setup the state to FAILED.
     */
    tryEmit(input) {
      if (this.canEmit()) {
        this.emit(input);
      } else {
        this.state = RecognizerState.Failed;
      }
    }
    /**
     * can we emit?
     */
    canEmit() {
      let i7 = 0;
      while (i7 < this.requireFail.length) {
        if (!(this.requireFail[i7].state & (RecognizerState.Failed | RecognizerState.Possible))) {
          return false;
        }
        i7++;
      }
      return true;
    }
    /**
     * update the recognizer
     */
    recognize(inputData) {
      const inputDataClone = { ...inputData };
      if (!this.options.enable) {
        this.reset();
        this.state = RecognizerState.Failed;
        return;
      }
      if (this.state & (RecognizerState.Recognized | RecognizerState.Cancelled | RecognizerState.Failed)) {
        this.state = RecognizerState.Possible;
      }
      this.state = this.process(inputDataClone);
      if (this.state & (RecognizerState.Began | RecognizerState.Changed | RecognizerState.Ended | RecognizerState.Cancelled)) {
        this.tryEmit(inputDataClone);
      }
    }
    /**
     * return the event names that are emitted by this recognizer
     */
    getEventNames() {
      return [this.options.event];
    }
    /**
     * called when the gesture isn't allowed to recognize
     * like when another is being recognized or it is disabled
     */
    reset() {
    }
  };

  // ../../node_modules/mjolnir.js/dist/hammerjs/recognizers/attribute.js
  var AttrRecognizer = class extends Recognizer {
    /**
     * Used to check if it the recognizer receives valid input, like input.distance > 10.
     */
    attrTest(input) {
      const optionPointers = this.options.pointers;
      return optionPointers === 0 || input.pointers.length === optionPointers;
    }
    /**
     * Process the input and return the state for the recognizer
     */
    process(input) {
      const { state } = this;
      const { eventType } = input;
      const isRecognized = state & (RecognizerState.Began | RecognizerState.Changed);
      const isValid = this.attrTest(input);
      if (isRecognized && (eventType & InputEvent.Cancel || !isValid)) {
        return state | RecognizerState.Cancelled;
      } else if (isRecognized || isValid) {
        if (eventType & InputEvent.End) {
          return state | RecognizerState.Ended;
        } else if (!(state & RecognizerState.Began)) {
          return RecognizerState.Began;
        }
        return state | RecognizerState.Changed;
      }
      return RecognizerState.Failed;
    }
  };

  // ../../node_modules/mjolnir.js/dist/hammerjs/recognizers/tap.js
  var TapRecognizer = class extends Recognizer {
    constructor(options = {}) {
      super({
        enable: true,
        event: "tap",
        pointers: 1,
        taps: 1,
        interval: 300,
        time: 250,
        threshold: 9,
        posThreshold: 10,
        ...options
      });
      this.pTime = null;
      this.pCenter = null;
      this._timer = null;
      this._input = null;
      this.count = 0;
    }
    getTouchAction() {
      return [TOUCH_ACTION_MANIPULATION];
    }
    process(input) {
      const { options } = this;
      const validPointers = input.pointers.length === options.pointers;
      const validMovement = input.distance < options.threshold;
      const validTouchTime = input.deltaTime < options.time;
      this.reset();
      if (input.eventType & InputEvent.Start && this.count === 0) {
        return this.failTimeout();
      }
      if (validMovement && validTouchTime && validPointers) {
        if (input.eventType !== InputEvent.End) {
          return this.failTimeout();
        }
        const validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
        const validMultiTap = !this.pCenter || getPointDistance(this.pCenter, input.center) < options.posThreshold;
        this.pTime = input.timeStamp;
        this.pCenter = input.center;
        if (!validMultiTap || !validInterval) {
          this.count = 1;
        } else {
          this.count += 1;
        }
        this._input = input;
        const tapCount = this.count % options.taps;
        if (tapCount === 0) {
          if (!this.hasRequireFailures()) {
            return RecognizerState.Recognized;
          }
          this._timer = setTimeout(() => {
            this.state = RecognizerState.Recognized;
            this.tryEmit(this._input);
          }, options.interval);
          return RecognizerState.Began;
        }
      }
      return RecognizerState.Failed;
    }
    failTimeout() {
      this._timer = setTimeout(() => {
        this.state = RecognizerState.Failed;
      }, this.options.interval);
      return RecognizerState.Failed;
    }
    reset() {
      clearTimeout(this._timer);
    }
    emit(input) {
      if (this.state === RecognizerState.Recognized) {
        input.tapCount = this.count;
        this.manager.emit(this.options.event, input);
      }
    }
  };

  // ../../node_modules/mjolnir.js/dist/hammerjs/recognizers/pan.js
  var EVENT_NAMES = ["", "start", "move", "end", "cancel", "up", "down", "left", "right"];
  var PanRecognizer = class extends AttrRecognizer {
    constructor(options = {}) {
      super({
        enable: true,
        pointers: 1,
        event: "pan",
        threshold: 10,
        direction: InputDirection.All,
        ...options
      });
      this.pX = null;
      this.pY = null;
    }
    getTouchAction() {
      const { options: { direction } } = this;
      const actions = [];
      if (direction & InputDirection.Horizontal) {
        actions.push(TOUCH_ACTION_PAN_Y);
      }
      if (direction & InputDirection.Vertical) {
        actions.push(TOUCH_ACTION_PAN_X);
      }
      return actions;
    }
    getEventNames() {
      return EVENT_NAMES.map((suffix) => this.options.event + suffix);
    }
    directionTest(input) {
      const { options } = this;
      let hasMoved = true;
      let { distance: distance7 } = input;
      let { direction } = input;
      const x4 = input.deltaX;
      const y5 = input.deltaY;
      if (!(direction & options.direction)) {
        if (options.direction & InputDirection.Horizontal) {
          direction = x4 === 0 ? InputDirection.None : x4 < 0 ? InputDirection.Left : InputDirection.Right;
          hasMoved = x4 !== this.pX;
          distance7 = Math.abs(input.deltaX);
        } else {
          direction = y5 === 0 ? InputDirection.None : y5 < 0 ? InputDirection.Up : InputDirection.Down;
          hasMoved = y5 !== this.pY;
          distance7 = Math.abs(input.deltaY);
        }
      }
      input.direction = direction;
      return hasMoved && distance7 > options.threshold && Boolean(direction & options.direction);
    }
    attrTest(input) {
      return super.attrTest(input) && (Boolean(this.state & RecognizerState.Began) || !(this.state & RecognizerState.Began) && this.directionTest(input));
    }
    emit(input) {
      this.pX = input.deltaX;
      this.pY = input.deltaY;
      const direction = InputDirection[input.direction].toLowerCase();
      if (direction) {
        input.additionalEvent = this.options.event + direction;
      }
      super.emit(input);
    }
  };

  // ../../node_modules/mjolnir.js/dist/hammerjs/recognizers/pinch.js
  var EVENT_NAMES2 = ["", "start", "move", "end", "cancel", "in", "out"];
  var PinchRecognizer = class extends AttrRecognizer {
    constructor(options = {}) {
      super({
        enable: true,
        event: "pinch",
        threshold: 0,
        pointers: 2,
        ...options
      });
    }
    getTouchAction() {
      return [TOUCH_ACTION_NONE];
    }
    getEventNames() {
      return EVENT_NAMES2.map((suffix) => this.options.event + suffix);
    }
    attrTest(input) {
      return super.attrTest(input) && (Math.abs(input.scale - 1) > this.options.threshold || Boolean(this.state & RecognizerState.Began));
    }
    emit(input) {
      if (input.scale !== 1) {
        const inOut = input.scale < 1 ? "in" : "out";
        input.additionalEvent = this.options.event + inOut;
      }
      super.emit(input);
    }
  };

  // ../../node_modules/mjolnir.js/dist/inputs/input.js
  var Input2 = class {
    constructor(element, callback, options) {
      this.element = element;
      this.callback = callback;
      this.options = options;
    }
  };

  // ../../node_modules/mjolnir.js/dist/utils/globals.js
  var userAgent = typeof navigator !== "undefined" && navigator.userAgent ? navigator.userAgent.toLowerCase() : "";
  var window_4 = typeof window !== "undefined" ? window : global;

  // ../../node_modules/mjolnir.js/dist/inputs/wheel-input.js
  var firefox = userAgent.indexOf("firefox") !== -1;
  var WHEEL_DELTA_MAGIC_SCALER = 4.000244140625;
  var WHEEL_DELTA_PER_LINE = 40;
  var SHIFT_MULTIPLIER = 0.25;
  var WheelInput = class extends Input2 {
    constructor(element, callback, options) {
      super(element, callback, { enable: true, ...options });
      this.handleEvent = (event) => {
        if (!this.options.enable) {
          return;
        }
        let value = event.deltaY;
        if (globalThis.WheelEvent) {
          if (firefox && event.deltaMode === globalThis.WheelEvent.DOM_DELTA_PIXEL) {
            value /= globalThis.devicePixelRatio;
          }
          if (event.deltaMode === globalThis.WheelEvent.DOM_DELTA_LINE) {
            value *= WHEEL_DELTA_PER_LINE;
          }
        }
        if (value !== 0 && value % WHEEL_DELTA_MAGIC_SCALER === 0) {
          value = Math.floor(value / WHEEL_DELTA_MAGIC_SCALER);
        }
        if (event.shiftKey && value) {
          value = value * SHIFT_MULTIPLIER;
        }
        this.callback({
          type: "wheel",
          center: {
            x: event.clientX,
            y: event.clientY
          },
          delta: -value,
          srcEvent: event,
          pointerType: "mouse",
          target: event.target
        });
      };
      element.addEventListener("wheel", this.handleEvent, { passive: false });
    }
    destroy() {
      this.element.removeEventListener("wheel", this.handleEvent);
    }
    /**
     * Enable this input (begin processing events)
     * if the specified event type is among those handled by this input.
     */
    enableEventType(eventType, enabled) {
      if (eventType === "wheel") {
        this.options.enable = enabled;
      }
    }
  };

  // ../../node_modules/mjolnir.js/dist/inputs/move-input.js
  var MOUSE_EVENTS = [
    "mousedown",
    "mousemove",
    "mouseup",
    "mouseover",
    "mouseout",
    "mouseleave"
  ];
  var MoveInput = class extends Input2 {
    constructor(element, callback, options) {
      super(element, callback, { enable: true, ...options });
      this.handleEvent = (event) => {
        this.handleOverEvent(event);
        this.handleOutEvent(event);
        this.handleEnterEvent(event);
        this.handleLeaveEvent(event);
        this.handleMoveEvent(event);
      };
      this.pressed = false;
      const { enable: enable2 } = this.options;
      this.enableMoveEvent = enable2;
      this.enableLeaveEvent = enable2;
      this.enableEnterEvent = enable2;
      this.enableOutEvent = enable2;
      this.enableOverEvent = enable2;
      MOUSE_EVENTS.forEach((event) => element.addEventListener(event, this.handleEvent));
    }
    destroy() {
      MOUSE_EVENTS.forEach((event) => this.element.removeEventListener(event, this.handleEvent));
    }
    /**
     * Enable this input (begin processing events)
     * if the specified event type is among those handled by this input.
     */
    enableEventType(eventType, enabled) {
      switch (eventType) {
        case "pointermove":
          this.enableMoveEvent = enabled;
          break;
        case "pointerover":
          this.enableOverEvent = enabled;
          break;
        case "pointerout":
          this.enableOutEvent = enabled;
          break;
        case "pointerenter":
          this.enableEnterEvent = enabled;
          break;
        case "pointerleave":
          this.enableLeaveEvent = enabled;
          break;
        default:
      }
    }
    handleOverEvent(event) {
      if (this.enableOverEvent && event.type === "mouseover") {
        this._emit("pointerover", event);
      }
    }
    handleOutEvent(event) {
      if (this.enableOutEvent && event.type === "mouseout") {
        this._emit("pointerout", event);
      }
    }
    handleEnterEvent(event) {
      if (this.enableEnterEvent && event.type === "mouseenter") {
        this._emit("pointerenter", event);
      }
    }
    handleLeaveEvent(event) {
      if (this.enableLeaveEvent && event.type === "mouseleave") {
        this._emit("pointerleave", event);
      }
    }
    handleMoveEvent(event) {
      if (this.enableMoveEvent) {
        switch (event.type) {
          case "mousedown":
            if (event.button >= 0) {
              this.pressed = true;
            }
            break;
          case "mousemove":
            if (event.buttons === 0) {
              this.pressed = false;
            }
            if (!this.pressed) {
              this._emit("pointermove", event);
            }
            break;
          case "mouseup":
            this.pressed = false;
            break;
          default:
        }
      }
    }
    _emit(type, event) {
      this.callback({
        type,
        center: {
          x: event.clientX,
          y: event.clientY
        },
        srcEvent: event,
        pointerType: "mouse",
        target: event.target
      });
    }
  };

  // ../../node_modules/mjolnir.js/dist/inputs/key-input.js
  var KEY_EVENTS = ["keydown", "keyup"];
  var KeyInput = class extends Input2 {
    constructor(element, callback, options) {
      super(element, callback, { enable: true, tabIndex: 0, ...options });
      this.handleEvent = (event) => {
        const targetElement = event.target || event.srcElement;
        if (targetElement.tagName === "INPUT" && targetElement.type === "text" || targetElement.tagName === "TEXTAREA") {
          return;
        }
        if (this.enableDownEvent && event.type === "keydown") {
          this.callback({
            type: "keydown",
            srcEvent: event,
            key: event.key,
            target: event.target
          });
        }
        if (this.enableUpEvent && event.type === "keyup") {
          this.callback({
            type: "keyup",
            srcEvent: event,
            key: event.key,
            target: event.target
          });
        }
      };
      this.enableDownEvent = this.options.enable;
      this.enableUpEvent = this.options.enable;
      element.tabIndex = this.options.tabIndex;
      element.style.outline = "none";
      KEY_EVENTS.forEach((event) => element.addEventListener(event, this.handleEvent));
    }
    destroy() {
      KEY_EVENTS.forEach((event) => this.element.removeEventListener(event, this.handleEvent));
    }
    /**
     * Enable this input (begin processing events)
     * if the specified event type is among those handled by this input.
     */
    enableEventType(eventType, enabled) {
      if (eventType === "keydown") {
        this.enableDownEvent = enabled;
      }
      if (eventType === "keyup") {
        this.enableUpEvent = enabled;
      }
    }
  };

  // ../../node_modules/mjolnir.js/dist/inputs/contextmenu-input.js
  var ContextmenuInput = class extends Input2 {
    constructor(element, callback, options) {
      super(element, callback, options);
      this.handleEvent = (event) => {
        if (!this.options.enable) {
          return;
        }
        this.callback({
          type: "contextmenu",
          center: {
            x: event.clientX,
            y: event.clientY
          },
          srcEvent: event,
          pointerType: "mouse",
          target: event.target
        });
      };
      element.addEventListener("contextmenu", this.handleEvent);
    }
    destroy() {
      this.element.removeEventListener("contextmenu", this.handleEvent);
    }
    /**
     * Enable this input (begin processing events)
     * if the specified event type is among those handled by this input.
     */
    enableEventType(eventType, enabled) {
      if (eventType === "contextmenu") {
        this.options.enable = enabled;
      }
    }
  };

  // ../../node_modules/mjolnir.js/dist/utils/event-utils.js
  var DOWN_EVENT = 1;
  var MOVE_EVENT = 2;
  var UP_EVENT = 4;
  var MOUSE_EVENTS2 = {
    pointerdown: DOWN_EVENT,
    pointermove: MOVE_EVENT,
    pointerup: UP_EVENT,
    mousedown: DOWN_EVENT,
    mousemove: MOVE_EVENT,
    mouseup: UP_EVENT
  };
  var MOUSE_EVENT_BUTTON_LEFT = 0;
  var MOUSE_EVENT_BUTTON_MIDDLE = 1;
  var MOUSE_EVENT_BUTTON_RIGHT = 2;
  var MOUSE_EVENT_BUTTONS_LEFT_MASK = 1;
  var MOUSE_EVENT_BUTTONS_RIGHT_MASK = 2;
  var MOUSE_EVENT_BUTTONS_MIDDLE_MASK = 4;
  function whichButtons(event) {
    const eventType = MOUSE_EVENTS2[event.srcEvent.type];
    if (!eventType) {
      return null;
    }
    const { buttons, button } = event.srcEvent;
    let leftButton = false;
    let middleButton = false;
    let rightButton = false;
    if (eventType === MOVE_EVENT) {
      leftButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_LEFT_MASK);
      middleButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_MIDDLE_MASK);
      rightButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_RIGHT_MASK);
    } else {
      leftButton = button === MOUSE_EVENT_BUTTON_LEFT;
      middleButton = button === MOUSE_EVENT_BUTTON_MIDDLE;
      rightButton = button === MOUSE_EVENT_BUTTON_RIGHT;
    }
    return { leftButton, middleButton, rightButton };
  }
  function getOffsetPosition(event, rootElement) {
    const center2 = event.center;
    if (!center2) {
      return null;
    }
    const rect = rootElement.getBoundingClientRect();
    const scaleX2 = rect.width / rootElement.offsetWidth || 1;
    const scaleY2 = rect.height / rootElement.offsetHeight || 1;
    const offsetCenter = {
      x: (center2.x - rect.left - rootElement.clientLeft) / scaleX2,
      y: (center2.y - rect.top - rootElement.clientTop) / scaleY2
    };
    return { center: center2, offsetCenter };
  }

  // ../../node_modules/mjolnir.js/dist/utils/event-registrar.js
  var DEFAULT_OPTIONS = {
    srcElement: "root",
    priority: 0
  };
  var EventRegistrar = class {
    constructor(eventManager, recognizerName) {
      this.handleEvent = (event) => {
        if (this.isEmpty()) {
          return;
        }
        const mjolnirEvent = this._normalizeEvent(event);
        let target2 = event.srcEvent.target;
        while (target2 && target2 !== mjolnirEvent.rootElement) {
          this._emit(mjolnirEvent, target2);
          if (mjolnirEvent.handled) {
            return;
          }
          target2 = target2.parentNode;
        }
        this._emit(mjolnirEvent, "root");
      };
      this.eventManager = eventManager;
      this.recognizerName = recognizerName;
      this.handlers = [];
      this.handlersByElement = /* @__PURE__ */ new Map();
      this._active = false;
    }
    // Returns true if there are no non-passive handlers
    isEmpty() {
      return !this._active;
    }
    add(type, handler, options, once = false, passive = false) {
      const { handlers, handlersByElement } = this;
      const opts = { ...DEFAULT_OPTIONS, ...options };
      let entries = handlersByElement.get(opts.srcElement);
      if (!entries) {
        entries = [];
        handlersByElement.set(opts.srcElement, entries);
      }
      const entry = {
        type,
        handler,
        srcElement: opts.srcElement,
        priority: opts.priority
      };
      if (once) {
        entry.once = true;
      }
      if (passive) {
        entry.passive = true;
      }
      handlers.push(entry);
      this._active = this._active || !entry.passive;
      let insertPosition = entries.length - 1;
      while (insertPosition >= 0) {
        if (entries[insertPosition].priority >= entry.priority) {
          break;
        }
        insertPosition--;
      }
      entries.splice(insertPosition + 1, 0, entry);
    }
    remove(type, handler) {
      const { handlers, handlersByElement } = this;
      for (let i7 = handlers.length - 1; i7 >= 0; i7--) {
        const entry = handlers[i7];
        if (entry.type === type && entry.handler === handler) {
          handlers.splice(i7, 1);
          const entries = handlersByElement.get(entry.srcElement);
          entries.splice(entries.indexOf(entry), 1);
          if (entries.length === 0) {
            handlersByElement.delete(entry.srcElement);
          }
        }
      }
      this._active = handlers.some((entry) => !entry.passive);
    }
    /**
     * Invoke handlers on a particular element
     */
    _emit(event, srcElement) {
      const entries = this.handlersByElement.get(srcElement);
      if (entries) {
        let immediatePropagationStopped = false;
        const stopPropagation = () => {
          event.handled = true;
        };
        const stopImmediatePropagation = () => {
          event.handled = true;
          immediatePropagationStopped = true;
        };
        const entriesToRemove = [];
        for (let i7 = 0; i7 < entries.length; i7++) {
          const { type, handler, once } = entries[i7];
          handler({
            ...event,
            type,
            stopPropagation,
            stopImmediatePropagation
          });
          if (once) {
            entriesToRemove.push(entries[i7]);
          }
          if (immediatePropagationStopped) {
            break;
          }
        }
        for (let i7 = 0; i7 < entriesToRemove.length; i7++) {
          const { type, handler } = entriesToRemove[i7];
          this.remove(type, handler);
        }
      }
    }
    /**
     * Normalizes hammerjs and custom events to have predictable fields.
     */
    _normalizeEvent(event) {
      const rootElement = this.eventManager.getElement();
      return {
        ...event,
        ...whichButtons(event),
        ...getOffsetPosition(event, rootElement),
        preventDefault: () => {
          event.srcEvent.preventDefault();
        },
        stopImmediatePropagation: null,
        stopPropagation: null,
        handled: false,
        rootElement
      };
    }
  };

  // ../../node_modules/mjolnir.js/dist/event-manager.js
  function normalizeRecognizer(item) {
    if ("recognizer" in item) {
      return item;
    }
    let recognizer;
    const itemArray = Array.isArray(item) ? [...item] : [item];
    if (typeof itemArray[0] === "function") {
      const RecognizerType = itemArray.shift();
      const options = itemArray.shift() || {};
      recognizer = new RecognizerType(options);
    } else {
      recognizer = itemArray.shift();
    }
    return {
      recognizer,
      recognizeWith: typeof itemArray[0] === "string" ? [itemArray[0]] : itemArray[0],
      requireFailure: typeof itemArray[1] === "string" ? [itemArray[1]] : itemArray[1]
    };
  }
  var EventManager = class {
    constructor(element = null, options = {}) {
      this._onBasicInput = (event) => {
        this.manager.emit(event.srcEvent.type, event);
      };
      this._onOtherEvent = (event) => {
        this.manager.emit(event.type, event);
      };
      this.options = {
        recognizers: [],
        events: {},
        touchAction: "compute",
        tabIndex: 0,
        cssProps: {},
        ...options
      };
      this.events = /* @__PURE__ */ new Map();
      this.element = element;
      if (!element)
        return;
      this.manager = new Manager(element, this.options);
      for (const item of this.options.recognizers) {
        const { recognizer, recognizeWith, requireFailure } = normalizeRecognizer(item);
        this.manager.add(recognizer);
        if (recognizeWith) {
          recognizer.recognizeWith(recognizeWith);
        }
        if (requireFailure) {
          recognizer.requireFailure(requireFailure);
        }
      }
      this.manager.on("hammer.input", this._onBasicInput);
      this.wheelInput = new WheelInput(element, this._onOtherEvent, {
        enable: false
      });
      this.moveInput = new MoveInput(element, this._onOtherEvent, {
        enable: false
      });
      this.keyInput = new KeyInput(element, this._onOtherEvent, {
        enable: false,
        tabIndex: options.tabIndex
      });
      this.contextmenuInput = new ContextmenuInput(element, this._onOtherEvent, {
        enable: false
      });
      this.on(this.options.events);
    }
    getElement() {
      return this.element;
    }
    // Tear down internal event management implementations.
    destroy() {
      if (!this.element)
        return;
      this.wheelInput.destroy();
      this.moveInput.destroy();
      this.keyInput.destroy();
      this.contextmenuInput.destroy();
      this.manager.destroy();
    }
    /** Register an event handler function to be called on `event` */
    on(event, handler, opts) {
      this._addEventHandler(event, handler, opts, false);
    }
    once(event, handler, opts) {
      this._addEventHandler(event, handler, opts, true);
    }
    watch(event, handler, opts) {
      this._addEventHandler(event, handler, opts, false, true);
    }
    off(event, handler) {
      this._removeEventHandler(event, handler);
    }
    /*
     * Enable/disable recognizer for the given event
     */
    _toggleRecognizer(name13, enabled) {
      const { manager } = this;
      if (!manager) {
        return;
      }
      const recognizer = manager.get(name13);
      if (recognizer) {
        recognizer.set({ enable: enabled });
        manager.touchAction.update();
      }
      this.wheelInput?.enableEventType(name13, enabled);
      this.moveInput?.enableEventType(name13, enabled);
      this.keyInput?.enableEventType(name13, enabled);
      this.contextmenuInput?.enableEventType(name13, enabled);
    }
    /**
     * Process the event registration for a single event + handler.
     */
    _addEventHandler(event, handler, opts, once, passive) {
      if (typeof event !== "string") {
        opts = handler;
        for (const [eventName, eventHandler] of Object.entries(event)) {
          this._addEventHandler(eventName, eventHandler, opts, once, passive);
        }
        return;
      }
      const { manager, events } = this;
      if (!manager)
        return;
      let eventRegistrar = events.get(event);
      if (!eventRegistrar) {
        const recognizerName = this._getRecognizerName(event) || event;
        eventRegistrar = new EventRegistrar(this, recognizerName);
        events.set(event, eventRegistrar);
        if (manager) {
          manager.on(event, eventRegistrar.handleEvent);
        }
      }
      eventRegistrar.add(event, handler, opts, once, passive);
      if (!eventRegistrar.isEmpty()) {
        this._toggleRecognizer(eventRegistrar.recognizerName, true);
      }
    }
    /**
     * Process the event deregistration for a single event + handler.
     */
    _removeEventHandler(event, handler) {
      if (typeof event !== "string") {
        for (const [eventName, eventHandler] of Object.entries(event)) {
          this._removeEventHandler(eventName, eventHandler);
        }
        return;
      }
      const { events } = this;
      const eventRegistrar = events.get(event);
      if (!eventRegistrar) {
        return;
      }
      eventRegistrar.remove(event, handler);
      if (eventRegistrar.isEmpty()) {
        const { recognizerName } = eventRegistrar;
        let isRecognizerUsed = false;
        for (const eh of events.values()) {
          if (eh.recognizerName === recognizerName && !eh.isEmpty()) {
            isRecognizerUsed = true;
            break;
          }
        }
        if (!isRecognizerUsed) {
          this._toggleRecognizer(recognizerName, false);
        }
      }
    }
    _getRecognizerName(event) {
      return this.manager.recognizers.find((recognizer) => {
        return recognizer.getEventNames().includes(event);
      })?.options.event;
    }
  };

  // ../core/src/lib/constants.ts
  var COORDINATE_SYSTEM = {
    /**
     * `LNGLAT` if rendering into a geospatial viewport, `CARTESIAN` otherwise
     */
    DEFAULT: -1,
    /**
     * Positions are interpreted as [longitude, latitude, elevation]
     * longitude/latitude are in degrees, elevation is in meters.
     * Dimensions are in meters.
     */
    LNGLAT: 1,
    /**
     * Positions are interpreted as [x, y, z] in meter offsets from the coordinate origin.
     * Dimensions are in meters.
     */
    METER_OFFSETS: 2,
    /**
     * Positions are interpreted as [deltaLng, deltaLat, elevation] from the coordinate origin.
     * deltaLng/deltaLat are in degrees, elevation is in meters.
     * Dimensions are in meters.
     */
    LNGLAT_OFFSETS: 3,
    /**
     * Positions and dimensions are in the common units of the viewport.
     */
    CARTESIAN: 0
  };
  Object.defineProperty(COORDINATE_SYSTEM, "IDENTITY", {
    get: () => {
      log_default.deprecated("COORDINATE_SYSTEM.IDENTITY", "COORDINATE_SYSTEM.CARTESIAN")();
      return 0;
    }
  });
  var PROJECTION_MODE = {
    /**
     * Render geospatial data in Web Mercator projection
     */
    WEB_MERCATOR: 1,
    /**
     * Render geospatial data as a 3D globe
     */
    GLOBE: 2,
    /**
     * (Internal use only) Web Mercator projection at high zoom
     */
    WEB_MERCATOR_AUTO_OFFSET: 4,
    /**
     * No transformation
     */
    IDENTITY: 0
  };
  var UNIT = {
    common: 0,
    meters: 1,
    pixels: 2
  };
  var EVENT_HANDLERS = {
    click: "onClick",
    dblclick: "onClick",
    panstart: "onDragStart",
    panmove: "onDrag",
    panend: "onDragEnd"
  };
  var RECOGNIZERS = {
    multipan: [PanRecognizer, { threshold: 10, direction: InputDirection.Vertical, pointers: 2 }],
    pinch: [PinchRecognizer, {}, null, ["multipan"]],
    pan: [PanRecognizer, { threshold: 1 }, ["pinch"], ["multipan"]],
    dblclick: [TapRecognizer, { event: "dblclick", taps: 2 }],
    click: [TapRecognizer, { event: "click" }, null, ["dblclick"]]
  };
  var OPERATION = {
    DRAW: "draw",
    MASK: "mask",
    TERRAIN: "terrain"
  };

  // ../core/src/utils/memoize.ts
  function isEqual(a6, b4) {
    if (a6 === b4) {
      return true;
    }
    if (Array.isArray(a6)) {
      const len9 = a6.length;
      if (!b4 || b4.length !== len9) {
        return false;
      }
      for (let i7 = 0; i7 < len9; i7++) {
        if (a6[i7] !== b4[i7]) {
          return false;
        }
      }
      return true;
    }
    return false;
  }
  function memoize(compute) {
    let cachedArgs = {};
    let cachedResult;
    return (args) => {
      for (const key in args) {
        if (!isEqual(args[key], cachedArgs[key])) {
          cachedResult = compute(args);
          cachedArgs = args;
          break;
        }
      }
      return cachedResult;
    };
  }

  // ../core/src/shaderlib/project/viewport-uniforms.ts
  var ZERO_VECTOR = [0, 0, 0, 0];
  var VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];
  var IDENTITY_MATRIX4 = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  var DEFAULT_PIXELS_PER_UNIT2 = [0, 0, 0];
  var DEFAULT_COORDINATE_ORIGIN = [0, 0, 0];
  var getMemoizedViewportUniforms = memoize(calculateViewportUniforms);
  function getOffsetOrigin(viewport, coordinateSystem, coordinateOrigin = DEFAULT_COORDINATE_ORIGIN) {
    if (coordinateOrigin.length < 3) {
      coordinateOrigin = [coordinateOrigin[0], coordinateOrigin[1], 0];
    }
    let shaderCoordinateOrigin = coordinateOrigin;
    let geospatialOrigin;
    let offsetMode = true;
    if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS || coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS) {
      geospatialOrigin = coordinateOrigin;
    } else {
      geospatialOrigin = viewport.isGeospatial ? (
        // @ts-expect-error longitude and latitude are not defined on the base Viewport, but is expected on geospatial viewports
        [Math.fround(viewport.longitude), Math.fround(viewport.latitude), 0]
      ) : null;
    }
    switch (viewport.projectionMode) {
      case PROJECTION_MODE.WEB_MERCATOR:
        if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT || coordinateSystem === COORDINATE_SYSTEM.CARTESIAN) {
          geospatialOrigin = [0, 0, 0];
          offsetMode = false;
        }
        break;
      case PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET:
        if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {
          shaderCoordinateOrigin = geospatialOrigin;
        } else if (coordinateSystem === COORDINATE_SYSTEM.CARTESIAN) {
          shaderCoordinateOrigin = [
            Math.fround(viewport.center[0]),
            Math.fround(viewport.center[1]),
            0
          ];
          geospatialOrigin = viewport.unprojectPosition(shaderCoordinateOrigin);
          shaderCoordinateOrigin[0] -= coordinateOrigin[0];
          shaderCoordinateOrigin[1] -= coordinateOrigin[1];
          shaderCoordinateOrigin[2] -= coordinateOrigin[2];
        }
        break;
      case PROJECTION_MODE.IDENTITY:
        shaderCoordinateOrigin = viewport.position.map(Math.fround);
        shaderCoordinateOrigin[2] = shaderCoordinateOrigin[2] || 0;
        break;
      case PROJECTION_MODE.GLOBE:
        offsetMode = false;
        geospatialOrigin = null;
        break;
      default:
        offsetMode = false;
    }
    return { geospatialOrigin, shaderCoordinateOrigin, offsetMode };
  }
  function calculateMatrixAndOffset(viewport, coordinateSystem, coordinateOrigin) {
    const { viewMatrixUncentered, projectionMatrix } = viewport;
    let { viewMatrix: viewMatrix2, viewProjectionMatrix } = viewport;
    let projectionCenter = ZERO_VECTOR;
    let originCommon = ZERO_VECTOR;
    let cameraPosCommon = viewport.cameraPosition;
    const { geospatialOrigin, shaderCoordinateOrigin, offsetMode } = getOffsetOrigin(
      viewport,
      coordinateSystem,
      coordinateOrigin
    );
    if (offsetMode) {
      originCommon = viewport.projectPosition(geospatialOrigin || shaderCoordinateOrigin);
      cameraPosCommon = [
        cameraPosCommon[0] - originCommon[0],
        cameraPosCommon[1] - originCommon[1],
        cameraPosCommon[2] - originCommon[2]
      ];
      originCommon[3] = 1;
      projectionCenter = vec4_exports.transformMat4([], originCommon, viewProjectionMatrix);
      viewMatrix2 = viewMatrixUncentered || viewMatrix2;
      viewProjectionMatrix = mat4_exports.multiply([], projectionMatrix, viewMatrix2);
      viewProjectionMatrix = mat4_exports.multiply([], viewProjectionMatrix, VECTOR_TO_POINT_MATRIX);
    }
    return {
      viewMatrix: viewMatrix2,
      viewProjectionMatrix,
      projectionCenter,
      originCommon,
      cameraPosCommon,
      shaderCoordinateOrigin,
      geospatialOrigin
    };
  }
  function getUniformsFromViewport({
    viewport,
    devicePixelRatio: devicePixelRatio2 = 1,
    modelMatrix: modelMatrix2 = null,
    // Match Layer.defaultProps
    coordinateSystem = COORDINATE_SYSTEM.DEFAULT,
    coordinateOrigin = DEFAULT_COORDINATE_ORIGIN,
    autoWrapLongitude = false
  }) {
    if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {
      coordinateSystem = viewport.isGeospatial ? COORDINATE_SYSTEM.LNGLAT : COORDINATE_SYSTEM.CARTESIAN;
    }
    const uniforms = getMemoizedViewportUniforms({
      viewport,
      devicePixelRatio: devicePixelRatio2,
      coordinateSystem,
      coordinateOrigin
    });
    uniforms.wrapLongitude = autoWrapLongitude;
    uniforms.modelMatrix = modelMatrix2 || IDENTITY_MATRIX4;
    return uniforms;
  }
  function calculateViewportUniforms({
    viewport,
    devicePixelRatio: devicePixelRatio2,
    coordinateSystem,
    coordinateOrigin
  }) {
    const {
      projectionCenter,
      viewProjectionMatrix,
      originCommon,
      cameraPosCommon,
      shaderCoordinateOrigin,
      geospatialOrigin
    } = calculateMatrixAndOffset(viewport, coordinateSystem, coordinateOrigin);
    const distanceScales = viewport.getDistanceScales();
    const viewportSize = [
      viewport.width * devicePixelRatio2,
      viewport.height * devicePixelRatio2
    ];
    const focalDistance = vec4_exports.transformMat4([], [0, 0, -viewport.focalDistance, 1], viewport.projectionMatrix)[3] || 1;
    const uniforms = {
      // Projection mode values
      coordinateSystem,
      projectionMode: viewport.projectionMode,
      coordinateOrigin: shaderCoordinateOrigin,
      commonOrigin: originCommon.slice(0, 3),
      center: projectionCenter,
      // Backward compatibility
      // TODO: remove in v9
      // @ts-expect-error _pseudoMeters is only defined on WebMercator viewport
      pseudoMeters: Boolean(viewport._pseudoMeters),
      // Screen size
      viewportSize,
      devicePixelRatio: devicePixelRatio2,
      focalDistance,
      commonUnitsPerMeter: distanceScales.unitsPerMeter,
      commonUnitsPerWorldUnit: distanceScales.unitsPerMeter,
      commonUnitsPerWorldUnit2: DEFAULT_PIXELS_PER_UNIT2,
      scale: viewport.scale,
      // This is the mercator scale (2 ** zoom)
      wrapLongitude: false,
      viewProjectionMatrix,
      modelMatrix: IDENTITY_MATRIX4,
      // This is for lighting calculations
      cameraPosition: cameraPosCommon
    };
    if (geospatialOrigin) {
      const distanceScalesAtOrigin = viewport.getDistanceScales(geospatialOrigin);
      switch (coordinateSystem) {
        case COORDINATE_SYSTEM.METER_OFFSETS:
          uniforms.commonUnitsPerWorldUnit = distanceScalesAtOrigin.unitsPerMeter;
          uniforms.commonUnitsPerWorldUnit2 = distanceScalesAtOrigin.unitsPerMeter2;
          break;
        case COORDINATE_SYSTEM.LNGLAT:
        case COORDINATE_SYSTEM.LNGLAT_OFFSETS:
          if (!viewport._pseudoMeters) {
            uniforms.commonUnitsPerMeter = distanceScalesAtOrigin.unitsPerMeter;
          }
          uniforms.commonUnitsPerWorldUnit = distanceScalesAtOrigin.unitsPerDegree;
          uniforms.commonUnitsPerWorldUnit2 = distanceScalesAtOrigin.unitsPerDegree2;
          break;
        case COORDINATE_SYSTEM.CARTESIAN:
          uniforms.commonUnitsPerWorldUnit = [1, 1, distanceScalesAtOrigin.unitsPerMeter[2]];
          uniforms.commonUnitsPerWorldUnit2 = [0, 0, distanceScalesAtOrigin.unitsPerMeter2[2]];
          break;
        default:
          break;
      }
    }
    return uniforms;
  }

  // ../core/src/shaderlib/project/project.wgsl.ts
  var COORDINATE_SYSTEM_WGSL_CONSTANTS = Object.keys(COORDINATE_SYSTEM).map((key) => `const COORDINATE_SYSTEM_${key}: i32 = ${COORDINATE_SYSTEM[key]};`).join("");
  var PROJECTION_MODE_WGSL_CONSTANTS = Object.keys(PROJECTION_MODE).map((key) => `const PROJECTION_MODE_${key}: i32 = ${PROJECTION_MODE[key]};`).join("");
  var UNIT_WGSL_CONSTANTS = Object.keys(UNIT).map((key) => `const UNIT_${key.toUpperCase()}: i32 = ${UNIT[key]};`).join("");
  var projectWGSLHeader = (
    /* wgsl */
    `${COORDINATE_SYSTEM_WGSL_CONSTANTS}
${PROJECTION_MODE_WGSL_CONSTANTS}
${UNIT_WGSL_CONSTANTS}

const TILE_SIZE: f32 = 512.0;
const PI: f32 = 3.1415926536;
const WORLD_SCALE: f32 = TILE_SIZE / (PI * 2.0);
const ZERO_64_LOW: vec3<f32> = vec3<f32>(0.0, 0.0, 0.0);
const EARTH_RADIUS: f32 = 6370972.0; // meters
const GLOBE_RADIUS: f32 = 256.0;

// -----------------------------------------------------------------------------
// Uniform block (converted from GLSL uniform block)
// -----------------------------------------------------------------------------
struct ProjectUniforms {
  wrapLongitude: i32,
  coordinateSystem: i32,
  commonUnitsPerMeter: vec3<f32>,
  projectionMode: i32,
  scale: f32,
  commonUnitsPerWorldUnit: vec3<f32>,
  commonUnitsPerWorldUnit2: vec3<f32>,
  center: vec4<f32>,
  modelMatrix: mat4x4<f32>,
  viewProjectionMatrix: mat4x4<f32>,
  viewportSize: vec2<f32>,
  devicePixelRatio: f32,
  focalDistance: f32,
  cameraPosition: vec3<f32>,
  coordinateOrigin: vec3<f32>,
  commonOrigin: vec3<f32>,
  pseudoMeters: i32,
};

@group(0) @binding(0)
var<uniform> project: ProjectUniforms;

// -----------------------------------------------------------------------------
// Geometry data
// (In your GLSL code, "geometry" was assumed to be available globally. In WGSL,
// you might supply this via vertex attributes or a uniform. Here we define a
// uniform struct for demonstration.)
// -----------------------------------------------------------------------------

// Structure to carry additional geometry data used by deck.gl filters.
struct Geometry {
  worldPosition: vec3<f32>,
  worldPositionAlt: vec3<f32>,
  position: vec4<f32>,
  normal: vec3<f32>,
  uv: vec2<f32>,
  pickingColor: vec3<f32>,
};

// @group(0) @binding(1)
var<private> geometry: Geometry;
`
  );
  var projectWGSL = (
    /* wgsl */
    `${projectWGSLHeader}

// -----------------------------------------------------------------------------
// Functions
// -----------------------------------------------------------------------------

// Returns an adjustment factor for commonUnitsPerMeter
fn _project_size_at_latitude(lat: f32) -> f32 {
  let y = clamp(lat, -89.9, 89.9);
  return 1.0 / cos(radians(y));
}

// Overloaded version: scales a value in meters at a given latitude.
fn _project_size_at_latitude_m(meters: f32, lat: f32) -> f32 {
  return meters * project.commonUnitsPerMeter.z * _project_size_at_latitude(lat);
}

// Computes a non-linear scale factor based on geometry.
// (Note: This function relies on "geometry" being provided.)
fn project_size() -> f32 {
  if (project.projectionMode == PROJECTION_MODE_WEB_MERCATOR &&
      project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT &&
      project.pseudoMeters == 0) {
    if (geometry.position.w == 0.0) {
      return _project_size_at_latitude(geometry.worldPosition.y);
    }
    let y: f32 = geometry.position.y / TILE_SIZE * 2.0 - 1.0;
    let y2 = y * y;
    let y4 = y2 * y2;
    let y6 = y4 * y2;
    return 1.0 + 4.9348 * y2 + 4.0587 * y4 + 1.5642 * y6;
  }
  return 1.0;
}

// Overloads to scale offsets (meters to world units)
fn project_size_float(meters: f32) -> f32 {
  return meters * project.commonUnitsPerMeter.z * project_size();
}

fn project_size_vec2(meters: vec2<f32>) -> vec2<f32> {
  return meters * project.commonUnitsPerMeter.xy * project_size();
}

fn project_size_vec3(meters: vec3<f32>) -> vec3<f32> {
  return meters * project.commonUnitsPerMeter * project_size();
}

fn project_size_vec4(meters: vec4<f32>) -> vec4<f32> {
  return vec4<f32>(meters.xyz * project.commonUnitsPerMeter, meters.w);
}

// Returns a rotation matrix aligning the z\u2011axis with the given up vector.
fn project_get_orientation_matrix(up: vec3<f32>) -> mat3x3<f32> {
  let uz = normalize(up);
  let ux = select(
    vec3<f32>(1.0, 0.0, 0.0),
    normalize(vec3<f32>(uz.y, -uz.x, 0.0)),
    abs(uz.z) == 1.0
  );
  let uy = cross(uz, ux);
  return mat3x3<f32>(ux, uy, uz);
}

// Since WGSL does not support "out" parameters, we return a struct.
struct RotationResult {
  needsRotation: bool,
  transform: mat3x3<f32>,
};

fn project_needs_rotation(commonPosition: vec3<f32>) -> RotationResult {
  if (project.projectionMode == PROJECTION_MODE_GLOBE) {
    return RotationResult(true, project_get_orientation_matrix(commonPosition));
  } else {
    return RotationResult(false, mat3x3<f32>());  // identity alternative if needed
  };
}

// Projects a normal vector from the current coordinate system to world space.
fn project_normal(vector: vec3<f32>) -> vec3<f32> {
  let normal_modelspace = project.modelMatrix * vec4<f32>(vector, 0.0);
  var n = normalize(normal_modelspace.xyz * project.commonUnitsPerMeter);
  let rotResult = project_needs_rotation(geometry.position.xyz);
  if (rotResult.needsRotation) {
    n = rotResult.transform * n;
  }
  return n;
}

// Applies a scale offset based on y-offset (dy)
fn project_offset_(offset: vec4<f32>) -> vec4<f32> {
  let dy: f32 = offset.y;
  let commonUnitsPerWorldUnit = project.commonUnitsPerWorldUnit + project.commonUnitsPerWorldUnit2 * dy;
  return vec4<f32>(offset.xyz * commonUnitsPerWorldUnit, offset.w);
}

// Projects lng/lat coordinates to a unit tile [0,1]
fn project_mercator_(lnglat: vec2<f32>) -> vec2<f32> {
  var x = lnglat.x;
  if (project.wrapLongitude != 0) {
    x = ((x + 180.0) % 360.0) - 180.0;
  }
  let y = clamp(lnglat.y, -89.9, 89.9);
  return vec2<f32>(
    radians(x) + PI,
    PI + log(tan(PI * 0.25 + radians(y) * 0.5))
  ) * WORLD_SCALE;
}

// Projects lng/lat/z coordinates for a globe projection.
fn project_globe_(lnglatz: vec3<f32>) -> vec3<f32> {
  let lambda = radians(lnglatz.x);
  let phi = radians(lnglatz.y);
  let cosPhi = cos(phi);
  let D = (lnglatz.z / EARTH_RADIUS + 1.0) * GLOBE_RADIUS;
  return vec3<f32>(
    sin(lambda) * cosPhi,
    -cos(lambda) * cosPhi,
    sin(phi)
  ) * D;
}

// Projects positions (with an optional 64-bit low part) from the input
// coordinate system to the common space.
fn project_position_vec4_f64(position: vec4<f32>, position64Low: vec3<f32>) -> vec4<f32> {
  var position_world = project.modelMatrix * position;

  // Work around for a Mac+NVIDIA bug:
  if (project.projectionMode == PROJECTION_MODE_WEB_MERCATOR) {
    if (project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT) {
      return vec4<f32>(
        project_mercator_(position_world.xy),
        _project_size_at_latitude_m(position_world.z, position_world.y),
        position_world.w
      );
    }
    if (project.coordinateSystem == COORDINATE_SYSTEM_CARTESIAN) {
      position_world = vec4f(position_world.xyz + project.coordinateOrigin, position_world.w);
    }
  }
  if (project.projectionMode == PROJECTION_MODE_GLOBE) {
    if (project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT) {
      return vec4<f32>(
        project_globe_(position_world.xyz),
        position_world.w
      );
    }
  }
  if (project.projectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET) {
    if (project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT) {
      if (abs(position_world.y - project.coordinateOrigin.y) > 0.25) {
        return vec4<f32>(
          project_mercator_(position_world.xy) - project.commonOrigin.xy,
          project_size_float(position_world.z),
          position_world.w
        );
      }
    }
  }
  if (project.projectionMode == PROJECTION_MODE_IDENTITY ||
      (project.projectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET &&
       (project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT ||
        project.coordinateSystem == COORDINATE_SYSTEM_CARTESIAN))) {
    position_world = vec4f(position_world.xyz - project.coordinateOrigin, position_world.w);
  }

  return project_offset_(position_world) +
         project_offset_(project.modelMatrix * vec4<f32>(position64Low, 0.0));
}

// Overloaded versions for different input types.
fn project_position_vec4_f32(position: vec4<f32>) -> vec4<f32> {
  return project_position_vec4_f64(position, ZERO_64_LOW);
}

fn project_position_vec3_f64(position: vec3<f32>, position64Low: vec3<f32>) -> vec3<f32> {
  let projected_position = project_position_vec4_f64(vec4<f32>(position, 1.0), position64Low);
  return projected_position.xyz;
}

fn project_position_vec3_f32(position: vec3<f32>) -> vec3<f32> {
  let projected_position = project_position_vec4_f64(vec4<f32>(position, 1.0), ZERO_64_LOW);
  return projected_position.xyz;
}

fn project_position_vec2_f32(position: vec2<f32>) -> vec2<f32> {
  let projected_position = project_position_vec4_f64(vec4<f32>(position, 0.0, 1.0), ZERO_64_LOW);
  return projected_position.xy;
}

// Transforms a common space position to clip space.
fn project_common_position_to_clipspace_with_projection(position: vec4<f32>, viewProjectionMatrix: mat4x4<f32>, center: vec4<f32>) -> vec4<f32> {
  return viewProjectionMatrix * position + center;
}

// Uses the project viewProjectionMatrix and center.
fn project_common_position_to_clipspace(position: vec4<f32>) -> vec4<f32> {
  return project_common_position_to_clipspace_with_projection(position, project.viewProjectionMatrix, project.center);
}

// Returns a clip space offset corresponding to a given number of screen pixels.
fn project_pixel_size_to_clipspace(pixels: vec2<f32>) -> vec2<f32> {
  let offset = pixels / project.viewportSize * project.devicePixelRatio * 2.0;
  return offset * project.focalDistance;
}

fn project_meter_size_to_pixel(meters: f32) -> f32 {
  return project_size_float(meters) * project.scale;
}

fn project_unit_size_to_pixel(size: f32, unit: i32) -> f32 {
  if (unit == UNIT_METERS) {
    return project_meter_size_to_pixel(size);
  } else if (unit == UNIT_COMMON) {
    return size * project.scale;
  }
  // UNIT_PIXELS: no scaling applied.
  return size;
}

fn project_pixel_size_float(pixels: f32) -> f32 {
  return pixels / project.scale;
}

fn project_pixel_size_vec2(pixels: vec2<f32>) -> vec2<f32> {
  return pixels / project.scale;
}
`
  );

  // ../core/src/shaderlib/project/project.glsl.ts
  var COORDINATE_SYSTEM_GLSL_CONSTANTS = Object.keys(COORDINATE_SYSTEM).map((key) => `const int COORDINATE_SYSTEM_${key} = ${COORDINATE_SYSTEM[key]};`).join("");
  var PROJECTION_MODE_GLSL_CONSTANTS = Object.keys(PROJECTION_MODE).map((key) => `const int PROJECTION_MODE_${key} = ${PROJECTION_MODE[key]};`).join("");
  var UNIT_GLSL_CONSTANTS = Object.keys(UNIT).map((key) => `const int UNIT_${key.toUpperCase()} = ${UNIT[key]};`).join("");
  var projectGLSL = (
    /* glsl */
    `${COORDINATE_SYSTEM_GLSL_CONSTANTS}
${PROJECTION_MODE_GLSL_CONSTANTS}
${UNIT_GLSL_CONSTANTS}

uniform projectUniforms {
  bool wrapLongitude;
  int coordinateSystem;
  vec3 commonUnitsPerMeter;
  int projectionMode;
  float scale;
  vec3 commonUnitsPerWorldUnit;
  vec3 commonUnitsPerWorldUnit2;
  vec4 center;
  mat4 modelMatrix;
  mat4 viewProjectionMatrix;
  vec2 viewportSize;
  float devicePixelRatio;
  float focalDistance;
  vec3 cameraPosition;
  vec3 coordinateOrigin;
  vec3 commonOrigin;
  bool pseudoMeters;
} project;


const float TILE_SIZE = 512.0;
const float PI = 3.1415926536;
const float WORLD_SCALE = TILE_SIZE / (PI * 2.0);
const vec3 ZERO_64_LOW = vec3(0.0);
const float EARTH_RADIUS = 6370972.0; // meters
const float GLOBE_RADIUS = 256.0;

// returns an adjustment factor for uCommonUnitsPerMeter
float project_size_at_latitude(float lat) {
  float y = clamp(lat, -89.9, 89.9);
  return 1.0 / cos(radians(y));
}

float project_size() {
  if (project.projectionMode == PROJECTION_MODE_WEB_MERCATOR &&
    project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT &&
    project.pseudoMeters == false) {

    // uCommonUnitsPerMeter in low-zoom Web Mercator is non-linear
    // Adjust by 1 / cos(latitude)
    // If geometry.position (vertex in common space) is populated, use it
    // Otherwise use geometry.worldPosition (anchor in world space)
    
    if (geometry.position.w == 0.0) {
      return project_size_at_latitude(geometry.worldPosition.y);
    }

    // latitude from common y: 2.0 * (atan(exp(y / TILE_SIZE * 2.0 * PI - PI)) - PI / 4.0)
    // Taylor series of 1 / cos(latitude)
    // Max error < 0.003
  
    float y = geometry.position.y / TILE_SIZE * 2.0 - 1.0;
    float y2 = y * y;
    float y4 = y2 * y2;
    float y6 = y4 * y2;
    return 1.0 + 4.9348 * y2 + 4.0587 * y4 + 1.5642 * y6;
  }
  return 1.0;
}

float project_size_at_latitude(float meters, float lat) {
  return meters * project.commonUnitsPerMeter.z * project_size_at_latitude(lat);
}

//
// Scaling offsets - scales meters to "world distance"
// Note the scalar version of project_size is for scaling the z component only
//
float project_size(float meters) {
  // For scatter relevant
  return meters * project.commonUnitsPerMeter.z * project_size();
}

vec2 project_size(vec2 meters) {
  return meters * project.commonUnitsPerMeter.xy * project_size();
}

vec3 project_size(vec3 meters) {
  return meters * project.commonUnitsPerMeter * project_size();
}

vec4 project_size(vec4 meters) {
  return vec4(meters.xyz * project.commonUnitsPerMeter, meters.w);
}

// Get rotation matrix that aligns the z axis with the given up vector
// Find 3 unit vectors ux, uy, uz that are perpendicular to each other and uz == up
mat3 project_get_orientation_matrix(vec3 up) {
  vec3 uz = normalize(up);
  // Tangent on XY plane
  vec3 ux = abs(uz.z) == 1.0 ? vec3(1.0, 0.0, 0.0) : normalize(vec3(uz.y, -uz.x, 0));
  vec3 uy = cross(uz, ux);
  return mat3(ux, uy, uz);
}

bool project_needs_rotation(vec3 commonPosition, out mat3 transform) {
  if (project.projectionMode == PROJECTION_MODE_GLOBE) {
    transform = project_get_orientation_matrix(commonPosition);
    return true;
  }
  return false;
}

//
// Projecting normal - transform deltas from current coordinate system to
// normals in the worldspace
//
vec3 project_normal(vec3 vector) {
  // Apply model matrix
  vec4 normal_modelspace = project.modelMatrix * vec4(vector, 0.0);
  vec3 n = normalize(normal_modelspace.xyz * project.commonUnitsPerMeter);
  mat3 rotation;
  if (project_needs_rotation(geometry.position.xyz, rotation)) {
    n = rotation * n;
  }
  return n;
}

vec4 project_offset_(vec4 offset) {
  float dy = offset.y;
  vec3 commonUnitsPerWorldUnit = project.commonUnitsPerWorldUnit + project.commonUnitsPerWorldUnit2 * dy;
  return vec4(offset.xyz * commonUnitsPerWorldUnit, offset.w);
}

//
// Projecting positions - non-linear projection: lnglats => unit tile [0-1, 0-1]
//
vec2 project_mercator_(vec2 lnglat) {
  float x = lnglat.x;
  if (project.wrapLongitude) {
    x = mod(x + 180., 360.0) - 180.;
  }
  float y = clamp(lnglat.y, -89.9, 89.9);
  return vec2(
    radians(x) + PI,
    PI + log(tan_fp32(PI * 0.25 + radians(y) * 0.5))
  ) * WORLD_SCALE;
}

vec3 project_globe_(vec3 lnglatz) {
  float lambda = radians(lnglatz.x);
  float phi = radians(lnglatz.y);
  float cosPhi = cos(phi);
  float D = (lnglatz.z / EARTH_RADIUS + 1.0) * GLOBE_RADIUS;

  return vec3(
    sin(lambda) * cosPhi,
    -cos(lambda) * cosPhi,
    sin(phi)
  ) * D;
}

//
// Projects positions (defined by project.coordinateSystem) to common space (defined by project.projectionMode)
//
vec4 project_position(vec4 position, vec3 position64Low) {
  vec4 position_world = project.modelMatrix * position;

  // Work around for a Mac+NVIDIA bug https://github.com/visgl/deck.gl/issues/4145
  if (project.projectionMode == PROJECTION_MODE_WEB_MERCATOR) {
    if (project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT) {
      return vec4(
        project_mercator_(position_world.xy),
        project_size_at_latitude(position_world.z, position_world.y),
        position_world.w
      );
    }
    if (project.coordinateSystem == COORDINATE_SYSTEM_CARTESIAN) {
      position_world.xyz += project.coordinateOrigin;
    }
  }
  if (project.projectionMode == PROJECTION_MODE_GLOBE) {
    if (project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT) {
      return vec4(
        project_globe_(position_world.xyz),
        position_world.w
      );
    }
  }
  if (project.projectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET) {
    if (project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT) {
      if (abs(position_world.y - project.coordinateOrigin.y) > 0.25) {
        // Too far from the projection center for offset mode to be accurate
        // Only use high parts
        return vec4(
          project_mercator_(position_world.xy) - project.commonOrigin.xy,
          project_size(position_world.z),
          position_world.w
        );
      }
    }
  }
  if (project.projectionMode == PROJECTION_MODE_IDENTITY ||
    (project.projectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET &&
    (project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT ||
     project.coordinateSystem == COORDINATE_SYSTEM_CARTESIAN))) {
    // Subtract high part of 64 bit value. Convert remainder to float32, preserving precision.
    position_world.xyz -= project.coordinateOrigin;
  }

  // Translation is already added to the high parts
  return project_offset_(position_world) + project_offset_(project.modelMatrix * vec4(position64Low, 0.0));
}

vec4 project_position(vec4 position) {
  return project_position(position, ZERO_64_LOW);
}

vec3 project_position(vec3 position, vec3 position64Low) {
  vec4 projected_position = project_position(vec4(position, 1.0), position64Low);
  return projected_position.xyz;
}

vec3 project_position(vec3 position) {
  vec4 projected_position = project_position(vec4(position, 1.0), ZERO_64_LOW);
  return projected_position.xyz;
}

vec2 project_position(vec2 position) {
  vec4 projected_position = project_position(vec4(position, 0.0, 1.0), ZERO_64_LOW);
  return projected_position.xy;
}

vec4 project_common_position_to_clipspace(vec4 position, mat4 viewProjectionMatrix, vec4 center) {
  return viewProjectionMatrix * position + center;
}

//
// Projects from common space coordinates to clip space.
// Uses project.viewProjectionMatrix
//
vec4 project_common_position_to_clipspace(vec4 position) {
  return project_common_position_to_clipspace(position, project.viewProjectionMatrix, project.center);
}

// Returns a clip space offset that corresponds to a given number of screen pixels
vec2 project_pixel_size_to_clipspace(vec2 pixels) {
  vec2 offset = pixels / project.viewportSize * project.devicePixelRatio * 2.0;
  return offset * project.focalDistance;
}

float project_size_to_pixel(float meters) {
  return project_size(meters) * project.scale;
}
float project_size_to_pixel(float size, int unit) {
  if (unit == UNIT_METERS) return project_size_to_pixel(size);
  if (unit == UNIT_COMMON) return size * project.scale;
  // UNIT_PIXELS
  return size;
}
float project_pixel_size(float pixels) {
  return pixels / project.scale;
}
vec2 project_pixel_size(vec2 pixels) {
  return pixels / project.scale;
}
`
  );

  // ../core/src/shaderlib/project/project.ts
  var INITIAL_MODULE_OPTIONS = {};
  function getUniforms3(opts = INITIAL_MODULE_OPTIONS) {
    if ("viewport" in opts) {
      return getUniformsFromViewport(opts);
    }
    return {};
  }
  var project_default = {
    name: "project",
    dependencies: [fp32, geometry_default],
    source: projectWGSL,
    vs: projectGLSL,
    getUniforms: getUniforms3,
    uniformTypes: {
      wrapLongitude: "f32",
      coordinateSystem: "i32",
      commonUnitsPerMeter: "vec3<f32>",
      projectionMode: "i32",
      scale: "f32",
      commonUnitsPerWorldUnit: "vec3<f32>",
      commonUnitsPerWorldUnit2: "vec3<f32>",
      center: "vec4<f32>",
      modelMatrix: "mat4x4<f32>",
      viewProjectionMatrix: "mat4x4<f32>",
      viewportSize: "vec2<f32>",
      devicePixelRatio: "f32",
      focalDistance: "f32",
      cameraPosition: "vec3<f32>",
      coordinateOrigin: "vec3<f32>",
      commonOrigin: "vec3<f32>",
      pseudoMeters: "f32"
    }
    // @ts-ignore TODO v9.1
  };

  // ../core/src/shaderlib/project32/project32.ts
  var source3 = (
    /* wgsl */
    `// Define a structure to hold both the clip-space position and the common position.
struct ProjectResult {
  clipPosition: vec4<f32>,
  commonPosition: vec4<f32>,
};

// This function mimics the GLSL version with the 'out' parameter by returning both values.
fn project_position_to_clipspace_and_commonspace(
    position: vec3<f32>,
    position64Low: vec3<f32>,
    offset: vec3<f32>
) -> ProjectResult {
  // Compute the projected position.
  let projectedPosition: vec3<f32> = project_position_vec3_f64(position, position64Low);

  // Start with the provided offset.
  var finalOffset: vec3<f32> = offset;

  // Get whether a rotation is needed and the rotation matrix.
  let rotationResult = project_needs_rotation(projectedPosition);

  // If rotation is needed, update the offset.
  if (rotationResult.needsRotation) {
    finalOffset = rotationResult.transform * offset;
  }

  // Compute the common position.
  let commonPosition: vec4<f32> = vec4<f32>(projectedPosition + finalOffset, 1.0);

  // Convert to clip-space.
  let clipPosition: vec4<f32> = project_common_position_to_clipspace(commonPosition);

  return ProjectResult(clipPosition, commonPosition);
}

// A convenience overload that returns only the clip-space position.
fn project_position_to_clipspace(
    position: vec3<f32>,
    position64Low: vec3<f32>,
    offset: vec3<f32>
) -> vec4<f32> {
  return project_position_to_clipspace_and_commonspace(position, position64Low, offset).clipPosition;
}
`
  );
  var vs4 = (
    /* glsl */
    `vec4 project_position_to_clipspace(
  vec3 position, vec3 position64Low, vec3 offset, out vec4 commonPosition
) {
  vec3 projectedPosition = project_position(position, position64Low);
  mat3 rotation;
  if (project_needs_rotation(projectedPosition, rotation)) {
    // offset is specified as ENU
    // when in globe projection, rotate offset so that the ground alighs with the surface of the globe
    offset = rotation * offset;
  }
  commonPosition = vec4(projectedPosition + offset, 1.0);
  return project_common_position_to_clipspace(commonPosition);
}

vec4 project_position_to_clipspace(
  vec3 position, vec3 position64Low, vec3 offset
) {
  vec4 commonPosition;
  return project_position_to_clipspace(position, position64Low, offset, commonPosition);
}
`
  );
  var project32_default = {
    name: "project32",
    dependencies: [project_default],
    source: source3,
    vs: vs4
  };

  // ../../node_modules/@math.gl/web-mercator/dist/math-utils.js
  function createMat4() {
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  }
  function transformVector(matrix, vector) {
    const result = vec4_exports.transformMat4([], vector, matrix);
    vec4_exports.scale(result, result, 1 / result[3]);
    return result;
  }
  function mod(value, divisor) {
    const modulus = value % divisor;
    return modulus < 0 ? divisor + modulus : modulus;
  }
  function lerp6(start, end, step) {
    return step * end + (1 - step) * start;
  }
  function clamp2(x4, min7, max7) {
    return x4 < min7 ? min7 : x4 > max7 ? max7 : x4;
  }
  function ieLog2(x4) {
    return Math.log(x4) * Math.LOG2E;
  }
  var log22 = Math.log2 || ieLog2;

  // ../../node_modules/@math.gl/web-mercator/dist/assert.js
  function assert7(condition, message2) {
    if (!condition) {
      throw new Error(message2 || "@math.gl/web-mercator: assertion failed.");
    }
  }

  // ../../node_modules/@math.gl/web-mercator/dist/web-mercator-utils.js
  var PI = Math.PI;
  var PI_4 = PI / 4;
  var DEGREES_TO_RADIANS2 = PI / 180;
  var RADIANS_TO_DEGREES2 = 180 / PI;
  var TILE_SIZE = 512;
  var EARTH_CIRCUMFERENCE = 4003e4;
  var MAX_LATITUDE = 85.051129;
  var DEFAULT_ALTITUDE = 1.5;
  function zoomToScale(zoom) {
    return Math.pow(2, zoom);
  }
  function scaleToZoom(scale24) {
    return log22(scale24);
  }
  function lngLatToWorld(lngLat) {
    const [lng, lat] = lngLat;
    assert7(Number.isFinite(lng));
    assert7(Number.isFinite(lat) && lat >= -90 && lat <= 90, "invalid latitude");
    const lambda2 = lng * DEGREES_TO_RADIANS2;
    const phi2 = lat * DEGREES_TO_RADIANS2;
    const x4 = TILE_SIZE * (lambda2 + PI) / (2 * PI);
    const y5 = TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5))) / (2 * PI);
    return [x4, y5];
  }
  function worldToLngLat(xy) {
    const [x4, y5] = xy;
    const lambda2 = x4 / TILE_SIZE * (2 * PI) - PI;
    const phi2 = 2 * (Math.atan(Math.exp(y5 / TILE_SIZE * (2 * PI) - PI)) - PI_4);
    return [lambda2 * RADIANS_TO_DEGREES2, phi2 * RADIANS_TO_DEGREES2];
  }
  function getMeterZoom(options) {
    const { latitude } = options;
    assert7(Number.isFinite(latitude));
    const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS2);
    return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;
  }
  function unitsPerMeter(latitude) {
    const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS2);
    return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;
  }
  function getDistanceScales(options) {
    const { latitude, longitude, highPrecision = false } = options;
    assert7(Number.isFinite(latitude) && Number.isFinite(longitude));
    const worldSize = TILE_SIZE;
    const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS2);
    const unitsPerDegreeX = worldSize / 360;
    const unitsPerDegreeY = unitsPerDegreeX / latCosine;
    const altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;
    const result = {
      unitsPerMeter: [altUnitsPerMeter, altUnitsPerMeter, altUnitsPerMeter],
      metersPerUnit: [1 / altUnitsPerMeter, 1 / altUnitsPerMeter, 1 / altUnitsPerMeter],
      unitsPerDegree: [unitsPerDegreeX, unitsPerDegreeY, altUnitsPerMeter],
      degreesPerUnit: [1 / unitsPerDegreeX, 1 / unitsPerDegreeY, 1 / altUnitsPerMeter]
    };
    if (highPrecision) {
      const latCosine2 = DEGREES_TO_RADIANS2 * Math.tan(latitude * DEGREES_TO_RADIANS2) / latCosine;
      const unitsPerDegreeY2 = unitsPerDegreeX * latCosine2 / 2;
      const altUnitsPerDegree2 = worldSize / EARTH_CIRCUMFERENCE * latCosine2;
      const altUnitsPerMeter2 = altUnitsPerDegree2 / unitsPerDegreeY * altUnitsPerMeter;
      result.unitsPerDegree2 = [0, unitsPerDegreeY2, altUnitsPerDegree2];
      result.unitsPerMeter2 = [altUnitsPerMeter2, 0, altUnitsPerMeter2];
    }
    return result;
  }
  function addMetersToLngLat(lngLatZ, xyz) {
    const [longitude, latitude, z0] = lngLatZ;
    const [x4, y5, z4] = xyz;
    const { unitsPerMeter: unitsPerMeter2, unitsPerMeter2: unitsPerMeter22 } = getDistanceScales({
      longitude,
      latitude,
      highPrecision: true
    });
    const worldspace = lngLatToWorld(lngLatZ);
    worldspace[0] += x4 * (unitsPerMeter2[0] + unitsPerMeter22[0] * y5);
    worldspace[1] += y5 * (unitsPerMeter2[1] + unitsPerMeter22[1] * y5);
    const newLngLat = worldToLngLat(worldspace);
    const newZ = (z0 || 0) + (z4 || 0);
    return Number.isFinite(z0) || Number.isFinite(z4) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;
  }
  function getViewMatrix(options) {
    const {
      // Viewport props
      height,
      pitch,
      bearing,
      altitude,
      // Pre-calculated parameters
      scale: scale24,
      center: center2
    } = options;
    const vm = createMat4();
    mat4_exports.translate(vm, vm, [0, 0, -altitude]);
    mat4_exports.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS2);
    mat4_exports.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS2);
    const relativeScale = scale24 / height;
    mat4_exports.scale(vm, vm, [relativeScale, relativeScale, relativeScale]);
    if (center2) {
      mat4_exports.translate(vm, vm, vec3_exports.negate([], center2));
    }
    return vm;
  }
  function getProjectionParameters(options) {
    const { width, height, altitude, pitch = 0, offset, center: center2, scale: scale24, nearZMultiplier = 1, farZMultiplier = 1 } = options;
    let { fovy = altitudeToFovy(DEFAULT_ALTITUDE) } = options;
    if (altitude !== void 0) {
      fovy = altitudeToFovy(altitude);
    }
    const fovRadians = fovy * DEGREES_TO_RADIANS2;
    const pitchRadians = pitch * DEGREES_TO_RADIANS2;
    const focalDistance = fovyToAltitude(fovy);
    let cameraToSeaLevelDistance = focalDistance;
    if (center2) {
      cameraToSeaLevelDistance += center2[2] * scale24 / Math.cos(pitchRadians) / height;
    }
    const fovAboveCenter = fovRadians * (0.5 + (offset ? offset[1] : 0) / height);
    const topHalfSurfaceDistance = Math.sin(fovAboveCenter) * cameraToSeaLevelDistance / Math.sin(clamp2(Math.PI / 2 - pitchRadians - fovAboveCenter, 0.01, Math.PI - 0.01));
    const furthestDistance = Math.sin(pitchRadians) * topHalfSurfaceDistance + cameraToSeaLevelDistance;
    const horizonDistance = cameraToSeaLevelDistance * 10;
    const farZ = Math.min(furthestDistance * farZMultiplier, horizonDistance);
    return {
      fov: fovRadians,
      aspect: width / height,
      focalDistance,
      near: nearZMultiplier,
      far: farZ
    };
  }
  function altitudeToFovy(altitude) {
    return 2 * Math.atan(0.5 / altitude) * RADIANS_TO_DEGREES2;
  }
  function fovyToAltitude(fovy) {
    return 0.5 / Math.tan(0.5 * fovy * DEGREES_TO_RADIANS2);
  }
  function worldToPixels(xyz, pixelProjectionMatrix) {
    const [x4, y5, z4 = 0] = xyz;
    assert7(Number.isFinite(x4) && Number.isFinite(y5) && Number.isFinite(z4));
    return transformVector(pixelProjectionMatrix, [x4, y5, z4, 1]);
  }
  function pixelsToWorld(xyz, pixelUnprojectionMatrix, targetZ = 0) {
    const [x4, y5, z4] = xyz;
    assert7(Number.isFinite(x4) && Number.isFinite(y5), "invalid pixel coordinate");
    if (Number.isFinite(z4)) {
      const coord = transformVector(pixelUnprojectionMatrix, [x4, y5, z4, 1]);
      return coord;
    }
    const coord0 = transformVector(pixelUnprojectionMatrix, [x4, y5, 0, 1]);
    const coord1 = transformVector(pixelUnprojectionMatrix, [x4, y5, 1, 1]);
    const z0 = coord0[2];
    const z1 = coord1[2];
    const t5 = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);
    return vec2_exports.lerp([], coord0, coord1, t5);
  }

  // ../../node_modules/@math.gl/web-mercator/dist/fit-bounds.js
  function fitBounds(options) {
    const {
      width,
      height,
      bounds,
      minExtent = 0,
      // 0.01 would be about 1000 meters (degree is ~110KM)
      maxZoom = 24,
      // ~x4,000,000 => About 10 meter extents
      offset = [0, 0]
    } = options;
    const [[west, south], [east, north]] = bounds;
    const padding = getPaddingObject(options.padding);
    const nw = lngLatToWorld([west, clamp2(north, -MAX_LATITUDE, MAX_LATITUDE)]);
    const se2 = lngLatToWorld([east, clamp2(south, -MAX_LATITUDE, MAX_LATITUDE)]);
    const size = [
      Math.max(Math.abs(se2[0] - nw[0]), minExtent),
      Math.max(Math.abs(se2[1] - nw[1]), minExtent)
    ];
    const targetSize = [
      width - padding.left - padding.right - Math.abs(offset[0]) * 2,
      height - padding.top - padding.bottom - Math.abs(offset[1]) * 2
    ];
    assert7(targetSize[0] > 0 && targetSize[1] > 0);
    const scaleX2 = targetSize[0] / size[0];
    const scaleY2 = targetSize[1] / size[1];
    const offsetX = (padding.right - padding.left) / 2 / scaleX2;
    const offsetY = (padding.top - padding.bottom) / 2 / scaleY2;
    const center2 = [(se2[0] + nw[0]) / 2 + offsetX, (se2[1] + nw[1]) / 2 + offsetY];
    const centerLngLat = worldToLngLat(center2);
    const zoom = Math.min(maxZoom, log22(Math.abs(Math.min(scaleX2, scaleY2))));
    assert7(Number.isFinite(zoom));
    return {
      longitude: centerLngLat[0],
      latitude: centerLngLat[1],
      zoom
    };
  }
  function getPaddingObject(padding = 0) {
    if (typeof padding === "number") {
      return {
        top: padding,
        bottom: padding,
        left: padding,
        right: padding
      };
    }
    assert7(Number.isFinite(padding.top) && Number.isFinite(padding.bottom) && Number.isFinite(padding.left) && Number.isFinite(padding.right));
    return padding;
  }

  // ../../node_modules/@math.gl/web-mercator/dist/get-bounds.js
  var DEGREES_TO_RADIANS3 = Math.PI / 180;
  function getBounds(viewport, z4 = 0) {
    const { width, height, unproject } = viewport;
    const unprojectOps = { targetZ: z4 };
    const bottomLeft = unproject([0, height], unprojectOps);
    const bottomRight = unproject([width, height], unprojectOps);
    let topLeft;
    let topRight;
    const halfFov = viewport.fovy ? 0.5 * viewport.fovy * DEGREES_TO_RADIANS3 : Math.atan(0.5 / viewport.altitude);
    const angleToGround = (90 - viewport.pitch) * DEGREES_TO_RADIANS3;
    if (halfFov > angleToGround - 0.01) {
      topLeft = unprojectOnFarPlane(viewport, 0, z4);
      topRight = unprojectOnFarPlane(viewport, width, z4);
    } else {
      topLeft = unproject([0, 0], unprojectOps);
      topRight = unproject([width, 0], unprojectOps);
    }
    return [bottomLeft, bottomRight, topRight, topLeft];
  }
  function unprojectOnFarPlane(viewport, x4, targetZ) {
    const { pixelUnprojectionMatrix } = viewport;
    const coord0 = transformVector(pixelUnprojectionMatrix, [x4, 0, 1, 1]);
    const coord1 = transformVector(pixelUnprojectionMatrix, [x4, viewport.height, 1, 1]);
    const z4 = targetZ * viewport.distanceScales.unitsPerMeter[2];
    const t5 = (z4 - coord0[2]) / (coord1[2] - coord0[2]);
    const coord = vec2_exports.lerp([], coord0, coord1, t5);
    const result = worldToLngLat(coord);
    result.push(targetZ);
    return result;
  }

  // ../../node_modules/@math.gl/web-mercator/dist/normalize-viewport-props.js
  var TILE_SIZE2 = 512;
  function normalizeViewportProps(props) {
    const { width, height, pitch = 0 } = props;
    let { longitude, latitude, zoom, bearing = 0 } = props;
    if (longitude < -180 || longitude > 180) {
      longitude = mod(longitude + 180, 360) - 180;
    }
    if (bearing < -180 || bearing > 180) {
      bearing = mod(bearing + 180, 360) - 180;
    }
    const minZoom = log22(height / TILE_SIZE2);
    if (zoom <= minZoom) {
      zoom = minZoom;
      latitude = 0;
    } else {
      const halfHeightPixels = height / 2 / Math.pow(2, zoom);
      const minLatitude = worldToLngLat([0, halfHeightPixels])[1];
      if (latitude < minLatitude) {
        latitude = minLatitude;
      } else {
        const maxLatitude = worldToLngLat([0, TILE_SIZE2 - halfHeightPixels])[1];
        if (latitude > maxLatitude) {
          latitude = maxLatitude;
        }
      }
    }
    return { width, height, longitude, latitude, zoom, pitch, bearing };
  }

  // ../../node_modules/@math.gl/web-mercator/dist/fly-to-viewport.js
  var EPSILON21 = 0.01;
  var VIEWPORT_TRANSITION_PROPS = ["longitude", "latitude", "zoom"];
  var DEFAULT_OPTS = {
    curve: 1.414,
    speed: 1.2
    // screenSpeed and maxDuration are used only if specified
  };
  function flyToViewport(startProps, endProps, t5, options) {
    const { startZoom, startCenterXY, uDelta, w0, u1, S: S3, rho, rho2, r0 } = getFlyToTransitionParams(startProps, endProps, options);
    if (u1 < EPSILON21) {
      const viewport = {};
      for (const key of VIEWPORT_TRANSITION_PROPS) {
        const startValue = startProps[key];
        const endValue = endProps[key];
        viewport[key] = lerp6(startValue, endValue, t5);
      }
      return viewport;
    }
    const s5 = t5 * S3;
    const w5 = Math.cosh(r0) / Math.cosh(r0 + rho * s5);
    const u6 = w0 * ((Math.cosh(r0) * Math.tanh(r0 + rho * s5) - Math.sinh(r0)) / rho2) / u1;
    const scaleIncrement = 1 / w5;
    const newZoom = startZoom + scaleToZoom(scaleIncrement);
    const newCenterWorld = vec2_exports.scale([], uDelta, u6);
    vec2_exports.add(newCenterWorld, newCenterWorld, startCenterXY);
    const newCenter = worldToLngLat(newCenterWorld);
    return {
      longitude: newCenter[0],
      latitude: newCenter[1],
      zoom: newZoom
    };
  }
  function getFlyToDuration(startProps, endProps, options) {
    const opts = { ...DEFAULT_OPTS, ...options };
    const { screenSpeed, speed, maxDuration } = opts;
    const { S: S3, rho } = getFlyToTransitionParams(startProps, endProps, opts);
    const length17 = 1e3 * S3;
    let duration;
    if (Number.isFinite(screenSpeed)) {
      duration = length17 / (screenSpeed / rho);
    } else {
      duration = length17 / speed;
    }
    return Number.isFinite(maxDuration) && duration > maxDuration ? 0 : duration;
  }
  function getFlyToTransitionParams(startProps, endProps, opts) {
    opts = Object.assign({}, DEFAULT_OPTS, opts);
    const rho = opts.curve;
    const startZoom = startProps.zoom;
    const startCenter = [startProps.longitude, startProps.latitude];
    const startScale = zoomToScale(startZoom);
    const endZoom = endProps.zoom;
    const endCenter = [endProps.longitude, endProps.latitude];
    const scale24 = zoomToScale(endZoom - startZoom);
    const startCenterXY = lngLatToWorld(startCenter);
    const endCenterXY = lngLatToWorld(endCenter);
    const uDelta = vec2_exports.sub([], endCenterXY, startCenterXY);
    const w0 = Math.max(startProps.width, startProps.height);
    const w1 = w0 / scale24;
    const u1 = vec2_exports.length(uDelta) * startScale;
    const _u1 = Math.max(u1, EPSILON21);
    const rho2 = rho * rho;
    const b0 = (w1 * w1 - w0 * w0 + rho2 * rho2 * _u1 * _u1) / (2 * w0 * rho2 * _u1);
    const b1 = (w1 * w1 - w0 * w0 - rho2 * rho2 * _u1 * _u1) / (2 * w1 * rho2 * _u1);
    const r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0);
    const r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
    const S3 = (r1 - r0) / rho;
    return { startZoom, startCenterXY, uDelta, w0, u1, S: S3, rho, rho2, r0, r1 };
  }

  // ../core/src/shaderlib/shadow/shadow.ts
  var uniformBlock3 = (
    /* glsl */
    `
uniform shadowUniforms {
  bool drawShadowMap;
  bool useShadowMap;
  vec4 color;
  highp int lightId;
  float lightCount;
  mat4 viewProjectionMatrix0;
  mat4 viewProjectionMatrix1;
  vec4 projectCenter0;
  vec4 projectCenter1;
} shadow;
`
  );
  var vertex = (
    /* glsl */
    `
const int max_lights = 2;

out vec3 shadow_vPosition[max_lights];

vec4 shadow_setVertexPosition(vec4 position_commonspace) {
  mat4 viewProjectionMatrices[max_lights];
  viewProjectionMatrices[0] = shadow.viewProjectionMatrix0;
  viewProjectionMatrices[1] = shadow.viewProjectionMatrix1;
  vec4 projectCenters[max_lights];
  projectCenters[0] = shadow.projectCenter0;
  projectCenters[1] = shadow.projectCenter1;

  if (shadow.drawShadowMap) {
    return project_common_position_to_clipspace(position_commonspace, viewProjectionMatrices[shadow.lightId], projectCenters[shadow.lightId]);
  }
  if (shadow.useShadowMap) {
    for (int i = 0; i < max_lights; i++) {
      if(i < int(shadow.lightCount)) {
        vec4 shadowMap_position = project_common_position_to_clipspace(position_commonspace, viewProjectionMatrices[i], projectCenters[i]);
        shadow_vPosition[i] = (shadowMap_position.xyz / shadowMap_position.w + 1.0) / 2.0;
      }
    }
  }
  return gl_Position;
}
`
  );
  var vs5 = `
${uniformBlock3}
${vertex}
`;
  var fragment = (
    /* glsl */
    `
const int max_lights = 2;
uniform sampler2D shadow_uShadowMap0;
uniform sampler2D shadow_uShadowMap1;

in vec3 shadow_vPosition[max_lights];

const vec4 bitPackShift = vec4(1.0, 255.0, 65025.0, 16581375.0);
const vec4 bitUnpackShift = 1.0 / bitPackShift;
const vec4 bitMask = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0,  0.0);

float shadow_getShadowWeight(vec3 position, sampler2D shadowMap) {
  vec4 rgbaDepth = texture(shadowMap, position.xy);

  float z = dot(rgbaDepth, bitUnpackShift);
  return smoothstep(0.001, 0.01, position.z - z);
}

vec4 shadow_filterShadowColor(vec4 color) {
  if (shadow.drawShadowMap) {
    vec4 rgbaDepth = fract(gl_FragCoord.z * bitPackShift);
    rgbaDepth -= rgbaDepth.gbaa * bitMask;
    return rgbaDepth;
  }
  if (shadow.useShadowMap) {
    float shadowAlpha = 0.0;
    shadowAlpha += shadow_getShadowWeight(shadow_vPosition[0], shadow_uShadowMap0);
    if(shadow.lightCount > 1.0) {
      shadowAlpha += shadow_getShadowWeight(shadow_vPosition[1], shadow_uShadowMap1);
    }
    shadowAlpha *= shadow.color.a / shadow.lightCount;
    float blendedAlpha = shadowAlpha + color.a * (1.0 - shadowAlpha);

    return vec4(
      mix(color.rgb, shadow.color.rgb, shadowAlpha / blendedAlpha),
      blendedAlpha
    );
  }
  return color;
}
`
  );
  var fs4 = `
${uniformBlock3}
${fragment}
`;
  var getMemoizedViewportCenterPosition = memoize(getViewportCenterPosition);
  var getMemoizedViewProjectionMatrices = memoize(getViewProjectionMatrices);
  var DEFAULT_SHADOW_COLOR = [0, 0, 0, 1];
  var VECTOR_TO_POINT_MATRIX2 = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];
  function screenToCommonSpace(xyz, pixelUnprojectionMatrix) {
    const [x4, y5, z4] = xyz;
    const coord = pixelsToWorld([x4, y5, z4], pixelUnprojectionMatrix);
    if (Number.isFinite(z4)) {
      return coord;
    }
    return [coord[0], coord[1], 0];
  }
  function getViewportCenterPosition({
    viewport,
    center: center2
  }) {
    return new Matrix4(viewport.viewProjectionMatrix).invert().transform(center2);
  }
  function getViewProjectionMatrices({
    viewport,
    shadowMatrices
  }) {
    const projectionMatrices = [];
    const pixelUnprojectionMatrix = viewport.pixelUnprojectionMatrix;
    const farZ = viewport.isGeospatial ? void 0 : 1;
    const corners = [
      [0, 0, farZ],
      // top left ground
      [viewport.width, 0, farZ],
      // top right ground
      [0, viewport.height, farZ],
      // bottom left ground
      [viewport.width, viewport.height, farZ],
      // bottom right ground
      [0, 0, -1],
      // top left near
      [viewport.width, 0, -1],
      // top right near
      [0, viewport.height, -1],
      // bottom left near
      [viewport.width, viewport.height, -1]
      // bottom right near
    ].map(
      (pixel) => (
        // @ts-expect-error z may be undefined
        screenToCommonSpace(pixel, pixelUnprojectionMatrix)
      )
    );
    for (const shadowMatrix of shadowMatrices) {
      const viewMatrix2 = shadowMatrix.clone().translate(new Vector3(viewport.center).negate());
      const positions = corners.map((corner) => viewMatrix2.transform(corner));
      const projectionMatrix = new Matrix4().ortho({
        left: Math.min(...positions.map((position) => position[0])),
        right: Math.max(...positions.map((position) => position[0])),
        bottom: Math.min(...positions.map((position) => position[1])),
        top: Math.max(...positions.map((position) => position[1])),
        near: Math.min(...positions.map((position) => -position[2])),
        far: Math.max(...positions.map((position) => -position[2]))
      });
      projectionMatrices.push(projectionMatrix.multiplyRight(shadowMatrix));
    }
    return projectionMatrices;
  }
  function createShadowUniforms(opts) {
    const { shadowEnabled = true, project: projectProps } = opts;
    if (!shadowEnabled || !projectProps || !opts.shadowMatrices || !opts.shadowMatrices.length) {
      return {
        drawShadowMap: false,
        useShadowMap: false,
        shadow_uShadowMap0: opts.dummyShadowMap,
        shadow_uShadowMap1: opts.dummyShadowMap
      };
    }
    const projectUniforms = project_default.getUniforms(projectProps);
    const center2 = getMemoizedViewportCenterPosition({
      viewport: projectProps.viewport,
      center: projectUniforms.center
    });
    const projectCenters = [];
    const viewProjectionMatrices = getMemoizedViewProjectionMatrices({
      shadowMatrices: opts.shadowMatrices,
      viewport: projectProps.viewport
    }).slice();
    for (let i7 = 0; i7 < opts.shadowMatrices.length; i7++) {
      const viewProjectionMatrix = viewProjectionMatrices[i7];
      const viewProjectionMatrixCentered = viewProjectionMatrix.clone().translate(new Vector3(projectProps.viewport.center).negate());
      if (projectUniforms.coordinateSystem === COORDINATE_SYSTEM.LNGLAT && projectUniforms.projectionMode === PROJECTION_MODE.WEB_MERCATOR) {
        viewProjectionMatrices[i7] = viewProjectionMatrixCentered;
        projectCenters[i7] = center2;
      } else {
        viewProjectionMatrices[i7] = viewProjectionMatrix.clone().multiplyRight(VECTOR_TO_POINT_MATRIX2);
        projectCenters[i7] = viewProjectionMatrixCentered.transform(center2);
      }
    }
    const uniforms = {
      drawShadowMap: Boolean(opts.drawToShadowMap),
      useShadowMap: opts.shadowMaps ? opts.shadowMaps.length > 0 : false,
      color: opts.shadowColor || DEFAULT_SHADOW_COLOR,
      lightId: opts.shadowLightId || 0,
      lightCount: opts.shadowMatrices.length,
      shadow_uShadowMap0: opts.dummyShadowMap,
      shadow_uShadowMap1: opts.dummyShadowMap
    };
    for (let i7 = 0; i7 < viewProjectionMatrices.length; i7++) {
      uniforms[`viewProjectionMatrix${i7}`] = viewProjectionMatrices[i7];
      uniforms[`projectCenter${i7}`] = projectCenters[i7];
    }
    for (let i7 = 0; i7 < 2; i7++) {
      uniforms[`shadow_uShadowMap${i7}`] = opts.shadowMaps && opts.shadowMaps[i7] || opts.dummyShadowMap;
    }
    return uniforms;
  }
  var shadow_default = {
    name: "shadow",
    dependencies: [project_default],
    vs: vs5,
    fs: fs4,
    inject: {
      "vs:DECKGL_FILTER_GL_POSITION": `
    position = shadow_setVertexPosition(geometry.position);
    `,
      "fs:DECKGL_FILTER_COLOR": `
    color = shadow_filterShadowColor(color);
    `
    },
    getUniforms: createShadowUniforms,
    uniformTypes: {
      drawShadowMap: "f32",
      useShadowMap: "f32",
      color: "vec4<f32>",
      lightId: "i32",
      lightCount: "f32",
      viewProjectionMatrix0: "mat4x4<f32>",
      viewProjectionMatrix1: "mat4x4<f32>",
      projectCenter0: "vec4<f32>",
      projectCenter1: "vec4<f32>"
    }
  };

  // ../core/src/shaderlib/picking/picking.ts
  var picking_default = {
    ...picking,
    defaultUniforms: { ...picking.defaultUniforms, useFloatColors: false },
    inject: {
      "vs:DECKGL_FILTER_GL_POSITION": `
    // for picking depth values
    picking_setPickingAttribute(position.z / position.w);
  `,
      "vs:DECKGL_FILTER_COLOR": `
  picking_setPickingColor(geometry.pickingColor);
  `,
      "fs:DECKGL_FILTER_COLOR": {
        order: 99,
        injection: `
  // use highlight color if this fragment belongs to the selected object.
  color = picking_filterHighlightColor(color);

  // use picking color if rendering to picking FBO.
  color = picking_filterPickingColor(color);
    `
      }
    }
  };

  // ../core/src/shaderlib/index.ts
  var DEFAULT_MODULES = [geometry_default];
  var SHADER_HOOKS_GLSL = [
    "vs:DECKGL_FILTER_SIZE(inout vec3 size, VertexGeometry geometry)",
    "vs:DECKGL_FILTER_GL_POSITION(inout vec4 position, VertexGeometry geometry)",
    "vs:DECKGL_FILTER_COLOR(inout vec4 color, VertexGeometry geometry)",
    "fs:DECKGL_FILTER_COLOR(inout vec4 color, FragmentGeometry geometry)"
  ];
  var SHADER_HOOKS_WGSL = [
    // Not yet supported
  ];
  function getShaderAssembler(language) {
    const shaderAssembler = ShaderAssembler.getDefaultShaderAssembler();
    for (const shaderModule of DEFAULT_MODULES) {
      shaderAssembler.addDefaultModule(shaderModule);
    }
    shaderAssembler._hookFunctions.length = 0;
    const shaderHooks = language === "glsl" ? SHADER_HOOKS_GLSL : SHADER_HOOKS_WGSL;
    for (const shaderHook of shaderHooks) {
      shaderAssembler.addShaderHook(shaderHook);
    }
    return shaderAssembler;
  }

  // ../core/src/effects/lighting/ambient-light.ts
  var DEFAULT_LIGHT_COLOR = [255, 255, 255];
  var DEFAULT_LIGHT_INTENSITY = 1;
  var idCount = 0;
  var AmbientLight = class {
    constructor(props = {}) {
      this.type = "ambient";
      const { color = DEFAULT_LIGHT_COLOR } = props;
      const { intensity = DEFAULT_LIGHT_INTENSITY } = props;
      this.id = props.id || `ambient-${idCount++}`;
      this.color = color;
      this.intensity = intensity;
    }
  };

  // ../core/src/effects/lighting/directional-light.ts
  var DEFAULT_LIGHT_COLOR2 = [255, 255, 255];
  var DEFAULT_LIGHT_INTENSITY2 = 1;
  var DEFAULT_LIGHT_DIRECTION = [0, 0, -1];
  var idCount2 = 0;
  var DirectionalLight = class {
    constructor(props = {}) {
      this.type = "directional";
      const { color = DEFAULT_LIGHT_COLOR2 } = props;
      const { intensity = DEFAULT_LIGHT_INTENSITY2 } = props;
      const { direction = DEFAULT_LIGHT_DIRECTION } = props;
      const { _shadow = false } = props;
      this.id = props.id || `directional-${idCount2++}`;
      this.color = color;
      this.intensity = intensity;
      this.type = "directional";
      this.direction = new Vector3(direction).normalize().toArray();
      this.shadow = _shadow;
    }
    getProjectedLight(opts) {
      return this;
    }
  };

  // ../core/src/passes/pass.ts
  var Pass = class {
    /** Create a new Pass instance */
    constructor(device, props = { id: "pass" }) {
      const { id } = props;
      this.id = id;
      this.device = device;
      this.props = { ...props };
    }
    setProps(props) {
      Object.assign(this.props, props);
    }
    render(params) {
    }
    // eslint-disable-line @typescript-eslint/no-empty-function
    cleanup() {
    }
    // eslint-disable-line @typescript-eslint/no-empty-function
  };

  // ../core/src/passes/layers-pass.ts
  var LayersPass = class extends Pass {
    constructor() {
      super(...arguments);
      this._lastRenderIndex = -1;
    }
    render(options) {
      const [width, height] = this.device.canvasContext.getDrawingBufferSize();
      const clearCanvas = options.clearCanvas ?? true;
      const clearColor = options.clearColor ?? (clearCanvas ? [0, 0, 0, 0] : false);
      const clearDepth = clearCanvas ? 1 : false;
      const clearStencil = clearCanvas ? 0 : false;
      const colorMask = options.colorMask ?? 15;
      const parameters2 = { viewport: [0, 0, width, height] };
      if (options.colorMask) {
        parameters2.colorMask = colorMask;
      }
      if (options.scissorRect) {
        parameters2.scissorRect = options.scissorRect;
      }
      const renderPass = this.device.beginRenderPass({
        framebuffer: options.target,
        parameters: parameters2,
        clearColor,
        clearDepth,
        clearStencil
      });
      try {
        return this._drawLayers(renderPass, options);
      } finally {
        renderPass.end();
        this.device.submit();
      }
    }
    /** Draw a list of layers in a list of viewports */
    _drawLayers(renderPass, options) {
      const {
        target: target2,
        shaderModuleProps,
        viewports,
        views,
        onViewportActive,
        clearStack = true
      } = options;
      options.pass = options.pass || "unknown";
      if (clearStack) {
        this._lastRenderIndex = -1;
      }
      const renderStats = [];
      for (const viewport of viewports) {
        const view = views && views[viewport.id];
        onViewportActive?.(viewport);
        const drawLayerParams = this._getDrawLayerParams(viewport, options);
        const subViewports = viewport.subViewports || [viewport];
        for (const subViewport of subViewports) {
          const stats2 = this._drawLayersInViewport(
            renderPass,
            {
              target: target2,
              shaderModuleProps,
              viewport: subViewport,
              view,
              pass: options.pass,
              layers: options.layers
            },
            drawLayerParams
          );
          renderStats.push(stats2);
        }
      }
      return renderStats;
    }
    // When a viewport contains multiple subviewports (e.g. repeated web mercator map),
    // this is only done once for the parent viewport
    /* Resolve the parameters needed to draw each layer */
    _getDrawLayerParams(viewport, {
      layers,
      pass,
      isPicking = false,
      layerFilter,
      cullRect,
      effects,
      shaderModuleProps
    }, evaluateShouldDrawOnly = false) {
      const drawLayerParams = [];
      const indexResolver = layerIndexResolver(this._lastRenderIndex + 1);
      const drawContext = {
        layer: layers[0],
        viewport,
        isPicking,
        renderPass: pass,
        cullRect
      };
      const layerFilterCache = {};
      for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {
        const layer = layers[layerIndex];
        const shouldDrawLayer = this._shouldDrawLayer(
          layer,
          drawContext,
          layerFilter,
          layerFilterCache
        );
        const layerParam = { shouldDrawLayer };
        if (shouldDrawLayer && !evaluateShouldDrawOnly) {
          layerParam.shouldDrawLayer = true;
          layerParam.layerRenderIndex = indexResolver(layer, shouldDrawLayer);
          layerParam.shaderModuleProps = this._getShaderModuleProps(
            layer,
            effects,
            pass,
            shaderModuleProps
          );
          layerParam.layerParameters = {
            ...layer.context.deck?.props.parameters,
            ...this.getLayerParameters(layer, layerIndex, viewport)
          };
        }
        drawLayerParams[layerIndex] = layerParam;
      }
      return drawLayerParams;
    }
    // Draws a list of layers in one viewport
    // TODO - when picking we could completely skip rendering viewports that dont
    // intersect with the picking rect
    /* eslint-disable max-depth, max-statements, complexity */
    _drawLayersInViewport(renderPass, {
      layers,
      shaderModuleProps: globalModuleParameters,
      pass,
      target: target2,
      viewport,
      view
    }, drawLayerParams) {
      const glViewport = getGLViewport(this.device, {
        shaderModuleProps: globalModuleParameters,
        target: target2,
        viewport
      });
      if (view) {
        const { clear, clearColor, clearDepth, clearStencil } = view.props;
        if (clear) {
          let colorToUse = [0, 0, 0, 0];
          let depthToUse = 1;
          let stencilToUse = 0;
          if (Array.isArray(clearColor)) {
            colorToUse = [...clearColor.slice(0, 3), clearColor[3] || 255].map(
              (c5) => c5 / 255
            );
          } else if (clearColor === false) {
            colorToUse = false;
          }
          if (clearDepth !== void 0) {
            depthToUse = clearDepth;
          }
          if (clearStencil !== void 0) {
            stencilToUse = clearStencil;
          }
          const clearRenderPass = this.device.beginRenderPass({
            framebuffer: target2,
            parameters: {
              viewport: glViewport,
              scissorRect: glViewport
            },
            clearColor: colorToUse,
            clearDepth: depthToUse,
            clearStencil: stencilToUse
          });
          clearRenderPass.end();
        }
      }
      const renderStatus = {
        totalCount: layers.length,
        visibleCount: 0,
        compositeCount: 0,
        pickableCount: 0
      };
      renderPass.setParameters({ viewport: glViewport });
      for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {
        const layer = layers[layerIndex];
        const drawLayerParameters = drawLayerParams[layerIndex];
        const { shouldDrawLayer } = drawLayerParameters;
        if (shouldDrawLayer && layer.props.pickable) {
          renderStatus.pickableCount++;
        }
        if (layer.isComposite) {
          renderStatus.compositeCount++;
        }
        if (layer.isDrawable && drawLayerParameters.shouldDrawLayer) {
          const { layerRenderIndex, shaderModuleProps, layerParameters } = drawLayerParameters;
          renderStatus.visibleCount++;
          this._lastRenderIndex = Math.max(this._lastRenderIndex, layerRenderIndex);
          if (shaderModuleProps.project) {
            shaderModuleProps.project.viewport = viewport;
          }
          layer.context.renderPass = renderPass;
          try {
            layer._drawLayer({
              renderPass,
              shaderModuleProps,
              uniforms: { layerIndex: layerRenderIndex },
              parameters: layerParameters
            });
          } catch (err) {
            layer.raiseError(err, `drawing ${layer} to ${pass}`);
          }
        }
      }
      return renderStatus;
    }
    /* eslint-enable max-depth, max-statements */
    /* Methods for subclass overrides */
    shouldDrawLayer(layer) {
      return true;
    }
    getShaderModuleProps(layer, effects, otherShaderModuleProps) {
      return null;
    }
    getLayerParameters(layer, layerIndex, viewport) {
      return layer.props.parameters;
    }
    /* Private */
    _shouldDrawLayer(layer, drawContext, layerFilter, layerFilterCache) {
      const shouldDrawLayer = layer.props.visible && this.shouldDrawLayer(layer);
      if (!shouldDrawLayer) {
        return false;
      }
      drawContext.layer = layer;
      let parent = layer.parent;
      while (parent) {
        if (!parent.props.visible || !parent.filterSubLayer(drawContext)) {
          return false;
        }
        drawContext.layer = parent;
        parent = parent.parent;
      }
      if (layerFilter) {
        const rootLayerId = drawContext.layer.id;
        if (!(rootLayerId in layerFilterCache)) {
          layerFilterCache[rootLayerId] = layerFilter(drawContext);
        }
        if (!layerFilterCache[rootLayerId]) {
          return false;
        }
      }
      layer.activateViewport(drawContext.viewport);
      return true;
    }
    _getShaderModuleProps(layer, effects, pass, overrides) {
      const devicePixelRatio2 = this.device.canvasContext.cssToDeviceRatio();
      const layerProps = layer.internalState?.propsInTransition || layer.props;
      const shaderModuleProps = {
        layer: layerProps,
        picking: {
          isActive: false
        },
        project: {
          viewport: layer.context.viewport,
          devicePixelRatio: devicePixelRatio2,
          modelMatrix: layerProps.modelMatrix,
          coordinateSystem: layerProps.coordinateSystem,
          coordinateOrigin: layerProps.coordinateOrigin,
          autoWrapLongitude: layer.wrapLongitude
        }
      };
      if (effects) {
        for (const effect of effects) {
          mergeModuleParameters(
            shaderModuleProps,
            effect.getShaderModuleProps?.(layer, shaderModuleProps)
          );
        }
      }
      return mergeModuleParameters(
        shaderModuleProps,
        this.getShaderModuleProps(layer, effects, shaderModuleProps),
        overrides
      );
    }
  };
  function layerIndexResolver(startIndex = 0, layerIndices = {}) {
    const resolvers = {};
    const resolveLayerIndex = (layer, isDrawn) => {
      const indexOverride = layer.props._offset;
      const layerId = layer.id;
      const parentId = layer.parent && layer.parent.id;
      let index;
      if (parentId && !(parentId in layerIndices)) {
        resolveLayerIndex(layer.parent, false);
      }
      if (parentId in resolvers) {
        const resolver = resolvers[parentId] = resolvers[parentId] || layerIndexResolver(layerIndices[parentId], layerIndices);
        index = resolver(layer, isDrawn);
        resolvers[layerId] = resolver;
      } else if (Number.isFinite(indexOverride)) {
        index = indexOverride + (layerIndices[parentId] || 0);
        resolvers[layerId] = null;
      } else {
        index = startIndex;
      }
      if (isDrawn && index >= startIndex) {
        startIndex = index + 1;
      }
      layerIndices[layerId] = index;
      return index;
    };
    return resolveLayerIndex;
  }
  function getGLViewport(device, {
    shaderModuleProps,
    target: target2,
    viewport
  }) {
    const pixelRatio = shaderModuleProps?.project?.devicePixelRatio ?? // @ts-expect-error TODO - assuming WebGL context
    device.canvasContext.cssToDeviceRatio();
    const [, drawingBufferHeight] = device.canvasContext.getDrawingBufferSize();
    const height = target2 ? target2.height : drawingBufferHeight;
    const dimensions = viewport;
    return [
      dimensions.x * pixelRatio,
      height - (dimensions.y + dimensions.height) * pixelRatio,
      dimensions.width * pixelRatio,
      dimensions.height * pixelRatio
    ];
  }
  function mergeModuleParameters(target2, ...sources) {
    for (const source4 of sources) {
      if (source4) {
        for (const key in source4) {
          if (target2[key]) {
            Object.assign(target2[key], source4[key]);
          } else {
            target2[key] = source4[key];
          }
        }
      }
    }
    return target2;
  }

  // ../core/src/passes/shadow-pass.ts
  var ShadowPass = class extends LayersPass {
    constructor(device, props) {
      super(device, props);
      const shadowMap = device.createTexture({
        format: "rgba8unorm",
        width: 1,
        height: 1,
        sampler: {
          minFilter: "linear",
          magFilter: "linear",
          addressModeU: "clamp-to-edge",
          addressModeV: "clamp-to-edge"
        }
        // TODO - texture API change in luma.gl v9.2
        // mipmaps: true
      });
      const depthBuffer = device.createTexture({ format: "depth16unorm", width: 1, height: 1 });
      this.fbo = device.createFramebuffer({
        id: "shadowmap",
        width: 1,
        height: 1,
        colorAttachments: [shadowMap],
        // Depth attachment has to be specified for depth test to work
        depthStencilAttachment: depthBuffer
      });
    }
    delete() {
      if (this.fbo) {
        this.fbo.destroy();
        this.fbo = null;
      }
    }
    getShadowMap() {
      return this.fbo.colorAttachments[0].texture;
    }
    render(params) {
      const target2 = this.fbo;
      const pixelRatio = this.device.canvasContext.cssToDeviceRatio();
      const viewport = params.viewports[0];
      const width = viewport.width * pixelRatio;
      const height = viewport.height * pixelRatio;
      const clearColor = [1, 1, 1, 1];
      if (width !== target2.width || height !== target2.height) {
        target2.resize({ width, height });
      }
      super.render({ ...params, clearColor, target: target2, pass: "shadow" });
    }
    getLayerParameters(layer, layerIndex, viewport) {
      return {
        ...layer.props.parameters,
        blend: false,
        depthWriteEnabled: true,
        depthCompare: "less-equal"
      };
    }
    shouldDrawLayer(layer) {
      return layer.props.shadowEnabled !== false;
    }
    getShaderModuleProps(layer, effects, otherShaderModuleProps) {
      return {
        shadow: {
          project: otherShaderModuleProps.project,
          drawToShadowMap: true
        }
      };
    }
  };

  // ../core/src/effects/lighting/lighting-effect.ts
  var DEFAULT_AMBIENT_LIGHT_PROPS = {
    color: [255, 255, 255],
    intensity: 1
  };
  var DEFAULT_DIRECTIONAL_LIGHT_PROPS = [
    {
      color: [255, 255, 255],
      intensity: 1,
      direction: [-1, 3, -1]
    },
    {
      color: [255, 255, 255],
      intensity: 0.9,
      direction: [1, -8, -2.5]
    }
  ];
  var DEFAULT_SHADOW_COLOR2 = [0, 0, 0, 200 / 255];
  var LightingEffect = class {
    constructor(props = {}) {
      this.id = "lighting-effect";
      this.shadowColor = DEFAULT_SHADOW_COLOR2;
      this.shadow = false;
      this.directionalLights = [];
      this.pointLights = [];
      this.shadowPasses = [];
      this.dummyShadowMap = null;
      this.setProps(props);
    }
    setup(context) {
      this.context = context;
      const { device, deck } = context;
      if (this.shadow && !this.dummyShadowMap) {
        this._createShadowPasses(device);
        deck._addDefaultShaderModule(shadow_default);
        this.dummyShadowMap = device.createTexture({
          width: 1,
          height: 1
        });
      }
    }
    setProps(props) {
      this.ambientLight = void 0;
      this.directionalLights = [];
      this.pointLights = [];
      for (const key in props) {
        const lightSource = props[key];
        switch (lightSource.type) {
          case "ambient":
            this.ambientLight = lightSource;
            break;
          case "directional":
            this.directionalLights.push(lightSource);
            break;
          case "point":
            this.pointLights.push(lightSource);
            break;
          default:
        }
      }
      this._applyDefaultLights();
      this.shadow = this.directionalLights.some((light) => light.shadow);
      if (this.context) {
        this.setup(this.context);
      }
      this.props = props;
    }
    preRender({ layers, layerFilter, viewports, onViewportActive, views }) {
      if (!this.shadow)
        return;
      this.shadowMatrices = this._calculateMatrices();
      for (let i7 = 0; i7 < this.shadowPasses.length; i7++) {
        const shadowPass = this.shadowPasses[i7];
        shadowPass.render({
          layers,
          layerFilter,
          viewports,
          onViewportActive,
          views,
          shaderModuleProps: {
            shadow: {
              shadowLightId: i7,
              dummyShadowMap: this.dummyShadowMap,
              shadowMatrices: this.shadowMatrices
            }
          }
        });
      }
    }
    getShaderModuleProps(layer, otherShaderModuleProps) {
      const shadowProps = this.shadow ? {
        project: otherShaderModuleProps.project,
        shadowMaps: this.shadowPasses.map((shadowPass) => shadowPass.getShadowMap()),
        dummyShadowMap: this.dummyShadowMap,
        shadowColor: this.shadowColor,
        shadowMatrices: this.shadowMatrices
      } : {};
      const lightingProps = {
        enabled: true,
        ambientLight: this.ambientLight,
        directionalLights: this.directionalLights.map(
          (directionalLight) => directionalLight.getProjectedLight({ layer })
        ),
        pointLights: this.pointLights.map((pointLight) => pointLight.getProjectedLight({ layer }))
      };
      const materialProps = layer.props.material;
      return {
        shadow: shadowProps,
        lighting: lightingProps,
        phongMaterial: materialProps,
        gouraudMaterial: materialProps
      };
    }
    cleanup(context) {
      for (const shadowPass of this.shadowPasses) {
        shadowPass.delete();
      }
      this.shadowPasses.length = 0;
      if (this.dummyShadowMap) {
        this.dummyShadowMap.destroy();
        this.dummyShadowMap = null;
        context.deck._removeDefaultShaderModule(shadow_default);
      }
    }
    _calculateMatrices() {
      const lightMatrices = [];
      for (const light of this.directionalLights) {
        const viewMatrix2 = new Matrix4().lookAt({
          eye: new Vector3(light.direction).negate()
        });
        lightMatrices.push(viewMatrix2);
      }
      return lightMatrices;
    }
    _createShadowPasses(device) {
      for (let i7 = 0; i7 < this.directionalLights.length; i7++) {
        const shadowPass = new ShadowPass(device);
        this.shadowPasses[i7] = shadowPass;
      }
    }
    _applyDefaultLights() {
      const { ambientLight, pointLights, directionalLights } = this;
      if (!ambientLight && pointLights.length === 0 && directionalLights.length === 0) {
        this.ambientLight = new AmbientLight(DEFAULT_AMBIENT_LIGHT_PROPS);
        this.directionalLights.push(
          new DirectionalLight(DEFAULT_DIRECTIONAL_LIGHT_PROPS[0]),
          new DirectionalLight(DEFAULT_DIRECTIONAL_LIGHT_PROPS[1])
        );
      }
    }
  };

  // ../core/src/utils/typed-array-manager.ts
  var TypedArrayManager = class {
    constructor(options = {}) {
      this._pool = [];
      this.opts = { overAlloc: 2, poolSize: 100 };
      this.setOptions(options);
    }
    setOptions(options) {
      Object.assign(this.opts, options);
    }
    allocate(typedArray, count3, {
      size = 1,
      type,
      padding = 0,
      copy: copy13 = false,
      initialize = false,
      maxCount
    }) {
      const Type = type || typedArray && typedArray.constructor || Float32Array;
      const newSize = count3 * size + padding;
      if (ArrayBuffer.isView(typedArray)) {
        if (newSize <= typedArray.length) {
          return typedArray;
        }
        if (newSize * typedArray.BYTES_PER_ELEMENT <= typedArray.buffer.byteLength) {
          return new Type(typedArray.buffer, 0, newSize);
        }
      }
      let maxSize = Infinity;
      if (maxCount) {
        maxSize = maxCount * size + padding;
      }
      const newArray = this._allocate(Type, newSize, initialize, maxSize);
      if (typedArray && copy13) {
        newArray.set(typedArray);
      } else if (!initialize) {
        newArray.fill(0, 0, 4);
      }
      this._release(typedArray);
      return newArray;
    }
    release(typedArray) {
      this._release(typedArray);
    }
    _allocate(Type, size, initialize, maxSize) {
      let sizeToAllocate = Math.max(Math.ceil(size * this.opts.overAlloc), 1);
      if (sizeToAllocate > maxSize) {
        sizeToAllocate = maxSize;
      }
      const pool = this._pool;
      const byteLength = Type.BYTES_PER_ELEMENT * sizeToAllocate;
      const i7 = pool.findIndex((b4) => b4.byteLength >= byteLength);
      if (i7 >= 0) {
        const array = new Type(pool.splice(i7, 1)[0], 0, sizeToAllocate);
        if (initialize) {
          array.fill(0);
        }
        return array;
      }
      return new Type(sizeToAllocate);
    }
    _release(typedArray) {
      if (!ArrayBuffer.isView(typedArray)) {
        return;
      }
      const pool = this._pool;
      const { buffer } = typedArray;
      const { byteLength } = buffer;
      const i7 = pool.findIndex((b4) => b4.byteLength >= byteLength);
      if (i7 < 0) {
        pool.push(buffer);
      } else if (i7 > 0 || pool.length < this.opts.poolSize) {
        pool.splice(i7, 0, buffer);
      }
      if (pool.length > this.opts.poolSize) {
        pool.shift();
      }
    }
  };
  var typed_array_manager_default = new TypedArrayManager();

  // ../core/src/utils/math-utils.ts
  function createMat42() {
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  }
  function mod2(value, divisor) {
    const modulus = value % divisor;
    return modulus < 0 ? divisor + modulus : modulus;
  }
  function getCameraPosition(viewMatrixInverse) {
    return [viewMatrixInverse[12], viewMatrixInverse[13], viewMatrixInverse[14]];
  }
  function getFrustumPlanes(viewProjectionMatrix) {
    return {
      left: getFrustumPlane(
        viewProjectionMatrix[3] + viewProjectionMatrix[0],
        viewProjectionMatrix[7] + viewProjectionMatrix[4],
        viewProjectionMatrix[11] + viewProjectionMatrix[8],
        viewProjectionMatrix[15] + viewProjectionMatrix[12]
      ),
      right: getFrustumPlane(
        viewProjectionMatrix[3] - viewProjectionMatrix[0],
        viewProjectionMatrix[7] - viewProjectionMatrix[4],
        viewProjectionMatrix[11] - viewProjectionMatrix[8],
        viewProjectionMatrix[15] - viewProjectionMatrix[12]
      ),
      bottom: getFrustumPlane(
        viewProjectionMatrix[3] + viewProjectionMatrix[1],
        viewProjectionMatrix[7] + viewProjectionMatrix[5],
        viewProjectionMatrix[11] + viewProjectionMatrix[9],
        viewProjectionMatrix[15] + viewProjectionMatrix[13]
      ),
      top: getFrustumPlane(
        viewProjectionMatrix[3] - viewProjectionMatrix[1],
        viewProjectionMatrix[7] - viewProjectionMatrix[5],
        viewProjectionMatrix[11] - viewProjectionMatrix[9],
        viewProjectionMatrix[15] - viewProjectionMatrix[13]
      ),
      near: getFrustumPlane(
        viewProjectionMatrix[3] + viewProjectionMatrix[2],
        viewProjectionMatrix[7] + viewProjectionMatrix[6],
        viewProjectionMatrix[11] + viewProjectionMatrix[10],
        viewProjectionMatrix[15] + viewProjectionMatrix[14]
      ),
      far: getFrustumPlane(
        viewProjectionMatrix[3] - viewProjectionMatrix[2],
        viewProjectionMatrix[7] - viewProjectionMatrix[6],
        viewProjectionMatrix[11] - viewProjectionMatrix[10],
        viewProjectionMatrix[15] - viewProjectionMatrix[14]
      )
    };
  }
  var scratchVector = new Vector3();
  function getFrustumPlane(a6, b4, c5, d5) {
    scratchVector.set(a6, b4, c5);
    const L4 = scratchVector.len();
    return { distance: d5 / L4, normal: new Vector3(-a6 / L4, -b4 / L4, -c5 / L4) };
  }
  function fp64LowPart2(x4) {
    return x4 - Math.fround(x4);
  }
  var scratchArray;
  function toDoublePrecisionArray(typedArray, options) {
    const { size = 1, startIndex = 0 } = options;
    const endIndex = options.endIndex !== void 0 ? options.endIndex : typedArray.length;
    const count3 = (endIndex - startIndex) / size;
    scratchArray = typed_array_manager_default.allocate(scratchArray, count3, {
      type: Float32Array,
      size: size * 2
    });
    let sourceIndex = startIndex;
    let targetIndex = 0;
    while (sourceIndex < endIndex) {
      for (let j4 = 0; j4 < size; j4++) {
        const value = typedArray[sourceIndex++];
        scratchArray[targetIndex + j4] = value;
        scratchArray[targetIndex + j4 + size] = fp64LowPart2(value);
      }
      targetIndex += size * 2;
    }
    return scratchArray.subarray(0, count3 * size * 2);
  }
  function mergeBounds(boundsList) {
    let mergedBounds = null;
    let isMerged = false;
    for (const bounds of boundsList) {
      if (!bounds)
        continue;
      if (!mergedBounds) {
        mergedBounds = bounds;
      } else {
        if (!isMerged) {
          mergedBounds = [
            [mergedBounds[0][0], mergedBounds[0][1]],
            [mergedBounds[1][0], mergedBounds[1][1]]
          ];
          isMerged = true;
        }
        mergedBounds[0][0] = Math.min(mergedBounds[0][0], bounds[0][0]);
        mergedBounds[0][1] = Math.min(mergedBounds[0][1], bounds[0][1]);
        mergedBounds[1][0] = Math.max(mergedBounds[1][0], bounds[1][0]);
        mergedBounds[1][1] = Math.max(mergedBounds[1][1], bounds[1][1]);
      }
    }
    return mergedBounds;
  }

  // ../core/src/viewports/viewport.ts
  var DEGREES_TO_RADIANS4 = Math.PI / 180;
  var IDENTITY2 = createMat42();
  var ZERO_VECTOR2 = [0, 0, 0];
  var DEFAULT_DISTANCE_SCALES = {
    unitsPerMeter: [1, 1, 1],
    metersPerUnit: [1, 1, 1]
  };
  function createProjectionMatrix({
    width,
    height,
    orthographic,
    fovyRadians,
    focalDistance,
    padding,
    near,
    far
  }) {
    const aspect = width / height;
    const matrix = orthographic ? new Matrix4().orthographic({ fovy: fovyRadians, aspect, focalDistance, near, far }) : new Matrix4().perspective({ fovy: fovyRadians, aspect, near, far });
    if (padding) {
      const { left = 0, right = 0, top = 0, bottom = 0 } = padding;
      const offsetX = clamp((left + width - right) / 2, 0, width) - width / 2;
      const offsetY = clamp((top + height - bottom) / 2, 0, height) - height / 2;
      matrix[8] -= offsetX * 2 / width;
      matrix[9] += offsetY * 2 / height;
    }
    return matrix;
  }
  var _Viewport = class {
    // eslint-disable-next-line complexity
    constructor(opts = {}) {
      this._frustumPlanes = {};
      this.id = opts.id || this.constructor.displayName || "viewport";
      this.x = opts.x || 0;
      this.y = opts.y || 0;
      this.width = opts.width || 1;
      this.height = opts.height || 1;
      this.zoom = opts.zoom || 0;
      this.padding = opts.padding;
      this.distanceScales = opts.distanceScales || DEFAULT_DISTANCE_SCALES;
      this.focalDistance = opts.focalDistance || 1;
      this.position = opts.position || ZERO_VECTOR2;
      this.modelMatrix = opts.modelMatrix || null;
      const { longitude, latitude } = opts;
      this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);
      this._initProps(opts);
      this._initMatrices(opts);
      this.equals = this.equals.bind(this);
      this.project = this.project.bind(this);
      this.unproject = this.unproject.bind(this);
      this.projectPosition = this.projectPosition.bind(this);
      this.unprojectPosition = this.unprojectPosition.bind(this);
      this.projectFlat = this.projectFlat.bind(this);
      this.unprojectFlat = this.unprojectFlat.bind(this);
    }
    get subViewports() {
      return null;
    }
    get metersPerPixel() {
      return this.distanceScales.metersPerUnit[2] / this.scale;
    }
    get projectionMode() {
      if (this.isGeospatial) {
        return this.zoom < 12 ? PROJECTION_MODE.WEB_MERCATOR : PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET;
      }
      return PROJECTION_MODE.IDENTITY;
    }
    // Two viewports are equal if width and height are identical, and if
    // their view and projection matrices are (approximately) equal.
    equals(viewport) {
      if (!(viewport instanceof _Viewport)) {
        return false;
      }
      if (this === viewport) {
        return true;
      }
      return viewport.width === this.width && viewport.height === this.height && viewport.scale === this.scale && equals(viewport.projectionMatrix, this.projectionMatrix) && equals(viewport.viewMatrix, this.viewMatrix);
    }
    /**
     * Projects xyz (possibly latitude and longitude) to pixel coordinates in window
     * using viewport projection parameters
     * - [longitude, latitude] to [x, y]
     * - [longitude, latitude, Z] => [x, y, z]
     * Note: By default, returns top-left coordinates for canvas/SVG type render
     *
     * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]
     * @param {Object} opts - options
     * @param {Object} opts.topLeft=true - Whether projected coords are top left
     * @return {Array} - [x, y] or [x, y, z] in top left coords
     */
    project(xyz, { topLeft = true } = {}) {
      const worldPosition = this.projectPosition(xyz);
      const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);
      const [x4, y5] = coord;
      const y22 = topLeft ? y5 : this.height - y5;
      return xyz.length === 2 ? [x4, y22] : [x4, y22, coord[2]];
    }
    /**
     * Unproject pixel coordinates on screen onto world coordinates,
     * (possibly [lon, lat]) on map.
     * - [x, y] => [lng, lat]
     * - [x, y, z] => [lng, lat, Z]
     * @param {Array} xyz -
     * @param {Object} opts - options
     * @param {Object} opts.topLeft=true - Whether origin is top left
     * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]
     */
    unproject(xyz, { topLeft = true, targetZ } = {}) {
      const [x4, y5, z4] = xyz;
      const y22 = topLeft ? y5 : this.height - y5;
      const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];
      const coord = pixelsToWorld([x4, y22, z4], this.pixelUnprojectionMatrix, targetZWorld);
      const [X2, Y2, Z2] = this.unprojectPosition(coord);
      if (Number.isFinite(z4)) {
        return [X2, Y2, Z2];
      }
      return Number.isFinite(targetZ) ? [X2, Y2, targetZ] : [X2, Y2];
    }
    // NON_LINEAR PROJECTION HOOKS
    // Used for web meractor projection
    projectPosition(xyz) {
      const [X2, Y2] = this.projectFlat(xyz);
      const Z2 = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];
      return [X2, Y2, Z2];
    }
    unprojectPosition(xyz) {
      const [X2, Y2] = this.unprojectFlat(xyz);
      const Z2 = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];
      return [X2, Y2, Z2];
    }
    /**
     * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.
     * Performs the nonlinear part of the web mercator projection.
     * Remaining projection is done with 4x4 matrices which also handles
     * perspective.
     * @param {Array} lngLat - [lng, lat] coordinates
     *   Specifies a point on the sphere to project onto the map.
     * @return {Array} [x,y] coordinates.
     */
    projectFlat(xyz) {
      if (this.isGeospatial) {
        const result = lngLatToWorld(xyz);
        result[1] = clamp(result[1], -318, 830);
        return result;
      }
      return xyz;
    }
    /**
     * Unproject world point [x,y] on map onto {lat, lon} on sphere
     * @param {object|Vector} xy - object with {x,y} members
     *  representing point on projected map plane
     * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.
     *   Has toArray method if you need a GeoJSON Array.
     *   Per cartographic tradition, lat and lon are specified as degrees.
     */
    unprojectFlat(xyz) {
      if (this.isGeospatial) {
        return worldToLngLat(xyz);
      }
      return xyz;
    }
    /**
     * Get bounds of the current viewport
     * @return {Array} - [minX, minY, maxX, maxY]
     */
    getBounds(options = {}) {
      const unprojectOption = { targetZ: options.z || 0 };
      const topLeft = this.unproject([0, 0], unprojectOption);
      const topRight = this.unproject([this.width, 0], unprojectOption);
      const bottomLeft = this.unproject([0, this.height], unprojectOption);
      const bottomRight = this.unproject([this.width, this.height], unprojectOption);
      return [
        Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),
        Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]),
        Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),
        Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1])
      ];
    }
    getDistanceScales(coordinateOrigin) {
      if (coordinateOrigin && this.isGeospatial) {
        return getDistanceScales({
          longitude: coordinateOrigin[0],
          latitude: coordinateOrigin[1],
          highPrecision: true
        });
      }
      return this.distanceScales;
    }
    containsPixel({
      x: x4,
      y: y5,
      width = 1,
      height = 1
    }) {
      return x4 < this.x + this.width && this.x < x4 + width && y5 < this.y + this.height && this.y < y5 + height;
    }
    // Extract frustum planes in common space
    getFrustumPlanes() {
      if (this._frustumPlanes.near) {
        return this._frustumPlanes;
      }
      Object.assign(this._frustumPlanes, getFrustumPlanes(this.viewProjectionMatrix));
      return this._frustumPlanes;
    }
    // EXPERIMENTAL METHODS
    /**
     * Needed by panning and linear transition
     * Pan the viewport to place a given world coordinate at screen point [x, y]
     *
     * @param {Array} coords - world coordinates
     * @param {Array} pixel - [x,y] coordinates on screen
     * @return {Object} props of the new viewport
     */
    panByPosition(coords, pixel) {
      return null;
    }
    // INTERNAL METHODS
    /* eslint-disable complexity, max-statements */
    _initProps(opts) {
      const longitude = opts.longitude;
      const latitude = opts.latitude;
      if (this.isGeospatial) {
        if (!Number.isFinite(opts.zoom)) {
          this.zoom = getMeterZoom({ latitude }) + Math.log2(this.focalDistance);
        }
        this.distanceScales = opts.distanceScales || getDistanceScales({ latitude, longitude });
      }
      const scale24 = Math.pow(2, this.zoom);
      this.scale = scale24;
      const { position, modelMatrix: modelMatrix2 } = opts;
      let meterOffset = ZERO_VECTOR2;
      if (position) {
        meterOffset = modelMatrix2 ? new Matrix4(modelMatrix2).transformAsVector(position, []) : position;
      }
      if (this.isGeospatial) {
        const center2 = this.projectPosition([longitude, latitude, 0]);
        this.center = new Vector3(meterOffset).scale(this.distanceScales.unitsPerMeter).add(center2);
      } else {
        this.center = this.projectPosition(meterOffset);
      }
    }
    /* eslint-enable complexity, max-statements */
    _initMatrices(opts) {
      const {
        // View matrix
        viewMatrix: viewMatrix2 = IDENTITY2,
        // Projection matrix
        projectionMatrix = null,
        // Projection matrix parameters, used if projectionMatrix not supplied
        orthographic = false,
        fovyRadians,
        fovy = 75,
        near = 0.1,
        // Distance of near clipping plane
        far = 1e3,
        // Distance of far clipping plane
        padding = null,
        // Center offset in pixels
        focalDistance = 1
      } = opts;
      this.viewMatrixUncentered = viewMatrix2;
      this.viewMatrix = new Matrix4().multiplyRight(viewMatrix2).translate(new Vector3(this.center).negate());
      this.projectionMatrix = projectionMatrix || createProjectionMatrix({
        width: this.width,
        height: this.height,
        orthographic,
        fovyRadians: fovyRadians || fovy * DEGREES_TO_RADIANS4,
        focalDistance,
        padding,
        near,
        far
      });
      const vpm = createMat42();
      mat4_exports.multiply(vpm, vpm, this.projectionMatrix);
      mat4_exports.multiply(vpm, vpm, this.viewMatrix);
      this.viewProjectionMatrix = vpm;
      this.viewMatrixInverse = mat4_exports.invert([], this.viewMatrix) || this.viewMatrix;
      this.cameraPosition = getCameraPosition(this.viewMatrixInverse);
      const viewportMatrix = createMat42();
      const pixelProjectionMatrix = createMat42();
      mat4_exports.scale(viewportMatrix, viewportMatrix, [this.width / 2, -this.height / 2, 1]);
      mat4_exports.translate(viewportMatrix, viewportMatrix, [1, -1, 0]);
      mat4_exports.multiply(pixelProjectionMatrix, viewportMatrix, this.viewProjectionMatrix);
      this.pixelProjectionMatrix = pixelProjectionMatrix;
      this.pixelUnprojectionMatrix = mat4_exports.invert(createMat42(), this.pixelProjectionMatrix);
      if (!this.pixelUnprojectionMatrix) {
        log_default.warn("Pixel project matrix not invertible")();
      }
    }
  };
  var Viewport = _Viewport;
  Viewport.displayName = "Viewport";

  // ../core/src/viewports/web-mercator-viewport.ts
  var _WebMercatorViewport = class extends Viewport {
    /* eslint-disable complexity, max-statements */
    constructor(opts = {}) {
      const {
        latitude = 0,
        longitude = 0,
        zoom = 0,
        pitch = 0,
        bearing = 0,
        nearZMultiplier = 0.1,
        farZMultiplier = 1.01,
        nearZ,
        farZ,
        orthographic = false,
        projectionMatrix,
        repeat = false,
        worldOffset = 0,
        position,
        padding,
        // backward compatibility
        // TODO: remove in v9
        legacyMeterSizes = false
      } = opts;
      let { width, height, altitude = 1.5 } = opts;
      const scale24 = Math.pow(2, zoom);
      width = width || 1;
      height = height || 1;
      let fovy;
      let projectionParameters = null;
      if (projectionMatrix) {
        altitude = projectionMatrix[5] / 2;
        fovy = altitudeToFovy(altitude);
      } else {
        if (opts.fovy) {
          fovy = opts.fovy;
          altitude = fovyToAltitude(fovy);
        } else {
          fovy = altitudeToFovy(altitude);
        }
        let offset;
        if (padding) {
          const { top = 0, bottom = 0 } = padding;
          offset = [0, clamp((top + height - bottom) / 2, 0, height) - height / 2];
        }
        projectionParameters = getProjectionParameters({
          width,
          height,
          scale: scale24,
          center: position && [0, 0, position[2] * unitsPerMeter(latitude)],
          offset,
          pitch,
          fovy,
          nearZMultiplier,
          farZMultiplier
        });
        if (Number.isFinite(nearZ)) {
          projectionParameters.near = nearZ;
        }
        if (Number.isFinite(farZ)) {
          projectionParameters.far = farZ;
        }
      }
      let viewMatrixUncentered = getViewMatrix({
        height,
        pitch,
        bearing,
        scale: scale24,
        altitude
      });
      if (worldOffset) {
        const viewOffset = new Matrix4().translate([512 * worldOffset, 0, 0]);
        viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);
      }
      super({
        ...opts,
        // x, y,
        width,
        height,
        // view matrix
        viewMatrix: viewMatrixUncentered,
        longitude,
        latitude,
        zoom,
        // projection matrix parameters
        ...projectionParameters,
        fovy,
        focalDistance: altitude
      });
      this.latitude = latitude;
      this.longitude = longitude;
      this.zoom = zoom;
      this.pitch = pitch;
      this.bearing = bearing;
      this.altitude = altitude;
      this.fovy = fovy;
      this.orthographic = orthographic;
      this._subViewports = repeat ? [] : null;
      this._pseudoMeters = legacyMeterSizes;
      Object.freeze(this);
    }
    /* eslint-enable complexity, max-statements */
    get subViewports() {
      if (this._subViewports && !this._subViewports.length) {
        const bounds = this.getBounds();
        const minOffset = Math.floor((bounds[0] + 180) / 360);
        const maxOffset = Math.ceil((bounds[2] - 180) / 360);
        for (let x4 = minOffset; x4 <= maxOffset; x4++) {
          const offsetViewport = x4 ? new _WebMercatorViewport({
            ...this,
            worldOffset: x4
          }) : this;
          this._subViewports.push(offsetViewport);
        }
      }
      return this._subViewports;
    }
    projectPosition(xyz) {
      if (this._pseudoMeters) {
        return super.projectPosition(xyz);
      }
      const [X2, Y2] = this.projectFlat(xyz);
      const Z2 = (xyz[2] || 0) * unitsPerMeter(xyz[1]);
      return [X2, Y2, Z2];
    }
    unprojectPosition(xyz) {
      if (this._pseudoMeters) {
        return super.unprojectPosition(xyz);
      }
      const [X2, Y2] = this.unprojectFlat(xyz);
      const Z2 = (xyz[2] || 0) / unitsPerMeter(Y2);
      return [X2, Y2, Z2];
    }
    /**
     * Add a meter delta to a base lnglat coordinate, returning a new lnglat array
     *
     * Note: Uses simple linear approximation around the viewport center
     * Error increases with size of offset (roughly 1% per 100km)
     *
     * @param {[Number,Number]|[Number,Number,Number]) lngLatZ - base coordinate
     * @param {[Number,Number]|[Number,Number,Number]) xyz - array of meter deltas
     * @return {[Number,Number]|[Number,Number,Number]) array of [lng,lat,z] deltas
     */
    addMetersToLngLat(lngLatZ, xyz) {
      return addMetersToLngLat(lngLatZ, xyz);
    }
    panByPosition(coords, pixel) {
      const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);
      const toLocation = this.projectFlat(coords);
      const translate11 = vec2_exports.add([], toLocation, vec2_exports.negate([], fromLocation));
      const newCenter = vec2_exports.add([], this.center, translate11);
      const [longitude, latitude] = this.unprojectFlat(newCenter);
      return { longitude, latitude };
    }
    getBounds(options = {}) {
      const corners = getBounds(this, options.z || 0);
      return [
        Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),
        Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]),
        Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),
        Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])
      ];
    }
    /**
     * Returns a new viewport that fit around the given rectangle.
     * Only supports non-perspective mode.
     */
    fitBounds(bounds, options = {}) {
      const { width, height } = this;
      const { longitude, latitude, zoom } = fitBounds({ width, height, bounds, ...options });
      return new _WebMercatorViewport({ width, height, longitude, latitude, zoom });
    }
  };
  var WebMercatorViewport2 = _WebMercatorViewport;
  WebMercatorViewport2.displayName = "WebMercatorViewport";

  // ../core/src/shaderlib/project/project-functions.ts
  var DEFAULT_COORDINATE_ORIGIN2 = [0, 0, 0];
  function lngLatZToWorldPosition(lngLatZ, viewport, offsetMode = false) {
    const p5 = viewport.projectPosition(lngLatZ);
    if (offsetMode && viewport instanceof WebMercatorViewport2) {
      const [longitude, latitude, z4 = 0] = lngLatZ;
      const distanceScales = viewport.getDistanceScales([longitude, latitude]);
      p5[2] = z4 * distanceScales.unitsPerMeter[2];
    }
    return p5;
  }
  function normalizeParameters(opts) {
    const { viewport, modelMatrix: modelMatrix2, coordinateOrigin } = opts;
    let { coordinateSystem, fromCoordinateSystem, fromCoordinateOrigin } = opts;
    if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {
      coordinateSystem = viewport.isGeospatial ? COORDINATE_SYSTEM.LNGLAT : COORDINATE_SYSTEM.CARTESIAN;
    }
    if (fromCoordinateSystem === void 0) {
      fromCoordinateSystem = coordinateSystem;
    }
    if (fromCoordinateOrigin === void 0) {
      fromCoordinateOrigin = coordinateOrigin;
    }
    return {
      viewport,
      coordinateSystem,
      coordinateOrigin,
      modelMatrix: modelMatrix2,
      fromCoordinateSystem,
      fromCoordinateOrigin
    };
  }
  function getWorldPosition(position, {
    viewport,
    modelMatrix: modelMatrix2,
    coordinateSystem,
    coordinateOrigin,
    offsetMode
  }) {
    let [x4, y5, z4 = 0] = position;
    if (modelMatrix2) {
      [x4, y5, z4] = vec4_exports.transformMat4([], [x4, y5, z4, 1], modelMatrix2);
    }
    switch (coordinateSystem) {
      case COORDINATE_SYSTEM.LNGLAT:
        return lngLatZToWorldPosition([x4, y5, z4], viewport, offsetMode);
      case COORDINATE_SYSTEM.LNGLAT_OFFSETS:
        return lngLatZToWorldPosition(
          [x4 + coordinateOrigin[0], y5 + coordinateOrigin[1], z4 + (coordinateOrigin[2] || 0)],
          viewport,
          offsetMode
        );
      case COORDINATE_SYSTEM.METER_OFFSETS:
        return lngLatZToWorldPosition(
          addMetersToLngLat(coordinateOrigin, [x4, y5, z4]),
          viewport,
          offsetMode
        );
      case COORDINATE_SYSTEM.CARTESIAN:
      default:
        return viewport.isGeospatial ? [x4 + coordinateOrigin[0], y5 + coordinateOrigin[1], z4 + coordinateOrigin[2]] : viewport.projectPosition([x4, y5, z4]);
    }
  }
  function projectPosition(position, params) {
    const {
      viewport,
      coordinateSystem,
      coordinateOrigin,
      modelMatrix: modelMatrix2,
      fromCoordinateSystem,
      fromCoordinateOrigin
    } = normalizeParameters(params);
    const { autoOffset = true } = params;
    const {
      geospatialOrigin = DEFAULT_COORDINATE_ORIGIN2,
      shaderCoordinateOrigin = DEFAULT_COORDINATE_ORIGIN2,
      offsetMode = false
    } = autoOffset ? getOffsetOrigin(viewport, coordinateSystem, coordinateOrigin) : {};
    const worldPosition = getWorldPosition(position, {
      viewport,
      modelMatrix: modelMatrix2,
      coordinateSystem: fromCoordinateSystem,
      coordinateOrigin: fromCoordinateOrigin,
      offsetMode
    });
    if (offsetMode) {
      const positionCommonSpace = viewport.projectPosition(
        geospatialOrigin || shaderCoordinateOrigin
      );
      vec3_exports.sub(worldPosition, worldPosition, positionCommonSpace);
    }
    return worldPosition;
  }

  // ../core/src/effects/lighting/point-light.ts
  var DEFAULT_LIGHT_COLOR3 = [255, 255, 255];
  var DEFAULT_LIGHT_INTENSITY3 = 1;
  var DEFAULT_ATTENUATION = [1, 0, 0];
  var DEFAULT_LIGHT_POSITION = [0, 0, 1];
  var idCount3 = 0;
  var PointLight = class {
    constructor(props = {}) {
      this.type = "point";
      const { color = DEFAULT_LIGHT_COLOR3 } = props;
      const { intensity = DEFAULT_LIGHT_INTENSITY3 } = props;
      const { position = DEFAULT_LIGHT_POSITION } = props;
      this.id = props.id || `point-${idCount3++}`;
      this.color = color;
      this.intensity = intensity;
      this.type = "point";
      this.position = position;
      this.attenuation = getAttenuation(props);
      this.projectedLight = { ...this };
    }
    getProjectedLight({ layer }) {
      const { projectedLight } = this;
      const viewport = layer.context.viewport;
      const { coordinateSystem, coordinateOrigin } = layer.props;
      const position = projectPosition(this.position, {
        viewport,
        coordinateSystem,
        coordinateOrigin,
        fromCoordinateSystem: viewport.isGeospatial ? COORDINATE_SYSTEM.LNGLAT : COORDINATE_SYSTEM.CARTESIAN,
        fromCoordinateOrigin: [0, 0, 0]
      });
      projectedLight.color = this.color;
      projectedLight.intensity = this.intensity;
      projectedLight.position = position;
      return projectedLight;
    }
  };
  function getAttenuation(props) {
    if (props.attenuation) {
      return props.attenuation;
    }
    return DEFAULT_ATTENUATION;
  }

  // ../core/src/effects/lighting/camera-light.ts
  var CameraLight = class extends PointLight {
    getProjectedLight({ layer }) {
      const { projectedLight } = this;
      const viewport = layer.context.viewport;
      const { coordinateSystem, coordinateOrigin, modelMatrix: modelMatrix2 } = layer.props;
      const { cameraPosition } = getUniformsFromViewport({
        viewport,
        modelMatrix: modelMatrix2,
        coordinateSystem,
        coordinateOrigin
      });
      projectedLight.color = this.color;
      projectedLight.intensity = this.intensity;
      projectedLight.position = cameraPosition;
      return projectedLight;
    }
  };

  // ../../node_modules/@math.gl/sun/dist/suncalc.js
  var DEGREES_TO_RADIANS5 = Math.PI / 180;
  var DAY_IN_MS = 1e3 * 60 * 60 * 24;
  var JD1970 = 2440588;
  var JD2000 = 2451545;
  var e2 = DEGREES_TO_RADIANS5 * 23.4397;
  var M0 = 357.5291;
  var M1 = 0.98560028;
  var THETA0 = 280.147;
  var THETA1 = 360.9856235;
  function getSunPosition(timestamp, latitude, longitude) {
    const longitudeWestInRadians = DEGREES_TO_RADIANS5 * -longitude;
    const phi = DEGREES_TO_RADIANS5 * latitude;
    const d5 = toDays(timestamp);
    const c5 = getSunCoords(d5);
    const H2 = getSiderealTime(d5, longitudeWestInRadians) - c5.rightAscension;
    return {
      azimuth: getAzimuth(H2, phi, c5.declination),
      altitude: getAltitude(H2, phi, c5.declination)
    };
  }
  function getSunDirection(timestamp, latitude, longitude) {
    const { azimuth, altitude } = getSunPosition(timestamp, latitude, longitude);
    return [
      Math.sin(azimuth) * Math.cos(altitude),
      Math.cos(azimuth) * Math.cos(altitude),
      -Math.sin(altitude)
    ];
  }
  function toJulianDay(timestamp) {
    const ts = typeof timestamp === "number" ? timestamp : timestamp.getTime();
    return ts / DAY_IN_MS - 0.5 + JD1970;
  }
  function toDays(timestamp) {
    return toJulianDay(timestamp) - JD2000;
  }
  function getRightAscension(eclipticLongitude, b4) {
    const lambda = eclipticLongitude;
    return Math.atan2(Math.sin(lambda) * Math.cos(e2) - Math.tan(b4) * Math.sin(e2), Math.cos(lambda));
  }
  function getDeclination(eclipticLongitude, b4) {
    const lambda = eclipticLongitude;
    return Math.asin(Math.sin(b4) * Math.cos(e2) + Math.cos(b4) * Math.sin(e2) * Math.sin(lambda));
  }
  function getAzimuth(hourAngle, latitudeInRadians, declination) {
    const H2 = hourAngle;
    const phi = latitudeInRadians;
    const delta = declination;
    return Math.atan2(Math.sin(H2), Math.cos(H2) * Math.sin(phi) - Math.tan(delta) * Math.cos(phi));
  }
  function getAltitude(hourAngle, latitudeInRadians, declination) {
    const H2 = hourAngle;
    const phi = latitudeInRadians;
    const delta = declination;
    return Math.asin(Math.sin(phi) * Math.sin(delta) + Math.cos(phi) * Math.cos(delta) * Math.cos(H2));
  }
  function getSiderealTime(dates, longitudeWestInRadians) {
    return DEGREES_TO_RADIANS5 * (THETA0 + THETA1 * dates) - longitudeWestInRadians;
  }
  function getSolarMeanAnomaly(days) {
    return DEGREES_TO_RADIANS5 * (M0 + M1 * days);
  }
  function getEclipticLongitude(meanAnomaly) {
    const M3 = meanAnomaly;
    const C5 = DEGREES_TO_RADIANS5 * (1.9148 * Math.sin(M3) + 0.02 * Math.sin(2 * M3) + 3e-4 * Math.sin(3 * M3));
    const P3 = DEGREES_TO_RADIANS5 * 102.9372;
    return M3 + C5 + P3 + Math.PI;
  }
  function getSunCoords(dates) {
    const M3 = getSolarMeanAnomaly(dates);
    const L4 = getEclipticLongitude(M3);
    return {
      declination: getDeclination(L4, 0),
      rightAscension: getRightAscension(L4, 0)
    };
  }

  // ../core/src/effects/lighting/sun-light.ts
  var SunLight = class extends DirectionalLight {
    constructor(opts) {
      super(opts);
      this.timestamp = opts.timestamp;
    }
    getProjectedLight({ layer }) {
      const { viewport } = layer.context;
      const isGlobe = viewport.resolution && viewport.resolution > 0;
      if (isGlobe) {
        const [x4, y5, z4] = getSunDirection(this.timestamp, 0, 0);
        this.direction = [x4, -z4, y5];
      } else {
        const { latitude, longitude } = viewport;
        this.direction = getSunDirection(this.timestamp, latitude, longitude);
      }
      return this;
    }
  };

  // ../../node_modules/@luma.gl/engine/dist/animation/timeline.js
  var channelHandles = 1;
  var animationHandles = 1;
  var Timeline = class {
    time = 0;
    channels = /* @__PURE__ */ new Map();
    animations = /* @__PURE__ */ new Map();
    playing = false;
    lastEngineTime = -1;
    constructor() {
    }
    addChannel(props) {
      const { delay = 0, duration = Number.POSITIVE_INFINITY, rate = 1, repeat = 1 } = props;
      const channelId = channelHandles++;
      const channel = {
        time: 0,
        delay,
        duration,
        rate,
        repeat
      };
      this._setChannelTime(channel, this.time);
      this.channels.set(channelId, channel);
      return channelId;
    }
    removeChannel(channelId) {
      this.channels.delete(channelId);
      for (const [animationHandle, animation] of this.animations) {
        if (animation.channel === channelId) {
          this.detachAnimation(animationHandle);
        }
      }
    }
    isFinished(channelId) {
      const channel = this.channels.get(channelId);
      if (channel === void 0) {
        return false;
      }
      return this.time >= channel.delay + channel.duration * channel.repeat;
    }
    getTime(channelId) {
      if (channelId === void 0) {
        return this.time;
      }
      const channel = this.channels.get(channelId);
      if (channel === void 0) {
        return -1;
      }
      return channel.time;
    }
    setTime(time) {
      this.time = Math.max(0, time);
      const channels = this.channels.values();
      for (const channel of channels) {
        this._setChannelTime(channel, this.time);
      }
      const animations = this.animations.values();
      for (const animationData of animations) {
        const { animation, channel } = animationData;
        animation.setTime(this.getTime(channel));
      }
    }
    play() {
      this.playing = true;
    }
    pause() {
      this.playing = false;
      this.lastEngineTime = -1;
    }
    reset() {
      this.setTime(0);
    }
    attachAnimation(animation, channelHandle) {
      const animationHandle = animationHandles++;
      this.animations.set(animationHandle, {
        animation,
        channel: channelHandle
      });
      animation.setTime(this.getTime(channelHandle));
      return animationHandle;
    }
    detachAnimation(channelId) {
      this.animations.delete(channelId);
    }
    update(engineTime) {
      if (this.playing) {
        if (this.lastEngineTime === -1) {
          this.lastEngineTime = engineTime;
        }
        this.setTime(this.time + (engineTime - this.lastEngineTime));
        this.lastEngineTime = engineTime;
      }
    }
    _setChannelTime(channel, time) {
      const offsetTime = time - channel.delay;
      const totalDuration = channel.duration * channel.repeat;
      if (offsetTime >= totalDuration) {
        channel.time = channel.duration * channel.rate;
      } else {
        channel.time = Math.max(0, offsetTime) % channel.duration;
        channel.time *= channel.rate;
      }
    }
  };

  // ../../node_modules/@luma.gl/engine/dist/animation-loop/animation-loop.js
  init_dist4();

  // ../../node_modules/@luma.gl/engine/dist/animation-loop/request-animation-frame.js
  function requestAnimationFramePolyfill(callback) {
    return typeof window !== "undefined" && window.requestAnimationFrame ? window.requestAnimationFrame(callback) : setTimeout(callback, 1e3 / 60);
  }
  function cancelAnimationFramePolyfill(timerId) {
    return typeof window !== "undefined" && window.cancelAnimationFrame ? window.cancelAnimationFrame(timerId) : clearTimeout(timerId);
  }

  // ../../node_modules/@luma.gl/engine/dist/animation-loop/animation-loop.js
  init_dist3();
  var statIdCounter = 0;
  var _AnimationLoop = class {
    device = null;
    canvas = null;
    props;
    animationProps = null;
    timeline = null;
    stats;
    cpuTime;
    gpuTime;
    frameRate;
    display;
    needsRedraw = "initialized";
    _initialized = false;
    _running = false;
    _animationFrameId = null;
    _nextFramePromise = null;
    _resolveNextFrame = null;
    _cpuStartTime = 0;
    _error = null;
    // _gpuTimeQuery: Query | null = null;
    /*
     * @param {HTMLCanvasElement} canvas - if provided, width and height will be passed to context
     */
    constructor(props) {
      this.props = { ..._AnimationLoop.defaultAnimationLoopProps, ...props };
      props = this.props;
      if (!props.device) {
        throw new Error("No device provided");
      }
      this.stats = props.stats || new Stats({ id: "animation-loop-stats" });
      this.cpuTime = this.stats.get("CPU Time");
      this.gpuTime = this.stats.get("GPU Time");
      this.frameRate = this.stats.get("Frame Rate");
      this.setProps({ autoResizeViewport: props.autoResizeViewport });
      this.start = this.start.bind(this);
      this.stop = this.stop.bind(this);
      this._onMousemove = this._onMousemove.bind(this);
      this._onMouseleave = this._onMouseleave.bind(this);
    }
    destroy() {
      this.stop();
      this._setDisplay(null);
    }
    /** @deprecated Use .destroy() */
    delete() {
      this.destroy();
    }
    reportError(error) {
      this.props.onError(error);
      this._error = error;
    }
    /** Flags this animation loop as needing redraw */
    setNeedsRedraw(reason) {
      this.needsRedraw = this.needsRedraw || reason;
      return this;
    }
    setProps(props) {
      if ("autoResizeViewport" in props) {
        this.props.autoResizeViewport = props.autoResizeViewport || false;
      }
      return this;
    }
    /** Starts a render loop if not already running */
    async start() {
      if (this._running) {
        return this;
      }
      this._running = true;
      try {
        let appContext;
        if (!this._initialized) {
          this._initialized = true;
          await this._initDevice();
          this._initialize();
          await this.props.onInitialize(this._getAnimationProps());
        }
        if (!this._running) {
          return null;
        }
        if (appContext !== false) {
          this._cancelAnimationFrame();
          this._requestAnimationFrame();
        }
        return this;
      } catch (err) {
        const error = err instanceof Error ? err : new Error("Unknown error");
        this.props.onError(error);
        throw error;
      }
    }
    /** Stops a render loop if already running, finalizing */
    stop() {
      if (this._running) {
        if (this.animationProps && !this._error) {
          this.props.onFinalize(this.animationProps);
        }
        this._cancelAnimationFrame();
        this._nextFramePromise = null;
        this._resolveNextFrame = null;
        this._running = false;
      }
      return this;
    }
    /** Explicitly draw a frame */
    redraw() {
      if (this.device?.isLost || this._error) {
        return this;
      }
      this._beginFrameTimers();
      this._setupFrame();
      this._updateAnimationProps();
      this._renderFrame(this._getAnimationProps());
      this._clearNeedsRedraw();
      if (this._resolveNextFrame) {
        this._resolveNextFrame(this);
        this._nextFramePromise = null;
        this._resolveNextFrame = null;
      }
      this._endFrameTimers();
      return this;
    }
    /** Add a timeline, it will be automatically updated by the animation loop. */
    attachTimeline(timeline) {
      this.timeline = timeline;
      return this.timeline;
    }
    /** Remove a timeline */
    detachTimeline() {
      this.timeline = null;
    }
    /** Wait until a render completes */
    waitForRender() {
      this.setNeedsRedraw("waitForRender");
      if (!this._nextFramePromise) {
        this._nextFramePromise = new Promise((resolve2) => {
          this._resolveNextFrame = resolve2;
        });
      }
      return this._nextFramePromise;
    }
    /** TODO - should use device.deviceContext */
    async toDataURL() {
      this.setNeedsRedraw("toDataURL");
      await this.waitForRender();
      if (this.canvas instanceof HTMLCanvasElement) {
        return this.canvas.toDataURL();
      }
      throw new Error("OffscreenCanvas");
    }
    // PRIVATE METHODS
    _initialize() {
      this._startEventHandling();
      this._initializeAnimationProps();
      this._updateAnimationProps();
      this._resizeViewport();
    }
    _setDisplay(display) {
      if (this.display) {
        this.display.destroy();
        this.display.animationLoop = null;
      }
      if (display) {
        display.animationLoop = this;
      }
      this.display = display;
    }
    _requestAnimationFrame() {
      if (!this._running) {
        return;
      }
      this._animationFrameId = requestAnimationFramePolyfill(this._animationFrame.bind(this));
    }
    _cancelAnimationFrame() {
      if (this._animationFrameId === null) {
        return;
      }
      cancelAnimationFramePolyfill(this._animationFrameId);
      this._animationFrameId = null;
    }
    _animationFrame() {
      if (!this._running) {
        return;
      }
      this.redraw();
      this._requestAnimationFrame();
    }
    // Called on each frame, can be overridden to call onRender multiple times
    // to support e.g. stereoscopic rendering
    _renderFrame(animationProps) {
      if (this.display) {
        this.display._renderFrame(animationProps);
        return;
      }
      this.props.onRender(this._getAnimationProps());
      this.device?.submit();
    }
    _clearNeedsRedraw() {
      this.needsRedraw = false;
    }
    _setupFrame() {
      this._resizeViewport();
    }
    // Initialize the  object that will be passed to app callbacks
    _initializeAnimationProps() {
      const canvasContext = this.device?.getDefaultCanvasContext();
      if (!this.device || !canvasContext) {
        throw new Error("loop");
      }
      const canvas2 = canvasContext?.canvas;
      const useDevicePixels = canvasContext.props.useDevicePixels;
      this.animationProps = {
        animationLoop: this,
        device: this.device,
        canvasContext,
        canvas: canvas2,
        // @ts-expect-error Deprecated
        useDevicePixels,
        timeline: this.timeline,
        needsRedraw: false,
        // Placeholders
        width: 1,
        height: 1,
        aspect: 1,
        // Animation props
        time: 0,
        startTime: Date.now(),
        engineTime: 0,
        tick: 0,
        tock: 0,
        // Experimental
        _mousePosition: null
        // Event props
      };
    }
    _getAnimationProps() {
      if (!this.animationProps) {
        throw new Error("animationProps");
      }
      return this.animationProps;
    }
    // Update the context object that will be passed to app callbacks
    _updateAnimationProps() {
      if (!this.animationProps) {
        return;
      }
      const { width, height, aspect } = this._getSizeAndAspect();
      if (width !== this.animationProps.width || height !== this.animationProps.height) {
        this.setNeedsRedraw("drawing buffer resized");
      }
      if (aspect !== this.animationProps.aspect) {
        this.setNeedsRedraw("drawing buffer aspect changed");
      }
      this.animationProps.width = width;
      this.animationProps.height = height;
      this.animationProps.aspect = aspect;
      this.animationProps.needsRedraw = this.needsRedraw;
      this.animationProps.engineTime = Date.now() - this.animationProps.startTime;
      if (this.timeline) {
        this.timeline.update(this.animationProps.engineTime);
      }
      this.animationProps.tick = Math.floor(this.animationProps.time / 1e3 * 60);
      this.animationProps.tock++;
      this.animationProps.time = this.timeline ? this.timeline.getTime() : this.animationProps.engineTime;
    }
    /** Wait for supplied device */
    async _initDevice() {
      this.device = await this.props.device;
      if (!this.device) {
        throw new Error("No device provided");
      }
      this.canvas = this.device.getDefaultCanvasContext().canvas || null;
    }
    _createInfoDiv() {
      if (this.canvas && this.props.onAddHTML) {
        const wrapperDiv = document.createElement("div");
        document.body.appendChild(wrapperDiv);
        wrapperDiv.style.position = "relative";
        const div6 = document.createElement("div");
        div6.style.position = "absolute";
        div6.style.left = "10px";
        div6.style.bottom = "10px";
        div6.style.width = "300px";
        div6.style.background = "white";
        if (this.canvas instanceof HTMLCanvasElement) {
          wrapperDiv.appendChild(this.canvas);
        }
        wrapperDiv.appendChild(div6);
        const html = this.props.onAddHTML(div6);
        if (html) {
          div6.innerHTML = html;
        }
      }
    }
    _getSizeAndAspect() {
      if (!this.device) {
        return { width: 1, height: 1, aspect: 1 };
      }
      const [width, height] = this.device?.getDefaultCanvasContext().getDevicePixelSize() || [1, 1];
      let aspect = 1;
      const canvas2 = this.device?.getDefaultCanvasContext().canvas;
      if (canvas2 && canvas2.clientHeight) {
        aspect = canvas2.clientWidth / canvas2.clientHeight;
      } else if (width > 0 && height > 0) {
        aspect = width / height;
      }
      return { width, height, aspect };
    }
    /** @deprecated Default viewport setup */
    _resizeViewport() {
      if (this.props.autoResizeViewport && this.device.gl) {
        this.device.gl.viewport(
          0,
          0,
          // @ts-expect-error Expose canvasContext
          this.device.gl.drawingBufferWidth,
          // @ts-expect-error Expose canvasContext
          this.device.gl.drawingBufferHeight
        );
      }
    }
    _beginFrameTimers() {
      this.frameRate.timeEnd();
      this.frameRate.timeStart();
      this.cpuTime.timeStart();
    }
    _endFrameTimers() {
      this.cpuTime.timeEnd();
    }
    // Event handling
    _startEventHandling() {
      if (this.canvas) {
        this.canvas.addEventListener("mousemove", this._onMousemove.bind(this));
        this.canvas.addEventListener("mouseleave", this._onMouseleave.bind(this));
      }
    }
    _onMousemove(event) {
      if (event instanceof MouseEvent) {
        this._getAnimationProps()._mousePosition = [event.offsetX, event.offsetY];
      }
    }
    _onMouseleave(event) {
      this._getAnimationProps()._mousePosition = null;
    }
  };
  var AnimationLoop = _AnimationLoop;
  __publicField(AnimationLoop, "defaultAnimationLoopProps", {
    device: null,
    onAddHTML: () => "",
    onInitialize: async () => null,
    onRender: () => {
    },
    onFinalize: () => {
    },
    onError: (error) => console.error(error),
    // eslint-disable-line no-console
    stats: luma.stats.get(`animation-loop-${statIdCounter++}`),
    // view parameters
    autoResizeViewport: false
  });

  // ../../node_modules/@luma.gl/engine/dist/model/model.js
  init_dist4();

  // ../../node_modules/@luma.gl/engine/dist/geometry/gpu-geometry.js
  init_dist4();

  // ../../node_modules/@luma.gl/engine/dist/utils/uid.js
  var uidCounters2 = {};
  function uid2(id = "id") {
    uidCounters2[id] = uidCounters2[id] || 1;
    const count3 = uidCounters2[id]++;
    return `${id}-${count3}`;
  }

  // ../../node_modules/@luma.gl/engine/dist/geometry/gpu-geometry.js
  var GPUGeometry = class {
    id;
    userData = {};
    /** Determines how vertices are read from the 'vertex' attributes */
    topology;
    bufferLayout = [];
    vertexCount;
    indices;
    attributes;
    constructor(props) {
      this.id = props.id || uid2("geometry");
      this.topology = props.topology;
      this.indices = props.indices || null;
      this.attributes = props.attributes;
      this.vertexCount = props.vertexCount;
      this.bufferLayout = props.bufferLayout || [];
      if (this.indices) {
        if (!(this.indices.usage & Buffer2.INDEX)) {
          throw new Error("Index buffer must have INDEX usage");
        }
      }
    }
    destroy() {
      this.indices?.destroy();
      for (const attribute of Object.values(this.attributes)) {
        attribute.destroy();
      }
    }
    getVertexCount() {
      return this.vertexCount;
    }
    getAttributes() {
      return this.attributes;
    }
    getIndexes() {
      return this.indices || null;
    }
    _calculateVertexCount(positions) {
      const vertexCount = positions.byteLength / 12;
      return vertexCount;
    }
  };
  function makeGPUGeometry(device, geometry) {
    if (geometry instanceof GPUGeometry) {
      return geometry;
    }
    const indices = getIndexBufferFromGeometry(device, geometry);
    const { attributes, bufferLayout } = getAttributeBuffersFromGeometry(device, geometry);
    return new GPUGeometry({
      topology: geometry.topology || "triangle-list",
      bufferLayout,
      vertexCount: geometry.vertexCount,
      indices,
      attributes
    });
  }
  function getIndexBufferFromGeometry(device, geometry) {
    if (!geometry.indices) {
      return void 0;
    }
    const data = geometry.indices.value;
    return device.createBuffer({ usage: Buffer2.INDEX, data });
  }
  function getAttributeBuffersFromGeometry(device, geometry) {
    const bufferLayout = [];
    const attributes = {};
    for (const [attributeName, attribute] of Object.entries(geometry.attributes)) {
      let name13 = attributeName;
      switch (attributeName) {
        case "POSITION":
          name13 = "positions";
          break;
        case "NORMAL":
          name13 = "normals";
          break;
        case "TEXCOORD_0":
          name13 = "texCoords";
          break;
        case "COLOR_0":
          name13 = "colors";
          break;
      }
      if (attribute) {
        attributes[name13] = device.createBuffer({
          data: attribute.value,
          id: `${attributeName}-buffer`
        });
        const { value, size, normalized } = attribute;
        bufferLayout.push({ name: name13, format: getVertexFormatFromAttribute(value, size, normalized) });
      }
    }
    const vertexCount = geometry._calculateVertexCount(geometry.attributes, geometry.indices);
    return { attributes, bufferLayout, vertexCount };
  }

  // ../../node_modules/@luma.gl/engine/dist/factories/pipeline-factory.js
  init_dist4();
  var _PipelineFactory = class {
    /** Get the singleton default pipeline factory for the specified device */
    static getDefaultPipelineFactory(device) {
      device._lumaData["defaultPipelineFactory"] = device._lumaData["defaultPipelineFactory"] || new _PipelineFactory(device);
      return device._lumaData["defaultPipelineFactory"];
    }
    device;
    cachingEnabled;
    destroyPolicy;
    debug;
    _hashCounter = 0;
    _hashes = {};
    _renderPipelineCache = {};
    _computePipelineCache = {};
    get [Symbol.toStringTag]() {
      return "PipelineFactory";
    }
    toString() {
      return `PipelineFactory(${this.device.id})`;
    }
    constructor(device) {
      this.device = device;
      this.cachingEnabled = device.props._cachePipelines;
      this.destroyPolicy = device.props._cacheDestroyPolicy;
      this.debug = device.props.debugFactories;
    }
    /** Return a RenderPipeline matching supplied props. Reuses an equivalent pipeline if already created. */
    createRenderPipeline(props) {
      if (!this.cachingEnabled) {
        return this.device.createRenderPipeline(props);
      }
      const allProps = { ...RenderPipeline.defaultProps, ...props };
      const cache3 = this._renderPipelineCache;
      const hash = this._hashRenderPipeline(allProps);
      let pipeline = cache3[hash]?.pipeline;
      if (!pipeline) {
        pipeline = this.device.createRenderPipeline({
          ...allProps,
          id: allProps.id ? `${allProps.id}-cached` : uid2("unnamed-cached")
        });
        pipeline.hash = hash;
        cache3[hash] = { pipeline, useCount: 1 };
        if (this.debug) {
          log2.warn(`${this}: ${pipeline} created, count=${cache3[hash].useCount}`)();
        }
      } else {
        cache3[hash].useCount++;
        if (this.debug) {
          log2.warn(`${this}: ${cache3[hash].pipeline} reused, count=${cache3[hash].useCount}, (id=${props.id})`)();
        }
      }
      return pipeline;
    }
    /** Return a ComputePipeline matching supplied props. Reuses an equivalent pipeline if already created. */
    createComputePipeline(props) {
      if (!this.cachingEnabled) {
        return this.device.createComputePipeline(props);
      }
      const allProps = { ...ComputePipeline.defaultProps, ...props };
      const cache3 = this._computePipelineCache;
      const hash = this._hashComputePipeline(allProps);
      let pipeline = cache3[hash]?.pipeline;
      if (!pipeline) {
        pipeline = this.device.createComputePipeline({
          ...allProps,
          id: allProps.id ? `${allProps.id}-cached` : void 0
        });
        pipeline.hash = hash;
        cache3[hash] = { pipeline, useCount: 1 };
        if (this.debug) {
          log2.warn(`${this}: ${pipeline} created, count=${cache3[hash].useCount}`)();
        }
      } else {
        cache3[hash].useCount++;
        if (this.debug) {
          log2.warn(`${this}: ${cache3[hash].pipeline} reused, count=${cache3[hash].useCount}, (id=${props.id})`)();
        }
      }
      return pipeline;
    }
    release(pipeline) {
      if (!this.cachingEnabled) {
        pipeline.destroy();
        return;
      }
      const cache3 = this._getCache(pipeline);
      const hash = pipeline.hash;
      cache3[hash].useCount--;
      if (cache3[hash].useCount === 0) {
        this._destroyPipeline(pipeline);
        if (this.debug) {
          log2.warn(`${this}: ${pipeline} released and destroyed`)();
        }
      } else if (cache3[hash].useCount < 0) {
        log2.error(`${this}: ${pipeline} released, useCount < 0, resetting`)();
        cache3[hash].useCount = 0;
      } else if (this.debug) {
        log2.warn(`${this}: ${pipeline} released, count=${cache3[hash].useCount}`)();
      }
    }
    // PRIVATE
    /** Destroy a cached pipeline, removing it from the cache (depending on destroy policy) */
    _destroyPipeline(pipeline) {
      const cache3 = this._getCache(pipeline);
      switch (this.destroyPolicy) {
        case "never":
          return false;
        case "unused":
          delete cache3[pipeline.hash];
          pipeline.destroy();
          return true;
      }
    }
    /** Get the appropriate cache for the type of pipeline */
    _getCache(pipeline) {
      let cache3;
      if (pipeline instanceof ComputePipeline) {
        cache3 = this._computePipelineCache;
      }
      if (pipeline instanceof RenderPipeline) {
        cache3 = this._renderPipelineCache;
      }
      if (!cache3) {
        throw new Error(`${this}`);
      }
      if (!cache3[pipeline.hash]) {
        throw new Error(`${this}: ${pipeline} matched incorrect entry`);
      }
      return cache3;
    }
    /** Calculate a hash based on all the inputs for a compute pipeline */
    _hashComputePipeline(props) {
      const { type } = this.device;
      const shaderHash = this._getHash(props.shader.source);
      return `${type}/C/${shaderHash}`;
    }
    /** Calculate a hash based on all the inputs for a render pipeline */
    _hashRenderPipeline(props) {
      const vsHash = props.vs ? this._getHash(props.vs.source) : 0;
      const fsHash = props.fs ? this._getHash(props.fs.source) : 0;
      const varyingHash = "-";
      const bufferLayoutHash = this._getHash(JSON.stringify(props.bufferLayout));
      const { type } = this.device;
      switch (type) {
        case "webgl":
          return `${type}/R/${vsHash}/${fsHash}V${varyingHash}BL${bufferLayoutHash}`;
        case "webgpu":
        default:
          const parameterHash = this._getHash(JSON.stringify(props.parameters));
          return `${type}/R/${vsHash}/${fsHash}V${varyingHash}T${props.topology}P${parameterHash}BL${bufferLayoutHash}`;
      }
    }
    _getHash(key) {
      if (this._hashes[key] === void 0) {
        this._hashes[key] = this._hashCounter++;
      }
      return this._hashes[key];
    }
  };
  var PipelineFactory = _PipelineFactory;
  __publicField(PipelineFactory, "defaultProps", { ...RenderPipeline.defaultProps });

  // ../../node_modules/@luma.gl/engine/dist/factories/shader-factory.js
  init_dist4();
  var _ShaderFactory = class {
    /** Returns the default ShaderFactory for the given {@link Device}, creating one if necessary. */
    static getDefaultShaderFactory(device) {
      device._lumaData["defaultShaderFactory"] ||= new _ShaderFactory(device);
      return device._lumaData["defaultShaderFactory"];
    }
    device;
    cachingEnabled;
    destroyPolicy;
    debug;
    _cache = {};
    get [Symbol.toStringTag]() {
      return "ShaderFactory";
    }
    toString() {
      return `${this[Symbol.toStringTag]}(${this.device.id})`;
    }
    /** @internal */
    constructor(device) {
      this.device = device;
      this.cachingEnabled = device.props._cacheShaders;
      this.destroyPolicy = device.props._cacheDestroyPolicy;
      this.debug = true;
    }
    /** Requests a {@link Shader} from the cache, creating a new Shader only if necessary. */
    createShader(props) {
      if (!this.cachingEnabled) {
        return this.device.createShader(props);
      }
      const key = this._hashShader(props);
      let cacheEntry = this._cache[key];
      if (!cacheEntry) {
        const shader = this.device.createShader({
          ...props,
          id: props.id ? `${props.id}-cached` : void 0
        });
        this._cache[key] = cacheEntry = { shader, useCount: 1 };
        if (this.debug) {
          log2.warn(`${this}: Created new shader ${shader.id}`)();
        }
      } else {
        cacheEntry.useCount++;
        if (this.debug) {
          log2.warn(`${this}: Reusing shader ${cacheEntry.shader.id} count=${cacheEntry.useCount}`)();
        }
      }
      return cacheEntry.shader;
    }
    /** Releases a previously-requested {@link Shader}, destroying it if no users remain. */
    release(shader) {
      if (!this.cachingEnabled) {
        shader.destroy();
        return;
      }
      const key = this._hashShader(shader);
      const cacheEntry = this._cache[key];
      if (cacheEntry) {
        cacheEntry.useCount--;
        if (cacheEntry.useCount === 0) {
          if (this.destroyPolicy === "unused") {
            delete this._cache[key];
            cacheEntry.shader.destroy();
            if (this.debug) {
              log2.warn(`${this}: Releasing shader ${shader.id}, destroyed`)();
            }
          }
        } else if (cacheEntry.useCount < 0) {
          throw new Error(`ShaderFactory: Shader ${shader.id} released too many times`);
        } else if (this.debug) {
          log2.warn(`${this}: Releasing shader ${shader.id} count=${cacheEntry.useCount}`)();
        }
      }
    }
    // PRIVATE
    _hashShader(value) {
      return `${value.stage}:${value.source}`;
    }
  };
  var ShaderFactory = _ShaderFactory;
  __publicField(ShaderFactory, "defaultProps", { ...Shader.defaultProps });

  // ../../node_modules/@luma.gl/engine/dist/debug/debug-shader-layout.js
  function getDebugTableForShaderLayout(layout, name13) {
    const table = {};
    const header = "Values";
    if (layout.attributes.length === 0 && !layout.varyings?.length) {
      return { "No attributes or varyings": { [header]: "N/A" } };
    }
    for (const attributeDeclaration of layout.attributes) {
      if (attributeDeclaration) {
        const glslDeclaration = `${attributeDeclaration.location} ${attributeDeclaration.name}: ${attributeDeclaration.type}`;
        table[`in ${glslDeclaration}`] = { [header]: attributeDeclaration.stepMode || "vertex" };
      }
    }
    for (const varyingDeclaration of layout.varyings || []) {
      const glslDeclaration = `${varyingDeclaration.location} ${varyingDeclaration.name}`;
      table[`out ${glslDeclaration}`] = { [header]: JSON.stringify(varyingDeclaration) };
    }
    return table;
  }

  // ../../node_modules/@luma.gl/engine/dist/debug/debug-framebuffer.js
  var canvas = null;
  var ctx = null;
  function debugFramebuffer(fbo, { id, minimap, opaque, top = "0", left = "0", rgbaScale = 1 }) {
    if (!canvas) {
      canvas = document.createElement("canvas");
      canvas.id = id;
      canvas.title = id;
      canvas.style.zIndex = "100";
      canvas.style.position = "absolute";
      canvas.style.top = top;
      canvas.style.left = left;
      canvas.style.border = "blue 5px solid";
      canvas.style.transform = "scaleY(-1)";
      document.body.appendChild(canvas);
      ctx = canvas.getContext("2d");
    }
    if (canvas.width !== fbo.width || canvas.height !== fbo.height) {
      canvas.width = fbo.width / 2;
      canvas.height = fbo.height / 2;
      canvas.style.width = "400px";
      canvas.style.height = "400px";
    }
    const color = fbo.device.readPixelsToArrayWebGL(fbo);
    const imageData = ctx?.createImageData(fbo.width, fbo.height);
    if (imageData) {
      const offset = 0;
      for (let i7 = 0; i7 < color.length; i7 += 4) {
        imageData.data[offset + i7 + 0] = color[i7 + 0] * rgbaScale;
        imageData.data[offset + i7 + 1] = color[i7 + 1] * rgbaScale;
        imageData.data[offset + i7 + 2] = color[i7 + 2] * rgbaScale;
        imageData.data[offset + i7 + 3] = opaque ? 255 : color[i7 + 3] * rgbaScale;
      }
      ctx?.putImageData(imageData, 0, 0);
    }
  }

  // ../../node_modules/@luma.gl/engine/dist/utils/deep-equal.js
  function deepEqual(a6, b4, depth) {
    if (a6 === b4) {
      return true;
    }
    if (!depth || !a6 || !b4) {
      return false;
    }
    if (Array.isArray(a6)) {
      if (!Array.isArray(b4) || a6.length !== b4.length) {
        return false;
      }
      for (let i7 = 0; i7 < a6.length; i7++) {
        if (!deepEqual(a6[i7], b4[i7], depth - 1)) {
          return false;
        }
      }
      return true;
    }
    if (Array.isArray(b4)) {
      return false;
    }
    if (typeof a6 === "object" && typeof b4 === "object") {
      const aKeys = Object.keys(a6);
      const bKeys = Object.keys(b4);
      if (aKeys.length !== bKeys.length) {
        return false;
      }
      for (const key of aKeys) {
        if (!b4.hasOwnProperty(key)) {
          return false;
        }
        if (!deepEqual(a6[key], b4[key], depth - 1)) {
          return false;
        }
      }
      return true;
    }
    return false;
  }

  // ../../node_modules/@luma.gl/engine/dist/utils/buffer-layout-helper.js
  init_dist4();
  var BufferLayoutHelper = class {
    bufferLayouts;
    constructor(bufferLayouts) {
      this.bufferLayouts = bufferLayouts;
    }
    getBufferLayout(name13) {
      return this.bufferLayouts.find((layout) => layout.name === name13) || null;
    }
    /** Get attribute names from a BufferLayout */
    getAttributeNamesForBuffer(bufferLayout) {
      return bufferLayout.attributes ? bufferLayout.attributes?.map((layout) => layout.attribute) : [bufferLayout.name];
    }
    mergeBufferLayouts(bufferLayouts1, bufferLayouts2) {
      const mergedLayouts = [...bufferLayouts1];
      for (const attribute of bufferLayouts2) {
        const index = mergedLayouts.findIndex((attribute2) => attribute2.name === attribute.name);
        if (index < 0) {
          mergedLayouts.push(attribute);
        } else {
          mergedLayouts[index] = attribute;
        }
      }
      return mergedLayouts;
    }
    getBufferIndex(bufferName) {
      const bufferIndex = this.bufferLayouts.findIndex((layout) => layout.name === bufferName);
      if (bufferIndex === -1) {
        log2.warn(`BufferLayout: Missing buffer for "${bufferName}".`)();
      }
      return bufferIndex;
    }
  };

  // ../../node_modules/@luma.gl/engine/dist/utils/buffer-layout-order.js
  function sortedBufferLayoutByShaderSourceLocations(shaderLayout, bufferLayout) {
    const shaderLayoutMap = Object.fromEntries(shaderLayout.attributes.map((attr) => [attr.name, attr.location]));
    const sortedLayout = bufferLayout.slice();
    sortedLayout.sort((a6, b4) => {
      const attributeNamesA = a6.attributes ? a6.attributes.map((attr) => attr.attribute) : [a6.name];
      const attributeNamesB = b4.attributes ? b4.attributes.map((attr) => attr.attribute) : [b4.name];
      const minLocationA = Math.min(...attributeNamesA.map((name13) => shaderLayoutMap[name13]));
      const minLocationB = Math.min(...attributeNamesB.map((name13) => shaderLayoutMap[name13]));
      return minLocationA - minLocationB;
    });
    return sortedLayout;
  }

  // ../../node_modules/@luma.gl/engine/dist/shader-inputs.js
  init_dist4();

  // ../../node_modules/@math.gl/types/dist/is-array.js
  function isTypedArray2(value) {
    return ArrayBuffer.isView(value) && !(value instanceof DataView);
  }
  function isNumberArray2(value) {
    if (Array.isArray(value)) {
      return value.length === 0 || typeof value[0] === "number";
    }
    return false;
  }
  function isNumericArray(value) {
    return isTypedArray2(value) || isNumberArray2(value);
  }

  // ../../node_modules/@luma.gl/engine/dist/model/split-uniforms-and-bindings.js
  function isUniformValue(value) {
    return isNumericArray(value) || typeof value === "number" || typeof value === "boolean";
  }
  function splitUniformsAndBindings(uniforms) {
    const result = { bindings: {}, uniforms: {} };
    Object.keys(uniforms).forEach((name13) => {
      const uniform = uniforms[name13];
      if (isUniformValue(uniform)) {
        result.uniforms[name13] = uniform;
      } else {
        result.bindings[name13] = uniform;
      }
    });
    return result;
  }

  // ../../node_modules/@luma.gl/engine/dist/shader-inputs.js
  var ShaderInputs = class {
    options = {
      disableWarnings: false
    };
    /**
     * The map of modules
     * @todo should should this include the resolved dependencies?
     */
    // @ts-ignore Fix typings
    modules;
    /** Stores the uniform values for each module */
    moduleUniforms;
    /** Stores the uniform bindings for each module  */
    moduleBindings;
    /** Tracks if uniforms have changed */
    // moduleUniformsChanged: Record<keyof ShaderPropsT, false | string>;
    /**
     * Create a new UniformStore instance
     * @param modules
     */
    constructor(modules, options) {
      Object.assign(this.options, options);
      const resolvedModules = getShaderModuleDependencies(Object.values(modules).filter((module) => module.dependencies));
      for (const resolvedModule of resolvedModules) {
        modules[resolvedModule.name] = resolvedModule;
      }
      log2.log(1, "Creating ShaderInputs with modules", Object.keys(modules))();
      this.modules = modules;
      this.moduleUniforms = {};
      this.moduleBindings = {};
      for (const [name13, module] of Object.entries(modules)) {
        this._addModule(module);
        if (module.name && name13 !== module.name && !this.options.disableWarnings) {
          log2.warn(`Module name: ${name13} vs ${module.name}`)();
        }
      }
    }
    /** Destroy */
    destroy() {
    }
    /**
     * Set module props
     */
    setProps(props) {
      for (const name13 of Object.keys(props)) {
        const moduleName = name13;
        const moduleProps = props[moduleName] || {};
        const module = this.modules[moduleName];
        if (!module) {
          if (!this.options.disableWarnings) {
            log2.warn(`Module ${name13} not found`)();
          }
          continue;
        }
        const oldUniforms = this.moduleUniforms[moduleName];
        const oldBindings = this.moduleBindings[moduleName];
        const uniformsAndBindings = module.getUniforms?.(moduleProps, oldUniforms) || moduleProps;
        const { uniforms, bindings } = splitUniformsAndBindings(uniformsAndBindings);
        this.moduleUniforms[moduleName] = { ...oldUniforms, ...uniforms };
        this.moduleBindings[moduleName] = { ...oldBindings, ...bindings };
      }
    }
    /**
     * Return the map of modules
     * @todo should should this include the resolved dependencies?
     */
    getModules() {
      return Object.values(this.modules);
    }
    /** Get all uniform values for all modules */
    getUniformValues() {
      return this.moduleUniforms;
    }
    /** Merges all bindings for the shader (from the various modules) */
    getBindingValues() {
      const bindings = {};
      for (const moduleBindings of Object.values(this.moduleBindings)) {
        Object.assign(bindings, moduleBindings);
      }
      return bindings;
    }
    // INTERNAL
    /** Return a debug table that can be used for console.table() or log.table() */
    getDebugTable() {
      const table = {};
      for (const [moduleName, module] of Object.entries(this.moduleUniforms)) {
        for (const [key, value] of Object.entries(module)) {
          table[`${moduleName}.${key}`] = {
            type: this.modules[moduleName].uniformTypes?.[key],
            value: String(value)
          };
        }
      }
      return table;
    }
    _addModule(module) {
      const moduleName = module.name;
      this.moduleUniforms[moduleName] = module.defaultUniforms || {};
      this.moduleBindings[moduleName] = {};
    }
  };

  // ../../node_modules/@luma.gl/engine/dist/async-texture/async-texture.js
  init_dist4();

  // ../../node_modules/@luma.gl/engine/dist/application-utils/load-file.js
  var pathPrefix2 = "";
  async function loadImageBitmap(url, opts) {
    const image = new Image();
    image.crossOrigin = opts?.crossOrigin || "anonymous";
    image.src = url.startsWith("http") ? url : pathPrefix2 + url;
    await image.decode();
    return opts ? await createImageBitmap(image, opts) : await createImageBitmap(image);
  }

  // ../../node_modules/@luma.gl/engine/dist/async-texture/async-texture.js
  var TextureCubeFaces = ["+X", "-X", "+Y", "-Y", "+Z", "-Z"];
  var CubeFaces = ["+X", "-X", "+Y", "-Y", "+Z", "-Z"];
  var _AsyncTexture = class {
    device;
    id;
    props;
    // TODO - should we type these as possibly `null`? It will make usage harder?
    // @ts-expect-error
    texture;
    // @ts-expect-error
    sampler;
    // @ts-expect-error
    view;
    ready;
    isReady = false;
    destroyed = false;
    resolveReady = () => {
    };
    rejectReady = () => {
    };
    get [Symbol.toStringTag]() {
      return "AsyncTexture";
    }
    toString() {
      return `AsyncTexture:"${this.id}"(${this.isReady ? "ready" : "loading"})`;
    }
    constructor(device, props) {
      this.device = device;
      const id = uid2("async-texture");
      this.props = { ..._AsyncTexture.defaultProps, id, ...props };
      this.id = this.props.id;
      props = { ...props };
      if (typeof props?.data === "string" && props.dimension === "2d") {
        props.data = loadImageBitmap(props.data);
      }
      if (props.mipmaps) {
        props.mipLevels = "auto";
      }
      this.ready = new Promise((resolve2, reject) => {
        this.resolveReady = () => {
          this.isReady = true;
          resolve2();
        };
        this.rejectReady = reject;
      });
      this.initAsync(props);
    }
    async initAsync(props) {
      const asyncData = props.data;
      const data = await awaitAllPromises(asyncData).then(void 0, this.rejectReady);
      if (this.destroyed) {
        return;
      }
      const size = this.props.width && this.props.height ? { width: this.props.width, height: this.props.height } : this.getTextureDataSize(data);
      if (!size) {
        throw new Error("Texture size could not be determined");
      }
      const syncProps = { ...size, ...props, data: void 0, mipLevels: 1 };
      const maxMips = this.device.getMipLevelCount(syncProps.width, syncProps.height);
      syncProps.mipLevels = this.props.mipLevels === "auto" ? maxMips : Math.min(maxMips, this.props.mipLevels);
      this.texture = this.device.createTexture(syncProps);
      this.sampler = this.texture.sampler;
      this.view = this.texture.view;
      if (props.data) {
        switch (this.props.dimension) {
          case "1d":
            this._setTexture1DData(this.texture, data);
            break;
          case "2d":
            this._setTexture2DData(data);
            break;
          case "3d":
            this._setTexture3DData(this.texture, data);
            break;
          case "2d-array":
            this._setTextureArrayData(this.texture, data);
            break;
          case "cube":
            this._setTextureCubeData(this.texture, data);
            break;
          case "cube-array":
            this._setTextureCubeArrayData(this.texture, data);
            break;
        }
      }
      if (this.props.mipmaps) {
        this.generateMipmaps();
      }
      log2.info(1, `${this} loaded`);
      this.resolveReady();
    }
    destroy() {
      if (this.texture) {
        this.texture.destroy();
        this.texture = null;
      }
      this.destroyed = true;
    }
    generateMipmaps() {
      this.texture.generateMipmapsWebGL();
    }
    /** Set sampler or create and set new Sampler from SamplerProps */
    setSampler(sampler = {}) {
      this.texture.setSampler(sampler instanceof Sampler ? sampler : this.device.createSampler(sampler));
    }
    /**
     * Textures are immutable and cannot be resized after creation,
     * but we can create a similar texture with the same parameters but a new size.
     * @note Does not copy contents of the texture
     * @note Mipmaps may need to be regenerated after resizing / setting new data
     * @todo Abort pending promise and create a texture with the new size?
     */
    resize(size) {
      if (!this.isReady) {
        throw new Error("Cannot resize texture before it is ready");
      }
      if (size.width === this.texture.width && size.height === this.texture.height) {
        return false;
      }
      if (this.texture) {
        const texture = this.texture;
        this.texture = texture.clone(size);
        texture.destroy();
      }
      return true;
    }
    /** Check if texture data is a typed array */
    isTextureLevelData(data) {
      const typedArray = data?.data;
      return ArrayBuffer.isView(typedArray);
    }
    /** Get the size of the texture described by the provided TextureData */
    getTextureDataSize(data) {
      if (!data) {
        return null;
      }
      if (ArrayBuffer.isView(data)) {
        return null;
      }
      if (Array.isArray(data)) {
        return this.getTextureDataSize(data[0]);
      }
      if (this.device.isExternalImage(data)) {
        return this.device.getExternalImageSize(data);
      }
      if (data && typeof data === "object" && data.constructor === Object) {
        const textureDataArray = Object.values(data);
        const untypedData = textureDataArray[0];
        return { width: untypedData.width, height: untypedData.height };
      }
      throw new Error("texture size deduction failed");
    }
    /** Convert luma.gl cubemap face constants to depth index */
    getCubeFaceDepth(face) {
      switch (face) {
        case "+X":
          return 0;
        case "-X":
          return 1;
        case "+Y":
          return 2;
        case "-Y":
          return 3;
        case "+Z":
          return 4;
        case "-Z":
          return 5;
        default:
          throw new Error(face);
      }
    }
    // EXPERIMENTAL
    setTextureData(data) {
    }
    /** Experimental: Set multiple mip levels */
    _setTexture1DData(texture, data) {
      throw new Error("setTexture1DData not supported in WebGL.");
    }
    /** Experimental: Set multiple mip levels */
    _setTexture2DData(lodData, depth = 0) {
      if (!this.texture) {
        throw new Error("Texture not initialized");
      }
      const lodArray = this._normalizeTextureData(lodData);
      if (lodArray.length > 1 && this.props.mipmaps !== false) {
        log2.warn(`Texture ${this.id} mipmap and multiple LODs.`)();
      }
      for (let mipLevel = 0; mipLevel < lodArray.length; mipLevel++) {
        const imageData = lodArray[mipLevel];
        if (this.device.isExternalImage(imageData)) {
          this.texture.copyExternalImage({ image: imageData, depth, mipLevel, flipY: true });
        } else {
          this.texture.copyImageData({ data: imageData.data, mipLevel });
        }
      }
    }
    /**
     * Experimental: Sets 3D texture data: multiple depth slices, multiple mip levels
     * @param data
     */
    _setTexture3DData(texture, data) {
      if (this.texture?.props.dimension !== "3d") {
        throw new Error(this.id);
      }
      for (let depth = 0; depth < data.length; depth++) {
        this._setTexture2DData(data[depth], depth);
      }
    }
    /**
     * Experimental: Set Cube texture data, multiple faces, multiple mip levels
     * @todo - could support TextureCubeArray with depth
     * @param data
     * @param index
     */
    _setTextureCubeData(texture, data) {
      if (this.texture?.props.dimension !== "cube") {
        throw new Error(this.id);
      }
      for (const [face, faceData] of Object.entries(data)) {
        const faceDepth = CubeFaces.indexOf(face);
        this._setTexture2DData(faceData, faceDepth);
      }
    }
    /**
     * Experimental: Sets texture array data, multiple levels, multiple depth slices
     * @param data
     */
    _setTextureArrayData(texture, data) {
      if (this.texture?.props.dimension !== "2d-array") {
        throw new Error(this.id);
      }
      for (let depth = 0; depth < data.length; depth++) {
        this._setTexture2DData(data[depth], depth);
      }
    }
    /**
     * Experimental: Sets texture cube array, multiple faces, multiple levels, multiple mip levels
     * @param data
     */
    _setTextureCubeArrayData(texture, data) {
      throw new Error("setTextureCubeArrayData not supported in WebGL2.");
    }
    /** Experimental */
    _setTextureCubeFaceData(texture, lodData, face, depth = 0) {
      if (Array.isArray(lodData) && lodData.length > 1 && this.props.mipmaps !== false) {
        log2.warn(`${this.id} has mipmap and multiple LODs.`)();
      }
      const faceDepth = TextureCubeFaces.indexOf(face);
      this._setTexture2DData(lodData, faceDepth);
    }
    /**
     * Normalize TextureData to an array of TextureImageData / ExternalImages
     * @param data
     * @param options
     * @returns array of TextureImageData / ExternalImages
     */
    _normalizeTextureData(data) {
      const options = this.texture;
      let mipLevelArray;
      if (ArrayBuffer.isView(data)) {
        mipLevelArray = [
          {
            // ts-expect-error does data really need to be Uint8ClampedArray?
            data,
            width: options.width,
            height: options.height
            // depth: options.depth
          }
        ];
      } else if (!Array.isArray(data)) {
        mipLevelArray = [data];
      } else {
        mipLevelArray = data;
      }
      return mipLevelArray;
    }
  };
  var AsyncTexture = _AsyncTexture;
  __publicField(AsyncTexture, "defaultProps", {
    ...Texture.defaultProps,
    data: null,
    mipmaps: false
  });
  async function awaitAllPromises(x4) {
    x4 = await x4;
    if (Array.isArray(x4)) {
      return await Promise.all(x4.map(awaitAllPromises));
    }
    if (x4 && typeof x4 === "object" && x4.constructor === Object) {
      const object = x4;
      const values = await Promise.all(Object.values(object));
      const keys = Object.keys(object);
      const resolvedObject = {};
      for (let i7 = 0; i7 < keys.length; i7++) {
        resolvedObject[keys[i7]] = values[i7];
      }
      return resolvedObject;
    }
    return x4;
  }

  // ../../node_modules/@luma.gl/engine/dist/model/model.js
  var LOG_DRAW_PRIORITY = 2;
  var LOG_DRAW_TIMEOUT = 1e4;
  var _Model = class {
    device;
    id;
    // @ts-expect-error assigned in function called from constructor
    source;
    // @ts-expect-error assigned in function called from constructor
    vs;
    // @ts-expect-error assigned in function called from constructor
    fs;
    pipelineFactory;
    shaderFactory;
    userData = {};
    // Fixed properties (change can trigger pipeline rebuild)
    /** The render pipeline GPU parameters, depth testing etc */
    parameters;
    /** The primitive topology */
    topology;
    /** Buffer layout */
    bufferLayout;
    // Dynamic properties
    /** Use instanced rendering */
    isInstanced = void 0;
    /** instance count. `undefined` means not instanced */
    instanceCount = 0;
    /** Vertex count */
    vertexCount;
    /** Index buffer */
    indexBuffer = null;
    /** Buffer-valued attributes */
    bufferAttributes = {};
    /** Constant-valued attributes */
    constantAttributes = {};
    /** Bindings (textures, samplers, uniform buffers) */
    bindings = {};
    /**
     * VertexArray
     * @note not implemented: if bufferLayout is updated, vertex array has to be rebuilt!
     * @todo - allow application to define multiple vertex arrays?
     * */
    vertexArray;
    /** TransformFeedback, WebGL 2 only. */
    transformFeedback = null;
    /** The underlying GPU "program". @note May be recreated if parameters change */
    pipeline;
    /** ShaderInputs instance */
    // @ts-expect-error Assigned in function called by constructor
    shaderInputs;
    // @ts-expect-error Assigned in function called by constructor
    _uniformStore;
    _attributeInfos = {};
    _gpuGeometry = null;
    props;
    _pipelineNeedsUpdate = "newly created";
    _needsRedraw = "initializing";
    _destroyed = false;
    /** "Time" of last draw. Monotonically increasing timestamp */
    _lastDrawTimestamp = -1;
    get [Symbol.toStringTag]() {
      return "Model";
    }
    toString() {
      return `Model(${this.id})`;
    }
    constructor(device, props) {
      this.props = { ..._Model.defaultProps, ...props };
      props = this.props;
      this.id = props.id || uid2("model");
      this.device = device;
      Object.assign(this.userData, props.userData);
      const moduleMap = Object.fromEntries(this.props.modules?.map((module) => [module.name, module]) || []);
      const shaderInputs = props.shaderInputs || new ShaderInputs(moduleMap, { disableWarnings: this.props.disableWarnings });
      this.setShaderInputs(shaderInputs);
      const platformInfo = getPlatformInfo(device);
      const modules = (
        // @ts-ignore shaderInputs is assigned in setShaderInputs above.
        (this.props.modules?.length > 0 ? this.props.modules : this.shaderInputs?.getModules()) || []
      );
      const isWebGPU = this.device.type === "webgpu";
      if (isWebGPU && this.props.source) {
        const { source: source4, getUniforms: getUniforms6 } = this.props.shaderAssembler.assembleWGSLShader({
          platformInfo,
          ...this.props,
          modules
        });
        this.source = source4;
        this._getModuleUniforms = getUniforms6;
        this.props.shaderLayout ||= getShaderLayoutFromWGSL(this.source);
      } else {
        const { vs: vs14, fs: fs11, getUniforms: getUniforms6 } = this.props.shaderAssembler.assembleGLSLShaderPair({
          platformInfo,
          ...this.props,
          modules
        });
        this.vs = vs14;
        this.fs = fs11;
        this._getModuleUniforms = getUniforms6;
      }
      this.vertexCount = this.props.vertexCount;
      this.instanceCount = this.props.instanceCount;
      this.topology = this.props.topology;
      this.bufferLayout = this.props.bufferLayout;
      this.parameters = this.props.parameters;
      if (props.geometry) {
        this.setGeometry(props.geometry);
      }
      this.pipelineFactory = props.pipelineFactory || PipelineFactory.getDefaultPipelineFactory(this.device);
      this.shaderFactory = props.shaderFactory || ShaderFactory.getDefaultShaderFactory(this.device);
      this.pipeline = this._updatePipeline();
      this.vertexArray = device.createVertexArray({
        shaderLayout: this.pipeline.shaderLayout,
        bufferLayout: this.pipeline.bufferLayout
      });
      if (this._gpuGeometry) {
        this._setGeometryAttributes(this._gpuGeometry);
      }
      if ("isInstanced" in props) {
        this.isInstanced = props.isInstanced;
      }
      if (props.instanceCount) {
        this.setInstanceCount(props.instanceCount);
      }
      if (props.vertexCount) {
        this.setVertexCount(props.vertexCount);
      }
      if (props.indexBuffer) {
        this.setIndexBuffer(props.indexBuffer);
      }
      if (props.attributes) {
        this.setAttributes(props.attributes);
      }
      if (props.constantAttributes) {
        this.setConstantAttributes(props.constantAttributes);
      }
      if (props.bindings) {
        this.setBindings(props.bindings);
      }
      if (props.transformFeedback) {
        this.transformFeedback = props.transformFeedback;
      }
      Object.seal(this);
    }
    destroy() {
      if (!this._destroyed) {
        this.pipelineFactory.release(this.pipeline);
        this.shaderFactory.release(this.pipeline.vs);
        if (this.pipeline.fs) {
          this.shaderFactory.release(this.pipeline.fs);
        }
        this._uniformStore.destroy();
        this._gpuGeometry?.destroy();
        this._destroyed = true;
      }
    }
    // Draw call
    /** Query redraw status. Clears the status. */
    needsRedraw() {
      if (this._getBindingsUpdateTimestamp() > this._lastDrawTimestamp) {
        this.setNeedsRedraw("contents of bound textures or buffers updated");
      }
      const needsRedraw = this._needsRedraw;
      this._needsRedraw = false;
      return needsRedraw;
    }
    /** Mark the model as needing a redraw */
    setNeedsRedraw(reason) {
      this._needsRedraw ||= reason;
    }
    predraw() {
      this.updateShaderInputs();
      this.pipeline = this._updatePipeline();
    }
    draw(renderPass) {
      const loadingBinding = this._areBindingsLoading();
      if (loadingBinding) {
        log2.info(LOG_DRAW_PRIORITY, `>>> DRAWING ABORTED ${this.id}: ${loadingBinding} not loaded`)();
        return false;
      }
      try {
        renderPass.pushDebugGroup(`${this}.predraw(${renderPass})`);
        this.predraw();
      } finally {
        renderPass.popDebugGroup();
      }
      let drawSuccess;
      try {
        renderPass.pushDebugGroup(`${this}.draw(${renderPass})`);
        this._logDrawCallStart();
        this.pipeline = this._updatePipeline();
        const syncBindings = this._getBindings();
        this.pipeline.setBindings(syncBindings, {
          disableWarnings: this.props.disableWarnings
        });
        const { indexBuffer } = this.vertexArray;
        const indexCount = indexBuffer ? indexBuffer.byteLength / (indexBuffer.indexType === "uint32" ? 4 : 2) : void 0;
        drawSuccess = this.pipeline.draw({
          renderPass,
          vertexArray: this.vertexArray,
          isInstanced: this.isInstanced,
          vertexCount: this.vertexCount,
          instanceCount: this.instanceCount,
          indexCount,
          transformFeedback: this.transformFeedback || void 0,
          // WebGL shares underlying cached pipelines even for models that have different parameters and topology,
          // so we must provide our unique parameters to each draw
          // (In WebGPU most parameters are encoded in the pipeline and cannot be changed per draw call)
          parameters: this.parameters,
          topology: this.topology
        });
      } finally {
        renderPass.popDebugGroup();
        this._logDrawCallEnd();
      }
      this._logFramebuffer(renderPass);
      if (drawSuccess) {
        this._lastDrawTimestamp = this.device.timestamp;
        this._needsRedraw = false;
      } else {
        this._needsRedraw = "waiting for resource initialization";
      }
      return drawSuccess;
    }
    // Update fixed fields (can trigger pipeline rebuild)
    /**
     * Updates the optional geometry
     * Geometry, set topology and bufferLayout
     * @note Can trigger a pipeline rebuild / pipeline cache fetch on WebGPU
     */
    setGeometry(geometry) {
      this._gpuGeometry?.destroy();
      const gpuGeometry = geometry && makeGPUGeometry(this.device, geometry);
      if (gpuGeometry) {
        this.setTopology(gpuGeometry.topology || "triangle-list");
        const bufferLayoutHelper = new BufferLayoutHelper(this.bufferLayout);
        this.bufferLayout = bufferLayoutHelper.mergeBufferLayouts(gpuGeometry.bufferLayout, this.bufferLayout);
        if (this.vertexArray) {
          this._setGeometryAttributes(gpuGeometry);
        }
      }
      this._gpuGeometry = gpuGeometry;
    }
    /**
     * Updates the primitive topology ('triangle-list', 'triangle-strip' etc).
     * @note Triggers a pipeline rebuild / pipeline cache fetch on WebGPU
     */
    setTopology(topology) {
      if (topology !== this.topology) {
        this.topology = topology;
        this._setPipelineNeedsUpdate("topology");
      }
    }
    /**
     * Updates the buffer layout.
     * @note Triggers a pipeline rebuild / pipeline cache fetch
     */
    setBufferLayout(bufferLayout) {
      const bufferLayoutHelper = new BufferLayoutHelper(this.bufferLayout);
      this.bufferLayout = this._gpuGeometry ? bufferLayoutHelper.mergeBufferLayouts(bufferLayout, this._gpuGeometry.bufferLayout) : bufferLayout;
      this._setPipelineNeedsUpdate("bufferLayout");
      this.pipeline = this._updatePipeline();
      this.vertexArray = this.device.createVertexArray({
        shaderLayout: this.pipeline.shaderLayout,
        bufferLayout: this.pipeline.bufferLayout
      });
      if (this._gpuGeometry) {
        this._setGeometryAttributes(this._gpuGeometry);
      }
    }
    /**
     * Set GPU parameters.
     * @note Can trigger a pipeline rebuild / pipeline cache fetch.
     * @param parameters
     */
    setParameters(parameters2) {
      if (!deepEqual(parameters2, this.parameters, 2)) {
        this.parameters = parameters2;
        this._setPipelineNeedsUpdate("parameters");
      }
    }
    // Update dynamic fields
    /**
     * Updates the instance count (used in draw calls)
     * @note Any attributes with stepMode=instance need to be at least this big
     */
    setInstanceCount(instanceCount) {
      this.instanceCount = instanceCount;
      if (this.isInstanced === void 0 && instanceCount > 0) {
        this.isInstanced = true;
      }
      this.setNeedsRedraw("instanceCount");
    }
    /**
     * Updates the vertex count (used in draw calls)
     * @note Any attributes with stepMode=vertex need to be at least this big
     */
    setVertexCount(vertexCount) {
      this.vertexCount = vertexCount;
      this.setNeedsRedraw("vertexCount");
    }
    /** Set the shader inputs */
    setShaderInputs(shaderInputs) {
      this.shaderInputs = shaderInputs;
      this._uniformStore = new UniformStore(this.shaderInputs.modules);
      for (const [moduleName, module] of Object.entries(this.shaderInputs.modules)) {
        if (shaderModuleHasUniforms(module)) {
          const uniformBuffer = this._uniformStore.getManagedUniformBuffer(this.device, moduleName);
          this.bindings[`${moduleName}Uniforms`] = uniformBuffer;
        }
      }
      this.setNeedsRedraw("shaderInputs");
    }
    /** Update uniform buffers from the model's shader inputs */
    updateShaderInputs() {
      this._uniformStore.setUniforms(this.shaderInputs.getUniformValues());
      this.setBindings(this.shaderInputs.getBindingValues());
      this.setNeedsRedraw("shaderInputs");
    }
    /**
     * Sets bindings (textures, samplers, uniform buffers)
     */
    setBindings(bindings) {
      Object.assign(this.bindings, bindings);
      this.setNeedsRedraw("bindings");
    }
    /**
     * Updates optional transform feedback. WebGL only.
     */
    setTransformFeedback(transformFeedback) {
      this.transformFeedback = transformFeedback;
      this.setNeedsRedraw("transformFeedback");
    }
    /**
     * Sets the index buffer
     * @todo - how to unset it if we change geometry?
     */
    setIndexBuffer(indexBuffer) {
      this.vertexArray.setIndexBuffer(indexBuffer);
      this.setNeedsRedraw("indexBuffer");
    }
    /**
     * Sets attributes (buffers)
     * @note Overrides any attributes previously set with the same name
     */
    setAttributes(buffers, options) {
      const disableWarnings = options?.disableWarnings ?? this.props.disableWarnings;
      if (buffers["indices"]) {
        log2.warn(`Model:${this.id} setAttributes() - indexBuffer should be set using setIndexBuffer()`)();
      }
      this.bufferLayout = sortedBufferLayoutByShaderSourceLocations(this.pipeline.shaderLayout, this.bufferLayout);
      const bufferLayoutHelper = new BufferLayoutHelper(this.bufferLayout);
      for (const [bufferName, buffer] of Object.entries(buffers)) {
        const bufferLayout = bufferLayoutHelper.getBufferLayout(bufferName);
        if (!bufferLayout) {
          if (!disableWarnings) {
            log2.warn(`Model(${this.id}): Missing layout for buffer "${bufferName}".`)();
          }
          continue;
        }
        const attributeNames = bufferLayoutHelper.getAttributeNamesForBuffer(bufferLayout);
        let set11 = false;
        for (const attributeName of attributeNames) {
          const attributeInfo = this._attributeInfos[attributeName];
          if (attributeInfo) {
            const location = this.device.type === "webgpu" ? bufferLayoutHelper.getBufferIndex(attributeInfo.bufferName) : attributeInfo.location;
            this.vertexArray.setBuffer(location, buffer);
            set11 = true;
          }
        }
        if (!set11 && !disableWarnings) {
          log2.warn(`Model(${this.id}): Ignoring buffer "${buffer.id}" for unknown attribute "${bufferName}"`)();
        }
      }
      this.setNeedsRedraw("attributes");
    }
    /**
     * Sets constant attributes
     * @note Overrides any attributes previously set with the same name
     * Constant attributes are only supported in WebGL, not in WebGPU
     * Any attribute that is disabled in the current vertex array object
     * is read from the context's global constant value for that attribute location.
     * @param constantAttributes
     */
    setConstantAttributes(attributes, options) {
      for (const [attributeName, value] of Object.entries(attributes)) {
        const attributeInfo = this._attributeInfos[attributeName];
        if (attributeInfo) {
          this.vertexArray.setConstantWebGL(attributeInfo.location, value);
        } else if (!(options?.disableWarnings ?? this.props.disableWarnings)) {
          log2.warn(`Model "${this.id}: Ignoring constant supplied for unknown attribute "${attributeName}"`)();
        }
      }
      this.setNeedsRedraw("constants");
    }
    // INTERNAL METHODS
    /** Check that bindings are loaded. Returns id of first binding that is still loading. */
    _areBindingsLoading() {
      for (const binding of Object.values(this.bindings)) {
        if (binding instanceof AsyncTexture && !binding.isReady) {
          return binding.id;
        }
      }
      return false;
    }
    /** Extracts texture view from loaded async textures. Returns null if any textures have not yet been loaded. */
    _getBindings() {
      const validBindings = {};
      for (const [name13, binding] of Object.entries(this.bindings)) {
        if (binding instanceof AsyncTexture) {
          if (binding.isReady) {
            validBindings[name13] = binding.texture;
          }
        } else {
          validBindings[name13] = binding;
        }
      }
      return validBindings;
    }
    /** Get the timestamp of the latest updated bound GPU memory resource (buffer/texture). */
    _getBindingsUpdateTimestamp() {
      let timestamp = 0;
      for (const binding of Object.values(this.bindings)) {
        if (binding instanceof TextureView) {
          timestamp = Math.max(timestamp, binding.texture.updateTimestamp);
        } else if (binding instanceof Buffer2 || binding instanceof Texture) {
          timestamp = Math.max(timestamp, binding.updateTimestamp);
        } else if (binding instanceof AsyncTexture) {
          timestamp = binding.texture ? Math.max(timestamp, binding.texture.updateTimestamp) : (
            // The texture will become available in the future
            Infinity
          );
        } else if (!(binding instanceof Sampler)) {
          timestamp = Math.max(timestamp, binding.buffer.updateTimestamp);
        }
      }
      return timestamp;
    }
    /**
     * Updates the optional geometry attributes
     * Geometry, sets several attributes, indexBuffer, and also vertex count
     * @note Can trigger a pipeline rebuild / pipeline cache fetch on WebGPU
     */
    _setGeometryAttributes(gpuGeometry) {
      const attributes = { ...gpuGeometry.attributes };
      for (const [attributeName] of Object.entries(attributes)) {
        if (!this.pipeline.shaderLayout.attributes.find((layout) => layout.name === attributeName) && attributeName !== "positions") {
          delete attributes[attributeName];
        }
      }
      this.vertexCount = gpuGeometry.vertexCount;
      this.setIndexBuffer(gpuGeometry.indices || null);
      this.setAttributes(gpuGeometry.attributes, { disableWarnings: true });
      this.setAttributes(attributes, { disableWarnings: this.props.disableWarnings });
      this.setNeedsRedraw("geometry attributes");
    }
    /** Mark pipeline as needing update */
    _setPipelineNeedsUpdate(reason) {
      this._pipelineNeedsUpdate ||= reason;
      this.setNeedsRedraw(reason);
    }
    /** Update pipeline if needed */
    _updatePipeline() {
      if (this._pipelineNeedsUpdate) {
        let prevShaderVs = null;
        let prevShaderFs = null;
        if (this.pipeline) {
          log2.log(1, `Model ${this.id}: Recreating pipeline because "${this._pipelineNeedsUpdate}".`)();
          prevShaderVs = this.pipeline.vs;
          prevShaderFs = this.pipeline.fs;
        }
        this._pipelineNeedsUpdate = false;
        const vs14 = this.shaderFactory.createShader({
          id: `${this.id}-vertex`,
          stage: "vertex",
          source: this.source || this.vs,
          debugShaders: this.props.debugShaders
        });
        let fs11 = null;
        if (this.source) {
          fs11 = vs14;
        } else if (this.fs) {
          fs11 = this.shaderFactory.createShader({
            id: `${this.id}-fragment`,
            stage: "fragment",
            source: this.source || this.fs,
            debugShaders: this.props.debugShaders
          });
        }
        this.pipeline = this.pipelineFactory.createRenderPipeline({
          ...this.props,
          bufferLayout: this.bufferLayout,
          topology: this.topology,
          parameters: this.parameters,
          // TODO - why set bindings here when we reset them every frame?
          // Should we expose a BindGroup abstraction?
          bindings: this._getBindings(),
          vs: vs14,
          fs: fs11
        });
        this._attributeInfos = getAttributeInfosFromLayouts(this.pipeline.shaderLayout, this.bufferLayout);
        if (prevShaderVs)
          this.shaderFactory.release(prevShaderVs);
        if (prevShaderFs)
          this.shaderFactory.release(prevShaderFs);
      }
      return this.pipeline;
    }
    /** Throttle draw call logging */
    _lastLogTime = 0;
    _logOpen = false;
    _logDrawCallStart() {
      const logDrawTimeout = log2.level > 3 ? 0 : LOG_DRAW_TIMEOUT;
      if (log2.level < 2 || Date.now() - this._lastLogTime < logDrawTimeout) {
        return;
      }
      this._lastLogTime = Date.now();
      this._logOpen = true;
      log2.group(LOG_DRAW_PRIORITY, `>>> DRAWING MODEL ${this.id}`, { collapsed: log2.level <= 2 })();
    }
    _logDrawCallEnd() {
      if (this._logOpen) {
        const shaderLayoutTable = getDebugTableForShaderLayout(this.pipeline.shaderLayout, this.id);
        log2.table(LOG_DRAW_PRIORITY, shaderLayoutTable)();
        const uniformTable = this.shaderInputs.getDebugTable();
        log2.table(LOG_DRAW_PRIORITY, uniformTable)();
        const attributeTable = this._getAttributeDebugTable();
        log2.table(LOG_DRAW_PRIORITY, this._attributeInfos)();
        log2.table(LOG_DRAW_PRIORITY, attributeTable)();
        log2.groupEnd(LOG_DRAW_PRIORITY)();
        this._logOpen = false;
      }
    }
    _drawCount = 0;
    _logFramebuffer(renderPass) {
      const debugFramebuffers = this.device.props.debugFramebuffers;
      this._drawCount++;
      if (!debugFramebuffers) {
        return;
      }
      const framebuffer = renderPass.props.framebuffer;
      if (framebuffer) {
        debugFramebuffer(framebuffer, { id: framebuffer.id, minimap: true });
      }
    }
    _getAttributeDebugTable() {
      const table = {};
      for (const [name13, attributeInfo] of Object.entries(this._attributeInfos)) {
        const values = this.vertexArray.attributes[attributeInfo.location];
        table[attributeInfo.location] = {
          name: name13,
          type: attributeInfo.shaderType,
          values: values ? this._getBufferOrConstantValues(values, attributeInfo.bufferDataType) : "null"
        };
      }
      if (this.vertexArray.indexBuffer) {
        const { indexBuffer } = this.vertexArray;
        const values = indexBuffer.indexType === "uint32" ? new Uint32Array(indexBuffer.debugData) : new Uint16Array(indexBuffer.debugData);
        table["indices"] = {
          name: "indices",
          type: indexBuffer.indexType,
          values: values.toString()
        };
      }
      return table;
    }
    // TODO - fix typing of luma data types
    _getBufferOrConstantValues(attribute, dataType) {
      const TypedArrayConstructor = getTypedArrayConstructor(dataType);
      const typedArray = attribute instanceof Buffer2 ? new TypedArrayConstructor(attribute.debugData) : attribute;
      return typedArray.toString();
    }
  };
  var Model = _Model;
  __publicField(Model, "defaultProps", {
    ...RenderPipeline.defaultProps,
    source: void 0,
    vs: null,
    fs: null,
    id: "unnamed",
    handle: void 0,
    userData: {},
    defines: {},
    modules: [],
    geometry: null,
    indexBuffer: null,
    attributes: {},
    constantAttributes: {},
    varyings: [],
    isInstanced: void 0,
    instanceCount: 0,
    vertexCount: 0,
    shaderInputs: void 0,
    pipelineFactory: void 0,
    shaderFactory: void 0,
    transformFeedback: void 0,
    shaderAssembler: ShaderAssembler.getDefaultShaderAssembler(),
    debugShaders: void 0,
    disableWarnings: void 0
  });
  function shaderModuleHasUniforms(module) {
    return Boolean(module.uniformTypes && !isObjectEmpty(module.uniformTypes));
  }
  function getPlatformInfo(device) {
    return {
      type: device.type,
      shaderLanguage: device.info.shadingLanguage,
      shaderLanguageVersion: device.info.shadingLanguageVersion,
      gpu: device.info.gpu,
      // HACK - we pretend that the DeviceFeatures is a Set, it has a similar API
      features: device.features
    };
  }
  function isObjectEmpty(obj) {
    for (const key in obj) {
      return false;
    }
    return true;
  }

  // ../../node_modules/@luma.gl/engine/dist/compute/buffer-transform.js
  init_dist4();
  var _BufferTransform = class {
    device;
    model;
    transformFeedback;
    static isSupported(device) {
      return device?.info?.type === "webgl";
    }
    constructor(device, props = _BufferTransform.defaultProps) {
      if (!_BufferTransform.isSupported(device)) {
        throw new Error("BufferTransform not yet implemented on WebGPU");
      }
      this.device = device;
      this.model = new Model(this.device, {
        id: props.id || "buffer-transform-model",
        fs: props.fs || getPassthroughFS(),
        topology: props.topology || "point-list",
        varyings: props.outputs || props.varyings,
        ...props
      });
      this.transformFeedback = this.device.createTransformFeedback({
        layout: this.model.pipeline.shaderLayout,
        // @ts-expect-error TODO
        buffers: props.feedbackBuffers
      });
      this.model.setTransformFeedback(this.transformFeedback);
      Object.seal(this);
    }
    /** Destroy owned resources. */
    destroy() {
      if (this.model) {
        this.model.destroy();
      }
    }
    /** @deprecated Use {@link destroy}. */
    delete() {
      this.destroy();
    }
    /** Run one transform loop. */
    run(options) {
      if (options?.inputBuffers) {
        this.model.setAttributes(options.inputBuffers);
      }
      if (options?.outputBuffers) {
        this.transformFeedback.setBuffers(options.outputBuffers);
      }
      const renderPass = this.device.beginRenderPass(options);
      this.model.draw(renderPass);
      renderPass.end();
    }
    // DEPRECATED METHODS
    /** @deprecated App knows what buffers it is passing in - Returns the {@link Buffer} or {@link BufferRange} for given varying name. */
    getBuffer(varyingName) {
      return this.transformFeedback.getBuffer(varyingName);
    }
    /** @deprecated App knows what buffers it is passing in - Reads the {@link Buffer} or {@link BufferRange} for given varying name. */
    readAsync(varyingName) {
      const result = this.getBuffer(varyingName);
      if (!result) {
        throw new Error("BufferTransform#getBuffer");
      }
      if (result instanceof Buffer2) {
        return result.readAsync();
      }
      const { buffer, byteOffset = 0, byteLength = buffer.byteLength } = result;
      return buffer.readAsync(byteOffset, byteLength);
    }
  };
  var BufferTransform = _BufferTransform;
  __publicField(BufferTransform, "defaultProps", {
    ...Model.defaultProps,
    outputs: void 0,
    feedbackBuffers: void 0
  });

  // ../../node_modules/@luma.gl/engine/dist/compute/texture-transform.js
  var FS_OUTPUT_VARIABLE = "transform_output";
  var TextureTransform = class {
    device;
    model;
    sampler;
    currentIndex = 0;
    samplerTextureMap = null;
    bindings = [];
    // each element is an object : {sourceTextures, targetTexture, framebuffer}
    resources = {};
    // resources to be deleted
    constructor(device, props) {
      this.device = device;
      this.sampler = device.createSampler({
        addressModeU: "clamp-to-edge",
        addressModeV: "clamp-to-edge",
        minFilter: "nearest",
        magFilter: "nearest",
        mipmapFilter: "nearest"
      });
      this.model = new Model(this.device, {
        id: props.id || uid2("texture-transform-model"),
        fs: props.fs || getPassthroughFS({
          input: props.targetTextureVarying,
          inputChannels: props.targetTextureChannels,
          output: FS_OUTPUT_VARIABLE
        }),
        vertexCount: props.vertexCount,
        // TODO(donmccurdy): Naming?
        ...props
      });
      this._initialize(props);
      Object.seal(this);
    }
    // Delete owned resources.
    destroy() {
      this.model.destroy();
      for (const binding of this.bindings) {
        binding.framebuffer?.destroy();
      }
    }
    /** @deprecated Use {@link destroy}. */
    delete() {
      this.destroy();
    }
    run(options) {
      const { framebuffer } = this.bindings[this.currentIndex];
      const renderPass = this.device.beginRenderPass({ framebuffer, ...options });
      this.model.draw(renderPass);
      renderPass.end();
      this.device.submit();
    }
    getTargetTexture() {
      const { targetTexture } = this.bindings[this.currentIndex];
      return targetTexture;
    }
    getFramebuffer() {
      const currentResources = this.bindings[this.currentIndex];
      return currentResources.framebuffer;
    }
    // Private
    _initialize(props) {
      this._updateBindings(props);
    }
    _updateBindings(props) {
      this.bindings[this.currentIndex] = this._updateBinding(this.bindings[this.currentIndex], props);
    }
    _updateBinding(binding, { sourceBuffers, sourceTextures, targetTexture }) {
      if (!binding) {
        binding = {
          sourceBuffers: {},
          sourceTextures: {},
          // @ts-expect-error
          targetTexture: null
        };
      }
      Object.assign(binding.sourceTextures, sourceTextures);
      Object.assign(binding.sourceBuffers, sourceBuffers);
      if (targetTexture) {
        binding.targetTexture = targetTexture;
        const { width, height } = targetTexture;
        if (binding.framebuffer) {
          binding.framebuffer.destroy();
        }
        binding.framebuffer = this.device.createFramebuffer({
          id: "transform-framebuffer",
          width,
          height,
          colorAttachments: [targetTexture]
        });
        binding.framebuffer.resize({ width, height });
      }
      return binding;
    }
    // set texture filtering parameters on source textures.
    _setSourceTextureParameters() {
      const index = this.currentIndex;
      const { sourceTextures } = this.bindings[index];
      for (const name13 in sourceTextures) {
        sourceTextures[name13].sampler = this.sampler;
      }
    }
  };

  // ../../node_modules/@luma.gl/engine/dist/geometry/geometry.js
  var Geometry = class {
    id;
    /** Determines how vertices are read from the 'vertex' attributes */
    topology;
    vertexCount;
    indices;
    attributes;
    userData = {};
    constructor(props) {
      const { attributes = {}, indices = null, vertexCount = null } = props;
      this.id = props.id || uid2("geometry");
      this.topology = props.topology;
      if (indices) {
        this.indices = ArrayBuffer.isView(indices) ? { value: indices, size: 1 } : indices;
      }
      this.attributes = {};
      for (const [attributeName, attributeValue] of Object.entries(attributes)) {
        const attribute = ArrayBuffer.isView(attributeValue) ? { value: attributeValue } : attributeValue;
        if (!ArrayBuffer.isView(attribute.value)) {
          throw new Error(`${this._print(attributeName)}: must be typed array or object with value as typed array`);
        }
        if ((attributeName === "POSITION" || attributeName === "positions") && !attribute.size) {
          attribute.size = 3;
        }
        if (attributeName === "indices") {
          if (this.indices) {
            throw new Error("Multiple indices detected");
          }
          this.indices = attribute;
        } else {
          this.attributes[attributeName] = attribute;
        }
      }
      if (this.indices && this.indices["isIndexed"] !== void 0) {
        this.indices = Object.assign({}, this.indices);
        delete this.indices["isIndexed"];
      }
      this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);
    }
    getVertexCount() {
      return this.vertexCount;
    }
    /**
     * Return an object with all attributes plus indices added as a field.
     * TODO Geometry types are a mess
     */
    getAttributes() {
      return this.indices ? { indices: this.indices, ...this.attributes } : this.attributes;
    }
    // PRIVATE
    _print(attributeName) {
      return `Geometry ${this.id} attribute ${attributeName}`;
    }
    /**
     * GeometryAttribute
     * value: typed array
     * type: indices, vertices, uvs
     * size: elements per vertex
     * target: WebGL buffer type (string or constant)
     *
     * @param attributes
     * @param indices
     * @returns
     */
    _setAttributes(attributes, indices) {
      return this;
    }
    _calculateVertexCount(attributes, indices) {
      if (indices) {
        return indices.value.length;
      }
      let vertexCount = Infinity;
      for (const attribute of Object.values(attributes)) {
        const { value, size, constant } = attribute;
        if (!constant && value && size !== void 0 && size >= 1) {
          vertexCount = Math.min(vertexCount, value.length / size);
        }
      }
      return vertexCount;
    }
  };

  // ../../node_modules/@luma.gl/engine/dist/models/clip-space.js
  var CLIPSPACE_VERTEX_SHADER_WGSL = (
    /* wgsl */
    `struct VertexInputs {
  @location(0) clipSpacePosition: vec2<f32>,
  @location(1) texCoord: vec2<f32>,
  @location(2) coordinate: vec2<f32>  
}

struct FragmentInputs {
  @builtin(position) Position : vec4<f32>,
  @location(0) position : vec2<f32>,
  @location(1) coordinate : vec2<f32>,
  @location(2) uv : vec2<f32>
};

@vertex
fn vertexMain(inputs: VertexInputs) -> FragmentInputs {
  var outputs: FragmentInputs;
  outputs.Position = vec4(inputs.clipSpacePosition, 0., 1.);
  outputs.position = inputs.clipSpacePosition;
  outputs.coordinate = inputs.coordinate;
  outputs.uv = inputs.texCoord;
  return outputs;
}
`
  );
  var CLIPSPACE_VERTEX_SHADER = (
    /* glsl */
    `#version 300 es
in vec2 clipSpacePositions;
in vec2 texCoords;
in vec2 coordinates;

out vec2 position;
out vec2 coordinate;
out vec2 uv;

void main(void) {
  gl_Position = vec4(clipSpacePositions, 0., 1.);
  position = clipSpacePositions;
  coordinate = coordinates;
  uv = texCoords;
}
`
  );
  var POSITIONS = [-1, -1, 1, -1, -1, 1, 1, 1];
  var ClipSpace = class extends Model {
    constructor(device, props) {
      const TEX_COORDS = POSITIONS.map((coord) => coord === -1 ? 0 : coord);
      if (props.source) {
        props = { ...props, source: `${CLIPSPACE_VERTEX_SHADER_WGSL}
${props.source}` };
      }
      super(device, {
        id: props.id || uid2("clip-space"),
        ...props,
        vs: CLIPSPACE_VERTEX_SHADER,
        vertexCount: 4,
        geometry: new Geometry({
          topology: "triangle-strip",
          vertexCount: 4,
          attributes: {
            clipSpacePositions: { size: 2, value: new Float32Array(POSITIONS) },
            texCoords: { size: 2, value: new Float32Array(TEX_COORDS) },
            coordinates: { size: 2, value: new Float32Array(TEX_COORDS) }
          }
        })
      });
    }
  };

  // ../../node_modules/@luma.gl/engine/dist/scenegraph/scenegraph-node.js
  var ScenegraphNode = class {
    id;
    matrix = new Matrix4();
    display = true;
    position = new Vector3();
    rotation = new Vector3();
    scale = new Vector3(1, 1, 1);
    userData = {};
    props = {};
    constructor(props = {}) {
      const { id } = props;
      this.id = id || uid2(this.constructor.name);
      this._setScenegraphNodeProps(props);
    }
    getBounds() {
      return null;
    }
    destroy() {
    }
    /** @deprecated use .destroy() */
    delete() {
      this.destroy();
    }
    setProps(props) {
      this._setScenegraphNodeProps(props);
      return this;
    }
    toString() {
      return `{type: ScenegraphNode, id: ${this.id})}`;
    }
    setPosition(position) {
      this.position = position;
      return this;
    }
    setRotation(rotation2) {
      this.rotation = rotation2;
      return this;
    }
    setScale(scale24) {
      this.scale = scale24;
      return this;
    }
    setMatrix(matrix, copyMatrix = true) {
      if (copyMatrix) {
        this.matrix.copy(matrix);
      } else {
        this.matrix = matrix;
      }
    }
    setMatrixComponents(components) {
      const { position, rotation: rotation2, scale: scale24, update = true } = components;
      if (position) {
        this.setPosition(position);
      }
      if (rotation2) {
        this.setRotation(rotation2);
      }
      if (scale24) {
        this.setScale(scale24);
      }
      if (update) {
        this.updateMatrix();
      }
      return this;
    }
    updateMatrix() {
      const pos = this.position;
      const rot = this.rotation;
      const scale24 = this.scale;
      this.matrix.identity();
      this.matrix.translate(pos);
      this.matrix.rotateXYZ(rot);
      this.matrix.scale(scale24);
      return this;
    }
    update(options = {}) {
      const { position, rotation: rotation2, scale: scale24 } = options;
      if (position) {
        this.setPosition(position);
      }
      if (rotation2) {
        this.setRotation(rotation2);
      }
      if (scale24) {
        this.setScale(scale24);
      }
      this.updateMatrix();
      return this;
    }
    getCoordinateUniforms(viewMatrix2, modelMatrix2) {
      modelMatrix2 = modelMatrix2 || this.matrix;
      const worldMatrix = new Matrix4(viewMatrix2).multiplyRight(modelMatrix2);
      const worldInverse = worldMatrix.invert();
      const worldInverseTranspose = worldInverse.transpose();
      return {
        viewMatrix: viewMatrix2,
        modelMatrix: modelMatrix2,
        objectMatrix: modelMatrix2,
        worldMatrix,
        worldInverseMatrix: worldInverse,
        worldInverseTransposeMatrix: worldInverseTranspose
      };
    }
    // TODO - copied code, not yet vetted
    /*
      transform() {
        if (!this.parent) {
          this.endPosition.set(this.position);
          this.endRotation.set(this.rotation);
          this.endScale.set(this.scale);
        } else {
          const parent = this.parent;
          this.endPosition.set(this.position.add(parent.endPosition));
          this.endRotation.set(this.rotation.add(parent.endRotation));
          this.endScale.set(this.scale.add(parent.endScale));
        }
    
        const ch = this.children;
        for (let i = 0; i < ch.length; ++i) {
          ch[i].transform();
        }
    
        return this;
      }
      */
    _setScenegraphNodeProps(props) {
      if ("position" in props) {
        this.setPosition(props.position);
      }
      if ("rotation" in props) {
        this.setRotation(props.rotation);
      }
      if ("scale" in props) {
        this.setScale(props.scale);
      }
      if ("matrix" in props) {
        this.setMatrix(props.matrix);
      }
      Object.assign(this.props, props);
    }
  };

  // ../../node_modules/@luma.gl/engine/dist/scenegraph/group-node.js
  init_dist4();
  var GroupNode = class extends ScenegraphNode {
    children;
    constructor(props = {}) {
      props = Array.isArray(props) ? { children: props } : props;
      const { children = [] } = props;
      log2.assert(children.every((child) => child instanceof ScenegraphNode), "every child must an instance of ScenegraphNode");
      super(props);
      this.children = children;
    }
    getBounds() {
      const result = [
        [Infinity, Infinity, Infinity],
        [-Infinity, -Infinity, -Infinity]
      ];
      this.traverse((node, { worldMatrix }) => {
        const bounds = node.getBounds();
        if (!bounds) {
          return;
        }
        const [min7, max7] = bounds;
        const center2 = new Vector3(min7).add(max7).divide([2, 2, 2]);
        worldMatrix.transformAsPoint(center2, center2);
        const halfSize = new Vector3(max7).subtract(min7).divide([2, 2, 2]);
        worldMatrix.transformAsVector(halfSize, halfSize);
        for (let v5 = 0; v5 < 8; v5++) {
          const position = new Vector3(v5 & 1 ? -1 : 1, v5 & 2 ? -1 : 1, v5 & 4 ? -1 : 1).multiply(halfSize).add(center2);
          for (let i7 = 0; i7 < 3; i7++) {
            result[0][i7] = Math.min(result[0][i7], position[i7]);
            result[1][i7] = Math.max(result[1][i7], position[i7]);
          }
        }
      });
      if (!Number.isFinite(result[0][0])) {
        return null;
      }
      return result;
    }
    destroy() {
      this.children.forEach((child) => child.destroy());
      this.removeAll();
      super.destroy();
    }
    // Unpacks arrays and nested arrays of children
    add(...children) {
      for (const child of children) {
        if (Array.isArray(child)) {
          this.add(...child);
        } else {
          this.children.push(child);
        }
      }
      return this;
    }
    remove(child) {
      const children = this.children;
      const indexOf = children.indexOf(child);
      if (indexOf > -1) {
        children.splice(indexOf, 1);
      }
      return this;
    }
    removeAll() {
      this.children = [];
      return this;
    }
    traverse(visitor, { worldMatrix = new Matrix4() } = {}) {
      const modelMatrix2 = new Matrix4(worldMatrix).multiplyRight(this.matrix);
      for (const child of this.children) {
        if (child instanceof GroupNode) {
          child.traverse(visitor, { worldMatrix: modelMatrix2 });
        } else {
          visitor(child, { worldMatrix: modelMatrix2 });
        }
      }
    }
  };

  // ../../node_modules/@luma.gl/engine/dist/scenegraph/model-node.js
  var ModelNode = class extends ScenegraphNode {
    model;
    bounds = null;
    managedResources;
    // TODO - is this used? override callbacks to make sure we call them with this
    // onBeforeRender = null;
    // onAfterRender = null;
    // AfterRender = null;
    constructor(props) {
      super(props);
      this.model = props.model;
      this.managedResources = props.managedResources || [];
      this.bounds = props.bounds || null;
      this.setProps(props);
    }
    destroy() {
      if (this.model) {
        this.model.destroy();
        this.model = null;
      }
      this.managedResources.forEach((resource) => resource.destroy());
      this.managedResources = [];
    }
    getBounds() {
      return this.bounds;
    }
    // Expose model methods
    draw(renderPass) {
      return this.model.draw(renderPass);
    }
  };

  // ../../node_modules/@luma.gl/engine/dist/geometries/cube-geometry.js
  var CubeGeometry = class extends Geometry {
    constructor(props = {}) {
      const { id = uid2("cube-geometry"), indices = true } = props;
      super(indices ? {
        ...props,
        id,
        topology: "triangle-list",
        indices: { size: 1, value: CUBE_INDICES },
        attributes: { ...ATTRIBUTES, ...props.attributes }
      } : {
        ...props,
        id,
        topology: "triangle-list",
        indices: void 0,
        attributes: { ...NON_INDEXED_ATTRIBUTES, ...props.attributes }
      });
    }
  };
  var CUBE_INDICES = new Uint16Array([
    0,
    1,
    2,
    0,
    2,
    3,
    4,
    5,
    6,
    4,
    6,
    7,
    8,
    9,
    10,
    8,
    10,
    11,
    12,
    13,
    14,
    12,
    14,
    15,
    16,
    17,
    18,
    16,
    18,
    19,
    20,
    21,
    22,
    20,
    22,
    23
  ]);
  var CUBE_POSITIONS = new Float32Array([
    -1,
    -1,
    1,
    1,
    -1,
    1,
    1,
    1,
    1,
    -1,
    1,
    1,
    -1,
    -1,
    -1,
    -1,
    1,
    -1,
    1,
    1,
    -1,
    1,
    -1,
    -1,
    -1,
    1,
    -1,
    -1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    -1,
    -1,
    -1,
    -1,
    1,
    -1,
    -1,
    1,
    -1,
    1,
    -1,
    -1,
    1,
    1,
    -1,
    -1,
    1,
    1,
    -1,
    1,
    1,
    1,
    1,
    -1,
    1,
    -1,
    -1,
    -1,
    -1,
    -1,
    1,
    -1,
    1,
    1,
    -1,
    1,
    -1
  ]);
  var CUBE_NORMALS = new Float32Array([
    // Front face
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    // Back face
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    // Top face
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    // Bottom face
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    // Right face
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    // Left face
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0
  ]);
  var CUBE_TEX_COORDS = new Float32Array([
    // Front face
    0,
    0,
    1,
    0,
    1,
    1,
    0,
    1,
    // Back face
    1,
    0,
    1,
    1,
    0,
    1,
    0,
    0,
    // Top face
    0,
    1,
    0,
    0,
    1,
    0,
    1,
    1,
    // Bottom face
    1,
    1,
    0,
    1,
    0,
    0,
    1,
    0,
    // Right face
    1,
    0,
    1,
    1,
    0,
    1,
    0,
    0,
    // Left face
    0,
    0,
    1,
    0,
    1,
    1,
    0,
    1
  ]);
  var CUBE_NON_INDEXED_POSITIONS = new Float32Array([
    1,
    -1,
    1,
    -1,
    -1,
    1,
    -1,
    -1,
    -1,
    1,
    -1,
    -1,
    1,
    -1,
    1,
    -1,
    -1,
    -1,
    1,
    1,
    1,
    1,
    -1,
    1,
    1,
    -1,
    -1,
    1,
    1,
    -1,
    1,
    1,
    1,
    1,
    -1,
    -1,
    -1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    -1,
    -1,
    1,
    -1,
    -1,
    1,
    1,
    1,
    1,
    -1,
    -1,
    -1,
    1,
    -1,
    1,
    1,
    -1,
    1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    1,
    -1,
    1,
    -1,
    1,
    1,
    1,
    -1,
    1,
    1,
    -1,
    -1,
    1,
    -1,
    -1,
    1,
    1,
    -1,
    1,
    1,
    1,
    1,
    1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    1,
    -1,
    1,
    1,
    -1,
    1,
    -1,
    -1,
    -1,
    1,
    -1
  ]);
  var CUBE_NON_INDEXED_TEX_COORDS = new Float32Array([
    1,
    1,
    0,
    1,
    0,
    0,
    1,
    0,
    1,
    1,
    0,
    0,
    1,
    1,
    0,
    1,
    0,
    0,
    1,
    0,
    1,
    1,
    0,
    0,
    1,
    1,
    0,
    1,
    0,
    0,
    1,
    0,
    1,
    1,
    0,
    0,
    1,
    1,
    0,
    1,
    0,
    0,
    1,
    0,
    1,
    1,
    0,
    0,
    1,
    1,
    0,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    1,
    1,
    1,
    0,
    1,
    0,
    0,
    1,
    0,
    1,
    1,
    0,
    0
  ]);
  var CUBE_NON_INDEXED_COLORS = new Float32Array([
    1,
    0,
    1,
    1,
    0,
    0,
    1,
    1,
    0,
    0,
    0,
    1,
    1,
    0,
    0,
    1,
    1,
    0,
    1,
    1,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    1,
    1,
    1,
    0,
    0,
    1,
    1,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    0,
    1,
    0,
    0,
    1,
    1,
    0,
    1,
    1,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    1,
    1,
    0,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    0,
    1,
    1,
    1,
    0,
    0,
    1,
    1,
    0,
    0,
    1,
    1,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    1,
    1,
    0,
    1,
    1,
    0,
    0,
    1,
    0,
    1,
    0,
    1
  ]);
  var ATTRIBUTES = {
    POSITION: { size: 3, value: CUBE_POSITIONS },
    NORMAL: { size: 3, value: CUBE_NORMALS },
    TEXCOORD_0: { size: 2, value: CUBE_TEX_COORDS }
  };
  var NON_INDEXED_ATTRIBUTES = {
    POSITION: { size: 3, value: CUBE_NON_INDEXED_POSITIONS },
    // NORMAL: {size: 3, value: CUBE_NON_INDEXED_NORMALS},
    TEXCOORD_0: { size: 2, value: CUBE_NON_INDEXED_TEX_COORDS },
    COLOR_0: { size: 3, value: CUBE_NON_INDEXED_COLORS }
  };

  // ../../node_modules/@luma.gl/engine/dist/geometries/sphere-geometry.js
  var SphereGeometry = class extends Geometry {
    constructor(props = {}) {
      const { id = uid2("sphere-geometry") } = props;
      const { indices, attributes } = tesselateSphere(props);
      super({
        ...props,
        id,
        topology: "triangle-list",
        indices,
        attributes: { ...attributes, ...props.attributes }
      });
    }
  };
  function tesselateSphere(props) {
    const { nlat = 10, nlong = 10 } = props;
    const startLat = 0;
    const endLat = Math.PI;
    const latRange = endLat - startLat;
    const startLong = 0;
    const endLong = 2 * Math.PI;
    const longRange = endLong - startLong;
    const numVertices = (nlat + 1) * (nlong + 1);
    const radius = (n1, n22, n32, u6, v5) => props.radius || 1;
    const positions = new Float32Array(numVertices * 3);
    const normals = new Float32Array(numVertices * 3);
    const texCoords = new Float32Array(numVertices * 2);
    const IndexType = numVertices > 65535 ? Uint32Array : Uint16Array;
    const indices = new IndexType(nlat * nlong * 6);
    for (let y5 = 0; y5 <= nlat; y5++) {
      for (let x4 = 0; x4 <= nlong; x4++) {
        const u6 = x4 / nlong;
        const v5 = y5 / nlat;
        const index = x4 + y5 * (nlong + 1);
        const i22 = index * 2;
        const i32 = index * 3;
        const theta = longRange * u6;
        const phi = latRange * v5;
        const sinTheta = Math.sin(theta);
        const cosTheta = Math.cos(theta);
        const sinPhi = Math.sin(phi);
        const cosPhi = Math.cos(phi);
        const ux = cosTheta * sinPhi;
        const uy = cosPhi;
        const uz = sinTheta * sinPhi;
        const r5 = radius(ux, uy, uz, u6, v5);
        positions[i32 + 0] = r5 * ux;
        positions[i32 + 1] = r5 * uy;
        positions[i32 + 2] = r5 * uz;
        normals[i32 + 0] = ux;
        normals[i32 + 1] = uy;
        normals[i32 + 2] = uz;
        texCoords[i22 + 0] = u6;
        texCoords[i22 + 1] = 1 - v5;
      }
    }
    const numVertsAround = nlong + 1;
    for (let x4 = 0; x4 < nlong; x4++) {
      for (let y5 = 0; y5 < nlat; y5++) {
        const index = (x4 * nlat + y5) * 6;
        indices[index + 0] = y5 * numVertsAround + x4;
        indices[index + 1] = y5 * numVertsAround + x4 + 1;
        indices[index + 2] = (y5 + 1) * numVertsAround + x4;
        indices[index + 3] = (y5 + 1) * numVertsAround + x4;
        indices[index + 4] = y5 * numVertsAround + x4 + 1;
        indices[index + 5] = (y5 + 1) * numVertsAround + x4 + 1;
      }
    }
    return {
      indices: { size: 1, value: indices },
      attributes: {
        POSITION: { size: 3, value: positions },
        NORMAL: { size: 3, value: normals },
        TEXCOORD_0: { size: 2, value: texCoords }
      }
    };
  }

  // ../core/src/passes/screen-pass-uniforms.ts
  var uniformBlock4 = `uniform screenUniforms {
  vec2 texSize;
} screen;
`;
  var screenUniforms = {
    name: "screen",
    fs: uniformBlock4,
    uniformTypes: {
      texSize: "vec2<f32>"
    }
  };

  // ../core/src/passes/screen-pass.ts
  var ScreenPass = class extends Pass {
    constructor(device, props) {
      super(device, props);
      const { module, fs: fs11, id } = props;
      const parameters2 = {
        depthWriteEnabled: false,
        depthCompare: "always",
        depthBias: 0,
        blend: true,
        blendColorSrcFactor: "one",
        blendColorDstFactor: "one-minus-src-alpha",
        blendAlphaSrcFactor: "one",
        blendAlphaDstFactor: "one-minus-src-alpha",
        blendColorOperation: "add",
        blendAlphaOperation: "add"
      };
      this.model = new ClipSpace(device, { id, fs: fs11, modules: [module, screenUniforms], parameters: parameters2 });
    }
    render(params) {
      this._renderPass(this.device, params);
    }
    delete() {
      this.model.destroy();
      this.model = null;
    }
    // Private methods
    /**
     * Renders the pass.
     * This is an abstract method that should be overridden.
     * @param inputBuffer - Frame buffer that contains the result of the previous pass
     * @param outputBuffer - Frame buffer that serves as the output render target
     */
    _renderPass(device, options) {
      const { clearCanvas, inputBuffer, outputBuffer } = options;
      const texSize = [inputBuffer.width, inputBuffer.height];
      const screenProps = {
        texSrc: inputBuffer.colorAttachments[0],
        texSize
      };
      this.model.shaderInputs.setProps({
        screen: screenProps,
        ...options.moduleProps
      });
      const renderPass = this.device.beginRenderPass({
        framebuffer: outputBuffer,
        parameters: { viewport: [0, 0, ...texSize] },
        clearColor: clearCanvas ? [0, 0, 0, 0] : false,
        clearDepth: 1,
        clearStencil: false
      });
      this.model.draw(renderPass);
      renderPass.end();
    }
  };

  // ../core/src/effects/post-process-effect.ts
  var PostProcessEffect = class {
    constructor(module, props) {
      this.id = `${module.name}-pass`;
      this.props = props;
      initializeShaderModule(module);
      this.module = module;
    }
    setup({ device }) {
      this.passes = createPasses(device, this.module, this.id);
    }
    setProps(props) {
      this.props = props;
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    preRender() {
    }
    postRender(params) {
      const passes = this.passes;
      const { target: target2 } = params;
      let inputBuffer = params.inputBuffer;
      let outputBuffer = params.swapBuffer;
      for (let index = 0; index < passes.length; index++) {
        const isLastPass = index === passes.length - 1;
        const renderToTarget = target2 !== void 0 && isLastPass;
        if (renderToTarget) {
          outputBuffer = target2;
        }
        const clearCanvas = !renderToTarget || Boolean(params.clearCanvas);
        const moduleProps = {};
        const uniforms = this.module.passes[index].uniforms;
        moduleProps[this.module.name] = { ...this.props, ...uniforms };
        passes[index].render({ clearCanvas, inputBuffer, outputBuffer, moduleProps });
        const switchBuffer = outputBuffer;
        outputBuffer = inputBuffer;
        inputBuffer = switchBuffer;
      }
      return inputBuffer;
    }
    cleanup() {
      if (this.passes) {
        for (const pass of this.passes) {
          pass.delete();
        }
        this.passes = void 0;
      }
    }
  };
  function createPasses(device, module, id) {
    return module.passes.map((pass, index) => {
      const fs11 = getFragmentShaderForRenderPass(module, pass);
      const idn = `${id}-${index}`;
      return new ScreenPass(device, { id: idn, module, fs: fs11 });
    });
  }
  var FS_TEMPLATE_INPUTS = `#version 300 es
uniform sampler2D texSrc;

in vec2 position;
in vec2 coordinate;
in vec2 uv;

out vec4 fragColor;
`;
  var FILTER_FS_TEMPLATE = (func) => `${FS_TEMPLATE_INPUTS}
void main() {
  fragColor = texture(texSrc, coordinate);
  fragColor = ${func}(fragColor, screen.texSize, coordinate);
}
`;
  var SAMPLER_FS_TEMPLATE = (func) => `${FS_TEMPLATE_INPUTS}
void main() {
  fragColor = ${func}(texSrc, screen.texSize, coordinate);
}
`;
  function getFragmentShaderForRenderPass(module, pass) {
    if (pass.filter) {
      const func = typeof pass.filter === "string" ? pass.filter : `${module.name}_filterColor_ext`;
      return FILTER_FS_TEMPLATE(func);
    }
    if (pass.sampler) {
      const func = typeof pass.sampler === "string" ? pass.sampler : `${module.name}_sampleColor`;
      return SAMPLER_FS_TEMPLATE(func);
    }
    return "";
  }

  // ../core/src/passes/pick-layers-pass.ts
  var PICKING_BLENDING = {
    blendColorOperation: "add",
    blendColorSrcFactor: "one",
    blendColorDstFactor: "zero",
    blendAlphaOperation: "add",
    blendAlphaSrcFactor: "constant",
    blendAlphaDstFactor: "zero"
  };
  var PickLayersPass = class extends LayersPass {
    constructor() {
      super(...arguments);
      this._colorEncoderState = null;
    }
    render(props) {
      if ("pickingFBO" in props) {
        return this._drawPickingBuffer(props);
      }
      return super.render(props);
    }
    // Private
    // Draws list of layers and viewports into the picking buffer
    // Note: does not sample the buffer, that has to be done by the caller
    _drawPickingBuffer({
      layers,
      layerFilter,
      views,
      viewports,
      onViewportActive,
      pickingFBO,
      deviceRect: { x: x4, y: y5, width, height },
      cullRect,
      effects,
      pass = "picking",
      pickZ,
      shaderModuleProps
    }) {
      this.pickZ = pickZ;
      const colorEncoderState = this._resetColorEncoder(pickZ);
      const scissorRect = [x4, y5, width, height];
      const renderStatus = super.render({
        target: pickingFBO,
        layers,
        layerFilter,
        views,
        viewports,
        onViewportActive,
        cullRect,
        effects: effects?.filter((e6) => e6.useInPicking),
        pass,
        isPicking: true,
        shaderModuleProps,
        clearColor: [0, 0, 0, 0],
        colorMask: 15,
        scissorRect
      });
      this._colorEncoderState = null;
      const decodePickingColor = colorEncoderState && decodeColor.bind(null, colorEncoderState);
      return { decodePickingColor, stats: renderStatus };
    }
    shouldDrawLayer(layer) {
      const { pickable, operation } = layer.props;
      return pickable && operation.includes("draw") || operation.includes("terrain") || operation.includes("mask");
    }
    getShaderModuleProps(layer, effects, otherShaderModuleProps) {
      return {
        picking: {
          isActive: 1,
          isAttribute: this.pickZ
        },
        lighting: { enabled: false }
      };
    }
    getLayerParameters(layer, layerIndex, viewport) {
      const pickParameters = {
        ...layer.props.parameters
      };
      const { pickable, operation } = layer.props;
      if (!this._colorEncoderState || operation.includes("terrain")) {
        pickParameters.blend = false;
      } else if (pickable && operation.includes("draw")) {
        Object.assign(pickParameters, PICKING_BLENDING);
        pickParameters.blend = true;
        pickParameters.blendColor = encodeColor(this._colorEncoderState, layer, viewport);
      }
      return pickParameters;
    }
    _resetColorEncoder(pickZ) {
      this._colorEncoderState = pickZ ? null : {
        byLayer: /* @__PURE__ */ new Map(),
        byAlpha: []
      };
      return this._colorEncoderState;
    }
  };
  function encodeColor(encoded, layer, viewport) {
    const { byLayer, byAlpha } = encoded;
    let a6;
    let entry = byLayer.get(layer);
    if (entry) {
      entry.viewports.push(viewport);
      a6 = entry.a;
    } else {
      a6 = byLayer.size + 1;
      if (a6 <= 255) {
        entry = { a: a6, layer, viewports: [viewport] };
        byLayer.set(layer, entry);
        byAlpha[a6] = entry;
      } else {
        log_default.warn("Too many pickable layers, only picking the first 255")();
        a6 = 0;
      }
    }
    return [0, 0, 0, a6 / 255];
  }
  function decodeColor(encoded, pickedColor) {
    const entry = encoded.byAlpha[pickedColor[3]];
    return entry && {
      pickedLayer: entry.layer,
      pickedViewports: entry.viewports,
      pickedObjectIndex: entry.layer.decodePickingColor(pickedColor)
    };
  }

  // ../core/src/lifecycle/constants.ts
  var LIFECYCLE = {
    NO_STATE: "Awaiting state",
    MATCHED: "Matched. State transferred from previous layer",
    INITIALIZED: "Initialized",
    AWAITING_GC: "Discarded. Awaiting garbage collection",
    AWAITING_FINALIZATION: "No longer matched. Awaiting garbage collection",
    FINALIZED: "Finalized! Awaiting garbage collection"
  };
  var COMPONENT_SYMBOL = Symbol.for("component");
  var PROP_TYPES_SYMBOL = Symbol.for("propTypes");
  var DEPRECATED_PROPS_SYMBOL = Symbol.for("deprecatedProps");
  var ASYNC_DEFAULTS_SYMBOL = Symbol.for("asyncPropDefaults");
  var ASYNC_ORIGINAL_SYMBOL = Symbol.for("asyncPropOriginal");
  var ASYNC_RESOLVED_SYMBOL = Symbol.for("asyncPropResolved");

  // ../core/src/utils/flatten.ts
  function flatten(array, filter = () => true) {
    if (!Array.isArray(array)) {
      return filter(array) ? [array] : [];
    }
    return flattenArray(array, filter, []);
  }
  function flattenArray(array, filter, result) {
    let index = -1;
    while (++index < array.length) {
      const value = array[index];
      if (Array.isArray(value)) {
        flattenArray(value, filter, result);
      } else if (filter(value)) {
        result.push(value);
      }
    }
    return result;
  }
  function fillArray({ target: target2, source: source4, start = 0, count: count3 = 1 }) {
    const length17 = source4.length;
    const total = count3 * length17;
    let copied = 0;
    for (let i7 = start; copied < length17; copied++) {
      target2[i7++] = source4[copied];
    }
    while (copied < total) {
      if (copied < total - copied) {
        target2.copyWithin(start + copied, start, start + copied);
        copied *= 2;
      } else {
        target2.copyWithin(start + copied, start, start + total - copied);
        copied = total;
      }
    }
    return target2;
  }

  // ../core/src/lib/layer-manager.ts
  init_dist3();

  // ../core/src/lib/resource/resource.ts
  var Resource2 = class {
    constructor(id, data, context) {
      this._loadCount = 0;
      this._subscribers = /* @__PURE__ */ new Set();
      this.id = id;
      this.context = context;
      this.setData(data);
    }
    // consumer: {onChange: Function}
    subscribe(consumer) {
      this._subscribers.add(consumer);
    }
    unsubscribe(consumer) {
      this._subscribers.delete(consumer);
    }
    inUse() {
      return this._subscribers.size > 0;
    }
    delete() {
    }
    getData() {
      return this.isLoaded ? this._error ? Promise.reject(this._error) : this._content : this._loader.then(() => this.getData());
    }
    setData(data, forceUpdate) {
      if (data === this._data && !forceUpdate) {
        return;
      }
      this._data = data;
      const loadCount = ++this._loadCount;
      let loader = data;
      if (typeof data === "string") {
        loader = load(data);
      }
      if (loader instanceof Promise) {
        this.isLoaded = false;
        this._loader = loader.then((result) => {
          if (this._loadCount === loadCount) {
            this.isLoaded = true;
            this._error = void 0;
            this._content = result;
          }
        }).catch((error) => {
          if (this._loadCount === loadCount) {
            this.isLoaded = true;
            this._error = error || true;
          }
        });
      } else {
        this.isLoaded = true;
        this._error = void 0;
        this._content = data;
      }
      for (const subscriber of this._subscribers) {
        subscriber.onChange(this.getData());
      }
    }
  };

  // ../core/src/lib/resource/resource-manager.ts
  var ResourceManager = class {
    constructor(props) {
      this.protocol = props.protocol || "resource://";
      this._context = {
        device: props.device,
        // @ts-expect-error
        gl: props.device?.gl,
        resourceManager: this
      };
      this._resources = {};
      this._consumers = {};
      this._pruneRequest = null;
    }
    contains(resourceId) {
      if (resourceId.startsWith(this.protocol)) {
        return true;
      }
      return resourceId in this._resources;
    }
    add({
      resourceId,
      data,
      forceUpdate = false,
      persistent = true
    }) {
      let res = this._resources[resourceId];
      if (res) {
        res.setData(data, forceUpdate);
      } else {
        res = new Resource2(resourceId, data, this._context);
        this._resources[resourceId] = res;
      }
      res.persistent = persistent;
    }
    remove(resourceId) {
      const res = this._resources[resourceId];
      if (res) {
        res.delete();
        delete this._resources[resourceId];
      }
    }
    unsubscribe({ consumerId }) {
      const consumer = this._consumers[consumerId];
      if (consumer) {
        for (const requestId in consumer) {
          const request = consumer[requestId];
          const resource = this._resources[request.resourceId];
          if (resource) {
            resource.unsubscribe(request);
          }
        }
        delete this._consumers[consumerId];
        this.prune();
      }
    }
    subscribe({
      resourceId,
      onChange,
      consumerId,
      requestId = "default"
    }) {
      const { _resources: resources, protocol } = this;
      if (resourceId.startsWith(protocol)) {
        resourceId = resourceId.replace(protocol, "");
        if (!resources[resourceId]) {
          this.add({ resourceId, data: null, persistent: false });
        }
      }
      const res = resources[resourceId];
      this._track(consumerId, requestId, res, onChange);
      if (res) {
        return res.getData();
      }
      return void 0;
    }
    prune() {
      if (!this._pruneRequest) {
        this._pruneRequest = setTimeout(() => this._prune(), 0);
      }
    }
    finalize() {
      for (const key in this._resources) {
        this._resources[key].delete();
      }
    }
    _track(consumerId, requestId, resource, onChange) {
      const consumers = this._consumers;
      const consumer = consumers[consumerId] = consumers[consumerId] || {};
      let request = consumer[requestId];
      const oldResource = request && request.resourceId && this._resources[request.resourceId];
      if (oldResource) {
        oldResource.unsubscribe(request);
        this.prune();
      }
      if (resource) {
        if (request) {
          request.onChange = onChange;
          request.resourceId = resource.id;
        } else {
          request = {
            onChange,
            resourceId: resource.id
          };
        }
        consumer[requestId] = request;
        resource.subscribe(request);
      }
    }
    _prune() {
      this._pruneRequest = null;
      for (const key of Object.keys(this._resources)) {
        const res = this._resources[key];
        if (!res.persistent && !res.inUse()) {
          res.delete();
          delete this._resources[key];
        }
      }
    }
  };

  // ../core/src/lib/layer-manager.ts
  var TRACE_SET_LAYERS = "layerManager.setLayers";
  var TRACE_ACTIVATE_VIEWPORT = "layerManager.activateViewport";
  var LayerManager = class {
    /**
     * @param device
     * @param param1
     */
    // eslint-disable-next-line
    constructor(device, props) {
      this._lastRenderedLayers = [];
      this._needsRedraw = false;
      this._needsUpdate = false;
      this._nextLayers = null;
      this._debug = false;
      // This flag is separate from _needsUpdate because it can be set during an update and should trigger another full update
      this._defaultShaderModulesChanged = false;
      //
      // INTERNAL METHODS
      //
      /** Make a viewport "current" in layer context, updating viewportChanged flags */
      this.activateViewport = (viewport) => {
        debug(TRACE_ACTIVATE_VIEWPORT, this, viewport);
        if (viewport) {
          this.context.viewport = viewport;
        }
      };
      const { deck, stats: stats2, viewport, timeline } = props || {};
      this.layers = [];
      this.resourceManager = new ResourceManager({ device, protocol: "deck://" });
      this.context = {
        mousePosition: null,
        userData: {},
        layerManager: this,
        device,
        // @ts-expect-error
        gl: device?.gl,
        deck,
        shaderAssembler: getShaderAssembler(device?.info?.shadingLanguage || "glsl"),
        defaultShaderModules: [layerUniforms],
        renderPass: void 0,
        stats: stats2 || new Stats({ id: "deck.gl" }),
        // Make sure context.viewport is not empty on the first layer initialization
        viewport: viewport || new Viewport({ id: "DEFAULT-INITIAL-VIEWPORT" }),
        // Current viewport, exposed to layers for project* function
        timeline: timeline || new Timeline(),
        resourceManager: this.resourceManager,
        onError: void 0
      };
      Object.seal(this);
    }
    /** Method to call when the layer manager is not needed anymore. */
    finalize() {
      this.resourceManager.finalize();
      for (const layer of this.layers) {
        this._finalizeLayer(layer);
      }
    }
    /** Check if a redraw is needed */
    needsRedraw(opts = { clearRedrawFlags: false }) {
      let redraw = this._needsRedraw;
      if (opts.clearRedrawFlags) {
        this._needsRedraw = false;
      }
      for (const layer of this.layers) {
        const layerNeedsRedraw = layer.getNeedsRedraw(opts);
        redraw = redraw || layerNeedsRedraw;
      }
      return redraw;
    }
    /** Check if a deep update of all layers is needed */
    needsUpdate() {
      if (this._nextLayers && this._nextLayers !== this._lastRenderedLayers) {
        return "layers changed";
      }
      if (this._defaultShaderModulesChanged) {
        return "shader modules changed";
      }
      return this._needsUpdate;
    }
    /** Layers will be redrawn (in next animation frame) */
    setNeedsRedraw(reason) {
      this._needsRedraw = this._needsRedraw || reason;
    }
    /** Layers will be updated deeply (in next animation frame)
      Potentially regenerating attributes and sub layers */
    setNeedsUpdate(reason) {
      this._needsUpdate = this._needsUpdate || reason;
    }
    /** Gets a list of currently rendered layers. Optionally filter by id. */
    getLayers({ layerIds } = {}) {
      return layerIds ? this.layers.filter((layer) => layerIds.find((layerId) => layer.id.indexOf(layerId) === 0)) : this.layers;
    }
    /** Set props needed for layer rendering and picking. */
    setProps(props) {
      if ("debug" in props) {
        this._debug = props.debug;
      }
      if ("userData" in props) {
        this.context.userData = props.userData;
      }
      if ("layers" in props) {
        this._nextLayers = props.layers;
      }
      if ("onError" in props) {
        this.context.onError = props.onError;
      }
    }
    /** Supply a new layer list, initiating sublayer generation and layer matching */
    setLayers(newLayers, reason) {
      debug(TRACE_SET_LAYERS, this, reason, newLayers);
      this._lastRenderedLayers = newLayers;
      const flatLayers = flatten(newLayers, Boolean);
      for (const layer of flatLayers) {
        layer.context = this.context;
      }
      this._updateLayers(this.layers, flatLayers);
    }
    /** Update layers from last cycle if `setNeedsUpdate()` has been called */
    updateLayers() {
      const reason = this.needsUpdate();
      if (reason) {
        this.setNeedsRedraw(`updating layers: ${reason}`);
        this.setLayers(this._nextLayers || this._lastRenderedLayers, reason);
      }
      this._nextLayers = null;
    }
    /** Register a default shader module */
    addDefaultShaderModule(module) {
      const { defaultShaderModules } = this.context;
      if (!defaultShaderModules.find((m3) => m3.name === module.name)) {
        defaultShaderModules.push(module);
        this._defaultShaderModulesChanged = true;
      }
    }
    /** Deregister a default shader module */
    removeDefaultShaderModule(module) {
      const { defaultShaderModules } = this.context;
      const i7 = defaultShaderModules.findIndex((m3) => m3.name === module.name);
      if (i7 >= 0) {
        defaultShaderModules.splice(i7, 1);
        this._defaultShaderModulesChanged = true;
      }
    }
    _handleError(stage, error, layer) {
      layer.raiseError(error, `${stage} of ${layer}`);
    }
    // TODO - mark layers with exceptions as bad and remove from rendering cycle?
    /** Match all layers, checking for caught errors
      to avoid having an exception in one layer disrupt other layers */
    _updateLayers(oldLayers, newLayers) {
      const oldLayerMap = {};
      for (const oldLayer of oldLayers) {
        if (oldLayerMap[oldLayer.id]) {
          log_default.warn(`Multiple old layers with same id ${oldLayer.id}`)();
        } else {
          oldLayerMap[oldLayer.id] = oldLayer;
        }
      }
      if (this._defaultShaderModulesChanged) {
        for (const layer of oldLayers) {
          layer.setNeedsUpdate();
          layer.setChangeFlags({ extensionsChanged: true });
        }
        this._defaultShaderModulesChanged = false;
      }
      const generatedLayers = [];
      this._updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers);
      this._finalizeOldLayers(oldLayerMap);
      let needsUpdate = false;
      for (const layer of generatedLayers) {
        if (layer.hasUniformTransition()) {
          needsUpdate = `Uniform transition in ${layer}`;
          break;
        }
      }
      this._needsUpdate = needsUpdate;
      this.layers = generatedLayers;
    }
    /* eslint-disable complexity,max-statements */
    // Note: adds generated layers to `generatedLayers` array parameter
    _updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers) {
      for (const newLayer of newLayers) {
        newLayer.context = this.context;
        const oldLayer = oldLayerMap[newLayer.id];
        if (oldLayer === null) {
          log_default.warn(`Multiple new layers with same id ${newLayer.id}`)();
        }
        oldLayerMap[newLayer.id] = null;
        let sublayers = null;
        try {
          if (this._debug && oldLayer !== newLayer) {
            newLayer.validateProps();
          }
          if (!oldLayer) {
            this._initializeLayer(newLayer);
          } else {
            this._transferLayerState(oldLayer, newLayer);
            this._updateLayer(newLayer);
          }
          generatedLayers.push(newLayer);
          sublayers = newLayer.isComposite ? newLayer.getSubLayers() : null;
        } catch (err) {
          this._handleError("matching", err, newLayer);
        }
        if (sublayers) {
          this._updateSublayersRecursively(sublayers, oldLayerMap, generatedLayers);
        }
      }
    }
    /* eslint-enable complexity,max-statements */
    // Finalize any old layers that were not matched
    _finalizeOldLayers(oldLayerMap) {
      for (const layerId in oldLayerMap) {
        const layer = oldLayerMap[layerId];
        if (layer) {
          this._finalizeLayer(layer);
        }
      }
    }
    // / EXCEPTION SAFE LAYER ACCESS
    /** Safely initializes a single layer, calling layer methods */
    _initializeLayer(layer) {
      try {
        layer._initialize();
        layer.lifecycle = LIFECYCLE.INITIALIZED;
      } catch (err) {
        this._handleError("initialization", err, layer);
      }
    }
    /** Transfer state from one layer to a newer version */
    _transferLayerState(oldLayer, newLayer) {
      newLayer._transferState(oldLayer);
      newLayer.lifecycle = LIFECYCLE.MATCHED;
      if (newLayer !== oldLayer) {
        oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;
      }
    }
    /** Safely updates a single layer, cleaning all flags */
    _updateLayer(layer) {
      try {
        layer._update();
      } catch (err) {
        this._handleError("update", err, layer);
      }
    }
    /** Safely finalizes a single layer, removing all resources */
    _finalizeLayer(layer) {
      this._needsRedraw = this._needsRedraw || `finalized ${layer}`;
      layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;
      try {
        layer._finalize();
        layer.lifecycle = LIFECYCLE.FINALIZED;
      } catch (err) {
        this._handleError("finalization", err, layer);
      }
    }
  };

  // ../core/src/utils/deep-equal.ts
  function deepEqual2(a6, b4, depth) {
    if (a6 === b4) {
      return true;
    }
    if (!depth || !a6 || !b4) {
      return false;
    }
    if (Array.isArray(a6)) {
      if (!Array.isArray(b4) || a6.length !== b4.length) {
        return false;
      }
      for (let i7 = 0; i7 < a6.length; i7++) {
        if (!deepEqual2(a6[i7], b4[i7], depth - 1)) {
          return false;
        }
      }
      return true;
    }
    if (Array.isArray(b4)) {
      return false;
    }
    if (typeof a6 === "object" && typeof b4 === "object") {
      const aKeys = Object.keys(a6);
      const bKeys = Object.keys(b4);
      if (aKeys.length !== bKeys.length) {
        return false;
      }
      for (const key of aKeys) {
        if (!b4.hasOwnProperty(key)) {
          return false;
        }
        if (!deepEqual2(a6[key], b4[key], depth - 1)) {
          return false;
        }
      }
      return true;
    }
    return false;
  }

  // ../core/src/lib/view-manager.ts
  var ViewManager = class {
    constructor(props) {
      this.views = [];
      this.width = 100;
      this.height = 100;
      this.viewState = {};
      this.controllers = {};
      this.timeline = props.timeline;
      this._viewports = [];
      this._viewportMap = {};
      this._isUpdating = false;
      this._needsRedraw = "First render";
      this._needsUpdate = "Initialize";
      this._eventManager = props.eventManager;
      this._eventCallbacks = {
        onViewStateChange: props.onViewStateChange,
        onInteractionStateChange: props.onInteractionStateChange
      };
      Object.seal(this);
      this.setProps(props);
    }
    /** Remove all resources and event listeners */
    finalize() {
      for (const key in this.controllers) {
        const controller = this.controllers[key];
        if (controller) {
          controller.finalize();
        }
      }
      this.controllers = {};
    }
    /** Check if a redraw is needed */
    needsRedraw(opts = { clearRedrawFlags: false }) {
      const redraw = this._needsRedraw;
      if (opts.clearRedrawFlags) {
        this._needsRedraw = false;
      }
      return redraw;
    }
    /** Mark the manager as dirty. Will rebuild all viewports and update controllers. */
    setNeedsUpdate(reason) {
      this._needsUpdate = this._needsUpdate || reason;
      this._needsRedraw = this._needsRedraw || reason;
    }
    /** Checks each viewport for transition updates */
    updateViewStates() {
      for (const viewId in this.controllers) {
        const controller = this.controllers[viewId];
        if (controller) {
          controller.updateTransition();
        }
      }
    }
    /** Get a set of viewports for a given width and height
     * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props
     * @param rect (object, optional) - filter the viewports
     *   + not provided - return all viewports
     *   + {x, y} - only return viewports that contain this pixel
     *   + {x, y, width, height} - only return viewports that overlap with this rectangle
     */
    getViewports(rect) {
      if (rect) {
        return this._viewports.filter((viewport) => viewport.containsPixel(rect));
      }
      return this._viewports;
    }
    /** Get a map of all views */
    getViews() {
      const viewMap = {};
      this.views.forEach((view) => {
        viewMap[view.id] = view;
      });
      return viewMap;
    }
    /** Resolves a viewId string to a View */
    getView(viewId) {
      return this.views.find((view) => view.id === viewId);
    }
    /** Returns the viewState for a specific viewId. Matches the viewState by
      1. view.viewStateId
      2. view.id
      3. root viewState
      then applies the view's filter if any */
    getViewState(viewOrViewId) {
      const view = typeof viewOrViewId === "string" ? this.getView(viewOrViewId) : viewOrViewId;
      const viewState = view && this.viewState[view.getViewStateId()] || this.viewState;
      return view ? view.filterViewState(viewState) : viewState;
    }
    getViewport(viewId) {
      return this._viewportMap[viewId];
    }
    /**
     * Unproject pixel coordinates on screen onto world coordinates,
     * (possibly [lon, lat]) on map.
     * - [x, y] => [lng, lat]
     * - [x, y, z] => [lng, lat, Z]
     * @param {Array} xyz -
     * @param {Object} opts - options
     * @param {Object} opts.topLeft=true - Whether origin is top left
     * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]
     */
    unproject(xyz, opts) {
      const viewports = this.getViewports();
      const pixel = { x: xyz[0], y: xyz[1] };
      for (let i7 = viewports.length - 1; i7 >= 0; --i7) {
        const viewport = viewports[i7];
        if (viewport.containsPixel(pixel)) {
          const p5 = xyz.slice();
          p5[0] -= viewport.x;
          p5[1] -= viewport.y;
          return viewport.unproject(p5, opts);
        }
      }
      return null;
    }
    /** Update the manager with new Deck props */
    setProps(props) {
      if (props.views) {
        this._setViews(props.views);
      }
      if (props.viewState) {
        this._setViewState(props.viewState);
      }
      if ("width" in props || "height" in props) {
        this._setSize(props.width, props.height);
      }
      if (!this._isUpdating) {
        this._update();
      }
    }
    //
    // PRIVATE METHODS
    //
    _update() {
      this._isUpdating = true;
      if (this._needsUpdate) {
        this._needsUpdate = false;
        this._rebuildViewports();
      }
      if (this._needsUpdate) {
        this._needsUpdate = false;
        this._rebuildViewports();
      }
      this._isUpdating = false;
    }
    _setSize(width, height) {
      if (width !== this.width || height !== this.height) {
        this.width = width;
        this.height = height;
        this.setNeedsUpdate("Size changed");
      }
    }
    // Update the view descriptor list and set change flag if needed
    // Does not actually rebuild the `Viewport`s until `getViewports` is called
    _setViews(views) {
      views = flatten(views, Boolean);
      const viewsChanged = this._diffViews(views, this.views);
      if (viewsChanged) {
        this.setNeedsUpdate("views changed");
      }
      this.views = views;
    }
    _setViewState(viewState) {
      if (viewState) {
        const viewStateChanged = !deepEqual2(viewState, this.viewState, 3);
        if (viewStateChanged) {
          this.setNeedsUpdate("viewState changed");
        }
        this.viewState = viewState;
      } else {
        log_default.warn("missing `viewState` or `initialViewState`")();
      }
    }
    _createController(view, props) {
      const Controller2 = props.type;
      const controller = new Controller2({
        timeline: this.timeline,
        eventManager: this._eventManager,
        // Set an internal callback that calls the prop callback if provided
        onViewStateChange: this._eventCallbacks.onViewStateChange,
        onStateChange: this._eventCallbacks.onInteractionStateChange,
        makeViewport: (viewState) => this.getView(view.id)?.makeViewport({
          viewState,
          width: this.width,
          height: this.height
        })
      });
      return controller;
    }
    _updateController(view, viewState, viewport, controller) {
      const controllerProps = view.controller;
      if (controllerProps && viewport) {
        const resolvedProps = {
          ...viewState,
          ...controllerProps,
          id: view.id,
          x: viewport.x,
          y: viewport.y,
          width: viewport.width,
          height: viewport.height
        };
        if (!controller || controller.constructor !== controllerProps.type) {
          controller = this._createController(view, resolvedProps);
        }
        if (controller) {
          controller.setProps(resolvedProps);
        }
        return controller;
      }
      return null;
    }
    // Rebuilds viewports from descriptors towards a certain window size
    _rebuildViewports() {
      const { views } = this;
      const oldControllers = this.controllers;
      this._viewports = [];
      this.controllers = {};
      let invalidateControllers = false;
      for (let i7 = views.length; i7--; ) {
        const view = views[i7];
        const viewState = this.getViewState(view);
        const viewport = view.makeViewport({ viewState, width: this.width, height: this.height });
        let oldController = oldControllers[view.id];
        const hasController = Boolean(view.controller);
        if (hasController && !oldController) {
          invalidateControllers = true;
        }
        if ((invalidateControllers || !hasController) && oldController) {
          oldController.finalize();
          oldController = null;
        }
        this.controllers[view.id] = this._updateController(view, viewState, viewport, oldController);
        if (viewport) {
          this._viewports.unshift(viewport);
        }
      }
      for (const id in oldControllers) {
        const oldController = oldControllers[id];
        if (oldController && !this.controllers[id]) {
          oldController.finalize();
        }
      }
      this._buildViewportMap();
    }
    _buildViewportMap() {
      this._viewportMap = {};
      this._viewports.forEach((viewport) => {
        if (viewport.id) {
          this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;
        }
      });
    }
    // Check if viewport array has changed, returns true if any change
    // Note that descriptors can be the same
    _diffViews(newViews, oldViews) {
      if (newViews.length !== oldViews.length) {
        return true;
      }
      return newViews.some((_3, i7) => !newViews[i7].equals(oldViews[i7]));
    }
  };

  // ../core/src/utils/positions.ts
  var PERCENT_OR_PIXELS_REGEX = /([0-9]+\.?[0-9]*)(%|px)/;
  function parsePosition(value) {
    switch (typeof value) {
      case "number":
        return {
          position: value,
          relative: false
        };
      case "string":
        const match = PERCENT_OR_PIXELS_REGEX.exec(value);
        if (match && match.length >= 3) {
          const relative = match[2] === "%";
          const position = parseFloat(match[1]);
          return {
            position: relative ? position / 100 : position,
            relative
          };
        }
      default:
        throw new Error(`Could not parse position string ${value}`);
    }
  }
  function getPosition(position, extent) {
    return position.relative ? Math.round(position.position * extent) : position.position;
  }

  // ../core/src/views/view.ts
  var View = class {
    constructor(props) {
      const { id, x: x4 = 0, y: y5 = 0, width = "100%", height = "100%", padding = null } = props;
      this.id = id || this.constructor.displayName || "view";
      this.props = { ...props, id: this.id };
      this._x = parsePosition(x4);
      this._y = parsePosition(y5);
      this._width = parsePosition(width);
      this._height = parsePosition(height);
      this._padding = padding && {
        left: parsePosition(padding.left || 0),
        right: parsePosition(padding.right || 0),
        top: parsePosition(padding.top || 0),
        bottom: parsePosition(padding.bottom || 0)
      };
      this.equals = this.equals.bind(this);
      Object.seal(this);
    }
    equals(view) {
      if (this === view) {
        return true;
      }
      return this.constructor === view.constructor && deepEqual2(this.props, view.props, 2);
    }
    /** Clone this view with modified props */
    clone(newProps) {
      const ViewConstructor = this.constructor;
      return new ViewConstructor({ ...this.props, ...newProps });
    }
    /** Make viewport from canvas dimensions and view state */
    makeViewport({ width, height, viewState }) {
      viewState = this.filterViewState(viewState);
      const viewportDimensions = this.getDimensions({ width, height });
      if (!viewportDimensions.height || !viewportDimensions.width) {
        return null;
      }
      const ViewportType = this.getViewportType(viewState);
      return new ViewportType({ ...viewState, ...this.props, ...viewportDimensions });
    }
    getViewStateId() {
      const { viewState } = this.props;
      if (typeof viewState === "string") {
        return viewState;
      }
      return viewState?.id || this.id;
    }
    // Allows view to override (or completely define) viewState
    filterViewState(viewState) {
      if (this.props.viewState && typeof this.props.viewState === "object") {
        if (!this.props.viewState.id) {
          return this.props.viewState;
        }
        const newViewState = { ...viewState };
        for (const key in this.props.viewState) {
          if (key !== "id") {
            newViewState[key] = this.props.viewState[key];
          }
        }
        return newViewState;
      }
      return viewState;
    }
    /** Resolve the dimensions of the view from overall canvas dimensions */
    getDimensions({ width, height }) {
      const dimensions = {
        x: getPosition(this._x, width),
        y: getPosition(this._y, height),
        width: getPosition(this._width, width),
        height: getPosition(this._height, height)
      };
      if (this._padding) {
        dimensions.padding = {
          left: getPosition(this._padding.left, width),
          top: getPosition(this._padding.top, height),
          right: getPosition(this._padding.right, width),
          bottom: getPosition(this._padding.bottom, height)
        };
      }
      return dimensions;
    }
    // Used by sub classes to resolve controller props
    get controller() {
      const opts = this.props.controller;
      if (!opts) {
        return null;
      }
      if (opts === true) {
        return { type: this.ControllerType };
      }
      if (typeof opts === "function") {
        return { type: opts };
      }
      return { type: this.ControllerType, ...opts };
    }
  };

  // ../core/src/transitions/transition.ts
  var Transition = class {
    /**
     * @params timeline {Timeline}
     */
    constructor(timeline) {
      this._inProgress = false;
      this._handle = null;
      this.time = 0;
      // @ts-expect-error
      this.settings = {
        duration: 0
      };
      this._timeline = timeline;
    }
    /* Public API */
    get inProgress() {
      return this._inProgress;
    }
    /**
     * (re)start this transition.
     * @params props {object} - optional overriding props. see constructor
     */
    start(settings) {
      this.cancel();
      this.settings = settings;
      this._inProgress = true;
      this.settings.onStart?.(this);
    }
    /**
     * end this transition if it is in progress.
     */
    end() {
      if (this._inProgress) {
        this._timeline.removeChannel(this._handle);
        this._handle = null;
        this._inProgress = false;
        this.settings.onEnd?.(this);
      }
    }
    /**
     * cancel this transition if it is in progress.
     */
    cancel() {
      if (this._inProgress) {
        this.settings.onInterrupt?.(this);
        this._timeline.removeChannel(this._handle);
        this._handle = null;
        this._inProgress = false;
      }
    }
    /**
     * update this transition. Returns `true` if updated.
     */
    update() {
      if (!this._inProgress) {
        return false;
      }
      if (this._handle === null) {
        const { _timeline: timeline, settings } = this;
        this._handle = timeline.addChannel({
          delay: timeline.getTime(),
          duration: settings.duration
        });
      }
      this.time = this._timeline.getTime(this._handle);
      this._onUpdate();
      this.settings.onUpdate?.(this);
      if (this._timeline.isFinished(this._handle)) {
        this.end();
      }
      return true;
    }
    /* Private API */
    _onUpdate() {
    }
  };

  // ../core/src/controllers/transition-manager.ts
  var noop2 = () => {
  };
  var TRANSITION_EVENTS = {
    BREAK: 1,
    SNAP_TO_END: 2,
    IGNORE: 3
  };
  var DEFAULT_EASING = (t5) => t5;
  var DEFAULT_INTERRUPTION = TRANSITION_EVENTS.BREAK;
  var TransitionManager = class {
    constructor(opts) {
      this._onTransitionUpdate = (transition) => {
        const {
          time,
          settings: { interpolator, startProps, endProps, duration, easing }
        } = transition;
        const t5 = easing(time / duration);
        const viewport = interpolator.interpolateProps(startProps, endProps, t5);
        this.propsInTransition = this.getControllerState({
          ...this.props,
          ...viewport
        }).getViewportProps();
        this.onViewStateChange({
          viewState: this.propsInTransition,
          oldViewState: this.props
        });
      };
      this.getControllerState = opts.getControllerState;
      this.propsInTransition = null;
      this.transition = new Transition(opts.timeline);
      this.onViewStateChange = opts.onViewStateChange || noop2;
      this.onStateChange = opts.onStateChange || noop2;
    }
    finalize() {
      this.transition.cancel();
    }
    // Returns current transitioned viewport.
    getViewportInTransition() {
      return this.propsInTransition;
    }
    // Process the vewiport change, either ignore or trigger a new transition.
    // Return true if a new transition is triggered, false otherwise.
    processViewStateChange(nextProps) {
      let transitionTriggered = false;
      const currentProps = this.props;
      this.props = nextProps;
      if (!currentProps || this._shouldIgnoreViewportChange(currentProps, nextProps)) {
        return false;
      }
      if (this._isTransitionEnabled(nextProps)) {
        let startProps = currentProps;
        if (this.transition.inProgress) {
          const { interruption, endProps } = this.transition.settings;
          startProps = {
            ...currentProps,
            ...interruption === TRANSITION_EVENTS.SNAP_TO_END ? endProps : this.propsInTransition || currentProps
          };
        }
        this._triggerTransition(startProps, nextProps);
        transitionTriggered = true;
      } else {
        this.transition.cancel();
      }
      return transitionTriggered;
    }
    updateTransition() {
      this.transition.update();
    }
    // Helper methods
    _isTransitionEnabled(props) {
      const { transitionDuration, transitionInterpolator } = props;
      return (transitionDuration > 0 || transitionDuration === "auto") && Boolean(transitionInterpolator);
    }
    _isUpdateDueToCurrentTransition(props) {
      if (this.transition.inProgress && this.propsInTransition) {
        return this.transition.settings.interpolator.arePropsEqual(
          props,
          this.propsInTransition
        );
      }
      return false;
    }
    _shouldIgnoreViewportChange(currentProps, nextProps) {
      if (this.transition.inProgress) {
        const transitionSettings = this.transition.settings;
        return transitionSettings.interruption === TRANSITION_EVENTS.IGNORE || // Ignore update if it is due to current active transition.
        this._isUpdateDueToCurrentTransition(nextProps);
      }
      if (this._isTransitionEnabled(nextProps)) {
        return nextProps.transitionInterpolator.arePropsEqual(
          currentProps,
          nextProps
        );
      }
      return true;
    }
    _triggerTransition(startProps, endProps) {
      const startViewstate = this.getControllerState(startProps);
      const endViewStateProps = this.getControllerState(endProps).shortestPathFrom(startViewstate);
      const transitionInterpolator = endProps.transitionInterpolator;
      const duration = transitionInterpolator.getDuration ? transitionInterpolator.getDuration(startProps, endProps) : endProps.transitionDuration;
      if (duration === 0) {
        return;
      }
      const initialProps = transitionInterpolator.initializeProps(startProps, endViewStateProps);
      this.propsInTransition = {};
      const transitionSettings = {
        duration,
        easing: endProps.transitionEasing || DEFAULT_EASING,
        interpolator: transitionInterpolator,
        interruption: endProps.transitionInterruption || DEFAULT_INTERRUPTION,
        startProps: initialProps.start,
        endProps: initialProps.end,
        onStart: endProps.onTransitionStart,
        onUpdate: this._onTransitionUpdate,
        onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),
        onEnd: this._onTransitionEnd(endProps.onTransitionEnd)
      };
      this.transition.start(transitionSettings);
      this.onStateChange({ inTransition: true });
      this.updateTransition();
    }
    _onTransitionEnd(callback) {
      return (transition) => {
        this.propsInTransition = null;
        this.onStateChange({
          inTransition: false,
          isZooming: false,
          isPanning: false,
          isRotating: false
        });
        callback?.(transition);
      };
    }
  };

  // ../core/src/utils/assert.ts
  function assert8(condition, message2) {
    if (!condition) {
      throw new Error(message2 || "deck.gl: assertion failed.");
    }
  }

  // ../core/src/transitions/transition-interpolator.ts
  var TransitionInterpolator = class {
    /**
     * @param opts {array|object}
     * @param opts.compare {array} - prop names used in equality check
     * @param opts.extract {array} - prop names needed for interpolation
     * @param opts.required {array} - prop names that must be supplied
     * alternatively, supply one list of prop names as `opts` if all of the above are the same.
     */
    constructor(opts) {
      const { compare: compare2, extract, required } = opts;
      this._propsToCompare = compare2;
      this._propsToExtract = extract || compare2;
      this._requiredProps = required;
    }
    /**
     * Checks if two sets of props need transition in between
     * @param currentProps {object} - a list of viewport props
     * @param nextProps {object} - a list of viewport props
     * @returns {bool} - true if two props are equivalent
     */
    arePropsEqual(currentProps, nextProps) {
      for (const key of this._propsToCompare) {
        if (!(key in currentProps) || !(key in nextProps) || !equals(currentProps[key], nextProps[key])) {
          return false;
        }
      }
      return true;
    }
    /**
     * Called before transition starts to validate/pre-process start and end props
     * @param startProps {object} - a list of starting viewport props
     * @param endProps {object} - a list of target viewport props
     * @returns {Object} {start, end} - start and end props to be passed
     *   to `interpolateProps`
     */
    initializeProps(startProps, endProps) {
      const startViewStateProps = {};
      const endViewStateProps = {};
      for (const key of this._propsToExtract) {
        if (key in startProps || key in endProps) {
          startViewStateProps[key] = startProps[key];
          endViewStateProps[key] = endProps[key];
        }
      }
      this._checkRequiredProps(startViewStateProps);
      this._checkRequiredProps(endViewStateProps);
      return { start: startViewStateProps, end: endViewStateProps };
    }
    /**
     * Returns transition duration
     * @param startProps {object} - a list of starting viewport props
     * @param endProps {object} - a list of target viewport props
     * @returns {Number} - transition duration in milliseconds
     */
    getDuration(startProps, endProps) {
      return endProps.transitionDuration;
    }
    _checkRequiredProps(props) {
      if (!this._requiredProps) {
        return;
      }
      this._requiredProps.forEach((propName) => {
        const value = props[propName];
        assert8(
          Number.isFinite(value) || Array.isArray(value),
          `${propName} is required for transition`
        );
      });
    }
  };

  // ../core/src/transitions/linear-interpolator.ts
  var DEFAULT_PROPS3 = ["longitude", "latitude", "zoom", "bearing", "pitch"];
  var DEFAULT_REQUIRED_PROPS = ["longitude", "latitude", "zoom"];
  var LinearInterpolator = class extends TransitionInterpolator {
    /**
     * @param {Object} opts
     * @param {Array} opts.transitionProps - list of props to apply linear transition to.
     * @param {Array} opts.around - a screen point to zoom/rotate around.
     * @param {Function} opts.makeViewport - construct a viewport instance with given props.
     */
    constructor(opts = {}) {
      const transitionProps = Array.isArray(opts) ? opts : opts.transitionProps;
      const normalizedOpts = Array.isArray(opts) ? {} : opts;
      normalizedOpts.transitionProps = Array.isArray(transitionProps) ? {
        compare: transitionProps,
        required: transitionProps
      } : transitionProps || {
        compare: DEFAULT_PROPS3,
        required: DEFAULT_REQUIRED_PROPS
      };
      super(normalizedOpts.transitionProps);
      this.opts = normalizedOpts;
    }
    initializeProps(startProps, endProps) {
      const result = super.initializeProps(startProps, endProps);
      const { makeViewport: makeViewport2, around } = this.opts;
      if (makeViewport2 && around) {
        const startViewport = makeViewport2(startProps);
        const endViewport = makeViewport2(endProps);
        const aroundPosition = startViewport.unproject(around);
        result.start.around = around;
        Object.assign(result.end, {
          around: endViewport.project(aroundPosition),
          aroundPosition,
          width: endProps.width,
          height: endProps.height
        });
      }
      return result;
    }
    interpolateProps(startProps, endProps, t5) {
      const propsInTransition = {};
      for (const key of this._propsToExtract) {
        propsInTransition[key] = lerp(startProps[key] || 0, endProps[key] || 0, t5);
      }
      if (endProps.aroundPosition && this.opts.makeViewport) {
        const viewport = this.opts.makeViewport({ ...endProps, ...propsInTransition });
        Object.assign(
          propsInTransition,
          viewport.panByPosition(
            endProps.aroundPosition,
            // anchor point in current screen coordinates
            lerp(startProps.around, endProps.around, t5)
          )
        );
      }
      return propsInTransition;
    }
  };

  // ../core/src/controllers/controller.ts
  var NO_TRANSITION_PROPS = {
    transitionDuration: 0
  };
  var DEFAULT_INERTIA = 300;
  var INERTIA_EASING = (t5) => 1 - (1 - t5) * (1 - t5);
  var EVENT_TYPES = {
    WHEEL: ["wheel"],
    PAN: ["panstart", "panmove", "panend"],
    PINCH: ["pinchstart", "pinchmove", "pinchend"],
    MULTI_PAN: ["multipanstart", "multipanmove", "multipanend"],
    DOUBLE_CLICK: ["dblclick"],
    KEYBOARD: ["keydown"]
  };
  var pinchEventWorkaround = {};
  var Controller = class {
    constructor(opts) {
      this.state = {};
      this._events = {};
      this._interactionState = {
        isDragging: false
      };
      this._customEvents = [];
      this._eventStartBlocked = null;
      this._panMove = false;
      this.invertPan = false;
      this.dragMode = "rotate";
      this.inertia = 0;
      this.scrollZoom = true;
      this.dragPan = true;
      this.dragRotate = true;
      this.doubleClickZoom = true;
      this.touchZoom = true;
      this.touchRotate = false;
      this.keyboard = true;
      this.transitionManager = new TransitionManager({
        ...opts,
        getControllerState: (props) => new this.ControllerState(props),
        onViewStateChange: this._onTransition.bind(this),
        onStateChange: this._setInteractionState.bind(this)
      });
      this.handleEvent = this.handleEvent.bind(this);
      this.eventManager = opts.eventManager;
      this.onViewStateChange = opts.onViewStateChange || (() => {
      });
      this.onStateChange = opts.onStateChange || (() => {
      });
      this.makeViewport = opts.makeViewport;
    }
    set events(customEvents) {
      this.toggleEvents(this._customEvents, false);
      this.toggleEvents(customEvents, true);
      this._customEvents = customEvents;
      if (this.props) {
        this.setProps(this.props);
      }
    }
    finalize() {
      for (const eventName in this._events) {
        if (this._events[eventName]) {
          this.eventManager?.off(eventName, this.handleEvent);
        }
      }
      this.transitionManager.finalize();
    }
    /**
     * Callback for events
     */
    handleEvent(event) {
      this._controllerState = void 0;
      const eventStartBlocked = this._eventStartBlocked;
      switch (event.type) {
        case "panstart":
          return eventStartBlocked ? false : this._onPanStart(event);
        case "panmove":
          return this._onPan(event);
        case "panend":
          return this._onPanEnd(event);
        case "pinchstart":
          return eventStartBlocked ? false : this._onPinchStart(event);
        case "pinchmove":
          return this._onPinch(event);
        case "pinchend":
          return this._onPinchEnd(event);
        case "multipanstart":
          return eventStartBlocked ? false : this._onMultiPanStart(event);
        case "multipanmove":
          return this._onMultiPan(event);
        case "multipanend":
          return this._onMultiPanEnd(event);
        case "dblclick":
          return this._onDoubleClick(event);
        case "wheel":
          return this._onWheel(event);
        case "keydown":
          return this._onKeyDown(event);
        default:
          return false;
      }
    }
    /* Event utils */
    // Event object: http://hammerjs.github.io/api/#event-object
    get controllerState() {
      this._controllerState = this._controllerState || new this.ControllerState({
        makeViewport: this.makeViewport,
        ...this.props,
        ...this.state
      });
      return this._controllerState;
    }
    getCenter(event) {
      const { x: x4, y: y5 } = this.props;
      const { offsetCenter } = event;
      return [offsetCenter.x - x4, offsetCenter.y - y5];
    }
    isPointInBounds(pos, event) {
      const { width, height } = this.props;
      if (event && event.handled) {
        return false;
      }
      const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;
      if (inside && event) {
        event.stopPropagation();
      }
      return inside;
    }
    isFunctionKeyPressed(event) {
      const { srcEvent } = event;
      return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);
    }
    isDragging() {
      return this._interactionState.isDragging || false;
    }
    // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.
    // This triggers a brief `pan` event.
    // Calling this method will temporarily disable *start events to avoid conflicting transitions.
    blockEvents(timeout) {
      const timer = setTimeout(() => {
        if (this._eventStartBlocked === timer) {
          this._eventStartBlocked = null;
        }
      }, timeout);
      this._eventStartBlocked = timer;
    }
    /**
     * Extract interactivity options
     */
    setProps(props) {
      if (props.dragMode) {
        this.dragMode = props.dragMode;
      }
      this.props = props;
      if (!("transitionInterpolator" in props)) {
        props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;
      }
      this.transitionManager.processViewStateChange(props);
      const { inertia } = props;
      this.inertia = Number.isFinite(inertia) ? inertia : inertia === true ? DEFAULT_INERTIA : 0;
      const {
        scrollZoom = true,
        dragPan = true,
        dragRotate = true,
        doubleClickZoom = true,
        touchZoom = true,
        touchRotate = false,
        keyboard = true
      } = props;
      const isInteractive = Boolean(this.onViewStateChange);
      this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);
      this.toggleEvents(EVENT_TYPES.PAN, isInteractive);
      this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));
      this.toggleEvents(EVENT_TYPES.MULTI_PAN, isInteractive && touchRotate);
      this.toggleEvents(EVENT_TYPES.DOUBLE_CLICK, isInteractive && doubleClickZoom);
      this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);
      this.scrollZoom = scrollZoom;
      this.dragPan = dragPan;
      this.dragRotate = dragRotate;
      this.doubleClickZoom = doubleClickZoom;
      this.touchZoom = touchZoom;
      this.touchRotate = touchRotate;
      this.keyboard = keyboard;
    }
    updateTransition() {
      this.transitionManager.updateTransition();
    }
    toggleEvents(eventNames, enabled) {
      if (this.eventManager) {
        eventNames.forEach((eventName) => {
          if (this._events[eventName] !== enabled) {
            this._events[eventName] = enabled;
            if (enabled) {
              this.eventManager.on(eventName, this.handleEvent);
            } else {
              this.eventManager.off(eventName, this.handleEvent);
            }
          }
        });
      }
    }
    // Private Methods
    /* Callback util */
    // formats map state and invokes callback function
    updateViewport(newControllerState, extraProps = null, interactionState = {}) {
      const viewState = { ...newControllerState.getViewportProps(), ...extraProps };
      const changed = this.controllerState !== newControllerState;
      this.state = newControllerState.getState();
      this._setInteractionState(interactionState);
      if (changed) {
        const oldViewState = this.controllerState && this.controllerState.getViewportProps();
        if (this.onViewStateChange) {
          this.onViewStateChange({ viewState, interactionState: this._interactionState, oldViewState, viewId: this.props.id });
        }
      }
    }
    _onTransition(params) {
      this.onViewStateChange({ ...params, interactionState: this._interactionState, viewId: this.props.id });
    }
    _setInteractionState(newStates) {
      Object.assign(this._interactionState, newStates);
      this.onStateChange(this._interactionState);
    }
    /* Event handlers */
    // Default handler for the `panstart` event.
    _onPanStart(event) {
      const pos = this.getCenter(event);
      if (!this.isPointInBounds(pos, event)) {
        return false;
      }
      let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton || false;
      if (this.invertPan || this.dragMode === "pan") {
        alternateMode = !alternateMode;
      }
      const newControllerState = this.controllerState[alternateMode ? "panStart" : "rotateStart"]({
        pos
      });
      this._panMove = alternateMode;
      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, { isDragging: true });
      return true;
    }
    // Default handler for the `panmove` and `panend` event.
    _onPan(event) {
      if (!this.isDragging()) {
        return false;
      }
      return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);
    }
    _onPanEnd(event) {
      if (!this.isDragging()) {
        return false;
      }
      return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);
    }
    // Default handler for panning to move.
    // Called by `_onPan` when panning without function key pressed.
    _onPanMove(event) {
      if (!this.dragPan) {
        return false;
      }
      const pos = this.getCenter(event);
      const newControllerState = this.controllerState.pan({ pos });
      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
        isDragging: true,
        isPanning: true
      });
      return true;
    }
    _onPanMoveEnd(event) {
      const { inertia } = this;
      if (this.dragPan && inertia && event.velocity) {
        const pos = this.getCenter(event);
        const endPos2 = [
          pos[0] + event.velocityX * inertia / 2,
          pos[1] + event.velocityY * inertia / 2
        ];
        const newControllerState = this.controllerState.pan({ pos: endPos2 }).panEnd();
        this.updateViewport(
          newControllerState,
          {
            ...this._getTransitionProps(),
            transitionDuration: inertia,
            transitionEasing: INERTIA_EASING
          },
          {
            isDragging: false,
            isPanning: true
          }
        );
      } else {
        const newControllerState = this.controllerState.panEnd();
        this.updateViewport(newControllerState, null, {
          isDragging: false,
          isPanning: false
        });
      }
      return true;
    }
    // Default handler for panning to rotate.
    // Called by `_onPan` when panning with function key pressed.
    _onPanRotate(event) {
      if (!this.dragRotate) {
        return false;
      }
      const pos = this.getCenter(event);
      const newControllerState = this.controllerState.rotate({ pos });
      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
        isDragging: true,
        isRotating: true
      });
      return true;
    }
    _onPanRotateEnd(event) {
      const { inertia } = this;
      if (this.dragRotate && inertia && event.velocity) {
        const pos = this.getCenter(event);
        const endPos2 = [
          pos[0] + event.velocityX * inertia / 2,
          pos[1] + event.velocityY * inertia / 2
        ];
        const newControllerState = this.controllerState.rotate({ pos: endPos2 }).rotateEnd();
        this.updateViewport(
          newControllerState,
          {
            ...this._getTransitionProps(),
            transitionDuration: inertia,
            transitionEasing: INERTIA_EASING
          },
          {
            isDragging: false,
            isRotating: true
          }
        );
      } else {
        const newControllerState = this.controllerState.rotateEnd();
        this.updateViewport(newControllerState, null, {
          isDragging: false,
          isRotating: false
        });
      }
      return true;
    }
    // Default handler for the `wheel` event.
    _onWheel(event) {
      if (!this.scrollZoom) {
        return false;
      }
      const pos = this.getCenter(event);
      if (!this.isPointInBounds(pos, event)) {
        return false;
      }
      event.srcEvent.preventDefault();
      const { speed = 0.01, smooth = false } = this.scrollZoom === true ? {} : this.scrollZoom;
      const { delta } = event;
      let scale24 = 2 / (1 + Math.exp(-Math.abs(delta * speed)));
      if (delta < 0 && scale24 !== 0) {
        scale24 = 1 / scale24;
      }
      const transitionProps = smooth ? { ...this._getTransitionProps({ around: pos }), transitionDuration: 250 } : NO_TRANSITION_PROPS;
      const newControllerState = this.controllerState.zoom({ pos, scale: scale24 });
      this.updateViewport(
        newControllerState,
        transitionProps,
        {
          isZooming: true,
          isPanning: true
        }
      );
      return true;
    }
    _onMultiPanStart(event) {
      const pos = this.getCenter(event);
      if (!this.isPointInBounds(pos, event)) {
        return false;
      }
      const newControllerState = this.controllerState.rotateStart({ pos });
      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, { isDragging: true });
      return true;
    }
    _onMultiPan(event) {
      if (!this.touchRotate) {
        return false;
      }
      if (!this.isDragging()) {
        return false;
      }
      const pos = this.getCenter(event);
      pos[0] -= event.deltaX;
      const newControllerState = this.controllerState.rotate({ pos });
      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
        isDragging: true,
        isRotating: true
      });
      return true;
    }
    _onMultiPanEnd(event) {
      if (!this.isDragging()) {
        return false;
      }
      const { inertia } = this;
      if (this.touchRotate && inertia && event.velocityY) {
        const pos = this.getCenter(event);
        const endPos2 = [pos[0], pos[1] += event.velocityY * inertia / 2];
        const newControllerState = this.controllerState.rotate({ pos: endPos2 });
        this.updateViewport(
          newControllerState,
          {
            ...this._getTransitionProps(),
            transitionDuration: inertia,
            transitionEasing: INERTIA_EASING
          },
          {
            isDragging: false,
            isRotating: true
          }
        );
        this.blockEvents(inertia);
      } else {
        const newControllerState = this.controllerState.rotateEnd();
        this.updateViewport(newControllerState, null, {
          isDragging: false,
          isRotating: false
        });
      }
      return true;
    }
    // Default handler for the `pinchstart` event.
    _onPinchStart(event) {
      const pos = this.getCenter(event);
      if (!this.isPointInBounds(pos, event)) {
        return false;
      }
      const newControllerState = this.controllerState.zoomStart({ pos }).rotateStart({ pos });
      pinchEventWorkaround._startPinchRotation = event.rotation;
      pinchEventWorkaround._lastPinchEvent = event;
      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, { isDragging: true });
      return true;
    }
    // Default handler for the `pinchmove` and `pinchend` events.
    _onPinch(event) {
      if (!this.touchZoom && !this.touchRotate) {
        return false;
      }
      if (!this.isDragging()) {
        return false;
      }
      let newControllerState = this.controllerState;
      if (this.touchZoom) {
        const { scale: scale24 } = event;
        const pos = this.getCenter(event);
        newControllerState = newControllerState.zoom({ pos, scale: scale24 });
      }
      if (this.touchRotate) {
        const { rotation: rotation2 } = event;
        newControllerState = newControllerState.rotate({
          deltaAngleX: pinchEventWorkaround._startPinchRotation - rotation2
        });
      }
      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
        isDragging: true,
        isPanning: this.touchZoom,
        isZooming: this.touchZoom,
        isRotating: this.touchRotate
      });
      pinchEventWorkaround._lastPinchEvent = event;
      return true;
    }
    _onPinchEnd(event) {
      if (!this.isDragging()) {
        return false;
      }
      const { inertia } = this;
      const { _lastPinchEvent } = pinchEventWorkaround;
      if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {
        const pos = this.getCenter(event);
        let newControllerState = this.controllerState.rotateEnd();
        const z4 = Math.log2(event.scale);
        const velocityZ = (z4 - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);
        const endScale = Math.pow(2, z4 + velocityZ * inertia / 2);
        newControllerState = newControllerState.zoom({ pos, scale: endScale }).zoomEnd();
        this.updateViewport(
          newControllerState,
          {
            ...this._getTransitionProps({ around: pos }),
            transitionDuration: inertia,
            transitionEasing: INERTIA_EASING
          },
          {
            isDragging: false,
            isPanning: this.touchZoom,
            isZooming: this.touchZoom,
            isRotating: false
          }
        );
        this.blockEvents(inertia);
      } else {
        const newControllerState = this.controllerState.zoomEnd().rotateEnd();
        this.updateViewport(newControllerState, null, {
          isDragging: false,
          isPanning: false,
          isZooming: false,
          isRotating: false
        });
      }
      pinchEventWorkaround._startPinchRotation = null;
      pinchEventWorkaround._lastPinchEvent = null;
      return true;
    }
    // Default handler for the `dblclick` event.
    _onDoubleClick(event) {
      if (!this.doubleClickZoom) {
        return false;
      }
      const pos = this.getCenter(event);
      if (!this.isPointInBounds(pos, event)) {
        return false;
      }
      const isZoomOut = this.isFunctionKeyPressed(event);
      const newControllerState = this.controllerState.zoom({ pos, scale: isZoomOut ? 0.5 : 2 });
      this.updateViewport(newControllerState, this._getTransitionProps({ around: pos }), {
        isZooming: true,
        isPanning: true
      });
      this.blockEvents(100);
      return true;
    }
    // Default handler for the `keydown` event
    _onKeyDown(event) {
      if (!this.keyboard) {
        return false;
      }
      const funcKey = this.isFunctionKeyPressed(event);
      const { zoomSpeed, moveSpeed, rotateSpeedX, rotateSpeedY } = this.keyboard === true ? {} : this.keyboard;
      const { controllerState } = this;
      let newControllerState;
      const interactionState = {};
      switch (event.srcEvent.code) {
        case "Minus":
          newControllerState = funcKey ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed) : controllerState.zoomOut(zoomSpeed);
          interactionState.isZooming = true;
          break;
        case "Equal":
          newControllerState = funcKey ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed) : controllerState.zoomIn(zoomSpeed);
          interactionState.isZooming = true;
          break;
        case "ArrowLeft":
          if (funcKey) {
            newControllerState = controllerState.rotateLeft(rotateSpeedX);
            interactionState.isRotating = true;
          } else {
            newControllerState = controllerState.moveLeft(moveSpeed);
            interactionState.isPanning = true;
          }
          break;
        case "ArrowRight":
          if (funcKey) {
            newControllerState = controllerState.rotateRight(rotateSpeedX);
            interactionState.isRotating = true;
          } else {
            newControllerState = controllerState.moveRight(moveSpeed);
            interactionState.isPanning = true;
          }
          break;
        case "ArrowUp":
          if (funcKey) {
            newControllerState = controllerState.rotateUp(rotateSpeedY);
            interactionState.isRotating = true;
          } else {
            newControllerState = controllerState.moveUp(moveSpeed);
            interactionState.isPanning = true;
          }
          break;
        case "ArrowDown":
          if (funcKey) {
            newControllerState = controllerState.rotateDown(rotateSpeedY);
            interactionState.isRotating = true;
          } else {
            newControllerState = controllerState.moveDown(moveSpeed);
            interactionState.isPanning = true;
          }
          break;
        default:
          return false;
      }
      this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);
      return true;
    }
    _getTransitionProps(opts) {
      const { transition } = this;
      if (!transition || !transition.transitionInterpolator) {
        return NO_TRANSITION_PROPS;
      }
      return opts ? {
        ...transition,
        transitionInterpolator: new LinearInterpolator({
          ...opts,
          ...transition.transitionInterpolator.opts,
          makeViewport: this.controllerState.makeViewport
        })
      } : transition;
    }
  };

  // ../core/src/controllers/view-state.ts
  var ViewState = class {
    constructor(props, state) {
      this._viewportProps = this.applyConstraints(props);
      this._state = state;
    }
    getViewportProps() {
      return this._viewportProps;
    }
    getState() {
      return this._state;
    }
  };

  // ../core/src/controllers/map-controller.ts
  var PITCH_MOUSE_THRESHOLD = 5;
  var PITCH_ACCEL = 1.2;
  var MapState = class extends ViewState {
    constructor(options) {
      const {
        /** Mapbox viewport properties */
        /** The width of the viewport */
        width,
        /** The height of the viewport */
        height,
        /** The latitude at the center of the viewport */
        latitude,
        /** The longitude at the center of the viewport */
        longitude,
        /** The tile zoom level of the map. */
        zoom,
        /** The bearing of the viewport in degrees */
        bearing = 0,
        /** The pitch of the viewport in degrees */
        pitch = 0,
        /**
         * Specify the altitude of the viewport camera
         * Unit: map heights, default 1.5
         * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137
         */
        altitude = 1.5,
        /** Viewport position */
        position = [0, 0, 0],
        /** Viewport constraints */
        maxZoom = 20,
        minZoom = 0,
        maxPitch = 60,
        minPitch = 0,
        /** Interaction states, required to calculate change during transform */
        /* The point on map being grabbed when the operation first started */
        startPanLngLat,
        /* Center of the zoom when the operation first started */
        startZoomLngLat,
        /* Pointer position when rotation started */
        startRotatePos,
        /** Bearing when current perspective rotate operation started */
        startBearing,
        /** Pitch when current perspective rotate operation started */
        startPitch,
        /** Zoom when current zoom operation started */
        startZoom,
        /** Normalize viewport props to fit map height into viewport */
        normalize: normalize17 = true
      } = options;
      assert8(Number.isFinite(longitude));
      assert8(Number.isFinite(latitude));
      assert8(Number.isFinite(zoom));
      super(
        {
          width,
          height,
          latitude,
          longitude,
          zoom,
          bearing,
          pitch,
          altitude,
          maxZoom,
          minZoom,
          maxPitch,
          minPitch,
          normalize: normalize17,
          position
        },
        {
          startPanLngLat,
          startZoomLngLat,
          startRotatePos,
          startBearing,
          startPitch,
          startZoom
        }
      );
      this.makeViewport = options.makeViewport;
    }
    /**
     * Start panning
     * @param {[Number, Number]} pos - position on screen where the pointer grabs
     */
    panStart({ pos }) {
      return this._getUpdatedState({
        startPanLngLat: this._unproject(pos)
      });
    }
    /**
     * Pan
     * @param {[Number, Number]} pos - position on screen where the pointer is
     * @param {[Number, Number], optional} startPos - where the pointer grabbed at
     *   the start of the operation. Must be supplied of `panStart()` was not called
     */
    pan({ pos, startPos }) {
      const startPanLngLat = this.getState().startPanLngLat || this._unproject(startPos);
      if (!startPanLngLat) {
        return this;
      }
      const viewport = this.makeViewport(this.getViewportProps());
      const newProps = viewport.panByPosition(startPanLngLat, pos);
      return this._getUpdatedState(newProps);
    }
    /**
     * End panning
     * Must call if `panStart()` was called
     */
    panEnd() {
      return this._getUpdatedState({
        startPanLngLat: null
      });
    }
    /**
     * Start rotating
     * @param {[Number, Number]} pos - position on screen where the center is
     */
    rotateStart({ pos }) {
      return this._getUpdatedState({
        startRotatePos: pos,
        startBearing: this.getViewportProps().bearing,
        startPitch: this.getViewportProps().pitch
      });
    }
    /**
     * Rotate
     * @param {[Number, Number]} pos - position on screen where the center is
     */
    rotate({
      pos,
      deltaAngleX = 0,
      deltaAngleY = 0
    }) {
      const { startRotatePos, startBearing, startPitch } = this.getState();
      if (!startRotatePos || startBearing === void 0 || startPitch === void 0) {
        return this;
      }
      let newRotation;
      if (pos) {
        newRotation = this._getNewRotation(pos, startRotatePos, startPitch, startBearing);
      } else {
        newRotation = {
          bearing: startBearing + deltaAngleX,
          pitch: startPitch + deltaAngleY
        };
      }
      return this._getUpdatedState(newRotation);
    }
    /**
     * End rotating
     * Must call if `rotateStart()` was called
     */
    rotateEnd() {
      return this._getUpdatedState({
        startBearing: null,
        startPitch: null
      });
    }
    /**
     * Start zooming
     * @param {[Number, Number]} pos - position on screen where the center is
     */
    zoomStart({ pos }) {
      return this._getUpdatedState({
        startZoomLngLat: this._unproject(pos),
        startZoom: this.getViewportProps().zoom
      });
    }
    /**
     * Zoom
     * @param {[Number, Number]} pos - position on screen where the current center is
     * @param {[Number, Number]} startPos - the center position at
     *   the start of the operation. Must be supplied of `zoomStart()` was not called
     * @param {Number} scale - a number between [0, 1] specifying the accumulated
     *   relative scale.
     */
    zoom({
      pos,
      startPos,
      scale: scale24
    }) {
      let { startZoom, startZoomLngLat } = this.getState();
      if (!startZoomLngLat) {
        startZoom = this.getViewportProps().zoom;
        startZoomLngLat = this._unproject(startPos) || this._unproject(pos);
      }
      if (!startZoomLngLat) {
        return this;
      }
      const { maxZoom, minZoom } = this.getViewportProps();
      let zoom = startZoom + Math.log2(scale24);
      zoom = clamp(zoom, minZoom, maxZoom);
      const zoomedViewport = this.makeViewport({ ...this.getViewportProps(), zoom });
      return this._getUpdatedState({
        zoom,
        ...zoomedViewport.panByPosition(startZoomLngLat, pos)
      });
    }
    /**
     * End zooming
     * Must call if `zoomStart()` was called
     */
    zoomEnd() {
      return this._getUpdatedState({
        startZoomLngLat: null,
        startZoom: null
      });
    }
    zoomIn(speed = 2) {
      return this._zoomFromCenter(speed);
    }
    zoomOut(speed = 2) {
      return this._zoomFromCenter(1 / speed);
    }
    moveLeft(speed = 100) {
      return this._panFromCenter([speed, 0]);
    }
    moveRight(speed = 100) {
      return this._panFromCenter([-speed, 0]);
    }
    moveUp(speed = 100) {
      return this._panFromCenter([0, speed]);
    }
    moveDown(speed = 100) {
      return this._panFromCenter([0, -speed]);
    }
    rotateLeft(speed = 15) {
      return this._getUpdatedState({
        bearing: this.getViewportProps().bearing - speed
      });
    }
    rotateRight(speed = 15) {
      return this._getUpdatedState({
        bearing: this.getViewportProps().bearing + speed
      });
    }
    rotateUp(speed = 10) {
      return this._getUpdatedState({
        pitch: this.getViewportProps().pitch + speed
      });
    }
    rotateDown(speed = 10) {
      return this._getUpdatedState({
        pitch: this.getViewportProps().pitch - speed
      });
    }
    shortestPathFrom(viewState) {
      const fromProps = viewState.getViewportProps();
      const props = { ...this.getViewportProps() };
      const { bearing, longitude } = props;
      if (Math.abs(bearing - fromProps.bearing) > 180) {
        props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;
      }
      if (Math.abs(longitude - fromProps.longitude) > 180) {
        props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;
      }
      return props;
    }
    // Apply any constraints (mathematical or defined by _viewportProps) to map state
    applyConstraints(props) {
      const { maxZoom, minZoom, zoom } = props;
      props.zoom = clamp(zoom, minZoom, maxZoom);
      const { maxPitch, minPitch, pitch } = props;
      props.pitch = clamp(pitch, minPitch, maxPitch);
      const { normalize: normalize17 = true } = props;
      if (normalize17) {
        Object.assign(props, normalizeViewportProps(props));
      }
      return props;
    }
    /* Private methods */
    _zoomFromCenter(scale24) {
      const { width, height } = this.getViewportProps();
      return this.zoom({
        pos: [width / 2, height / 2],
        scale: scale24
      });
    }
    _panFromCenter(offset) {
      const { width, height } = this.getViewportProps();
      return this.pan({
        startPos: [width / 2, height / 2],
        pos: [width / 2 + offset[0], height / 2 + offset[1]]
      });
    }
    _getUpdatedState(newProps) {
      return new this.constructor({
        makeViewport: this.makeViewport,
        ...this.getViewportProps(),
        ...this.getState(),
        ...newProps
      });
    }
    _unproject(pos) {
      const viewport = this.makeViewport(this.getViewportProps());
      return pos && viewport.unproject(pos);
    }
    _getNewRotation(pos, startPos, startPitch, startBearing) {
      const deltaX = pos[0] - startPos[0];
      const deltaY = pos[1] - startPos[1];
      const centerY = pos[1];
      const startY = startPos[1];
      const { width, height } = this.getViewportProps();
      const deltaScaleX = deltaX / width;
      let deltaScaleY = 0;
      if (deltaY > 0) {
        if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {
          deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;
        }
      } else if (deltaY < 0) {
        if (startY > PITCH_MOUSE_THRESHOLD) {
          deltaScaleY = 1 - centerY / startY;
        }
      }
      deltaScaleY = clamp(deltaScaleY, -1, 1);
      const { minPitch, maxPitch } = this.getViewportProps();
      const bearing = startBearing + 180 * deltaScaleX;
      let pitch = startPitch;
      if (deltaScaleY > 0) {
        pitch = startPitch + deltaScaleY * (maxPitch - startPitch);
      } else if (deltaScaleY < 0) {
        pitch = startPitch - deltaScaleY * (minPitch - startPitch);
      }
      return {
        pitch,
        bearing
      };
    }
  };
  var MapController = class extends Controller {
    constructor() {
      super(...arguments);
      this.ControllerState = MapState;
      this.transition = {
        transitionDuration: 300,
        transitionInterpolator: new LinearInterpolator({
          transitionProps: {
            compare: ["longitude", "latitude", "zoom", "bearing", "pitch", "position"],
            required: ["longitude", "latitude", "zoom"]
          }
        })
      };
      this.dragMode = "pan";
    }
    setProps(props) {
      props.position = props.position || [0, 0, 0];
      const oldProps = this.props;
      super.setProps(props);
      const dimensionChanged = !oldProps || oldProps.height !== props.height;
      if (dimensionChanged) {
        this.updateViewport(
          new this.ControllerState({
            makeViewport: this.makeViewport,
            ...props,
            ...this.state
          })
        );
      }
    }
  };

  // ../core/src/views/map-view.ts
  var MapView = class extends View {
    constructor(props = {}) {
      super(props);
    }
    getViewportType() {
      return WebMercatorViewport2;
    }
    get ControllerType() {
      return MapController;
    }
  };
  MapView.displayName = "MapView";

  // ../core/src/lib/effect-manager.ts
  var DEFAULT_LIGHTING_EFFECT = new LightingEffect();
  function compareEffects(e1, e22) {
    const o1 = e1.order ?? Infinity;
    const o22 = e22.order ?? Infinity;
    return o1 - o22;
  }
  var EffectManager = class {
    constructor(context) {
      this._resolvedEffects = [];
      /** Effect instances and order preference pairs, sorted by order */
      this._defaultEffects = [];
      this.effects = [];
      this._context = context;
      this._needsRedraw = "Initial render";
      this._setEffects([]);
    }
    /**
     * Register a new default effect, i.e. an effect presents regardless of user supplied props.effects
     */
    addDefaultEffect(effect) {
      const defaultEffects = this._defaultEffects;
      if (!defaultEffects.find((e6) => e6.id === effect.id)) {
        const index = defaultEffects.findIndex((e6) => compareEffects(e6, effect) > 0);
        if (index < 0) {
          defaultEffects.push(effect);
        } else {
          defaultEffects.splice(index, 0, effect);
        }
        effect.setup(this._context);
        this._setEffects(this.effects);
      }
    }
    setProps(props) {
      if ("effects" in props) {
        if (!deepEqual2(props.effects, this.effects, 1)) {
          this._setEffects(props.effects);
        }
      }
    }
    needsRedraw(opts = { clearRedrawFlags: false }) {
      const redraw = this._needsRedraw;
      if (opts.clearRedrawFlags) {
        this._needsRedraw = false;
      }
      return redraw;
    }
    getEffects() {
      return this._resolvedEffects;
    }
    _setEffects(effects) {
      const oldEffectsMap = {};
      for (const effect of this.effects) {
        oldEffectsMap[effect.id] = effect;
      }
      const nextEffects = [];
      for (const effect of effects) {
        const oldEffect = oldEffectsMap[effect.id];
        let effectToAdd = effect;
        if (oldEffect && oldEffect !== effect) {
          if (oldEffect.setProps) {
            oldEffect.setProps(effect.props);
            effectToAdd = oldEffect;
          } else {
            oldEffect.cleanup(this._context);
          }
        } else if (!oldEffect) {
          effect.setup(this._context);
        }
        nextEffects.push(effectToAdd);
        delete oldEffectsMap[effect.id];
      }
      for (const removedEffectId in oldEffectsMap) {
        oldEffectsMap[removedEffectId].cleanup(this._context);
      }
      this.effects = nextEffects;
      this._resolvedEffects = nextEffects.concat(this._defaultEffects);
      if (!effects.some((effect) => effect instanceof LightingEffect)) {
        this._resolvedEffects.push(DEFAULT_LIGHTING_EFFECT);
      }
      this._needsRedraw = "effects changed";
    }
    finalize() {
      for (const effect of this._resolvedEffects) {
        effect.cleanup(this._context);
      }
      this.effects.length = 0;
      this._resolvedEffects.length = 0;
      this._defaultEffects.length = 0;
    }
  };

  // ../core/src/passes/draw-layers-pass.ts
  var DrawLayersPass = class extends LayersPass {
    shouldDrawLayer(layer) {
      const { operation } = layer.props;
      return operation.includes("draw") || operation.includes("terrain");
    }
  };

  // ../core/src/lib/deck-renderer.ts
  var TRACE_RENDER_LAYERS = "deckRenderer.renderLayers";
  var DeckRenderer = class {
    constructor(device) {
      this.device = device;
      this.layerFilter = null;
      this.drawPickingColors = false;
      this.drawLayersPass = new DrawLayersPass(device);
      this.pickLayersPass = new PickLayersPass(device);
      this.renderCount = 0;
      this._needsRedraw = "Initial render";
      this.renderBuffers = [];
      this.lastPostProcessEffect = null;
    }
    setProps(props) {
      if (this.layerFilter !== props.layerFilter) {
        this.layerFilter = props.layerFilter;
        this._needsRedraw = "layerFilter changed";
      }
      if (this.drawPickingColors !== props.drawPickingColors) {
        this.drawPickingColors = props.drawPickingColors;
        this._needsRedraw = "drawPickingColors changed";
      }
    }
    renderLayers(opts) {
      if (!opts.viewports.length) {
        return;
      }
      const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;
      const renderOpts = {
        layerFilter: this.layerFilter,
        isPicking: this.drawPickingColors,
        ...opts
      };
      if (renderOpts.effects) {
        this._preRender(renderOpts.effects, renderOpts);
      }
      const outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : renderOpts.target;
      if (this.lastPostProcessEffect) {
        renderOpts.clearColor = [0, 0, 0, 0];
        renderOpts.clearCanvas = true;
      }
      const renderStats = layerPass.render({ ...renderOpts, target: outputBuffer });
      if (renderOpts.effects) {
        if (this.lastPostProcessEffect) {
          renderOpts.clearCanvas = opts.clearCanvas === void 0 ? true : opts.clearCanvas;
        }
        this._postRender(renderOpts.effects, renderOpts);
      }
      this.renderCount++;
      debug(TRACE_RENDER_LAYERS, this, renderStats, opts);
    }
    needsRedraw(opts = { clearRedrawFlags: false }) {
      const redraw = this._needsRedraw;
      if (opts.clearRedrawFlags) {
        this._needsRedraw = false;
      }
      return redraw;
    }
    finalize() {
      const { renderBuffers } = this;
      for (const buffer of renderBuffers) {
        buffer.delete();
      }
      renderBuffers.length = 0;
    }
    _preRender(effects, opts) {
      this.lastPostProcessEffect = null;
      opts.preRenderStats = opts.preRenderStats || {};
      for (const effect of effects) {
        opts.preRenderStats[effect.id] = effect.preRender(opts);
        if (effect.postRender) {
          this.lastPostProcessEffect = effect.id;
        }
      }
      if (this.lastPostProcessEffect) {
        this._resizeRenderBuffers();
      }
    }
    _resizeRenderBuffers() {
      const { renderBuffers } = this;
      const size = this.device.canvasContext.getDrawingBufferSize();
      const [width, height] = size;
      if (renderBuffers.length === 0) {
        [0, 1].map((i7) => {
          const texture = this.device.createTexture({
            sampler: { minFilter: "linear", magFilter: "linear" },
            width,
            height
          });
          renderBuffers.push(
            this.device.createFramebuffer({
              id: `deck-renderbuffer-${i7}`,
              colorAttachments: [texture]
            })
          );
        });
      }
      for (const buffer of renderBuffers) {
        buffer.resize(size);
      }
    }
    _postRender(effects, opts) {
      const { renderBuffers } = this;
      const params = {
        ...opts,
        inputBuffer: renderBuffers[0],
        swapBuffer: renderBuffers[1]
      };
      for (const effect of effects) {
        if (effect.postRender) {
          params.target = effect.id === this.lastPostProcessEffect ? opts.target : void 0;
          const buffer = effect.postRender(params);
          params.inputBuffer = buffer;
          params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];
        }
      }
    }
  };

  // ../core/src/lib/picking/query-object.ts
  var NO_PICKED_OBJECT = {
    pickedColor: null,
    pickedObjectIndex: -1
  };
  function getClosestObject({
    pickedColors,
    decodePickingColor,
    deviceX,
    deviceY,
    deviceRadius,
    deviceRect
  }) {
    const { x: x4, y: y5, width, height } = deviceRect;
    let minSquareDistanceToCenter = deviceRadius * deviceRadius;
    let closestPixelIndex = -1;
    let i7 = 0;
    for (let row = 0; row < height; row++) {
      const dy = row + y5 - deviceY;
      const dy2 = dy * dy;
      if (dy2 > minSquareDistanceToCenter) {
        i7 += 4 * width;
      } else {
        for (let col = 0; col < width; col++) {
          const pickedLayerIndex = pickedColors[i7 + 3] - 1;
          if (pickedLayerIndex >= 0) {
            const dx = col + x4 - deviceX;
            const d22 = dx * dx + dy2;
            if (d22 <= minSquareDistanceToCenter) {
              minSquareDistanceToCenter = d22;
              closestPixelIndex = i7;
            }
          }
          i7 += 4;
        }
      }
    }
    if (closestPixelIndex >= 0) {
      const pickedColor = pickedColors.slice(closestPixelIndex, closestPixelIndex + 4);
      const pickedObject = decodePickingColor(pickedColor);
      if (pickedObject) {
        const dy = Math.floor(closestPixelIndex / 4 / width);
        const dx = closestPixelIndex / 4 - dy * width;
        return {
          ...pickedObject,
          pickedColor,
          pickedX: x4 + dx,
          pickedY: y5 + dy
        };
      }
      log_default.error("Picked non-existent layer. Is picking buffer corrupt?")();
    }
    return NO_PICKED_OBJECT;
  }
  function getUniqueObjects({
    pickedColors,
    decodePickingColor
  }) {
    const uniqueColors = /* @__PURE__ */ new Map();
    if (pickedColors) {
      for (let i7 = 0; i7 < pickedColors.length; i7 += 4) {
        const pickedLayerIndex = pickedColors[i7 + 3] - 1;
        if (pickedLayerIndex >= 0) {
          const pickedColor = pickedColors.slice(i7, i7 + 4);
          const colorKey = pickedColor.join(",");
          if (!uniqueColors.has(colorKey)) {
            const pickedObject = decodePickingColor(pickedColor);
            if (pickedObject) {
              uniqueColors.set(colorKey, {
                ...pickedObject,
                color: pickedColor
              });
            } else {
              log_default.error("Picked non-existent layer. Is picking buffer corrupt?")();
            }
          }
        }
      }
    }
    return Array.from(uniqueColors.values());
  }

  // ../core/src/lib/picking/pick-info.ts
  function getEmptyPickingInfo({
    pickInfo,
    viewports,
    pixelRatio,
    x: x4,
    y: y5,
    z: z4
  }) {
    let pickedViewport = viewports[0];
    if (viewports.length > 1) {
      pickedViewport = getViewportFromCoordinates(pickInfo?.pickedViewports || viewports, { x: x4, y: y5 });
    }
    let coordinate;
    if (pickedViewport) {
      const point = [x4 - pickedViewport.x, y5 - pickedViewport.y];
      if (z4 !== void 0) {
        point[2] = z4;
      }
      coordinate = pickedViewport.unproject(point);
    }
    return {
      color: null,
      layer: null,
      viewport: pickedViewport,
      index: -1,
      picked: false,
      x: x4,
      y: y5,
      pixel: [x4, y5],
      coordinate,
      devicePixel: pickInfo && "pickedX" in pickInfo ? [pickInfo.pickedX, pickInfo.pickedY] : void 0,
      pixelRatio
    };
  }
  function processPickInfo(opts) {
    const { pickInfo, lastPickedInfo, mode, layers } = opts;
    const { pickedColor, pickedLayer, pickedObjectIndex } = pickInfo;
    const affectedLayers = pickedLayer ? [pickedLayer] : [];
    if (mode === "hover") {
      const lastPickedPixelIndex = lastPickedInfo.index;
      const lastPickedLayerId = lastPickedInfo.layerId;
      const pickedLayerId = pickedLayer ? pickedLayer.props.id : null;
      if (pickedLayerId !== lastPickedLayerId || pickedObjectIndex !== lastPickedPixelIndex) {
        if (pickedLayerId !== lastPickedLayerId) {
          const lastPickedLayer = layers.find((layer) => layer.props.id === lastPickedLayerId);
          if (lastPickedLayer) {
            affectedLayers.unshift(lastPickedLayer);
          }
        }
        lastPickedInfo.layerId = pickedLayerId;
        lastPickedInfo.index = pickedObjectIndex;
        lastPickedInfo.info = null;
      }
    }
    const baseInfo = getEmptyPickingInfo(opts);
    const infos = /* @__PURE__ */ new Map();
    infos.set(null, baseInfo);
    affectedLayers.forEach((layer) => {
      let info = { ...baseInfo };
      if (layer === pickedLayer) {
        info.color = pickedColor;
        info.index = pickedObjectIndex;
        info.picked = true;
      }
      info = getLayerPickingInfo({ layer, info, mode });
      const rootLayer = info.layer;
      if (layer === pickedLayer && mode === "hover") {
        lastPickedInfo.info = info;
      }
      infos.set(rootLayer.id, info);
      if (mode === "hover") {
        rootLayer.updateAutoHighlight(info);
      }
    });
    return infos;
  }
  function getLayerPickingInfo({
    layer,
    info,
    mode
  }) {
    while (layer && info) {
      const sourceLayer = info.layer || null;
      info.sourceLayer = sourceLayer;
      info.layer = layer;
      info = layer.getPickingInfo({ info, mode, sourceLayer });
      layer = layer.parent;
    }
    return info;
  }
  function getViewportFromCoordinates(viewports, pixel) {
    for (let i7 = viewports.length - 1; i7 >= 0; i7--) {
      const viewport = viewports[i7];
      if (viewport.containsPixel(pixel)) {
        return viewport;
      }
    }
    return viewports[0];
  }

  // ../core/src/lib/deck-picker.ts
  var DeckPicker = class {
    constructor(device) {
      this._pickable = true;
      this.device = device;
      this.pickLayersPass = new PickLayersPass(device);
      this.lastPickedInfo = {
        index: -1,
        layerId: null,
        info: null
      };
    }
    setProps(props) {
      if ("layerFilter" in props) {
        this.layerFilter = props.layerFilter;
      }
      if ("_pickable" in props) {
        this._pickable = props._pickable;
      }
    }
    finalize() {
      if (this.pickingFBO) {
        this.pickingFBO.destroy();
      }
      if (this.depthFBO) {
        this.depthFBO.destroy();
      }
    }
    /**
     * Pick the closest info at given coordinate
     * @returns Promise that resolves with picking info
     */
    pickObjectAsync(opts) {
      return this._pickClosestObjectAsync(opts);
    }
    /**
     * Picks a list of unique infos within a bounding box
     * @returns Promise that resolves to all unique infos within a bounding box
     */
    pickObjectsAsync(opts) {
      return this._pickVisibleObjectsAsync(opts);
    }
    /**
     * Pick the closest info at given coordinate
     * @returns picking info
     * @deprecated WebGL only - use pickObjectAsync instead
     */
    pickObject(opts) {
      return this._pickClosestObject(opts);
    }
    /**
     * Get all unique infos within a bounding box
     * @returns all unique infos within a bounding box
     * @deprecated WebGL only - use pickObjectAsync instead
     */
    pickObjects(opts) {
      return this._pickVisibleObjects(opts);
    }
    // Returns a new picking info object by assuming the last picked object is still picked
    getLastPickedObject({ x: x4, y: y5, layers, viewports }, lastPickedInfo = this.lastPickedInfo.info) {
      const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;
      const lastPickedViewportId = lastPickedInfo && lastPickedInfo.viewport && lastPickedInfo.viewport.id;
      const layer = lastPickedLayerId ? layers.find((l5) => l5.id === lastPickedLayerId) : null;
      const viewport = lastPickedViewportId && viewports.find((v5) => v5.id === lastPickedViewportId) || viewports[0];
      const coordinate = viewport && viewport.unproject([x4 - viewport.x, y5 - viewport.y]);
      const info = {
        x: x4,
        y: y5,
        viewport,
        coordinate,
        layer
      };
      return { ...lastPickedInfo, ...info };
    }
    // Private
    /** Ensures that picking framebuffer exists and matches the canvas size */
    _resizeBuffer() {
      if (!this.pickingFBO) {
        this.pickingFBO = this.device.createFramebuffer({
          colorAttachments: ["rgba8unorm"],
          depthStencilAttachment: "depth16unorm"
        });
        if (this.device.isTextureFormatRenderable("rgba32float")) {
          const depthFBO = this.device.createFramebuffer({
            colorAttachments: ["rgba32float"],
            depthStencilAttachment: "depth16unorm"
          });
          this.depthFBO = depthFBO;
        }
      }
      const { canvas: canvas2 } = this.device.getDefaultCanvasContext();
      this.pickingFBO?.resize({ width: canvas2.width, height: canvas2.height });
      this.depthFBO?.resize({ width: canvas2.width, height: canvas2.height });
    }
    /** Preliminary filtering of the layers list. Skid picking pass if no layer is pickable. */
    _getPickable(layers) {
      if (this._pickable === false) {
        return null;
      }
      const pickableLayers = layers.filter(
        (layer) => this.pickLayersPass.shouldDrawLayer(layer) && !layer.isComposite
      );
      return pickableLayers.length ? pickableLayers : null;
    }
    /**
     * Pick the closest object at the given coordinate
     */
    // eslint-disable-next-line max-statements,complexity
    async _pickClosestObjectAsync({
      layers,
      views,
      viewports,
      x: x4,
      y: y5,
      radius = 0,
      depth = 1,
      mode = "query",
      unproject3D,
      onViewportActive,
      effects
    }) {
      const pixelRatio = this.device.canvasContext.cssToDeviceRatio();
      const pickableLayers = this._getPickable(layers);
      if (!pickableLayers || viewports.length === 0) {
        return {
          result: [],
          emptyInfo: getEmptyPickingInfo({ viewports, x: x4, y: y5, pixelRatio })
        };
      }
      this._resizeBuffer();
      const devicePixelRange = this.device.canvasContext.cssToDevicePixels([x4, y5], true);
      const devicePixel = [
        devicePixelRange.x + Math.floor(devicePixelRange.width / 2),
        devicePixelRange.y + Math.floor(devicePixelRange.height / 2)
      ];
      const deviceRadius = Math.round(radius * pixelRatio);
      const { width, height } = this.pickingFBO;
      const deviceRect = this._getPickingRect({
        deviceX: devicePixel[0],
        deviceY: devicePixel[1],
        deviceRadius,
        deviceWidth: width,
        deviceHeight: height
      });
      const cullRect = {
        x: x4 - radius,
        y: y5 - radius,
        width: radius * 2 + 1,
        height: radius * 2 + 1
      };
      let infos;
      const result = [];
      const affectedLayers = /* @__PURE__ */ new Set();
      for (let i7 = 0; i7 < depth; i7++) {
        let pickInfo;
        if (deviceRect) {
          const pickedResult = this._drawAndSample({
            layers: pickableLayers,
            views,
            viewports,
            onViewportActive,
            deviceRect,
            cullRect,
            effects,
            pass: `picking:${mode}`
          });
          pickInfo = getClosestObject({
            ...pickedResult,
            deviceX: devicePixel[0],
            deviceY: devicePixel[1],
            deviceRadius,
            deviceRect
          });
        } else {
          pickInfo = {
            pickedColor: null,
            pickedObjectIndex: -1
          };
        }
        let z4;
        if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {
          const { pickedColors: pickedColors2 } = this._drawAndSample(
            {
              layers: [pickInfo.pickedLayer],
              views,
              viewports,
              onViewportActive,
              deviceRect: {
                x: pickInfo.pickedX,
                y: pickInfo.pickedY,
                width: 1,
                height: 1
              },
              cullRect,
              effects,
              pass: `picking:${mode}:z`
            },
            true
          );
          if (pickedColors2[3]) {
            z4 = pickedColors2[0];
          }
        }
        if (pickInfo.pickedLayer && i7 + 1 < depth) {
          affectedLayers.add(pickInfo.pickedLayer);
          pickInfo.pickedLayer.disablePickingIndex(pickInfo.pickedObjectIndex);
        }
        infos = processPickInfo({
          pickInfo,
          lastPickedInfo: this.lastPickedInfo,
          mode,
          layers: pickableLayers,
          viewports,
          x: x4,
          y: y5,
          z: z4,
          pixelRatio
        });
        for (const info of infos.values()) {
          if (info.layer) {
            result.push(info);
          }
        }
        if (!pickInfo.pickedColor) {
          break;
        }
      }
      for (const layer of affectedLayers) {
        layer.restorePickingColors();
      }
      return { result, emptyInfo: infos.get(null) };
    }
    /**
     * Pick the closest object at the given coordinate
     * @deprecated WebGL only
     */
    // eslint-disable-next-line max-statements,complexity
    _pickClosestObject({
      layers,
      views,
      viewports,
      x: x4,
      y: y5,
      radius = 0,
      depth = 1,
      mode = "query",
      unproject3D,
      onViewportActive,
      effects
    }) {
      const pixelRatio = this.device.canvasContext.cssToDeviceRatio();
      const pickableLayers = this._getPickable(layers);
      if (!pickableLayers || viewports.length === 0) {
        return {
          result: [],
          emptyInfo: getEmptyPickingInfo({ viewports, x: x4, y: y5, pixelRatio })
        };
      }
      this._resizeBuffer();
      const devicePixelRange = this.device.canvasContext.cssToDevicePixels([x4, y5], true);
      const devicePixel = [
        devicePixelRange.x + Math.floor(devicePixelRange.width / 2),
        devicePixelRange.y + Math.floor(devicePixelRange.height / 2)
      ];
      const deviceRadius = Math.round(radius * pixelRatio);
      const { width, height } = this.pickingFBO;
      const deviceRect = this._getPickingRect({
        deviceX: devicePixel[0],
        deviceY: devicePixel[1],
        deviceRadius,
        deviceWidth: width,
        deviceHeight: height
      });
      const cullRect = {
        x: x4 - radius,
        y: y5 - radius,
        width: radius * 2 + 1,
        height: radius * 2 + 1
      };
      let infos;
      const result = [];
      const affectedLayers = /* @__PURE__ */ new Set();
      for (let i7 = 0; i7 < depth; i7++) {
        let pickInfo;
        if (deviceRect) {
          const pickedResult = this._drawAndSample({
            layers: pickableLayers,
            views,
            viewports,
            onViewportActive,
            deviceRect,
            cullRect,
            effects,
            pass: `picking:${mode}`
          });
          pickInfo = getClosestObject({
            ...pickedResult,
            deviceX: devicePixel[0],
            deviceY: devicePixel[1],
            deviceRadius,
            deviceRect
          });
        } else {
          pickInfo = {
            pickedColor: null,
            pickedObjectIndex: -1
          };
        }
        let z4;
        if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {
          const { pickedColors: pickedColors2 } = this._drawAndSample(
            {
              layers: [pickInfo.pickedLayer],
              views,
              viewports,
              onViewportActive,
              deviceRect: {
                x: pickInfo.pickedX,
                y: pickInfo.pickedY,
                width: 1,
                height: 1
              },
              cullRect,
              effects,
              pass: `picking:${mode}:z`
            },
            true
          );
          if (pickedColors2[3]) {
            z4 = pickedColors2[0];
          }
        }
        if (pickInfo.pickedLayer && i7 + 1 < depth) {
          affectedLayers.add(pickInfo.pickedLayer);
          pickInfo.pickedLayer.disablePickingIndex(pickInfo.pickedObjectIndex);
        }
        infos = processPickInfo({
          pickInfo,
          lastPickedInfo: this.lastPickedInfo,
          mode,
          layers: pickableLayers,
          viewports,
          x: x4,
          y: y5,
          z: z4,
          pixelRatio
        });
        for (const info of infos.values()) {
          if (info.layer) {
            result.push(info);
          }
        }
        if (!pickInfo.pickedColor) {
          break;
        }
      }
      for (const layer of affectedLayers) {
        layer.restorePickingColors();
      }
      return { result, emptyInfo: infos.get(null) };
    }
    /**
     * Pick all objects within the given bounding box
     */
    // eslint-disable-next-line max-statements
    async _pickVisibleObjectsAsync({
      layers,
      views,
      viewports,
      x: x4,
      y: y5,
      width = 1,
      height = 1,
      mode = "query",
      maxObjects = null,
      onViewportActive,
      effects
    }) {
      const pickableLayers = this._getPickable(layers);
      if (!pickableLayers || viewports.length === 0) {
        return [];
      }
      this._resizeBuffer();
      const pixelRatio = this.device.canvasContext.cssToDeviceRatio();
      const leftTop = this.device.canvasContext.cssToDevicePixels([x4, y5], true);
      const deviceLeft = leftTop.x;
      const deviceTop = leftTop.y + leftTop.height;
      const rightBottom = this.device.canvasContext.cssToDevicePixels([x4 + width, y5 + height], true);
      const deviceRight = rightBottom.x + rightBottom.width;
      const deviceBottom = rightBottom.y;
      const deviceRect = {
        x: deviceLeft,
        y: deviceBottom,
        // deviceTop and deviceRight represent the first pixel outside the desired rect
        width: deviceRight - deviceLeft,
        height: deviceTop - deviceBottom
      };
      const pickedResult = this._drawAndSample({
        layers: pickableLayers,
        views,
        viewports,
        onViewportActive,
        deviceRect,
        cullRect: { x: x4, y: y5, width, height },
        effects,
        pass: `picking:${mode}`
      });
      const pickInfos = getUniqueObjects(pickedResult);
      const uniquePickedObjects = /* @__PURE__ */ new Map();
      const uniqueInfos = [];
      const limitMaxObjects = Number.isFinite(maxObjects);
      for (let i7 = 0; i7 < pickInfos.length; i7++) {
        if (limitMaxObjects && uniqueInfos.length >= maxObjects) {
          break;
        }
        const pickInfo = pickInfos[i7];
        let info = {
          color: pickInfo.pickedColor,
          layer: null,
          index: pickInfo.pickedObjectIndex,
          picked: true,
          x: x4,
          y: y5,
          pixelRatio
        };
        info = getLayerPickingInfo({ layer: pickInfo.pickedLayer, info, mode });
        const pickedLayerId = info.layer.id;
        if (!uniquePickedObjects.has(pickedLayerId)) {
          uniquePickedObjects.set(pickedLayerId, /* @__PURE__ */ new Set());
        }
        const uniqueObjectsInLayer = uniquePickedObjects.get(pickedLayerId);
        const pickedObjectKey = info.object ?? info.index;
        if (!uniqueObjectsInLayer.has(pickedObjectKey)) {
          uniqueObjectsInLayer.add(pickedObjectKey);
          uniqueInfos.push(info);
        }
      }
      return uniqueInfos;
    }
    /**
     * Pick all objects within the given bounding box
     * @deprecated WebGL only
     */
    // eslint-disable-next-line max-statements
    _pickVisibleObjects({
      layers,
      views,
      viewports,
      x: x4,
      y: y5,
      width = 1,
      height = 1,
      mode = "query",
      maxObjects = null,
      onViewportActive,
      effects
    }) {
      const pickableLayers = this._getPickable(layers);
      if (!pickableLayers || viewports.length === 0) {
        return [];
      }
      this._resizeBuffer();
      const pixelRatio = this.device.canvasContext.cssToDeviceRatio();
      const leftTop = this.device.canvasContext.cssToDevicePixels([x4, y5], true);
      const deviceLeft = leftTop.x;
      const deviceTop = leftTop.y + leftTop.height;
      const rightBottom = this.device.canvasContext.cssToDevicePixels([x4 + width, y5 + height], true);
      const deviceRight = rightBottom.x + rightBottom.width;
      const deviceBottom = rightBottom.y;
      const deviceRect = {
        x: deviceLeft,
        y: deviceBottom,
        // deviceTop and deviceRight represent the first pixel outside the desired rect
        width: deviceRight - deviceLeft,
        height: deviceTop - deviceBottom
      };
      const pickedResult = this._drawAndSample({
        layers: pickableLayers,
        views,
        viewports,
        onViewportActive,
        deviceRect,
        cullRect: { x: x4, y: y5, width, height },
        effects,
        pass: `picking:${mode}`
      });
      const pickInfos = getUniqueObjects(pickedResult);
      const uniquePickedObjects = /* @__PURE__ */ new Map();
      const uniqueInfos = [];
      const limitMaxObjects = Number.isFinite(maxObjects);
      for (let i7 = 0; i7 < pickInfos.length; i7++) {
        if (limitMaxObjects && uniqueInfos.length >= maxObjects) {
          break;
        }
        const pickInfo = pickInfos[i7];
        let info = {
          color: pickInfo.pickedColor,
          layer: null,
          index: pickInfo.pickedObjectIndex,
          picked: true,
          x: x4,
          y: y5,
          pixelRatio
        };
        info = getLayerPickingInfo({ layer: pickInfo.pickedLayer, info, mode });
        const pickedLayerId = info.layer.id;
        if (!uniquePickedObjects.has(pickedLayerId)) {
          uniquePickedObjects.set(pickedLayerId, /* @__PURE__ */ new Set());
        }
        const uniqueObjectsInLayer = uniquePickedObjects.get(pickedLayerId);
        const pickedObjectKey = info.object ?? info.index;
        if (!uniqueObjectsInLayer.has(pickedObjectKey)) {
          uniqueObjectsInLayer.add(pickedObjectKey);
          uniqueInfos.push(info);
        }
      }
      return uniqueInfos;
    }
    // Note: Implementation of the overloaded signatures above, TSDoc is on the signatures
    async _drawAndSampleAsync({
      layers,
      views,
      viewports,
      onViewportActive,
      deviceRect,
      cullRect,
      effects,
      pass
    }, pickZ = false) {
      const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;
      const opts = {
        layers,
        layerFilter: this.layerFilter,
        views,
        viewports,
        onViewportActive,
        pickingFBO,
        deviceRect,
        cullRect,
        effects,
        pass,
        pickZ,
        preRenderStats: {},
        isPicking: true
      };
      for (const effect of effects) {
        if (effect.useInPicking) {
          opts.preRenderStats[effect.id] = effect.preRender(opts);
        }
      }
      const { decodePickingColor } = this.pickLayersPass.render(opts);
      const { x: x4, y: y5, width, height } = deviceRect;
      const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);
      this.device.readPixelsToArrayWebGL(pickingFBO, {
        sourceX: x4,
        sourceY: y5,
        sourceWidth: width,
        sourceHeight: height,
        target: pickedColors
      });
      return { pickedColors, decodePickingColor };
    }
    // Note: Implementation of the overloaded signatures above, TSDoc is on the signatures
    _drawAndSample({
      layers,
      views,
      viewports,
      onViewportActive,
      deviceRect,
      cullRect,
      effects,
      pass
    }, pickZ = false) {
      const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;
      const opts = {
        layers,
        layerFilter: this.layerFilter,
        views,
        viewports,
        onViewportActive,
        pickingFBO,
        deviceRect,
        cullRect,
        effects,
        pass,
        pickZ,
        preRenderStats: {},
        isPicking: true
      };
      for (const effect of effects) {
        if (effect.useInPicking) {
          opts.preRenderStats[effect.id] = effect.preRender(opts);
        }
      }
      const { decodePickingColor } = this.pickLayersPass.render(opts);
      const { x: x4, y: y5, width, height } = deviceRect;
      const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);
      this.device.readPixelsToArrayWebGL(pickingFBO, {
        sourceX: x4,
        sourceY: y5,
        sourceWidth: width,
        sourceHeight: height,
        target: pickedColors
      });
      return { pickedColors, decodePickingColor };
    }
    /**
     * Calculate a picking rect centered on deviceX and deviceY and clipped to device
     * @returns null if pixel is outside of device
     */
    _getPickingRect({
      deviceX,
      deviceY,
      deviceRadius,
      deviceWidth,
      deviceHeight
    }) {
      const x4 = Math.max(0, deviceX - deviceRadius);
      const y5 = Math.max(0, deviceY - deviceRadius);
      const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x4;
      const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y5;
      if (width <= 0 || height <= 0) {
        return null;
      }
      return { x: x4, y: y5, width, height };
    }
  };

  // ../core/src/lib/widget-manager.ts
  var PLACEMENTS = {
    "top-left": { top: 0, left: 0 },
    "top-right": { top: 0, right: 0 },
    "bottom-left": { bottom: 0, left: 0 },
    "bottom-right": { bottom: 0, right: 0 },
    fill: { top: 0, left: 0, bottom: 0, right: 0 }
  };
  var DEFAULT_PLACEMENT = "top-left";
  var ROOT_CONTAINER_ID = "__root";
  var WidgetManager = class {
    constructor({ deck, parentElement }) {
      /** Widgets added via the imperative API */
      this.defaultWidgets = [];
      /** Widgets received from the declarative API */
      this.widgets = [];
      /** Resolved widgets from both imperative and declarative APIs */
      this.resolvedWidgets = [];
      /** Mounted HTML containers */
      this.containers = {};
      /** Viewport provided to widget on redraw */
      this.lastViewports = {};
      this.deck = deck;
      parentElement?.classList.add("deck-widget-container");
      this.parentElement = parentElement;
    }
    getWidgets() {
      return this.resolvedWidgets;
    }
    /** Declarative API to configure widgets */
    setProps(props) {
      if (props.widgets && !deepEqual2(props.widgets, this.widgets, 1)) {
        const nextWidgets = props.widgets.filter(Boolean);
        this._setWidgets(nextWidgets);
      }
    }
    finalize() {
      for (const widget of this.getWidgets()) {
        this._removeWidget(widget);
      }
      this.defaultWidgets.length = 0;
      this.resolvedWidgets.length = 0;
      for (const id in this.containers) {
        this.containers[id].remove();
      }
    }
    /** Imperative API. Widgets added this way are not affected by the declarative prop. */
    addDefault(widget) {
      if (!this.defaultWidgets.find((w5) => w5.id === widget.id)) {
        this._addWidget(widget);
        this.defaultWidgets.push(widget);
        this._setWidgets(this.widgets);
      }
    }
    onRedraw({ viewports, layers }) {
      const viewportsById = viewports.reduce((acc, v5) => {
        acc[v5.id] = v5;
        return acc;
      }, {});
      for (const widget of this.getWidgets()) {
        const { viewId } = widget;
        if (viewId) {
          const viewport = viewportsById[viewId];
          if (viewport) {
            if (widget.onViewportChange) {
              widget.onViewportChange(viewport);
            }
            widget.onRedraw?.({ viewports: [viewport], layers });
          }
        } else {
          if (widget.onViewportChange) {
            for (const viewport of viewports) {
              widget.onViewportChange(viewport);
            }
          }
          widget.onRedraw?.({ viewports, layers });
        }
      }
      this.lastViewports = viewportsById;
      this._updateContainers();
    }
    onHover(info, event) {
      for (const widget of this.getWidgets()) {
        const { viewId } = widget;
        if (!viewId || viewId === info.viewport?.id) {
          widget.onHover?.(info, event);
        }
      }
    }
    onEvent(info, event) {
      const eventHandlerProp = EVENT_HANDLERS[event.type];
      if (!eventHandlerProp) {
        return;
      }
      for (const widget of this.getWidgets()) {
        const { viewId } = widget;
        if (!viewId || viewId === info.viewport?.id) {
          widget[eventHandlerProp]?.(info, event);
        }
      }
    }
    // INTERNAL METHODS
    /**
     * Resolve widgets from the declarative prop
     * Initialize new widgets and remove old ones
     * Update props of existing widgets
     */
    _setWidgets(nextWidgets) {
      const oldWidgetMap = {};
      for (const widget of this.resolvedWidgets) {
        oldWidgetMap[widget.id] = widget;
      }
      this.resolvedWidgets.length = 0;
      for (const widget of this.defaultWidgets) {
        oldWidgetMap[widget.id] = null;
        this.resolvedWidgets.push(widget);
      }
      for (let widget of nextWidgets) {
        const oldWidget = oldWidgetMap[widget.id];
        if (!oldWidget) {
          this._addWidget(widget);
        } else if (
          // Widget placement changed
          oldWidget.viewId !== widget.viewId || oldWidget.placement !== widget.placement
        ) {
          this._removeWidget(oldWidget);
          this._addWidget(widget);
        } else if (widget !== oldWidget) {
          oldWidget.setProps(widget.props);
          widget = oldWidget;
        }
        oldWidgetMap[widget.id] = null;
        this.resolvedWidgets.push(widget);
      }
      for (const id in oldWidgetMap) {
        const oldWidget = oldWidgetMap[id];
        if (oldWidget) {
          this._removeWidget(oldWidget);
        }
      }
      this.widgets = nextWidgets;
    }
    /** Initialize new widget */
    _addWidget(widget) {
      const { viewId = null, placement = DEFAULT_PLACEMENT } = widget;
      widget.widgetManager = this;
      widget.deck = this.deck;
      widget.rootElement = widget._onAdd({ deck: this.deck, viewId });
      if (widget.rootElement) {
        this._getContainer(viewId, placement).append(widget.rootElement);
      }
      widget.updateHTML();
    }
    /** Destroy an old widget */
    _removeWidget(widget) {
      widget.onRemove?.();
      if (widget.rootElement) {
        widget.rootElement.remove();
      }
      widget.rootElement = void 0;
      widget.deck = void 0;
      widget.widgetManager = void 0;
    }
    /** Get a container element based on view and placement */
    _getContainer(viewId, placement) {
      const containerId = viewId || ROOT_CONTAINER_ID;
      let viewContainer = this.containers[containerId];
      if (!viewContainer) {
        viewContainer = document.createElement("div");
        viewContainer.style.pointerEvents = "none";
        viewContainer.style.position = "absolute";
        viewContainer.style.overflow = "hidden";
        this.parentElement?.append(viewContainer);
        this.containers[containerId] = viewContainer;
      }
      let container = viewContainer.querySelector(`.${placement}`);
      if (!container) {
        container = globalThis.document.createElement("div");
        container.className = placement;
        container.style.position = "absolute";
        container.style.zIndex = "2";
        Object.assign(container.style, PLACEMENTS[placement]);
        viewContainer.append(container);
      }
      return container;
    }
    _updateContainers() {
      const canvasWidth = this.deck.width;
      const canvasHeight = this.deck.height;
      for (const id in this.containers) {
        const viewport = this.lastViewports[id] || null;
        const visible = id === ROOT_CONTAINER_ID || viewport;
        const container = this.containers[id];
        if (visible) {
          container.style.display = "block";
          container.style.left = `${viewport ? viewport.x : 0}px`;
          container.style.top = `${viewport ? viewport.y : 0}px`;
          container.style.width = `${viewport ? viewport.width : canvasWidth}px`;
          container.style.height = `${viewport ? viewport.height : canvasHeight}px`;
        } else {
          container.style.display = "none";
        }
      }
    }
  };

  // ../core/src/utils/apply-styles.ts
  function applyStyles(element, style) {
    if (style) {
      Object.entries(style).map(([key, value]) => {
        if (key.startsWith("--")) {
          element.style.setProperty(key, value);
        } else {
          element.style[key] = value;
        }
      });
    }
  }
  function removeStyles(element, style) {
    if (style) {
      Object.keys(style).map((key) => {
        if (key.startsWith("--")) {
          element.style.removeProperty(key);
        } else {
          element.style[key] = "";
        }
      });
    }
  }

  // ../core/src/lib/widget.ts
  var Widget = class {
    constructor(props) {
      /**
       * The view id that this widget is being attached to. Default `null`.
       * If assigned, this widget will only respond to events occurred inside the specific view that matches this id.
       */
      this.viewId = null;
      this.props = {
        // @ts-expect-error `defaultProps` may not exist on constructor
        ...this.constructor.defaultProps,
        ...props
      };
      this.id = this.props.id;
    }
    /** Called to update widget options */
    setProps(props) {
      const oldProps = this.props;
      const el = this.rootElement;
      if (el && oldProps.className !== props.className) {
        if (oldProps.className)
          el.classList.remove(oldProps.className);
        if (props.className)
          el.classList.add(props.className);
      }
      if (el && !deepEqual2(oldProps.style, props.style, 1)) {
        removeStyles(el, oldProps.style);
        applyStyles(el, props.style);
      }
      Object.assign(this.props, props);
      this.updateHTML();
    }
    /** Update the HTML to reflect latest props and state */
    updateHTML() {
      if (this.rootElement) {
        this.onRenderHTML(this.rootElement);
      }
    }
    // @note empty method calls have an overhead in V8 but it is very low, ~1ns
    /**
     * Common utility to create the root DOM element for this widget
     * Configures the top-level styles and adds basic class names for theming
     * @returns an UI element that should be appended to the Deck container
     */
    onCreateRootElement() {
      const CLASS_NAMES = [
        // Add class names for theming
        "deck-widget",
        this.className,
        // plus any app-supplied class name
        this.props.className
      ];
      const element = document.createElement("div");
      CLASS_NAMES.filter((cls) => typeof cls === "string" && cls.length > 0).forEach(
        (className) => element.classList.add(className)
      );
      applyStyles(element, this.props.style);
      return element;
    }
    /** Internal API called by Deck when the widget is first added to a Deck instance */
    _onAdd(params) {
      return this.onAdd(params) ?? this.onCreateRootElement();
    }
    /** Overridable by subclass - called when the widget is first added to a Deck instance
     * @returns an optional UI element that should be appended to the Deck container
     */
    onAdd(params) {
    }
    /** Called when the widget is removed */
    onRemove() {
    }
    // deck integration - Event hooks
    /** Called when the containing view is changed */
    onViewportChange(viewport) {
    }
    /** Called when the containing view is redrawn */
    onRedraw(params) {
    }
    /** Called when a hover event occurs */
    onHover(info, event) {
    }
    /** Called when a click event occurs */
    onClick(info, event) {
    }
    /** Called when a drag event occurs */
    onDrag(info, event) {
    }
    /** Called when a dragstart event occurs */
    onDragStart(info, event) {
    }
    /** Called when a dragend event occurs */
    onDragEnd(info, event) {
    }
  };
  Widget.defaultProps = {
    id: "widget",
    style: {},
    className: ""
  };

  // ../core/src/lib/tooltip-widget.ts
  var defaultStyle = {
    zIndex: "1",
    position: "absolute",
    pointerEvents: "none",
    color: "#a0a7b4",
    backgroundColor: "#29323c",
    padding: "10px",
    top: "0",
    left: "0",
    display: "none"
  };
  var TooltipWidget = class extends Widget {
    constructor(props = {}) {
      super(props);
      this.id = "default-tooltip";
      this.placement = "fill";
      this.className = "deck-tooltip";
      this.isVisible = false;
      this.setProps(props);
    }
    // TODO(ib) - does this really need to be overridden?
    onCreateRootElement() {
      const el = document.createElement("div");
      el.className = this.className;
      Object.assign(el.style, defaultStyle);
      return el;
    }
    onRenderHTML(rootElement) {
    }
    onViewportChange(viewport) {
      if (this.isVisible && viewport.id === this.lastViewport?.id && viewport !== this.lastViewport) {
        this.setTooltip(null);
      }
    }
    onHover(info) {
      const { deck } = this;
      const getTooltip = deck && deck.props.getTooltip;
      if (!getTooltip) {
        return;
      }
      const displayInfo = getTooltip(info);
      this.lastViewport = info.viewport;
      this.setTooltip(displayInfo, info.x, info.y);
    }
    setTooltip(displayInfo, x4, y5) {
      const el = this.rootElement;
      if (!el) {
        return;
      }
      if (typeof displayInfo === "string") {
        el.innerText = displayInfo;
      } else if (!displayInfo) {
        this.isVisible = false;
        el.style.display = "none";
        return;
      } else {
        if (displayInfo.text) {
          el.innerText = displayInfo.text;
        }
        if (displayInfo.html) {
          el.innerHTML = displayInfo.html;
        }
        if (displayInfo.className) {
          el.className = displayInfo.className;
        }
      }
      this.isVisible = true;
      el.style.display = "block";
      el.style.transform = `translate(${x4}px, ${y5}px)`;
      if (displayInfo && typeof displayInfo === "object" && "style" in displayInfo) {
        Object.assign(el.style, displayInfo.style);
      }
    }
  };
  TooltipWidget.defaultProps = {
    ...Widget.defaultProps
  };

  // ../core/src/lib/deck.ts
  init_dist4();
  init_dist6();
  init_dist5();
  init_dist3();
  function noop3() {
  }
  var getCursor = ({ isDragging }) => isDragging ? "grabbing" : "grab";
  var defaultProps = {
    id: "",
    width: "100%",
    height: "100%",
    style: null,
    viewState: null,
    initialViewState: null,
    pickingRadius: 0,
    layerFilter: null,
    parameters: {},
    parent: null,
    device: null,
    deviceProps: {},
    gl: null,
    canvas: null,
    layers: [],
    effects: [],
    views: null,
    controller: null,
    // Rely on external controller, e.g. react-map-gl
    useDevicePixels: true,
    touchAction: "none",
    eventRecognizerOptions: {},
    _framebuffer: null,
    _animate: false,
    _pickable: true,
    _typedArrayManagerProps: {},
    _customRender: null,
    widgets: [],
    onDeviceInitialized: noop3,
    onWebGLInitialized: noop3,
    onResize: noop3,
    onViewStateChange: noop3,
    onInteractionStateChange: noop3,
    onBeforeRender: noop3,
    onAfterRender: noop3,
    onLoad: noop3,
    onError: (error) => log_default.error(error.message, error.cause)(),
    onHover: null,
    onClick: null,
    onDragStart: null,
    onDrag: null,
    onDragEnd: null,
    _onMetrics: null,
    getCursor,
    getTooltip: null,
    debug: false,
    drawPickingColors: false
  };
  var Deck = class {
    constructor(props) {
      this.width = 0;
      this.height = 0;
      // Allows attaching arbitrary data to the instance
      this.userData = {};
      this.device = null;
      this.canvas = null;
      this.viewManager = null;
      this.layerManager = null;
      this.effectManager = null;
      this.deckRenderer = null;
      this.deckPicker = null;
      this.eventManager = null;
      this.widgetManager = null;
      this.tooltip = null;
      this.animationLoop = null;
      this.cursorState = {
        isHovering: false,
        isDragging: false
      };
      this.stats = new Stats({ id: "deck.gl" });
      this.metrics = {
        fps: 0,
        setPropsTime: 0,
        updateAttributesTime: 0,
        framesRedrawn: 0,
        pickTime: 0,
        pickCount: 0,
        gpuTime: 0,
        gpuTimePerFrame: 0,
        cpuTime: 0,
        cpuTimePerFrame: 0,
        bufferMemory: 0,
        textureMemory: 0,
        renderbufferMemory: 0,
        gpuMemory: 0
      };
      this._metricsCounter = 0;
      this._needsRedraw = "Initial render";
      this._pickRequest = {
        mode: "hover",
        x: -1,
        y: -1,
        radius: 0,
        event: null
      };
      /**
       * Pick and store the object under the pointer on `pointerdown`.
       * This object is reused for subsequent `onClick` and `onDrag*` callbacks.
       */
      this._lastPointerDownInfo = null;
      // The `pointermove` event may fire multiple times in between two animation frames,
      // it's a waste of time to run picking without rerender. Instead we save the last pick
      // request and only do it once on the next animation frame.
      /** Internal use only: event handler for pointerdown */
      this._onPointerMove = (event) => {
        const { _pickRequest } = this;
        if (event.type === "pointerleave") {
          _pickRequest.x = -1;
          _pickRequest.y = -1;
          _pickRequest.radius = 0;
        } else if (event.leftButton || event.rightButton) {
          return;
        } else {
          const pos = event.offsetCenter;
          if (!pos) {
            return;
          }
          _pickRequest.x = pos.x;
          _pickRequest.y = pos.y;
          _pickRequest.radius = this.props.pickingRadius;
        }
        if (this.layerManager) {
          this.layerManager.context.mousePosition = { x: _pickRequest.x, y: _pickRequest.y };
        }
        _pickRequest.event = event;
      };
      /** Internal use only: event handler for click & drag */
      this._onEvent = (event) => {
        const eventHandlerProp = EVENT_HANDLERS[event.type];
        const pos = event.offsetCenter;
        if (!eventHandlerProp || !pos || !this.layerManager) {
          return;
        }
        const layers = this.layerManager.getLayers();
        const info = this.deckPicker.getLastPickedObject(
          {
            x: pos.x,
            y: pos.y,
            layers,
            viewports: this.getViewports(pos)
          },
          this._lastPointerDownInfo
        );
        const { layer } = info;
        const layerHandler = layer && (layer[eventHandlerProp] || layer.props[eventHandlerProp]);
        const rootHandler = this.props[eventHandlerProp];
        let handled = false;
        if (layerHandler) {
          handled = layerHandler.call(layer, info, event);
        }
        if (!handled) {
          rootHandler?.(info, event);
          this.widgetManager.onEvent(info, event);
        }
      };
      /** Internal use only: evnet handler for pointerdown */
      this._onPointerDown = (event) => {
        if (this.device?.type === "webgpu") {
          return;
        }
        const pos = event.offsetCenter;
        const pickedInfo = this._pick("pickObject", "pickObject Time", {
          x: pos.x,
          y: pos.y,
          radius: this.props.pickingRadius
        });
        this._lastPointerDownInfo = pickedInfo.result[0] || pickedInfo.emptyInfo;
      };
      this.props = { ...defaultProps, ...props };
      props = this.props;
      if (props.viewState && props.initialViewState) {
        log_default.warn(
          "View state tracking is disabled. Use either `initialViewState` for auto update or `viewState` for manual update."
        )();
      }
      this.viewState = this.props.initialViewState;
      if (props.device) {
        this.device = props.device;
      }
      let deviceOrPromise = this.device;
      if (!deviceOrPromise && props.gl) {
        if (props.gl instanceof WebGLRenderingContext) {
          log_default.error("WebGL1 context not supported.")();
        }
        deviceOrPromise = webgl2Adapter.attach(props.gl, this.props.deviceProps);
      }
      if (!deviceOrPromise) {
        deviceOrPromise = this._createDevice(props);
      }
      this.animationLoop = this._createAnimationLoop(deviceOrPromise, props);
      this.setProps(props);
      if (props._typedArrayManagerProps) {
        typed_array_manager_default.setOptions(props._typedArrayManagerProps);
      }
      this.animationLoop.start();
    }
    /** Stop rendering and dispose all resources */
    finalize() {
      this.animationLoop?.stop();
      this.animationLoop?.destroy();
      this.animationLoop = null;
      this._lastPointerDownInfo = null;
      this.layerManager?.finalize();
      this.layerManager = null;
      this.viewManager?.finalize();
      this.viewManager = null;
      this.effectManager?.finalize();
      this.effectManager = null;
      this.deckRenderer?.finalize();
      this.deckRenderer = null;
      this.deckPicker?.finalize();
      this.deckPicker = null;
      this.eventManager?.destroy();
      this.eventManager = null;
      this.widgetManager?.finalize();
      this.widgetManager = null;
      if (!this.props.canvas && !this.props.device && !this.props.gl && this.canvas) {
        this.canvas.parentElement?.removeChild(this.canvas);
        this.canvas = null;
      }
    }
    /** Partially update props */
    setProps(props) {
      this.stats.get("setProps Time").timeStart();
      if ("onLayerHover" in props) {
        log_default.removed("onLayerHover", "onHover")();
      }
      if ("onLayerClick" in props) {
        log_default.removed("onLayerClick", "onClick")();
      }
      if (props.initialViewState && // depth = 3 when comparing viewStates: viewId.position.0
      !deepEqual2(this.props.initialViewState, props.initialViewState, 3)) {
        this.viewState = props.initialViewState;
      }
      Object.assign(this.props, props);
      this._setCanvasSize(this.props);
      const resolvedProps = Object.create(this.props);
      Object.assign(resolvedProps, {
        views: this._getViews(),
        width: this.width,
        height: this.height,
        viewState: this._getViewState()
      });
      if (props.device && props.device.id !== this.device?.id) {
        this.animationLoop?.stop();
        if (this.canvas !== props.device.canvasContext?.canvas) {
          this.canvas?.remove();
          this.eventManager?.destroy();
          this.canvas = null;
        }
        log_default.log(`recreating animation loop for new device! id=${props.device.id}`)();
        this.animationLoop = this._createAnimationLoop(props.device, props);
        this.animationLoop.start();
      }
      this.animationLoop?.setProps(resolvedProps);
      if (props.useDevicePixels !== void 0 && this.device?.canvasContext?.canvas instanceof HTMLCanvasElement) {
        this.device.canvasContext.props.useDevicePixels = props.useDevicePixels;
        const canvas2 = this.device.canvasContext.canvas;
        const entry = {
          target: canvas2,
          contentBoxSize: [{ inlineSize: canvas2.clientWidth, blockSize: canvas2.clientHeight }],
          devicePixelContentBoxSize: [
            { inlineSize: canvas2.clientWidth, blockSize: canvas2.clientHeight }
          ],
          borderBoxSize: [{ inlineSize: canvas2.clientWidth, blockSize: canvas2.clientHeight }]
        };
        this.device.canvasContext._handleResize([entry]);
      }
      if (this.layerManager) {
        this.viewManager.setProps(resolvedProps);
        this.layerManager.activateViewport(this.getViewports()[0]);
        this.layerManager.setProps(resolvedProps);
        this.effectManager.setProps(resolvedProps);
        this.deckRenderer.setProps(resolvedProps);
        this.deckPicker.setProps(resolvedProps);
        this.widgetManager.setProps(resolvedProps);
      }
      this.stats.get("setProps Time").timeEnd();
    }
    // Public API
    /**
     * Check if a redraw is needed
     * @returns `false` or a string summarizing the redraw reason
     */
    needsRedraw(opts = { clearRedrawFlags: false }) {
      if (!this.layerManager) {
        return false;
      }
      if (this.props._animate) {
        return "Deck._animate";
      }
      let redraw = this._needsRedraw;
      if (opts.clearRedrawFlags) {
        this._needsRedraw = false;
      }
      const viewManagerNeedsRedraw = this.viewManager.needsRedraw(opts);
      const layerManagerNeedsRedraw = this.layerManager.needsRedraw(opts);
      const effectManagerNeedsRedraw = this.effectManager.needsRedraw(opts);
      const deckRendererNeedsRedraw = this.deckRenderer.needsRedraw(opts);
      redraw = redraw || viewManagerNeedsRedraw || layerManagerNeedsRedraw || effectManagerNeedsRedraw || deckRendererNeedsRedraw;
      return redraw;
    }
    /**
     * Redraw the GL context
     * @param reason If not provided, only redraw if deemed necessary. Otherwise redraw regardless of internal states.
     * @returns
     */
    redraw(reason) {
      if (!this.layerManager) {
        return;
      }
      let redrawReason = this.needsRedraw({ clearRedrawFlags: true });
      redrawReason = reason || redrawReason;
      if (!redrawReason) {
        return;
      }
      this.stats.get("Redraw Count").incrementCount();
      if (this.props._customRender) {
        this.props._customRender(redrawReason);
      } else {
        this._drawLayers(redrawReason);
      }
    }
    /** Flag indicating that the Deck instance has initialized its resources and it's safe to call public methods. */
    get isInitialized() {
      return this.viewManager !== null;
    }
    /** Get a list of views that are currently rendered */
    getViews() {
      assert8(this.viewManager);
      return this.viewManager.views;
    }
    /** Get a list of viewports that are currently rendered.
     * @param rect If provided, only returns viewports within the given bounding box.
     */
    getViewports(rect) {
      assert8(this.viewManager);
      return this.viewManager.getViewports(rect);
    }
    /** Get the current canvas element. */
    getCanvas() {
      return this.canvas;
    }
    /** Query the object rendered on top at a given point */
    pickObject(opts) {
      const infos = this._pick("pickObject", "pickObject Time", opts).result;
      return infos.length ? infos[0] : null;
    }
    /* Query all rendered objects at a given point */
    pickMultipleObjects(opts) {
      opts.depth = opts.depth || 10;
      return this._pick("pickObject", "pickMultipleObjects Time", opts).result;
    }
    /* Query all objects rendered on top within a bounding box */
    pickObjects(opts) {
      return this._pick("pickObjects", "pickObjects Time", opts);
    }
    /** Experimental
     * Add a global resource for sharing among layers
     */
    _addResources(resources, forceUpdate = false) {
      for (const id in resources) {
        this.layerManager.resourceManager.add({ resourceId: id, data: resources[id], forceUpdate });
      }
    }
    /** Experimental
     * Remove a global resource
     */
    _removeResources(resourceIds) {
      for (const id of resourceIds) {
        this.layerManager.resourceManager.remove(id);
      }
    }
    /** Experimental
     * Register a default effect. Effects will be sorted by order, those with a low order will be rendered first
     */
    _addDefaultEffect(effect) {
      this.effectManager.addDefaultEffect(effect);
    }
    _addDefaultShaderModule(module) {
      this.layerManager.addDefaultShaderModule(module);
    }
    _removeDefaultShaderModule(module) {
      this.layerManager?.removeDefaultShaderModule(module);
    }
    _pick(method, statKey, opts) {
      assert8(this.deckPicker);
      const { stats: stats2 } = this;
      stats2.get("Pick Count").incrementCount();
      stats2.get(statKey).timeStart();
      const infos = this.deckPicker[method]({
        // layerManager, viewManager and effectManager are always defined if deckPicker is
        layers: this.layerManager.getLayers(opts),
        views: this.viewManager.getViews(),
        viewports: this.getViewports(opts),
        onViewportActive: this.layerManager.activateViewport,
        effects: this.effectManager.getEffects(),
        ...opts
      });
      stats2.get(statKey).timeEnd();
      return infos;
    }
    /** Resolve props.canvas to element */
    _createCanvas(props) {
      let canvas2 = props.canvas;
      if (typeof canvas2 === "string") {
        canvas2 = document.getElementById(canvas2);
        assert8(canvas2);
      }
      if (!canvas2) {
        canvas2 = document.createElement("canvas");
        canvas2.id = props.id || "deckgl-overlay";
        if (props.width && typeof props.width === "number") {
          canvas2.width = props.width;
        }
        if (props.height && typeof props.height === "number") {
          canvas2.height = props.height;
        }
        const parent = props.parent || document.body;
        parent.appendChild(canvas2);
      }
      Object.assign(canvas2.style, props.style);
      return canvas2;
    }
    /** Updates canvas width and/or height, if provided as props */
    _setCanvasSize(props) {
      if (!this.canvas) {
        return;
      }
      const { width, height } = props;
      if (width || width === 0) {
        const cssWidth = Number.isFinite(width) ? `${width}px` : width;
        this.canvas.style.width = cssWidth;
      }
      if (height || height === 0) {
        const cssHeight = Number.isFinite(height) ? `${height}px` : height;
        this.canvas.style.position = props.style?.position || "absolute";
        this.canvas.style.height = cssHeight;
      }
    }
    /** If canvas size has changed, reads out the new size and update */
    _updateCanvasSize() {
      const { canvas: canvas2 } = this;
      if (!canvas2) {
        return;
      }
      const newWidth = canvas2.clientWidth ?? canvas2.width;
      const newHeight = canvas2.clientHeight ?? canvas2.height;
      if (newWidth !== this.width || newHeight !== this.height) {
        this.width = newWidth;
        this.height = newHeight;
        this.viewManager?.setProps({ width: newWidth, height: newHeight });
        this.layerManager?.activateViewport(this.getViewports()[0]);
        this.props.onResize({ width: newWidth, height: newHeight });
      }
    }
    _createAnimationLoop(deviceOrPromise, props) {
      const {
        // width,
        // height,
        gl,
        // debug,
        onError
        // onBeforeRender,
        // onAfterRender,
      } = props;
      return new AnimationLoop({
        device: deviceOrPromise,
        // TODO v9
        autoResizeDrawingBuffer: !gl,
        // do not auto resize external context
        autoResizeViewport: false,
        // @ts-expect-error luma.gl needs to accept Promise<void> return value
        onInitialize: (context) => this._setDevice(context.device),
        onRender: this._onRenderFrame.bind(this),
        // @ts-expect-error typing mismatch: AnimationLoop does not accept onError:null
        onError
        // onBeforeRender,
        // onAfterRender,
      });
    }
    // Create a device from the deviceProps, assigning required defaults
    _createDevice(props) {
      const canvasContextUserProps = this.props.deviceProps?.createCanvasContext;
      const canvasContextProps = typeof canvasContextUserProps === "object" ? canvasContextUserProps : void 0;
      const deviceProps = { adapters: [], ...props.deviceProps };
      if (!deviceProps.adapters.includes(webgl2Adapter)) {
        deviceProps.adapters.push(webgl2Adapter);
      }
      const defaultCanvasProps = {
        // we must use 'premultiplied' canvas for webgpu to enable transparency and match shaders
        alphaMode: this.props.deviceProps?.type === "webgpu" ? "premultiplied" : void 0
      };
      return luma.createDevice({
        // luma by default throws if a device is already attached
        // asynchronous device creation could happen after finalize() is called
        // TODO - createDevice should support AbortController?
        _reuseDevices: true,
        // tests can't handle WebGPU devices yet so we force WebGL2 unless overridden
        type: "webgl",
        ...deviceProps,
        // In deck.gl v10 we may emphasize multi canvas support and unwind this prop wrapping
        createCanvasContext: {
          ...defaultCanvasProps,
          ...canvasContextProps,
          canvas: this._createCanvas(props),
          useDevicePixels: this.props.useDevicePixels,
          autoResize: true
        }
      });
    }
    // Get the most relevant view state: props.viewState, if supplied, shadows internal viewState
    // TODO: For backwards compatibility ensure numeric width and height is added to the viewState
    _getViewState() {
      return this.props.viewState || this.viewState;
    }
    // Get the view descriptor list
    _getViews() {
      const { views } = this.props;
      const normalizedViews = Array.isArray(views) ? views : (
        // If null, default to a full screen map view port
        views ? [views] : [new MapView({ id: "default-view" })]
      );
      if (normalizedViews.length && this.props.controller) {
        normalizedViews[0].props.controller = this.props.controller;
      }
      return normalizedViews;
    }
    _onContextLost() {
      const { onError } = this.props;
      if (this.animationLoop && onError) {
        onError(new Error("WebGL context is lost"));
      }
    }
    /** Actually run picking */
    _pickAndCallback() {
      if (this.device?.type === "webgpu") {
        return;
      }
      const { _pickRequest } = this;
      if (_pickRequest.event) {
        const { result, emptyInfo } = this._pick("pickObject", "pickObject Time", _pickRequest);
        this.cursorState.isHovering = result.length > 0;
        let pickedInfo = emptyInfo;
        let handled = false;
        for (const info of result) {
          pickedInfo = info;
          handled = info.layer?.onHover(info, _pickRequest.event) || handled;
        }
        if (!handled) {
          this.props.onHover?.(pickedInfo, _pickRequest.event);
          this.widgetManager.onHover(pickedInfo, _pickRequest.event);
        }
        _pickRequest.event = null;
      }
    }
    _updateCursor() {
      const container = this.props.parent || this.canvas;
      if (container) {
        container.style.cursor = this.props.getCursor(this.cursorState);
      }
    }
    _setDevice(device) {
      this.device = device;
      if (!this.animationLoop) {
        return;
      }
      if (!this.canvas) {
        this.canvas = this.device.canvasContext?.canvas;
        if (!this.canvas.isConnected && this.props.parent) {
          this.props.parent.insertBefore(this.canvas, this.props.parent.firstChild);
        }
      }
      if (this.device.type === "webgl") {
        this.device.setParametersWebGL({
          blend: true,
          blendFunc: [GLEnum.SRC_ALPHA, GLEnum.ONE_MINUS_SRC_ALPHA, GLEnum.ONE, GLEnum.ONE_MINUS_SRC_ALPHA],
          polygonOffsetFill: true,
          depthTest: true,
          depthFunc: GLEnum.LEQUAL
        });
      }
      this.props.onDeviceInitialized(this.device);
      if (this.device.type === "webgl") {
        this.props.onWebGLInitialized(this.device.gl);
      }
      const timeline = new Timeline();
      timeline.play();
      this.animationLoop.attachTimeline(timeline);
      this.eventManager = new EventManager(this.props.parent || this.canvas, {
        touchAction: this.props.touchAction,
        recognizers: Object.keys(RECOGNIZERS).map((eventName) => {
          const [RecognizerConstructor, defaultOptions4, recognizeWith, requestFailure] = RECOGNIZERS[eventName];
          const optionsOverride = this.props.eventRecognizerOptions?.[eventName];
          const options = { ...defaultOptions4, ...optionsOverride, event: eventName };
          return {
            recognizer: new RecognizerConstructor(options),
            recognizeWith,
            requestFailure
          };
        }),
        events: {
          pointerdown: this._onPointerDown,
          pointermove: this._onPointerMove,
          pointerleave: this._onPointerMove
        }
      });
      for (const eventType in EVENT_HANDLERS) {
        this.eventManager.on(eventType, this._onEvent);
      }
      this.viewManager = new ViewManager({
        timeline,
        eventManager: this.eventManager,
        onViewStateChange: this._onViewStateChange.bind(this),
        onInteractionStateChange: this._onInteractionStateChange.bind(this),
        views: this._getViews(),
        viewState: this._getViewState(),
        width: this.width,
        height: this.height
      });
      const viewport = this.viewManager.getViewports()[0];
      this.layerManager = new LayerManager(this.device, {
        deck: this,
        stats: this.stats,
        viewport,
        timeline
      });
      this.effectManager = new EffectManager({
        deck: this,
        device: this.device
      });
      this.deckRenderer = new DeckRenderer(this.device);
      this.deckPicker = new DeckPicker(this.device);
      this.widgetManager = new WidgetManager({
        deck: this,
        parentElement: this.canvas?.parentElement
      });
      this.widgetManager.addDefault(new TooltipWidget());
      this.setProps(this.props);
      this._updateCanvasSize();
      this.props.onLoad();
    }
    /** Internal only: default render function (redraw all layers and views) */
    _drawLayers(redrawReason, renderOptions) {
      const { device, gl } = this.layerManager.context;
      this.props.onBeforeRender({ device, gl });
      const opts = {
        target: this.props._framebuffer,
        layers: this.layerManager.getLayers(),
        viewports: this.viewManager.getViewports(),
        onViewportActive: this.layerManager.activateViewport,
        views: this.viewManager.getViews(),
        pass: "screen",
        effects: this.effectManager.getEffects(),
        ...renderOptions
      };
      this.deckRenderer?.renderLayers(opts);
      if (opts.pass === "screen") {
        this.widgetManager.onRedraw({
          viewports: opts.viewports,
          layers: opts.layers
        });
      }
      this.props.onAfterRender({ device, gl });
    }
    // Callbacks
    _onRenderFrame() {
      this._getFrameStats();
      if (this._metricsCounter++ % 60 === 0) {
        this._getMetrics();
        this.stats.reset();
        log_default.table(4, this.metrics)();
        if (this.props._onMetrics) {
          this.props._onMetrics(this.metrics);
        }
      }
      this._updateCanvasSize();
      this._updateCursor();
      this.layerManager.updateLayers();
      if (this.device?.type !== "webgpu") {
        this._pickAndCallback();
      }
      this.redraw();
      if (this.viewManager) {
        this.viewManager.updateViewStates();
      }
    }
    // Callbacks
    _onViewStateChange(params) {
      const viewState = this.props.onViewStateChange(params) || params.viewState;
      if (this.viewState) {
        this.viewState = { ...this.viewState, [params.viewId]: viewState };
        if (!this.props.viewState) {
          if (this.viewManager) {
            this.viewManager.setProps({ viewState: this.viewState });
          }
        }
      }
    }
    _onInteractionStateChange(interactionState) {
      this.cursorState.isDragging = interactionState.isDragging || false;
      this.props.onInteractionStateChange(interactionState);
    }
    _getFrameStats() {
      const { stats: stats2 } = this;
      stats2.get("frameRate").timeEnd();
      stats2.get("frameRate").timeStart();
      const animationLoopStats = this.animationLoop.stats;
      stats2.get("GPU Time").addTime(animationLoopStats.get("GPU Time").lastTiming);
      stats2.get("CPU Time").addTime(animationLoopStats.get("CPU Time").lastTiming);
    }
    _getMetrics() {
      const { metrics, stats: stats2 } = this;
      metrics.fps = stats2.get("frameRate").getHz();
      metrics.setPropsTime = stats2.get("setProps Time").time;
      metrics.updateAttributesTime = stats2.get("Update Attributes").time;
      metrics.framesRedrawn = stats2.get("Redraw Count").count;
      metrics.pickTime = stats2.get("pickObject Time").time + stats2.get("pickMultipleObjects Time").time + stats2.get("pickObjects Time").time;
      metrics.pickCount = stats2.get("Pick Count").count;
      metrics.gpuTime = stats2.get("GPU Time").time;
      metrics.cpuTime = stats2.get("CPU Time").time;
      metrics.gpuTimePerFrame = stats2.get("GPU Time").getAverageTime();
      metrics.cpuTimePerFrame = stats2.get("CPU Time").getAverageTime();
      const memoryStats = luma.stats.get("Memory Usage");
      metrics.bufferMemory = memoryStats.get("Buffer Memory").count;
      metrics.textureMemory = memoryStats.get("Texture Memory").count;
      metrics.renderbufferMemory = memoryStats.get("Renderbuffer Memory").count;
      metrics.gpuMemory = memoryStats.get("GPU Memory").count;
    }
  };
  Deck.defaultProps = defaultProps;
  // This is used to defeat tree shaking of init.js
  // https://github.com/visgl/deck.gl/issues/3213
  Deck.VERSION = VERSION4;

  // ../core/src/lib/attribute/data-column.ts
  init_dist4();

  // ../core/src/lib/attribute/gl-utils.ts
  init_dist4();
  function typedArrayFromDataType(type) {
    switch (type) {
      case "float64":
        return Float64Array;
      case "uint8":
      case "unorm8":
        return Uint8ClampedArray;
      default:
        return getTypedArrayConstructor(type);
    }
  }
  var dataTypeFromTypedArray = getDataType;
  function getBufferAttributeLayout(name13, accessor, deviceType) {
    const type = deviceType === "webgpu" && accessor.type === "uint8" ? "unorm8" : accessor.type;
    return {
      attribute: name13,
      // @ts-expect-error Not all combinations are valid vertex formats; it's up to DataColumn to ensure
      format: accessor.size > 1 ? `${type}x${accessor.size}` : accessor.type,
      byteOffset: accessor.offset || 0
      // Note stride is set on the top level
    };
  }
  function getStride(accessor) {
    return accessor.stride || accessor.size * accessor.bytesPerElement;
  }
  function bufferLayoutEqual(accessor1, accessor2) {
    return accessor1.type === accessor2.type && accessor1.size === accessor2.size && getStride(accessor1) === getStride(accessor2) && (accessor1.offset || 0) === (accessor2.offset || 0);
  }

  // ../core/src/lib/attribute/data-column.ts
  function resolveShaderAttribute(baseAccessor, shaderAttributeOptions) {
    if (shaderAttributeOptions.offset) {
      log_default.removed("shaderAttribute.offset", "vertexOffset, elementOffset")();
    }
    const stride = getStride(baseAccessor);
    const vertexOffset = shaderAttributeOptions.vertexOffset !== void 0 ? shaderAttributeOptions.vertexOffset : baseAccessor.vertexOffset || 0;
    const elementOffset = shaderAttributeOptions.elementOffset || 0;
    const offset = (
      // offsets defined by the attribute
      vertexOffset * stride + elementOffset * baseAccessor.bytesPerElement + // offsets defined by external buffers if any
      (baseAccessor.offset || 0)
    );
    return {
      ...shaderAttributeOptions,
      offset,
      stride
    };
  }
  function resolveDoublePrecisionShaderAttributes(baseAccessor, shaderAttributeOptions) {
    const resolvedOptions = resolveShaderAttribute(baseAccessor, shaderAttributeOptions);
    return {
      high: resolvedOptions,
      low: {
        ...resolvedOptions,
        offset: resolvedOptions.offset + baseAccessor.size * 4
      }
    };
  }
  var DataColumn = class {
    /* eslint-disable max-statements */
    constructor(device, opts, state) {
      this._buffer = null;
      this.device = device;
      this.id = opts.id || "";
      this.size = opts.size || 1;
      const logicalType = opts.logicalType || opts.type;
      const doublePrecision = logicalType === "float64";
      let { defaultValue: defaultValue2 } = opts;
      defaultValue2 = Number.isFinite(defaultValue2) ? [defaultValue2] : defaultValue2 || new Array(this.size).fill(0);
      let bufferType;
      if (doublePrecision) {
        bufferType = "float32";
      } else if (!logicalType && opts.isIndexed) {
        bufferType = "uint32";
      } else {
        bufferType = logicalType || "float32";
      }
      let defaultType = typedArrayFromDataType(logicalType || bufferType);
      this.doublePrecision = doublePrecision;
      if (doublePrecision && opts.fp64 === false) {
        defaultType = Float32Array;
      }
      this.value = null;
      this.settings = {
        ...opts,
        defaultType,
        defaultValue: defaultValue2,
        logicalType,
        type: bufferType,
        normalized: bufferType.includes("norm"),
        size: this.size,
        bytesPerElement: defaultType.BYTES_PER_ELEMENT
      };
      this.state = {
        ...state,
        externalBuffer: null,
        bufferAccessor: this.settings,
        allocatedValue: null,
        numInstances: 0,
        bounds: null,
        constant: false
      };
    }
    /* eslint-enable max-statements */
    get isConstant() {
      return this.state.constant;
    }
    get buffer() {
      return this._buffer;
    }
    get byteOffset() {
      const accessor = this.getAccessor();
      if (accessor.vertexOffset) {
        return accessor.vertexOffset * getStride(accessor);
      }
      return 0;
    }
    get numInstances() {
      return this.state.numInstances;
    }
    set numInstances(n4) {
      this.state.numInstances = n4;
    }
    delete() {
      if (this._buffer) {
        this._buffer.delete();
        this._buffer = null;
      }
      typed_array_manager_default.release(this.state.allocatedValue);
    }
    getBuffer() {
      if (this.state.constant) {
        return null;
      }
      return this.state.externalBuffer || this._buffer;
    }
    getValue(attributeName = this.id, options = null) {
      const result = {};
      if (this.state.constant) {
        const value = this.value;
        if (options) {
          const shaderAttributeDef = resolveShaderAttribute(this.getAccessor(), options);
          const offset = shaderAttributeDef.offset / value.BYTES_PER_ELEMENT;
          const size = shaderAttributeDef.size || this.size;
          result[attributeName] = value.subarray(offset, offset + size);
        } else {
          result[attributeName] = value;
        }
      } else {
        result[attributeName] = this.getBuffer();
      }
      if (this.doublePrecision) {
        if (this.value instanceof Float64Array) {
          result[`${attributeName}64Low`] = result[attributeName];
        } else {
          result[`${attributeName}64Low`] = new Float32Array(this.size);
        }
      }
      return result;
    }
    _getBufferLayout(attributeName = this.id, options = null) {
      const accessor = this.getAccessor();
      const attributes = [];
      const result = {
        name: this.id,
        byteStride: getStride(accessor),
        attributes
      };
      if (this.doublePrecision) {
        const doubleShaderAttributeDefs = resolveDoublePrecisionShaderAttributes(
          accessor,
          options || {}
        );
        attributes.push(
          getBufferAttributeLayout(
            attributeName,
            { ...accessor, ...doubleShaderAttributeDefs.high },
            this.device.type
          ),
          getBufferAttributeLayout(
            `${attributeName}64Low`,
            {
              ...accessor,
              ...doubleShaderAttributeDefs.low
            },
            this.device.type
          )
        );
      } else if (options) {
        const shaderAttributeDef = resolveShaderAttribute(accessor, options);
        attributes.push(
          getBufferAttributeLayout(
            attributeName,
            { ...accessor, ...shaderAttributeDef },
            this.device.type
          )
        );
      } else {
        attributes.push(getBufferAttributeLayout(attributeName, accessor, this.device.type));
      }
      return result;
    }
    setAccessor(accessor) {
      this.state.bufferAccessor = accessor;
    }
    getAccessor() {
      return this.state.bufferAccessor;
    }
    // Returns [min: Array(size), max: Array(size)]
    /* eslint-disable max-depth */
    getBounds() {
      if (this.state.bounds) {
        return this.state.bounds;
      }
      let result = null;
      if (this.state.constant && this.value) {
        const min7 = Array.from(this.value);
        result = [min7, min7];
      } else {
        const { value, numInstances, size } = this;
        const len9 = numInstances * size;
        if (value && len9 && value.length >= len9) {
          const min7 = new Array(size).fill(Infinity);
          const max7 = new Array(size).fill(-Infinity);
          for (let i7 = 0; i7 < len9; ) {
            for (let j4 = 0; j4 < size; j4++) {
              const v5 = value[i7++];
              if (v5 < min7[j4])
                min7[j4] = v5;
              if (v5 > max7[j4])
                max7[j4] = v5;
            }
          }
          result = [min7, max7];
        }
      }
      this.state.bounds = result;
      return result;
    }
    // returns true if success
    // eslint-disable-next-line max-statements
    setData(data) {
      const { state } = this;
      let opts;
      if (ArrayBuffer.isView(data)) {
        opts = { value: data };
      } else if (data instanceof Buffer2) {
        opts = { buffer: data };
      } else {
        opts = data;
      }
      const accessor = { ...this.settings, ...opts };
      if (ArrayBuffer.isView(opts.value)) {
        if (!opts.type) {
          const is64Bit = this.doublePrecision && opts.value instanceof Float64Array;
          if (is64Bit) {
            accessor.type = "float32";
          } else {
            const type = dataTypeFromTypedArray(opts.value);
            accessor.type = accessor.normalized ? type.replace("int", "norm") : type;
          }
        }
        accessor.bytesPerElement = opts.value.BYTES_PER_ELEMENT;
        accessor.stride = getStride(accessor);
      }
      state.bounds = null;
      if (opts.constant) {
        let value = opts.value;
        value = this._normalizeValue(value, [], 0);
        if (this.settings.normalized) {
          value = this.normalizeConstant(value);
        }
        const hasChanged = !state.constant || !this._areValuesEqual(value, this.value);
        if (!hasChanged) {
          return false;
        }
        state.externalBuffer = null;
        state.constant = true;
        this.value = ArrayBuffer.isView(value) ? value : new Float32Array(value);
      } else if (opts.buffer) {
        const buffer = opts.buffer;
        state.externalBuffer = buffer;
        state.constant = false;
        this.value = opts.value || null;
      } else if (opts.value) {
        this._checkExternalBuffer(opts);
        let value = opts.value;
        state.externalBuffer = null;
        state.constant = false;
        this.value = value;
        let { buffer } = this;
        const stride = getStride(accessor);
        const byteOffset = (accessor.vertexOffset || 0) * stride;
        if (this.doublePrecision && value instanceof Float64Array) {
          value = toDoublePrecisionArray(value, accessor);
        }
        if (this.settings.isIndexed) {
          const ArrayType = this.settings.defaultType;
          if (value.constructor !== ArrayType) {
            value = new ArrayType(value);
          }
        }
        const requiredBufferSize = value.byteLength + byteOffset + stride * 2;
        if (!buffer || buffer.byteLength < requiredBufferSize) {
          buffer = this._createBuffer(requiredBufferSize);
        }
        buffer.write(value, byteOffset);
      }
      this.setAccessor(accessor);
      return true;
    }
    updateSubBuffer(opts = {}) {
      this.state.bounds = null;
      const value = this.value;
      const { startOffset = 0, endOffset } = opts;
      this.buffer.write(
        this.doublePrecision && value instanceof Float64Array ? toDoublePrecisionArray(value, {
          size: this.size,
          startIndex: startOffset,
          endIndex: endOffset
        }) : value.subarray(startOffset, endOffset),
        startOffset * value.BYTES_PER_ELEMENT + this.byteOffset
      );
    }
    allocate(numInstances, copy13 = false) {
      const { state } = this;
      const oldValue = state.allocatedValue;
      const value = typed_array_manager_default.allocate(oldValue, numInstances + 1, {
        size: this.size,
        type: this.settings.defaultType,
        copy: copy13
      });
      this.value = value;
      const { byteOffset } = this;
      let { buffer } = this;
      if (!buffer || buffer.byteLength < value.byteLength + byteOffset) {
        buffer = this._createBuffer(value.byteLength + byteOffset);
        if (copy13 && oldValue) {
          buffer.write(
            oldValue instanceof Float64Array ? toDoublePrecisionArray(oldValue, this) : oldValue,
            byteOffset
          );
        }
      }
      state.allocatedValue = value;
      state.constant = false;
      state.externalBuffer = null;
      this.setAccessor(this.settings);
      return true;
    }
    // PRIVATE HELPER METHODS
    _checkExternalBuffer(opts) {
      const { value } = opts;
      if (!ArrayBuffer.isView(value)) {
        throw new Error(`Attribute ${this.id} value is not TypedArray`);
      }
      const ArrayType = this.settings.defaultType;
      let illegalArrayType = false;
      if (this.doublePrecision) {
        illegalArrayType = value.BYTES_PER_ELEMENT < 4;
      }
      if (illegalArrayType) {
        throw new Error(`Attribute ${this.id} does not support ${value.constructor.name}`);
      }
      if (!(value instanceof ArrayType) && this.settings.normalized && !("normalized" in opts)) {
        log_default.warn(`Attribute ${this.id} is normalized`)();
      }
    }
    // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer
    normalizeConstant(value) {
      switch (this.settings.type) {
        case "snorm8":
          return new Float32Array(value).map((x4) => (x4 + 128) / 255 * 2 - 1);
        case "snorm16":
          return new Float32Array(value).map((x4) => (x4 + 32768) / 65535 * 2 - 1);
        case "unorm8":
          return new Float32Array(value).map((x4) => x4 / 255);
        case "unorm16":
          return new Float32Array(value).map((x4) => x4 / 65535);
        default:
          return value;
      }
    }
    /* check user supplied values and apply fallback */
    _normalizeValue(value, out, start) {
      const { defaultValue: defaultValue2, size } = this.settings;
      if (Number.isFinite(value)) {
        out[start] = value;
        return out;
      }
      if (!value) {
        let i7 = size;
        while (--i7 >= 0) {
          out[start + i7] = defaultValue2[i7];
        }
        return out;
      }
      switch (size) {
        case 4:
          out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue2[3];
        case 3:
          out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue2[2];
        case 2:
          out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue2[1];
        case 1:
          out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue2[0];
          break;
        default:
          let i7 = size;
          while (--i7 >= 0) {
            out[start + i7] = Number.isFinite(value[i7]) ? value[i7] : defaultValue2[i7];
          }
      }
      return out;
    }
    _areValuesEqual(value1, value2) {
      if (!value1 || !value2) {
        return false;
      }
      const { size } = this;
      for (let i7 = 0; i7 < size; i7++) {
        if (value1[i7] !== value2[i7]) {
          return false;
        }
      }
      return true;
    }
    _createBuffer(byteLength) {
      if (this._buffer) {
        this._buffer.destroy();
      }
      const { isIndexed, type } = this.settings;
      this._buffer = this.device.createBuffer({
        ...this._buffer?.props,
        id: this.id,
        // TODO(ibgreen) - WebGPU requires COPY_DST and COPY_SRC to allow write / read
        usage: (isIndexed ? Buffer2.INDEX : Buffer2.VERTEX) | Buffer2.COPY_DST,
        indexType: isIndexed ? type : void 0,
        byteLength
      });
      return this._buffer;
    }
  };

  // ../core/src/utils/iterable-utils.ts
  var EMPTY_ARRAY = [];
  var placeholderArray = [];
  function createIterable(data, startRow = 0, endRow = Infinity) {
    let iterable = EMPTY_ARRAY;
    const objectInfo = {
      index: -1,
      data,
      // visitor can optionally utilize this to avoid constructing a new array for every object
      target: []
    };
    if (!data) {
      iterable = EMPTY_ARRAY;
    } else if (typeof data[Symbol.iterator] === "function") {
      iterable = data;
    } else if (data.length > 0) {
      placeholderArray.length = data.length;
      iterable = placeholderArray;
    }
    if (startRow > 0 || Number.isFinite(endRow)) {
      iterable = (Array.isArray(iterable) ? iterable : Array.from(iterable)).slice(startRow, endRow);
      objectInfo.index = startRow - 1;
    }
    return { iterable, objectInfo };
  }
  function isAsyncIterable2(data) {
    return data && data[Symbol.asyncIterator];
  }
  function getAccessorFromBuffer(typedArray, options) {
    const { size, stride, offset, startIndices, nested } = options;
    const bytesPerElement = typedArray.BYTES_PER_ELEMENT;
    const elementStride = stride ? stride / bytesPerElement : size;
    const elementOffset = offset ? offset / bytesPerElement : 0;
    const vertexCount = Math.floor((typedArray.length - elementOffset) / elementStride);
    return (_3, { index, target: target2 }) => {
      if (!startIndices) {
        const sourceIndex = index * elementStride + elementOffset;
        for (let j4 = 0; j4 < size; j4++) {
          target2[j4] = typedArray[sourceIndex + j4];
        }
        return target2;
      }
      const startIndex = startIndices[index];
      const endIndex = startIndices[index + 1] || vertexCount;
      let result;
      if (nested) {
        result = new Array(endIndex - startIndex);
        for (let i7 = startIndex; i7 < endIndex; i7++) {
          const sourceIndex = i7 * elementStride + elementOffset;
          target2 = new Array(size);
          for (let j4 = 0; j4 < size; j4++) {
            target2[j4] = typedArray[sourceIndex + j4];
          }
          result[i7 - startIndex] = target2;
        }
      } else if (elementStride === size) {
        result = typedArray.subarray(
          startIndex * size + elementOffset,
          endIndex * size + elementOffset
        );
      } else {
        result = new typedArray.constructor((endIndex - startIndex) * size);
        let targetIndex = 0;
        for (let i7 = startIndex; i7 < endIndex; i7++) {
          const sourceIndex = i7 * elementStride + elementOffset;
          for (let j4 = 0; j4 < size; j4++) {
            result[targetIndex++] = typedArray[sourceIndex + j4];
          }
        }
      }
      return result;
    };
  }

  // ../core/src/utils/range.ts
  var EMPTY = [];
  var FULL = [[0, Infinity]];
  function add6(rangeList, range) {
    if (rangeList === FULL) {
      return rangeList;
    }
    if (range[0] < 0) {
      range[0] = 0;
    }
    if (range[0] >= range[1]) {
      return rangeList;
    }
    const newRangeList = [];
    const len9 = rangeList.length;
    let insertPosition = 0;
    for (let i7 = 0; i7 < len9; i7++) {
      const range0 = rangeList[i7];
      if (range0[1] < range[0]) {
        newRangeList.push(range0);
        insertPosition = i7 + 1;
      } else if (range0[0] > range[1]) {
        newRangeList.push(range0);
      } else {
        range = [Math.min(range0[0], range[0]), Math.max(range0[1], range[1])];
      }
    }
    newRangeList.splice(insertPosition, 0, range);
    return newRangeList;
  }

  // ../core/src/lib/attribute/transition-settings.ts
  var DEFAULT_TRANSITION_SETTINGS = {
    interpolation: {
      duration: 0,
      easing: (t5) => t5
    },
    spring: {
      stiffness: 0.05,
      damping: 0.5
    }
  };
  function normalizeTransitionSettings(userSettings, layerSettings) {
    if (!userSettings) {
      return null;
    }
    if (Number.isFinite(userSettings)) {
      userSettings = { type: "interpolation", duration: userSettings };
    }
    const type = userSettings.type || "interpolation";
    return {
      ...DEFAULT_TRANSITION_SETTINGS[type],
      ...layerSettings,
      ...userSettings,
      type
    };
  }

  // ../core/src/lib/attribute/attribute.ts
  var Attribute = class extends DataColumn {
    constructor(device, opts) {
      super(device, opts, {
        startIndices: null,
        lastExternalBuffer: null,
        binaryValue: null,
        binaryAccessor: null,
        needsUpdate: true,
        needsRedraw: false,
        layoutChanged: false,
        updateRanges: FULL
      });
      /** Legacy approach to set attribute value - read `isConstant` instead for attribute state */
      this.constant = false;
      this.settings.update = opts.update || (opts.accessor ? this._autoUpdater : void 0);
      Object.seal(this.settings);
      Object.seal(this.state);
      this._validateAttributeUpdaters();
    }
    get startIndices() {
      return this.state.startIndices;
    }
    set startIndices(layout) {
      this.state.startIndices = layout;
    }
    needsUpdate() {
      return this.state.needsUpdate;
    }
    needsRedraw({ clearChangedFlags = false } = {}) {
      const needsRedraw = this.state.needsRedraw;
      this.state.needsRedraw = needsRedraw && !clearChangedFlags;
      return needsRedraw;
    }
    layoutChanged() {
      return this.state.layoutChanged;
    }
    setAccessor(accessor) {
      this.state.layoutChanged ||= !bufferLayoutEqual(accessor, this.getAccessor());
      super.setAccessor(accessor);
    }
    getUpdateTriggers() {
      const { accessor } = this.settings;
      return [this.id].concat(typeof accessor !== "function" && accessor || []);
    }
    supportsTransition() {
      return Boolean(this.settings.transition);
    }
    // Resolve transition settings object if transition is enabled, otherwise `null`
    getTransitionSetting(opts) {
      if (!opts || !this.supportsTransition()) {
        return null;
      }
      const { accessor } = this.settings;
      const layerSettings = this.settings.transition;
      const userSettings = Array.isArray(accessor) ? (
        // @ts-ignore
        opts[accessor.find((a6) => opts[a6])]
      ) : (
        // @ts-ignore
        opts[accessor]
      );
      return normalizeTransitionSettings(userSettings, layerSettings);
    }
    setNeedsUpdate(reason = this.id, dataRange) {
      this.state.needsUpdate = this.state.needsUpdate || reason;
      this.setNeedsRedraw(reason);
      if (dataRange) {
        const { startRow = 0, endRow = Infinity } = dataRange;
        this.state.updateRanges = add6(this.state.updateRanges, [startRow, endRow]);
      } else {
        this.state.updateRanges = FULL;
      }
    }
    clearNeedsUpdate() {
      this.state.needsUpdate = false;
      this.state.updateRanges = EMPTY;
    }
    setNeedsRedraw(reason = this.id) {
      this.state.needsRedraw = this.state.needsRedraw || reason;
    }
    allocate(numInstances) {
      const { state, settings } = this;
      if (settings.noAlloc) {
        return false;
      }
      if (settings.update) {
        super.allocate(numInstances, state.updateRanges !== FULL);
        return true;
      }
      return false;
    }
    updateBuffer({
      numInstances,
      data,
      props,
      context
    }) {
      if (!this.needsUpdate()) {
        return false;
      }
      const {
        state: { updateRanges },
        settings: { update, noAlloc }
      } = this;
      let updated = true;
      if (update) {
        for (const [startRow, endRow] of updateRanges) {
          update.call(context, this, { data, startRow, endRow, props, numInstances });
        }
        if (!this.value) {
        } else if (this.constant || !this.buffer || this.buffer.byteLength < this.value.byteLength + this.byteOffset) {
          this.setData({
            value: this.value,
            constant: this.constant
          });
          this.constant = false;
        } else {
          for (const [startRow, endRow] of updateRanges) {
            const startOffset = Number.isFinite(startRow) ? this.getVertexOffset(startRow) : 0;
            const endOffset = Number.isFinite(endRow) ? this.getVertexOffset(endRow) : noAlloc || !Number.isFinite(numInstances) ? this.value.length : numInstances * this.size;
            super.updateSubBuffer({ startOffset, endOffset });
          }
        }
        this._checkAttributeArray();
      } else {
        updated = false;
      }
      this.clearNeedsUpdate();
      this.setNeedsRedraw();
      return updated;
    }
    // Use generic value
    // Returns true if successful
    setConstantValue(context, value) {
      const isWebGPU = this.device.type === "webgpu";
      if (isWebGPU || value === void 0 || typeof value === "function") {
        if (isWebGPU && typeof value !== "function") {
          const normalisedValue = this._normalizeValue(value, [], 0);
          if (!this._areValuesEqual(normalisedValue, this.value)) {
            this.setNeedsUpdate("WebGPU constant updated");
          }
        }
        return false;
      }
      const transformedValue = this.settings.transform && context ? this.settings.transform.call(context, value) : value;
      const hasChanged = this.setData({ constant: true, value: transformedValue });
      if (hasChanged) {
        this.setNeedsRedraw();
      }
      this.clearNeedsUpdate();
      return true;
    }
    // Use external buffer
    // Returns true if successful
    // eslint-disable-next-line max-statements
    setExternalBuffer(buffer) {
      const { state } = this;
      if (!buffer) {
        state.lastExternalBuffer = null;
        return false;
      }
      this.clearNeedsUpdate();
      if (state.lastExternalBuffer === buffer) {
        return true;
      }
      state.lastExternalBuffer = buffer;
      this.setNeedsRedraw();
      this.setData(buffer);
      return true;
    }
    // Binary value is a typed array packed from mapping the source data with the accessor
    // If the returned value from the accessor is the same as the attribute value, set it directly
    // Otherwise use the auto updater for transform/normalization
    setBinaryValue(buffer, startIndices = null) {
      const { state, settings } = this;
      if (!buffer) {
        state.binaryValue = null;
        state.binaryAccessor = null;
        return false;
      }
      if (settings.noAlloc) {
        return false;
      }
      if (state.binaryValue === buffer) {
        this.clearNeedsUpdate();
        return true;
      }
      state.binaryValue = buffer;
      this.setNeedsRedraw();
      const needsUpdate = settings.transform || startIndices !== this.startIndices;
      if (needsUpdate) {
        if (ArrayBuffer.isView(buffer)) {
          buffer = { value: buffer };
        }
        const binaryValue = buffer;
        assert8(ArrayBuffer.isView(binaryValue.value), `invalid ${settings.accessor}`);
        const needsNormalize = Boolean(binaryValue.size) && binaryValue.size !== this.size;
        state.binaryAccessor = getAccessorFromBuffer(binaryValue.value, {
          size: binaryValue.size || this.size,
          stride: binaryValue.stride,
          offset: binaryValue.offset,
          startIndices,
          nested: needsNormalize
        });
        return false;
      }
      this.clearNeedsUpdate();
      this.setData(buffer);
      return true;
    }
    getVertexOffset(row) {
      const { startIndices } = this;
      const vertexIndex = startIndices ? row < startIndices.length ? startIndices[row] : this.numInstances : row;
      return vertexIndex * this.size;
    }
    getValue() {
      const shaderAttributeDefs = this.settings.shaderAttributes;
      const result = super.getValue();
      if (!shaderAttributeDefs) {
        return result;
      }
      for (const shaderAttributeName in shaderAttributeDefs) {
        Object.assign(
          result,
          super.getValue(shaderAttributeName, shaderAttributeDefs[shaderAttributeName])
        );
      }
      return result;
    }
    /** Generate WebGPU-style buffer layout descriptor from this attribute */
    getBufferLayout(modelInfo) {
      this.state.layoutChanged = false;
      const shaderAttributeDefs = this.settings.shaderAttributes;
      const result = super._getBufferLayout();
      const { stepMode } = this.settings;
      if (stepMode === "dynamic") {
        result.stepMode = modelInfo ? modelInfo.isInstanced ? "instance" : "vertex" : "instance";
      } else {
        result.stepMode = stepMode ?? "vertex";
      }
      if (!shaderAttributeDefs) {
        return result;
      }
      for (const shaderAttributeName in shaderAttributeDefs) {
        const map6 = super._getBufferLayout(
          shaderAttributeName,
          shaderAttributeDefs[shaderAttributeName]
        );
        result.attributes.push(...map6.attributes);
      }
      return result;
    }
    /* eslint-disable max-depth, max-statements */
    _autoUpdater(attribute, {
      data,
      startRow,
      endRow,
      props,
      numInstances
    }) {
      if (attribute.constant) {
        if (this.context.device.type !== "webgpu") {
          return;
        }
      }
      const { settings, state, value, size, startIndices } = attribute;
      const { accessor, transform: transform2 } = settings;
      let accessorFunc = state.binaryAccessor || // @ts-ignore
      (typeof accessor === "function" ? accessor : props[accessor]);
      if (typeof accessorFunc !== "function" && typeof accessor === "string") {
        accessorFunc = () => props[accessor];
      }
      assert8(typeof accessorFunc === "function", `accessor "${accessor}" is not a function`);
      let i7 = attribute.getVertexOffset(startRow);
      const { iterable, objectInfo } = createIterable(data, startRow, endRow);
      for (const object of iterable) {
        objectInfo.index++;
        let objectValue = accessorFunc(object, objectInfo);
        if (transform2) {
          objectValue = transform2.call(this, objectValue);
        }
        if (startIndices) {
          const numVertices = (objectInfo.index < startIndices.length - 1 ? startIndices[objectInfo.index + 1] : numInstances) - startIndices[objectInfo.index];
          if (objectValue && Array.isArray(objectValue[0])) {
            let startIndex = i7;
            for (const item of objectValue) {
              attribute._normalizeValue(item, value, startIndex);
              startIndex += size;
            }
          } else if (objectValue && objectValue.length > size) {
            value.set(objectValue, i7);
          } else {
            attribute._normalizeValue(objectValue, objectInfo.target, 0);
            fillArray({
              target: value,
              source: objectInfo.target,
              start: i7,
              count: numVertices
            });
          }
          i7 += numVertices * size;
        } else {
          attribute._normalizeValue(objectValue, value, i7);
          i7 += size;
        }
      }
    }
    /* eslint-enable max-depth, max-statements */
    // Validate deck.gl level fields
    _validateAttributeUpdaters() {
      const { settings } = this;
      const hasUpdater = settings.noAlloc || typeof settings.update === "function";
      if (!hasUpdater) {
        throw new Error(`Attribute ${this.id} missing update or accessor`);
      }
    }
    // check that the first few elements of the attribute are reasonable
    /* eslint-disable no-fallthrough */
    _checkAttributeArray() {
      const { value } = this;
      const limit = Math.min(4, this.size);
      if (value && value.length >= limit) {
        let valid = true;
        switch (limit) {
          case 4:
            valid = valid && Number.isFinite(value[3]);
          case 3:
            valid = valid && Number.isFinite(value[2]);
          case 2:
            valid = valid && Number.isFinite(value[1]);
          case 1:
            valid = valid && Number.isFinite(value[0]);
            break;
          default:
            valid = false;
        }
        if (!valid) {
          throw new Error(`Illegal attribute generated for ${this.id}`);
        }
      }
    }
    /* eslint-enable no-fallthrough */
  };

  // ../core/src/transitions/gpu-interpolation-transition.ts
  init_dist5();

  // ../core/src/utils/array-utils.ts
  function padArrayChunk(options) {
    const { source: source4, target: target2, start = 0, size, getData } = options;
    const end = options.end || target2.length;
    const sourceLength = source4.length;
    const targetLength = end - start;
    if (sourceLength > targetLength) {
      target2.set(source4.subarray(0, targetLength), start);
      return;
    }
    target2.set(source4, start);
    if (!getData) {
      return;
    }
    let i7 = sourceLength;
    while (i7 < targetLength) {
      const datum = getData(i7, source4);
      for (let j4 = 0; j4 < size; j4++) {
        target2[start + i7] = datum[j4] || 0;
        i7++;
      }
    }
  }
  function padArray({
    source: source4,
    target: target2,
    size,
    getData,
    sourceStartIndices,
    targetStartIndices
  }) {
    if (!sourceStartIndices || !targetStartIndices) {
      padArrayChunk({
        source: source4,
        target: target2,
        size,
        getData
      });
      return target2;
    }
    let sourceIndex = 0;
    let targetIndex = 0;
    const getChunkData = getData && ((i7, chunk) => getData(i7 + targetIndex, chunk));
    const n4 = Math.min(sourceStartIndices.length, targetStartIndices.length);
    for (let i7 = 1; i7 < n4; i7++) {
      const nextSourceIndex = sourceStartIndices[i7] * size;
      const nextTargetIndex = targetStartIndices[i7] * size;
      padArrayChunk({
        source: source4.subarray(sourceIndex, nextSourceIndex),
        target: target2,
        start: targetIndex,
        end: nextTargetIndex,
        size,
        getData: getChunkData
      });
      sourceIndex = nextSourceIndex;
      targetIndex = nextTargetIndex;
    }
    if (targetIndex < target2.length) {
      padArrayChunk({
        // @ts-ignore
        source: [],
        target: target2,
        start: targetIndex,
        size,
        getData: getChunkData
      });
    }
    return target2;
  }

  // ../core/src/transitions/gpu-transition-utils.ts
  init_dist5();
  function cloneAttribute(attribute) {
    const { device, settings, value } = attribute;
    const newAttribute = new Attribute(device, settings);
    newAttribute.setData({
      value: value instanceof Float64Array ? new Float64Array(0) : new Float32Array(0),
      normalized: settings.normalized
    });
    return newAttribute;
  }
  function getAttributeTypeFromSize(size) {
    switch (size) {
      case 1:
        return "float";
      case 2:
        return "vec2";
      case 3:
        return "vec3";
      case 4:
        return "vec4";
      default:
        throw new Error(`No defined attribute type for size "${size}"`);
    }
  }
  function getFloat32VertexFormat(size) {
    switch (size) {
      case 1:
        return "float32";
      case 2:
        return "float32x2";
      case 3:
        return "float32x3";
      case 4:
        return "float32x4";
      default:
        throw new Error("invalid type size");
    }
  }
  function cycleBuffers(buffers) {
    buffers.push(buffers.shift());
  }
  function getAttributeBufferLength(attribute, numInstances) {
    const { doublePrecision, settings, value, size } = attribute;
    const multiplier = doublePrecision && value instanceof Float64Array ? 2 : 1;
    let maxVertexOffset = 0;
    const { shaderAttributes } = attribute.settings;
    if (shaderAttributes) {
      for (const shaderAttribute of Object.values(shaderAttributes)) {
        maxVertexOffset = Math.max(maxVertexOffset, shaderAttribute.vertexOffset ?? 0);
      }
    }
    return (settings.noAlloc ? value.length : (numInstances + maxVertexOffset) * size) * multiplier;
  }
  function matchBuffer({
    device,
    source: source4,
    target: target2
  }) {
    if (!target2 || target2.byteLength < source4.byteLength) {
      target2?.destroy();
      target2 = device.createBuffer({
        byteLength: source4.byteLength,
        usage: source4.usage
      });
    }
    return target2;
  }
  function padBuffer({
    device,
    buffer,
    attribute,
    fromLength,
    toLength,
    fromStartIndices,
    getData = (x4) => x4
  }) {
    const precisionMultiplier = attribute.doublePrecision && attribute.value instanceof Float64Array ? 2 : 1;
    const size = attribute.size * precisionMultiplier;
    const byteOffset = attribute.byteOffset;
    const targetByteOffset = attribute.settings.bytesPerElement < 4 ? byteOffset / attribute.settings.bytesPerElement * 4 : byteOffset;
    const toStartIndices = attribute.startIndices;
    const hasStartIndices = fromStartIndices && toStartIndices;
    const isConstant = attribute.isConstant;
    if (!hasStartIndices && buffer && fromLength >= toLength) {
      return buffer;
    }
    const ArrayType = attribute.value instanceof Float64Array ? Float32Array : attribute.value.constructor;
    const toData = isConstant ? attribute.value : (
      // TODO(v9.1): Avoid non-portable synchronous reads.
      new ArrayType(
        attribute.getBuffer().readSyncWebGL(byteOffset, toLength * ArrayType.BYTES_PER_ELEMENT).buffer
      )
    );
    if (attribute.settings.normalized && !isConstant) {
      const getter = getData;
      getData = (value, chunk) => attribute.normalizeConstant(getter(value, chunk));
    }
    const getMissingData = isConstant ? (i7, chunk) => getData(toData, chunk) : (i7, chunk) => getData(toData.subarray(i7 + byteOffset, i7 + byteOffset + size), chunk);
    const source4 = buffer ? new Float32Array(buffer.readSyncWebGL(targetByteOffset, fromLength * 4).buffer) : new Float32Array(0);
    const target2 = new Float32Array(toLength);
    padArray({
      source: source4,
      target: target2,
      sourceStartIndices: fromStartIndices,
      targetStartIndices: toStartIndices,
      size,
      getData: getMissingData
    });
    if (!buffer || buffer.byteLength < target2.byteLength + targetByteOffset) {
      buffer?.destroy();
      buffer = device.createBuffer({
        byteLength: target2.byteLength + targetByteOffset,
        usage: GLEnum.DYNAMIC_COPY
      });
    }
    buffer.write(target2, targetByteOffset);
    return buffer;
  }

  // ../core/src/transitions/gpu-transition.ts
  var GPUTransitionBase = class {
    constructor({
      device,
      attribute,
      timeline
    }) {
      this.buffers = [];
      /** The vertex count of the last buffer.
       * Buffer may be larger than the actual length we want to use
       * because we only reallocate buffers when they grow, not when they shrink,
       * due to performance costs */
      this.currentLength = 0;
      this.device = device;
      this.transition = new Transition(timeline);
      this.attribute = attribute;
      this.attributeInTransition = cloneAttribute(attribute);
      this.currentStartIndices = attribute.startIndices;
    }
    get inProgress() {
      return this.transition.inProgress;
    }
    start(transitionSettings, numInstances, duration = Infinity) {
      this.settings = transitionSettings;
      this.currentStartIndices = this.attribute.startIndices;
      this.currentLength = getAttributeBufferLength(this.attribute, numInstances);
      this.transition.start({ ...transitionSettings, duration });
    }
    update() {
      const updated = this.transition.update();
      if (updated) {
        this.onUpdate();
      }
      return updated;
    }
    setBuffer(buffer) {
      this.attributeInTransition.setData({
        buffer,
        normalized: this.attribute.settings.normalized,
        // Retain placeholder value to generate correct shader layout
        value: this.attributeInTransition.value
      });
    }
    cancel() {
      this.transition.cancel();
    }
    delete() {
      this.cancel();
      for (const buffer of this.buffers) {
        buffer.destroy();
      }
      this.buffers.length = 0;
    }
  };

  // ../core/src/transitions/gpu-interpolation-transition.ts
  var GPUInterpolationTransition = class extends GPUTransitionBase {
    constructor({
      device,
      attribute,
      timeline
    }) {
      super({ device, attribute, timeline });
      this.type = "interpolation";
      this.transform = getTransform(device, attribute);
    }
    start(transitionSettings, numInstances) {
      const prevLength = this.currentLength;
      const prevStartIndices = this.currentStartIndices;
      super.start(transitionSettings, numInstances, transitionSettings.duration);
      if (transitionSettings.duration <= 0) {
        this.transition.cancel();
        return;
      }
      const { buffers, attribute } = this;
      cycleBuffers(buffers);
      buffers[0] = padBuffer({
        device: this.device,
        buffer: buffers[0],
        attribute,
        fromLength: prevLength,
        toLength: this.currentLength,
        fromStartIndices: prevStartIndices,
        getData: transitionSettings.enter
      });
      buffers[1] = matchBuffer({
        device: this.device,
        source: buffers[0],
        target: buffers[1]
      });
      this.setBuffer(buffers[1]);
      const { transform: transform2 } = this;
      const model = transform2.model;
      let vertexCount = Math.floor(this.currentLength / attribute.size);
      if (useFp64(attribute)) {
        vertexCount /= 2;
      }
      model.setVertexCount(vertexCount);
      if (attribute.isConstant) {
        model.setAttributes({ aFrom: buffers[0] });
        model.setConstantAttributes({ aTo: attribute.value });
      } else {
        model.setAttributes({
          aFrom: buffers[0],
          aTo: attribute.getBuffer()
        });
      }
      transform2.transformFeedback.setBuffers({ vCurrent: buffers[1] });
    }
    onUpdate() {
      const { duration, easing } = this.settings;
      const { time } = this.transition;
      let t5 = time / duration;
      if (easing) {
        t5 = easing(t5);
      }
      const { model } = this.transform;
      const interpolationProps = { time: t5 };
      model.shaderInputs.setProps({ interpolation: interpolationProps });
      this.transform.run({ discard: true });
    }
    delete() {
      super.delete();
      this.transform.destroy();
    }
  };
  var uniformBlock5 = `uniform interpolationUniforms {
  float time;
} interpolation;
`;
  var interpolationUniforms = {
    name: "interpolation",
    vs: uniformBlock5,
    uniformTypes: {
      time: "f32"
    }
  };
  var vs6 = `#version 300 es
#define SHADER_NAME interpolation-transition-vertex-shader

in ATTRIBUTE_TYPE aFrom;
in ATTRIBUTE_TYPE aTo;
out ATTRIBUTE_TYPE vCurrent;

void main(void) {
  vCurrent = mix(aFrom, aTo, interpolation.time);
  gl_Position = vec4(0.0);
}
`;
  var vs64 = `#version 300 es
#define SHADER_NAME interpolation-transition-vertex-shader

in ATTRIBUTE_TYPE aFrom;
in ATTRIBUTE_TYPE aFrom64Low;
in ATTRIBUTE_TYPE aTo;
in ATTRIBUTE_TYPE aTo64Low;
out ATTRIBUTE_TYPE vCurrent;
out ATTRIBUTE_TYPE vCurrent64Low;

vec2 mix_fp64(vec2 a, vec2 b, float x) {
  vec2 range = sub_fp64(b, a);
  return sum_fp64(a, mul_fp64(range, vec2(x, 0.0)));
}

void main(void) {
  for (int i=0; i<ATTRIBUTE_SIZE; i++) {
    vec2 value = mix_fp64(vec2(aFrom[i], aFrom64Low[i]), vec2(aTo[i], aTo64Low[i]), interpolation.time);
    vCurrent[i] = value.x;
    vCurrent64Low[i] = value.y;
  }
  gl_Position = vec4(0.0);
}
`;
  function useFp64(attribute) {
    return attribute.doublePrecision && attribute.value instanceof Float64Array;
  }
  function getTransform(device, attribute) {
    const attributeSize = attribute.size;
    const attributeType = getAttributeTypeFromSize(attributeSize);
    const inputFormat = getFloat32VertexFormat(attributeSize);
    const bufferLayout = attribute.getBufferLayout();
    if (useFp64(attribute)) {
      return new BufferTransform(device, {
        vs: vs64,
        bufferLayout: [
          {
            name: "aFrom",
            byteStride: 8 * attributeSize,
            attributes: [
              { attribute: "aFrom", format: inputFormat, byteOffset: 0 },
              { attribute: "aFrom64Low", format: inputFormat, byteOffset: 4 * attributeSize }
            ]
          },
          {
            name: "aTo",
            byteStride: 8 * attributeSize,
            attributes: [
              { attribute: "aTo", format: inputFormat, byteOffset: 0 },
              { attribute: "aTo64Low", format: inputFormat, byteOffset: 4 * attributeSize }
            ]
          }
        ],
        // @ts-expect-error fp64 module only sets ONE uniform via defaultUniforms
        modules: [fp64arithmetic, interpolationUniforms],
        defines: {
          // @ts-expect-error TODO fix luma type
          ATTRIBUTE_TYPE: attributeType,
          // @ts-expect-error TODO fix luma type
          ATTRIBUTE_SIZE: attributeSize
        },
        // Default uniforms are not set without this
        moduleSettings: {},
        varyings: ["vCurrent", "vCurrent64Low"],
        bufferMode: GLEnum.INTERLEAVED_ATTRIBS,
        disableWarnings: true
      });
    }
    return new BufferTransform(device, {
      vs: vs6,
      bufferLayout: [
        { name: "aFrom", format: inputFormat },
        { name: "aTo", format: bufferLayout.attributes[0].format }
      ],
      modules: [interpolationUniforms],
      defines: {
        // @ts-expect-error TODO fix luma type
        ATTRIBUTE_TYPE: attributeType
      },
      varyings: ["vCurrent"],
      // TODO investigate why this is needed
      disableWarnings: true
    });
  }

  // ../core/src/transitions/gpu-spring-transition.ts
  var GPUSpringTransition = class extends GPUTransitionBase {
    constructor({
      device,
      attribute,
      timeline
    }) {
      super({ device, attribute, timeline });
      this.type = "spring";
      this.texture = getTexture(device);
      this.framebuffer = getFramebuffer3(device, this.texture);
      this.transform = getTransform2(device, attribute);
    }
    start(transitionSettings, numInstances) {
      const prevLength = this.currentLength;
      const prevStartIndices = this.currentStartIndices;
      super.start(transitionSettings, numInstances);
      const { buffers, attribute } = this;
      for (let i7 = 0; i7 < 2; i7++) {
        buffers[i7] = padBuffer({
          device: this.device,
          buffer: buffers[i7],
          attribute,
          fromLength: prevLength,
          toLength: this.currentLength,
          fromStartIndices: prevStartIndices,
          getData: transitionSettings.enter
        });
      }
      buffers[2] = matchBuffer({
        device: this.device,
        source: buffers[0],
        target: buffers[2]
      });
      this.setBuffer(buffers[1]);
      const { model } = this.transform;
      model.setVertexCount(Math.floor(this.currentLength / attribute.size));
      if (attribute.isConstant) {
        model.setConstantAttributes({ aTo: attribute.value });
      } else {
        model.setAttributes({ aTo: attribute.getBuffer() });
      }
    }
    onUpdate() {
      const { buffers, transform: transform2, framebuffer, transition } = this;
      const settings = this.settings;
      transform2.model.setAttributes({
        aPrev: buffers[0],
        aCur: buffers[1]
      });
      transform2.transformFeedback.setBuffers({ vNext: buffers[2] });
      const springProps = {
        stiffness: settings.stiffness,
        damping: settings.damping
      };
      transform2.model.shaderInputs.setProps({ spring: springProps });
      transform2.run({
        framebuffer,
        discard: false,
        parameters: { viewport: [0, 0, 1, 1] },
        clearColor: [0, 0, 0, 0]
      });
      cycleBuffers(buffers);
      this.setBuffer(buffers[1]);
      const isTransitioning = this.device.readPixelsToArrayWebGL(framebuffer)[0] > 0;
      if (!isTransitioning) {
        transition.end();
      }
    }
    delete() {
      super.delete();
      this.transform.destroy();
      this.texture.destroy();
      this.framebuffer.destroy();
    }
  };
  var uniformBlock6 = `uniform springUniforms {
  float damping;
  float stiffness;
} spring;
`;
  var springUniforms = {
    name: "spring",
    vs: uniformBlock6,
    uniformTypes: {
      damping: "f32",
      stiffness: "f32"
    }
  };
  var vs7 = `#version 300 es
#define SHADER_NAME spring-transition-vertex-shader

#define EPSILON 0.00001

in ATTRIBUTE_TYPE aPrev;
in ATTRIBUTE_TYPE aCur;
in ATTRIBUTE_TYPE aTo;
out ATTRIBUTE_TYPE vNext;
out float vIsTransitioningFlag;

ATTRIBUTE_TYPE getNextValue(ATTRIBUTE_TYPE cur, ATTRIBUTE_TYPE prev, ATTRIBUTE_TYPE dest) {
  ATTRIBUTE_TYPE velocity = cur - prev;
  ATTRIBUTE_TYPE delta = dest - cur;
  ATTRIBUTE_TYPE force = delta * spring.stiffness;
  ATTRIBUTE_TYPE resistance = velocity * spring.damping;
  return force - resistance + velocity + cur;
}

void main(void) {
  bool isTransitioning = length(aCur - aPrev) > EPSILON || length(aTo - aCur) > EPSILON;
  vIsTransitioningFlag = isTransitioning ? 1.0 : 0.0;

  vNext = getNextValue(aCur, aPrev, aTo);
  gl_Position = vec4(0, 0, 0, 1);
  gl_PointSize = 100.0;
}
`;
  var fs5 = `#version 300 es
#define SHADER_NAME spring-transition-is-transitioning-fragment-shader

in float vIsTransitioningFlag;

out vec4 fragColor;

void main(void) {
  if (vIsTransitioningFlag == 0.0) {
    discard;
  }
  fragColor = vec4(1.0);
}`;
  function getTransform2(device, attribute) {
    const attributeType = getAttributeTypeFromSize(attribute.size);
    const format = getFloat32VertexFormat(attribute.size);
    return new BufferTransform(device, {
      vs: vs7,
      fs: fs5,
      bufferLayout: [
        { name: "aPrev", format },
        { name: "aCur", format },
        { name: "aTo", format: attribute.getBufferLayout().attributes[0].format }
      ],
      varyings: ["vNext"],
      modules: [springUniforms],
      // @ts-expect-error TODO fix luma type
      defines: { ATTRIBUTE_TYPE: attributeType },
      parameters: {
        depthCompare: "always",
        blendColorOperation: "max",
        blendColorSrcFactor: "one",
        blendColorDstFactor: "one",
        blendAlphaOperation: "max",
        blendAlphaSrcFactor: "one",
        blendAlphaDstFactor: "one"
      }
    });
  }
  function getTexture(device) {
    return device.createTexture({
      data: new Uint8Array(4),
      format: "rgba8unorm",
      width: 1,
      height: 1
    });
  }
  function getFramebuffer3(device, texture) {
    return device.createFramebuffer({
      id: "spring-transition-is-transitioning-framebuffer",
      width: 1,
      height: 1,
      colorAttachments: [texture]
    });
  }

  // ../core/src/lib/attribute/attribute-transition-manager.ts
  var TRANSITION_TYPES = {
    interpolation: GPUInterpolationTransition,
    spring: GPUSpringTransition
  };
  var AttributeTransitionManager = class {
    constructor(device, {
      id,
      timeline
    }) {
      if (!device)
        throw new Error("AttributeTransitionManager is constructed without device");
      this.id = id;
      this.device = device;
      this.timeline = timeline;
      this.transitions = {};
      this.needsRedraw = false;
      this.numInstances = 1;
    }
    finalize() {
      for (const attributeName in this.transitions) {
        this._removeTransition(attributeName);
      }
    }
    /* Public methods */
    // Called when attribute manager updates
    // Check the latest attributes for updates.
    update({
      attributes,
      transitions,
      numInstances
    }) {
      this.numInstances = numInstances || 1;
      for (const attributeName in attributes) {
        const attribute = attributes[attributeName];
        const settings = attribute.getTransitionSetting(transitions);
        if (!settings)
          continue;
        this._updateAttribute(attributeName, attribute, settings);
      }
      for (const attributeName in this.transitions) {
        const attribute = attributes[attributeName];
        if (!attribute || !attribute.getTransitionSetting(transitions)) {
          this._removeTransition(attributeName);
        }
      }
    }
    // Returns `true` if attribute is transition-enabled
    hasAttribute(attributeName) {
      const transition = this.transitions[attributeName];
      return transition && transition.inProgress;
    }
    // Get all the animated attributes
    getAttributes() {
      const animatedAttributes = {};
      for (const attributeName in this.transitions) {
        const transition = this.transitions[attributeName];
        if (transition.inProgress) {
          animatedAttributes[attributeName] = transition.attributeInTransition;
        }
      }
      return animatedAttributes;
    }
    /* eslint-disable max-statements */
    // Called every render cycle, run transform feedback
    // Returns `true` if anything changes
    run() {
      if (this.numInstances === 0) {
        return false;
      }
      for (const attributeName in this.transitions) {
        const updated = this.transitions[attributeName].update();
        if (updated) {
          this.needsRedraw = true;
        }
      }
      const needsRedraw = this.needsRedraw;
      this.needsRedraw = false;
      return needsRedraw;
    }
    /* eslint-enable max-statements */
    /* Private methods */
    _removeTransition(attributeName) {
      this.transitions[attributeName].delete();
      delete this.transitions[attributeName];
    }
    // Check an attributes for updates
    // Returns a transition object if a new transition is triggered.
    _updateAttribute(attributeName, attribute, settings) {
      const transition = this.transitions[attributeName];
      let isNew = !transition || transition.type !== settings.type;
      if (isNew) {
        if (transition) {
          this._removeTransition(attributeName);
        }
        const TransitionType = TRANSITION_TYPES[settings.type];
        if (TransitionType) {
          this.transitions[attributeName] = new TransitionType({
            attribute,
            timeline: this.timeline,
            device: this.device
          });
        } else {
          log_default.error(`unsupported transition type '${settings.type}'`)();
          isNew = false;
        }
      }
      if (isNew || attribute.needsRedraw()) {
        this.needsRedraw = true;
        this.transitions[attributeName].start(settings, this.numInstances);
      }
    }
  };

  // ../core/src/lib/attribute/attribute-manager.ts
  var TRACE_INVALIDATE = "attributeManager.invalidate";
  var TRACE_UPDATE_START = "attributeManager.updateStart";
  var TRACE_UPDATE_END = "attributeManager.updateEnd";
  var TRACE_ATTRIBUTE_UPDATE_START = "attribute.updateStart";
  var TRACE_ATTRIBUTE_ALLOCATE = "attribute.allocate";
  var TRACE_ATTRIBUTE_UPDATE_END = "attribute.updateEnd";
  var AttributeManager = class {
    constructor(device, {
      id = "attribute-manager",
      stats: stats2,
      timeline
    } = {}) {
      this.mergeBoundsMemoized = memoize(mergeBounds);
      this.id = id;
      this.device = device;
      this.attributes = {};
      this.updateTriggers = {};
      this.needsRedraw = true;
      this.userData = {};
      this.stats = stats2;
      this.attributeTransitionManager = new AttributeTransitionManager(device, {
        id: `${id}-transitions`,
        timeline
      });
      Object.seal(this);
    }
    finalize() {
      for (const attributeName in this.attributes) {
        this.attributes[attributeName].delete();
      }
      this.attributeTransitionManager.finalize();
    }
    // Returns the redraw flag, optionally clearing it.
    // Redraw flag will be set if any attributes attributes changed since
    // flag was last cleared.
    //
    // @param {String} [clearRedrawFlags=false] - whether to clear the flag
    // @return {false|String} - reason a redraw is needed.
    getNeedsRedraw(opts = { clearRedrawFlags: false }) {
      const redraw = this.needsRedraw;
      this.needsRedraw = this.needsRedraw && !opts.clearRedrawFlags;
      return redraw && this.id;
    }
    // Sets the redraw flag.
    // @param {Boolean} redraw=true
    setNeedsRedraw() {
      this.needsRedraw = true;
    }
    // Adds attributes
    add(attributes) {
      this._add(attributes);
    }
    // Adds attributes
    addInstanced(attributes) {
      this._add(attributes, { stepMode: "instance" });
    }
    /**
     * Removes attributes
     * Takes an array of attribute names and delete them from
     * the attribute map if they exists
     *
     * @example
     * attributeManager.remove(['position']);
     *
     * @param {Object} attributeNameArray - attribute name array (see above)
     */
    remove(attributeNameArray) {
      for (const name13 of attributeNameArray) {
        if (this.attributes[name13] !== void 0) {
          this.attributes[name13].delete();
          delete this.attributes[name13];
        }
      }
    }
    // Marks an attribute for update
    invalidate(triggerName, dataRange) {
      const invalidatedAttributes = this._invalidateTrigger(triggerName, dataRange);
      debug(TRACE_INVALIDATE, this, triggerName, invalidatedAttributes);
    }
    invalidateAll(dataRange) {
      for (const attributeName in this.attributes) {
        this.attributes[attributeName].setNeedsUpdate(attributeName, dataRange);
      }
      debug(TRACE_INVALIDATE, this, "all");
    }
    // Ensure all attribute buffers are updated from props or data.
    // eslint-disable-next-line complexity
    update({
      data,
      numInstances,
      startIndices = null,
      transitions,
      props = {},
      buffers = {},
      context = {}
    }) {
      let updated = false;
      debug(TRACE_UPDATE_START, this);
      if (this.stats) {
        this.stats.get("Update Attributes").timeStart();
      }
      for (const attributeName in this.attributes) {
        const attribute = this.attributes[attributeName];
        const accessorName = attribute.settings.accessor;
        attribute.startIndices = startIndices;
        attribute.numInstances = numInstances;
        if (props[attributeName]) {
          log_default.removed(`props.${attributeName}`, `data.attributes.${attributeName}`)();
        }
        if (attribute.setExternalBuffer(buffers[attributeName])) {
        } else if (attribute.setBinaryValue(
          typeof accessorName === "string" ? buffers[accessorName] : void 0,
          data.startIndices
        )) {
        } else if (typeof accessorName === "string" && !buffers[accessorName] && attribute.setConstantValue(context, props[accessorName])) {
        } else if (attribute.needsUpdate()) {
          updated = true;
          this._updateAttribute({
            attribute,
            numInstances,
            data,
            props,
            context
          });
        }
        this.needsRedraw = this.needsRedraw || attribute.needsRedraw();
      }
      if (updated) {
        debug(TRACE_UPDATE_END, this, numInstances);
      }
      if (this.stats) {
        this.stats.get("Update Attributes").timeEnd();
      }
      this.attributeTransitionManager.update({
        attributes: this.attributes,
        numInstances,
        transitions
      });
    }
    // Update attribute transition to the current timestamp
    // Returns `true` if any transition is in progress
    updateTransition() {
      const { attributeTransitionManager } = this;
      const transitionUpdated = attributeTransitionManager.run();
      this.needsRedraw = this.needsRedraw || transitionUpdated;
      return transitionUpdated;
    }
    /**
     * Returns all attribute descriptors
     * Note: Format matches luma.gl Model/Program.setAttributes()
     * @return {Object} attributes - descriptors
     */
    getAttributes() {
      return { ...this.attributes, ...this.attributeTransitionManager.getAttributes() };
    }
    /**
     * Computes the spatial bounds of a given set of attributes
     */
    getBounds(attributeNames) {
      const bounds = attributeNames.map((attributeName) => this.attributes[attributeName]?.getBounds());
      return this.mergeBoundsMemoized(bounds);
    }
    /**
     * Returns changed attribute descriptors
     * This indicates which WebGLBuffers need to be updated
     * @return {Object} attributes - descriptors
     */
    getChangedAttributes(opts = { clearChangedFlags: false }) {
      const { attributes, attributeTransitionManager } = this;
      const changedAttributes = { ...attributeTransitionManager.getAttributes() };
      for (const attributeName in attributes) {
        const attribute = attributes[attributeName];
        if (attribute.needsRedraw(opts) && !attributeTransitionManager.hasAttribute(attributeName)) {
          changedAttributes[attributeName] = attribute;
        }
      }
      return changedAttributes;
    }
    /** Generate WebGPU-style buffer layout descriptors from all attributes */
    getBufferLayouts(modelInfo) {
      return Object.values(this.getAttributes()).map(
        (attribute) => attribute.getBufferLayout(modelInfo)
      );
    }
    // PRIVATE METHODS
    /** Register new attributes */
    _add(attributes, overrideOptions) {
      for (const attributeName in attributes) {
        const attribute = attributes[attributeName];
        const props = {
          ...attribute,
          id: attributeName,
          size: attribute.isIndexed && 1 || attribute.size || 1,
          ...overrideOptions
        };
        this.attributes[attributeName] = new Attribute(this.device, props);
      }
      this._mapUpdateTriggersToAttributes();
    }
    // build updateTrigger name to attribute name mapping
    _mapUpdateTriggersToAttributes() {
      const triggers = {};
      for (const attributeName in this.attributes) {
        const attribute = this.attributes[attributeName];
        attribute.getUpdateTriggers().forEach((triggerName) => {
          if (!triggers[triggerName]) {
            triggers[triggerName] = [];
          }
          triggers[triggerName].push(attributeName);
        });
      }
      this.updateTriggers = triggers;
    }
    _invalidateTrigger(triggerName, dataRange) {
      const { attributes, updateTriggers } = this;
      const invalidatedAttributes = updateTriggers[triggerName];
      if (invalidatedAttributes) {
        invalidatedAttributes.forEach((name13) => {
          const attribute = attributes[name13];
          if (attribute) {
            attribute.setNeedsUpdate(attribute.id, dataRange);
          }
        });
      }
      return invalidatedAttributes;
    }
    _updateAttribute(opts) {
      const { attribute, numInstances } = opts;
      debug(TRACE_ATTRIBUTE_UPDATE_START, attribute);
      if (attribute.constant) {
        attribute.setConstantValue(opts.context, attribute.value);
        return;
      }
      if (attribute.allocate(numInstances)) {
        debug(TRACE_ATTRIBUTE_ALLOCATE, attribute, numInstances);
      }
      const updated = attribute.updateBuffer(opts);
      if (updated) {
        this.needsRedraw = true;
        debug(TRACE_ATTRIBUTE_UPDATE_END, attribute, numInstances);
      }
    }
  };

  // ../core/src/lib/layer.ts
  init_dist4();
  init_dist6();

  // ../core/src/transitions/cpu-interpolation-transition.ts
  var CPUInterpolationTransition = class extends Transition {
    get value() {
      return this._value;
    }
    _onUpdate() {
      const {
        time,
        settings: { fromValue: fromValue2, toValue, duration, easing }
      } = this;
      const t5 = easing(time / duration);
      this._value = lerp(fromValue2, toValue, t5);
    }
  };

  // ../core/src/transitions/cpu-spring-transition.ts
  var EPSILON23 = 1e-5;
  function updateSpringElement(prev, cur, dest, damping, stiffness) {
    const velocity = cur - prev;
    const delta = dest - cur;
    const spring = delta * stiffness;
    const damper = -velocity * damping;
    return spring + damper + velocity + cur;
  }
  function updateSpring(prev, cur, dest, damping, stiffness) {
    if (Array.isArray(dest)) {
      const next = [];
      for (let i7 = 0; i7 < dest.length; i7++) {
        next[i7] = updateSpringElement(prev[i7], cur[i7], dest[i7], damping, stiffness);
      }
      return next;
    }
    return updateSpringElement(prev, cur, dest, damping, stiffness);
  }
  function distance4(value1, value2) {
    if (Array.isArray(value1)) {
      let distanceSquare = 0;
      for (let i7 = 0; i7 < value1.length; i7++) {
        const d5 = value1[i7] - value2[i7];
        distanceSquare += d5 * d5;
      }
      return Math.sqrt(distanceSquare);
    }
    return Math.abs(value1 - value2);
  }
  var CPUSpringTransition = class extends Transition {
    get value() {
      return this._currValue;
    }
    _onUpdate() {
      const { fromValue: fromValue2, toValue, damping, stiffness } = this.settings;
      const { _prevValue = fromValue2, _currValue = fromValue2 } = this;
      let nextValue = updateSpring(_prevValue, _currValue, toValue, damping, stiffness);
      const delta = distance4(nextValue, toValue);
      const velocity = distance4(nextValue, _currValue);
      if (delta < EPSILON23 && velocity < EPSILON23) {
        nextValue = toValue;
        this.end();
      }
      this._prevValue = _currValue;
      this._currValue = nextValue;
    }
  };

  // ../core/src/lib/uniform-transition-manager.ts
  var TRANSITION_TYPES2 = {
    interpolation: CPUInterpolationTransition,
    spring: CPUSpringTransition
  };
  var UniformTransitionManager = class {
    constructor(timeline) {
      this.transitions = /* @__PURE__ */ new Map();
      this.timeline = timeline;
    }
    get active() {
      return this.transitions.size > 0;
    }
    add(key, fromValue2, toValue, settings) {
      const { transitions } = this;
      if (transitions.has(key)) {
        const transition2 = transitions.get(key);
        const { value = transition2.settings.fromValue } = transition2;
        fromValue2 = value;
        this.remove(key);
      }
      settings = normalizeTransitionSettings(settings);
      if (!settings) {
        return;
      }
      const TransitionType = TRANSITION_TYPES2[settings.type];
      if (!TransitionType) {
        log_default.error(`unsupported transition type '${settings.type}'`)();
        return;
      }
      const transition = new TransitionType(this.timeline);
      transition.start({
        ...settings,
        fromValue: fromValue2,
        toValue
      });
      transitions.set(key, transition);
    }
    remove(key) {
      const { transitions } = this;
      if (transitions.has(key)) {
        transitions.get(key).cancel();
        transitions.delete(key);
      }
    }
    update() {
      const propsInTransition = {};
      for (const [key, transition] of this.transitions) {
        transition.update();
        propsInTransition[key] = transition.value;
        if (!transition.inProgress) {
          this.remove(key);
        }
      }
      return propsInTransition;
    }
    clear() {
      for (const key of this.transitions.keys()) {
        this.remove(key);
      }
    }
  };

  // ../core/src/lifecycle/props.ts
  function validateProps(props) {
    const propTypes = props[PROP_TYPES_SYMBOL];
    for (const propName in propTypes) {
      const propType = propTypes[propName];
      const { validate: validate2 } = propType;
      if (validate2 && !validate2(props[propName], propType)) {
        throw new Error(`Invalid prop ${propName}: ${props[propName]}`);
      }
    }
  }
  function diffProps(props, oldProps) {
    const propsChangedReason = compareProps({
      newProps: props,
      oldProps,
      propTypes: props[PROP_TYPES_SYMBOL],
      ignoreProps: { data: null, updateTriggers: null, extensions: null, transitions: null }
    });
    const dataChangedReason = diffDataProps(props, oldProps);
    let updateTriggersChangedReason = false;
    if (!dataChangedReason) {
      updateTriggersChangedReason = diffUpdateTriggers(props, oldProps);
    }
    return {
      dataChanged: dataChangedReason,
      propsChanged: propsChangedReason,
      updateTriggersChanged: updateTriggersChangedReason,
      extensionsChanged: diffExtensions(props, oldProps),
      transitionsChanged: diffTransitions(props, oldProps)
    };
  }
  function diffTransitions(props, oldProps) {
    if (!props.transitions) {
      return false;
    }
    const result = {};
    const propTypes = props[PROP_TYPES_SYMBOL];
    let changed = false;
    for (const key in props.transitions) {
      const propType = propTypes[key];
      const type = propType && propType.type;
      const isTransitionable = type === "number" || type === "color" || type === "array";
      if (isTransitionable && comparePropValues(props[key], oldProps[key], propType)) {
        result[key] = true;
        changed = true;
      }
    }
    return changed ? result : false;
  }
  function compareProps({
    newProps,
    oldProps,
    ignoreProps = {},
    propTypes = {},
    triggerName = "props"
  }) {
    if (oldProps === newProps) {
      return false;
    }
    if (typeof newProps !== "object" || newProps === null) {
      return `${triggerName} changed shallowly`;
    }
    if (typeof oldProps !== "object" || oldProps === null) {
      return `${triggerName} changed shallowly`;
    }
    for (const key of Object.keys(newProps)) {
      if (!(key in ignoreProps)) {
        if (!(key in oldProps)) {
          return `${triggerName}.${key} added`;
        }
        const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);
        if (changed) {
          return `${triggerName}.${key} ${changed}`;
        }
      }
    }
    for (const key of Object.keys(oldProps)) {
      if (!(key in ignoreProps)) {
        if (!(key in newProps)) {
          return `${triggerName}.${key} dropped`;
        }
        if (!Object.hasOwnProperty.call(newProps, key)) {
          const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);
          if (changed) {
            return `${triggerName}.${key} ${changed}`;
          }
        }
      }
    }
    return false;
  }
  function comparePropValues(newProp, oldProp, propType) {
    let equal = propType && propType.equal;
    if (equal && !equal(newProp, oldProp, propType)) {
      return "changed deeply";
    }
    if (!equal) {
      equal = newProp && oldProp && newProp.equals;
      if (equal && !equal.call(newProp, oldProp)) {
        return "changed deeply";
      }
    }
    if (!equal && oldProp !== newProp) {
      return "changed shallowly";
    }
    return null;
  }
  function diffDataProps(props, oldProps) {
    if (oldProps === null) {
      return "oldProps is null, initial diff";
    }
    let dataChanged = false;
    const { dataComparator, _dataDiff } = props;
    if (dataComparator) {
      if (!dataComparator(props.data, oldProps.data)) {
        dataChanged = "Data comparator detected a change";
      }
    } else if (props.data !== oldProps.data) {
      dataChanged = "A new data container was supplied";
    }
    if (dataChanged && _dataDiff) {
      dataChanged = _dataDiff(props.data, oldProps.data) || dataChanged;
    }
    return dataChanged;
  }
  function diffUpdateTriggers(props, oldProps) {
    if (oldProps === null) {
      return { all: true };
    }
    if ("all" in props.updateTriggers) {
      const diffReason = diffUpdateTrigger(props, oldProps, "all");
      if (diffReason) {
        return { all: true };
      }
    }
    const reason = {};
    let changed = false;
    for (const triggerName in props.updateTriggers) {
      if (triggerName !== "all") {
        const diffReason = diffUpdateTrigger(props, oldProps, triggerName);
        if (diffReason) {
          reason[triggerName] = true;
          changed = true;
        }
      }
    }
    return changed ? reason : false;
  }
  function diffExtensions(props, oldProps) {
    if (oldProps === null) {
      return true;
    }
    const oldExtensions = oldProps.extensions;
    const { extensions } = props;
    if (extensions === oldExtensions) {
      return false;
    }
    if (!oldExtensions || !extensions) {
      return true;
    }
    if (extensions.length !== oldExtensions.length) {
      return true;
    }
    for (let i7 = 0; i7 < extensions.length; i7++) {
      if (!extensions[i7].equals(oldExtensions[i7])) {
        return true;
      }
    }
    return false;
  }
  function diffUpdateTrigger(props, oldProps, triggerName) {
    let newTriggers = props.updateTriggers[triggerName];
    newTriggers = newTriggers === void 0 || newTriggers === null ? {} : newTriggers;
    let oldTriggers = oldProps.updateTriggers[triggerName];
    oldTriggers = oldTriggers === void 0 || oldTriggers === null ? {} : oldTriggers;
    const diffReason = compareProps({
      oldProps: oldTriggers,
      newProps: newTriggers,
      triggerName
    });
    return diffReason;
  }

  // ../core/src/utils/count.ts
  var ERR_NOT_OBJECT = "count(): argument not an object";
  var ERR_NOT_CONTAINER = "count(): argument not a container";
  function count(container) {
    if (!isObject2(container)) {
      throw new Error(ERR_NOT_OBJECT);
    }
    if (typeof container.count === "function") {
      return container.count();
    }
    if (Number.isFinite(container.size)) {
      return container.size;
    }
    if (Number.isFinite(container.length)) {
      return container.length;
    }
    if (isPlainObject(container)) {
      return Object.keys(container).length;
    }
    throw new Error(ERR_NOT_CONTAINER);
  }
  function isPlainObject(value) {
    return value !== null && typeof value === "object" && value.constructor === Object;
  }
  function isObject2(value) {
    return value !== null && typeof value === "object";
  }

  // ../core/src/utils/shader.ts
  function mergeShaders(target2, source4) {
    if (!source4) {
      return target2;
    }
    const result = { ...target2, ...source4 };
    if ("defines" in source4) {
      result.defines = { ...target2.defines, ...source4.defines };
    }
    if ("modules" in source4) {
      result.modules = (target2.modules || []).concat(source4.modules);
      if (source4.modules.some((module) => module.name === "project64")) {
        const index = result.modules.findIndex((module) => module.name === "project32");
        if (index >= 0) {
          result.modules.splice(index, 1);
        }
      }
    }
    if ("inject" in source4) {
      if (!target2.inject) {
        result.inject = source4.inject;
      } else {
        const mergedInjection = { ...target2.inject };
        for (const key in source4.inject) {
          mergedInjection[key] = (mergedInjection[key] || "") + source4.inject[key];
        }
        result.inject = mergedInjection;
      }
    }
    return result;
  }

  // ../core/src/utils/texture.ts
  init_dist4();
  var DEFAULT_TEXTURE_PARAMETERS = {
    minFilter: "linear",
    mipmapFilter: "linear",
    magFilter: "linear",
    addressModeU: "clamp-to-edge",
    addressModeV: "clamp-to-edge"
  };
  var internalTextures = {};
  function createTexture(owner, device, image, sampler) {
    if (image instanceof Texture) {
      return image;
    } else if (image.constructor && image.constructor.name !== "Object") {
      image = { data: image };
    }
    let samplerParameters = null;
    if (image.compressed) {
      samplerParameters = {
        minFilter: "linear",
        mipmapFilter: image.data.length > 1 ? "nearest" : "linear"
      };
    }
    const { width, height } = image.data;
    const texture = device.createTexture({
      ...image,
      sampler: {
        ...DEFAULT_TEXTURE_PARAMETERS,
        ...samplerParameters,
        ...sampler
      },
      mipLevels: device.getMipLevelCount(width, height)
    });
    texture.generateMipmapsWebGL();
    internalTextures[texture.id] = owner;
    return texture;
  }
  function destroyTexture(owner, texture) {
    if (!texture || !(texture instanceof Texture)) {
      return;
    }
    if (internalTextures[texture.id] === owner) {
      texture.delete();
      delete internalTextures[texture.id];
    }
  }

  // ../core/src/lifecycle/prop-types.ts
  var TYPE_DEFINITIONS = {
    boolean: {
      validate(value, propType) {
        return true;
      },
      equal(value1, value2, propType) {
        return Boolean(value1) === Boolean(value2);
      }
    },
    number: {
      validate(value, propType) {
        return Number.isFinite(value) && (!("max" in propType) || value <= propType.max) && (!("min" in propType) || value >= propType.min);
      }
    },
    color: {
      validate(value, propType) {
        return propType.optional && !value || isArray4(value) && (value.length === 3 || value.length === 4);
      },
      equal(value1, value2, propType) {
        return deepEqual2(value1, value2, 1);
      }
    },
    accessor: {
      validate(value, propType) {
        const valueType = getTypeOf2(value);
        return valueType === "function" || valueType === getTypeOf2(propType.value);
      },
      equal(value1, value2, propType) {
        if (typeof value2 === "function") {
          return true;
        }
        return deepEqual2(value1, value2, 1);
      }
    },
    array: {
      validate(value, propType) {
        return propType.optional && !value || isArray4(value);
      },
      equal(value1, value2, propType) {
        const { compare: compare2 } = propType;
        const depth = Number.isInteger(compare2) ? compare2 : compare2 ? 1 : 0;
        return compare2 ? deepEqual2(value1, value2, depth) : value1 === value2;
      }
    },
    object: {
      equal(value1, value2, propType) {
        if (propType.ignore) {
          return true;
        }
        const { compare: compare2 } = propType;
        const depth = Number.isInteger(compare2) ? compare2 : compare2 ? 1 : 0;
        return compare2 ? deepEqual2(value1, value2, depth) : value1 === value2;
      }
    },
    function: {
      validate(value, propType) {
        return propType.optional && !value || typeof value === "function";
      },
      equal(value1, value2, propType) {
        const shouldIgnore = !propType.compare && propType.ignore !== false;
        return shouldIgnore || value1 === value2;
      }
    },
    data: {
      transform: (value, propType, component) => {
        if (!value) {
          return value;
        }
        const { dataTransform } = component.props;
        if (dataTransform) {
          return dataTransform(value);
        }
        if (typeof value.shape === "string" && value.shape.endsWith("-table") && Array.isArray(value.data)) {
          return value.data;
        }
        return value;
      }
    },
    image: {
      transform: (value, propType, component) => {
        const context = component.context;
        if (!context || !context.device) {
          return null;
        }
        return createTexture(component.id, context.device, value, {
          ...propType.parameters,
          ...component.props.textureParameters
        });
      },
      release: (value, propType, component) => {
        destroyTexture(component.id, value);
      }
    }
  };
  function parsePropTypes(propDefs) {
    const propTypes = {};
    const defaultProps49 = {};
    const deprecatedProps = {};
    for (const [propName, propDef] of Object.entries(propDefs)) {
      const deprecated = propDef?.deprecatedFor;
      if (deprecated) {
        deprecatedProps[propName] = Array.isArray(deprecated) ? deprecated : [deprecated];
      } else {
        const propType = parsePropType(propName, propDef);
        propTypes[propName] = propType;
        defaultProps49[propName] = propType.value;
      }
    }
    return { propTypes, defaultProps: defaultProps49, deprecatedProps };
  }
  function parsePropType(name13, propDef) {
    switch (getTypeOf2(propDef)) {
      case "object":
        return normalizePropDefinition(name13, propDef);
      case "array":
        return normalizePropDefinition(name13, { type: "array", value: propDef, compare: false });
      case "boolean":
        return normalizePropDefinition(name13, { type: "boolean", value: propDef });
      case "number":
        return normalizePropDefinition(name13, { type: "number", value: propDef });
      case "function":
        return normalizePropDefinition(name13, { type: "function", value: propDef, compare: true });
      default:
        return { name: name13, type: "unknown", value: propDef };
    }
  }
  function normalizePropDefinition(name13, propDef) {
    if (!("type" in propDef)) {
      if (!("value" in propDef)) {
        return { name: name13, type: "object", value: propDef };
      }
      return { name: name13, type: getTypeOf2(propDef.value), ...propDef };
    }
    return { name: name13, ...TYPE_DEFINITIONS[propDef.type], ...propDef };
  }
  function isArray4(value) {
    return Array.isArray(value) || ArrayBuffer.isView(value);
  }
  function getTypeOf2(value) {
    if (isArray4(value)) {
      return "array";
    }
    if (value === null) {
      return "null";
    }
    return typeof value;
  }

  // ../core/src/lifecycle/create-props.ts
  function createProps(component, propObjects) {
    let extensions;
    for (let i7 = propObjects.length - 1; i7 >= 0; i7--) {
      const props = propObjects[i7];
      if ("extensions" in props) {
        extensions = props.extensions;
      }
    }
    const propsPrototype = getPropsPrototype(component.constructor, extensions);
    const propsInstance = Object.create(propsPrototype);
    propsInstance[COMPONENT_SYMBOL] = component;
    propsInstance[ASYNC_ORIGINAL_SYMBOL] = {};
    propsInstance[ASYNC_RESOLVED_SYMBOL] = {};
    for (let i7 = 0; i7 < propObjects.length; ++i7) {
      const props = propObjects[i7];
      for (const key in props) {
        propsInstance[key] = props[key];
      }
    }
    Object.freeze(propsInstance);
    return propsInstance;
  }
  var MergedDefaultPropsCacheKey = "_mergedDefaultProps";
  function getPropsPrototype(componentClass, extensions) {
    if (!(componentClass instanceof Component.constructor))
      return {};
    let cacheKey = MergedDefaultPropsCacheKey;
    if (extensions) {
      for (const extension of extensions) {
        const ExtensionClass = extension.constructor;
        if (ExtensionClass) {
          cacheKey += `:${ExtensionClass.extensionName || ExtensionClass.name}`;
        }
      }
    }
    const defaultProps49 = getOwnProperty(componentClass, cacheKey);
    if (!defaultProps49) {
      return componentClass[cacheKey] = createPropsPrototypeAndTypes(
        componentClass,
        extensions || []
      );
    }
    return defaultProps49;
  }
  function createPropsPrototypeAndTypes(componentClass, extensions) {
    const parent = componentClass.prototype;
    if (!parent) {
      return null;
    }
    const parentClass = Object.getPrototypeOf(componentClass);
    const parentDefaultProps = getPropsPrototype(parentClass);
    const componentDefaultProps = getOwnProperty(componentClass, "defaultProps") || {};
    const componentPropDefs = parsePropTypes(componentDefaultProps);
    const defaultProps49 = Object.assign(
      /* @__PURE__ */ Object.create(null),
      parentDefaultProps,
      componentPropDefs.defaultProps
    );
    const propTypes = Object.assign(
      /* @__PURE__ */ Object.create(null),
      parentDefaultProps?.[PROP_TYPES_SYMBOL],
      componentPropDefs.propTypes
    );
    const deprecatedProps = Object.assign(
      /* @__PURE__ */ Object.create(null),
      parentDefaultProps?.[DEPRECATED_PROPS_SYMBOL],
      componentPropDefs.deprecatedProps
    );
    for (const extension of extensions) {
      const extensionDefaultProps = getPropsPrototype(extension.constructor);
      if (extensionDefaultProps) {
        Object.assign(defaultProps49, extensionDefaultProps);
        Object.assign(propTypes, extensionDefaultProps[PROP_TYPES_SYMBOL]);
        Object.assign(deprecatedProps, extensionDefaultProps[DEPRECATED_PROPS_SYMBOL]);
      }
    }
    createPropsPrototype(defaultProps49, componentClass);
    addAsyncPropsToPropPrototype(defaultProps49, propTypes);
    addDeprecatedPropsToPropPrototype(defaultProps49, deprecatedProps);
    defaultProps49[PROP_TYPES_SYMBOL] = propTypes;
    defaultProps49[DEPRECATED_PROPS_SYMBOL] = deprecatedProps;
    if (extensions.length === 0 && !hasOwnProperty(componentClass, "_propTypes")) {
      componentClass._propTypes = propTypes;
    }
    return defaultProps49;
  }
  function createPropsPrototype(defaultProps49, componentClass) {
    const id = getComponentName(componentClass);
    Object.defineProperties(defaultProps49, {
      // `id` is treated specially because layer might need to override it
      id: {
        writable: true,
        value: id
      }
    });
  }
  function addDeprecatedPropsToPropPrototype(defaultProps49, deprecatedProps) {
    for (const propName in deprecatedProps) {
      Object.defineProperty(defaultProps49, propName, {
        enumerable: false,
        set(newValue) {
          const nameStr = `${this.id}: ${propName}`;
          for (const newPropName of deprecatedProps[propName]) {
            if (!hasOwnProperty(this, newPropName)) {
              this[newPropName] = newValue;
            }
          }
          log_default.deprecated(nameStr, deprecatedProps[propName].join("/"))();
        }
      });
    }
  }
  function addAsyncPropsToPropPrototype(defaultProps49, propTypes) {
    const defaultValues = {};
    const descriptors = {};
    for (const propName in propTypes) {
      const propType = propTypes[propName];
      const { name: name13, value } = propType;
      if (propType.async) {
        defaultValues[name13] = value;
        descriptors[name13] = getDescriptorForAsyncProp(name13);
      }
    }
    defaultProps49[ASYNC_DEFAULTS_SYMBOL] = defaultValues;
    defaultProps49[ASYNC_ORIGINAL_SYMBOL] = {};
    Object.defineProperties(defaultProps49, descriptors);
  }
  function getDescriptorForAsyncProp(name13) {
    return {
      enumerable: true,
      // Save the provided value for async props in a special map
      set(newValue) {
        if (typeof newValue === "string" || newValue instanceof Promise || isAsyncIterable2(newValue)) {
          this[ASYNC_ORIGINAL_SYMBOL][name13] = newValue;
        } else {
          this[ASYNC_RESOLVED_SYMBOL][name13] = newValue;
        }
      },
      // Only the component's state knows the true value of async prop
      get() {
        if (this[ASYNC_RESOLVED_SYMBOL]) {
          if (name13 in this[ASYNC_RESOLVED_SYMBOL]) {
            const value = this[ASYNC_RESOLVED_SYMBOL][name13];
            return value || this[ASYNC_DEFAULTS_SYMBOL][name13];
          }
          if (name13 in this[ASYNC_ORIGINAL_SYMBOL]) {
            const state = this[COMPONENT_SYMBOL] && this[COMPONENT_SYMBOL].internalState;
            if (state && state.hasAsyncProp(name13)) {
              return state.getAsyncProp(name13) || this[ASYNC_DEFAULTS_SYMBOL][name13];
            }
          }
        }
        return this[ASYNC_DEFAULTS_SYMBOL][name13];
      }
    };
  }
  function hasOwnProperty(object, prop) {
    return Object.prototype.hasOwnProperty.call(object, prop);
  }
  function getOwnProperty(object, prop) {
    return hasOwnProperty(object, prop) && object[prop];
  }
  function getComponentName(componentClass) {
    const componentName = componentClass.componentName;
    if (!componentName) {
      log_default.warn(`${componentClass.name}.componentName not specified`)();
    }
    return componentName || componentClass.name;
  }

  // ../core/src/lifecycle/component.ts
  var counter = 0;
  var Component = class {
    constructor(...propObjects) {
      this.props = createProps(this, propObjects);
      this.id = this.props.id;
      this.count = counter++;
    }
    // clone this layer with modified props
    clone(newProps) {
      const { props } = this;
      const asyncProps = {};
      for (const key in props[ASYNC_DEFAULTS_SYMBOL]) {
        if (key in props[ASYNC_RESOLVED_SYMBOL]) {
          asyncProps[key] = props[ASYNC_RESOLVED_SYMBOL][key];
        } else if (key in props[ASYNC_ORIGINAL_SYMBOL]) {
          asyncProps[key] = props[ASYNC_ORIGINAL_SYMBOL][key];
        }
      }
      return new this.constructor({ ...props, ...asyncProps, ...newProps });
    }
  };
  Component.componentName = "Component";
  Component.defaultProps = {};

  // ../core/src/lifecycle/component-state.ts
  var EMPTY_PROPS = Object.freeze({});
  var ComponentState = class {
    constructor(component) {
      this.component = component;
      this.asyncProps = {};
      this.onAsyncPropUpdated = () => {
      };
      this.oldProps = null;
      this.oldAsyncProps = null;
    }
    finalize() {
      for (const propName in this.asyncProps) {
        const asyncProp = this.asyncProps[propName];
        if (asyncProp && asyncProp.type && asyncProp.type.release) {
          asyncProp.type.release(
            asyncProp.resolvedValue,
            asyncProp.type,
            this.component
          );
        }
      }
      this.asyncProps = {};
      this.component = null;
      this.resetOldProps();
    }
    /* Layer-facing props API */
    getOldProps() {
      return this.oldAsyncProps || this.oldProps || EMPTY_PROPS;
    }
    resetOldProps() {
      this.oldAsyncProps = null;
      this.oldProps = this.component ? this.component.props : null;
    }
    // Checks if a prop is overridden
    hasAsyncProp(propName) {
      return propName in this.asyncProps;
    }
    // Returns value of an overriden prop
    getAsyncProp(propName) {
      const asyncProp = this.asyncProps[propName];
      return asyncProp && asyncProp.resolvedValue;
    }
    isAsyncPropLoading(propName) {
      if (propName) {
        const asyncProp = this.asyncProps[propName];
        return Boolean(
          asyncProp && asyncProp.pendingLoadCount > 0 && asyncProp.pendingLoadCount !== asyncProp.resolvedLoadCount
        );
      }
      for (const key in this.asyncProps) {
        if (this.isAsyncPropLoading(key)) {
          return true;
        }
      }
      return false;
    }
    // Without changing the original prop value, swap out the data resolution under the hood
    reloadAsyncProp(propName, value) {
      this._watchPromise(propName, Promise.resolve(value));
    }
    // Updates all async/overridden props (when new props come in)
    // Checks if urls have changed, starts loading, or removes override
    setAsyncProps(props) {
      this.component = props[COMPONENT_SYMBOL] || this.component;
      const resolvedValues = props[ASYNC_RESOLVED_SYMBOL] || {};
      const originalValues = props[ASYNC_ORIGINAL_SYMBOL] || props;
      const defaultValues = props[ASYNC_DEFAULTS_SYMBOL] || {};
      for (const propName in resolvedValues) {
        const value = resolvedValues[propName];
        this._createAsyncPropData(propName, defaultValues[propName]);
        this._updateAsyncProp(propName, value);
        resolvedValues[propName] = this.getAsyncProp(propName);
      }
      for (const propName in originalValues) {
        const value = originalValues[propName];
        this._createAsyncPropData(propName, defaultValues[propName]);
        this._updateAsyncProp(propName, value);
      }
    }
    /* Placeholder methods for subclassing */
    _fetch(propName, url) {
      return null;
    }
    _onResolve(propName, value) {
    }
    // eslint-disable-line @typescript-eslint/no-empty-function
    _onError(propName, error) {
    }
    // eslint-disable-line @typescript-eslint/no-empty-function
    // Intercept strings (URLs) and Promises and activates loading and prop rewriting
    _updateAsyncProp(propName, value) {
      if (!this._didAsyncInputValueChange(propName, value)) {
        return;
      }
      if (typeof value === "string") {
        value = this._fetch(propName, value);
      }
      if (value instanceof Promise) {
        this._watchPromise(propName, value);
        return;
      }
      if (isAsyncIterable2(value)) {
        this._resolveAsyncIterable(propName, value);
        return;
      }
      this._setPropValue(propName, value);
    }
    // Whenever async props are changing, we need to make a copy of oldProps
    // otherwise the prop rewriting will affect the value both in props and oldProps.
    // While the copy is relatively expensive, this only happens on load completion.
    _freezeAsyncOldProps() {
      if (!this.oldAsyncProps && this.oldProps) {
        this.oldAsyncProps = Object.create(this.oldProps);
        for (const propName in this.asyncProps) {
          Object.defineProperty(this.oldAsyncProps, propName, {
            enumerable: true,
            value: this.oldProps[propName]
          });
        }
      }
    }
    // Checks if an input value actually changed (to avoid reloading/rewatching promises/urls)
    _didAsyncInputValueChange(propName, value) {
      const asyncProp = this.asyncProps[propName];
      if (value === asyncProp.resolvedValue || value === asyncProp.lastValue) {
        return false;
      }
      asyncProp.lastValue = value;
      return true;
    }
    // Set normal, non-async value
    _setPropValue(propName, value) {
      this._freezeAsyncOldProps();
      const asyncProp = this.asyncProps[propName];
      if (asyncProp) {
        value = this._postProcessValue(asyncProp, value);
        asyncProp.resolvedValue = value;
        asyncProp.pendingLoadCount++;
        asyncProp.resolvedLoadCount = asyncProp.pendingLoadCount;
      }
    }
    // Set a just resolved async value, calling onAsyncPropUpdates if value changes asynchronously
    _setAsyncPropValue(propName, value, loadCount) {
      const asyncProp = this.asyncProps[propName];
      if (asyncProp && loadCount >= asyncProp.resolvedLoadCount && value !== void 0) {
        this._freezeAsyncOldProps();
        asyncProp.resolvedValue = value;
        asyncProp.resolvedLoadCount = loadCount;
        this.onAsyncPropUpdated(propName, value);
      }
    }
    // Tracks a promise, sets the prop when loaded, handles load count
    _watchPromise(propName, promise) {
      const asyncProp = this.asyncProps[propName];
      if (asyncProp) {
        asyncProp.pendingLoadCount++;
        const loadCount = asyncProp.pendingLoadCount;
        promise.then((data) => {
          if (!this.component) {
            return;
          }
          data = this._postProcessValue(asyncProp, data);
          this._setAsyncPropValue(propName, data, loadCount);
          this._onResolve(propName, data);
        }).catch((error) => {
          this._onError(propName, error);
        });
      }
    }
    async _resolveAsyncIterable(propName, iterable) {
      if (propName !== "data") {
        this._setPropValue(propName, iterable);
        return;
      }
      const asyncProp = this.asyncProps[propName];
      if (!asyncProp) {
        return;
      }
      asyncProp.pendingLoadCount++;
      const loadCount = asyncProp.pendingLoadCount;
      let data = [];
      let count3 = 0;
      for await (const chunk of iterable) {
        if (!this.component) {
          return;
        }
        const { dataTransform } = this.component.props;
        if (dataTransform) {
          data = dataTransform(chunk, data);
        } else {
          data = data.concat(chunk);
        }
        Object.defineProperty(data, "__diff", {
          enumerable: false,
          value: [{ startRow: count3, endRow: data.length }]
        });
        count3 = data.length;
        this._setAsyncPropValue(propName, data, loadCount);
      }
      this._onResolve(propName, data);
    }
    // Give the app a chance to post process the loaded data
    _postProcessValue(asyncProp, value) {
      const propType = asyncProp.type;
      if (propType && this.component) {
        if (propType.release) {
          propType.release(asyncProp.resolvedValue, propType, this.component);
        }
        if (propType.transform) {
          return propType.transform(value, propType, this.component);
        }
      }
      return value;
    }
    // Creating an asyncProp record if needed
    _createAsyncPropData(propName, defaultValue2) {
      const asyncProp = this.asyncProps[propName];
      if (!asyncProp) {
        const propTypes = this.component && this.component.props[PROP_TYPES_SYMBOL];
        this.asyncProps[propName] = {
          type: propTypes && propTypes[propName],
          lastValue: null,
          resolvedValue: defaultValue2,
          pendingLoadCount: 0,
          resolvedLoadCount: 0
        };
      }
    }
  };

  // ../core/src/lib/layer-state.ts
  var LayerState = class extends ComponentState {
    constructor({
      attributeManager,
      layer
    }) {
      super(layer);
      this.attributeManager = attributeManager;
      this.needsRedraw = true;
      this.needsUpdate = true;
      this.subLayers = null;
      this.usesPickingColorCache = false;
    }
    get layer() {
      return this.component;
    }
    /* Override base Component methods with Layer-specific handling */
    _fetch(propName, url) {
      const layer = this.layer;
      const fetch2 = layer?.props.fetch;
      if (fetch2) {
        return fetch2(url, { propName, layer });
      }
      return super._fetch(propName, url);
    }
    _onResolve(propName, value) {
      const layer = this.layer;
      if (layer) {
        const onDataLoad = layer.props.onDataLoad;
        if (propName === "data" && onDataLoad) {
          onDataLoad(value, { propName, layer });
        }
      }
    }
    _onError(propName, error) {
      const layer = this.layer;
      if (layer) {
        layer.raiseError(error, `loading ${propName} of ${this.layer}`);
      }
    }
  };

  // ../core/src/lib/layer.ts
  var TRACE_CHANGE_FLAG = "layer.changeFlag";
  var TRACE_INITIALIZE = "layer.initialize";
  var TRACE_UPDATE = "layer.update";
  var TRACE_FINALIZE = "layer.finalize";
  var TRACE_MATCHED = "layer.matched";
  var MAX_PICKING_COLOR_CACHE_SIZE = 2 ** 24 - 1;
  var EMPTY_ARRAY2 = Object.freeze([]);
  var areViewportsEqual = memoize(
    ({ oldViewport, viewport }) => {
      return oldViewport.equals(viewport);
    }
  );
  var pickingColorCache = new Uint8ClampedArray(0);
  var defaultProps2 = {
    // data: Special handling for null, see below
    data: { type: "data", value: EMPTY_ARRAY2, async: true },
    dataComparator: { type: "function", value: null, optional: true },
    _dataDiff: {
      type: "function",
      // @ts-ignore __diff is not defined on data
      value: (data) => data && data.__diff,
      optional: true
    },
    dataTransform: { type: "function", value: null, optional: true },
    onDataLoad: { type: "function", value: null, optional: true },
    onError: { type: "function", value: null, optional: true },
    fetch: {
      type: "function",
      value: (url, {
        propName,
        layer,
        loaders,
        loadOptions,
        signal
      }) => {
        const { resourceManager } = layer.context;
        loadOptions = loadOptions || layer.getLoadOptions();
        loaders = loaders || layer.props.loaders;
        if (signal) {
          loadOptions = {
            ...loadOptions,
            fetch: {
              ...loadOptions?.fetch,
              signal
            }
          };
        }
        let inResourceManager = resourceManager.contains(url);
        if (!inResourceManager && !loadOptions) {
          resourceManager.add({ resourceId: url, data: load(url, loaders), persistent: false });
          inResourceManager = true;
        }
        if (inResourceManager) {
          return resourceManager.subscribe({
            resourceId: url,
            onChange: (data) => layer.internalState?.reloadAsyncProp(propName, data),
            consumerId: layer.id,
            requestId: propName
          });
        }
        return load(url, loaders, loadOptions);
      }
    },
    updateTriggers: {},
    // Update triggers: a core change detection mechanism in deck.gl
    visible: true,
    pickable: false,
    opacity: { type: "number", min: 0, max: 1, value: 1 },
    operation: "draw",
    onHover: { type: "function", value: null, optional: true },
    onClick: { type: "function", value: null, optional: true },
    onDragStart: { type: "function", value: null, optional: true },
    onDrag: { type: "function", value: null, optional: true },
    onDragEnd: { type: "function", value: null, optional: true },
    coordinateSystem: COORDINATE_SYSTEM.DEFAULT,
    coordinateOrigin: { type: "array", value: [0, 0, 0], compare: true },
    modelMatrix: { type: "array", value: null, compare: true, optional: true },
    wrapLongitude: false,
    positionFormat: "XYZ",
    colorFormat: "RGBA",
    parameters: { type: "object", value: {}, optional: true, compare: 2 },
    loadOptions: { type: "object", value: null, optional: true, ignore: true },
    transitions: null,
    extensions: [],
    loaders: { type: "array", value: [], optional: true, ignore: true },
    // Offset depth based on layer index to avoid z-fighting.
    // Negative values pull layer towards the camera
    // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm
    getPolygonOffset: {
      type: "function",
      value: ({ layerIndex }) => [0, -layerIndex * 100]
    },
    // Selection/Highlighting
    highlightedObjectIndex: null,
    autoHighlight: false,
    highlightColor: { type: "accessor", value: [0, 0, 128, 128] }
  };
  var Layer = class extends Component {
    constructor() {
      super(...arguments);
      this.internalState = null;
      this.lifecycle = LIFECYCLE.NO_STATE;
      // Will be set to the shared layer state object during layer matching
      this.parent = null;
    }
    static get componentName() {
      return Object.prototype.hasOwnProperty.call(this, "layerName") ? this.layerName : "";
    }
    get root() {
      let layer = this;
      while (layer.parent) {
        layer = layer.parent;
      }
      return layer;
    }
    toString() {
      const className = this.constructor.layerName || this.constructor.name;
      return `${className}({id: '${this.props.id}'})`;
    }
    // Public API for users
    /** Projects a point with current view state from the current layer's coordinate system to screen */
    project(xyz) {
      assert8(this.internalState);
      const viewport = this.internalState.viewport || this.context.viewport;
      const worldPosition = getWorldPosition(xyz, {
        viewport,
        modelMatrix: this.props.modelMatrix,
        coordinateOrigin: this.props.coordinateOrigin,
        coordinateSystem: this.props.coordinateSystem
      });
      const [x4, y5, z4] = worldToPixels(worldPosition, viewport.pixelProjectionMatrix);
      return xyz.length === 2 ? [x4, y5] : [x4, y5, z4];
    }
    /** Unprojects a screen pixel to the current view's default coordinate system
        Note: this does not reverse `project`. */
    unproject(xy) {
      assert8(this.internalState);
      const viewport = this.internalState.viewport || this.context.viewport;
      return viewport.unproject(xy);
    }
    /** Projects a point with current view state from the current layer's coordinate system to the world space */
    projectPosition(xyz, params) {
      assert8(this.internalState);
      const viewport = this.internalState.viewport || this.context.viewport;
      return projectPosition(xyz, {
        viewport,
        modelMatrix: this.props.modelMatrix,
        coordinateOrigin: this.props.coordinateOrigin,
        coordinateSystem: this.props.coordinateSystem,
        ...params
      });
    }
    // Public API for custom layer implementation
    /** `true` if this layer renders other layers */
    get isComposite() {
      return false;
    }
    /** `true` if the layer renders to screen */
    get isDrawable() {
      return true;
    }
    /** Updates selected state members and marks the layer for redraw */
    setState(partialState) {
      this.setChangeFlags({ stateChanged: true });
      Object.assign(this.state, partialState);
      this.setNeedsRedraw();
    }
    /** Sets the redraw flag for this layer, will trigger a redraw next animation frame */
    setNeedsRedraw() {
      if (this.internalState) {
        this.internalState.needsRedraw = true;
      }
    }
    /** Mark this layer as needs a deep update */
    setNeedsUpdate() {
      if (this.internalState) {
        this.context.layerManager.setNeedsUpdate(String(this));
        this.internalState.needsUpdate = true;
      }
    }
    /** Returns true if all async resources are loaded */
    get isLoaded() {
      return this.internalState ? !this.internalState.isAsyncPropLoading() : false;
    }
    /** Returns true if using shader-based WGS84 longitude wrapping */
    get wrapLongitude() {
      return this.props.wrapLongitude;
    }
    /** @deprecated Returns true if the layer is visible in the picking pass */
    isPickable() {
      return this.props.pickable && this.props.visible;
    }
    /** Returns an array of models used by this layer, can be overriden by layer subclass */
    getModels() {
      const state = this.state;
      return state && (state.models || state.model && [state.model]) || [];
    }
    /** Update shader input parameters */
    setShaderModuleProps(...props) {
      for (const model of this.getModels()) {
        model.shaderInputs.setProps(...props);
      }
    }
    /** Returns the attribute manager of this layer */
    getAttributeManager() {
      return this.internalState && this.internalState.attributeManager;
    }
    /** Returns the most recent layer that matched to this state
      (When reacting to an async event, this layer may no longer be the latest) */
    getCurrentLayer() {
      return this.internalState && this.internalState.layer;
    }
    /** Returns the default parse options for async props */
    getLoadOptions() {
      return this.props.loadOptions;
    }
    use64bitPositions() {
      const { coordinateSystem } = this.props;
      return coordinateSystem === COORDINATE_SYSTEM.DEFAULT || coordinateSystem === COORDINATE_SYSTEM.LNGLAT || coordinateSystem === COORDINATE_SYSTEM.CARTESIAN;
    }
    // Event handling
    onHover(info, pickingEvent) {
      if (this.props.onHover) {
        return this.props.onHover(info, pickingEvent) || false;
      }
      return false;
    }
    onClick(info, pickingEvent) {
      if (this.props.onClick) {
        return this.props.onClick(info, pickingEvent) || false;
      }
      return false;
    }
    // Returns the picking color that doesn't match any subfeature
    // Use if some graphics do not belong to any pickable subfeature
    // @return {Array} - a black color
    nullPickingColor() {
      return [0, 0, 0];
    }
    // Returns the picking color that doesn't match any subfeature
    // Use if some graphics do not belong to any pickable subfeature
    encodePickingColor(i7, target2 = []) {
      target2[0] = i7 + 1 & 255;
      target2[1] = i7 + 1 >> 8 & 255;
      target2[2] = i7 + 1 >> 8 >> 8 & 255;
      return target2;
    }
    // Returns the index corresponding to a picking color that doesn't match any subfeature
    // @param {Uint8Array} color - color array to be decoded
    // @return {Array} - the decoded picking color
    decodePickingColor(color) {
      assert8(color instanceof Uint8Array);
      const [i1, i22, i32] = color;
      const index = i1 + i22 * 256 + i32 * 65536 - 1;
      return index;
    }
    /** Deduces number of instances. Intention is to support:
      - Explicit setting of numInstances
      - Auto-deduction for ES6 containers that define a size member
      - Auto-deduction for Classic Arrays via the built-in length attribute
      - Auto-deduction via arrays */
    getNumInstances() {
      if (Number.isFinite(this.props.numInstances)) {
        return this.props.numInstances;
      }
      if (this.state && this.state.numInstances !== void 0) {
        return this.state.numInstances;
      }
      return count(this.props.data);
    }
    /** Buffer layout describes how many attribute values are packed for each data object
        The default (null) is one value each object.
        Some data formats (e.g. paths, polygons) have various length. Their buffer layout
        is in the form of [L0, L1, L2, ...] */
    getStartIndices() {
      if (this.props.startIndices) {
        return this.props.startIndices;
      }
      if (this.state && this.state.startIndices) {
        return this.state.startIndices;
      }
      return null;
    }
    // Default implementation
    getBounds() {
      return this.getAttributeManager()?.getBounds(["positions", "instancePositions"]);
    }
    getShaders(shaders) {
      shaders = mergeShaders(shaders, {
        disableWarnings: true,
        modules: this.context.defaultShaderModules
      });
      for (const extension of this.props.extensions) {
        shaders = mergeShaders(shaders, extension.getShaders.call(this, extension));
      }
      return shaders;
    }
    /** Controls if updateState should be called. By default returns true if any prop has changed */
    shouldUpdateState(params) {
      return params.changeFlags.propsOrDataChanged;
    }
    /** Default implementation, all attributes will be invalidated and updated when data changes */
    // eslint-disable-next-line complexity
    updateState(params) {
      const attributeManager = this.getAttributeManager();
      const { dataChanged } = params.changeFlags;
      if (dataChanged && attributeManager) {
        if (Array.isArray(dataChanged)) {
          for (const dataRange of dataChanged) {
            attributeManager.invalidateAll(dataRange);
          }
        } else {
          attributeManager.invalidateAll();
        }
      }
      if (attributeManager) {
        const { props } = params;
        const hasPickingBuffer = this.internalState.hasPickingBuffer;
        const needsPickingBuffer = Number.isInteger(props.highlightedObjectIndex) || props.pickable || props.extensions.some((extension) => extension.getNeedsPickingBuffer.call(this, extension));
        if (hasPickingBuffer !== needsPickingBuffer) {
          this.internalState.hasPickingBuffer = needsPickingBuffer;
          const { pickingColors, instancePickingColors } = attributeManager.attributes;
          const pickingColorsAttribute = pickingColors || instancePickingColors;
          if (pickingColorsAttribute) {
            if (needsPickingBuffer && pickingColorsAttribute.constant) {
              pickingColorsAttribute.constant = false;
              attributeManager.invalidate(pickingColorsAttribute.id);
            }
            if (!pickingColorsAttribute.value && !needsPickingBuffer) {
              pickingColorsAttribute.constant = true;
              pickingColorsAttribute.value = [0, 0, 0];
            }
          }
        }
      }
    }
    /** Called once when layer is no longer matched and state will be discarded. Layers can destroy WebGL resources here. */
    finalizeState(context) {
      for (const model of this.getModels()) {
        model.destroy();
      }
      const attributeManager = this.getAttributeManager();
      if (attributeManager) {
        attributeManager.finalize();
      }
      if (this.context) {
        this.context.resourceManager.unsubscribe({ consumerId: this.id });
      }
      if (this.internalState) {
        this.internalState.uniformTransitions.clear();
        this.internalState.finalize();
      }
    }
    // If state has a model, draw it with supplied uniforms
    draw(opts) {
      for (const model of this.getModels()) {
        model.draw(opts.renderPass);
      }
    }
    // called to populate the info object that is passed to the event handler
    // @return null to cancel event
    getPickingInfo({ info, mode, sourceLayer }) {
      const { index } = info;
      if (index >= 0) {
        if (Array.isArray(this.props.data)) {
          info.object = this.props.data[index];
        }
      }
      return info;
    }
    // END LIFECYCLE METHODS
    // / INTERNAL METHODS - called by LayerManager, DeckRenderer and DeckPicker
    /** (Internal) Propagate an error event through the system */
    raiseError(error, message2) {
      if (message2) {
        error = new Error(`${message2}: ${error.message}`, { cause: error });
      }
      if (!this.props.onError?.(error)) {
        this.context?.onError?.(error, this);
      }
    }
    /** (Internal) Checks if this layer needs redraw */
    getNeedsRedraw(opts = { clearRedrawFlags: false }) {
      return this._getNeedsRedraw(opts);
    }
    /** (Internal) Checks if this layer needs a deep update */
    needsUpdate() {
      if (!this.internalState) {
        return false;
      }
      return this.internalState.needsUpdate || this.hasUniformTransition() || this.shouldUpdateState(this._getUpdateParams());
    }
    /** Checks if this layer has ongoing uniform transition */
    hasUniformTransition() {
      return this.internalState?.uniformTransitions.active || false;
    }
    /** Called when this layer is rendered into the given viewport */
    activateViewport(viewport) {
      if (!this.internalState) {
        return;
      }
      const oldViewport = this.internalState.viewport;
      this.internalState.viewport = viewport;
      if (!oldViewport || !areViewportsEqual({ oldViewport, viewport })) {
        this.setChangeFlags({ viewportChanged: true });
        if (this.isComposite) {
          if (this.needsUpdate()) {
            this.setNeedsUpdate();
          }
        } else {
          this._update();
        }
      }
    }
    /** Default implementation of attribute invalidation, can be redefined */
    invalidateAttribute(name13 = "all") {
      const attributeManager = this.getAttributeManager();
      if (!attributeManager) {
        return;
      }
      if (name13 === "all") {
        attributeManager.invalidateAll();
      } else {
        attributeManager.invalidate(name13);
      }
    }
    /** Send updated attributes to the WebGL model */
    updateAttributes(changedAttributes) {
      let bufferLayoutChanged = false;
      for (const id in changedAttributes) {
        if (changedAttributes[id].layoutChanged()) {
          bufferLayoutChanged = true;
        }
      }
      for (const model of this.getModels()) {
        this._setModelAttributes(model, changedAttributes, bufferLayoutChanged);
      }
    }
    /** Recalculate any attributes if needed */
    _updateAttributes() {
      const attributeManager = this.getAttributeManager();
      if (!attributeManager) {
        return;
      }
      const props = this.props;
      const numInstances = this.getNumInstances();
      const startIndices = this.getStartIndices();
      attributeManager.update({
        data: props.data,
        numInstances,
        startIndices,
        props,
        transitions: props.transitions,
        // @ts-ignore (TS2339) property attribute is not present on some acceptable data types
        buffers: props.data.attributes,
        context: this
      });
      const changedAttributes = attributeManager.getChangedAttributes({ clearChangedFlags: true });
      this.updateAttributes(changedAttributes);
    }
    /** Update attribute transitions. This is called in drawLayer, no model updates required. */
    _updateAttributeTransition() {
      const attributeManager = this.getAttributeManager();
      if (attributeManager) {
        attributeManager.updateTransition();
      }
    }
    /** Update uniform (prop) transitions. This is called in updateState, may result in model updates. */
    _updateUniformTransition() {
      const { uniformTransitions } = this.internalState;
      if (uniformTransitions.active) {
        const propsInTransition = uniformTransitions.update();
        const props = Object.create(this.props);
        for (const key in propsInTransition) {
          Object.defineProperty(props, key, { value: propsInTransition[key] });
        }
        return props;
      }
      return this.props;
    }
    /** Updater for the automatically populated instancePickingColors attribute */
    calculateInstancePickingColors(attribute, { numInstances }) {
      if (attribute.constant) {
        return;
      }
      const cacheSize = Math.floor(pickingColorCache.length / 4);
      this.internalState.usesPickingColorCache = true;
      if (cacheSize < numInstances) {
        if (numInstances > MAX_PICKING_COLOR_CACHE_SIZE) {
          log_default.warn(
            "Layer has too many data objects. Picking might not be able to distinguish all objects."
          )();
        }
        pickingColorCache = typed_array_manager_default.allocate(pickingColorCache, numInstances, {
          size: 4,
          copy: true,
          maxCount: Math.max(numInstances, MAX_PICKING_COLOR_CACHE_SIZE)
        });
        const newCacheSize = Math.floor(pickingColorCache.length / 4);
        const pickingColor = [0, 0, 0];
        for (let i7 = cacheSize; i7 < newCacheSize; i7++) {
          this.encodePickingColor(i7, pickingColor);
          pickingColorCache[i7 * 4 + 0] = pickingColor[0];
          pickingColorCache[i7 * 4 + 1] = pickingColor[1];
          pickingColorCache[i7 * 4 + 2] = pickingColor[2];
          pickingColorCache[i7 * 4 + 3] = 0;
        }
      }
      attribute.value = pickingColorCache.subarray(0, numInstances * 4);
    }
    /** Apply changed attributes to model */
    _setModelAttributes(model, changedAttributes, bufferLayoutChanged = false) {
      if (!Object.keys(changedAttributes).length) {
        return;
      }
      if (bufferLayoutChanged) {
        const attributeManager = this.getAttributeManager();
        model.setBufferLayout(attributeManager.getBufferLayouts(model));
        changedAttributes = attributeManager.getAttributes();
      }
      const excludeAttributes = model.userData?.excludeAttributes || {};
      const attributeBuffers = {};
      const constantAttributes = {};
      for (const name13 in changedAttributes) {
        if (excludeAttributes[name13]) {
          continue;
        }
        const values = changedAttributes[name13].getValue();
        for (const attributeName in values) {
          const value = values[attributeName];
          if (value instanceof Buffer2) {
            if (changedAttributes[name13].settings.isIndexed) {
              model.setIndexBuffer(value);
            } else {
              attributeBuffers[attributeName] = value;
            }
          } else if (value) {
            constantAttributes[attributeName] = value;
          }
        }
      }
      model.setAttributes(attributeBuffers);
      model.setConstantAttributes(constantAttributes);
    }
    /** (Internal) Sets the picking color at the specified index to null picking color. Used for multi-depth picking.
       This method may be overriden by layer implementations */
    disablePickingIndex(objectIndex) {
      const data = this.props.data;
      if (!("attributes" in data)) {
        this._disablePickingIndex(objectIndex);
        return;
      }
      const { pickingColors, instancePickingColors } = this.getAttributeManager().attributes;
      const colors = pickingColors || instancePickingColors;
      const externalColorAttribute = colors && data.attributes && data.attributes[colors.id];
      if (externalColorAttribute && externalColorAttribute.value) {
        const values = externalColorAttribute.value;
        const objectColor = this.encodePickingColor(objectIndex);
        for (let index = 0; index < data.length; index++) {
          const i7 = colors.getVertexOffset(index);
          if (values[i7] === objectColor[0] && values[i7 + 1] === objectColor[1] && values[i7 + 2] === objectColor[2]) {
            this._disablePickingIndex(index);
          }
        }
      } else {
        this._disablePickingIndex(objectIndex);
      }
    }
    // TODO - simplify subclassing interface
    _disablePickingIndex(objectIndex) {
      const { pickingColors, instancePickingColors } = this.getAttributeManager().attributes;
      const colors = pickingColors || instancePickingColors;
      if (!colors) {
        return;
      }
      const start = colors.getVertexOffset(objectIndex);
      const end = colors.getVertexOffset(objectIndex + 1);
      colors.buffer.write(new Uint8Array(end - start), start);
    }
    /** (Internal) Re-enable all picking indices after multi-depth picking */
    restorePickingColors() {
      const { pickingColors, instancePickingColors } = this.getAttributeManager().attributes;
      const colors = pickingColors || instancePickingColors;
      if (!colors) {
        return;
      }
      if (
        // @ts-ignore (TS2531) this method is only called internally with internalState defined
        this.internalState.usesPickingColorCache && colors.value.buffer !== pickingColorCache.buffer
      ) {
        colors.value = pickingColorCache.subarray(0, colors.value.length);
      }
      colors.updateSubBuffer({ startOffset: 0 });
    }
    /* eslint-disable max-statements */
    /* (Internal) Called by layer manager when a new layer is found */
    _initialize() {
      assert8(!this.internalState);
      assert8(Number.isFinite(this.props.coordinateSystem));
      debug(TRACE_INITIALIZE, this);
      const attributeManager = this._getAttributeManager();
      if (attributeManager) {
        attributeManager.addInstanced({
          instancePickingColors: {
            type: "uint8",
            size: 4,
            noAlloc: true,
            // Updaters are always called with `this` pointing to the layer
            // eslint-disable-next-line @typescript-eslint/unbound-method
            update: this.calculateInstancePickingColors
          }
        });
      }
      this.internalState = new LayerState({
        attributeManager,
        layer: this
      });
      this._clearChangeFlags();
      this.state = {};
      Object.defineProperty(this.state, "attributeManager", {
        get: () => {
          log_default.deprecated("layer.state.attributeManager", "layer.getAttributeManager()")();
          return attributeManager;
        }
      });
      this.internalState.uniformTransitions = new UniformTransitionManager(this.context.timeline);
      this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);
      this.internalState.setAsyncProps(this.props);
      this.initializeState(this.context);
      for (const extension of this.props.extensions) {
        extension.initializeState.call(this, this.context, extension);
      }
      this.setChangeFlags({
        dataChanged: "init",
        propsChanged: "init",
        viewportChanged: true,
        extensionsChanged: true
      });
      this._update();
    }
    /** (Internal) Called by layer manager to transfer state from an old layer */
    _transferState(oldLayer) {
      debug(TRACE_MATCHED, this, this === oldLayer);
      const { state, internalState } = oldLayer;
      if (this === oldLayer) {
        return;
      }
      this.internalState = internalState;
      this.state = state;
      this.internalState.setAsyncProps(this.props);
      this._diffProps(this.props, this.internalState.getOldProps());
    }
    /** (Internal) Called by layer manager when a new layer is added or an existing layer is matched with a new instance */
    _update() {
      const stateNeedsUpdate = this.needsUpdate();
      debug(TRACE_UPDATE, this, stateNeedsUpdate);
      if (!stateNeedsUpdate) {
        return;
      }
      const currentProps = this.props;
      const context = this.context;
      const internalState = this.internalState;
      const currentViewport = context.viewport;
      const propsInTransition = this._updateUniformTransition();
      internalState.propsInTransition = propsInTransition;
      context.viewport = internalState.viewport || currentViewport;
      this.props = propsInTransition;
      try {
        const updateParams = this._getUpdateParams();
        const oldModels = this.getModels();
        if (context.device) {
          this.updateState(updateParams);
        } else {
          try {
            this.updateState(updateParams);
          } catch (error) {
          }
        }
        for (const extension of this.props.extensions) {
          extension.updateState.call(this, updateParams, extension);
        }
        this.setNeedsRedraw();
        this._updateAttributes();
        const modelChanged = this.getModels()[0] !== oldModels[0];
        this._postUpdate(updateParams, modelChanged);
      } finally {
        context.viewport = currentViewport;
        this.props = currentProps;
        this._clearChangeFlags();
        internalState.needsUpdate = false;
        internalState.resetOldProps();
      }
    }
    /* eslint-enable max-statements */
    /** (Internal) Called by manager when layer is about to be disposed 
        Note: not guaranteed to be called on application shutdown */
    _finalize() {
      debug(TRACE_FINALIZE, this);
      this.finalizeState(this.context);
      for (const extension of this.props.extensions) {
        extension.finalizeState.call(this, this.context, extension);
      }
    }
    // Calculates uniforms
    _drawLayer({
      renderPass,
      shaderModuleProps = null,
      uniforms = {},
      parameters: parameters2 = {}
    }) {
      this._updateAttributeTransition();
      const currentProps = this.props;
      const context = this.context;
      this.props = this.internalState.propsInTransition || currentProps;
      try {
        if (shaderModuleProps) {
          this.setShaderModuleProps(shaderModuleProps);
        }
        const { getPolygonOffset } = this.props;
        const offsets = getPolygonOffset && getPolygonOffset(uniforms) || [0, 0];
        if (context.device instanceof WebGLDevice) {
          context.device.setParametersWebGL({ polygonOffset: offsets });
        }
        for (const model of this.getModels()) {
          if (model.device.type === "webgpu") {
            model.setParameters({ ...model.parameters, ...parameters2 });
          } else {
            model.setParameters(parameters2);
          }
        }
        if (context.device instanceof WebGLDevice) {
          context.device.withParametersWebGL(parameters2, () => {
            const opts = { renderPass, shaderModuleProps, uniforms, parameters: parameters2, context };
            for (const extension of this.props.extensions) {
              extension.draw.call(this, opts, extension);
            }
            this.draw(opts);
          });
        } else {
          const opts = { renderPass, shaderModuleProps, uniforms, parameters: parameters2, context };
          for (const extension of this.props.extensions) {
            extension.draw.call(this, opts, extension);
          }
          this.draw(opts);
        }
      } finally {
        this.props = currentProps;
      }
    }
    // Helper methods
    /** Returns the current change flags */
    getChangeFlags() {
      return this.internalState?.changeFlags;
    }
    /* eslint-disable complexity */
    /** Dirty some change flags, will be handled by updateLayer */
    setChangeFlags(flags) {
      if (!this.internalState) {
        return;
      }
      const { changeFlags } = this.internalState;
      for (const key in flags) {
        if (flags[key]) {
          let flagChanged = false;
          switch (key) {
            case "dataChanged":
              const dataChangedReason = flags[key];
              const prevDataChangedReason = changeFlags[key];
              if (dataChangedReason && Array.isArray(prevDataChangedReason)) {
                changeFlags.dataChanged = Array.isArray(dataChangedReason) ? prevDataChangedReason.concat(dataChangedReason) : dataChangedReason;
                flagChanged = true;
              }
            default:
              if (!changeFlags[key]) {
                changeFlags[key] = flags[key];
                flagChanged = true;
              }
          }
          if (flagChanged) {
            debug(TRACE_CHANGE_FLAG, this, key, flags);
          }
        }
      }
      const propsOrDataChanged = Boolean(
        changeFlags.dataChanged || changeFlags.updateTriggersChanged || changeFlags.propsChanged || changeFlags.extensionsChanged
      );
      changeFlags.propsOrDataChanged = propsOrDataChanged;
      changeFlags.somethingChanged = propsOrDataChanged || changeFlags.viewportChanged || changeFlags.stateChanged;
    }
    /* eslint-enable complexity */
    /** Clear all changeFlags, typically after an update */
    _clearChangeFlags() {
      this.internalState.changeFlags = {
        dataChanged: false,
        propsChanged: false,
        updateTriggersChanged: false,
        viewportChanged: false,
        stateChanged: false,
        extensionsChanged: false,
        propsOrDataChanged: false,
        somethingChanged: false
      };
    }
    /** Compares the layers props with old props from a matched older layer
        and extracts change flags that describe what has change so that state
        can be update correctly with minimal effort */
    _diffProps(newProps, oldProps) {
      const changeFlags = diffProps(newProps, oldProps);
      if (changeFlags.updateTriggersChanged) {
        for (const key in changeFlags.updateTriggersChanged) {
          if (changeFlags.updateTriggersChanged[key]) {
            this.invalidateAttribute(key);
          }
        }
      }
      if (changeFlags.transitionsChanged) {
        for (const key in changeFlags.transitionsChanged) {
          this.internalState.uniformTransitions.add(
            key,
            oldProps[key],
            newProps[key],
            newProps.transitions?.[key]
          );
        }
      }
      return this.setChangeFlags(changeFlags);
    }
    /** (Internal) called by layer manager to perform extra props validation (in development only) */
    validateProps() {
      validateProps(this.props);
    }
    /** (Internal) Called by deck picker when the hovered object changes to update the auto highlight */
    updateAutoHighlight(info) {
      if (this.props.autoHighlight && !Number.isInteger(this.props.highlightedObjectIndex)) {
        this._updateAutoHighlight(info);
      }
    }
    // May be overriden by subclasses
    // TODO - simplify subclassing interface
    /** Update picking module parameters to highlight the hovered object */
    _updateAutoHighlight(info) {
      const picking2 = {
        // @ts-ignore
        highlightedObjectColor: info.picked ? info.color : null
      };
      const { highlightColor } = this.props;
      if (info.picked && typeof highlightColor === "function") {
        picking2.highlightColor = highlightColor(info);
      }
      this.setShaderModuleProps({ picking: picking2 });
      this.setNeedsRedraw();
    }
    /** Create new attribute manager */
    _getAttributeManager() {
      const context = this.context;
      return new AttributeManager(context.device, {
        id: this.props.id,
        stats: context.stats,
        timeline: context.timeline
      });
    }
    // Private methods
    /** Called after updateState to perform common tasks */
    // eslint-disable-next-line complexity
    _postUpdate(updateParams, forceUpdate) {
      const { props, oldProps } = updateParams;
      const model = this.state.model;
      if (model?.isInstanced) {
        model.setInstanceCount(this.getNumInstances());
      }
      const { autoHighlight, highlightedObjectIndex, highlightColor } = props;
      if (forceUpdate || oldProps.autoHighlight !== autoHighlight || oldProps.highlightedObjectIndex !== highlightedObjectIndex || oldProps.highlightColor !== highlightColor) {
        const picking2 = {};
        if (Array.isArray(highlightColor)) {
          picking2.highlightColor = highlightColor;
        }
        if (forceUpdate || oldProps.autoHighlight !== autoHighlight || highlightedObjectIndex !== oldProps.highlightedObjectIndex) {
          picking2.highlightedObjectColor = Number.isFinite(highlightedObjectIndex) && highlightedObjectIndex >= 0 ? this.encodePickingColor(highlightedObjectIndex) : null;
        }
        this.setShaderModuleProps({ picking: picking2 });
      }
    }
    _getUpdateParams() {
      return {
        props: this.props,
        // @ts-ignore TS2531 this method can only be called internally with internalState assigned
        oldProps: this.internalState.getOldProps(),
        context: this.context,
        // @ts-ignore TS2531 this method can only be called internally with internalState assigned
        changeFlags: this.internalState.changeFlags
      };
    }
    /** Checks state of attributes and model */
    _getNeedsRedraw(opts) {
      if (!this.internalState) {
        return false;
      }
      let redraw = false;
      redraw = redraw || this.internalState.needsRedraw && this.id;
      const attributeManager = this.getAttributeManager();
      const attributeManagerNeedsRedraw = attributeManager ? attributeManager.getNeedsRedraw(opts) : false;
      redraw = redraw || attributeManagerNeedsRedraw;
      if (redraw) {
        for (const extension of this.props.extensions) {
          extension.onNeedsRedraw.call(this, extension);
        }
      }
      this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;
      return redraw;
    }
    /** Callback when asyn prop is loaded */
    _onAsyncPropUpdated() {
      this._diffProps(this.props, this.internalState.getOldProps());
      this.setNeedsUpdate();
    }
  };
  Layer.defaultProps = defaultProps2;
  Layer.layerName = "Layer";

  // ../core/src/lib/composite-layer.ts
  var TRACE_RENDER_LAYERS2 = "compositeLayer.renderLayers";
  var CompositeLayer = class extends Layer {
    /** `true` if this layer renders other layers */
    get isComposite() {
      return true;
    }
    /** `true` if the layer renders to screen */
    get isDrawable() {
      return false;
    }
    /** Returns true if all async resources are loaded */
    get isLoaded() {
      return super.isLoaded && this.getSubLayers().every((layer) => layer.isLoaded);
    }
    /** Return last rendered sub layers */
    getSubLayers() {
      return this.internalState && this.internalState.subLayers || [];
    }
    // initializeState is usually not needed for composite layers
    // Provide empty definition to disable check for missing definition
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    initializeState(context) {
    }
    /** Updates selected state members and marks the composite layer to need rerender */
    setState(updateObject) {
      super.setState(updateObject);
      this.setNeedsUpdate();
    }
    /** called to augment the info object that is bubbled up from a sublayer
        override Layer.getPickingInfo() because decoding / setting uniform do
        not apply to a composite layer. */
    getPickingInfo({ info }) {
      const { object } = info;
      const isDataWrapped = object && object.__source && object.__source.parent && object.__source.parent.id === this.id;
      if (!isDataWrapped) {
        return info;
      }
      info.object = object.__source.object;
      info.index = object.__source.index;
      return info;
    }
    /**
     * Filters sub layers at draw time. Return true if the sub layer should be drawn.
     */
    filterSubLayer(context) {
      return true;
    }
    /** Returns true if sub layer needs to be rendered */
    shouldRenderSubLayer(subLayerId, data) {
      return data && data.length;
    }
    /** Returns sub layer class for a specific sublayer */
    getSubLayerClass(subLayerId, DefaultLayerClass) {
      const { _subLayerProps: overridingProps } = this.props;
      return overridingProps && overridingProps[subLayerId] && overridingProps[subLayerId].type || DefaultLayerClass;
    }
    /** When casting user data into another format to pass to sublayers,
        add reference to the original object and object index */
    getSubLayerRow(row, sourceObject, sourceObjectIndex) {
      row.__source = {
        parent: this,
        object: sourceObject,
        index: sourceObjectIndex
      };
      return row;
    }
    /** Some composite layers cast user data into another format before passing to sublayers
      We need to unwrap them before calling the accessor so that they see the original data
      objects */
    getSubLayerAccessor(accessor) {
      if (typeof accessor === "function") {
        const objectInfo = {
          index: -1,
          // @ts-ignore accessing resolved data
          data: this.props.data,
          target: []
        };
        return (x4, i7) => {
          if (x4 && x4.__source) {
            objectInfo.index = x4.__source.index;
            return accessor(x4.__source.object, objectInfo);
          }
          return accessor(x4, i7);
        };
      }
      return accessor;
    }
    /** Returns sub layer props for a specific sublayer */
    // eslint-disable-next-line complexity
    getSubLayerProps(sublayerProps = {}) {
      const {
        opacity,
        pickable,
        visible,
        parameters: parameters2,
        getPolygonOffset,
        highlightedObjectIndex,
        autoHighlight,
        highlightColor,
        coordinateSystem,
        coordinateOrigin,
        wrapLongitude,
        positionFormat,
        modelMatrix: modelMatrix2,
        extensions,
        fetch: fetch2,
        operation,
        _subLayerProps: overridingProps
      } = this.props;
      const newProps = {
        id: "",
        updateTriggers: {},
        opacity,
        pickable,
        visible,
        parameters: parameters2,
        getPolygonOffset,
        highlightedObjectIndex,
        autoHighlight,
        highlightColor,
        coordinateSystem,
        coordinateOrigin,
        wrapLongitude,
        positionFormat,
        modelMatrix: modelMatrix2,
        extensions,
        fetch: fetch2,
        operation
      };
      const overridingSublayerProps = overridingProps && sublayerProps.id && overridingProps[sublayerProps.id];
      const overridingSublayerTriggers = overridingSublayerProps && overridingSublayerProps.updateTriggers;
      const sublayerId = sublayerProps.id || "sublayer";
      if (overridingSublayerProps) {
        const propTypes = this.props[PROP_TYPES_SYMBOL];
        const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};
        for (const key in overridingSublayerProps) {
          const propType = subLayerPropTypes[key] || propTypes[key];
          if (propType && propType.type === "accessor") {
            overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);
          }
        }
      }
      Object.assign(
        newProps,
        sublayerProps,
        // experimental feature that allows users to override sublayer props via parent layer prop
        overridingSublayerProps
      );
      newProps.id = `${this.props.id}-${sublayerId}`;
      newProps.updateTriggers = {
        all: this.props.updateTriggers?.all,
        ...sublayerProps.updateTriggers,
        ...overridingSublayerTriggers
      };
      for (const extension of extensions) {
        const passThroughProps = extension.getSubLayerProps.call(this, extension);
        if (passThroughProps) {
          Object.assign(newProps, passThroughProps, {
            updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)
          });
        }
      }
      return newProps;
    }
    /** Update sub layers to highlight the hovered object */
    _updateAutoHighlight(info) {
      for (const layer of this.getSubLayers()) {
        layer.updateAutoHighlight(info);
      }
    }
    /** Override base Layer method */
    _getAttributeManager() {
      return null;
    }
    /** (Internal) Called after an update to rerender sub layers */
    _postUpdate(updateParams, forceUpdate) {
      let subLayers = this.internalState.subLayers;
      const shouldUpdate = !subLayers || this.needsUpdate();
      if (shouldUpdate) {
        const subLayersList = this.renderLayers();
        subLayers = flatten(subLayersList, Boolean);
        this.internalState.subLayers = subLayers;
      }
      debug(TRACE_RENDER_LAYERS2, this, shouldUpdate, subLayers);
      for (const layer of subLayers) {
        layer.parent = this;
      }
    }
  };
  CompositeLayer.layerName = "CompositeLayer";

  // ../core/src/viewports/globe-viewport.ts
  var DEGREES_TO_RADIANS6 = Math.PI / 180;
  var RADIANS_TO_DEGREES3 = 180 / Math.PI;
  var EARTH_RADIUS = 6370972;
  var GLOBE_RADIUS = 256;
  function getDistanceScales2() {
    const unitsPerMeter2 = GLOBE_RADIUS / EARTH_RADIUS;
    const unitsPerDegree = Math.PI / 180 * GLOBE_RADIUS;
    return {
      unitsPerMeter: [unitsPerMeter2, unitsPerMeter2, unitsPerMeter2],
      unitsPerMeter2: [0, 0, 0],
      metersPerUnit: [1 / unitsPerMeter2, 1 / unitsPerMeter2, 1 / unitsPerMeter2],
      unitsPerDegree: [unitsPerDegree, unitsPerDegree, unitsPerMeter2],
      unitsPerDegree2: [0, 0, 0],
      degreesPerUnit: [1 / unitsPerDegree, 1 / unitsPerDegree, 1 / unitsPerMeter2]
    };
  }
  var GlobeViewport = class extends Viewport {
    constructor(opts = {}) {
      const {
        longitude = 0,
        zoom = 0,
        // Matches Maplibre defaults
        // https://github.com/maplibre/maplibre-gl-js/blob/f8ab4b48d59ab8fe7b068b102538793bbdd4c848/src/geo/projection/globe_transform.ts#L632-L633
        nearZMultiplier = 0.5,
        farZMultiplier = 1,
        resolution = 10
      } = opts;
      let { latitude = 0, height, altitude = 1.5, fovy } = opts;
      latitude = Math.max(Math.min(latitude, MAX_LATITUDE), -MAX_LATITUDE);
      height = height || 1;
      if (fovy) {
        altitude = fovyToAltitude(fovy);
      } else {
        fovy = altitudeToFovy(altitude);
      }
      const scaleAdjust = 1 / Math.PI / Math.cos(latitude * Math.PI / 180);
      const scale24 = Math.pow(2, zoom) * scaleAdjust;
      const nearZ = opts.nearZ ?? nearZMultiplier;
      const farZ = opts.farZ ?? (altitude + GLOBE_RADIUS * 2 * scale24 / height) * farZMultiplier;
      const viewMatrix2 = new Matrix4().lookAt({ eye: [0, -altitude, 0], up: [0, 0, 1] });
      viewMatrix2.rotateX(latitude * DEGREES_TO_RADIANS6);
      viewMatrix2.rotateZ(-longitude * DEGREES_TO_RADIANS6);
      viewMatrix2.scale(scale24 / height);
      super({
        ...opts,
        // x, y, width,
        height,
        // view matrix
        viewMatrix: viewMatrix2,
        longitude,
        latitude,
        zoom,
        // projection matrix parameters
        distanceScales: getDistanceScales2(),
        fovy,
        focalDistance: altitude,
        near: nearZ,
        far: farZ
      });
      this.scale = scale24;
      this.latitude = latitude;
      this.longitude = longitude;
      this.resolution = resolution;
    }
    get projectionMode() {
      return PROJECTION_MODE.GLOBE;
    }
    getDistanceScales() {
      return this.distanceScales;
    }
    getBounds(options = {}) {
      const unprojectOption = { targetZ: options.z || 0 };
      const left = this.unproject([0, this.height / 2], unprojectOption);
      const top = this.unproject([this.width / 2, 0], unprojectOption);
      const right = this.unproject([this.width, this.height / 2], unprojectOption);
      const bottom = this.unproject([this.width / 2, this.height], unprojectOption);
      if (right[0] < this.longitude)
        right[0] += 360;
      if (left[0] > this.longitude)
        left[0] -= 360;
      return [
        Math.min(left[0], right[0], top[0], bottom[0]),
        Math.min(left[1], right[1], top[1], bottom[1]),
        Math.max(left[0], right[0], top[0], bottom[0]),
        Math.max(left[1], right[1], top[1], bottom[1])
      ];
    }
    unproject(xyz, { topLeft = true, targetZ } = {}) {
      const [x4, y5, z4] = xyz;
      const y22 = topLeft ? y5 : this.height - y5;
      const { pixelUnprojectionMatrix } = this;
      let coord;
      if (Number.isFinite(z4)) {
        coord = transformVector2(pixelUnprojectionMatrix, [x4, y22, z4, 1]);
      } else {
        const coord0 = transformVector2(pixelUnprojectionMatrix, [x4, y22, -1, 1]);
        const coord1 = transformVector2(pixelUnprojectionMatrix, [x4, y22, 1, 1]);
        const lt2 = ((targetZ || 0) / EARTH_RADIUS + 1) * GLOBE_RADIUS;
        const lSqr = vec3_exports.sqrLen(vec3_exports.sub([], coord0, coord1));
        const l0Sqr = vec3_exports.sqrLen(coord0);
        const l1Sqr = vec3_exports.sqrLen(coord1);
        const sSqr = (4 * l0Sqr * l1Sqr - (lSqr - l0Sqr - l1Sqr) ** 2) / 16;
        const dSqr = 4 * sSqr / lSqr;
        const r0 = Math.sqrt(l0Sqr - dSqr);
        const dr = Math.sqrt(Math.max(0, lt2 * lt2 - dSqr));
        const t5 = (r0 - dr) / Math.sqrt(lSqr);
        coord = vec3_exports.lerp([], coord0, coord1, t5);
      }
      const [X2, Y2, Z2] = this.unprojectPosition(coord);
      if (Number.isFinite(z4)) {
        return [X2, Y2, Z2];
      }
      return Number.isFinite(targetZ) ? [X2, Y2, targetZ] : [X2, Y2];
    }
    projectPosition(xyz) {
      const [lng, lat, Z2 = 0] = xyz;
      const lambda = lng * DEGREES_TO_RADIANS6;
      const phi = lat * DEGREES_TO_RADIANS6;
      const cosPhi = Math.cos(phi);
      const D4 = (Z2 / EARTH_RADIUS + 1) * GLOBE_RADIUS;
      return [Math.sin(lambda) * cosPhi * D4, -Math.cos(lambda) * cosPhi * D4, Math.sin(phi) * D4];
    }
    unprojectPosition(xyz) {
      const [x4, y5, z4] = xyz;
      const D4 = vec3_exports.len(xyz);
      const phi = Math.asin(z4 / D4);
      const lambda = Math.atan2(x4, -y5);
      const lng = lambda * RADIANS_TO_DEGREES3;
      const lat = phi * RADIANS_TO_DEGREES3;
      const Z2 = (D4 / GLOBE_RADIUS - 1) * EARTH_RADIUS;
      return [lng, lat, Z2];
    }
    projectFlat(xyz) {
      return xyz;
    }
    unprojectFlat(xyz) {
      return xyz;
    }
    panByPosition(coords, pixel) {
      const fromPosition = this.unproject(pixel);
      return {
        longitude: coords[0] - fromPosition[0] + this.longitude,
        latitude: coords[1] - fromPosition[1] + this.latitude
      };
    }
  };
  function transformVector2(matrix, vector) {
    const result = vec4_exports.transformMat4([], vector, matrix);
    vec4_exports.scale(result, result, 1 / result[3]);
    return result;
  }

  // ../core/src/viewports/orbit-viewport.ts
  var DEGREES_TO_RADIANS7 = Math.PI / 180;
  function getViewMatrix2({
    height,
    focalDistance,
    orbitAxis,
    rotationX,
    rotationOrbit,
    zoom
  }) {
    const up = orbitAxis === "Z" ? [0, 0, 1] : [0, 1, 0];
    const eye = orbitAxis === "Z" ? [0, -focalDistance, 0] : [0, 0, focalDistance];
    const viewMatrix2 = new Matrix4().lookAt({ eye, up });
    viewMatrix2.rotateX(rotationX * DEGREES_TO_RADIANS7);
    if (orbitAxis === "Z") {
      viewMatrix2.rotateZ(rotationOrbit * DEGREES_TO_RADIANS7);
    } else {
      viewMatrix2.rotateY(rotationOrbit * DEGREES_TO_RADIANS7);
    }
    const projectionScale = Math.pow(2, zoom) / height;
    viewMatrix2.scale(projectionScale);
    return viewMatrix2;
  }
  var OrbitViewport = class extends Viewport {
    constructor(props) {
      const {
        height,
        projectionMatrix,
        fovy = 50,
        // For setting camera position
        orbitAxis = "Z",
        // Orbit axis with 360 degrees rotating freedom, can only be 'Y' or 'Z'
        target: target2 = [0, 0, 0],
        // Which point is camera looking at, default origin
        rotationX = 0,
        // Rotating angle around X axis
        rotationOrbit = 0,
        // Rotating angle around orbit axis
        zoom = 0
      } = props;
      const focalDistance = projectionMatrix ? projectionMatrix[5] / 2 : fovyToAltitude(fovy);
      super({
        ...props,
        // in case viewState contains longitude/latitude values,
        // make sure that the base Viewport class does not treat this as a geospatial viewport
        longitude: void 0,
        viewMatrix: getViewMatrix2({
          height: height || 1,
          focalDistance,
          orbitAxis,
          rotationX,
          rotationOrbit,
          zoom
        }),
        fovy,
        focalDistance,
        position: target2,
        zoom
      });
      this.projectedCenter = this.project(this.center);
    }
    unproject(xyz, { topLeft = true } = {}) {
      const [x4, y5, z4 = this.projectedCenter[2]] = xyz;
      const y22 = topLeft ? y5 : this.height - y5;
      const [X2, Y2, Z2] = pixelsToWorld([x4, y22, z4], this.pixelUnprojectionMatrix);
      return [X2, Y2, Z2];
    }
    panByPosition(coords, pixel) {
      const p0 = this.project(coords);
      const nextCenter = [
        this.width / 2 + p0[0] - pixel[0],
        this.height / 2 + p0[1] - pixel[1],
        this.projectedCenter[2]
      ];
      return {
        target: this.unproject(nextCenter)
      };
    }
  };

  // ../core/src/viewports/orthographic-viewport.ts
  var viewMatrix = new Matrix4().lookAt({ eye: [0, 0, 1] });
  function getProjectionMatrix2({
    width,
    height,
    near,
    far,
    padding
  }) {
    let left = -width / 2;
    let right = width / 2;
    let bottom = -height / 2;
    let top = height / 2;
    if (padding) {
      const { left: l5 = 0, right: r5 = 0, top: t5 = 0, bottom: b4 = 0 } = padding;
      const offsetX = clamp((l5 + width - r5) / 2, 0, width) - width / 2;
      const offsetY = clamp((t5 + height - b4) / 2, 0, height) - height / 2;
      left -= offsetX;
      right -= offsetX;
      bottom += offsetY;
      top += offsetY;
    }
    return new Matrix4().ortho({
      left,
      right,
      bottom,
      top,
      near,
      far
    });
  }
  var OrthographicViewport = class extends Viewport {
    constructor(props) {
      const {
        width,
        height,
        near = 0.1,
        far = 1e3,
        zoom = 0,
        target: target2 = [0, 0, 0],
        padding = null,
        flipY = true
      } = props;
      const zoomX = Array.isArray(zoom) ? zoom[0] : zoom;
      const zoomY = Array.isArray(zoom) ? zoom[1] : zoom;
      const zoom_ = Math.min(zoomX, zoomY);
      const scale24 = Math.pow(2, zoom_);
      let distanceScales;
      if (zoomX !== zoomY) {
        const scaleX2 = Math.pow(2, zoomX);
        const scaleY2 = Math.pow(2, zoomY);
        distanceScales = {
          unitsPerMeter: [scaleX2 / scale24, scaleY2 / scale24, 1],
          metersPerUnit: [scale24 / scaleX2, scale24 / scaleY2, 1]
        };
      }
      super({
        ...props,
        // in case viewState contains longitude/latitude values,
        // make sure that the base Viewport class does not treat this as a geospatial viewport
        longitude: void 0,
        position: target2,
        viewMatrix: viewMatrix.clone().scale([scale24, scale24 * (flipY ? -1 : 1), scale24]),
        projectionMatrix: getProjectionMatrix2({
          width: width || 1,
          height: height || 1,
          padding,
          near,
          far
        }),
        zoom: zoom_,
        distanceScales
      });
    }
    projectFlat([X2, Y2]) {
      const { unitsPerMeter: unitsPerMeter2 } = this.distanceScales;
      return [X2 * unitsPerMeter2[0], Y2 * unitsPerMeter2[1]];
    }
    unprojectFlat([x4, y5]) {
      const { metersPerUnit } = this.distanceScales;
      return [x4 * metersPerUnit[0], y5 * metersPerUnit[1]];
    }
    /* Needed by LinearInterpolator */
    panByPosition(coords, pixel) {
      const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);
      const toLocation = this.projectFlat(coords);
      const translate11 = vec2_exports.add([], toLocation, vec2_exports.negate([], fromLocation));
      const newCenter = vec2_exports.add([], this.center, translate11);
      return { target: this.unprojectFlat(newCenter) };
    }
  };

  // ../core/src/viewports/first-person-viewport.ts
  var FirstPersonViewport = class extends Viewport {
    constructor(props) {
      const { longitude, latitude, modelMatrix: modelMatrix2, bearing = 0, pitch = 0, up = [0, 0, 1] } = props;
      const spherical = new SphericalCoordinates({
        bearing,
        // Avoid "pixel project matrix not invertible" error
        pitch: pitch === -90 ? 1e-4 : 90 + pitch
      });
      const dir = spherical.toVector3().normalize();
      const center2 = modelMatrix2 ? new Matrix4(modelMatrix2).transformAsVector(dir) : dir;
      const zoom = Number.isFinite(latitude) ? getMeterZoom({ latitude }) : 0;
      const scale24 = Math.pow(2, zoom);
      const viewMatrix2 = new Matrix4().lookAt({ eye: [0, 0, 0], center: center2, up }).scale(scale24);
      super({
        ...props,
        zoom,
        viewMatrix: viewMatrix2
      });
      this.latitude = latitude;
      this.longitude = longitude;
    }
  };

  // ../core/src/controllers/first-person-controller.ts
  var MOVEMENT_SPEED = 20;
  var PAN_SPEED = 500;
  var FirstPersonState = class extends ViewState {
    constructor(options) {
      const {
        /* Viewport arguments */
        width,
        // Width of viewport
        height,
        // Height of viewport
        // Position and orientation
        position = [0, 0, 0],
        // typically in meters from anchor point
        bearing = 0,
        // Rotation around y axis
        pitch = 0,
        // Rotation around x axis
        // Geospatial anchor
        longitude = null,
        latitude = null,
        maxPitch = 90,
        minPitch = -90,
        // Model state when the rotate operation first started
        startRotatePos,
        startBearing,
        startPitch,
        startZoomPosition,
        startPanPos,
        startPanPosition
      } = options;
      super(
        {
          width,
          height,
          position,
          bearing,
          pitch,
          longitude,
          latitude,
          maxPitch,
          minPitch
        },
        {
          startRotatePos,
          startBearing,
          startPitch,
          startZoomPosition,
          startPanPos,
          startPanPosition
        }
      );
      this.makeViewport = options.makeViewport;
    }
    /* Public API */
    /**
     * Start panning
     * @param {[Number, Number]} pos - position on screen where the pointer grabs
     */
    panStart({ pos }) {
      const { position } = this.getViewportProps();
      return this._getUpdatedState({
        startPanPos: pos,
        startPanPosition: position
      });
    }
    /**
     * Pan
     * @param {[Number, Number]} pos - position on screen where the pointer is
     */
    pan({ pos }) {
      if (!pos) {
        return this;
      }
      const { startPanPos = [0, 0], startPanPosition = [0, 0] } = this.getState();
      const { width, height, bearing, pitch } = this.getViewportProps();
      const deltaScaleX = PAN_SPEED * (pos[0] - startPanPos[0]) / width;
      const deltaScaleY = PAN_SPEED * (pos[1] - startPanPos[1]) / height;
      const up = new SphericalCoordinates({ bearing, pitch });
      const forward = new SphericalCoordinates({ bearing, pitch: -90 });
      const yDirection = up.toVector3().normalize();
      const xDirection = forward.toVector3().cross(yDirection).normalize();
      return this._getUpdatedState({
        position: new Vector3(startPanPosition).add(xDirection.scale(deltaScaleX)).add(yDirection.scale(deltaScaleY))
      });
    }
    /**
     * End panning
     * Must call if `panStart()` was called
     */
    panEnd() {
      return this._getUpdatedState({
        startPanPos: null,
        startPanPosition: null
      });
    }
    /**
     * Start rotating
     * @param {[Number, Number]} pos - position on screen where the pointer grabs
     */
    rotateStart({ pos }) {
      return this._getUpdatedState({
        startRotatePos: pos,
        startBearing: this.getViewportProps().bearing,
        startPitch: this.getViewportProps().pitch
      });
    }
    /**
     * Rotate
     * @param {[Number, Number]} pos - position on screen where the pointer is
     */
    rotate({
      pos,
      deltaAngleX = 0,
      deltaAngleY = 0
    }) {
      const { startRotatePos, startBearing, startPitch } = this.getState();
      const { width, height } = this.getViewportProps();
      if (!startRotatePos || startBearing === void 0 || startPitch === void 0) {
        return this;
      }
      let newRotation;
      if (pos) {
        const deltaScaleX = (pos[0] - startRotatePos[0]) / width;
        const deltaScaleY = (pos[1] - startRotatePos[1]) / height;
        newRotation = {
          bearing: startBearing - deltaScaleX * 180,
          pitch: startPitch - deltaScaleY * 90
        };
      } else {
        newRotation = {
          bearing: startBearing - deltaAngleX,
          pitch: startPitch - deltaAngleY
        };
      }
      return this._getUpdatedState(newRotation);
    }
    /**
     * End rotating
     * Must call if `rotateStart()` was called
     */
    rotateEnd() {
      return this._getUpdatedState({
        startRotatePos: null,
        startBearing: null,
        startPitch: null
      });
    }
    /**
     * Start zooming
     * @param {[Number, Number]} pos - position on screen where the pointer grabs
     */
    zoomStart() {
      return this._getUpdatedState({
        startZoomPosition: this.getViewportProps().position
      });
    }
    /**
     * Zoom
     * @param {[Number, Number]} pos - position on screen where the current center is
     * @param {[Number, Number]} startPos - the center position at
     *   the start of the operation. Must be supplied of `zoomStart()` was not called
     * @param {Number} scale - a number between [0, 1] specifying the accumulated
     *   relative scale.
     */
    zoom({ pos, scale: scale24 }) {
      const viewportProps = this.getViewportProps();
      const startZoomPosition = this.getState().startZoomPosition || viewportProps.position;
      const viewport = this.makeViewport(viewportProps);
      const { projectionMatrix, width } = viewport;
      const fovxRadians = 2 * Math.atan(1 / projectionMatrix[0]);
      const angle10 = fovxRadians * (pos[0] / width - 0.5);
      const direction = this.getDirection(true);
      return this._move(
        direction.rotateZ({ radians: -angle10 }),
        Math.log2(scale24) * MOVEMENT_SPEED,
        startZoomPosition
      );
    }
    /**
     * End zooming
     * Must call if `zoomStart()` was called
     */
    zoomEnd() {
      return this._getUpdatedState({
        startZoomPosition: null
      });
    }
    moveLeft(speed = MOVEMENT_SPEED) {
      const direction = this.getDirection(true);
      return this._move(direction.rotateZ({ radians: Math.PI / 2 }), speed);
    }
    moveRight(speed = MOVEMENT_SPEED) {
      const direction = this.getDirection(true);
      return this._move(direction.rotateZ({ radians: -Math.PI / 2 }), speed);
    }
    // forward
    moveUp(speed = MOVEMENT_SPEED) {
      const direction = this.getDirection(true);
      return this._move(direction, speed);
    }
    // backward
    moveDown(speed = MOVEMENT_SPEED) {
      const direction = this.getDirection(true);
      return this._move(direction.negate(), speed);
    }
    rotateLeft(speed = 15) {
      return this._getUpdatedState({
        bearing: this.getViewportProps().bearing - speed
      });
    }
    rotateRight(speed = 15) {
      return this._getUpdatedState({
        bearing: this.getViewportProps().bearing + speed
      });
    }
    rotateUp(speed = 10) {
      return this._getUpdatedState({
        pitch: this.getViewportProps().pitch + speed
      });
    }
    rotateDown(speed = 10) {
      return this._getUpdatedState({
        pitch: this.getViewportProps().pitch - speed
      });
    }
    zoomIn(speed = MOVEMENT_SPEED) {
      return this._move(new Vector3(0, 0, 1), speed);
    }
    zoomOut(speed = MOVEMENT_SPEED) {
      return this._move(new Vector3(0, 0, -1), speed);
    }
    // shortest path between two view states
    shortestPathFrom(viewState) {
      const fromProps = viewState.getViewportProps();
      const props = { ...this.getViewportProps() };
      const { bearing, longitude } = props;
      if (Math.abs(bearing - fromProps.bearing) > 180) {
        props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;
      }
      if (longitude !== null && fromProps.longitude !== null && Math.abs(longitude - fromProps.longitude) > 180) {
        props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;
      }
      return props;
    }
    /* Private methods */
    _move(direction, speed, fromPosition = this.getViewportProps().position) {
      const delta = direction.scale(speed);
      return this._getUpdatedState({
        position: new Vector3(fromPosition).add(delta)
      });
    }
    getDirection(use2D = false) {
      const spherical = new SphericalCoordinates({
        bearing: this.getViewportProps().bearing,
        pitch: use2D ? 90 : 90 + this.getViewportProps().pitch
      });
      const direction = spherical.toVector3().normalize();
      return direction;
    }
    _getUpdatedState(newProps) {
      return new FirstPersonState({
        makeViewport: this.makeViewport,
        ...this.getViewportProps(),
        ...this.getState(),
        ...newProps
      });
    }
    // Apply any constraints (mathematical or defined by _viewportProps) to map state
    applyConstraints(props) {
      const { pitch, maxPitch, minPitch, longitude, bearing } = props;
      props.pitch = clamp(pitch, minPitch, maxPitch);
      if (longitude !== null && (longitude < -180 || longitude > 180)) {
        props.longitude = mod2(longitude + 180, 360) - 180;
      }
      if (bearing < -180 || bearing > 180) {
        props.bearing = mod2(bearing + 180, 360) - 180;
      }
      return props;
    }
  };
  var FirstPersonController = class extends Controller {
    constructor() {
      super(...arguments);
      this.ControllerState = FirstPersonState;
      this.transition = {
        transitionDuration: 300,
        transitionInterpolator: new LinearInterpolator(["position", "pitch", "bearing"])
      };
    }
  };

  // ../core/src/views/first-person-view.ts
  var FirstPersonView = class extends View {
    constructor(props = {}) {
      super(props);
    }
    getViewportType() {
      return FirstPersonViewport;
    }
    get ControllerType() {
      return FirstPersonController;
    }
  };
  FirstPersonView.displayName = "FirstPersonView";

  // ../core/src/controllers/orbit-controller.ts
  var OrbitState = class extends ViewState {
    constructor(options) {
      const {
        /* Viewport arguments */
        width,
        // Width of viewport
        height,
        // Height of viewport
        rotationX = 0,
        // Rotation around x axis
        rotationOrbit = 0,
        // Rotation around orbit axis
        target: target2 = [0, 0, 0],
        zoom = 0,
        /* Viewport constraints */
        minRotationX = -90,
        maxRotationX = 90,
        minZoom = -Infinity,
        maxZoom = Infinity,
        /** Interaction states, required to calculate change during transform */
        // Model state when the pan operation first started
        startPanPosition,
        // Model state when the rotate operation first started
        startRotatePos,
        startRotationX,
        startRotationOrbit,
        // Model state when the zoom operation first started
        startZoomPosition,
        startZoom
      } = options;
      super(
        {
          width,
          height,
          rotationX,
          rotationOrbit,
          target: target2,
          zoom,
          minRotationX,
          maxRotationX,
          minZoom,
          maxZoom
        },
        {
          startPanPosition,
          startRotatePos,
          startRotationX,
          startRotationOrbit,
          startZoomPosition,
          startZoom
        }
      );
      this.makeViewport = options.makeViewport;
    }
    /**
     * Start panning
     * @param {[Number, Number]} pos - position on screen where the pointer grabs
     */
    panStart({ pos }) {
      return this._getUpdatedState({
        startPanPosition: this._unproject(pos)
      });
    }
    /**
     * Pan
     * @param {[Number, Number]} pos - position on screen where the pointer is
     */
    pan({ pos, startPosition }) {
      const startPanPosition = this.getState().startPanPosition || startPosition;
      if (!startPanPosition) {
        return this;
      }
      const viewport = this.makeViewport(this.getViewportProps());
      const newProps = viewport.panByPosition(startPanPosition, pos);
      return this._getUpdatedState(newProps);
    }
    /**
     * End panning
     * Must call if `panStart()` was called
     */
    panEnd() {
      return this._getUpdatedState({
        startPanPosition: null
      });
    }
    /**
     * Start rotating
     * @param {[Number, Number]} pos - position on screen where the pointer grabs
     */
    rotateStart({ pos }) {
      return this._getUpdatedState({
        startRotatePos: pos,
        startRotationX: this.getViewportProps().rotationX,
        startRotationOrbit: this.getViewportProps().rotationOrbit
      });
    }
    /**
     * Rotate
     * @param {[Number, Number]} pos - position on screen where the pointer is
     */
    rotate({
      pos,
      deltaAngleX = 0,
      deltaAngleY = 0
    }) {
      const { startRotatePos, startRotationX, startRotationOrbit } = this.getState();
      const { width, height } = this.getViewportProps();
      if (!startRotatePos || startRotationX === void 0 || startRotationOrbit === void 0) {
        return this;
      }
      let newRotation;
      if (pos) {
        let deltaScaleX = (pos[0] - startRotatePos[0]) / width;
        const deltaScaleY = (pos[1] - startRotatePos[1]) / height;
        if (startRotationX < -90 || startRotationX > 90) {
          deltaScaleX *= -1;
        }
        newRotation = {
          rotationX: startRotationX + deltaScaleY * 180,
          rotationOrbit: startRotationOrbit + deltaScaleX * 180
        };
      } else {
        newRotation = {
          rotationX: startRotationX + deltaAngleY,
          rotationOrbit: startRotationOrbit + deltaAngleX
        };
      }
      return this._getUpdatedState(newRotation);
    }
    /**
     * End rotating
     * Must call if `rotateStart()` was called
     */
    rotateEnd() {
      return this._getUpdatedState({
        startRotationX: null,
        startRotationOrbit: null
      });
    }
    // shortest path between two view states
    shortestPathFrom(viewState) {
      const fromProps = viewState.getViewportProps();
      const props = { ...this.getViewportProps() };
      const { rotationOrbit } = props;
      if (Math.abs(rotationOrbit - fromProps.rotationOrbit) > 180) {
        props.rotationOrbit = rotationOrbit < 0 ? rotationOrbit + 360 : rotationOrbit - 360;
      }
      return props;
    }
    /**
     * Start zooming
     * @param {[Number, Number]} pos - position on screen where the pointer grabs
     */
    zoomStart({ pos }) {
      return this._getUpdatedState({
        startZoomPosition: this._unproject(pos),
        startZoom: this.getViewportProps().zoom
      });
    }
    /**
     * Zoom
     * @param {[Number, Number]} pos - position on screen where the current target is
     * @param {[Number, Number]} startPos - the target position at
     *   the start of the operation. Must be supplied of `zoomStart()` was not called
     * @param {Number} scale - a number between [0, 1] specifying the accumulated
     *   relative scale.
     */
    zoom({
      pos,
      startPos,
      scale: scale24
    }) {
      let { startZoom, startZoomPosition } = this.getState();
      if (!startZoomPosition) {
        startZoom = this.getViewportProps().zoom;
        startZoomPosition = this._unproject(startPos) || this._unproject(pos);
      }
      if (!startZoomPosition) {
        return this;
      }
      const newZoom = this._calculateNewZoom({ scale: scale24, startZoom });
      const zoomedViewport = this.makeViewport({ ...this.getViewportProps(), zoom: newZoom });
      return this._getUpdatedState({
        zoom: newZoom,
        ...zoomedViewport.panByPosition(startZoomPosition, pos)
      });
    }
    /**
     * End zooming
     * Must call if `zoomStart()` was called
     */
    zoomEnd() {
      return this._getUpdatedState({
        startZoomPosition: null,
        startZoom: null
      });
    }
    zoomIn(speed = 2) {
      return this._getUpdatedState({
        zoom: this._calculateNewZoom({ scale: speed })
      });
    }
    zoomOut(speed = 2) {
      return this._getUpdatedState({
        zoom: this._calculateNewZoom({ scale: 1 / speed })
      });
    }
    moveLeft(speed = 50) {
      return this._panFromCenter([-speed, 0]);
    }
    moveRight(speed = 50) {
      return this._panFromCenter([speed, 0]);
    }
    moveUp(speed = 50) {
      return this._panFromCenter([0, -speed]);
    }
    moveDown(speed = 50) {
      return this._panFromCenter([0, speed]);
    }
    rotateLeft(speed = 15) {
      return this._getUpdatedState({
        rotationOrbit: this.getViewportProps().rotationOrbit - speed
      });
    }
    rotateRight(speed = 15) {
      return this._getUpdatedState({
        rotationOrbit: this.getViewportProps().rotationOrbit + speed
      });
    }
    rotateUp(speed = 10) {
      return this._getUpdatedState({
        rotationX: this.getViewportProps().rotationX - speed
      });
    }
    rotateDown(speed = 10) {
      return this._getUpdatedState({
        rotationX: this.getViewportProps().rotationX + speed
      });
    }
    /* Private methods */
    _unproject(pos) {
      const viewport = this.makeViewport(this.getViewportProps());
      return pos && viewport.unproject(pos);
    }
    // Calculates new zoom
    _calculateNewZoom({
      scale: scale24,
      startZoom
    }) {
      const { maxZoom, minZoom } = this.getViewportProps();
      if (startZoom === void 0) {
        startZoom = this.getViewportProps().zoom;
      }
      const zoom = startZoom + Math.log2(scale24);
      return clamp(zoom, minZoom, maxZoom);
    }
    _panFromCenter(offset) {
      const { width, height, target: target2 } = this.getViewportProps();
      return this.pan({
        startPosition: target2,
        pos: [width / 2 + offset[0], height / 2 + offset[1]]
      });
    }
    _getUpdatedState(newProps) {
      return new this.constructor({
        makeViewport: this.makeViewport,
        ...this.getViewportProps(),
        ...this.getState(),
        ...newProps
      });
    }
    // Apply any constraints (mathematical or defined by _viewportProps) to map state
    applyConstraints(props) {
      const { maxZoom, minZoom, zoom, maxRotationX, minRotationX, rotationOrbit } = props;
      props.zoom = Array.isArray(zoom) ? [clamp(zoom[0], minZoom, maxZoom), clamp(zoom[1], minZoom, maxZoom)] : clamp(zoom, minZoom, maxZoom);
      props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);
      if (rotationOrbit < -180 || rotationOrbit > 180) {
        props.rotationOrbit = mod2(rotationOrbit + 180, 360) - 180;
      }
      return props;
    }
  };
  var OrbitController = class extends Controller {
    constructor() {
      super(...arguments);
      this.ControllerState = OrbitState;
      this.transition = {
        transitionDuration: 300,
        transitionInterpolator: new LinearInterpolator({
          transitionProps: {
            compare: ["target", "zoom", "rotationX", "rotationOrbit"],
            required: ["target", "zoom"]
          }
        })
      };
    }
  };

  // ../core/src/views/orbit-view.ts
  var OrbitView = class extends View {
    constructor(props = {}) {
      super(props);
      this.props.orbitAxis = props.orbitAxis || "Z";
    }
    getViewportType() {
      return OrbitViewport;
    }
    get ControllerType() {
      return OrbitController;
    }
  };
  OrbitView.displayName = "OrbitView";

  // ../core/src/controllers/orthographic-controller.ts
  var OrthographicState = class extends OrbitState {
    constructor(props) {
      super(props);
      this.zoomAxis = props.zoomAxis || "all";
    }
    _calculateNewZoom({ scale: scale24, startZoom }) {
      const { maxZoom, minZoom } = this.getViewportProps();
      if (startZoom === void 0) {
        startZoom = this.getViewportProps().zoom;
      }
      let deltaZoom = Math.log2(scale24);
      if (Array.isArray(startZoom)) {
        let [newZoomX, newZoomY] = startZoom;
        switch (this.zoomAxis) {
          case "X":
            newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);
            break;
          case "Y":
            newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);
            break;
          default:
            let z4 = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);
            if (z4 < minZoom) {
              deltaZoom += minZoom - z4;
            }
            z4 = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);
            if (z4 > maxZoom) {
              deltaZoom += maxZoom - z4;
            }
            newZoomX += deltaZoom;
            newZoomY += deltaZoom;
        }
        return [newZoomX, newZoomY];
      }
      return clamp(startZoom + deltaZoom, minZoom, maxZoom);
    }
  };
  var OrthographicController = class extends Controller {
    constructor() {
      super(...arguments);
      this.ControllerState = OrthographicState;
      this.transition = {
        transitionDuration: 300,
        transitionInterpolator: new LinearInterpolator(["target", "zoom"])
      };
      this.dragMode = "pan";
    }
    _onPanRotate() {
      return false;
    }
  };

  // ../core/src/views/orthographic-view.ts
  var OrthographicView = class extends View {
    constructor(props = {}) {
      super(props);
    }
    getViewportType() {
      return OrthographicViewport;
    }
    get ControllerType() {
      return OrthographicController;
    }
  };
  OrthographicView.displayName = "OrthographicView";

  // ../core/src/controllers/globe-controller.ts
  var GlobeState = class extends MapState {
    // Apply any constraints (mathematical or defined by _viewportProps) to map state
    applyConstraints(props) {
      const { maxZoom, minZoom, zoom } = props;
      props.zoom = clamp(zoom, minZoom, maxZoom);
      const { longitude, latitude } = props;
      if (longitude < -180 || longitude > 180) {
        props.longitude = mod2(longitude + 180, 360) - 180;
      }
      props.latitude = clamp(latitude, -MAX_LATITUDE, MAX_LATITUDE);
      return props;
    }
  };
  var GlobeController = class extends Controller {
    constructor() {
      super(...arguments);
      this.ControllerState = GlobeState;
      this.transition = {
        transitionDuration: 300,
        transitionInterpolator: new LinearInterpolator(["longitude", "latitude", "zoom"])
      };
      this.dragMode = "pan";
    }
    setProps(props) {
      super.setProps(props);
      this.dragRotate = false;
      this.touchRotate = false;
    }
  };

  // ../core/src/views/globe-view.ts
  var GlobeView = class extends View {
    constructor(props = {}) {
      super(props);
    }
    getViewportType(viewState) {
      return viewState.zoom > 12 ? WebMercatorViewport2 : GlobeViewport;
    }
    get ControllerType() {
      return GlobeController;
    }
  };
  GlobeView.displayName = "GlobeView";

  // ../core/src/lib/layer-extension.ts
  var LayerExtension = class {
    static get componentName() {
      return Object.prototype.hasOwnProperty.call(this, "extensionName") ? this.extensionName : "";
    }
    constructor(opts) {
      if (opts) {
        this.opts = opts;
      }
    }
    /** Returns true if two extensions are equivalent */
    equals(extension) {
      if (this === extension) {
        return true;
      }
      return this.constructor === extension.constructor && deepEqual2(this.opts, extension.opts, 1);
    }
    /** Only called if attached to a primitive layer */
    getShaders(extension) {
      return null;
    }
    /** Only called if attached to a CompositeLayer */
    getSubLayerProps(extension) {
      const { defaultProps: defaultProps49 } = extension.constructor;
      const newProps = {
        updateTriggers: {}
      };
      for (const key in defaultProps49) {
        if (key in this.props) {
          const propDef = defaultProps49[key];
          const propValue = this.props[key];
          newProps[key] = propValue;
          if (propDef && propDef.type === "accessor") {
            newProps.updateTriggers[key] = this.props.updateTriggers[key];
            if (typeof propValue === "function") {
              newProps[key] = this.getSubLayerAccessor(propValue);
            }
          }
        }
      }
      return newProps;
    }
    /* eslint-disable @typescript-eslint/no-empty-function */
    initializeState(context, extension) {
    }
    updateState(params, extension) {
    }
    onNeedsRedraw(extension) {
    }
    getNeedsPickingBuffer(extension) {
      return false;
    }
    draw(params, extension) {
    }
    finalizeState(context, extension) {
    }
  };
  LayerExtension.defaultProps = {};
  LayerExtension.extensionName = "LayerExtension";

  // ../core/src/transitions/fly-to-interpolator.ts
  var LINEARLY_INTERPOLATED_PROPS = {
    bearing: 0,
    pitch: 0,
    position: [0, 0, 0]
  };
  var DEFAULT_OPTS2 = {
    speed: 1.2,
    curve: 1.414
  };
  var FlyToInterpolator = class extends TransitionInterpolator {
    constructor(opts = {}) {
      super({
        compare: ["longitude", "latitude", "zoom", "bearing", "pitch", "position"],
        extract: ["width", "height", "longitude", "latitude", "zoom", "bearing", "pitch", "position"],
        required: ["width", "height", "latitude", "longitude", "zoom"]
      });
      this.opts = { ...DEFAULT_OPTS2, ...opts };
    }
    interpolateProps(startProps, endProps, t5) {
      const viewport = flyToViewport(startProps, endProps, t5, this.opts);
      for (const key in LINEARLY_INTERPOLATED_PROPS) {
        viewport[key] = lerp(
          startProps[key] || LINEARLY_INTERPOLATED_PROPS[key],
          endProps[key] || LINEARLY_INTERPOLATED_PROPS[key],
          t5
        );
      }
      return viewport;
    }
    // computes the transition duration
    getDuration(startProps, endProps) {
      let { transitionDuration } = endProps;
      if (transitionDuration === "auto") {
        transitionDuration = getFlyToDuration(startProps, endProps, this.opts);
      }
      return transitionDuration;
    }
  };

  // ../core/src/utils/tesselator.ts
  init_dist4();
  var Tesselator = class {
    constructor(opts) {
      this.indexStarts = [0];
      this.vertexStarts = [0];
      this.vertexCount = 0;
      this.instanceCount = 0;
      const { attributes = {} } = opts;
      this.typedArrayManager = typed_array_manager_default;
      this.attributes = {};
      this._attributeDefs = attributes;
      this.opts = opts;
      this.updateGeometry(opts);
    }
    /* Public methods */
    updateGeometry(opts) {
      Object.assign(this.opts, opts);
      const {
        data,
        buffers = {},
        getGeometry: getGeometry2,
        geometryBuffer,
        positionFormat,
        dataChanged,
        normalize: normalize17 = true
      } = this.opts;
      this.data = data;
      this.getGeometry = getGeometry2;
      this.positionSize = // @ts-ignore (2339) when geometryBuffer is a luma Buffer, size falls back to positionFormat
      geometryBuffer && geometryBuffer.size || (positionFormat === "XY" ? 2 : 3);
      this.buffers = buffers;
      this.normalize = normalize17;
      if (geometryBuffer) {
        assert8(data.startIndices);
        this.getGeometry = this.getGeometryFromBuffer(geometryBuffer);
        if (!normalize17) {
          buffers.vertexPositions = geometryBuffer;
        }
      }
      this.geometryBuffer = buffers.vertexPositions;
      if (Array.isArray(dataChanged)) {
        for (const dataRange of dataChanged) {
          this._rebuildGeometry(dataRange);
        }
      } else {
        this._rebuildGeometry();
      }
    }
    updatePartialGeometry({ startRow, endRow }) {
      this._rebuildGeometry({ startRow, endRow });
    }
    getGeometryFromBuffer(geometryBuffer) {
      const value = geometryBuffer.value || geometryBuffer;
      if (!ArrayBuffer.isView(value)) {
        return null;
      }
      return getAccessorFromBuffer(value, {
        size: this.positionSize,
        offset: geometryBuffer.offset,
        stride: geometryBuffer.stride,
        startIndices: this.data.startIndices
      });
    }
    /* Private utility methods */
    _allocate(instanceCount, copy13) {
      const { attributes, buffers, _attributeDefs, typedArrayManager } = this;
      for (const name13 in _attributeDefs) {
        if (name13 in buffers) {
          typedArrayManager.release(attributes[name13]);
          attributes[name13] = null;
        } else {
          const def = _attributeDefs[name13];
          def.copy = copy13;
          attributes[name13] = typedArrayManager.allocate(attributes[name13], instanceCount, def);
        }
      }
    }
    /**
     * Visit all objects
     * `data` is expected to be an iterable consistent with the base Layer expectation
     */
    _forEachGeometry(visitor, startRow, endRow) {
      const { data, getGeometry: getGeometry2 } = this;
      const { iterable, objectInfo } = createIterable(data, startRow, endRow);
      for (const object of iterable) {
        objectInfo.index++;
        const geometry = getGeometry2 ? getGeometry2(object, objectInfo) : null;
        visitor(geometry, objectInfo.index);
      }
    }
    /* eslint-disable complexity,max-statements */
    _rebuildGeometry(dataRange) {
      if (!this.data) {
        return;
      }
      let { indexStarts, vertexStarts, instanceCount } = this;
      const { data, geometryBuffer } = this;
      const { startRow = 0, endRow = Infinity } = dataRange || {};
      const normalizedData = {};
      if (!dataRange) {
        indexStarts = [0];
        vertexStarts = [0];
      }
      if (this.normalize || !geometryBuffer) {
        this._forEachGeometry(
          (geometry, dataIndex) => {
            const normalizedGeometry = geometry && this.normalizeGeometry(geometry);
            normalizedData[dataIndex] = normalizedGeometry;
            vertexStarts[dataIndex + 1] = vertexStarts[dataIndex] + (normalizedGeometry ? this.getGeometrySize(normalizedGeometry) : 0);
          },
          startRow,
          endRow
        );
        instanceCount = vertexStarts[vertexStarts.length - 1];
      } else {
        vertexStarts = data.startIndices;
        instanceCount = vertexStarts[data.length] || 0;
        if (ArrayBuffer.isView(geometryBuffer)) {
          instanceCount = instanceCount || geometryBuffer.length / this.positionSize;
        } else if (geometryBuffer instanceof Buffer2) {
          const byteStride = this.positionSize * 4;
          instanceCount = instanceCount || geometryBuffer.byteLength / byteStride;
        } else if (geometryBuffer.buffer) {
          const byteStride = geometryBuffer.stride || this.positionSize * 4;
          instanceCount = instanceCount || geometryBuffer.buffer.byteLength / byteStride;
        } else if (geometryBuffer.value) {
          const bufferValue = geometryBuffer.value;
          const elementStride = (
            // @ts-ignore (2339) if stride is not specified, will fall through to positionSize
            geometryBuffer.stride / bufferValue.BYTES_PER_ELEMENT || this.positionSize
          );
          instanceCount = instanceCount || bufferValue.length / elementStride;
        }
      }
      this._allocate(instanceCount, Boolean(dataRange));
      this.indexStarts = indexStarts;
      this.vertexStarts = vertexStarts;
      this.instanceCount = instanceCount;
      const context = {};
      this._forEachGeometry(
        (geometry, dataIndex) => {
          const normalizedGeometry = normalizedData[dataIndex] || geometry;
          context.vertexStart = vertexStarts[dataIndex];
          context.indexStart = indexStarts[dataIndex];
          const vertexEnd = dataIndex < vertexStarts.length - 1 ? vertexStarts[dataIndex + 1] : instanceCount;
          context.geometrySize = vertexEnd - vertexStarts[dataIndex];
          context.geometryIndex = dataIndex;
          this.updateGeometryAttributes(normalizedGeometry, context);
        },
        startRow,
        endRow
      );
      this.vertexCount = indexStarts[indexStarts.length - 1];
    }
  };

  // ../layers/src/arc-layer/arc-layer-uniforms.ts
  var uniformBlock7 = `uniform arcUniforms {
  bool greatCircle;
  bool useShortestPath;
  float numSegments;
  float widthScale;
  float widthMinPixels;
  float widthMaxPixels;
  highp int widthUnits;
} arc;
`;
  var arcUniforms = {
    name: "arc",
    vs: uniformBlock7,
    fs: uniformBlock7,
    uniformTypes: {
      greatCircle: "f32",
      useShortestPath: "f32",
      numSegments: "f32",
      widthScale: "f32",
      widthMinPixels: "f32",
      widthMaxPixels: "f32",
      widthUnits: "i32"
    }
  };

  // ../layers/src/arc-layer/arc-layer-vertex.glsl.ts
  var arc_layer_vertex_glsl_default = `#version 300 es
#define SHADER_NAME arc-layer-vertex-shader

in vec4 instanceSourceColors;
in vec4 instanceTargetColors;
in vec3 instanceSourcePositions;
in vec3 instanceSourcePositions64Low;
in vec3 instanceTargetPositions;
in vec3 instanceTargetPositions64Low;
in vec3 instancePickingColors;
in float instanceWidths;
in float instanceHeights;
in float instanceTilts;

out vec4 vColor;
out vec2 uv;
out float isValid;

float paraboloid(float distance, float sourceZ, float targetZ, float ratio) {
  // d: distance on the xy plane
  // r: ratio of the current point
  // p: ratio of the peak of the arc
  // h: height multiplier
  // z = f(r) = sqrt(r * (p * 2 - r)) * d * h
  // f(0) = 0
  // f(1) = dz

  float deltaZ = targetZ - sourceZ;
  float dh = distance * instanceHeights;
  if (dh == 0.0) {
    return sourceZ + deltaZ * ratio;
  }
  float unitZ = deltaZ / dh;
  float p2 = unitZ * unitZ + 1.0;

  // sqrt does not deal with negative values, manually flip source and target if delta.z < 0
  float dir = step(deltaZ, 0.0);
  float z0 = mix(sourceZ, targetZ, dir);
  float r = mix(ratio, 1.0 - ratio, dir);
  return sqrt(r * (p2 - r)) * dh + z0;
}

// offset vector by strokeWidth pixels
// offset_direction is -1 (left) or 1 (right)
vec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction, float width) {
  // normalized direction of the line
  vec2 dir_screenspace = normalize(line_clipspace * project.viewportSize);
  // rotate by 90 degrees
  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);

  return dir_screenspace * offset_direction * width / 2.0;
}

float getSegmentRatio(float index) {
  return smoothstep(0.0, 1.0, index / (arc.numSegments - 1.0));
}

vec3 interpolateFlat(vec3 source, vec3 target, float segmentRatio) {
  float distance = length(source.xy - target.xy);
  float z = paraboloid(distance, source.z, target.z, segmentRatio);

  float tiltAngle = radians(instanceTilts);
  vec2 tiltDirection = normalize(target.xy - source.xy);
  vec2 tilt = vec2(-tiltDirection.y, tiltDirection.x) * z * sin(tiltAngle);

  return vec3(
    mix(source.xy, target.xy, segmentRatio) + tilt,
    z * cos(tiltAngle)
  );
}

/* Great circle interpolation
 * http://www.movable-type.co.uk/scripts/latlong.html
 */
float getAngularDist (vec2 source, vec2 target) {
  vec2 sourceRadians = radians(source);
  vec2 targetRadians = radians(target);
  vec2 sin_half_delta = sin((sourceRadians - targetRadians) / 2.0);
  vec2 shd_sq = sin_half_delta * sin_half_delta;

  float a = shd_sq.y + cos(sourceRadians.y) * cos(targetRadians.y) * shd_sq.x;
  return 2.0 * asin(sqrt(a));
}

vec3 interpolateGreatCircle(vec3 source, vec3 target, vec3 source3D, vec3 target3D, float angularDist, float t) {
  vec2 lngLat;

  // if the angularDist is PI, linear interpolation is applied. otherwise, use spherical interpolation
  if(abs(angularDist - PI) < 0.001) {
    lngLat = (1.0 - t) * source.xy + t * target.xy;
  } else {
    float a = sin((1.0 - t) * angularDist);
    float b = sin(t * angularDist);
    vec3 p = source3D.yxz * a + target3D.yxz * b;
    lngLat = degrees(vec2(atan(p.y, -p.x), atan(p.z, length(p.xy))));
  }

  float z = paraboloid(angularDist * EARTH_RADIUS, source.z, target.z, t);

  return vec3(lngLat, z);
}

/* END GREAT CIRCLE */

void main(void) {
  geometry.worldPosition = instanceSourcePositions;
  geometry.worldPositionAlt = instanceTargetPositions;

  /*
  *  --(i, -1)-----------_(i+1, -1)--
  *       |          _,-"  |
  *       o      _,-"      o
  *       |  _,-"          |
  *  --(i, 1)"-------------(i+1, 1)--
  */
  float segmentIndex = float(gl_VertexID / 2);
  float segmentSide = mod(float(gl_VertexID), 2.) == 0. ? -1. : 1.;
  float segmentRatio = getSegmentRatio(segmentIndex);
  float prevSegmentRatio = getSegmentRatio(max(0.0, segmentIndex - 1.0));
  float nextSegmentRatio = getSegmentRatio(min(arc.numSegments - 1.0, segmentIndex + 1.0));

  // if it's the first point, use next - current as direction
  // otherwise use current - prev
  float indexDir = mix(-1.0, 1.0, step(segmentIndex, 0.0));
  isValid = 1.0;

  uv = vec2(segmentRatio, segmentSide);
  geometry.uv = uv;
  geometry.pickingColor = instancePickingColors;

  vec4 curr;
  vec4 next;
  vec3 source;
  vec3 target;

  if ((arc.greatCircle || project.projectionMode == PROJECTION_MODE_GLOBE) && project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT) {
    source = project_globe_(vec3(instanceSourcePositions.xy, 0.0));
    target = project_globe_(vec3(instanceTargetPositions.xy, 0.0));
    float angularDist = getAngularDist(instanceSourcePositions.xy, instanceTargetPositions.xy);

    vec3 prevPos = interpolateGreatCircle(instanceSourcePositions, instanceTargetPositions, source, target, angularDist, prevSegmentRatio);
    vec3 currPos = interpolateGreatCircle(instanceSourcePositions, instanceTargetPositions, source, target, angularDist, segmentRatio);
    vec3 nextPos = interpolateGreatCircle(instanceSourcePositions, instanceTargetPositions, source, target, angularDist, nextSegmentRatio);

    if (abs(currPos.x - prevPos.x) > 180.0) {
      indexDir = -1.0;
      isValid = 0.0;
    } else if (abs(currPos.x - nextPos.x) > 180.0) {
      indexDir = 1.0;
      isValid = 0.0;
    }
    nextPos = indexDir < 0.0 ? prevPos : nextPos;
    nextSegmentRatio = indexDir < 0.0 ? prevSegmentRatio : nextSegmentRatio;

    if (isValid == 0.0) {
      // split at the 180th meridian
      nextPos.x += nextPos.x > 0.0 ? -360.0 : 360.0;
      float t = ((currPos.x > 0.0 ? 180.0 : -180.0) - currPos.x) / (nextPos.x - currPos.x);
      currPos = mix(currPos, nextPos, t);
      segmentRatio = mix(segmentRatio, nextSegmentRatio, t);
    }

    vec3 currPos64Low = mix(instanceSourcePositions64Low, instanceTargetPositions64Low, segmentRatio);
    vec3 nextPos64Low = mix(instanceSourcePositions64Low, instanceTargetPositions64Low, nextSegmentRatio);
  
    curr = project_position_to_clipspace(currPos, currPos64Low, vec3(0.0), geometry.position);
    next = project_position_to_clipspace(nextPos, nextPos64Low, vec3(0.0));
  
  } else {
    vec3 source_world = instanceSourcePositions;
    vec3 target_world = instanceTargetPositions;
    if (arc.useShortestPath) {
      source_world.x = mod(source_world.x + 180., 360.0) - 180.;
      target_world.x = mod(target_world.x + 180., 360.0) - 180.;

      float deltaLng = target_world.x - source_world.x;
      if (deltaLng > 180.) target_world.x -= 360.;
      if (deltaLng < -180.) source_world.x -= 360.;
    }
    source = project_position(source_world, instanceSourcePositions64Low);
    target = project_position(target_world, instanceTargetPositions64Low);

    // common x at longitude=-180
    float antiMeridianX = 0.0;

    if (arc.useShortestPath) {
      if (project.projectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET) {
        antiMeridianX = -(project.coordinateOrigin.x + 180.) / 360. * TILE_SIZE;
      }
      float thresholdRatio = (antiMeridianX - source.x) / (target.x - source.x);

      if (prevSegmentRatio <= thresholdRatio && nextSegmentRatio > thresholdRatio) {
        isValid = 0.0;
        indexDir = sign(segmentRatio - thresholdRatio);
        segmentRatio = thresholdRatio;
      }
    }

    nextSegmentRatio = indexDir < 0.0 ? prevSegmentRatio : nextSegmentRatio;
    vec3 currPos = interpolateFlat(source, target, segmentRatio);
    vec3 nextPos = interpolateFlat(source, target, nextSegmentRatio);

    if (arc.useShortestPath) {
      if (nextPos.x < antiMeridianX) {
        currPos.x += TILE_SIZE;
        nextPos.x += TILE_SIZE;
      }
    }

    curr = project_common_position_to_clipspace(vec4(currPos, 1.0));
    next = project_common_position_to_clipspace(vec4(nextPos, 1.0));
    geometry.position = vec4(currPos, 1.0);
  }

  // Multiply out width and clamp to limits
  // mercator pixels are interpreted as screen pixels
  float widthPixels = clamp(
    project_size_to_pixel(instanceWidths * arc.widthScale, arc.widthUnits),
    arc.widthMinPixels, arc.widthMaxPixels
  );

  // extrude
  vec3 offset = vec3(
    getExtrusionOffset((next.xy - curr.xy) * indexDir, segmentSide, widthPixels),
    0.0);
  DECKGL_FILTER_SIZE(offset, geometry);
  DECKGL_FILTER_GL_POSITION(curr, geometry);
  gl_Position = curr + vec4(project_pixel_size_to_clipspace(offset.xy), 0.0, 0.0);

  vec4 color = mix(instanceSourceColors, instanceTargetColors, segmentRatio);
  vColor = vec4(color.rgb, color.a * layer.opacity);
  DECKGL_FILTER_COLOR(vColor, geometry);
}
`;

  // ../layers/src/arc-layer/arc-layer-fragment.glsl.ts
  var arc_layer_fragment_glsl_default = `#version 300 es
#define SHADER_NAME arc-layer-fragment-shader

precision highp float;

in vec4 vColor;
in vec2 uv;
in float isValid;

out vec4 fragColor;

void main(void) {
  if (isValid == 0.0) {
    discard;
  }

  fragColor = vColor;
  geometry.uv = uv;

  DECKGL_FILTER_COLOR(fragColor, geometry);
}
`;

  // ../layers/src/arc-layer/arc-layer.ts
  var DEFAULT_COLOR = [0, 0, 0, 255];
  var defaultProps3 = {
    getSourcePosition: { type: "accessor", value: (x4) => x4.sourcePosition },
    getTargetPosition: { type: "accessor", value: (x4) => x4.targetPosition },
    getSourceColor: { type: "accessor", value: DEFAULT_COLOR },
    getTargetColor: { type: "accessor", value: DEFAULT_COLOR },
    getWidth: { type: "accessor", value: 1 },
    getHeight: { type: "accessor", value: 1 },
    getTilt: { type: "accessor", value: 0 },
    greatCircle: false,
    numSegments: { type: "number", value: 50, min: 1 },
    widthUnits: "pixels",
    widthScale: { type: "number", value: 1, min: 0 },
    widthMinPixels: { type: "number", value: 0, min: 0 },
    widthMaxPixels: { type: "number", value: Number.MAX_SAFE_INTEGER, min: 0 }
  };
  var ArcLayer = class extends Layer {
    getBounds() {
      return this.getAttributeManager()?.getBounds([
        "instanceSourcePositions",
        "instanceTargetPositions"
      ]);
    }
    getShaders() {
      return super.getShaders({ vs: arc_layer_vertex_glsl_default, fs: arc_layer_fragment_glsl_default, modules: [project32_default, picking_default, arcUniforms] });
    }
    // This layer has its own wrapLongitude logic
    get wrapLongitude() {
      return false;
    }
    initializeState() {
      const attributeManager = this.getAttributeManager();
      attributeManager.addInstanced({
        instanceSourcePositions: {
          size: 3,
          type: "float64",
          fp64: this.use64bitPositions(),
          transition: true,
          accessor: "getSourcePosition"
        },
        instanceTargetPositions: {
          size: 3,
          type: "float64",
          fp64: this.use64bitPositions(),
          transition: true,
          accessor: "getTargetPosition"
        },
        instanceSourceColors: {
          size: this.props.colorFormat.length,
          type: "unorm8",
          transition: true,
          accessor: "getSourceColor",
          defaultValue: DEFAULT_COLOR
        },
        instanceTargetColors: {
          size: this.props.colorFormat.length,
          type: "unorm8",
          transition: true,
          accessor: "getTargetColor",
          defaultValue: DEFAULT_COLOR
        },
        instanceWidths: {
          size: 1,
          transition: true,
          accessor: "getWidth",
          defaultValue: 1
        },
        instanceHeights: {
          size: 1,
          transition: true,
          accessor: "getHeight",
          defaultValue: 1
        },
        instanceTilts: {
          size: 1,
          transition: true,
          accessor: "getTilt",
          defaultValue: 0
        }
      });
    }
    updateState(params) {
      super.updateState(params);
      if (params.changeFlags.extensionsChanged) {
        this.state.model?.destroy();
        this.state.model = this._getModel();
        this.getAttributeManager().invalidateAll();
      }
    }
    draw({ uniforms }) {
      const {
        widthUnits,
        widthScale,
        widthMinPixels,
        widthMaxPixels,
        greatCircle,
        wrapLongitude,
        numSegments
      } = this.props;
      const arcProps = {
        numSegments,
        widthUnits: UNIT[widthUnits],
        widthScale,
        widthMinPixels,
        widthMaxPixels,
        greatCircle,
        useShortestPath: wrapLongitude
      };
      const model = this.state.model;
      model.shaderInputs.setProps({ arc: arcProps });
      model.setVertexCount(numSegments * 2);
      model.draw(this.context.renderPass);
    }
    _getModel() {
      return new Model(this.context.device, {
        ...this.getShaders(),
        id: this.props.id,
        bufferLayout: this.getAttributeManager().getBufferLayouts(),
        topology: "triangle-strip",
        isInstanced: true
      });
    }
  };
  ArcLayer.layerName = "ArcLayer";
  ArcLayer.defaultProps = defaultProps3;

  // ../layers/src/bitmap-layer/create-mesh.ts
  var DEFAULT_INDICES = new Uint32Array([0, 2, 1, 0, 3, 2]);
  var DEFAULT_TEX_COORDS = new Float32Array([0, 1, 0, 0, 1, 0, 1, 1]);
  function createMesh(bounds, resolution) {
    if (!resolution) {
      return createQuad(bounds);
    }
    const maxXSpan = Math.max(
      Math.abs(bounds[0][0] - bounds[3][0]),
      Math.abs(bounds[1][0] - bounds[2][0])
    );
    const maxYSpan = Math.max(
      Math.abs(bounds[1][1] - bounds[0][1]),
      Math.abs(bounds[2][1] - bounds[3][1])
    );
    const uCount = Math.ceil(maxXSpan / resolution) + 1;
    const vCount = Math.ceil(maxYSpan / resolution) + 1;
    const vertexCount = (uCount - 1) * (vCount - 1) * 6;
    const indices = new Uint32Array(vertexCount);
    const texCoords = new Float32Array(uCount * vCount * 2);
    const positions = new Float64Array(uCount * vCount * 3);
    let vertex5 = 0;
    let index = 0;
    for (let u6 = 0; u6 < uCount; u6++) {
      const ut2 = u6 / (uCount - 1);
      for (let v5 = 0; v5 < vCount; v5++) {
        const vt = v5 / (vCount - 1);
        const p5 = interpolateQuad(bounds, ut2, vt);
        positions[vertex5 * 3 + 0] = p5[0];
        positions[vertex5 * 3 + 1] = p5[1];
        positions[vertex5 * 3 + 2] = p5[2] || 0;
        texCoords[vertex5 * 2 + 0] = ut2;
        texCoords[vertex5 * 2 + 1] = 1 - vt;
        if (u6 > 0 && v5 > 0) {
          indices[index++] = vertex5 - vCount;
          indices[index++] = vertex5 - vCount - 1;
          indices[index++] = vertex5 - 1;
          indices[index++] = vertex5 - vCount;
          indices[index++] = vertex5 - 1;
          indices[index++] = vertex5;
        }
        vertex5++;
      }
    }
    return {
      vertexCount,
      positions,
      indices,
      texCoords
    };
  }
  function createQuad(bounds) {
    const positions = new Float64Array(12);
    for (let i7 = 0; i7 < bounds.length; i7++) {
      positions[i7 * 3 + 0] = bounds[i7][0];
      positions[i7 * 3 + 1] = bounds[i7][1];
      positions[i7 * 3 + 2] = bounds[i7][2] || 0;
    }
    return {
      vertexCount: 6,
      positions,
      indices: DEFAULT_INDICES,
      texCoords: DEFAULT_TEX_COORDS
    };
  }
  function interpolateQuad(quad, ut2, vt) {
    return lerp(lerp(quad[0], quad[1], vt), lerp(quad[3], quad[2], vt), ut2);
  }

  // ../layers/src/bitmap-layer/bitmap-layer-uniforms.ts
  var uniformBlock8 = `uniform bitmapUniforms {
  vec4 bounds;
  float coordinateConversion;
  float desaturate;
  vec3 tintColor;
  vec4 transparentColor;
} bitmap;
`;
  var bitmapUniforms = {
    name: "bitmap",
    vs: uniformBlock8,
    fs: uniformBlock8,
    uniformTypes: {
      bounds: "vec4<f32>",
      coordinateConversion: "f32",
      desaturate: "f32",
      tintColor: "vec3<f32>",
      transparentColor: "vec4<f32>"
    }
  };

  // ../layers/src/bitmap-layer/bitmap-layer-vertex.ts
  var bitmap_layer_vertex_default = `#version 300 es
#define SHADER_NAME bitmap-layer-vertex-shader

in vec2 texCoords;
in vec3 positions;
in vec3 positions64Low;

out vec2 vTexCoord;
out vec2 vTexPos;

const vec3 pickingColor = vec3(1.0, 0.0, 0.0);

void main(void) {
  geometry.worldPosition = positions;
  geometry.uv = texCoords;
  geometry.pickingColor = pickingColor;

  gl_Position = project_position_to_clipspace(positions, positions64Low, vec3(0.0), geometry.position);
  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);

  vTexCoord = texCoords;

  if (bitmap.coordinateConversion < -0.5) {
    vTexPos = geometry.position.xy + project.commonOrigin.xy;
  } else if (bitmap.coordinateConversion > 0.5) {
    vTexPos = geometry.worldPosition.xy;
  }

  vec4 color = vec4(0.0);
  DECKGL_FILTER_COLOR(color, geometry);
}
`;

  // ../layers/src/bitmap-layer/bitmap-layer-fragment.ts
  var packUVsIntoRGB = `
vec3 packUVsIntoRGB(vec2 uv) {
  // Extract the top 8 bits. We want values to be truncated down so we can add a fraction
  vec2 uv8bit = floor(uv * 256.);

  // Calculate the normalized remainders of u and v parts that do not fit into 8 bits
  // Scale and clamp to 0-1 range
  vec2 uvFraction = fract(uv * 256.);
  vec2 uvFraction4bit = floor(uvFraction * 16.);

  // Remainder can be encoded in blue channel, encode as 4 bits for pixel coordinates
  float fractions = uvFraction4bit.x + uvFraction4bit.y * 16.;

  return vec3(uv8bit, fractions) / 255.;
}
`;
  var bitmap_layer_fragment_default = `#version 300 es
#define SHADER_NAME bitmap-layer-fragment-shader

#ifdef GL_ES
precision highp float;
#endif

uniform sampler2D bitmapTexture;

in vec2 vTexCoord;
in vec2 vTexPos;

out vec4 fragColor;

/* projection utils */
const float TILE_SIZE = 512.0;
const float PI = 3.1415926536;
const float WORLD_SCALE = TILE_SIZE / PI / 2.0;

// from degrees to Web Mercator
vec2 lnglat_to_mercator(vec2 lnglat) {
  float x = lnglat.x;
  float y = clamp(lnglat.y, -89.9, 89.9);
  return vec2(
    radians(x) + PI,
    PI + log(tan(PI * 0.25 + radians(y) * 0.5))
  ) * WORLD_SCALE;
}

// from Web Mercator to degrees
vec2 mercator_to_lnglat(vec2 xy) {
  xy /= WORLD_SCALE;
  return degrees(vec2(
    xy.x - PI,
    atan(exp(xy.y - PI)) * 2.0 - PI * 0.5
  ));
}
/* End projection utils */

// apply desaturation
vec3 color_desaturate(vec3 color) {
  float luminance = (color.r + color.g + color.b) * 0.333333333;
  return mix(color, vec3(luminance), bitmap.desaturate);
}

// apply tint
vec3 color_tint(vec3 color) {
  return color * bitmap.tintColor;
}

// blend with background color
vec4 apply_opacity(vec3 color, float alpha) {
  if (bitmap.transparentColor.a == 0.0) {
    return vec4(color, alpha);
  }
  float blendedAlpha = alpha + bitmap.transparentColor.a * (1.0 - alpha);
  float highLightRatio = alpha / blendedAlpha;
  vec3 blendedRGB = mix(bitmap.transparentColor.rgb, color, highLightRatio);
  return vec4(blendedRGB, blendedAlpha);
}

vec2 getUV(vec2 pos) {
  return vec2(
    (pos.x - bitmap.bounds[0]) / (bitmap.bounds[2] - bitmap.bounds[0]),
    (pos.y - bitmap.bounds[3]) / (bitmap.bounds[1] - bitmap.bounds[3])
  );
}

${packUVsIntoRGB}

void main(void) {
  vec2 uv = vTexCoord;
  if (bitmap.coordinateConversion < -0.5) {
    vec2 lnglat = mercator_to_lnglat(vTexPos);
    uv = getUV(lnglat);
  } else if (bitmap.coordinateConversion > 0.5) {
    vec2 commonPos = lnglat_to_mercator(vTexPos);
    uv = getUV(commonPos);
  }
  vec4 bitmapColor = texture(bitmapTexture, uv);

  fragColor = apply_opacity(color_tint(color_desaturate(bitmapColor.rgb)), bitmapColor.a * layer.opacity);

  geometry.uv = uv;
  DECKGL_FILTER_COLOR(fragColor, geometry);

  if (bool(picking.isActive) && !bool(picking.isAttribute)) {
    // Since instance information is not used, we can use picking color for pixel index
    fragColor.rgb = packUVsIntoRGB(uv);
  }
}
`;

  // ../layers/src/bitmap-layer/bitmap-layer.ts
  var defaultProps4 = {
    image: { type: "image", value: null, async: true },
    bounds: { type: "array", value: [1, 0, 0, 1], compare: true },
    _imageCoordinateSystem: COORDINATE_SYSTEM.DEFAULT,
    desaturate: { type: "number", min: 0, max: 1, value: 0 },
    // More context: because of the blending mode we're using for ground imagery,
    // alpha is not effective when blending the bitmap layers with the base map.
    // Instead we need to manually dim/blend rgb values with a background color.
    transparentColor: { type: "color", value: [0, 0, 0, 0] },
    tintColor: { type: "color", value: [255, 255, 255] },
    textureParameters: { type: "object", ignore: true, value: null }
  };
  var BitmapLayer = class extends Layer {
    getShaders() {
      return super.getShaders({ vs: bitmap_layer_vertex_default, fs: bitmap_layer_fragment_default, modules: [project32_default, picking_default, bitmapUniforms] });
    }
    initializeState() {
      const attributeManager = this.getAttributeManager();
      attributeManager.remove(["instancePickingColors"]);
      const noAlloc = true;
      attributeManager.add({
        indices: {
          size: 1,
          isIndexed: true,
          update: (attribute) => attribute.value = this.state.mesh.indices,
          noAlloc
        },
        positions: {
          size: 3,
          type: "float64",
          fp64: this.use64bitPositions(),
          update: (attribute) => attribute.value = this.state.mesh.positions,
          noAlloc
        },
        texCoords: {
          size: 2,
          update: (attribute) => attribute.value = this.state.mesh.texCoords,
          noAlloc
        }
      });
    }
    updateState({ props, oldProps, changeFlags }) {
      const attributeManager = this.getAttributeManager();
      if (changeFlags.extensionsChanged) {
        this.state.model?.destroy();
        this.state.model = this._getModel();
        attributeManager.invalidateAll();
      }
      if (props.bounds !== oldProps.bounds) {
        const oldMesh = this.state.mesh;
        const mesh = this._createMesh();
        this.state.model.setVertexCount(mesh.vertexCount);
        for (const key in mesh) {
          if (oldMesh && oldMesh[key] !== mesh[key]) {
            attributeManager.invalidate(key);
          }
        }
        this.setState({ mesh, ...this._getCoordinateUniforms() });
      } else if (props._imageCoordinateSystem !== oldProps._imageCoordinateSystem) {
        this.setState(this._getCoordinateUniforms());
      }
    }
    getPickingInfo(params) {
      const { image } = this.props;
      const info = params.info;
      if (!info.color || !image) {
        info.bitmap = null;
        return info;
      }
      const { width, height } = image;
      info.index = 0;
      const uv = unpackUVsFromRGB(info.color);
      info.bitmap = {
        size: { width, height },
        uv,
        pixel: [Math.floor(uv[0] * width), Math.floor(uv[1] * height)]
      };
      return info;
    }
    // Override base Layer multi-depth picking logic
    disablePickingIndex() {
      this.setState({ disablePicking: true });
    }
    restorePickingColors() {
      this.setState({ disablePicking: false });
    }
    _updateAutoHighlight(info) {
      super._updateAutoHighlight({
        ...info,
        color: this.encodePickingColor(0)
      });
    }
    _createMesh() {
      const { bounds } = this.props;
      let normalizedBounds = bounds;
      if (isRectangularBounds(bounds)) {
        normalizedBounds = [
          [bounds[0], bounds[1]],
          [bounds[0], bounds[3]],
          [bounds[2], bounds[3]],
          [bounds[2], bounds[1]]
        ];
      }
      return createMesh(normalizedBounds, this.context.viewport.resolution);
    }
    _getModel() {
      return new Model(this.context.device, {
        ...this.getShaders(),
        id: this.props.id,
        bufferLayout: this.getAttributeManager().getBufferLayouts(),
        topology: "triangle-list",
        isInstanced: false
      });
    }
    draw(opts) {
      const { shaderModuleProps } = opts;
      const { model, coordinateConversion, bounds, disablePicking } = this.state;
      const { image, desaturate, transparentColor, tintColor } = this.props;
      if (shaderModuleProps.picking.isActive && disablePicking) {
        return;
      }
      if (image && model) {
        const bitmapProps = {
          bitmapTexture: image,
          bounds,
          coordinateConversion,
          desaturate,
          tintColor: tintColor.slice(0, 3).map((x4) => x4 / 255),
          transparentColor: transparentColor.map((x4) => x4 / 255)
        };
        model.shaderInputs.setProps({ bitmap: bitmapProps });
        model.draw(this.context.renderPass);
      }
    }
    _getCoordinateUniforms() {
      const { LNGLAT, CARTESIAN, DEFAULT } = COORDINATE_SYSTEM;
      let { _imageCoordinateSystem: imageCoordinateSystem } = this.props;
      if (imageCoordinateSystem !== DEFAULT) {
        const { bounds } = this.props;
        if (!isRectangularBounds(bounds)) {
          throw new Error("_imageCoordinateSystem only supports rectangular bounds");
        }
        const defaultImageCoordinateSystem = this.context.viewport.resolution ? LNGLAT : CARTESIAN;
        imageCoordinateSystem = imageCoordinateSystem === LNGLAT ? LNGLAT : CARTESIAN;
        if (imageCoordinateSystem === LNGLAT && defaultImageCoordinateSystem === CARTESIAN) {
          return { coordinateConversion: -1, bounds };
        }
        if (imageCoordinateSystem === CARTESIAN && defaultImageCoordinateSystem === LNGLAT) {
          const bottomLeft = lngLatToWorld([bounds[0], bounds[1]]);
          const topRight = lngLatToWorld([bounds[2], bounds[3]]);
          return {
            coordinateConversion: 1,
            bounds: [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]]
          };
        }
      }
      return {
        coordinateConversion: 0,
        bounds: [0, 0, 0, 0]
      };
    }
  };
  BitmapLayer.layerName = "BitmapLayer";
  BitmapLayer.defaultProps = defaultProps4;
  function unpackUVsFromRGB(color) {
    const [u6, v5, fracUV] = color;
    const vFrac = (fracUV & 240) / 256;
    const uFrac = (fracUV & 15) / 16;
    return [(u6 + uFrac) / 256, (v5 + vFrac) / 256];
  }
  function isRectangularBounds(bounds) {
    return Number.isFinite(bounds[0]);
  }

  // ../layers/src/icon-layer/icon-layer-uniforms.ts
  var uniformBlock9 = `uniform iconUniforms {
  float sizeScale;
  vec2 iconsTextureDim;
  float sizeBasis;
  float sizeMinPixels;
  float sizeMaxPixels;
  bool billboard;
  highp int sizeUnits;
  float alphaCutoff;
} icon;
`;
  var iconUniforms = {
    name: "icon",
    vs: uniformBlock9,
    fs: uniformBlock9,
    uniformTypes: {
      sizeScale: "f32",
      iconsTextureDim: "vec2<f32>",
      sizeBasis: "f32",
      sizeMinPixels: "f32",
      sizeMaxPixels: "f32",
      billboard: "f32",
      sizeUnits: "i32",
      alphaCutoff: "f32"
    }
  };

  // ../layers/src/icon-layer/icon-layer-vertex.glsl.ts
  var icon_layer_vertex_glsl_default = `#version 300 es
#define SHADER_NAME icon-layer-vertex-shader

in vec2 positions;

in vec3 instancePositions;
in vec3 instancePositions64Low;
in float instanceSizes;
in float instanceAngles;
in vec4 instanceColors;
in vec3 instancePickingColors;
in vec4 instanceIconFrames;
in float instanceColorModes;
in vec2 instanceOffsets;
in vec2 instancePixelOffset;

out float vColorMode;
out vec4 vColor;
out vec2 vTextureCoords;
out vec2 uv;

vec2 rotate_by_angle(vec2 vertex, float angle) {
  float angle_radian = angle * PI / 180.0;
  float cos_angle = cos(angle_radian);
  float sin_angle = sin(angle_radian);
  mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);
  return rotationMatrix * vertex;
}

void main(void) {
  geometry.worldPosition = instancePositions;
  geometry.uv = positions;
  geometry.pickingColor = instancePickingColors;
  uv = positions;

  vec2 iconSize = instanceIconFrames.zw;
  // convert size in meters to pixels, then scaled and clamp
 
  // project meters to pixels and clamp to limits 
  float sizePixels = clamp(
    project_size_to_pixel(instanceSizes * icon.sizeScale, icon.sizeUnits),
    icon.sizeMinPixels, icon.sizeMaxPixels
  );

  // Choose correct constraint based on the 'sizeBasis' value (0.0 = width, 1.0 = height)
  float iconConstraint = icon.sizeBasis == 0.0 ? iconSize.x : iconSize.y;
  float instanceScale = iconConstraint == 0.0 ? 0.0 : sizePixels / iconConstraint;

  // scale and rotate vertex in "pixel" value and convert back to fraction in clipspace
  vec2 pixelOffset = positions / 2.0 * iconSize + instanceOffsets;
  pixelOffset = rotate_by_angle(pixelOffset, instanceAngles) * instanceScale;
  pixelOffset += instancePixelOffset;
  pixelOffset.y *= -1.0;

  if (icon.billboard)  {
    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);
    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
    vec3 offset = vec3(pixelOffset, 0.0);
    DECKGL_FILTER_SIZE(offset, geometry);
    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);
  } else {
    vec3 offset_common = vec3(project_pixel_size(pixelOffset), 0.0);
    DECKGL_FILTER_SIZE(offset_common, geometry);
    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset_common, geometry.position); 
    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
  }

  vTextureCoords = mix(
    instanceIconFrames.xy,
    instanceIconFrames.xy + iconSize,
    (positions.xy + 1.0) / 2.0
  ) / icon.iconsTextureDim;

  vColor = instanceColors;
  DECKGL_FILTER_COLOR(vColor, geometry);

  vColorMode = instanceColorModes;
}
`;

  // ../layers/src/icon-layer/icon-layer-fragment.glsl.ts
  var icon_layer_fragment_glsl_default = `#version 300 es
#define SHADER_NAME icon-layer-fragment-shader

precision highp float;

uniform sampler2D iconsTexture;

in float vColorMode;
in vec4 vColor;
in vec2 vTextureCoords;
in vec2 uv;

out vec4 fragColor;

void main(void) {
  geometry.uv = uv;

  vec4 texColor = texture(iconsTexture, vTextureCoords);

  // if colorMode == 0, use pixel color from the texture
  // if colorMode == 1 or rendering picking buffer, use texture as transparency mask
  vec3 color = mix(texColor.rgb, vColor.rgb, vColorMode);
  // Take the global opacity and the alpha from vColor into account for the alpha component
  float a = texColor.a * layer.opacity * vColor.a;

  if (a < icon.alphaCutoff) {
    discard;
  }

  fragColor = vec4(color, a);
  DECKGL_FILTER_COLOR(fragColor, geometry);
}
`;

  // ../layers/src/icon-layer/icon-manager.ts
  var DEFAULT_CANVAS_WIDTH = 1024;
  var DEFAULT_BUFFER = 4;
  var noop4 = () => {
  };
  var DEFAULT_SAMPLER_PARAMETERS = {
    minFilter: "linear",
    mipmapFilter: "linear",
    // LINEAR is the default value but explicitly set it here
    magFilter: "linear",
    // minimize texture boundary artifacts
    addressModeU: "clamp-to-edge",
    addressModeV: "clamp-to-edge"
  };
  var MISSING_ICON = {
    x: 0,
    y: 0,
    width: 0,
    height: 0
  };
  function nextPowOfTwo(number) {
    return Math.pow(2, Math.ceil(Math.log2(number)));
  }
  function resizeImage(ctx2, imageData, maxWidth, maxHeight) {
    const resizeRatio = Math.min(maxWidth / imageData.width, maxHeight / imageData.height);
    const width = Math.floor(imageData.width * resizeRatio);
    const height = Math.floor(imageData.height * resizeRatio);
    if (resizeRatio === 1) {
      return { image: imageData, width, height };
    }
    ctx2.canvas.height = height;
    ctx2.canvas.width = width;
    ctx2.clearRect(0, 0, width, height);
    ctx2.drawImage(imageData, 0, 0, imageData.width, imageData.height, 0, 0, width, height);
    return { image: ctx2.canvas, width, height };
  }
  function getIconId(icon) {
    return icon && (icon.id || icon.url);
  }
  function resizeTexture(texture, width, height, sampler) {
    const { width: oldWidth, height: oldHeight, device } = texture;
    const newTexture = device.createTexture({
      format: "rgba8unorm",
      width,
      height,
      sampler,
      mipLevels: device.getMipLevelCount(width, height)
    });
    const commandEncoder = device.createCommandEncoder();
    commandEncoder.copyTextureToTexture({
      sourceTexture: texture,
      destinationTexture: newTexture,
      width: oldWidth,
      height: oldHeight
    });
    commandEncoder.finish();
    newTexture.generateMipmapsWebGL();
    texture.destroy();
    return newTexture;
  }
  function buildRowMapping(mapping, columns, yOffset) {
    for (let i7 = 0; i7 < columns.length; i7++) {
      const { icon, xOffset } = columns[i7];
      const id = getIconId(icon);
      mapping[id] = {
        ...icon,
        x: xOffset,
        y: yOffset
      };
    }
  }
  function buildMapping({
    icons,
    buffer,
    mapping = {},
    xOffset = 0,
    yOffset = 0,
    rowHeight = 0,
    canvasWidth
  }) {
    let columns = [];
    for (let i7 = 0; i7 < icons.length; i7++) {
      const icon = icons[i7];
      const id = getIconId(icon);
      if (!mapping[id]) {
        const { height, width } = icon;
        if (xOffset + width + buffer > canvasWidth) {
          buildRowMapping(mapping, columns, yOffset);
          xOffset = 0;
          yOffset = rowHeight + yOffset + buffer;
          rowHeight = 0;
          columns = [];
        }
        columns.push({
          icon,
          xOffset
        });
        xOffset = xOffset + width + buffer;
        rowHeight = Math.max(rowHeight, height);
      }
    }
    if (columns.length > 0) {
      buildRowMapping(mapping, columns, yOffset);
    }
    return {
      mapping,
      rowHeight,
      xOffset,
      yOffset,
      canvasWidth,
      canvasHeight: nextPowOfTwo(rowHeight + yOffset + buffer)
    };
  }
  function getDiffIcons(data, getIcon, cachedIcons) {
    if (!data || !getIcon) {
      return null;
    }
    cachedIcons = cachedIcons || {};
    const icons = {};
    const { iterable, objectInfo } = createIterable(data);
    for (const object of iterable) {
      objectInfo.index++;
      const icon = getIcon(object, objectInfo);
      const id = getIconId(icon);
      if (!icon) {
        throw new Error("Icon is missing.");
      }
      if (!icon.url) {
        throw new Error("Icon url is missing.");
      }
      if (!icons[id] && (!cachedIcons[id] || icon.url !== cachedIcons[id].url)) {
        icons[id] = { ...icon, source: object, sourceIndex: objectInfo.index };
      }
    }
    return icons;
  }
  var IconManager = class {
    constructor(device, {
      onUpdate = noop4,
      onError = noop4
    }) {
      this._loadOptions = null;
      this._texture = null;
      this._externalTexture = null;
      this._mapping = {};
      this._samplerParameters = null;
      /** count of pending requests to fetch icons */
      this._pendingCount = 0;
      this._autoPacking = false;
      // / internal state used for autoPacking
      this._xOffset = 0;
      this._yOffset = 0;
      this._rowHeight = 0;
      this._buffer = DEFAULT_BUFFER;
      this._canvasWidth = DEFAULT_CANVAS_WIDTH;
      this._canvasHeight = 0;
      this._canvas = null;
      this.device = device;
      this.onUpdate = onUpdate;
      this.onError = onError;
    }
    finalize() {
      this._texture?.delete();
    }
    getTexture() {
      return this._texture || this._externalTexture;
    }
    getIconMapping(icon) {
      const id = this._autoPacking ? getIconId(icon) : icon;
      return this._mapping[id] || MISSING_ICON;
    }
    setProps({
      loadOptions,
      autoPacking,
      iconAtlas,
      iconMapping,
      textureParameters
    }) {
      if (loadOptions) {
        this._loadOptions = loadOptions;
      }
      if (autoPacking !== void 0) {
        this._autoPacking = autoPacking;
      }
      if (iconMapping) {
        this._mapping = iconMapping;
      }
      if (iconAtlas) {
        this._texture?.delete();
        this._texture = null;
        this._externalTexture = iconAtlas;
      }
      if (textureParameters) {
        this._samplerParameters = textureParameters;
      }
    }
    get isLoaded() {
      return this._pendingCount === 0;
    }
    packIcons(data, getIcon) {
      if (!this._autoPacking || typeof document === "undefined") {
        return;
      }
      const icons = Object.values(getDiffIcons(data, getIcon, this._mapping) || {});
      if (icons.length > 0) {
        const { mapping, xOffset, yOffset, rowHeight, canvasHeight } = buildMapping({
          icons,
          buffer: this._buffer,
          canvasWidth: this._canvasWidth,
          mapping: this._mapping,
          rowHeight: this._rowHeight,
          xOffset: this._xOffset,
          yOffset: this._yOffset
        });
        this._rowHeight = rowHeight;
        this._mapping = mapping;
        this._xOffset = xOffset;
        this._yOffset = yOffset;
        this._canvasHeight = canvasHeight;
        if (!this._texture) {
          this._texture = this.device.createTexture({
            format: "rgba8unorm",
            data: null,
            width: this._canvasWidth,
            height: this._canvasHeight,
            sampler: this._samplerParameters || DEFAULT_SAMPLER_PARAMETERS,
            mipLevels: this.device.getMipLevelCount(this._canvasWidth, this._canvasHeight)
          });
        }
        if (this._texture.height !== this._canvasHeight) {
          this._texture = resizeTexture(
            this._texture,
            this._canvasWidth,
            this._canvasHeight,
            this._samplerParameters || DEFAULT_SAMPLER_PARAMETERS
          );
        }
        this.onUpdate();
        this._canvas = this._canvas || document.createElement("canvas");
        this._loadIcons(icons);
        this._texture?.generateMipmapsWebGL();
      }
    }
    _loadIcons(icons) {
      const ctx2 = this._canvas.getContext("2d", {
        willReadFrequently: true
      });
      for (const icon of icons) {
        this._pendingCount++;
        load(icon.url, this._loadOptions).then((imageData) => {
          const id = getIconId(icon);
          const iconDef = this._mapping[id];
          const { x: x4, y: y5, width: maxWidth, height: maxHeight } = iconDef;
          const { image, width, height } = resizeImage(
            ctx2,
            imageData,
            maxWidth,
            maxHeight
          );
          this._texture?.copyExternalImage({
            image,
            x: x4 + (maxWidth - width) / 2,
            y: y5 + (maxHeight - height) / 2,
            width,
            height
          });
          iconDef.width = width;
          iconDef.height = height;
          this._texture?.generateMipmapsWebGL();
          this.onUpdate();
        }).catch((error) => {
          this.onError({
            url: icon.url,
            source: icon.source,
            sourceIndex: icon.sourceIndex,
            loadOptions: this._loadOptions,
            error
          });
        }).finally(() => {
          this._pendingCount--;
        });
      }
    }
  };

  // ../layers/src/icon-layer/icon-layer.ts
  var DEFAULT_COLOR2 = [0, 0, 0, 255];
  var defaultProps5 = {
    iconAtlas: { type: "image", value: null, async: true },
    iconMapping: { type: "object", value: {}, async: true },
    sizeScale: { type: "number", value: 1, min: 0 },
    billboard: true,
    sizeUnits: "pixels",
    sizeBasis: "height",
    sizeMinPixels: { type: "number", min: 0, value: 0 },
    //  min point radius in pixels
    sizeMaxPixels: { type: "number", min: 0, value: Number.MAX_SAFE_INTEGER },
    // max point radius in pixels
    alphaCutoff: { type: "number", value: 0.05, min: 0, max: 1 },
    getPosition: { type: "accessor", value: (x4) => x4.position },
    getIcon: { type: "accessor", value: (x4) => x4.icon },
    getColor: { type: "accessor", value: DEFAULT_COLOR2 },
    getSize: { type: "accessor", value: 1 },
    getAngle: { type: "accessor", value: 0 },
    getPixelOffset: { type: "accessor", value: [0, 0] },
    onIconError: { type: "function", value: null, optional: true },
    textureParameters: { type: "object", ignore: true, value: null }
  };
  var IconLayer = class extends Layer {
    getShaders() {
      return super.getShaders({ vs: icon_layer_vertex_glsl_default, fs: icon_layer_fragment_glsl_default, modules: [project32_default, picking_default, iconUniforms] });
    }
    initializeState() {
      this.state = {
        iconManager: new IconManager(this.context.device, {
          onUpdate: this._onUpdate.bind(this),
          onError: this._onError.bind(this)
        })
      };
      const attributeManager = this.getAttributeManager();
      attributeManager.addInstanced({
        instancePositions: {
          size: 3,
          type: "float64",
          fp64: this.use64bitPositions(),
          transition: true,
          accessor: "getPosition"
        },
        instanceSizes: {
          size: 1,
          transition: true,
          accessor: "getSize",
          defaultValue: 1
        },
        instanceOffsets: {
          size: 2,
          accessor: "getIcon",
          // eslint-disable-next-line @typescript-eslint/unbound-method
          transform: this.getInstanceOffset
        },
        instanceIconFrames: {
          size: 4,
          accessor: "getIcon",
          // eslint-disable-next-line @typescript-eslint/unbound-method
          transform: this.getInstanceIconFrame
        },
        instanceColorModes: {
          size: 1,
          type: "uint8",
          accessor: "getIcon",
          // eslint-disable-next-line @typescript-eslint/unbound-method
          transform: this.getInstanceColorMode
        },
        instanceColors: {
          size: this.props.colorFormat.length,
          type: "unorm8",
          transition: true,
          accessor: "getColor",
          defaultValue: DEFAULT_COLOR2
        },
        instanceAngles: {
          size: 1,
          transition: true,
          accessor: "getAngle"
        },
        instancePixelOffset: {
          size: 2,
          transition: true,
          accessor: "getPixelOffset"
        }
      });
    }
    /* eslint-disable max-statements, complexity */
    updateState(params) {
      super.updateState(params);
      const { props, oldProps, changeFlags } = params;
      const attributeManager = this.getAttributeManager();
      const { iconAtlas, iconMapping, data, getIcon, textureParameters } = props;
      const { iconManager } = this.state;
      if (typeof iconAtlas === "string") {
        return;
      }
      const prePacked = iconAtlas || this.internalState.isAsyncPropLoading("iconAtlas");
      iconManager.setProps({
        loadOptions: props.loadOptions,
        autoPacking: !prePacked,
        iconAtlas,
        iconMapping: prePacked ? iconMapping : null,
        textureParameters
      });
      if (prePacked) {
        if (oldProps.iconMapping !== props.iconMapping) {
          attributeManager.invalidate("getIcon");
        }
      } else if (changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon)) {
        iconManager.packIcons(data, getIcon);
      }
      if (changeFlags.extensionsChanged) {
        this.state.model?.destroy();
        this.state.model = this._getModel();
        attributeManager.invalidateAll();
      }
    }
    /* eslint-enable max-statements, complexity */
    get isLoaded() {
      return super.isLoaded && this.state.iconManager.isLoaded;
    }
    finalizeState(context) {
      super.finalizeState(context);
      this.state.iconManager.finalize();
    }
    draw({ uniforms }) {
      const { sizeScale, sizeBasis, sizeMinPixels, sizeMaxPixels, sizeUnits, billboard, alphaCutoff } = this.props;
      const { iconManager } = this.state;
      const iconsTexture = iconManager.getTexture();
      if (iconsTexture) {
        const model = this.state.model;
        const iconProps = {
          iconsTexture,
          iconsTextureDim: [iconsTexture.width, iconsTexture.height],
          sizeUnits: UNIT[sizeUnits],
          sizeScale,
          sizeBasis: sizeBasis === "height" ? 1 : 0,
          sizeMinPixels,
          sizeMaxPixels,
          billboard,
          alphaCutoff
        };
        model.shaderInputs.setProps({ icon: iconProps });
        model.draw(this.context.renderPass);
      }
    }
    _getModel() {
      const positions = [-1, -1, 1, -1, -1, 1, 1, 1];
      return new Model(this.context.device, {
        ...this.getShaders(),
        id: this.props.id,
        bufferLayout: this.getAttributeManager().getBufferLayouts(),
        geometry: new Geometry({
          topology: "triangle-strip",
          attributes: {
            // The size must be explicitly passed here otherwise luma.gl
            // will default to assuming that positions are 3D (x,y,z)
            positions: {
              size: 2,
              value: new Float32Array(positions)
            }
          }
        }),
        isInstanced: true
      });
    }
    _onUpdate() {
      this.setNeedsRedraw();
    }
    _onError(evt) {
      const onIconError = this.getCurrentLayer()?.props.onIconError;
      if (onIconError) {
        onIconError(evt);
      } else {
        log_default.error(evt.error.message)();
      }
    }
    getInstanceOffset(icon) {
      const {
        width,
        height,
        anchorX = width / 2,
        anchorY = height / 2
      } = this.state.iconManager.getIconMapping(icon);
      return [width / 2 - anchorX, height / 2 - anchorY];
    }
    getInstanceColorMode(icon) {
      const mapping = this.state.iconManager.getIconMapping(icon);
      return mapping.mask ? 1 : 0;
    }
    getInstanceIconFrame(icon) {
      const { x: x4, y: y5, width, height } = this.state.iconManager.getIconMapping(icon);
      return [x4, y5, width, height];
    }
  };
  IconLayer.defaultProps = defaultProps5;
  IconLayer.layerName = "IconLayer";

  // ../layers/src/line-layer/line-layer-uniforms.ts
  var uniformBlockWGSL = (
    /* wgsl */
    `struct LineUniforms {
  widthScale: f32,
  widthMinPixels: f32,
  widthMaxPixels: f32,
  useShortestPath: f32,
  widthUnits: i32,
};

@group(0) @binding(1)
var<uniform> line: LineUniforms;
`
  );
  var uniformBlockGLSL = (
    /* glsl */
    `uniform lineUniforms {
  float widthScale;
  float widthMinPixels;
  float widthMaxPixels;
  float useShortestPath;
  highp int widthUnits;
} line;
`
  );
  var lineUniforms = {
    name: "line",
    source: uniformBlockWGSL,
    vs: uniformBlockGLSL,
    fs: uniformBlockGLSL,
    uniformTypes: {
      widthScale: "f32",
      widthMinPixels: "f32",
      widthMaxPixels: "f32",
      useShortestPath: "f32",
      widthUnits: "i32"
    }
  };

  // ../layers/src/line-layer/line-layer.wgsl.ts
  var shaderWGSL = (
    /* wgsl */
    `// ---------- Helper Structures & Functions ----------

// Placeholder filter functions.
fn deckgl_filter_size(offset: vec3<f32>, geometry: Geometry) -> vec3<f32> {
  return offset;
}
fn deckgl_filter_gl_position(p: vec4<f32>, geometry: Geometry) -> vec4<f32> {
  return p;
}
fn deckgl_filter_color(color: vec4<f32>, geometry: Geometry) -> vec4<f32> {
  return color;
}

// Compute an extrusion offset given a line direction (in clipspace),
// an offset direction (-1 or 1), and a width in pixels.
// Assumes a uniform "project" with a viewportSize field is available.
fn getExtrusionOffset(line_clipspace: vec2<f32>, offset_direction: f32, width: f32) -> vec2<f32> {
  // project.viewportSize should be provided as a uniform (not shown here)
  let dir_screenspace = normalize(line_clipspace * project.viewportSize);
  // Rotate by 90\xB0: (x,y) becomes (-y,x)
  let rotated = vec2<f32>(-dir_screenspace.y, dir_screenspace.x);
  return rotated * offset_direction * width / 2.0;
}

// Splits the line between two points at a given x coordinate.
// Interpolates the y and z components.
fn splitLine(a: vec3<f32>, b: vec3<f32>, x: f32) -> vec3<f32> {
  let t: f32 = (x - a.x) / (b.x - a.x);
  return vec3<f32>(x, a.yz + t * (b.yz - a.yz));
}

// ---------- Uniforms & Global Structures ----------

// Uniforms for line, color, and project are assumed to be defined elsewhere.
// For example:
//
// @group(0) @binding(0)
// var<uniform> line: LineUniform;
//
// struct ColorUniform {
//   opacity: f32,
// };
// @group(0) @binding(1)
// var<uniform> color: ColorUniform;
//
// struct ProjectUniform {
//   viewportSize: vec2<f32>,
// };
// @group(0) @binding(2)
// var<uniform> project: ProjectUniform;



// ---------- Vertex Output Structure ----------

struct Varyings {
  @builtin(position) gl_Position: vec4<f32>,
  @location(0) vColor: vec4<f32>,
  @location(1) uv: vec2<f32>,
};

// ---------- Vertex Shader Entry Point ----------

@vertex
fn vertexMain(
  @location(0) positions: vec3<f32>,
  @location(1) instanceSourcePositions: vec3<f32>,
  @location(2) instanceTargetPositions: vec3<f32>,
  @location(3) instanceSourcePositions64Low: vec3<f32>,
  @location(4) instanceTargetPositions64Low: vec3<f32>,
  @location(5) instanceColors: vec4<f32>,
  @location(6) instancePickingColors: vec3<f32>,
  @location(7) instanceWidths: f32
) -> Varyings {
  var geometry: Geometry;
  geometry.worldPosition = instanceSourcePositions;
  geometry.worldPositionAlt = instanceTargetPositions;

  var source_world: vec3<f32> = instanceSourcePositions;
  var target_world: vec3<f32> = instanceTargetPositions;
  var source_world_64low: vec3<f32> = instanceSourcePositions64Low;
  var target_world_64low: vec3<f32> = instanceTargetPositions64Low;

  // Apply shortest-path adjustments if needed.
  if (line.useShortestPath > 0.5 || line.useShortestPath < -0.5) {
    source_world.x = (source_world.x + 180.0 % 360.0) - 180.0;
    target_world.x = (target_world.x + 180.0 % 360.0) - 180.0;
    let deltaLng: f32 = target_world.x - source_world.x;

    if (deltaLng * line.useShortestPath > 180.0) {
      source_world.x = source_world.x + 360.0 * line.useShortestPath;
      source_world = splitLine(source_world, target_world, 180.0 * line.useShortestPath);
      source_world_64low = vec3<f32>(0.0, 0.0, 0.0);
    } else if (deltaLng * line.useShortestPath < -180.0) {
      target_world.x = target_world.x + 360.0 * line.useShortestPath;
      target_world = splitLine(source_world, target_world, 180.0 * line.useShortestPath);
      target_world_64low = vec3<f32>(0.0, 0.0, 0.0);
    } else if (line.useShortestPath < 0.0) {
      var abortOut: Varyings;
      abortOut.gl_Position = vec4<f32>(0.0);
      abortOut.vColor = vec4<f32>(0.0);
      abortOut.uv = vec2<f32>(0.0);
      return abortOut;
    }
  }

  // Project Pos and target positions to clip space.
  let sourceResult = project_position_to_clipspace_and_commonspace(source_world, source_world_64low, vec3<f32>(0.0));
  let targetResult = project_position_to_clipspace_and_commonspace(target_world, target_world_64low, vec3<f32>(0.0));
  let sourcePos: vec4<f32> = sourceResult.clipPosition;
  let targetPos: vec4<f32> = targetResult.clipPosition;
  let source_commonspace: vec4<f32> = sourceResult.commonPosition;
  let target_commonspace: vec4<f32> = targetResult.commonPosition;

  // Interpolate along the line segment.
  let segmentIndex: f32 = positions.x;
  let p: vec4<f32> = sourcePos + segmentIndex * (targetPos - sourcePos);
  geometry.position = source_commonspace + segmentIndex * (target_commonspace - source_commonspace);
  let uv: vec2<f32> = positions.xy;
  geometry.uv = uv;
  geometry.pickingColor = instancePickingColors;

  // Determine width in pixels.
  let widthPixels: f32 = clamp(
    project_unit_size_to_pixel(instanceWidths * line.widthScale, line.widthUnits),
    line.widthMinPixels, line.widthMaxPixels
  );

  // Compute extrusion offset.
  let extrusion: vec2<f32> = getExtrusionOffset(targetPos.xy - sourcePos.xy, positions.y, widthPixels);
  let offset: vec3<f32> = vec3<f32>(extrusion, 0.0);

  // Apply deck.gl filter functions.
  let filteredOffset = deckgl_filter_size(offset, geometry);
  let filteredP = deckgl_filter_gl_position(p, geometry);

  let clipOffset: vec2<f32> = project_pixel_size_to_clipspace(filteredOffset.xy);
  let finalPosition: vec4<f32> = filteredP + vec4<f32>(clipOffset, 0.0, 0.0);

  // Compute color.
  var vColor: vec4<f32> = vec4<f32>(instanceColors.rgb, instanceColors.a * color.opacity);
  // vColor = deckgl_filter_color(vColor, geometry);

  var output: Varyings;
  output.gl_Position = finalPosition;
  output.vColor = vColor;
  output.uv = uv;
  return output;
}

@fragment
fn fragmentMain(
  @location(0) vColor: vec4<f32>,
  @location(1) uv: vec2<f32>
) -> @location(0) vec4<f32> {
  // Create and initialize geometry with the provided uv.
  var geometry: Geometry;
  geometry.uv = uv;

  // Start with the input color.
  var fragColor: vec4<f32> = vColor;

  // Apply the deck.gl filter to the color.
  fragColor = deckgl_filter_color(fragColor, geometry);

  // Apply premultiplied alpha as required by transparent canvas
  fragColor = deckgl_premultiplied_alpha(fragColor);

  return fragColor;
}
`
  );

  // ../layers/src/line-layer/line-layer-vertex.glsl.ts
  var line_layer_vertex_glsl_default = `#version 300 es
#define SHADER_NAME line-layer-vertex-shader

in vec3 positions;
in vec3 instanceSourcePositions;
in vec3 instanceTargetPositions;
in vec3 instanceSourcePositions64Low;
in vec3 instanceTargetPositions64Low;
in vec4 instanceColors;
in vec3 instancePickingColors;
in float instanceWidths;

out vec4 vColor;
out vec2 uv;

// offset vector by strokeWidth pixels
// offset_direction is -1 (left) or 1 (right)
vec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction, float width) {
  // normalized direction of the line
  vec2 dir_screenspace = normalize(line_clipspace * project.viewportSize);
  // rotate by 90 degrees
  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);

  return dir_screenspace * offset_direction * width / 2.0;
}

vec3 splitLine(vec3 a, vec3 b, float x) {
  float t = (x - a.x) / (b.x - a.x);
  return vec3(x, mix(a.yz, b.yz, t));
}

void main(void) {
  geometry.worldPosition = instanceSourcePositions;
  geometry.worldPositionAlt = instanceTargetPositions;

  vec3 source_world = instanceSourcePositions;
  vec3 target_world = instanceTargetPositions;
  vec3 source_world_64low = instanceSourcePositions64Low;
  vec3 target_world_64low = instanceTargetPositions64Low;

  if (line.useShortestPath > 0.5 || line.useShortestPath < -0.5) {
    source_world.x = mod(source_world.x + 180., 360.0) - 180.;
    target_world.x = mod(target_world.x + 180., 360.0) - 180.;
    float deltaLng = target_world.x - source_world.x;

    if (deltaLng * line.useShortestPath > 180.) {
      source_world.x += 360. * line.useShortestPath;
      source_world = splitLine(source_world, target_world, 180. * line.useShortestPath);
      source_world_64low = vec3(0.0);
    } else if (deltaLng * line.useShortestPath < -180.) {
      target_world.x += 360. * line.useShortestPath;
      target_world = splitLine(source_world, target_world, 180. * line.useShortestPath);
      target_world_64low = vec3(0.0);
    } else if (line.useShortestPath < 0.) {
      // Line is not split, abort
      gl_Position = vec4(0.);
      return;
    }
  }

  // Position
  vec4 source_commonspace;
  vec4 target_commonspace;
  vec4 source = project_position_to_clipspace(source_world, source_world_64low, vec3(0.), source_commonspace);
  vec4 target = project_position_to_clipspace(target_world, target_world_64low, vec3(0.), target_commonspace);
  
  // linear interpolation of source & target to pick right coord
  float segmentIndex = positions.x;
  vec4 p = mix(source, target, segmentIndex);
  geometry.position = mix(source_commonspace, target_commonspace, segmentIndex);
  uv = positions.xy;
  geometry.uv = uv;
  geometry.pickingColor = instancePickingColors;

  // Multiply out width and clamp to limits
  float widthPixels = clamp(
    project_size_to_pixel(instanceWidths * line.widthScale, line.widthUnits),
    line.widthMinPixels, line.widthMaxPixels
  );

  // extrude
  vec3 offset = vec3(
    getExtrusionOffset(target.xy - source.xy, positions.y, widthPixels),
    0.0);
  DECKGL_FILTER_SIZE(offset, geometry);
  DECKGL_FILTER_GL_POSITION(p, geometry);
  gl_Position = p + vec4(project_pixel_size_to_clipspace(offset.xy), 0.0, 0.0);

  // Color
  vColor = vec4(instanceColors.rgb, instanceColors.a * layer.opacity);
  DECKGL_FILTER_COLOR(vColor, geometry);
}
`;

  // ../layers/src/line-layer/line-layer-fragment.glsl.ts
  var line_layer_fragment_glsl_default = `#version 300 es
#define SHADER_NAME line-layer-fragment-shader

precision highp float;

in vec4 vColor;
in vec2 uv;

out vec4 fragColor;

void main(void) {
  geometry.uv = uv;

  fragColor = vColor;

  DECKGL_FILTER_COLOR(fragColor, geometry);
}
`;

  // ../layers/src/line-layer/line-layer.ts
  var DEFAULT_COLOR3 = [0, 0, 0, 255];
  var defaultProps6 = {
    getSourcePosition: { type: "accessor", value: (x4) => x4.sourcePosition },
    getTargetPosition: { type: "accessor", value: (x4) => x4.targetPosition },
    getColor: { type: "accessor", value: DEFAULT_COLOR3 },
    getWidth: { type: "accessor", value: 1 },
    widthUnits: "pixels",
    widthScale: { type: "number", value: 1, min: 0 },
    widthMinPixels: { type: "number", value: 0, min: 0 },
    widthMaxPixels: { type: "number", value: Number.MAX_SAFE_INTEGER, min: 0 }
  };
  var LineLayer = class extends Layer {
    getBounds() {
      return this.getAttributeManager()?.getBounds([
        "instanceSourcePositions",
        "instanceTargetPositions"
      ]);
    }
    getShaders() {
      return super.getShaders({ vs: line_layer_vertex_glsl_default, fs: line_layer_fragment_glsl_default, source: shaderWGSL, modules: [project32_default, color_default, picking_default, lineUniforms] });
    }
    // This layer has its own wrapLongitude logic
    get wrapLongitude() {
      return false;
    }
    initializeState() {
      const attributeManager = this.getAttributeManager();
      attributeManager.addInstanced({
        instanceSourcePositions: {
          size: 3,
          type: "float64",
          fp64: this.use64bitPositions(),
          transition: true,
          accessor: "getSourcePosition"
        },
        instanceTargetPositions: {
          size: 3,
          type: "float64",
          fp64: this.use64bitPositions(),
          transition: true,
          accessor: "getTargetPosition"
        },
        instanceColors: {
          size: this.props.colorFormat.length,
          type: "unorm8",
          transition: true,
          accessor: "getColor",
          defaultValue: [0, 0, 0, 255]
        },
        instanceWidths: {
          size: 1,
          transition: true,
          accessor: "getWidth",
          defaultValue: 1
        }
      });
    }
    updateState(params) {
      super.updateState(params);
      if (params.changeFlags.extensionsChanged) {
        this.state.model?.destroy();
        this.state.model = this._getModel();
        this.getAttributeManager().invalidateAll();
      }
    }
    draw({ uniforms }) {
      const { widthUnits, widthScale, widthMinPixels, widthMaxPixels, wrapLongitude } = this.props;
      const model = this.state.model;
      const lineProps = {
        widthUnits: UNIT[widthUnits],
        widthScale,
        widthMinPixels,
        widthMaxPixels,
        useShortestPath: wrapLongitude ? 1 : 0
      };
      model.shaderInputs.setProps({ line: lineProps });
      model.draw(this.context.renderPass);
      if (wrapLongitude) {
        model.shaderInputs.setProps({ line: { ...lineProps, useShortestPath: -1 } });
        model.draw(this.context.renderPass);
      }
    }
    _getModel() {
      const parameters2 = this.context.device.type === "webgpu" ? {
        depthWriteEnabled: true,
        depthCompare: "less-equal"
      } : void 0;
      const positions = [0, -1, 0, 0, 1, 0, 1, -1, 0, 1, 1, 0];
      return new Model(this.context.device, {
        ...this.getShaders(),
        id: this.props.id,
        bufferLayout: this.getAttributeManager().getBufferLayouts(),
        geometry: new Geometry({
          topology: "triangle-strip",
          attributes: {
            positions: { size: 3, value: new Float32Array(positions) }
          }
        }),
        parameters: parameters2,
        isInstanced: true
      });
    }
  };
  LineLayer.layerName = "LineLayer";
  LineLayer.defaultProps = defaultProps6;

  // ../layers/src/point-cloud-layer/point-cloud-layer-uniforms.ts
  var wgslUniformBlock = (
    /* wgsl */
    `struct PointCloudUniforms {
  radiusPixels: f32,
  sizeUnits: i32,
};

@group(0) @binding(3)
var<uniform> pointCloud: PointCloudUniforms;
`
  );
  var glslUniformBlock = `uniform pointCloudUniforms {
  float radiusPixels;
  highp int sizeUnits;
} pointCloud;
`;
  var pointCloudUniforms = {
    name: "pointCloud",
    source: wgslUniformBlock,
    vs: glslUniformBlock,
    fs: glslUniformBlock,
    uniformTypes: {
      radiusPixels: "f32",
      sizeUnits: "i32"
    }
  };

  // ../layers/src/point-cloud-layer/point-cloud-layer-vertex.glsl.ts
  var point_cloud_layer_vertex_glsl_default = `#version 300 es
#define SHADER_NAME point-cloud-layer-vertex-shader

in vec3 positions;
in vec3 instanceNormals;
in vec4 instanceColors;
in vec3 instancePositions;
in vec3 instancePositions64Low;
in vec3 instancePickingColors;

out vec4 vColor;
out vec2 unitPosition;

void main(void) {
  geometry.worldPosition = instancePositions;
  geometry.normal = project_normal(instanceNormals);

  // position on the containing square in [-1, 1] space
  unitPosition = positions.xy;
  geometry.uv = unitPosition;
  geometry.pickingColor = instancePickingColors;

  // Find the center of the point and add the current vertex
  vec3 offset = vec3(positions.xy * project_size_to_pixel(pointCloud.radiusPixels, pointCloud.sizeUnits), 0.0);
  DECKGL_FILTER_SIZE(offset, geometry);

  gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.), geometry.position);
  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
  gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);

  // Apply lighting
  vec3 lightColor = lighting_getLightColor(instanceColors.rgb, project.cameraPosition, geometry.position.xyz, geometry.normal);

  // Apply opacity to instance color, or return instance picking color
  vColor = vec4(lightColor, instanceColors.a * layer.opacity);
  DECKGL_FILTER_COLOR(vColor, geometry);
}
`;

  // ../layers/src/point-cloud-layer/point-cloud-layer-fragment.glsl.ts
  var point_cloud_layer_fragment_glsl_default = `#version 300 es
#define SHADER_NAME point-cloud-layer-fragment-shader

precision highp float;

in vec4 vColor;
in vec2 unitPosition;

out vec4 fragColor;

void main(void) {
  geometry.uv = unitPosition.xy;

  float distToCenter = length(unitPosition);

  if (distToCenter > 1.0) {
    discard;
  }

  fragColor = vColor;
  DECKGL_FILTER_COLOR(fragColor, geometry);
}
`;

  // ../layers/src/point-cloud-layer/point-cloud-layer.wgsl.ts
  var point_cloud_layer_wgsl_default = (
    /* wgsl */
    `struct ConstantAttributes {
  instanceNormals: vec3<f32>,
  instanceColors: vec4<f32>,
  instancePositions: vec3<f32>,
  instancePositions64Low: vec3<f32>,
  instancePickingColors: vec3<f32>
};

const constants = ConstantAttributes(
  vec3<f32>(1.0, 0.0, 0.0),
  vec4<f32>(0.0, 0.0, 0.0, 1.0),
  vec3<f32>(0.0),
  vec3<f32>(0.0),
  vec3<f32>(0.0)
);

struct Attributes {
  @builtin(instance_index) instanceIndex : u32,
  @builtin(vertex_index) vertexIndex : u32,
  @location(0) positions: vec3<f32>,
  @location(1) instancePositions: vec3<f32>,
  @location(2) instancePositions64Low: vec3<f32>,
  @location(3) instanceNormals: vec3<f32>,
  @location(4) instanceColors: vec4<f32>,
  @location(5) instancePickingColors: vec3<f32>
};

struct Varyings {
  @builtin(position) position: vec4<f32>,
  @location(0) vColor: vec4<f32>,
  @location(1) unitPosition: vec2<f32>,
};

@vertex
fn vertexMain(attributes: Attributes) -> Varyings {
  var varyings: Varyings;
  
  // var geometry: Geometry;
  // geometry.worldPosition = instancePositions;
  // geometry.normal = project_normal(instanceNormals);

  // position on the containing square in [-1, 1] space
  varyings.unitPosition = attributes.positions.xy;
  geometry.uv = varyings.unitPosition;
  geometry.pickingColor = attributes.instancePickingColors;

  // Find the center of the point and add the current vertex
  let offset = vec3<f32>(attributes.positions.xy * project_unit_size_to_pixel(pointCloud.radiusPixels, pointCloud.sizeUnits), 0.0);
  // DECKGL_FILTER_SIZE(offset, geometry);

  varyings.position = project_position_to_clipspace(attributes.instancePositions, attributes.instancePositions64Low, vec3<f32>(0.0)); // TODO , geometry.position);
  // DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
  let clipPixels = project_pixel_size_to_clipspace(offset.xy);
  varyings.position.x += clipPixels.x;
  varyings.position.y += clipPixels.y;

  // Apply lighting
  let lightColor = lighting_getLightColor2(attributes.instanceColors.rgb, project.cameraPosition, geometry.position.xyz, geometry.normal);

  // Apply opacity to instance color, or return instance picking color
  varyings.vColor = vec4(lightColor, attributes.instanceColors.a * color.opacity);
  // DECKGL_FILTER_COLOR(vColor, geometry);

  return varyings;
}

@fragment
fn fragmentMain(varyings: Varyings) -> @location(0) vec4<f32> {
  // var geometry: Geometry;
  // geometry.uv = unitPosition.xy;

  let distToCenter = length(varyings.unitPosition);
  if (distToCenter > 1.0) {
    discard;
  }

  var fragColor: vec4<f32>;

  fragColor = varyings.vColor;
  // DECKGL_FILTER_COLOR(fragColor, geometry);

  // Apply premultiplied alpha as required by transparent canvas
  fragColor = deckgl_premultiplied_alpha(fragColor);

  return fragColor;
}
`
  );

  // ../layers/src/point-cloud-layer/point-cloud-layer.ts
  var DEFAULT_COLOR4 = [0, 0, 0, 255];
  var DEFAULT_NORMAL = [0, 0, 1];
  var defaultProps7 = {
    sizeUnits: "pixels",
    pointSize: { type: "number", min: 0, value: 10 },
    //  point radius in pixels
    getPosition: { type: "accessor", value: (x4) => x4.position },
    getNormal: { type: "accessor", value: DEFAULT_NORMAL },
    getColor: { type: "accessor", value: DEFAULT_COLOR4 },
    material: true,
    // Depreated
    radiusPixels: { deprecatedFor: "pointSize" }
  };
  function normalizeData(data) {
    const { header, attributes } = data;
    if (!header || !attributes) {
      return;
    }
    data.length = header.vertexCount;
    if (attributes.POSITION) {
      attributes.instancePositions = attributes.POSITION;
    }
    if (attributes.NORMAL) {
      attributes.instanceNormals = attributes.NORMAL;
    }
    if (attributes.COLOR_0) {
      const { size, value } = attributes.COLOR_0;
      attributes.instanceColors = { size, type: "unorm8", value };
    }
  }
  var PointCloudLayer = class extends Layer {
    getShaders() {
      return super.getShaders({
        vs: point_cloud_layer_vertex_glsl_default,
        fs: point_cloud_layer_fragment_glsl_default,
        source: point_cloud_layer_wgsl_default,
        modules: [project32_default, color_default, gouraudMaterial, picking_default, pointCloudUniforms]
      });
    }
    initializeState() {
      this.getAttributeManager().addInstanced({
        instancePositions: {
          size: 3,
          type: "float64",
          fp64: this.use64bitPositions(),
          transition: true,
          accessor: "getPosition"
        },
        instanceNormals: {
          size: 3,
          transition: true,
          accessor: "getNormal",
          defaultValue: DEFAULT_NORMAL
        },
        instanceColors: {
          size: this.props.colorFormat.length,
          type: "unorm8",
          transition: true,
          accessor: "getColor",
          defaultValue: DEFAULT_COLOR4
        }
      });
    }
    updateState(params) {
      const { changeFlags, props } = params;
      super.updateState(params);
      if (changeFlags.extensionsChanged) {
        this.state.model?.destroy();
        this.state.model = this._getModel();
        this.getAttributeManager().invalidateAll();
      }
      if (changeFlags.dataChanged) {
        normalizeData(props.data);
      }
    }
    draw({ uniforms }) {
      const { pointSize, sizeUnits } = this.props;
      const model = this.state.model;
      const pointCloudProps = {
        sizeUnits: UNIT[sizeUnits],
        radiusPixels: pointSize
      };
      model.shaderInputs.setProps({ pointCloud: pointCloudProps });
      if (this.context.device.type === "webgpu") {
        model.instanceCount = this.props.data.length;
      }
      model.draw(this.context.renderPass);
    }
    _getModel() {
      const parameters2 = this.context.device.type === "webgpu" ? {
        depthWriteEnabled: true,
        depthCompare: "less-equal"
      } : void 0;
      const positions = [];
      for (let i7 = 0; i7 < 3; i7++) {
        const angle10 = i7 / 3 * Math.PI * 2;
        positions.push(Math.cos(angle10) * 2, Math.sin(angle10) * 2, 0);
      }
      return new Model(this.context.device, {
        ...this.getShaders(),
        id: this.props.id,
        bufferLayout: this.getAttributeManager().getBufferLayouts(),
        geometry: new Geometry({
          topology: "triangle-list",
          attributes: {
            positions: new Float32Array(positions)
          }
        }),
        parameters: parameters2,
        isInstanced: true
      });
    }
  };
  PointCloudLayer.layerName = "PointCloudLayer";
  PointCloudLayer.defaultProps = defaultProps7;

  // ../layers/src/scatterplot-layer/scatterplot-layer-uniforms.ts
  var glslUniformBlock2 = `uniform scatterplotUniforms {
  float radiusScale;
  float radiusMinPixels;
  float radiusMaxPixels;
  float lineWidthScale;
  float lineWidthMinPixels;
  float lineWidthMaxPixels;
  float stroked;
  float filled;
  bool antialiasing;
  bool billboard;
  highp int radiusUnits;
  highp int lineWidthUnits;
} scatterplot;
`;
  var scatterplotUniforms = {
    name: "scatterplot",
    vs: glslUniformBlock2,
    fs: glslUniformBlock2,
    source: "",
    uniformTypes: {
      radiusScale: "f32",
      radiusMinPixels: "f32",
      radiusMaxPixels: "f32",
      lineWidthScale: "f32",
      lineWidthMinPixels: "f32",
      lineWidthMaxPixels: "f32",
      stroked: "f32",
      filled: "f32",
      antialiasing: "f32",
      billboard: "f32",
      radiusUnits: "i32",
      lineWidthUnits: "i32"
    }
  };

  // ../layers/src/scatterplot-layer/scatterplot-layer-vertex.glsl.ts
  var scatterplot_layer_vertex_glsl_default = (
    /* glsl */
    `#version 300 es
#define SHADER_NAME scatterplot-layer-vertex-shader

in vec3 positions;

in vec3 instancePositions;
in vec3 instancePositions64Low;
in float instanceRadius;
in float instanceLineWidths;
in vec4 instanceFillColors;
in vec4 instanceLineColors;
in vec3 instancePickingColors;

out vec4 vFillColor;
out vec4 vLineColor;
out vec2 unitPosition;
out float innerUnitRadius;
out float outerRadiusPixels;


void main(void) {
  geometry.worldPosition = instancePositions;

  // Multiply out radius and clamp to limits
  outerRadiusPixels = clamp(
    project_size_to_pixel(scatterplot.radiusScale * instanceRadius, scatterplot.radiusUnits),
    scatterplot.radiusMinPixels, scatterplot.radiusMaxPixels
  );
  
  // Multiply out line width and clamp to limits
  float lineWidthPixels = clamp(
    project_size_to_pixel(scatterplot.lineWidthScale * instanceLineWidths, scatterplot.lineWidthUnits),
    scatterplot.lineWidthMinPixels, scatterplot.lineWidthMaxPixels
  );

  // outer radius needs to offset by half stroke width
  outerRadiusPixels += scatterplot.stroked * lineWidthPixels / 2.0;
  // Expand geometry to accomodate edge smoothing
  float edgePadding = scatterplot.antialiasing ? (outerRadiusPixels + SMOOTH_EDGE_RADIUS) / outerRadiusPixels : 1.0;

  // position on the containing square in [-1, 1] space
  unitPosition = edgePadding * positions.xy;
  geometry.uv = unitPosition;
  geometry.pickingColor = instancePickingColors;

  innerUnitRadius = 1.0 - scatterplot.stroked * lineWidthPixels / outerRadiusPixels;
  
  if (scatterplot.billboard) {
    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);
    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
    vec3 offset = edgePadding * positions * outerRadiusPixels;
    DECKGL_FILTER_SIZE(offset, geometry);
    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);
  } else {
    vec3 offset = edgePadding * positions * project_pixel_size(outerRadiusPixels);
    DECKGL_FILTER_SIZE(offset, geometry);
    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset, geometry.position);
    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
  }

  // Apply opacity to instance color, or return instance picking color
  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * layer.opacity);
  DECKGL_FILTER_COLOR(vFillColor, geometry);
  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * layer.opacity);
  DECKGL_FILTER_COLOR(vLineColor, geometry);
}
`
  );

  // ../layers/src/scatterplot-layer/scatterplot-layer-fragment.glsl.ts
  var scatterplot_layer_fragment_glsl_default = (
    /* glsl */
    `#version 300 es
#define SHADER_NAME scatterplot-layer-fragment-shader

precision highp float;

in vec4 vFillColor;
in vec4 vLineColor;
in vec2 unitPosition;
in float innerUnitRadius;
in float outerRadiusPixels;

out vec4 fragColor;

void main(void) {
  geometry.uv = unitPosition;

  float distToCenter = length(unitPosition) * outerRadiusPixels;
  float inCircle = scatterplot.antialiasing ?
    smoothedge(distToCenter, outerRadiusPixels) : 
    step(distToCenter, outerRadiusPixels);

  if (inCircle == 0.0) {
    discard;
  }

  if (scatterplot.stroked > 0.5) {
    float isLine = scatterplot.antialiasing ? 
      smoothedge(innerUnitRadius * outerRadiusPixels, distToCenter) :
      step(innerUnitRadius * outerRadiusPixels, distToCenter);

    if (scatterplot.filled > 0.5) {
      fragColor = mix(vFillColor, vLineColor, isLine);
    } else {
      if (isLine == 0.0) {
        discard;
      }
      fragColor = vec4(vLineColor.rgb, vLineColor.a * isLine);
    }
  } else if (scatterplot.filled < 0.5) {
    discard;
  } else {
    fragColor = vFillColor;
  }

  fragColor.a *= inCircle;
  DECKGL_FILTER_COLOR(fragColor, geometry);
}
`
  );

  // ../layers/src/scatterplot-layer/scatterplot-layer.wgsl.ts
  var scatterplot_layer_wgsl_default = (
    /* wgsl */
    `// Main shaders

struct ScatterplotUniforms {
  radiusScale: f32,
  radiusMinPixels: f32,
  radiusMaxPixels: f32,
  lineWidthScale: f32,
  lineWidthMinPixels: f32,
  lineWidthMaxPixels: f32,
  stroked: f32,
  filled: i32,
  antialiasing: i32,
  billboard: i32,
  radiusUnits: i32,
  lineWidthUnits: i32,
};

struct ConstantAttributeUniforms {
 instancePositions: vec3<f32>,
 instancePositions64Low: vec3<f32>,
 instanceRadius: f32,
 instanceLineWidths: f32,
 instanceFillColors: vec4<f32>,
 instanceLineColors: vec4<f32>,
 instancePickingColors: vec3<f32>,

 instancePositionsConstant: i32,
 instancePositions64LowConstant: i32,
 instanceRadiusConstant: i32,
 instanceLineWidthsConstant: i32,
 instanceFillColorsConstant: i32,
 instanceLineColorsConstant: i32,
 instancePickingColorsConstant: i32
};

@group(0) @binding(2) var<uniform> scatterplot: ScatterplotUniforms;

struct ConstantAttributes {
  instancePositions: vec3<f32>,
  instancePositions64Low: vec3<f32>,
  instanceRadius: f32,
  instanceLineWidths: f32,
  instanceFillColors: vec4<f32>,
  instanceLineColors: vec4<f32>,
  instancePickingColors: vec3<f32>
};

const constants = ConstantAttributes(
  vec3<f32>(0.0),
  vec3<f32>(0.0),
  0.0,
  0.0,
  vec4<f32>(0.0, 0.0, 0.0, 1.0),
  vec4<f32>(0.0, 0.0, 0.0, 1.0),
  vec3<f32>(0.0)
);

struct Attributes {
  @builtin(instance_index) instanceIndex : u32,
  @builtin(vertex_index) vertexIndex : u32,
  @location(0) positions: vec3<f32>,
  @location(1) instancePositions: vec3<f32>,
  @location(2) instancePositions64Low: vec3<f32>,
  @location(3) instanceRadius: f32,
  @location(4) instanceLineWidths: f32,
  @location(5) instanceFillColors: vec4<f32>,
  @location(6) instanceLineColors: vec4<f32>,
  @location(7) instancePickingColors: vec3<f32>
};

struct Varyings {
  @builtin(position) position: vec4<f32>,
  @location(0) vFillColor: vec4<f32>,
  @location(1) vLineColor: vec4<f32>,
  @location(2) unitPosition: vec2<f32>,
  @location(3) innerUnitRadius: f32,
  @location(4) outerRadiusPixels: f32,
};

@vertex
fn vertexMain(attributes: Attributes) -> Varyings {
  var varyings: Varyings;

  // Draw an inline geometry constant array clip space triangle to verify that rendering works.
  // var positions = array<vec2<f32>, 3>(vec2(0.0, 0.5), vec2(-0.5, -0.5), vec2(0.5, -0.5));
  // if (attributes.instanceIndex == 0) {
  //   varyings.position = vec4<f32>(positions[attributes.vertexIndex], 0.0, 1.0);
  //   return varyings;
  // }

  // var geometry: Geometry;
  // geometry.worldPosition = instancePositions;

  // Multiply out radius and clamp to limits
  varyings.outerRadiusPixels = clamp(
    project_unit_size_to_pixel(scatterplot.radiusScale * attributes.instanceRadius, scatterplot.radiusUnits),
    scatterplot.radiusMinPixels, scatterplot.radiusMaxPixels
  );

  // Multiply out line width and clamp to limits
  let lineWidthPixels = clamp(
    project_unit_size_to_pixel(scatterplot.lineWidthScale * attributes.instanceLineWidths, scatterplot.lineWidthUnits),
    scatterplot.lineWidthMinPixels, scatterplot.lineWidthMaxPixels
  );

  // outer radius needs to offset by half stroke width
  varyings.outerRadiusPixels += scatterplot.stroked * lineWidthPixels / 2.0;
  // Expand geometry to accommodate edge smoothing
  let edgePadding = select(
    (varyings.outerRadiusPixels + SMOOTH_EDGE_RADIUS) / varyings.outerRadiusPixels,
    1.0,
    scatterplot.antialiasing != 0
  );

  // position on the containing square in [-1, 1] space
  varyings.unitPosition = edgePadding * attributes.positions.xy;
  geometry.uv = varyings.unitPosition;
  geometry.pickingColor = attributes.instancePickingColors;

  varyings.innerUnitRadius = 1.0 - scatterplot.stroked * lineWidthPixels / varyings.outerRadiusPixels;

  if (scatterplot.billboard != 0) {
    varyings.position = project_position_to_clipspace(attributes.instancePositions, attributes.instancePositions64Low, vec3<f32>(0.0)); // TODO , geometry.position);
    // DECKGL_FILTER_GL_POSITION(varyings.position, geometry);
    let offset = attributes.positions; // * edgePadding * varyings.outerRadiusPixels;
    // DECKGL_FILTER_SIZE(offset, geometry);
    let clipPixels = project_pixel_size_to_clipspace(offset.xy);
    varyings.position.x = clipPixels.x;
    varyings.position.y = clipPixels.y;
  } else {
    let offset = edgePadding * attributes.positions * project_pixel_size_float(varyings.outerRadiusPixels);
    // DECKGL_FILTER_SIZE(offset, geometry);
    varyings.position = project_position_to_clipspace(attributes.instancePositions, attributes.instancePositions64Low, offset); // TODO , geometry.position);
    // DECKGL_FILTER_GL_POSITION(varyings.position, geometry);
  }

  // Apply opacity to instance color, or return instance picking color
  varyings.vFillColor = vec4<f32>(attributes.instanceFillColors.rgb, attributes.instanceFillColors.a * color.opacity);
  // DECKGL_FILTER_COLOR(varyings.vFillColor, geometry);
  varyings.vLineColor = vec4<f32>(attributes.instanceLineColors.rgb, attributes.instanceLineColors.a * color.opacity);
  // DECKGL_FILTER_COLOR(varyings.vLineColor, geometry);

  return varyings;
}

@fragment
fn fragmentMain(varyings: Varyings) -> @location(0) vec4<f32> {
  // var geometry: Geometry;
  // geometry.uv = unitPosition;

  let distToCenter = length(varyings.unitPosition) * varyings.outerRadiusPixels;
  let inCircle = select(
    smoothedge(distToCenter, varyings.outerRadiusPixels),
    step(distToCenter, varyings.outerRadiusPixels),
    scatterplot.antialiasing != 0
  );

  if (inCircle == 0.0) {
    discard;
  }

  var fragColor: vec4<f32>;

  if (scatterplot.stroked != 0) {
    let isLine = select(
      smoothedge(varyings.innerUnitRadius * varyings.outerRadiusPixels, distToCenter),
      step(varyings.innerUnitRadius * varyings.outerRadiusPixels, distToCenter),
      scatterplot.antialiasing != 0
    );

    if (scatterplot.filled != 0) {
      fragColor = mix(varyings.vFillColor, varyings.vLineColor, isLine);
    } else {
      if (isLine == 0.0) {
        discard;
      }
      fragColor = vec4<f32>(varyings.vLineColor.rgb, varyings.vLineColor.a * isLine);
    }
  } else if (scatterplot.filled == 0) {
    discard;
  } else {
    fragColor = varyings.vFillColor;
  }

  fragColor.a *= inCircle;
  // DECKGL_FILTER_COLOR(fragColor, geometry);

  // Apply premultiplied alpha as required by transparent canvas
  fragColor = deckgl_premultiplied_alpha(fragColor);

  return fragColor;
  // return vec4<f32>(0, 0, 1, 1);
}
`
  );

  // ../layers/src/scatterplot-layer/scatterplot-layer.ts
  var DEFAULT_COLOR5 = [0, 0, 0, 255];
  var defaultProps8 = {
    radiusUnits: "meters",
    radiusScale: { type: "number", min: 0, value: 1 },
    radiusMinPixels: { type: "number", min: 0, value: 0 },
    //  min point radius in pixels
    radiusMaxPixels: { type: "number", min: 0, value: Number.MAX_SAFE_INTEGER },
    // max point radius in pixels
    lineWidthUnits: "meters",
    lineWidthScale: { type: "number", min: 0, value: 1 },
    lineWidthMinPixels: { type: "number", min: 0, value: 0 },
    lineWidthMaxPixels: { type: "number", min: 0, value: Number.MAX_SAFE_INTEGER },
    stroked: false,
    filled: true,
    billboard: false,
    antialiasing: true,
    getPosition: { type: "accessor", value: (x4) => x4.position },
    getRadius: { type: "accessor", value: 1 },
    getFillColor: { type: "accessor", value: DEFAULT_COLOR5 },
    getLineColor: { type: "accessor", value: DEFAULT_COLOR5 },
    getLineWidth: { type: "accessor", value: 1 },
    // deprecated
    strokeWidth: { deprecatedFor: "getLineWidth" },
    outline: { deprecatedFor: "stroked" },
    getColor: { deprecatedFor: ["getFillColor", "getLineColor"] }
  };
  var ScatterplotLayer = class extends Layer {
    getShaders() {
      return super.getShaders({
        vs: scatterplot_layer_vertex_glsl_default,
        fs: scatterplot_layer_fragment_glsl_default,
        source: scatterplot_layer_wgsl_default,
        modules: [project32_default, color_default, picking_default, scatterplotUniforms]
      });
    }
    initializeState() {
      this.getAttributeManager().addInstanced({
        instancePositions: {
          size: 3,
          type: "float64",
          fp64: this.use64bitPositions(),
          transition: true,
          accessor: "getPosition"
        },
        instanceRadius: {
          size: 1,
          transition: true,
          accessor: "getRadius",
          defaultValue: 1
        },
        instanceFillColors: {
          size: this.props.colorFormat.length,
          transition: true,
          type: "unorm8",
          accessor: "getFillColor",
          defaultValue: [0, 0, 0, 255]
        },
        instanceLineColors: {
          size: this.props.colorFormat.length,
          transition: true,
          type: "unorm8",
          accessor: "getLineColor",
          defaultValue: [0, 0, 0, 255]
        },
        instanceLineWidths: {
          size: 1,
          transition: true,
          accessor: "getLineWidth",
          defaultValue: 1
        }
      });
    }
    updateState(params) {
      super.updateState(params);
      if (params.changeFlags.extensionsChanged) {
        this.state.model?.destroy();
        this.state.model = this._getModel();
        this.getAttributeManager().invalidateAll();
      }
    }
    draw({ uniforms }) {
      const {
        radiusUnits,
        radiusScale,
        radiusMinPixels,
        radiusMaxPixels,
        stroked,
        filled,
        billboard,
        antialiasing,
        lineWidthUnits,
        lineWidthScale,
        lineWidthMinPixels,
        lineWidthMaxPixels
      } = this.props;
      const scatterplotProps = {
        stroked,
        filled,
        billboard,
        antialiasing,
        radiusUnits: UNIT[radiusUnits],
        radiusScale,
        radiusMinPixels,
        radiusMaxPixels,
        lineWidthUnits: UNIT[lineWidthUnits],
        lineWidthScale,
        lineWidthMinPixels,
        lineWidthMaxPixels
      };
      const model = this.state.model;
      model.shaderInputs.setProps({ scatterplot: scatterplotProps });
      if (this.context.device.type === "webgpu") {
        model.instanceCount = this.props.data.length;
      }
      model.draw(this.context.renderPass);
    }
    _getModel() {
      const parameters2 = this.context.device.type === "webgpu" ? {
        depthWriteEnabled: true,
        depthCompare: "less-equal"
      } : void 0;
      const positions = [-1, -1, 0, 1, -1, 0, -1, 1, 0, 1, 1, 0];
      return new Model(this.context.device, {
        ...this.getShaders(),
        id: this.props.id,
        bufferLayout: this.getAttributeManager().getBufferLayouts(),
        geometry: new Geometry({
          topology: "triangle-strip",
          attributes: {
            positions: { size: 3, value: new Float32Array(positions) }
          }
        }),
        isInstanced: true,
        parameters: parameters2
      });
    }
  };
  ScatterplotLayer.defaultProps = defaultProps8;
  ScatterplotLayer.layerName = "ScatterplotLayer";

  // ../layers/node_modules/@math.gl/polygon/dist/polygon-utils.js
  var WINDING = {
    CLOCKWISE: 1,
    COUNTER_CLOCKWISE: -1
  };
  function modifyPolygonWindingDirection(points, direction, options = {}) {
    const windingDirection = getPolygonWindingDirection(points, options);
    if (windingDirection !== direction) {
      reversePolygon(points, options);
      return true;
    }
    return false;
  }
  function getPolygonWindingDirection(points, options = {}) {
    return Math.sign(getPolygonSignedArea(points, options));
  }
  var DimIndex = {
    x: 0,
    y: 1,
    z: 2
  };
  function getPolygonSignedArea(points, options = {}) {
    const { start = 0, end = points.length, plane = "xy" } = options;
    const dim = options.size || 2;
    let area2 = 0;
    const i0 = DimIndex[plane[0]];
    const i1 = DimIndex[plane[1]];
    for (let i7 = start, j4 = end - dim; i7 < end; i7 += dim) {
      area2 += (points[i7 + i0] - points[j4 + i0]) * (points[i7 + i1] + points[j4 + i1]);
      j4 = i7;
    }
    return area2 / 2;
  }
  function reversePolygon(points, options) {
    const { start = 0, end = points.length, size = 2 } = options;
    const numPoints = (end - start) / size;
    const numSwaps = Math.floor(numPoints / 2);
    for (let i7 = 0; i7 < numSwaps; ++i7) {
      const b1 = start + i7 * size;
      const b22 = start + (numPoints - 1 - i7) * size;
      for (let j4 = 0; j4 < size; ++j4) {
        const tmp = points[b1 + j4];
        points[b1 + j4] = points[b22 + j4];
        points[b22 + j4] = tmp;
      }
    }
  }

  // ../layers/node_modules/@math.gl/polygon/dist/utils.js
  function push(target2, source4) {
    const size = source4.length;
    const startIndex = target2.length;
    if (startIndex > 0) {
      let isDuplicate = true;
      for (let i7 = 0; i7 < size; i7++) {
        if (target2[startIndex - size + i7] !== source4[i7]) {
          isDuplicate = false;
          break;
        }
      }
      if (isDuplicate) {
        return false;
      }
    }
    for (let i7 = 0; i7 < size; i7++) {
      target2[startIndex + i7] = source4[i7];
    }
    return true;
  }
  function copy5(target2, source4) {
    const size = source4.length;
    for (let i7 = 0; i7 < size; i7++) {
      target2[i7] = source4[i7];
    }
  }
  function getPointAtIndex(positions, index, size, offset, out = []) {
    const startI = offset + index * size;
    for (let i7 = 0; i7 < size; i7++) {
      out[i7] = positions[startI + i7];
    }
    return out;
  }

  // ../layers/node_modules/@math.gl/polygon/dist/lineclip.js
  function intersect(a6, b4, edge, bbox, out = []) {
    let t5;
    let snap;
    if (edge & 8) {
      t5 = (bbox[3] - a6[1]) / (b4[1] - a6[1]);
      snap = 3;
    } else if (edge & 4) {
      t5 = (bbox[1] - a6[1]) / (b4[1] - a6[1]);
      snap = 1;
    } else if (edge & 2) {
      t5 = (bbox[2] - a6[0]) / (b4[0] - a6[0]);
      snap = 2;
    } else if (edge & 1) {
      t5 = (bbox[0] - a6[0]) / (b4[0] - a6[0]);
      snap = 0;
    } else {
      return null;
    }
    for (let i7 = 0; i7 < a6.length; i7++) {
      out[i7] = (snap & 1) === i7 ? bbox[snap] : t5 * (b4[i7] - a6[i7]) + a6[i7];
    }
    return out;
  }
  function bitCode(p5, bbox) {
    let code = 0;
    if (p5[0] < bbox[0])
      code |= 1;
    else if (p5[0] > bbox[2])
      code |= 2;
    if (p5[1] < bbox[1])
      code |= 4;
    else if (p5[1] > bbox[3])
      code |= 8;
    return code;
  }

  // ../layers/node_modules/@math.gl/polygon/dist/cut-by-grid.js
  function cutPolylineByGrid(positions, options) {
    const { size = 2, broken = false, gridResolution = 10, gridOffset = [0, 0], startIndex = 0, endIndex = positions.length } = options || {};
    const numPoints = (endIndex - startIndex) / size;
    let part = [];
    const result = [part];
    const a6 = getPointAtIndex(positions, 0, size, startIndex);
    let b4;
    let codeB;
    const cell = getGridCell(a6, gridResolution, gridOffset, []);
    const scratchPoint2 = [];
    push(part, a6);
    for (let i7 = 1; i7 < numPoints; i7++) {
      b4 = getPointAtIndex(positions, i7, size, startIndex, b4);
      codeB = bitCode(b4, cell);
      while (codeB) {
        intersect(a6, b4, codeB, cell, scratchPoint2);
        const codeAlt = bitCode(scratchPoint2, cell);
        if (codeAlt) {
          intersect(a6, scratchPoint2, codeAlt, cell, scratchPoint2);
          codeB = codeAlt;
        }
        push(part, scratchPoint2);
        copy5(a6, scratchPoint2);
        moveToNeighborCell(cell, gridResolution, codeB);
        if (broken && part.length > size) {
          part = [];
          result.push(part);
          push(part, a6);
        }
        codeB = bitCode(b4, cell);
      }
      push(part, b4);
      copy5(a6, b4);
    }
    return broken ? result : result[0];
  }
  var TYPE_INSIDE = 0;
  var TYPE_BORDER = 1;
  function cutPolygonByGrid(positions, holeIndices = null, options) {
    if (!positions.length) {
      return [];
    }
    const { size = 2, gridResolution = 10, gridOffset = [0, 0], edgeTypes = false } = options || {};
    const result = [];
    const queue = [
      {
        pos: positions,
        types: edgeTypes ? new Array(positions.length / size).fill(TYPE_BORDER) : null,
        holes: holeIndices || []
      }
    ];
    const bbox = [[], []];
    let cell = [];
    while (queue.length) {
      const { pos, types, holes } = queue.shift();
      getBoundingBox(pos, size, holes[0] || pos.length, bbox);
      cell = getGridCell(bbox[0], gridResolution, gridOffset, cell);
      const code = bitCode(bbox[1], cell);
      if (code) {
        let parts = bisectPolygon(pos, types, size, 0, holes[0] || pos.length, cell, code);
        const polygonLow = { pos: parts[0].pos, types: parts[0].types, holes: [] };
        const polygonHigh = { pos: parts[1].pos, types: parts[1].types, holes: [] };
        queue.push(polygonLow, polygonHigh);
        for (let i7 = 0; i7 < holes.length; i7++) {
          parts = bisectPolygon(pos, types, size, holes[i7], holes[i7 + 1] || pos.length, cell, code);
          if (parts[0]) {
            polygonLow.holes.push(polygonLow.pos.length);
            polygonLow.pos = concatInPlace(polygonLow.pos, parts[0].pos);
            if (edgeTypes) {
              polygonLow.types = concatInPlace(polygonLow.types, parts[0].types);
            }
          }
          if (parts[1]) {
            polygonHigh.holes.push(polygonHigh.pos.length);
            polygonHigh.pos = concatInPlace(polygonHigh.pos, parts[1].pos);
            if (edgeTypes) {
              polygonHigh.types = concatInPlace(polygonHigh.types, parts[1].types);
            }
          }
        }
      } else {
        const polygon = { positions: pos };
        if (edgeTypes) {
          polygon.edgeTypes = types;
        }
        if (holes.length) {
          polygon.holeIndices = holes;
        }
        result.push(polygon);
      }
    }
    return result;
  }
  function bisectPolygon(positions, edgeTypes, size, startIndex, endIndex, bbox, edge) {
    const numPoints = (endIndex - startIndex) / size;
    const resultLow = [];
    const resultHigh = [];
    const typesLow = [];
    const typesHigh = [];
    const scratchPoint2 = [];
    let p5;
    let side;
    let type;
    const prev = getPointAtIndex(positions, numPoints - 1, size, startIndex);
    let prevSide = Math.sign(edge & 8 ? prev[1] - bbox[3] : prev[0] - bbox[2]);
    let prevType = edgeTypes && edgeTypes[numPoints - 1];
    let lowPointCount = 0;
    let highPointCount = 0;
    for (let i7 = 0; i7 < numPoints; i7++) {
      p5 = getPointAtIndex(positions, i7, size, startIndex, p5);
      side = Math.sign(edge & 8 ? p5[1] - bbox[3] : p5[0] - bbox[2]);
      type = edgeTypes && edgeTypes[startIndex / size + i7];
      if (side && prevSide && prevSide !== side) {
        intersect(prev, p5, edge, bbox, scratchPoint2);
        push(resultLow, scratchPoint2) && typesLow.push(prevType);
        push(resultHigh, scratchPoint2) && typesHigh.push(prevType);
      }
      if (side <= 0) {
        push(resultLow, p5) && typesLow.push(type);
        lowPointCount -= side;
      } else if (typesLow.length) {
        typesLow[typesLow.length - 1] = TYPE_INSIDE;
      }
      if (side >= 0) {
        push(resultHigh, p5) && typesHigh.push(type);
        highPointCount += side;
      } else if (typesHigh.length) {
        typesHigh[typesHigh.length - 1] = TYPE_INSIDE;
      }
      copy5(prev, p5);
      prevSide = side;
      prevType = type;
    }
    return [
      lowPointCount ? { pos: resultLow, types: edgeTypes && typesLow } : null,
      highPointCount ? { pos: resultHigh, types: edgeTypes && typesHigh } : null
    ];
  }
  function getGridCell(p5, gridResolution, gridOffset, out) {
    const left = Math.floor((p5[0] - gridOffset[0]) / gridResolution) * gridResolution + gridOffset[0];
    const bottom = Math.floor((p5[1] - gridOffset[1]) / gridResolution) * gridResolution + gridOffset[1];
    out[0] = left;
    out[1] = bottom;
    out[2] = left + gridResolution;
    out[3] = bottom + gridResolution;
    return out;
  }
  function moveToNeighborCell(cell, gridResolution, edge) {
    if (edge & 8) {
      cell[1] += gridResolution;
      cell[3] += gridResolution;
    } else if (edge & 4) {
      cell[1] -= gridResolution;
      cell[3] -= gridResolution;
    } else if (edge & 2) {
      cell[0] += gridResolution;
      cell[2] += gridResolution;
    } else if (edge & 1) {
      cell[0] -= gridResolution;
      cell[2] -= gridResolution;
    }
  }
  function getBoundingBox(positions, size, endIndex, out) {
    let minX = Infinity;
    let maxX = -Infinity;
    let minY = Infinity;
    let maxY = -Infinity;
    for (let i7 = 0; i7 < endIndex; i7 += size) {
      const x4 = positions[i7];
      const y5 = positions[i7 + 1];
      minX = x4 < minX ? x4 : minX;
      maxX = x4 > maxX ? x4 : maxX;
      minY = y5 < minY ? y5 : minY;
      maxY = y5 > maxY ? y5 : maxY;
    }
    out[0][0] = minX;
    out[0][1] = minY;
    out[1][0] = maxX;
    out[1][1] = maxY;
    return out;
  }
  function concatInPlace(arr1, arr2) {
    for (let i7 = 0; i7 < arr2.length; i7++) {
      arr1.push(arr2[i7]);
    }
    return arr1;
  }

  // ../layers/node_modules/@math.gl/polygon/dist/cut-by-mercator-bounds.js
  var DEFAULT_MAX_LATITUDE = 85.051129;
  function cutPolylineByMercatorBounds(positions, options) {
    const { size = 2, startIndex = 0, endIndex = positions.length, normalize: normalize17 = true } = options || {};
    const newPositions = positions.slice(startIndex, endIndex);
    wrapLongitudesForShortestPath(newPositions, size, 0, endIndex - startIndex);
    const parts = cutPolylineByGrid(newPositions, {
      size,
      broken: true,
      gridResolution: 360,
      gridOffset: [-180, -180]
    });
    if (normalize17) {
      for (const part of parts) {
        shiftLongitudesIntoRange(part, size);
      }
    }
    return parts;
  }
  function cutPolygonByMercatorBounds(positions, holeIndices = null, options) {
    const { size = 2, normalize: normalize17 = true, edgeTypes = false } = options || {};
    holeIndices = holeIndices || [];
    const newPositions = [];
    const newHoleIndices = [];
    let srcStartIndex = 0;
    let targetIndex = 0;
    for (let ringIndex = 0; ringIndex <= holeIndices.length; ringIndex++) {
      const srcEndIndex = holeIndices[ringIndex] || positions.length;
      const targetStartIndex = targetIndex;
      const splitIndex = findSplitIndex(positions, size, srcStartIndex, srcEndIndex);
      for (let i7 = splitIndex; i7 < srcEndIndex; i7++) {
        newPositions[targetIndex++] = positions[i7];
      }
      for (let i7 = srcStartIndex; i7 < splitIndex; i7++) {
        newPositions[targetIndex++] = positions[i7];
      }
      wrapLongitudesForShortestPath(newPositions, size, targetStartIndex, targetIndex);
      insertPoleVertices(newPositions, size, targetStartIndex, targetIndex, options?.maxLatitude);
      srcStartIndex = srcEndIndex;
      newHoleIndices[ringIndex] = targetIndex;
    }
    newHoleIndices.pop();
    const parts = cutPolygonByGrid(newPositions, newHoleIndices, {
      size,
      gridResolution: 360,
      gridOffset: [-180, -180],
      edgeTypes
    });
    if (normalize17) {
      for (const part of parts) {
        shiftLongitudesIntoRange(part.positions, size);
      }
    }
    return parts;
  }
  function findSplitIndex(positions, size, startIndex, endIndex) {
    let maxLat = -1;
    let pointIndex = -1;
    for (let i7 = startIndex + 1; i7 < endIndex; i7 += size) {
      const lat = Math.abs(positions[i7]);
      if (lat > maxLat) {
        maxLat = lat;
        pointIndex = i7 - 1;
      }
    }
    return pointIndex;
  }
  function insertPoleVertices(positions, size, startIndex, endIndex, maxLatitude = DEFAULT_MAX_LATITUDE) {
    const firstLng = positions[startIndex];
    const lastLng = positions[endIndex - size];
    if (Math.abs(firstLng - lastLng) > 180) {
      const p5 = getPointAtIndex(positions, 0, size, startIndex);
      p5[0] += Math.round((lastLng - firstLng) / 360) * 360;
      push(positions, p5);
      p5[1] = Math.sign(p5[1]) * maxLatitude;
      push(positions, p5);
      p5[0] = firstLng;
      push(positions, p5);
    }
  }
  function wrapLongitudesForShortestPath(positions, size, startIndex, endIndex) {
    let prevLng = positions[0];
    let lng;
    for (let i7 = startIndex; i7 < endIndex; i7 += size) {
      lng = positions[i7];
      const delta = lng - prevLng;
      if (delta > 180 || delta < -180) {
        lng -= Math.round(delta / 360) * 360;
      }
      positions[i7] = prevLng = lng;
    }
  }
  function shiftLongitudesIntoRange(positions, size) {
    let refLng;
    const pointCount = positions.length / size;
    for (let i7 = 0; i7 < pointCount; i7++) {
      refLng = positions[i7 * size];
      if ((refLng + 180) % 360 !== 0) {
        break;
      }
    }
    const delta = -Math.round(refLng / 360) * 360;
    if (delta === 0) {
      return;
    }
    for (let i7 = 0; i7 < pointCount; i7++) {
      positions[i7 * size] += delta;
    }
  }

  // ../layers/src/column-layer/column-geometry.ts
  var ColumnGeometry = class extends Geometry {
    constructor(props) {
      const { indices, attributes } = tesselateColumn(props);
      super({
        ...props,
        indices,
        // @ts-expect-error
        attributes
      });
    }
  };
  function tesselateColumn(props) {
    const { radius, height = 1, nradial = 10 } = props;
    let { vertices } = props;
    if (vertices) {
      log_default.assert(vertices.length >= nradial);
      vertices = vertices.flatMap((v5) => [v5[0], v5[1]]);
      modifyPolygonWindingDirection(vertices, WINDING.COUNTER_CLOCKWISE);
    }
    const isExtruded = height > 0;
    const vertsAroundEdge = nradial + 1;
    const numVertices = isExtruded ? vertsAroundEdge * 3 + 1 : nradial;
    const stepAngle = Math.PI * 2 / nradial;
    const indices = new Uint16Array(isExtruded ? nradial * 3 * 2 : 0);
    const positions = new Float32Array(numVertices * 3);
    const normals = new Float32Array(numVertices * 3);
    let i7 = 0;
    if (isExtruded) {
      for (let j4 = 0; j4 < vertsAroundEdge; j4++) {
        const a6 = j4 * stepAngle;
        const vertexIndex = j4 % nradial;
        const sin6 = Math.sin(a6);
        const cos6 = Math.cos(a6);
        for (let k4 = 0; k4 < 2; k4++) {
          positions[i7 + 0] = vertices ? vertices[vertexIndex * 2] : cos6 * radius;
          positions[i7 + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin6 * radius;
          positions[i7 + 2] = (1 / 2 - k4) * height;
          normals[i7 + 0] = vertices ? vertices[vertexIndex * 2] : cos6;
          normals[i7 + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin6;
          i7 += 3;
        }
      }
      positions[i7 + 0] = positions[i7 - 3];
      positions[i7 + 1] = positions[i7 - 2];
      positions[i7 + 2] = positions[i7 - 1];
      i7 += 3;
    }
    for (let j4 = isExtruded ? 0 : 1; j4 < vertsAroundEdge; j4++) {
      const v5 = Math.floor(j4 / 2) * Math.sign(0.5 - j4 % 2);
      const a6 = v5 * stepAngle;
      const vertexIndex = (v5 + nradial) % nradial;
      const sin6 = Math.sin(a6);
      const cos6 = Math.cos(a6);
      positions[i7 + 0] = vertices ? vertices[vertexIndex * 2] : cos6 * radius;
      positions[i7 + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin6 * radius;
      positions[i7 + 2] = height / 2;
      normals[i7 + 2] = 1;
      i7 += 3;
    }
    if (isExtruded) {
      let index = 0;
      for (let j4 = 0; j4 < nradial; j4++) {
        indices[index++] = j4 * 2 + 0;
        indices[index++] = j4 * 2 + 2;
        indices[index++] = j4 * 2 + 0;
        indices[index++] = j4 * 2 + 1;
        indices[index++] = j4 * 2 + 1;
        indices[index++] = j4 * 2 + 3;
      }
    }
    return {
      indices,
      attributes: {
        POSITION: { size: 3, value: positions },
        NORMAL: { size: 3, value: normals }
      }
    };
  }

  // ../layers/src/column-layer/column-layer-uniforms.ts
  var uniformBlock10 = `uniform columnUniforms {
  float radius;
  float angle;
  vec2 offset;
  bool extruded;
  bool stroked;
  bool isStroke;
  float coverage;
  float elevationScale;
  float edgeDistance;
  float widthScale;
  float widthMinPixels;
  float widthMaxPixels;
  highp int radiusUnits;
  highp int widthUnits;
} column;
`;
  var columnUniforms = {
    name: "column",
    vs: uniformBlock10,
    fs: uniformBlock10,
    uniformTypes: {
      radius: "f32",
      angle: "f32",
      offset: "vec2<f32>",
      extruded: "f32",
      stroked: "f32",
      isStroke: "f32",
      coverage: "f32",
      elevationScale: "f32",
      edgeDistance: "f32",
      widthScale: "f32",
      widthMinPixels: "f32",
      widthMaxPixels: "f32",
      radiusUnits: "i32",
      widthUnits: "i32"
    }
  };

  // ../layers/src/column-layer/column-layer-vertex.glsl.ts
  var column_layer_vertex_glsl_default = `#version 300 es

#define SHADER_NAME column-layer-vertex-shader

in vec3 positions;
in vec3 normals;

in vec3 instancePositions;
in float instanceElevations;
in vec3 instancePositions64Low;
in vec4 instanceFillColors;
in vec4 instanceLineColors;
in float instanceStrokeWidths;

in vec3 instancePickingColors;

// Result
out vec4 vColor;
#ifdef FLAT_SHADING
out vec3 cameraPosition;
out vec4 position_commonspace;
#endif

void main(void) {
  geometry.worldPosition = instancePositions;

  vec4 color = column.isStroke ? instanceLineColors : instanceFillColors;
  // rotate primitive position and normal
  mat2 rotationMatrix = mat2(cos(column.angle), sin(column.angle), -sin(column.angle), cos(column.angle));

  // calculate elevation, if 3d not enabled set to 0
  // cylindar gemoetry height are between -1.0 to 1.0, transform it to between 0, 1
  float elevation = 0.0;
  // calculate stroke offset
  float strokeOffsetRatio = 1.0;

  if (column.extruded) {
    elevation = instanceElevations * (positions.z + 1.0) / 2.0 * column.elevationScale;
  } else if (column.stroked) {
    float widthPixels = clamp(
      project_size_to_pixel(instanceStrokeWidths * column.widthScale, column.widthUnits),
      column.widthMinPixels, column.widthMaxPixels) / 2.0;
    float halfOffset = project_pixel_size(widthPixels) / project_size(column.edgeDistance * column.coverage * column.radius);
    if (column.isStroke) {
      strokeOffsetRatio -= sign(positions.z) * halfOffset;
    } else {
      strokeOffsetRatio -= halfOffset;
    }
  }

  // if alpha == 0.0 or z < 0.0, do not render element
  float shouldRender = float(color.a > 0.0 && instanceElevations >= 0.0);
  float dotRadius = column.radius * column.coverage * shouldRender;

  geometry.pickingColor = instancePickingColors;

  // project center of column
  vec3 centroidPosition = vec3(instancePositions.xy, instancePositions.z + elevation);
  vec3 centroidPosition64Low = instancePositions64Low;
  vec2 offset = (rotationMatrix * positions.xy * strokeOffsetRatio + column.offset) * dotRadius;
  if (column.radiusUnits == UNIT_METERS) {
    offset = project_size(offset);
  }
  vec3 pos = vec3(offset, 0.);
  DECKGL_FILTER_SIZE(pos, geometry);

  gl_Position = project_position_to_clipspace(centroidPosition, centroidPosition64Low, pos, geometry.position);
  geometry.normal = project_normal(vec3(rotationMatrix * normals.xy, normals.z));
  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);

  // Light calculations
  if (column.extruded && !column.isStroke) {
#ifdef FLAT_SHADING
    cameraPosition = project.cameraPosition;
    position_commonspace = geometry.position;
    vColor = vec4(color.rgb, color.a * layer.opacity);
#else
    vec3 lightColor = lighting_getLightColor(color.rgb, project.cameraPosition, geometry.position.xyz, geometry.normal);
    vColor = vec4(lightColor, color.a * layer.opacity);
#endif
  } else {
    vColor = vec4(color.rgb, color.a * layer.opacity);
  }
  DECKGL_FILTER_COLOR(vColor, geometry);
}
`;

  // ../layers/src/column-layer/column-layer-fragment.glsl.ts
  var column_layer_fragment_glsl_default = `#version 300 es
#define SHADER_NAME column-layer-fragment-shader

precision highp float;

out vec4 fragColor;

in vec4 vColor;
#ifdef FLAT_SHADING
in vec3 cameraPosition;
in vec4 position_commonspace;
#endif

void main(void) {
  fragColor = vColor;
  // Fails to compile on some Android devices if geometry is never assigned (#8411)
  geometry.uv = vec2(0.);
#ifdef FLAT_SHADING
  if (column.extruded && !column.isStroke && !bool(picking.isActive)) {
    vec3 normal = normalize(cross(dFdx(position_commonspace.xyz), dFdy(position_commonspace.xyz)));
    fragColor.rgb = lighting_getLightColor(vColor.rgb, cameraPosition, position_commonspace.xyz, normal);
  }
#endif
  DECKGL_FILTER_COLOR(fragColor, geometry);
}
`;

  // ../layers/src/column-layer/column-layer.ts
  var DEFAULT_COLOR6 = [0, 0, 0, 255];
  var defaultProps9 = {
    diskResolution: { type: "number", min: 4, value: 20 },
    vertices: null,
    radius: { type: "number", min: 0, value: 1e3 },
    angle: { type: "number", value: 0 },
    offset: { type: "array", value: [0, 0] },
    coverage: { type: "number", min: 0, max: 1, value: 1 },
    elevationScale: { type: "number", min: 0, value: 1 },
    radiusUnits: "meters",
    lineWidthUnits: "meters",
    lineWidthScale: 1,
    lineWidthMinPixels: 0,
    lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,
    extruded: true,
    wireframe: false,
    filled: true,
    stroked: false,
    flatShading: false,
    getPosition: { type: "accessor", value: (x4) => x4.position },
    getFillColor: { type: "accessor", value: DEFAULT_COLOR6 },
    getLineColor: { type: "accessor", value: DEFAULT_COLOR6 },
    getLineWidth: { type: "accessor", value: 1 },
    getElevation: { type: "accessor", value: 1e3 },
    material: true,
    getColor: { deprecatedFor: ["getFillColor", "getLineColor"] }
  };
  var ColumnLayer = class extends Layer {
    getShaders() {
      const defines2 = {};
      const { flatShading } = this.props;
      if (flatShading) {
        defines2.FLAT_SHADING = 1;
      }
      return super.getShaders({
        vs: column_layer_vertex_glsl_default,
        fs: column_layer_fragment_glsl_default,
        defines: defines2,
        modules: [project32_default, flatShading ? phongMaterial : gouraudMaterial, picking_default, columnUniforms]
      });
    }
    /**
     * DeckGL calls initializeState when GL context is available
     * Essentially a deferred constructor
     */
    initializeState() {
      const attributeManager = this.getAttributeManager();
      attributeManager.addInstanced({
        instancePositions: {
          size: 3,
          type: "float64",
          fp64: this.use64bitPositions(),
          transition: true,
          accessor: "getPosition"
        },
        instanceElevations: {
          size: 1,
          transition: true,
          accessor: "getElevation"
        },
        instanceFillColors: {
          size: this.props.colorFormat.length,
          type: "unorm8",
          transition: true,
          accessor: "getFillColor",
          defaultValue: DEFAULT_COLOR6
        },
        instanceLineColors: {
          size: this.props.colorFormat.length,
          type: "unorm8",
          transition: true,
          accessor: "getLineColor",
          defaultValue: DEFAULT_COLOR6
        },
        instanceStrokeWidths: {
          size: 1,
          accessor: "getLineWidth",
          transition: true
        }
      });
    }
    updateState(params) {
      super.updateState(params);
      const { props, oldProps, changeFlags } = params;
      const regenerateModels = changeFlags.extensionsChanged || props.flatShading !== oldProps.flatShading;
      if (regenerateModels) {
        this.state.models?.forEach((model) => model.destroy());
        this.setState(this._getModels());
        this.getAttributeManager().invalidateAll();
      }
      const instanceCount = this.getNumInstances();
      this.state.fillModel.setInstanceCount(instanceCount);
      this.state.wireframeModel.setInstanceCount(instanceCount);
      if (regenerateModels || props.diskResolution !== oldProps.diskResolution || props.vertices !== oldProps.vertices || (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)) {
        this._updateGeometry(props);
      }
    }
    getGeometry(diskResolution, vertices, hasThinkness) {
      const geometry = new ColumnGeometry({
        radius: 1,
        height: hasThinkness ? 2 : 0,
        vertices,
        nradial: diskResolution
      });
      let meanVertexDistance = 0;
      if (vertices) {
        for (let i7 = 0; i7 < diskResolution; i7++) {
          const p5 = vertices[i7];
          const d5 = Math.sqrt(p5[0] * p5[0] + p5[1] * p5[1]);
          meanVertexDistance += d5 / diskResolution;
        }
      } else {
        meanVertexDistance = 1;
      }
      this.setState({
        edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance
      });
      return geometry;
    }
    _getModels() {
      const shaders = this.getShaders();
      const bufferLayout = this.getAttributeManager().getBufferLayouts();
      const fillModel = new Model(this.context.device, {
        ...shaders,
        id: `${this.props.id}-fill`,
        bufferLayout,
        isInstanced: true
      });
      const wireframeModel = new Model(this.context.device, {
        ...shaders,
        id: `${this.props.id}-wireframe`,
        bufferLayout,
        isInstanced: true
      });
      return {
        fillModel,
        wireframeModel,
        models: [wireframeModel, fillModel]
      };
    }
    _updateGeometry({ diskResolution, vertices, extruded, stroked }) {
      const geometry = this.getGeometry(diskResolution, vertices, extruded || stroked);
      this.setState({
        fillVertexCount: geometry.attributes.POSITION.value.length / 3
      });
      const fillModel = this.state.fillModel;
      const wireframeModel = this.state.wireframeModel;
      fillModel.setGeometry(geometry);
      fillModel.setTopology("triangle-strip");
      fillModel.setIndexBuffer(null);
      wireframeModel.setGeometry(geometry);
      wireframeModel.setTopology("line-list");
    }
    draw({ uniforms }) {
      const {
        lineWidthUnits,
        lineWidthScale,
        lineWidthMinPixels,
        lineWidthMaxPixels,
        radiusUnits,
        elevationScale,
        extruded,
        filled,
        stroked,
        wireframe,
        offset,
        coverage,
        radius,
        angle: angle10
      } = this.props;
      const fillModel = this.state.fillModel;
      const wireframeModel = this.state.wireframeModel;
      const { fillVertexCount, edgeDistance } = this.state;
      const columnProps = {
        radius,
        angle: angle10 / 180 * Math.PI,
        offset,
        extruded,
        stroked,
        coverage,
        elevationScale,
        edgeDistance,
        radiusUnits: UNIT[radiusUnits],
        widthUnits: UNIT[lineWidthUnits],
        widthScale: lineWidthScale,
        widthMinPixels: lineWidthMinPixels,
        widthMaxPixels: lineWidthMaxPixels
      };
      if (extruded && wireframe) {
        wireframeModel.shaderInputs.setProps({
          column: {
            ...columnProps,
            isStroke: true
          }
        });
        wireframeModel.draw(this.context.renderPass);
      }
      if (filled) {
        fillModel.setVertexCount(fillVertexCount);
        fillModel.shaderInputs.setProps({
          column: {
            ...columnProps,
            isStroke: false
          }
        });
        fillModel.draw(this.context.renderPass);
      }
      if (!extruded && stroked) {
        fillModel.setVertexCount(fillVertexCount * 2 / 3);
        fillModel.shaderInputs.setProps({
          column: {
            ...columnProps,
            isStroke: true
          }
        });
        fillModel.draw(this.context.renderPass);
      }
    }
  };
  ColumnLayer.layerName = "ColumnLayer";
  ColumnLayer.defaultProps = defaultProps9;

  // ../layers/src/column-layer/grid-cell-layer.ts
  var defaultProps10 = {
    cellSize: { type: "number", min: 0, value: 1e3 },
    offset: { type: "array", value: [1, 1] }
  };
  var GridCellLayer = class extends ColumnLayer {
    _updateGeometry() {
      const geometry = new CubeGeometry();
      this.state.fillModel.setGeometry(geometry);
    }
    draw({ uniforms }) {
      const { elevationScale, extruded, offset, coverage, cellSize, angle: angle10, radiusUnits } = this.props;
      const fillModel = this.state.fillModel;
      const columnProps = {
        radius: cellSize / 2,
        radiusUnits: UNIT[radiusUnits],
        angle: angle10,
        offset,
        extruded,
        stroked: false,
        coverage,
        elevationScale,
        edgeDistance: 1,
        isStroke: false,
        widthUnits: 0,
        widthScale: 0,
        widthMinPixels: 0,
        widthMaxPixels: 0
      };
      fillModel.shaderInputs.setProps({ column: columnProps });
      fillModel.draw(this.context.renderPass);
    }
  };
  GridCellLayer.layerName = "GridCellLayer";
  GridCellLayer.defaultProps = defaultProps10;

  // ../layers/src/path-layer/path.ts
  function normalizePath(path, size, gridResolution, wrapLongitude) {
    let flatPath;
    if (Array.isArray(path[0])) {
      const length17 = path.length * size;
      flatPath = new Array(length17);
      for (let i7 = 0; i7 < path.length; i7++) {
        for (let j4 = 0; j4 < size; j4++) {
          flatPath[i7 * size + j4] = path[i7][j4] || 0;
        }
      }
    } else {
      flatPath = path;
    }
    if (gridResolution) {
      return cutPolylineByGrid(flatPath, { size, gridResolution });
    }
    if (wrapLongitude) {
      return cutPolylineByMercatorBounds(flatPath, { size });
    }
    return flatPath;
  }

  // ../layers/src/path-layer/path-tesselator.ts
  var START_CAP = 1;
  var END_CAP = 2;
  var INVALID = 4;
  var PathTesselator = class extends Tesselator {
    constructor(opts) {
      super({
        ...opts,
        attributes: {
          // Padding covers shaderAttributes for last segment in largest case fp64
          // additional vertex + hi & low parts, 3 * 6
          positions: {
            size: 3,
            padding: 18,
            initialize: true,
            type: opts.fp64 ? Float64Array : Float32Array
          },
          segmentTypes: { size: 1, type: Uint8ClampedArray }
        }
      });
    }
    /** Get packed attribute by name */
    get(attributeName) {
      return this.attributes[attributeName];
    }
    /* Implement base Tesselator interface */
    getGeometryFromBuffer(buffer) {
      if (this.normalize) {
        return super.getGeometryFromBuffer(buffer);
      }
      return null;
    }
    /* Implement base Tesselator interface */
    normalizeGeometry(path) {
      if (this.normalize) {
        return normalizePath(path, this.positionSize, this.opts.resolution, this.opts.wrapLongitude);
      }
      return path;
    }
    /* Implement base Tesselator interface */
    getGeometrySize(path) {
      if (isCut(path)) {
        let size = 0;
        for (const subPath of path) {
          size += this.getGeometrySize(subPath);
        }
        return size;
      }
      const numPoints = this.getPathLength(path);
      if (numPoints < 2) {
        return 0;
      }
      if (this.isClosed(path)) {
        return numPoints < 3 ? 0 : numPoints + 2;
      }
      return numPoints;
    }
    /* Implement base Tesselator interface */
    updateGeometryAttributes(path, context) {
      if (context.geometrySize === 0) {
        return;
      }
      if (path && isCut(path)) {
        for (const subPath of path) {
          const geometrySize = this.getGeometrySize(subPath);
          context.geometrySize = geometrySize;
          this.updateGeometryAttributes(subPath, context);
          context.vertexStart += geometrySize;
        }
      } else {
        this._updateSegmentTypes(path, context);
        this._updatePositions(path, context);
      }
    }
    _updateSegmentTypes(path, context) {
      const segmentTypes = this.attributes.segmentTypes;
      const isPathClosed = path ? this.isClosed(path) : false;
      const { vertexStart, geometrySize } = context;
      segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);
      if (isPathClosed) {
        segmentTypes[vertexStart] = INVALID;
        segmentTypes[vertexStart + geometrySize - 2] = INVALID;
      } else {
        segmentTypes[vertexStart] += START_CAP;
        segmentTypes[vertexStart + geometrySize - 2] += END_CAP;
      }
      segmentTypes[vertexStart + geometrySize - 1] = INVALID;
    }
    _updatePositions(path, context) {
      const { positions } = this.attributes;
      if (!positions || !path) {
        return;
      }
      const { vertexStart, geometrySize } = context;
      const p5 = new Array(3);
      for (let i7 = vertexStart, ptIndex = 0; ptIndex < geometrySize; i7++, ptIndex++) {
        this.getPointOnPath(path, ptIndex, p5);
        positions[i7 * 3] = p5[0];
        positions[i7 * 3 + 1] = p5[1];
        positions[i7 * 3 + 2] = p5[2];
      }
    }
    // Utilities
    /** Returns the number of points in the path */
    getPathLength(path) {
      return path.length / this.positionSize;
    }
    /** Returns a point on the path at the specified index */
    getPointOnPath(path, index, target2 = []) {
      const { positionSize } = this;
      if (index * positionSize >= path.length) {
        index += 1 - path.length / positionSize;
      }
      const i7 = index * positionSize;
      target2[0] = path[i7];
      target2[1] = path[i7 + 1];
      target2[2] = positionSize === 3 && path[i7 + 2] || 0;
      return target2;
    }
    // Returns true if the first and last points are identical
    isClosed(path) {
      if (!this.normalize) {
        return Boolean(this.opts.loop);
      }
      const { positionSize } = this;
      const lastPointIndex = path.length - positionSize;
      return path[0] === path[lastPointIndex] && path[1] === path[lastPointIndex + 1] && (positionSize === 2 || path[2] === path[lastPointIndex + 2]);
    }
  };
  function isCut(path) {
    return Array.isArray(path[0]);
  }

  // ../layers/src/path-layer/path-layer-uniforms.ts
  var uniformBlock11 = `uniform pathUniforms {
  float widthScale;
  float widthMinPixels;
  float widthMaxPixels;
  float jointType;
  float capType;
  float miterLimit;
  bool billboard;
  highp int widthUnits;
} path;
`;
  var pathUniforms = {
    name: "path",
    vs: uniformBlock11,
    fs: uniformBlock11,
    uniformTypes: {
      widthScale: "f32",
      widthMinPixels: "f32",
      widthMaxPixels: "f32",
      jointType: "f32",
      capType: "f32",
      miterLimit: "f32",
      billboard: "f32",
      widthUnits: "i32"
    }
  };

  // ../layers/src/path-layer/path-layer-vertex.glsl.ts
  var path_layer_vertex_glsl_default = `#version 300 es
#define SHADER_NAME path-layer-vertex-shader

in vec2 positions;

in float instanceTypes;
in vec3 instanceStartPositions;
in vec3 instanceEndPositions;
in vec3 instanceLeftPositions;
in vec3 instanceRightPositions;
in vec3 instanceLeftPositions64Low;
in vec3 instanceStartPositions64Low;
in vec3 instanceEndPositions64Low;
in vec3 instanceRightPositions64Low;
in float instanceStrokeWidths;
in vec4 instanceColors;
in vec3 instancePickingColors;

uniform float opacity;

out vec4 vColor;
out vec2 vCornerOffset;
out float vMiterLength;
out vec2 vPathPosition;
out float vPathLength;
out float vJointType;

const float EPSILON = 0.001;
const vec3 ZERO_OFFSET = vec3(0.0);

float flipIfTrue(bool flag) {
  return -(float(flag) * 2. - 1.);
}

// calculate line join positions
vec3 getLineJoinOffset(
  vec3 prevPoint, vec3 currPoint, vec3 nextPoint,
  vec2 width
) {
  bool isEnd = positions.x > 0.0;
  // side of the segment - -1: left, 0: center, 1: right
  float sideOfPath = positions.y;
  float isJoint = float(sideOfPath == 0.0);

  vec3 deltaA3 = (currPoint - prevPoint);
  vec3 deltaB3 = (nextPoint - currPoint);

  mat3 rotationMatrix;
  bool needsRotation = !path.billboard && project_needs_rotation(currPoint, rotationMatrix);
  if (needsRotation) {
    deltaA3 = deltaA3 * rotationMatrix;
    deltaB3 = deltaB3 * rotationMatrix;
  }
  vec2 deltaA = deltaA3.xy / width;
  vec2 deltaB = deltaB3.xy / width;

  float lenA = length(deltaA);
  float lenB = length(deltaB);

  vec2 dirA = lenA > 0. ? normalize(deltaA) : vec2(0.0, 0.0);
  vec2 dirB = lenB > 0. ? normalize(deltaB) : vec2(0.0, 0.0);

  vec2 perpA = vec2(-dirA.y, dirA.x);
  vec2 perpB = vec2(-dirB.y, dirB.x);

  // tangent of the corner
  vec2 tangent = dirA + dirB;
  tangent = length(tangent) > 0. ? normalize(tangent) : perpA;
  // direction of the corner
  vec2 miterVec = vec2(-tangent.y, tangent.x);
  // direction of the segment
  vec2 dir = isEnd ? dirA : dirB;
  // direction of the extrusion
  vec2 perp = isEnd ? perpA : perpB;
  // length of the segment
  float L = isEnd ? lenA : lenB;

  // A = angle of the corner
  float sinHalfA = abs(dot(miterVec, perp));
  float cosHalfA = abs(dot(dirA, miterVec));

  // -1: right, 1: left
  float turnDirection = flipIfTrue(dirA.x * dirB.y >= dirA.y * dirB.x);

  // relative position to the corner:
  // -1: inside (smaller side of the angle)
  // 0: center
  // 1: outside (bigger side of the angle)
  float cornerPosition = sideOfPath * turnDirection;

  float miterSize = 1.0 / max(sinHalfA, EPSILON);
  // trim if inside corner extends further than the line segment
  miterSize = mix(
    min(miterSize, max(lenA, lenB) / max(cosHalfA, EPSILON)),
    miterSize,
    step(0.0, cornerPosition)
  );

  vec2 offsetVec = mix(miterVec * miterSize, perp, step(0.5, cornerPosition))
    * (sideOfPath + isJoint * turnDirection);

  // special treatment for start cap and end cap
  bool isStartCap = lenA == 0.0 || (!isEnd && (instanceTypes == 1.0 || instanceTypes == 3.0));
  bool isEndCap = lenB == 0.0 || (isEnd && (instanceTypes == 2.0 || instanceTypes == 3.0));
  bool isCap = isStartCap || isEndCap;

  // extend out a triangle to envelope the round cap
  if (isCap) {
    offsetVec = mix(perp * sideOfPath, dir * path.capType * 4.0 * flipIfTrue(isStartCap), isJoint);
    vJointType = path.capType;
  } else {
    vJointType = path.jointType;
  }

  // Generate variables for fragment shader
  vPathLength = L;
  vCornerOffset = offsetVec;
  vMiterLength = dot(vCornerOffset, miterVec * turnDirection);
  vMiterLength = isCap ? isJoint : vMiterLength;

  vec2 offsetFromStartOfPath = vCornerOffset + deltaA * float(isEnd);
  vPathPosition = vec2(
    dot(offsetFromStartOfPath, perp),
    dot(offsetFromStartOfPath, dir)
  );
  geometry.uv = vPathPosition;

  float isValid = step(instanceTypes, 3.5);
  vec3 offset = vec3(offsetVec * width * isValid, 0.0);

  if (needsRotation) {
    offset = rotationMatrix * offset;
  }
  return offset;
}

// In clipspace extrusion, if a line extends behind the camera, clip it to avoid visual artifacts
void clipLine(inout vec4 position, vec4 refPosition) {
  if (position.w < EPSILON) {
    float r = (EPSILON - refPosition.w) / (position.w - refPosition.w);
    position = refPosition + (position - refPosition) * r;
  }
}

void main() {
  geometry.pickingColor = instancePickingColors;

  vColor = vec4(instanceColors.rgb, instanceColors.a * layer.opacity);

  float isEnd = positions.x;

  vec3 prevPosition = mix(instanceLeftPositions, instanceStartPositions, isEnd);
  vec3 prevPosition64Low = mix(instanceLeftPositions64Low, instanceStartPositions64Low, isEnd);

  vec3 currPosition = mix(instanceStartPositions, instanceEndPositions, isEnd);
  vec3 currPosition64Low = mix(instanceStartPositions64Low, instanceEndPositions64Low, isEnd);

  vec3 nextPosition = mix(instanceEndPositions, instanceRightPositions, isEnd);
  vec3 nextPosition64Low = mix(instanceEndPositions64Low, instanceRightPositions64Low, isEnd);

  geometry.worldPosition = currPosition;
  vec2 widthPixels = vec2(clamp(
    project_size_to_pixel(instanceStrokeWidths * path.widthScale, path.widthUnits),
    path.widthMinPixels, path.widthMaxPixels) / 2.0);
  vec3 width;

  if (path.billboard) {
    // Extrude in clipspace
    vec4 prevPositionScreen = project_position_to_clipspace(prevPosition, prevPosition64Low, ZERO_OFFSET);
    vec4 currPositionScreen = project_position_to_clipspace(currPosition, currPosition64Low, ZERO_OFFSET, geometry.position);
    vec4 nextPositionScreen = project_position_to_clipspace(nextPosition, nextPosition64Low, ZERO_OFFSET);

    clipLine(prevPositionScreen, currPositionScreen);
    clipLine(nextPositionScreen, currPositionScreen);
    clipLine(currPositionScreen, mix(nextPositionScreen, prevPositionScreen, isEnd));

    width = vec3(widthPixels, 0.0);
    DECKGL_FILTER_SIZE(width, geometry);

    vec3 offset = getLineJoinOffset(
      prevPositionScreen.xyz / prevPositionScreen.w,
      currPositionScreen.xyz / currPositionScreen.w,
      nextPositionScreen.xyz / nextPositionScreen.w,
      project_pixel_size_to_clipspace(width.xy)
    );

    DECKGL_FILTER_GL_POSITION(currPositionScreen, geometry);
    gl_Position = vec4(currPositionScreen.xyz + offset * currPositionScreen.w, currPositionScreen.w);
  } else {
    // Extrude in commonspace
    prevPosition = project_position(prevPosition, prevPosition64Low);
    currPosition = project_position(currPosition, currPosition64Low);
    nextPosition = project_position(nextPosition, nextPosition64Low);

    width = vec3(project_pixel_size(widthPixels), 0.0);
    DECKGL_FILTER_SIZE(width, geometry);

    vec3 offset = getLineJoinOffset(prevPosition, currPosition, nextPosition, width.xy);
    geometry.position = vec4(currPosition + offset, 1.0);
    gl_Position = project_common_position_to_clipspace(geometry.position);
    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
  }
  DECKGL_FILTER_COLOR(vColor, geometry);
}
`;

  // ../layers/src/path-layer/path-layer-fragment.glsl.ts
  var path_layer_fragment_glsl_default = `#version 300 es
#define SHADER_NAME path-layer-fragment-shader

precision highp float;

in vec4 vColor;
in vec2 vCornerOffset;
in float vMiterLength;
/*
 * vPathPosition represents the relative coordinates of the current fragment on the path segment.
 * vPathPosition.x - position along the width of the path, between [-1, 1]. 0 is the center line.
 * vPathPosition.y - position along the length of the path, between [0, L / width].
 */
in vec2 vPathPosition;
in float vPathLength;
in float vJointType;

out vec4 fragColor;

void main(void) {
  geometry.uv = vPathPosition;

  if (vPathPosition.y < 0.0 || vPathPosition.y > vPathLength) {
    // if joint is rounded, test distance from the corner
    if (vJointType > 0.5 && length(vCornerOffset) > 1.0) {
      discard;
    }
    // trim miter
    if (vJointType < 0.5 && vMiterLength > path.miterLimit + 1.0) {
      discard;
    }
  }
  fragColor = vColor;

  DECKGL_FILTER_COLOR(fragColor, geometry);
}
`;

  // ../layers/src/path-layer/path-layer.ts
  var DEFAULT_COLOR7 = [0, 0, 0, 255];
  var defaultProps11 = {
    widthUnits: "meters",
    widthScale: { type: "number", min: 0, value: 1 },
    widthMinPixels: { type: "number", min: 0, value: 0 },
    widthMaxPixels: { type: "number", min: 0, value: Number.MAX_SAFE_INTEGER },
    jointRounded: false,
    capRounded: false,
    miterLimit: { type: "number", min: 0, value: 4 },
    billboard: false,
    _pathType: null,
    getPath: { type: "accessor", value: (object) => object.path },
    getColor: { type: "accessor", value: DEFAULT_COLOR7 },
    getWidth: { type: "accessor", value: 1 },
    // deprecated props
    rounded: { deprecatedFor: ["jointRounded", "capRounded"] }
  };
  var ATTRIBUTE_TRANSITION = {
    enter: (value, chunk) => {
      return chunk.length ? chunk.subarray(chunk.length - value.length) : value;
    }
  };
  var PathLayer = class extends Layer {
    getShaders() {
      return super.getShaders({ vs: path_layer_vertex_glsl_default, fs: path_layer_fragment_glsl_default, modules: [project32_default, picking_default, pathUniforms] });
    }
    get wrapLongitude() {
      return false;
    }
    getBounds() {
      return this.getAttributeManager()?.getBounds(["vertexPositions"]);
    }
    initializeState() {
      const noAlloc = true;
      const attributeManager = this.getAttributeManager();
      attributeManager.addInstanced({
        vertexPositions: {
          size: 3,
          // Start filling buffer from 1 vertex in
          vertexOffset: 1,
          type: "float64",
          fp64: this.use64bitPositions(),
          transition: ATTRIBUTE_TRANSITION,
          accessor: "getPath",
          // eslint-disable-next-line @typescript-eslint/unbound-method
          update: this.calculatePositions,
          noAlloc,
          shaderAttributes: {
            instanceLeftPositions: {
              vertexOffset: 0
            },
            instanceStartPositions: {
              vertexOffset: 1
            },
            instanceEndPositions: {
              vertexOffset: 2
            },
            instanceRightPositions: {
              vertexOffset: 3
            }
          }
        },
        instanceTypes: {
          size: 1,
          type: "uint8",
          // eslint-disable-next-line @typescript-eslint/unbound-method
          update: this.calculateSegmentTypes,
          noAlloc
        },
        instanceStrokeWidths: {
          size: 1,
          accessor: "getWidth",
          transition: ATTRIBUTE_TRANSITION,
          defaultValue: 1
        },
        instanceColors: {
          size: this.props.colorFormat.length,
          type: "unorm8",
          accessor: "getColor",
          transition: ATTRIBUTE_TRANSITION,
          defaultValue: DEFAULT_COLOR7
        },
        instancePickingColors: {
          size: 4,
          type: "uint8",
          accessor: (object, { index, target: value }) => this.encodePickingColor(object && object.__source ? object.__source.index : index, value)
        }
      });
      this.setState({
        pathTesselator: new PathTesselator({
          fp64: this.use64bitPositions()
        })
      });
    }
    updateState(params) {
      super.updateState(params);
      const { props, changeFlags } = params;
      const attributeManager = this.getAttributeManager();
      const geometryChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath);
      if (geometryChanged) {
        const { pathTesselator } = this.state;
        const buffers = props.data.attributes || {};
        pathTesselator.updateGeometry({
          data: props.data,
          geometryBuffer: buffers.getPath,
          buffers,
          normalize: !props._pathType,
          loop: props._pathType === "loop",
          getGeometry: props.getPath,
          positionFormat: props.positionFormat,
          wrapLongitude: props.wrapLongitude,
          // TODO - move the flag out of the viewport
          resolution: this.context.viewport.resolution,
          dataChanged: changeFlags.dataChanged
        });
        this.setState({
          numInstances: pathTesselator.instanceCount,
          startIndices: pathTesselator.vertexStarts
        });
        if (!changeFlags.dataChanged) {
          attributeManager.invalidateAll();
        }
      }
      if (changeFlags.extensionsChanged) {
        this.state.model?.destroy();
        this.state.model = this._getModel();
        attributeManager.invalidateAll();
      }
    }
    getPickingInfo(params) {
      const info = super.getPickingInfo(params);
      const { index } = info;
      const data = this.props.data;
      if (data[0] && data[0].__source) {
        info.object = data.find((d5) => d5.__source.index === index);
      }
      return info;
    }
    /** Override base Layer method */
    disablePickingIndex(objectIndex) {
      const data = this.props.data;
      if (data[0] && data[0].__source) {
        for (let i7 = 0; i7 < data.length; i7++) {
          if (data[i7].__source.index === objectIndex) {
            this._disablePickingIndex(i7);
          }
        }
      } else {
        super.disablePickingIndex(objectIndex);
      }
    }
    draw({ uniforms }) {
      const {
        jointRounded,
        capRounded,
        billboard,
        miterLimit,
        widthUnits,
        widthScale,
        widthMinPixels,
        widthMaxPixels
      } = this.props;
      const model = this.state.model;
      const pathProps = {
        jointType: Number(jointRounded),
        capType: Number(capRounded),
        billboard,
        widthUnits: UNIT[widthUnits],
        widthScale,
        miterLimit,
        widthMinPixels,
        widthMaxPixels
      };
      model.shaderInputs.setProps({ path: pathProps });
      model.draw(this.context.renderPass);
    }
    _getModel() {
      const SEGMENT_INDICES = [
        // start corner
        0,
        1,
        2,
        // body
        1,
        4,
        2,
        1,
        3,
        4,
        // end corner
        3,
        5,
        4
      ];
      const SEGMENT_POSITIONS = [
        // bevel start corner
        0,
        0,
        // start inner corner
        0,
        -1,
        // start outer corner
        0,
        1,
        // end inner corner
        1,
        -1,
        // end outer corner
        1,
        1,
        // bevel end corner
        1,
        0
      ];
      return new Model(this.context.device, {
        ...this.getShaders(),
        id: this.props.id,
        bufferLayout: this.getAttributeManager().getBufferLayouts(),
        geometry: new Geometry({
          topology: "triangle-list",
          attributes: {
            indices: new Uint16Array(SEGMENT_INDICES),
            positions: { value: new Float32Array(SEGMENT_POSITIONS), size: 2 }
          }
        }),
        isInstanced: true
      });
    }
    calculatePositions(attribute) {
      const { pathTesselator } = this.state;
      attribute.startIndices = pathTesselator.vertexStarts;
      attribute.value = pathTesselator.get("positions");
    }
    calculateSegmentTypes(attribute) {
      const { pathTesselator } = this.state;
      attribute.startIndices = pathTesselator.vertexStarts;
      attribute.value = pathTesselator.get("segmentTypes");
    }
  };
  PathLayer.defaultProps = defaultProps11;
  PathLayer.layerName = "PathLayer";

  // ../layers/src/solid-polygon-layer/polygon.ts
  var import_earcut2 = __toESM(require_earcut(), 1);
  var OUTER_POLYGON_WINDING = WINDING.CLOCKWISE;
  var HOLE_POLYGON_WINDING = WINDING.COUNTER_CLOCKWISE;
  var windingOptions = {
    isClosed: true
  };
  function validate(polygon) {
    polygon = polygon && polygon.positions || polygon;
    if (!Array.isArray(polygon) && !ArrayBuffer.isView(polygon)) {
      throw new Error("invalid polygon");
    }
  }
  function getPositions(polygon) {
    return "positions" in polygon ? polygon.positions : polygon;
  }
  function getHoleIndices(polygon) {
    return "holeIndices" in polygon ? polygon.holeIndices : null;
  }
  function isNested(polygon) {
    return Array.isArray(polygon[0]);
  }
  function isSimple(polygon) {
    return polygon.length >= 1 && polygon[0].length >= 2 && Number.isFinite(polygon[0][0]);
  }
  function isNestedRingClosed(simplePolygon) {
    const p0 = simplePolygon[0];
    const p1 = simplePolygon[simplePolygon.length - 1];
    return p0[0] === p1[0] && p0[1] === p1[1] && p0[2] === p1[2];
  }
  function isFlatRingClosed(positions, size, startIndex, endIndex) {
    for (let i7 = 0; i7 < size; i7++) {
      if (positions[startIndex + i7] !== positions[endIndex - size + i7]) {
        return false;
      }
    }
    return true;
  }
  function copyNestedRing(target2, targetStartIndex, simplePolygon, size, windingDirection) {
    let targetIndex = targetStartIndex;
    const len9 = simplePolygon.length;
    for (let i7 = 0; i7 < len9; i7++) {
      for (let j4 = 0; j4 < size; j4++) {
        target2[targetIndex++] = simplePolygon[i7][j4] || 0;
      }
    }
    if (!isNestedRingClosed(simplePolygon)) {
      for (let j4 = 0; j4 < size; j4++) {
        target2[targetIndex++] = simplePolygon[0][j4] || 0;
      }
    }
    windingOptions.start = targetStartIndex;
    windingOptions.end = targetIndex;
    windingOptions.size = size;
    modifyPolygonWindingDirection(target2, windingDirection, windingOptions);
    return targetIndex;
  }
  function copyFlatRing(target2, targetStartIndex, positions, size, srcStartIndex = 0, srcEndIndex, windingDirection) {
    srcEndIndex = srcEndIndex || positions.length;
    const srcLength = srcEndIndex - srcStartIndex;
    if (srcLength <= 0) {
      return targetStartIndex;
    }
    let targetIndex = targetStartIndex;
    for (let i7 = 0; i7 < srcLength; i7++) {
      target2[targetIndex++] = positions[srcStartIndex + i7];
    }
    if (!isFlatRingClosed(positions, size, srcStartIndex, srcEndIndex)) {
      for (let i7 = 0; i7 < size; i7++) {
        target2[targetIndex++] = positions[srcStartIndex + i7];
      }
    }
    windingOptions.start = targetStartIndex;
    windingOptions.end = targetIndex;
    windingOptions.size = size;
    modifyPolygonWindingDirection(target2, windingDirection, windingOptions);
    return targetIndex;
  }
  function normalize5(polygon, positionSize) {
    validate(polygon);
    const positions = [];
    const holeIndices = [];
    if ("positions" in polygon) {
      const { positions: srcPositions, holeIndices: srcHoleIndices } = polygon;
      if (srcHoleIndices) {
        let targetIndex = 0;
        for (let i7 = 0; i7 <= srcHoleIndices.length; i7++) {
          targetIndex = copyFlatRing(
            positions,
            targetIndex,
            srcPositions,
            positionSize,
            srcHoleIndices[i7 - 1],
            srcHoleIndices[i7],
            i7 === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING
          );
          holeIndices.push(targetIndex);
        }
        holeIndices.pop();
        return { positions, holeIndices };
      }
      polygon = srcPositions;
    }
    if (!isNested(polygon)) {
      copyFlatRing(positions, 0, polygon, positionSize, 0, positions.length, OUTER_POLYGON_WINDING);
      return positions;
    }
    if (!isSimple(polygon)) {
      let targetIndex = 0;
      for (const [polygonIndex, simplePolygon] of polygon.entries()) {
        targetIndex = copyNestedRing(
          positions,
          targetIndex,
          simplePolygon,
          positionSize,
          polygonIndex === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING
        );
        holeIndices.push(targetIndex);
      }
      holeIndices.pop();
      return { positions, holeIndices };
    }
    copyNestedRing(positions, 0, polygon, positionSize, OUTER_POLYGON_WINDING);
    return positions;
  }
  function getPlaneArea(positions, xIndex, yIndex) {
    const numVerts = positions.length / 3;
    let area2 = 0;
    for (let i7 = 0; i7 < numVerts; i7++) {
      const j4 = (i7 + 1) % numVerts;
      area2 += positions[i7 * 3 + xIndex] * positions[j4 * 3 + yIndex];
      area2 -= positions[j4 * 3 + xIndex] * positions[i7 * 3 + yIndex];
    }
    return Math.abs(area2 / 2);
  }
  function permutePositions(positions, xIndex, yIndex, zIndex) {
    const numVerts = positions.length / 3;
    for (let i7 = 0; i7 < numVerts; i7++) {
      const o5 = i7 * 3;
      const x4 = positions[o5 + 0];
      const y5 = positions[o5 + 1];
      const z4 = positions[o5 + 2];
      positions[o5 + xIndex] = x4;
      positions[o5 + yIndex] = y5;
      positions[o5 + zIndex] = z4;
    }
  }
  function getSurfaceIndices(polygon, positionSize, preproject, full3d) {
    let holeIndices = getHoleIndices(polygon);
    if (holeIndices) {
      holeIndices = holeIndices.map((positionIndex) => positionIndex / positionSize);
    }
    let positions = getPositions(polygon);
    const is3d = full3d && positionSize === 3;
    if (preproject) {
      const n4 = positions.length;
      positions = positions.slice();
      const p5 = [];
      for (let i7 = 0; i7 < n4; i7 += positionSize) {
        p5[0] = positions[i7];
        p5[1] = positions[i7 + 1];
        if (is3d) {
          p5[2] = positions[i7 + 2];
        }
        const xy = preproject(p5);
        positions[i7] = xy[0];
        positions[i7 + 1] = xy[1];
        if (is3d) {
          positions[i7 + 2] = xy[2];
        }
      }
    }
    if (is3d) {
      const xyArea = getPlaneArea(positions, 0, 1);
      const xzArea = getPlaneArea(positions, 0, 2);
      const yzArea = getPlaneArea(positions, 1, 2);
      if (!xyArea && !xzArea && !yzArea) {
        return [];
      }
      if (xyArea > xzArea && xyArea > yzArea) {
      } else if (xzArea > yzArea) {
        if (!preproject) {
          positions = positions.slice();
        }
        permutePositions(positions, 0, 2, 1);
      } else {
        if (!preproject) {
          positions = positions.slice();
        }
        permutePositions(positions, 2, 0, 1);
      }
    }
    return (0, import_earcut2.default)(positions, holeIndices, positionSize);
  }

  // ../layers/src/solid-polygon-layer/polygon-tesselator.ts
  var PolygonTesselator = class extends Tesselator {
    constructor(opts) {
      const { fp64: fp642, IndexType = Uint32Array } = opts;
      super({
        ...opts,
        attributes: {
          positions: { size: 3, type: fp642 ? Float64Array : Float32Array },
          vertexValid: { type: Uint16Array, size: 1 },
          indices: { type: IndexType, size: 1 }
        }
      });
    }
    /** Get attribute by name */
    get(attributeName) {
      const { attributes } = this;
      if (attributeName === "indices") {
        return attributes.indices && attributes.indices.subarray(0, this.vertexCount);
      }
      return attributes[attributeName];
    }
    /** Override base Tesselator method */
    updateGeometry(opts) {
      super.updateGeometry(opts);
      const externalIndices = this.buffers.indices;
      if (externalIndices) {
        this.vertexCount = (externalIndices.value || externalIndices).length;
      } else if (this.data && !this.getGeometry) {
        throw new Error("missing indices buffer");
      }
    }
    /** Implement base Tesselator interface */
    normalizeGeometry(polygon) {
      if (this.normalize) {
        const normalizedPolygon = normalize5(polygon, this.positionSize);
        if (this.opts.resolution) {
          return cutPolygonByGrid(
            getPositions(normalizedPolygon),
            getHoleIndices(normalizedPolygon),
            {
              size: this.positionSize,
              gridResolution: this.opts.resolution,
              edgeTypes: true
            }
          );
        }
        if (this.opts.wrapLongitude) {
          return cutPolygonByMercatorBounds(
            getPositions(normalizedPolygon),
            getHoleIndices(normalizedPolygon),
            {
              size: this.positionSize,
              maxLatitude: 86,
              edgeTypes: true
            }
          );
        }
        return normalizedPolygon;
      }
      return polygon;
    }
    /** Implement base Tesselator interface */
    getGeometrySize(polygon) {
      if (isCut2(polygon)) {
        let size = 0;
        for (const subPolygon of polygon) {
          size += this.getGeometrySize(subPolygon);
        }
        return size;
      }
      return getPositions(polygon).length / this.positionSize;
    }
    /** Override base Tesselator method */
    getGeometryFromBuffer(buffer) {
      if (this.normalize || !this.buffers.indices) {
        return super.getGeometryFromBuffer(buffer);
      }
      return null;
    }
    /** Implement base Tesselator interface */
    updateGeometryAttributes(polygon, context) {
      if (polygon && isCut2(polygon)) {
        for (const subPolygon of polygon) {
          const geometrySize = this.getGeometrySize(subPolygon);
          context.geometrySize = geometrySize;
          this.updateGeometryAttributes(subPolygon, context);
          context.vertexStart += geometrySize;
          context.indexStart = this.indexStarts[context.geometryIndex + 1];
        }
      } else {
        const normalizedPolygon = polygon;
        this._updateIndices(normalizedPolygon, context);
        this._updatePositions(normalizedPolygon, context);
        this._updateVertexValid(normalizedPolygon, context);
      }
    }
    // Flatten the indices array
    _updateIndices(polygon, { geometryIndex, vertexStart: offset, indexStart }) {
      const { attributes, indexStarts, typedArrayManager } = this;
      let target2 = attributes.indices;
      if (!target2 || !polygon) {
        return;
      }
      let i7 = indexStart;
      const indices = getSurfaceIndices(
        polygon,
        this.positionSize,
        this.opts.preproject,
        this.opts.full3d
      );
      target2 = typedArrayManager.allocate(target2, indexStart + indices.length, {
        copy: true
      });
      for (let j4 = 0; j4 < indices.length; j4++) {
        target2[i7++] = indices[j4] + offset;
      }
      indexStarts[geometryIndex + 1] = indexStart + indices.length;
      attributes.indices = target2;
    }
    // Flatten out all the vertices of all the sub subPolygons
    _updatePositions(polygon, { vertexStart, geometrySize }) {
      const {
        attributes: { positions },
        positionSize
      } = this;
      if (!positions || !polygon) {
        return;
      }
      const polygonPositions = getPositions(polygon);
      for (let i7 = vertexStart, j4 = 0; j4 < geometrySize; i7++, j4++) {
        const x4 = polygonPositions[j4 * positionSize];
        const y5 = polygonPositions[j4 * positionSize + 1];
        const z4 = positionSize > 2 ? polygonPositions[j4 * positionSize + 2] : 0;
        positions[i7 * 3] = x4;
        positions[i7 * 3 + 1] = y5;
        positions[i7 * 3 + 2] = z4;
      }
    }
    _updateVertexValid(polygon, { vertexStart, geometrySize }) {
      const { positionSize } = this;
      const vertexValid = this.attributes.vertexValid;
      const holeIndices = polygon && getHoleIndices(polygon);
      if (polygon && polygon.edgeTypes) {
        vertexValid.set(polygon.edgeTypes, vertexStart);
      } else {
        vertexValid.fill(1, vertexStart, vertexStart + geometrySize);
      }
      if (holeIndices) {
        for (let j4 = 0; j4 < holeIndices.length; j4++) {
          vertexValid[vertexStart + holeIndices[j4] / positionSize - 1] = 0;
        }
      }
      vertexValid[vertexStart + geometrySize - 1] = 0;
    }
  };
  function isCut2(polygon) {
    return Array.isArray(polygon) && polygon.length > 0 && !Number.isFinite(polygon[0]);
  }

  // ../layers/src/solid-polygon-layer/solid-polygon-layer-uniforms.ts
  var uniformBlock12 = `uniform solidPolygonUniforms {
  bool extruded;
  bool isWireframe;
  float elevationScale;
} solidPolygon;
`;
  var solidPolygonUniforms = {
    name: "solidPolygon",
    vs: uniformBlock12,
    fs: uniformBlock12,
    uniformTypes: {
      extruded: "f32",
      isWireframe: "f32",
      elevationScale: "f32"
    }
  };

  // ../layers/src/solid-polygon-layer/solid-polygon-layer-vertex-main.glsl.ts
  var solid_polygon_layer_vertex_main_glsl_default = `
in vec4 fillColors;
in vec4 lineColors;
in vec3 pickingColors;

out vec4 vColor;

struct PolygonProps {
  vec3 positions;
  vec3 positions64Low;
  vec3 normal;
  float elevations;
};

vec3 project_offset_normal(vec3 vector) {
  if (project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT ||
    project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSETS) {
    // normals generated by the polygon tesselator are in lnglat offsets instead of meters
    return normalize(vector * project.commonUnitsPerWorldUnit);
  }
  return project_normal(vector);
}

void calculatePosition(PolygonProps props) {
  vec3 pos = props.positions;
  vec3 pos64Low = props.positions64Low;
  vec3 normal = props.normal;
  vec4 colors = solidPolygon.isWireframe ? lineColors : fillColors;

  geometry.worldPosition = props.positions;
  geometry.pickingColor = pickingColors;

  if (solidPolygon.extruded) {
    pos.z += props.elevations * solidPolygon.elevationScale;
  }
  gl_Position = project_position_to_clipspace(pos, pos64Low, vec3(0.), geometry.position);

  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);

  if (solidPolygon.extruded) {
  #ifdef IS_SIDE_VERTEX
    normal = project_offset_normal(normal);
  #else
    normal = project_normal(normal);
  #endif
    geometry.normal = normal;
    vec3 lightColor = lighting_getLightColor(colors.rgb, project.cameraPosition, geometry.position.xyz, geometry.normal);
    vColor = vec4(lightColor, colors.a * layer.opacity);
  } else {
    vColor = vec4(colors.rgb, colors.a * layer.opacity);
  }
  DECKGL_FILTER_COLOR(vColor, geometry);
}
`;

  // ../layers/src/solid-polygon-layer/solid-polygon-layer-vertex-top.glsl.ts
  var solid_polygon_layer_vertex_top_glsl_default = `#version 300 es
#define SHADER_NAME solid-polygon-layer-vertex-shader

in vec3 vertexPositions;
in vec3 vertexPositions64Low;
in float elevations;

${solid_polygon_layer_vertex_main_glsl_default}

void main(void) {
  PolygonProps props;

  props.positions = vertexPositions;
  props.positions64Low = vertexPositions64Low;
  props.elevations = elevations;
  props.normal = vec3(0.0, 0.0, 1.0);

  calculatePosition(props);
}
`;

  // ../layers/src/solid-polygon-layer/solid-polygon-layer-vertex-side.glsl.ts
  var solid_polygon_layer_vertex_side_glsl_default = `#version 300 es
#define SHADER_NAME solid-polygon-layer-vertex-shader-side
#define IS_SIDE_VERTEX

in vec2 positions;

in vec3 vertexPositions;
in vec3 nextVertexPositions;
in vec3 vertexPositions64Low;
in vec3 nextVertexPositions64Low;
in float elevations;
in float instanceVertexValid;

${solid_polygon_layer_vertex_main_glsl_default}

void main(void) {
  if(instanceVertexValid < 0.5){
    gl_Position = vec4(0.);
    return;
  }

  PolygonProps props;

  vec3 pos;
  vec3 pos64Low;
  vec3 nextPos;
  vec3 nextPos64Low;

  #if RING_WINDING_ORDER_CW == 1
    pos = vertexPositions;
    pos64Low = vertexPositions64Low;
    nextPos = nextVertexPositions;
    nextPos64Low = nextVertexPositions64Low;
  #else
    pos = nextVertexPositions;
    pos64Low = nextVertexPositions64Low;
    nextPos = vertexPositions;
    nextPos64Low = vertexPositions64Low;
  #endif

  props.positions = mix(pos, nextPos, positions.x);
  props.positions64Low = mix(pos64Low, nextPos64Low, positions.x);

  props.normal = vec3(
    pos.y - nextPos.y + (pos64Low.y - nextPos64Low.y),
    nextPos.x - pos.x + (nextPos64Low.x - pos64Low.x),
    0.0);

  props.elevations = elevations * positions.y;

  calculatePosition(props);
}
`;

  // ../layers/src/solid-polygon-layer/solid-polygon-layer-fragment.glsl.ts
  var solid_polygon_layer_fragment_glsl_default = `#version 300 es
#define SHADER_NAME solid-polygon-layer-fragment-shader

precision highp float;

in vec4 vColor;

out vec4 fragColor;

void main(void) {
  fragColor = vColor;
  // Fails to compile on some Android devices if geometry is never assigned (#8411)
  geometry.uv = vec2(0.);

  DECKGL_FILTER_COLOR(fragColor, geometry);
}
`;

  // ../layers/src/solid-polygon-layer/solid-polygon-layer.ts
  var DEFAULT_COLOR8 = [0, 0, 0, 255];
  var defaultProps12 = {
    filled: true,
    extruded: false,
    wireframe: false,
    _normalize: true,
    _windingOrder: "CW",
    _full3d: false,
    elevationScale: { type: "number", min: 0, value: 1 },
    getPolygon: { type: "accessor", value: (f6) => f6.polygon },
    getElevation: { type: "accessor", value: 1e3 },
    getFillColor: { type: "accessor", value: DEFAULT_COLOR8 },
    getLineColor: { type: "accessor", value: DEFAULT_COLOR8 },
    material: true
  };
  var ATTRIBUTE_TRANSITION2 = {
    enter: (value, chunk) => {
      return chunk.length ? chunk.subarray(chunk.length - value.length) : value;
    }
  };
  var SolidPolygonLayer = class extends Layer {
    getShaders(type) {
      return super.getShaders({
        vs: type === "top" ? solid_polygon_layer_vertex_top_glsl_default : solid_polygon_layer_vertex_side_glsl_default,
        fs: solid_polygon_layer_fragment_glsl_default,
        defines: {
          RING_WINDING_ORDER_CW: !this.props._normalize && this.props._windingOrder === "CCW" ? 0 : 1
        },
        modules: [project32_default, gouraudMaterial, picking_default, solidPolygonUniforms]
      });
    }
    get wrapLongitude() {
      return false;
    }
    getBounds() {
      return this.getAttributeManager()?.getBounds(["vertexPositions"]);
    }
    initializeState() {
      const { viewport } = this.context;
      let { coordinateSystem } = this.props;
      const { _full3d } = this.props;
      if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {
        coordinateSystem = COORDINATE_SYSTEM.LNGLAT;
      }
      let preproject;
      if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {
        if (_full3d) {
          preproject = viewport.projectPosition.bind(viewport);
        } else {
          preproject = viewport.projectFlat.bind(viewport);
        }
      }
      this.setState({
        numInstances: 0,
        polygonTesselator: new PolygonTesselator({
          // Lnglat coordinates are usually projected non-linearly, which affects tesselation results
          // Provide a preproject function if the coordinates are in lnglat
          preproject,
          fp64: this.use64bitPositions(),
          IndexType: Uint32Array
        })
      });
      const attributeManager = this.getAttributeManager();
      const noAlloc = true;
      attributeManager.remove(["instancePickingColors"]);
      attributeManager.add({
        indices: {
          size: 1,
          isIndexed: true,
          // eslint-disable-next-line @typescript-eslint/unbound-method
          update: this.calculateIndices,
          noAlloc
        },
        vertexPositions: {
          size: 3,
          type: "float64",
          stepMode: "dynamic",
          fp64: this.use64bitPositions(),
          transition: ATTRIBUTE_TRANSITION2,
          accessor: "getPolygon",
          // eslint-disable-next-line @typescript-eslint/unbound-method
          update: this.calculatePositions,
          noAlloc,
          shaderAttributes: {
            nextVertexPositions: {
              vertexOffset: 1
            }
          }
        },
        instanceVertexValid: {
          size: 1,
          type: "uint16",
          stepMode: "instance",
          // eslint-disable-next-line @typescript-eslint/unbound-method
          update: this.calculateVertexValid,
          noAlloc
        },
        elevations: {
          size: 1,
          stepMode: "dynamic",
          transition: ATTRIBUTE_TRANSITION2,
          accessor: "getElevation"
        },
        fillColors: {
          size: this.props.colorFormat.length,
          type: "unorm8",
          stepMode: "dynamic",
          transition: ATTRIBUTE_TRANSITION2,
          accessor: "getFillColor",
          defaultValue: DEFAULT_COLOR8
        },
        lineColors: {
          size: this.props.colorFormat.length,
          type: "unorm8",
          stepMode: "dynamic",
          transition: ATTRIBUTE_TRANSITION2,
          accessor: "getLineColor",
          defaultValue: DEFAULT_COLOR8
        },
        pickingColors: {
          size: 4,
          type: "uint8",
          stepMode: "dynamic",
          accessor: (object, { index, target: value }) => this.encodePickingColor(object && object.__source ? object.__source.index : index, value)
        }
      });
    }
    getPickingInfo(params) {
      const info = super.getPickingInfo(params);
      const { index } = info;
      const data = this.props.data;
      if (data[0] && data[0].__source) {
        info.object = data.find((d5) => d5.__source.index === index);
      }
      return info;
    }
    disablePickingIndex(objectIndex) {
      const data = this.props.data;
      if (data[0] && data[0].__source) {
        for (let i7 = 0; i7 < data.length; i7++) {
          if (data[i7].__source.index === objectIndex) {
            this._disablePickingIndex(i7);
          }
        }
      } else {
        super.disablePickingIndex(objectIndex);
      }
    }
    draw({ uniforms }) {
      const { extruded, filled, wireframe, elevationScale } = this.props;
      const { topModel, sideModel, wireframeModel, polygonTesselator } = this.state;
      const renderUniforms = {
        extruded: Boolean(extruded),
        elevationScale,
        isWireframe: false
      };
      if (wireframeModel && wireframe) {
        wireframeModel.setInstanceCount(polygonTesselator.instanceCount - 1);
        wireframeModel.shaderInputs.setProps({ solidPolygon: { ...renderUniforms, isWireframe: true } });
        wireframeModel.draw(this.context.renderPass);
      }
      if (sideModel && filled) {
        sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);
        sideModel.shaderInputs.setProps({ solidPolygon: renderUniforms });
        sideModel.draw(this.context.renderPass);
      }
      if (topModel && filled) {
        topModel.setVertexCount(polygonTesselator.vertexCount);
        topModel.shaderInputs.setProps({ solidPolygon: renderUniforms });
        topModel.draw(this.context.renderPass);
      }
    }
    updateState(updateParams) {
      super.updateState(updateParams);
      this.updateGeometry(updateParams);
      const { props, oldProps, changeFlags } = updateParams;
      const attributeManager = this.getAttributeManager();
      const regenerateModels = changeFlags.extensionsChanged || props.filled !== oldProps.filled || props.extruded !== oldProps.extruded;
      if (regenerateModels) {
        this.state.models?.forEach((model) => model.destroy());
        this.setState(this._getModels());
        attributeManager.invalidateAll();
      }
    }
    updateGeometry({ props, oldProps, changeFlags }) {
      const geometryConfigChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon);
      if (geometryConfigChanged) {
        const { polygonTesselator } = this.state;
        const buffers = props.data.attributes || {};
        polygonTesselator.updateGeometry({
          data: props.data,
          normalize: props._normalize,
          geometryBuffer: buffers.getPolygon,
          buffers,
          getGeometry: props.getPolygon,
          positionFormat: props.positionFormat,
          wrapLongitude: props.wrapLongitude,
          // TODO - move the flag out of the viewport
          resolution: this.context.viewport.resolution,
          fp64: this.use64bitPositions(),
          dataChanged: changeFlags.dataChanged,
          full3d: props._full3d
        });
        this.setState({
          numInstances: polygonTesselator.instanceCount,
          startIndices: polygonTesselator.vertexStarts
        });
        if (!changeFlags.dataChanged) {
          this.getAttributeManager().invalidateAll();
        }
      }
    }
    _getModels() {
      const { id, filled, extruded } = this.props;
      let topModel;
      let sideModel;
      let wireframeModel;
      if (filled) {
        const shaders = this.getShaders("top");
        shaders.defines.NON_INSTANCED_MODEL = 1;
        const bufferLayout = this.getAttributeManager().getBufferLayouts({ isInstanced: false });
        topModel = new Model(this.context.device, {
          ...shaders,
          id: `${id}-top`,
          topology: "triangle-list",
          bufferLayout,
          isIndexed: true,
          userData: {
            excludeAttributes: { instanceVertexValid: true }
          }
        });
      }
      if (extruded) {
        const bufferLayout = this.getAttributeManager().getBufferLayouts({ isInstanced: true });
        sideModel = new Model(this.context.device, {
          ...this.getShaders("side"),
          id: `${id}-side`,
          bufferLayout,
          geometry: new Geometry({
            topology: "triangle-strip",
            attributes: {
              // top right - top left - bottom right - bottom left
              positions: {
                size: 2,
                value: new Float32Array([1, 0, 0, 0, 1, 1, 0, 1])
              }
            }
          }),
          isInstanced: true,
          userData: {
            excludeAttributes: { indices: true }
          }
        });
        wireframeModel = new Model(this.context.device, {
          ...this.getShaders("side"),
          id: `${id}-wireframe`,
          bufferLayout,
          geometry: new Geometry({
            topology: "line-strip",
            attributes: {
              // top right - top left - bottom left - bottom right
              positions: {
                size: 2,
                value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])
              }
            }
          }),
          isInstanced: true,
          userData: {
            excludeAttributes: { indices: true }
          }
        });
      }
      return {
        models: [sideModel, wireframeModel, topModel].filter(Boolean),
        topModel,
        sideModel,
        wireframeModel
      };
    }
    calculateIndices(attribute) {
      const { polygonTesselator } = this.state;
      attribute.startIndices = polygonTesselator.indexStarts;
      attribute.value = polygonTesselator.get("indices");
    }
    calculatePositions(attribute) {
      const { polygonTesselator } = this.state;
      attribute.startIndices = polygonTesselator.vertexStarts;
      attribute.value = polygonTesselator.get("positions");
    }
    calculateVertexValid(attribute) {
      attribute.value = this.state.polygonTesselator.get("vertexValid");
    }
  };
  SolidPolygonLayer.defaultProps = defaultProps12;
  SolidPolygonLayer.layerName = "SolidPolygonLayer";

  // ../layers/src/utils.ts
  function replaceInRange({
    data,
    getIndex,
    dataRange,
    replace
  }) {
    const { startRow = 0, endRow = Infinity } = dataRange;
    const count3 = data.length;
    let replaceStart = count3;
    let replaceEnd = count3;
    for (let i7 = 0; i7 < count3; i7++) {
      const row = getIndex(data[i7]);
      if (replaceStart > i7 && row >= startRow) {
        replaceStart = i7;
      }
      if (row >= endRow) {
        replaceEnd = i7;
        break;
      }
    }
    let index = replaceStart;
    const dataLengthChanged = replaceEnd - replaceStart !== replace.length;
    const endChunk = dataLengthChanged ? data.slice(replaceEnd) : void 0;
    for (let i7 = 0; i7 < replace.length; i7++) {
      data[index++] = replace[i7];
    }
    if (endChunk) {
      for (let i7 = 0; i7 < endChunk.length; i7++) {
        data[index++] = endChunk[i7];
      }
      data.length = index;
    }
    return {
      startRow: replaceStart,
      endRow: replaceStart + replace.length
    };
  }

  // ../layers/src/polygon-layer/polygon-layer.ts
  var defaultLineColor = [0, 0, 0, 255];
  var defaultFillColor = [0, 0, 0, 255];
  var defaultProps13 = {
    stroked: true,
    filled: true,
    extruded: false,
    elevationScale: 1,
    wireframe: false,
    _normalize: true,
    _windingOrder: "CW",
    lineWidthUnits: "meters",
    lineWidthScale: 1,
    lineWidthMinPixels: 0,
    lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,
    lineJointRounded: false,
    lineMiterLimit: 4,
    getPolygon: { type: "accessor", value: (f6) => f6.polygon },
    // Polygon fill color
    getFillColor: { type: "accessor", value: defaultFillColor },
    // Point, line and polygon outline color
    getLineColor: { type: "accessor", value: defaultLineColor },
    // Line and polygon outline accessors
    getLineWidth: { type: "accessor", value: 1 },
    // Polygon extrusion accessor
    getElevation: { type: "accessor", value: 1e3 },
    // Optional material for 'lighting' shader module
    material: true
  };
  var PolygonLayer = class extends CompositeLayer {
    initializeState() {
      this.state = {
        paths: [],
        pathsDiff: null
      };
      if (this.props.getLineDashArray) {
        log_default.removed("getLineDashArray", "PathStyleExtension")();
      }
    }
    updateState({ changeFlags }) {
      const geometryChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon);
      if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {
        const paths = this.state.paths.slice();
        const pathsDiff = changeFlags.dataChanged.map(
          (dataRange) => replaceInRange({
            data: paths,
            getIndex: (p5) => p5.__source.index,
            dataRange,
            replace: this._getPaths(dataRange)
          })
        );
        this.setState({ paths, pathsDiff });
      } else if (geometryChanged) {
        this.setState({
          paths: this._getPaths(),
          pathsDiff: null
        });
      }
    }
    _getPaths(dataRange = {}) {
      const { data, getPolygon, positionFormat, _normalize } = this.props;
      const paths = [];
      const positionSize = positionFormat === "XY" ? 2 : 3;
      const { startRow, endRow } = dataRange;
      const { iterable, objectInfo } = createIterable(data, startRow, endRow);
      for (const object of iterable) {
        objectInfo.index++;
        let polygon = getPolygon(object, objectInfo);
        if (_normalize) {
          polygon = normalize5(polygon, positionSize);
        }
        const { holeIndices } = polygon;
        const positions = polygon.positions || polygon;
        if (holeIndices) {
          for (let i7 = 0; i7 <= holeIndices.length; i7++) {
            const path = positions.slice(holeIndices[i7 - 1] || 0, holeIndices[i7] || positions.length);
            paths.push(this.getSubLayerRow({ path }, object, objectInfo.index));
          }
        } else {
          paths.push(this.getSubLayerRow({ path: positions }, object, objectInfo.index));
        }
      }
      return paths;
    }
    /* eslint-disable complexity */
    renderLayers() {
      const {
        data,
        _dataDiff,
        stroked,
        filled,
        extruded,
        wireframe,
        _normalize,
        _windingOrder,
        elevationScale,
        transitions,
        positionFormat
      } = this.props;
      const {
        lineWidthUnits,
        lineWidthScale,
        lineWidthMinPixels,
        lineWidthMaxPixels,
        lineJointRounded,
        lineMiterLimit,
        lineDashJustified
      } = this.props;
      const {
        getFillColor,
        getLineColor,
        getLineWidth,
        getLineDashArray,
        getElevation,
        getPolygon,
        updateTriggers,
        material
      } = this.props;
      const { paths, pathsDiff } = this.state;
      const FillLayer = this.getSubLayerClass("fill", SolidPolygonLayer);
      const StrokeLayer = this.getSubLayerClass("stroke", PathLayer);
      const polygonLayer = this.shouldRenderSubLayer("fill", paths) && new FillLayer(
        {
          _dataDiff,
          extruded,
          elevationScale,
          filled,
          wireframe,
          _normalize,
          _windingOrder,
          getElevation,
          getFillColor,
          getLineColor: extruded && wireframe ? getLineColor : defaultLineColor,
          material,
          transitions
        },
        this.getSubLayerProps({
          id: "fill",
          updateTriggers: updateTriggers && {
            getPolygon: updateTriggers.getPolygon,
            getElevation: updateTriggers.getElevation,
            getFillColor: updateTriggers.getFillColor,
            // using a legacy API to invalid lineColor attributes
            // if (extruded && wireframe) has changed
            lineColors: extruded && wireframe,
            getLineColor: updateTriggers.getLineColor
          }
        }),
        {
          data,
          positionFormat,
          getPolygon
        }
      );
      const polygonLineLayer = !extruded && stroked && this.shouldRenderSubLayer("stroke", paths) && new StrokeLayer(
        {
          _dataDiff: pathsDiff && (() => pathsDiff),
          widthUnits: lineWidthUnits,
          widthScale: lineWidthScale,
          widthMinPixels: lineWidthMinPixels,
          widthMaxPixels: lineWidthMaxPixels,
          jointRounded: lineJointRounded,
          miterLimit: lineMiterLimit,
          dashJustified: lineDashJustified,
          // Already normalized
          _pathType: "loop",
          transitions: transitions && {
            getWidth: transitions.getLineWidth,
            getColor: transitions.getLineColor,
            getPath: transitions.getPolygon
          },
          getColor: this.getSubLayerAccessor(getLineColor),
          getWidth: this.getSubLayerAccessor(getLineWidth),
          getDashArray: this.getSubLayerAccessor(getLineDashArray)
        },
        this.getSubLayerProps({
          id: "stroke",
          updateTriggers: updateTriggers && {
            getWidth: updateTriggers.getLineWidth,
            getColor: updateTriggers.getLineColor,
            getDashArray: updateTriggers.getLineDashArray
          }
        }),
        {
          data: paths,
          positionFormat,
          getPath: (x4) => x4.path
        }
      );
      return [
        // If not extruded: flat fill layer is drawn below outlines
        !extruded && polygonLayer,
        polygonLineLayer,
        // If extruded: draw fill layer last for correct blending behavior
        extruded && polygonLayer
      ];
    }
    /* eslint-enable complexity */
  };
  PolygonLayer.layerName = "PolygonLayer";
  PolygonLayer.defaultProps = defaultProps13;

  // ../layers/src/geojson-layer/geojson-binary.ts
  function binaryToFeatureForAccesor(data, index) {
    if (!data) {
      return null;
    }
    const featureIndex = "startIndices" in data ? data.startIndices[index] : index;
    const geometryIndex = data.featureIds.value[featureIndex];
    if (featureIndex !== -1) {
      return getPropertiesForIndex(data, geometryIndex, featureIndex);
    }
    return null;
  }
  function getPropertiesForIndex(data, propertiesIndex, numericPropsIndex) {
    const feature = {
      properties: { ...data.properties[propertiesIndex] }
    };
    for (const prop in data.numericProps) {
      feature.properties[prop] = data.numericProps[prop].value[numericPropsIndex];
    }
    return feature;
  }
  function calculatePickingColors(geojsonBinary, encodePickingColor) {
    const pickingColors = {
      points: null,
      lines: null,
      polygons: null
    };
    for (const key in pickingColors) {
      const featureIds = geojsonBinary[key].globalFeatureIds.value;
      pickingColors[key] = new Uint8ClampedArray(featureIds.length * 4);
      const pickingColor = [];
      for (let i7 = 0; i7 < featureIds.length; i7++) {
        encodePickingColor(featureIds[i7], pickingColor);
        pickingColors[key][i7 * 4 + 0] = pickingColor[0];
        pickingColors[key][i7 * 4 + 1] = pickingColor[1];
        pickingColors[key][i7 * 4 + 2] = pickingColor[2];
        pickingColors[key][i7 * 4 + 3] = 255;
      }
    }
    return pickingColors;
  }

  // ../layers/src/text-layer/multi-icon-layer/sdf-uniforms.ts
  var uniformBlock13 = `uniform sdfUniforms {
  float gamma;
  bool enabled;
  float buffer;
  float outlineBuffer;
  vec4 outlineColor;
} sdf;
`;
  var sdfUniforms = {
    name: "sdf",
    vs: uniformBlock13,
    fs: uniformBlock13,
    uniformTypes: {
      gamma: "f32",
      enabled: "f32",
      buffer: "f32",
      outlineBuffer: "f32",
      outlineColor: "vec4<f32>"
    }
  };

  // ../layers/src/text-layer/multi-icon-layer/multi-icon-layer-fragment.glsl.ts
  var multi_icon_layer_fragment_glsl_default = `#version 300 es
#define SHADER_NAME multi-icon-layer-fragment-shader

precision highp float;

uniform sampler2D iconsTexture;

in vec4 vColor;
in vec2 vTextureCoords;
in vec2 uv;

out vec4 fragColor;

void main(void) {
  geometry.uv = uv;

  if (!bool(picking.isActive)) {
    float alpha = texture(iconsTexture, vTextureCoords).a;
    vec4 color = vColor;

    // if enable sdf (signed distance fields)
    if (sdf.enabled) {
      float distance = alpha;
      alpha = smoothstep(sdf.buffer - sdf.gamma, sdf.buffer + sdf.gamma, distance);

      if (sdf.outlineBuffer > 0.0) {
        float inFill = alpha;
        float inBorder = smoothstep(sdf.outlineBuffer - sdf.gamma, sdf.outlineBuffer + sdf.gamma, distance);
        color = mix(sdf.outlineColor, vColor, inFill);
        alpha = inBorder;
      }
    }

    // Take the global opacity and the alpha from color into account for the alpha component
    float a = alpha * color.a;
    
    if (a < icon.alphaCutoff) {
      discard;
    }

    fragColor = vec4(color.rgb, a * layer.opacity);
  }

  DECKGL_FILTER_COLOR(fragColor, geometry);
}
`;

  // ../layers/src/text-layer/multi-icon-layer/multi-icon-layer.ts
  var DEFAULT_BUFFER2 = 192 / 256;
  var EMPTY_ARRAY3 = [];
  var defaultProps14 = {
    getIconOffsets: { type: "accessor", value: (x4) => x4.offsets },
    alphaCutoff: 1e-3,
    smoothing: 0.1,
    outlineWidth: 0,
    outlineColor: { type: "color", value: [0, 0, 0, 255] }
  };
  var MultiIconLayer = class extends IconLayer {
    getShaders() {
      const shaders = super.getShaders();
      return { ...shaders, modules: [...shaders.modules, sdfUniforms], fs: multi_icon_layer_fragment_glsl_default };
    }
    initializeState() {
      super.initializeState();
      const attributeManager = this.getAttributeManager();
      attributeManager.addInstanced({
        instanceOffsets: {
          size: 2,
          accessor: "getIconOffsets"
        },
        instancePickingColors: {
          type: "uint8",
          size: 3,
          accessor: (object, { index, target: value }) => this.encodePickingColor(index, value)
        }
      });
    }
    updateState(params) {
      super.updateState(params);
      const { props, oldProps } = params;
      let { outlineColor } = props;
      if (outlineColor !== oldProps.outlineColor) {
        outlineColor = outlineColor.map((x4) => x4 / 255);
        outlineColor[3] = Number.isFinite(outlineColor[3]) ? outlineColor[3] : 1;
        this.setState({
          outlineColor
        });
      }
      if (!props.sdf && props.outlineWidth) {
        log_default.warn(`${this.id}: fontSettings.sdf is required to render outline`)();
      }
    }
    draw(params) {
      const { sdf, smoothing, outlineWidth } = this.props;
      const { outlineColor } = this.state;
      const outlineBuffer = outlineWidth ? Math.max(smoothing, DEFAULT_BUFFER2 * (1 - outlineWidth)) : -1;
      const model = this.state.model;
      const sdfProps = {
        buffer: DEFAULT_BUFFER2,
        outlineBuffer,
        gamma: smoothing,
        enabled: Boolean(sdf),
        outlineColor
      };
      model.shaderInputs.setProps({ sdf: sdfProps });
      super.draw(params);
      if (sdf && outlineWidth) {
        const { iconManager } = this.state;
        const iconsTexture = iconManager.getTexture();
        if (iconsTexture) {
          model.shaderInputs.setProps({ sdf: { ...sdfProps, outlineBuffer: DEFAULT_BUFFER2 } });
          model.draw(this.context.renderPass);
        }
      }
    }
    getInstanceOffset(icons) {
      return icons ? Array.from(icons).flatMap((icon) => super.getInstanceOffset(icon)) : EMPTY_ARRAY3;
    }
    getInstanceColorMode(icons) {
      return 1;
    }
    getInstanceIconFrame(icons) {
      return icons ? Array.from(icons).flatMap((icon) => super.getInstanceIconFrame(icon)) : EMPTY_ARRAY3;
    }
  };
  MultiIconLayer.defaultProps = defaultProps14;
  MultiIconLayer.layerName = "MultiIconLayer";

  // ../../node_modules/@mapbox/tiny-sdf/index.js
  var INF = 1e20;
  var TinySDF = class {
    constructor({
      fontSize = 24,
      buffer = 3,
      radius = 8,
      cutoff = 0.25,
      fontFamily = "sans-serif",
      fontWeight = "normal",
      fontStyle = "normal"
    } = {}) {
      this.buffer = buffer;
      this.cutoff = cutoff;
      this.radius = radius;
      const size = this.size = fontSize + buffer * 4;
      const canvas2 = this._createCanvas(size);
      const ctx2 = this.ctx = canvas2.getContext("2d", { willReadFrequently: true });
      ctx2.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;
      ctx2.textBaseline = "alphabetic";
      ctx2.textAlign = "left";
      ctx2.fillStyle = "black";
      this.gridOuter = new Float64Array(size * size);
      this.gridInner = new Float64Array(size * size);
      this.f = new Float64Array(size);
      this.z = new Float64Array(size + 1);
      this.v = new Uint16Array(size);
    }
    _createCanvas(size) {
      const canvas2 = document.createElement("canvas");
      canvas2.width = canvas2.height = size;
      return canvas2;
    }
    draw(char) {
      const {
        width: glyphAdvance,
        actualBoundingBoxAscent,
        actualBoundingBoxDescent,
        actualBoundingBoxLeft,
        actualBoundingBoxRight
      } = this.ctx.measureText(char);
      const glyphTop = Math.ceil(actualBoundingBoxAscent);
      const glyphLeft = 0;
      const glyphWidth = Math.max(0, Math.min(this.size - this.buffer, Math.ceil(actualBoundingBoxRight - actualBoundingBoxLeft)));
      const glyphHeight = Math.min(this.size - this.buffer, glyphTop + Math.ceil(actualBoundingBoxDescent));
      const width = glyphWidth + 2 * this.buffer;
      const height = glyphHeight + 2 * this.buffer;
      const len9 = Math.max(width * height, 0);
      const data = new Uint8ClampedArray(len9);
      const glyph = { data, width, height, glyphWidth, glyphHeight, glyphTop, glyphLeft, glyphAdvance };
      if (glyphWidth === 0 || glyphHeight === 0)
        return glyph;
      const { ctx: ctx2, buffer, gridInner, gridOuter } = this;
      ctx2.clearRect(buffer, buffer, glyphWidth, glyphHeight);
      ctx2.fillText(char, buffer, buffer + glyphTop);
      const imgData = ctx2.getImageData(buffer, buffer, glyphWidth, glyphHeight);
      gridOuter.fill(INF, 0, len9);
      gridInner.fill(0, 0, len9);
      for (let y5 = 0; y5 < glyphHeight; y5++) {
        for (let x4 = 0; x4 < glyphWidth; x4++) {
          const a6 = imgData.data[4 * (y5 * glyphWidth + x4) + 3] / 255;
          if (a6 === 0)
            continue;
          const j4 = (y5 + buffer) * width + x4 + buffer;
          if (a6 === 1) {
            gridOuter[j4] = 0;
            gridInner[j4] = INF;
          } else {
            const d5 = 0.5 - a6;
            gridOuter[j4] = d5 > 0 ? d5 * d5 : 0;
            gridInner[j4] = d5 < 0 ? d5 * d5 : 0;
          }
        }
      }
      edt(gridOuter, 0, 0, width, height, width, this.f, this.v, this.z);
      edt(gridInner, buffer, buffer, glyphWidth, glyphHeight, width, this.f, this.v, this.z);
      for (let i7 = 0; i7 < len9; i7++) {
        const d5 = Math.sqrt(gridOuter[i7]) - Math.sqrt(gridInner[i7]);
        data[i7] = Math.round(255 - 255 * (d5 / this.radius + this.cutoff));
      }
      return glyph;
    }
  };
  function edt(data, x0, y0, width, height, gridSize, f6, v5, z4) {
    for (let x4 = x0; x4 < x0 + width; x4++)
      edt1d(data, y0 * gridSize + x4, gridSize, height, f6, v5, z4);
    for (let y5 = y0; y5 < y0 + height; y5++)
      edt1d(data, y5 * gridSize + x0, 1, width, f6, v5, z4);
  }
  function edt1d(grid, offset, stride, length17, f6, v5, z4) {
    v5[0] = 0;
    z4[0] = -INF;
    z4[1] = INF;
    f6[0] = grid[offset];
    for (let q3 = 1, k4 = 0, s5 = 0; q3 < length17; q3++) {
      f6[q3] = grid[offset + q3 * stride];
      const q22 = q3 * q3;
      do {
        const r5 = v5[k4];
        s5 = (f6[q3] - f6[r5] + q22 - r5 * r5) / (q3 - r5) / 2;
      } while (s5 <= z4[k4] && --k4 > -1);
      k4++;
      v5[k4] = q3;
      z4[k4] = s5;
      z4[k4 + 1] = INF;
    }
    for (let q3 = 0, k4 = 0; q3 < length17; q3++) {
      while (z4[k4 + 1] < q3)
        k4++;
      const r5 = v5[k4];
      const qr = q3 - r5;
      grid[offset + q3 * stride] = f6[r5] + qr * qr;
    }
  }

  // ../layers/src/text-layer/utils.ts
  var MISSING_CHAR_WIDTH = 32;
  var SINGLE_LINE = [];
  function nextPowOfTwo2(number) {
    return Math.pow(2, Math.ceil(Math.log2(number)));
  }
  function buildMapping2({
    characterSet,
    getFontWidth,
    fontHeight,
    buffer,
    maxCanvasWidth,
    mapping = {},
    xOffset = 0,
    yOffset = 0
  }) {
    let row = 0;
    let x4 = xOffset;
    const rowHeight = fontHeight + buffer * 2;
    for (const char of characterSet) {
      if (!mapping[char]) {
        const width = getFontWidth(char);
        if (x4 + width + buffer * 2 > maxCanvasWidth) {
          x4 = 0;
          row++;
        }
        mapping[char] = {
          x: x4 + buffer,
          y: yOffset + row * rowHeight + buffer,
          width,
          height: rowHeight,
          layoutWidth: width,
          layoutHeight: fontHeight
        };
        x4 += width + buffer * 2;
      }
    }
    return {
      mapping,
      xOffset: x4,
      yOffset: yOffset + row * rowHeight,
      canvasHeight: nextPowOfTwo2(yOffset + (row + 1) * rowHeight)
    };
  }
  function getTextWidth(text, startIndex, endIndex, mapping) {
    let width = 0;
    for (let i7 = startIndex; i7 < endIndex; i7++) {
      const character = text[i7];
      width += mapping[character]?.layoutWidth || 0;
    }
    return width;
  }
  function breakAll(text, startIndex, endIndex, maxWidth, iconMapping, target2) {
    let rowStartCharIndex = startIndex;
    let rowOffsetLeft = 0;
    for (let i7 = startIndex; i7 < endIndex; i7++) {
      const textWidth = getTextWidth(text, i7, i7 + 1, iconMapping);
      if (rowOffsetLeft + textWidth > maxWidth) {
        if (rowStartCharIndex < i7) {
          target2.push(i7);
        }
        rowStartCharIndex = i7;
        rowOffsetLeft = 0;
      }
      rowOffsetLeft += textWidth;
    }
    return rowOffsetLeft;
  }
  function breakWord(text, startIndex, endIndex, maxWidth, iconMapping, target2) {
    let rowStartCharIndex = startIndex;
    let groupStartCharIndex = startIndex;
    let groupEndCharIndex = startIndex;
    let rowOffsetLeft = 0;
    for (let i7 = startIndex; i7 < endIndex; i7++) {
      if (text[i7] === " ") {
        groupEndCharIndex = i7 + 1;
      } else if (text[i7 + 1] === " " || i7 + 1 === endIndex) {
        groupEndCharIndex = i7 + 1;
      }
      if (groupEndCharIndex > groupStartCharIndex) {
        let groupWidth = getTextWidth(text, groupStartCharIndex, groupEndCharIndex, iconMapping);
        if (rowOffsetLeft + groupWidth > maxWidth) {
          if (rowStartCharIndex < groupStartCharIndex) {
            target2.push(groupStartCharIndex);
            rowStartCharIndex = groupStartCharIndex;
            rowOffsetLeft = 0;
          }
          if (groupWidth > maxWidth) {
            groupWidth = breakAll(
              text,
              groupStartCharIndex,
              groupEndCharIndex,
              maxWidth,
              iconMapping,
              target2
            );
            rowStartCharIndex = target2[target2.length - 1];
          }
        }
        groupStartCharIndex = groupEndCharIndex;
        rowOffsetLeft += groupWidth;
      }
    }
    return rowOffsetLeft;
  }
  function autoWrapping(text, wordBreak, maxWidth, iconMapping, startIndex = 0, endIndex) {
    if (endIndex === void 0) {
      endIndex = text.length;
    }
    const result = [];
    if (wordBreak === "break-all") {
      breakAll(text, startIndex, endIndex, maxWidth, iconMapping, result);
    } else {
      breakWord(text, startIndex, endIndex, maxWidth, iconMapping, result);
    }
    return result;
  }
  function transformRow(line, startIndex, endIndex, iconMapping, leftOffsets, rowSize) {
    let x4 = 0;
    let rowHeight = 0;
    for (let i7 = startIndex; i7 < endIndex; i7++) {
      const character = line[i7];
      const frame = iconMapping[character];
      if (frame) {
        if (!rowHeight) {
          rowHeight = frame.layoutHeight;
        }
        leftOffsets[i7] = x4 + frame.layoutWidth / 2;
        x4 += frame.layoutWidth;
      } else {
        log_default.warn(`Missing character: ${character} (${character.codePointAt(0)})`)();
        leftOffsets[i7] = x4;
        x4 += MISSING_CHAR_WIDTH;
      }
    }
    rowSize[0] = x4;
    rowSize[1] = rowHeight;
  }
  function transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping) {
    const characters = Array.from(paragraph);
    const numCharacters = characters.length;
    const x4 = new Array(numCharacters);
    const y5 = new Array(numCharacters);
    const rowWidth = new Array(numCharacters);
    const autoWrappingEnabled = (wordBreak === "break-word" || wordBreak === "break-all") && isFinite(maxWidth) && maxWidth > 0;
    const size = [0, 0];
    const rowSize = [0, 0];
    let rowOffsetTop = 0;
    let lineStartIndex = 0;
    let lineEndIndex = 0;
    for (let i7 = 0; i7 <= numCharacters; i7++) {
      const char = characters[i7];
      if (char === "\n" || i7 === numCharacters) {
        lineEndIndex = i7;
      }
      if (lineEndIndex > lineStartIndex) {
        const rows = autoWrappingEnabled ? autoWrapping(characters, wordBreak, maxWidth, iconMapping, lineStartIndex, lineEndIndex) : SINGLE_LINE;
        for (let rowIndex = 0; rowIndex <= rows.length; rowIndex++) {
          const rowStart = rowIndex === 0 ? lineStartIndex : rows[rowIndex - 1];
          const rowEnd = rowIndex < rows.length ? rows[rowIndex] : lineEndIndex;
          transformRow(characters, rowStart, rowEnd, iconMapping, x4, rowSize);
          for (let j4 = rowStart; j4 < rowEnd; j4++) {
            const char2 = characters[j4];
            const layoutOffsetY = iconMapping[char2]?.layoutOffsetY || 0;
            y5[j4] = rowOffsetTop + rowSize[1] / 2 + layoutOffsetY;
            rowWidth[j4] = rowSize[0];
          }
          rowOffsetTop = rowOffsetTop + rowSize[1] * lineHeight;
          size[0] = Math.max(size[0], rowSize[0]);
        }
        lineStartIndex = lineEndIndex;
      }
      if (char === "\n") {
        x4[lineStartIndex] = 0;
        y5[lineStartIndex] = 0;
        rowWidth[lineStartIndex] = 0;
        lineStartIndex++;
      }
    }
    size[1] = rowOffsetTop;
    return { x: x4, y: y5, rowWidth, size };
  }
  function getTextFromBuffer({
    value,
    length: length17,
    stride,
    offset,
    startIndices,
    characterSet
  }) {
    const bytesPerElement = value.BYTES_PER_ELEMENT;
    const elementStride = stride ? stride / bytesPerElement : 1;
    const elementOffset = offset ? offset / bytesPerElement : 0;
    const characterCount = startIndices[length17] || Math.ceil((value.length - elementOffset) / elementStride);
    const autoCharacterSet = characterSet && /* @__PURE__ */ new Set();
    const texts = new Array(length17);
    let codes = value;
    if (elementStride > 1 || elementOffset > 0) {
      const ArrayType = value.constructor;
      codes = new ArrayType(characterCount);
      for (let i7 = 0; i7 < characterCount; i7++) {
        codes[i7] = value[i7 * elementStride + elementOffset];
      }
    }
    for (let index = 0; index < length17; index++) {
      const startIndex = startIndices[index];
      const endIndex = startIndices[index + 1] || characterCount;
      const codesAtIndex = codes.subarray(startIndex, endIndex);
      texts[index] = String.fromCodePoint.apply(null, codesAtIndex);
      if (autoCharacterSet) {
        codesAtIndex.forEach(autoCharacterSet.add, autoCharacterSet);
      }
    }
    if (autoCharacterSet) {
      for (const charCode of autoCharacterSet) {
        characterSet.add(String.fromCodePoint(charCode));
      }
    }
    return { texts, characterCount };
  }

  // ../layers/src/text-layer/lru-cache.ts
  var LRUCache = class {
    constructor(limit = 5) {
      this._cache = {};
      /** access/update order, first item is oldest, last item is newest */
      this._order = [];
      this.limit = limit;
    }
    get(key) {
      const value = this._cache[key];
      if (value) {
        this._deleteOrder(key);
        this._appendOrder(key);
      }
      return value;
    }
    set(key, value) {
      if (!this._cache[key]) {
        if (Object.keys(this._cache).length === this.limit) {
          this.delete(this._order[0]);
        }
        this._cache[key] = value;
        this._appendOrder(key);
      } else {
        this.delete(key);
        this._cache[key] = value;
        this._appendOrder(key);
      }
    }
    delete(key) {
      const value = this._cache[key];
      if (value) {
        delete this._cache[key];
        this._deleteOrder(key);
      }
    }
    _deleteOrder(key) {
      const index = this._order.indexOf(key);
      if (index >= 0) {
        this._order.splice(index, 1);
      }
    }
    _appendOrder(key) {
      this._order.push(key);
    }
  };

  // ../layers/src/text-layer/font-atlas-manager.ts
  function getDefaultCharacterSet() {
    const charSet = [];
    for (let i7 = 32; i7 < 128; i7++) {
      charSet.push(String.fromCharCode(i7));
    }
    return charSet;
  }
  var DEFAULT_FONT_SETTINGS = {
    fontFamily: "Monaco, monospace",
    fontWeight: "normal",
    characterSet: getDefaultCharacterSet(),
    fontSize: 64,
    buffer: 4,
    sdf: false,
    cutoff: 0.25,
    radius: 12,
    smoothing: 0.1
  };
  var MAX_CANVAS_WIDTH = 1024;
  var BASELINE_SCALE = 0.9;
  var HEIGHT_SCALE = 1.2;
  var CACHE_LIMIT = 3;
  var cache2 = new LRUCache(CACHE_LIMIT);
  function getNewChars(cacheKey, characterSet) {
    let newCharSet;
    if (typeof characterSet === "string") {
      newCharSet = new Set(Array.from(characterSet));
    } else {
      newCharSet = new Set(characterSet);
    }
    const cachedFontAtlas = cache2.get(cacheKey);
    if (!cachedFontAtlas) {
      return newCharSet;
    }
    for (const char in cachedFontAtlas.mapping) {
      if (newCharSet.has(char)) {
        newCharSet.delete(char);
      }
    }
    return newCharSet;
  }
  function populateAlphaChannel(alphaChannel, imageData) {
    for (let i7 = 0; i7 < alphaChannel.length; i7++) {
      imageData.data[4 * i7 + 3] = alphaChannel[i7];
    }
  }
  function setTextStyle(ctx2, fontFamily, fontSize, fontWeight) {
    ctx2.font = `${fontWeight} ${fontSize}px ${fontFamily}`;
    ctx2.fillStyle = "#000";
    ctx2.textBaseline = "alphabetic";
    ctx2.textAlign = "left";
  }
  function setFontAtlasCacheLimit(limit) {
    log_default.assert(Number.isFinite(limit) && limit >= CACHE_LIMIT, "Invalid cache limit");
    cache2 = new LRUCache(limit);
  }
  var FontAtlasManager = class {
    constructor() {
      /** Font settings */
      this.props = { ...DEFAULT_FONT_SETTINGS };
    }
    get atlas() {
      return this._atlas;
    }
    // TODO - cut during v9 porting as types reveal this is not correct
    // get texture(): Texture | undefined {
    //   return this._atlas;
    // }
    get mapping() {
      return this._atlas && this._atlas.mapping;
    }
    get scale() {
      const { fontSize, buffer } = this.props;
      return (fontSize * HEIGHT_SCALE + buffer * 2) / fontSize;
    }
    setProps(props = {}) {
      Object.assign(this.props, props);
      this._key = this._getKey();
      const charSet = getNewChars(this._key, this.props.characterSet);
      const cachedFontAtlas = cache2.get(this._key);
      if (cachedFontAtlas && charSet.size === 0) {
        if (this._atlas !== cachedFontAtlas) {
          this._atlas = cachedFontAtlas;
        }
        return;
      }
      const fontAtlas = this._generateFontAtlas(charSet, cachedFontAtlas);
      this._atlas = fontAtlas;
      cache2.set(this._key, fontAtlas);
    }
    // eslint-disable-next-line max-statements
    _generateFontAtlas(characterSet, cachedFontAtlas) {
      const { fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff } = this.props;
      let canvas2 = cachedFontAtlas && cachedFontAtlas.data;
      if (!canvas2) {
        canvas2 = document.createElement("canvas");
        canvas2.width = MAX_CANVAS_WIDTH;
      }
      const ctx2 = canvas2.getContext("2d", { willReadFrequently: true });
      setTextStyle(ctx2, fontFamily, fontSize, fontWeight);
      const { mapping, canvasHeight, xOffset, yOffset } = buildMapping2({
        getFontWidth: (char) => ctx2.measureText(char).width,
        fontHeight: fontSize * HEIGHT_SCALE,
        buffer,
        characterSet,
        maxCanvasWidth: MAX_CANVAS_WIDTH,
        ...cachedFontAtlas && {
          mapping: cachedFontAtlas.mapping,
          xOffset: cachedFontAtlas.xOffset,
          yOffset: cachedFontAtlas.yOffset
        }
      });
      if (canvas2.height !== canvasHeight) {
        const imageData = ctx2.getImageData(0, 0, canvas2.width, canvas2.height);
        canvas2.height = canvasHeight;
        ctx2.putImageData(imageData, 0, 0);
      }
      setTextStyle(ctx2, fontFamily, fontSize, fontWeight);
      if (sdf) {
        const tinySDF = new TinySDF({
          fontSize,
          buffer,
          radius,
          cutoff,
          fontFamily,
          fontWeight: `${fontWeight}`
        });
        for (const char of characterSet) {
          const { data, width, height, glyphTop } = tinySDF.draw(char);
          mapping[char].width = width;
          mapping[char].layoutOffsetY = fontSize * BASELINE_SCALE - glyphTop;
          const imageData = ctx2.createImageData(width, height);
          populateAlphaChannel(data, imageData);
          ctx2.putImageData(imageData, mapping[char].x, mapping[char].y);
        }
      } else {
        for (const char of characterSet) {
          ctx2.fillText(char, mapping[char].x, mapping[char].y + buffer + fontSize * BASELINE_SCALE);
        }
      }
      return {
        xOffset,
        yOffset,
        mapping,
        data: canvas2,
        width: canvas2.width,
        height: canvas2.height
      };
    }
    _getKey() {
      const { fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff } = this.props;
      if (sdf) {
        return `${fontFamily} ${fontWeight} ${fontSize} ${buffer} ${radius} ${cutoff}`;
      }
      return `${fontFamily} ${fontWeight} ${fontSize} ${buffer}`;
    }
  };

  // ../layers/src/text-layer/text-background-layer/text-background-layer-uniforms.ts
  var uniformBlock14 = `uniform textBackgroundUniforms {
  bool billboard;
  float sizeScale;
  float sizeMinPixels;
  float sizeMaxPixels;
  vec4 borderRadius;
  vec4 padding;
  highp int sizeUnits;
  bool stroked;
} textBackground;
`;
  var textBackgroundUniforms = {
    name: "textBackground",
    vs: uniformBlock14,
    fs: uniformBlock14,
    uniformTypes: {
      billboard: "f32",
      sizeScale: "f32",
      sizeMinPixels: "f32",
      sizeMaxPixels: "f32",
      borderRadius: "vec4<f32>",
      padding: "vec4<f32>",
      sizeUnits: "i32",
      stroked: "f32"
    }
  };

  // ../layers/src/text-layer/text-background-layer/text-background-layer-vertex.glsl.ts
  var text_background_layer_vertex_glsl_default = `#version 300 es
#define SHADER_NAME text-background-layer-vertex-shader

in vec2 positions;

in vec3 instancePositions;
in vec3 instancePositions64Low;
in vec4 instanceRects;
in float instanceSizes;
in float instanceAngles;
in vec2 instancePixelOffsets;
in float instanceLineWidths;
in vec4 instanceFillColors;
in vec4 instanceLineColors;
in vec3 instancePickingColors;

out vec4 vFillColor;
out vec4 vLineColor;
out float vLineWidth;
out vec2 uv;
out vec2 dimensions;

vec2 rotate_by_angle(vec2 vertex, float angle) {
  float angle_radian = radians(angle);
  float cos_angle = cos(angle_radian);
  float sin_angle = sin(angle_radian);
  mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);
  return rotationMatrix * vertex;
}

void main(void) {
  geometry.worldPosition = instancePositions;
  geometry.uv = positions;
  geometry.pickingColor = instancePickingColors;
  uv = positions;
  vLineWidth = instanceLineWidths;

  // convert size in meters to pixels, then scaled and clamp

  // project meters to pixels and clamp to limits
  float sizePixels = clamp(
    project_size_to_pixel(instanceSizes * textBackground.sizeScale, textBackground.sizeUnits),
    textBackground.sizeMinPixels, textBackground.sizeMaxPixels
  );

  dimensions = instanceRects.zw * sizePixels + textBackground.padding.xy + textBackground.padding.zw;

  vec2 pixelOffset = (positions * instanceRects.zw + instanceRects.xy) * sizePixels + mix(-textBackground.padding.xy, textBackground.padding.zw, positions);
  pixelOffset = rotate_by_angle(pixelOffset, instanceAngles);
  pixelOffset += instancePixelOffsets;
  pixelOffset.y *= -1.0;

  if (textBackground.billboard)  {
    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);
    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
    vec3 offset = vec3(pixelOffset, 0.0);
    DECKGL_FILTER_SIZE(offset, geometry);
    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);
  } else {
    vec3 offset_common = vec3(project_pixel_size(pixelOffset), 0.0);
    DECKGL_FILTER_SIZE(offset_common, geometry);
    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset_common, geometry.position);
    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
  }

  // Apply opacity to instance color, or return instance picking color
  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * layer.opacity);
  DECKGL_FILTER_COLOR(vFillColor, geometry);
  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * layer.opacity);
  DECKGL_FILTER_COLOR(vLineColor, geometry);
}
`;

  // ../layers/src/text-layer/text-background-layer/text-background-layer-fragment.glsl.ts
  var text_background_layer_fragment_glsl_default = `#version 300 es
#define SHADER_NAME text-background-layer-fragment-shader

precision highp float;

in vec4 vFillColor;
in vec4 vLineColor;
in float vLineWidth;
in vec2 uv;
in vec2 dimensions;

out vec4 fragColor;

float round_rect(vec2 p, vec2 size, vec4 radii) {
  // Convert p and size to center-based coordinates [-0.5, 0.5]
  vec2 pixelPositionCB = (p - 0.5) * size;
  vec2 sizeCB = size * 0.5;

  float maxBorderRadius = min(size.x, size.y) * 0.5;
  vec4 borderRadius = vec4(min(radii, maxBorderRadius));

  // from https://www.shadertoy.com/view/4llXD7
  borderRadius.xy =
      (pixelPositionCB.x > 0.0) ? borderRadius.xy : borderRadius.zw;
  borderRadius.x = (pixelPositionCB.y > 0.0) ? borderRadius.x : borderRadius.y;
  vec2 q = abs(pixelPositionCB) - sizeCB + borderRadius.x;
  return -(min(max(q.x, q.y), 0.0) + length(max(q, 0.0)) - borderRadius.x);
}

float rect(vec2 p, vec2 size) {
  vec2 pixelPosition = p * size;
  return min(min(pixelPosition.x, size.x - pixelPosition.x),
             min(pixelPosition.y, size.y - pixelPosition.y));
}

vec4 get_stroked_fragColor(float dist) {
  float isBorder = smoothedge(dist, vLineWidth);
  return mix(vFillColor, vLineColor, isBorder);
}

void main(void) {
  geometry.uv = uv;

  if (textBackground.borderRadius != vec4(0.0)) {
    float distToEdge = round_rect(uv, dimensions, textBackground.borderRadius);
    if (textBackground.stroked) {
      fragColor = get_stroked_fragColor(distToEdge);
    } else {
      fragColor = vFillColor;
    }
    // add border radius
    float shapeAlpha = smoothedge(-distToEdge, 0.0);
    fragColor.a *= shapeAlpha;
  } else {
    if (textBackground.stroked) {
      float distToEdge = rect(uv, dimensions);
      fragColor = get_stroked_fragColor(distToEdge);
    } else {
      fragColor = vFillColor;
    }
  }
  DECKGL_FILTER_COLOR(fragColor, geometry);
}
`;

  // ../layers/src/text-layer/text-background-layer/text-background-layer.ts
  var defaultProps15 = {
    billboard: true,
    sizeScale: 1,
    sizeUnits: "pixels",
    sizeMinPixels: 0,
    sizeMaxPixels: Number.MAX_SAFE_INTEGER,
    borderRadius: { type: "object", value: 0 },
    padding: { type: "array", value: [0, 0, 0, 0] },
    getPosition: { type: "accessor", value: (x4) => x4.position },
    getSize: { type: "accessor", value: 1 },
    getAngle: { type: "accessor", value: 0 },
    getPixelOffset: { type: "accessor", value: [0, 0] },
    getBoundingRect: { type: "accessor", value: [0, 0, 0, 0] },
    getFillColor: { type: "accessor", value: [0, 0, 0, 255] },
    getLineColor: { type: "accessor", value: [0, 0, 0, 255] },
    getLineWidth: { type: "accessor", value: 1 }
  };
  var TextBackgroundLayer = class extends Layer {
    getShaders() {
      return super.getShaders({ vs: text_background_layer_vertex_glsl_default, fs: text_background_layer_fragment_glsl_default, modules: [project32_default, picking_default, textBackgroundUniforms] });
    }
    initializeState() {
      this.getAttributeManager().addInstanced({
        instancePositions: {
          size: 3,
          type: "float64",
          fp64: this.use64bitPositions(),
          transition: true,
          accessor: "getPosition"
        },
        instanceSizes: {
          size: 1,
          transition: true,
          accessor: "getSize",
          defaultValue: 1
        },
        instanceAngles: {
          size: 1,
          transition: true,
          accessor: "getAngle"
        },
        instanceRects: {
          size: 4,
          accessor: "getBoundingRect"
        },
        instancePixelOffsets: {
          size: 2,
          transition: true,
          accessor: "getPixelOffset"
        },
        instanceFillColors: {
          size: 4,
          transition: true,
          type: "unorm8",
          accessor: "getFillColor",
          defaultValue: [0, 0, 0, 255]
        },
        instanceLineColors: {
          size: 4,
          transition: true,
          type: "unorm8",
          accessor: "getLineColor",
          defaultValue: [0, 0, 0, 255]
        },
        instanceLineWidths: {
          size: 1,
          transition: true,
          accessor: "getLineWidth",
          defaultValue: 1
        }
      });
    }
    updateState(params) {
      super.updateState(params);
      const { changeFlags } = params;
      if (changeFlags.extensionsChanged) {
        this.state.model?.destroy();
        this.state.model = this._getModel();
        this.getAttributeManager().invalidateAll();
      }
    }
    draw({ uniforms }) {
      const { billboard, sizeScale, sizeUnits, sizeMinPixels, sizeMaxPixels, getLineWidth } = this.props;
      let { padding, borderRadius } = this.props;
      if (padding.length < 4) {
        padding = [padding[0], padding[1], padding[0], padding[1]];
      }
      if (!Array.isArray(borderRadius)) {
        borderRadius = [borderRadius, borderRadius, borderRadius, borderRadius];
      }
      const model = this.state.model;
      const textBackgroundProps = {
        billboard,
        stroked: Boolean(getLineWidth),
        borderRadius,
        padding,
        sizeUnits: UNIT[sizeUnits],
        sizeScale,
        sizeMinPixels,
        sizeMaxPixels
      };
      model.shaderInputs.setProps({ textBackground: textBackgroundProps });
      model.draw(this.context.renderPass);
    }
    _getModel() {
      const positions = [0, 0, 1, 0, 0, 1, 1, 1];
      return new Model(this.context.device, {
        ...this.getShaders(),
        id: this.props.id,
        bufferLayout: this.getAttributeManager().getBufferLayouts(),
        geometry: new Geometry({
          topology: "triangle-strip",
          vertexCount: 4,
          attributes: {
            positions: { size: 2, value: new Float32Array(positions) }
          }
        }),
        isInstanced: true
      });
    }
  };
  TextBackgroundLayer.defaultProps = defaultProps15;
  TextBackgroundLayer.layerName = "TextBackgroundLayer";

  // ../layers/src/text-layer/text-layer.ts
  var TEXT_ANCHOR = {
    start: 1,
    middle: 0,
    end: -1
  };
  var ALIGNMENT_BASELINE = {
    top: 1,
    center: 0,
    bottom: -1
  };
  var DEFAULT_COLOR9 = [0, 0, 0, 255];
  var DEFAULT_LINE_HEIGHT = 1;
  var defaultProps16 = {
    billboard: true,
    sizeScale: 1,
    sizeUnits: "pixels",
    sizeMinPixels: 0,
    sizeMaxPixels: Number.MAX_SAFE_INTEGER,
    background: false,
    getBackgroundColor: { type: "accessor", value: [255, 255, 255, 255] },
    getBorderColor: { type: "accessor", value: DEFAULT_COLOR9 },
    getBorderWidth: { type: "accessor", value: 0 },
    backgroundBorderRadius: { type: "object", value: 0 },
    backgroundPadding: { type: "array", value: [0, 0, 0, 0] },
    characterSet: { type: "object", value: DEFAULT_FONT_SETTINGS.characterSet },
    fontFamily: DEFAULT_FONT_SETTINGS.fontFamily,
    fontWeight: DEFAULT_FONT_SETTINGS.fontWeight,
    lineHeight: DEFAULT_LINE_HEIGHT,
    outlineWidth: { type: "number", value: 0, min: 0 },
    outlineColor: { type: "color", value: DEFAULT_COLOR9 },
    fontSettings: { type: "object", value: {}, compare: 1 },
    // auto wrapping options
    wordBreak: "break-word",
    maxWidth: { type: "number", value: -1 },
    getText: { type: "accessor", value: (x4) => x4.text },
    getPosition: { type: "accessor", value: (x4) => x4.position },
    getColor: { type: "accessor", value: DEFAULT_COLOR9 },
    getSize: { type: "accessor", value: 32 },
    getAngle: { type: "accessor", value: 0 },
    getTextAnchor: { type: "accessor", value: "middle" },
    getAlignmentBaseline: { type: "accessor", value: "center" },
    getPixelOffset: { type: "accessor", value: [0, 0] },
    // deprecated
    backgroundColor: { deprecatedFor: ["background", "getBackgroundColor"] }
  };
  var TextLayer = class extends CompositeLayer {
    constructor() {
      super(...arguments);
      /** Returns the x, y, width, height of each text string, relative to pixel size.
       * Used to render the background.
       */
      this.getBoundingRect = (object, objectInfo) => {
        let {
          size: [width, height]
        } = this.transformParagraph(object, objectInfo);
        const { fontSize } = this.state.fontAtlasManager.props;
        width /= fontSize;
        height /= fontSize;
        const { getTextAnchor, getAlignmentBaseline } = this.props;
        const anchorX = TEXT_ANCHOR[typeof getTextAnchor === "function" ? getTextAnchor(object, objectInfo) : getTextAnchor];
        const anchorY = ALIGNMENT_BASELINE[typeof getAlignmentBaseline === "function" ? getAlignmentBaseline(object, objectInfo) : getAlignmentBaseline];
        return [(anchorX - 1) * width / 2, (anchorY - 1) * height / 2, width, height];
      };
      /** Returns the x, y offsets of each character in a text string, in texture size.
       * Used to layout characters in the vertex shader.
       */
      this.getIconOffsets = (object, objectInfo) => {
        const { getTextAnchor, getAlignmentBaseline } = this.props;
        const {
          x: x4,
          y: y5,
          rowWidth,
          size: [width, height]
        } = this.transformParagraph(object, objectInfo);
        const anchorX = TEXT_ANCHOR[typeof getTextAnchor === "function" ? getTextAnchor(object, objectInfo) : getTextAnchor];
        const anchorY = ALIGNMENT_BASELINE[typeof getAlignmentBaseline === "function" ? getAlignmentBaseline(object, objectInfo) : getAlignmentBaseline];
        const numCharacters = x4.length;
        const offsets = new Array(numCharacters * 2);
        let index = 0;
        for (let i7 = 0; i7 < numCharacters; i7++) {
          const rowOffset = (1 - anchorX) * (width - rowWidth[i7]) / 2;
          offsets[index++] = (anchorX - 1) * width / 2 + rowOffset + x4[i7];
          offsets[index++] = (anchorY - 1) * height / 2 + y5[i7];
        }
        return offsets;
      };
    }
    initializeState() {
      this.state = {
        styleVersion: 0,
        fontAtlasManager: new FontAtlasManager()
      };
      if (this.props.maxWidth > 0) {
        log_default.once(1, "v8.9 breaking change: TextLayer maxWidth is now relative to text size")();
      }
    }
    // eslint-disable-next-line complexity
    updateState(params) {
      const { props, oldProps, changeFlags } = params;
      const textChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText);
      if (textChanged) {
        this._updateText();
      }
      const fontChanged = this._updateFontAtlas();
      const styleChanged = fontChanged || props.lineHeight !== oldProps.lineHeight || props.wordBreak !== oldProps.wordBreak || props.maxWidth !== oldProps.maxWidth;
      if (styleChanged) {
        this.setState({
          styleVersion: this.state.styleVersion + 1
        });
      }
    }
    getPickingInfo({ info }) {
      info.object = info.index >= 0 ? this.props.data[info.index] : null;
      return info;
    }
    /** Returns true if font has changed */
    _updateFontAtlas() {
      const { fontSettings, fontFamily, fontWeight } = this.props;
      const { fontAtlasManager, characterSet } = this.state;
      const fontProps = {
        ...fontSettings,
        characterSet,
        fontFamily,
        fontWeight
      };
      if (!fontAtlasManager.mapping) {
        fontAtlasManager.setProps(fontProps);
        return true;
      }
      for (const key in fontProps) {
        if (fontProps[key] !== fontAtlasManager.props[key]) {
          fontAtlasManager.setProps(fontProps);
          return true;
        }
      }
      return false;
    }
    // Text strings are variable width objects
    // Count characters and start offsets
    _updateText() {
      const { data, characterSet } = this.props;
      const textBuffer = data.attributes?.getText;
      let { getText } = this.props;
      let startIndices = data.startIndices;
      let numInstances;
      const autoCharacterSet = characterSet === "auto" && /* @__PURE__ */ new Set();
      if (textBuffer && startIndices) {
        const { texts, characterCount } = getTextFromBuffer({
          ...ArrayBuffer.isView(textBuffer) ? { value: textBuffer } : textBuffer,
          // @ts-ignore if data.attribute is defined then length is expected
          length: data.length,
          startIndices,
          characterSet: autoCharacterSet
        });
        numInstances = characterCount;
        getText = (_3, { index }) => texts[index];
      } else {
        const { iterable, objectInfo } = createIterable(data);
        startIndices = [0];
        numInstances = 0;
        for (const object of iterable) {
          objectInfo.index++;
          const text = Array.from(getText(object, objectInfo) || "");
          if (autoCharacterSet) {
            text.forEach(autoCharacterSet.add, autoCharacterSet);
          }
          numInstances += text.length;
          startIndices.push(numInstances);
        }
      }
      this.setState({
        getText,
        startIndices,
        numInstances,
        characterSet: autoCharacterSet || characterSet
      });
    }
    /** There are two size systems in this layer:
    
        + Pixel size: user-specified text size, via getSize, sizeScale, sizeUnits etc.
          The layer roughly matches the output of the layer to CSS pixels, e.g. getSize: 12, sizeScale: 2
          in layer props is roughly equivalent to font-size: 24px in CSS.
        + Texture size: internally, character positions in a text blob are calculated using the sizes of iconMapping,
          which depends on how large each character is drawn into the font atlas. This is controlled by
          fontSettings.fontSize (default 64) and most users do not set it manually.
          These numbers are intended to be used in the vertex shader and never to be exposed to the end user.
    
        All surfaces exposed to the user should either use the pixel size or a multiplier relative to the pixel size. */
    /** Calculate the size and position of each character in a text string.
     * Values are in texture size */
    transformParagraph(object, objectInfo) {
      const { fontAtlasManager } = this.state;
      const iconMapping = fontAtlasManager.mapping;
      const getText = this.state.getText;
      const { wordBreak, lineHeight, maxWidth } = this.props;
      const paragraph = getText(object, objectInfo) || "";
      return transformParagraph(
        paragraph,
        lineHeight,
        wordBreak,
        maxWidth * fontAtlasManager.props.fontSize,
        iconMapping
      );
    }
    renderLayers() {
      const {
        startIndices,
        numInstances,
        getText,
        fontAtlasManager: { scale: scale24, atlas, mapping },
        styleVersion
      } = this.state;
      const {
        data,
        _dataDiff,
        getPosition: getPosition2,
        getColor: getColor2,
        getSize,
        getAngle: getAngle2,
        getPixelOffset,
        getBackgroundColor,
        getBorderColor,
        getBorderWidth,
        backgroundBorderRadius,
        backgroundPadding,
        background,
        billboard,
        fontSettings,
        outlineWidth,
        outlineColor,
        sizeScale,
        sizeUnits,
        sizeMinPixels,
        sizeMaxPixels,
        transitions,
        updateTriggers
      } = this.props;
      const CharactersLayerClass = this.getSubLayerClass("characters", MultiIconLayer);
      const BackgroundLayerClass = this.getSubLayerClass("background", TextBackgroundLayer);
      return [
        background && new BackgroundLayerClass(
          {
            // background props
            getFillColor: getBackgroundColor,
            getLineColor: getBorderColor,
            getLineWidth: getBorderWidth,
            borderRadius: backgroundBorderRadius,
            padding: backgroundPadding,
            // props shared with characters layer
            getPosition: getPosition2,
            getSize,
            getAngle: getAngle2,
            getPixelOffset,
            billboard,
            sizeScale,
            sizeUnits,
            sizeMinPixels,
            sizeMaxPixels,
            transitions: transitions && {
              getPosition: transitions.getPosition,
              getAngle: transitions.getAngle,
              getSize: transitions.getSize,
              getFillColor: transitions.getBackgroundColor,
              getLineColor: transitions.getBorderColor,
              getLineWidth: transitions.getBorderWidth,
              getPixelOffset: transitions.getPixelOffset
            }
          },
          this.getSubLayerProps({
            id: "background",
            updateTriggers: {
              getPosition: updateTriggers.getPosition,
              getAngle: updateTriggers.getAngle,
              getSize: updateTriggers.getSize,
              getFillColor: updateTriggers.getBackgroundColor,
              getLineColor: updateTriggers.getBorderColor,
              getLineWidth: updateTriggers.getBorderWidth,
              getPixelOffset: updateTriggers.getPixelOffset,
              getBoundingRect: {
                getText: updateTriggers.getText,
                getTextAnchor: updateTriggers.getTextAnchor,
                getAlignmentBaseline: updateTriggers.getAlignmentBaseline,
                styleVersion
              }
            }
          }),
          {
            data: (
              // @ts-ignore (2339) attribute is not defined on all data types
              data.attributes && data.attributes.background ? (
                // @ts-ignore (2339) attribute is not defined on all data types
                { length: data.length, attributes: data.attributes.background }
              ) : data
            ),
            _dataDiff,
            // Maintain the same background behavior as <=8.3. Remove in v9?
            autoHighlight: false,
            getBoundingRect: this.getBoundingRect
          }
        ),
        new CharactersLayerClass(
          {
            sdf: fontSettings.sdf,
            smoothing: Number.isFinite(fontSettings.smoothing) ? fontSettings.smoothing : DEFAULT_FONT_SETTINGS.smoothing,
            outlineWidth: outlineWidth / (fontSettings.radius || DEFAULT_FONT_SETTINGS.radius),
            outlineColor,
            iconAtlas: atlas,
            iconMapping: mapping,
            getPosition: getPosition2,
            getColor: getColor2,
            getSize,
            getAngle: getAngle2,
            getPixelOffset,
            billboard,
            sizeScale: sizeScale * scale24,
            sizeUnits,
            sizeMinPixels: sizeMinPixels * scale24,
            sizeMaxPixels: sizeMaxPixels * scale24,
            transitions: transitions && {
              getPosition: transitions.getPosition,
              getAngle: transitions.getAngle,
              getColor: transitions.getColor,
              getSize: transitions.getSize,
              getPixelOffset: transitions.getPixelOffset
            }
          },
          this.getSubLayerProps({
            id: "characters",
            updateTriggers: {
              all: updateTriggers.getText,
              getPosition: updateTriggers.getPosition,
              getAngle: updateTriggers.getAngle,
              getColor: updateTriggers.getColor,
              getSize: updateTriggers.getSize,
              getPixelOffset: updateTriggers.getPixelOffset,
              getIconOffsets: {
                getTextAnchor: updateTriggers.getTextAnchor,
                getAlignmentBaseline: updateTriggers.getAlignmentBaseline,
                styleVersion
              }
            }
          }),
          {
            data,
            _dataDiff,
            startIndices,
            numInstances,
            getIconOffsets: this.getIconOffsets,
            getIcon: getText
          }
        )
      ];
    }
    static set fontAtlasCacheLimit(limit) {
      setFontAtlasCacheLimit(limit);
    }
  };
  TextLayer.defaultProps = defaultProps16;
  TextLayer.layerName = "TextLayer";

  // ../layers/src/geojson-layer/sub-layer-map.ts
  var POINT_LAYER = {
    circle: {
      type: ScatterplotLayer,
      props: {
        filled: "filled",
        stroked: "stroked",
        lineWidthMaxPixels: "lineWidthMaxPixels",
        lineWidthMinPixels: "lineWidthMinPixels",
        lineWidthScale: "lineWidthScale",
        lineWidthUnits: "lineWidthUnits",
        pointRadiusMaxPixels: "radiusMaxPixels",
        pointRadiusMinPixels: "radiusMinPixels",
        pointRadiusScale: "radiusScale",
        pointRadiusUnits: "radiusUnits",
        pointAntialiasing: "antialiasing",
        pointBillboard: "billboard",
        getFillColor: "getFillColor",
        getLineColor: "getLineColor",
        getLineWidth: "getLineWidth",
        getPointRadius: "getRadius"
      }
    },
    icon: {
      type: IconLayer,
      props: {
        iconAtlas: "iconAtlas",
        iconMapping: "iconMapping",
        iconSizeMaxPixels: "sizeMaxPixels",
        iconSizeMinPixels: "sizeMinPixels",
        iconSizeScale: "sizeScale",
        iconSizeUnits: "sizeUnits",
        iconAlphaCutoff: "alphaCutoff",
        iconBillboard: "billboard",
        getIcon: "getIcon",
        getIconAngle: "getAngle",
        getIconColor: "getColor",
        getIconPixelOffset: "getPixelOffset",
        getIconSize: "getSize"
      }
    },
    text: {
      type: TextLayer,
      props: {
        textSizeMaxPixels: "sizeMaxPixels",
        textSizeMinPixels: "sizeMinPixels",
        textSizeScale: "sizeScale",
        textSizeUnits: "sizeUnits",
        textBackground: "background",
        textBackgroundPadding: "backgroundPadding",
        textFontFamily: "fontFamily",
        textFontWeight: "fontWeight",
        textLineHeight: "lineHeight",
        textMaxWidth: "maxWidth",
        textOutlineColor: "outlineColor",
        textOutlineWidth: "outlineWidth",
        textWordBreak: "wordBreak",
        textCharacterSet: "characterSet",
        textBillboard: "billboard",
        textFontSettings: "fontSettings",
        getText: "getText",
        getTextAngle: "getAngle",
        getTextColor: "getColor",
        getTextPixelOffset: "getPixelOffset",
        getTextSize: "getSize",
        getTextAnchor: "getTextAnchor",
        getTextAlignmentBaseline: "getAlignmentBaseline",
        getTextBackgroundColor: "getBackgroundColor",
        getTextBorderColor: "getBorderColor",
        getTextBorderWidth: "getBorderWidth"
      }
    }
  };
  var LINE_LAYER = {
    type: PathLayer,
    props: {
      lineWidthUnits: "widthUnits",
      lineWidthScale: "widthScale",
      lineWidthMinPixels: "widthMinPixels",
      lineWidthMaxPixels: "widthMaxPixels",
      lineJointRounded: "jointRounded",
      lineCapRounded: "capRounded",
      lineMiterLimit: "miterLimit",
      lineBillboard: "billboard",
      getLineColor: "getColor",
      getLineWidth: "getWidth"
    }
  };
  var POLYGON_LAYER = {
    type: SolidPolygonLayer,
    props: {
      extruded: "extruded",
      filled: "filled",
      wireframe: "wireframe",
      elevationScale: "elevationScale",
      material: "material",
      _full3d: "_full3d",
      getElevation: "getElevation",
      getFillColor: "getFillColor",
      getLineColor: "getLineColor"
    }
  };
  function getDefaultProps({
    type,
    props
  }) {
    const result = {};
    for (const key in props) {
      result[key] = type.defaultProps[props[key]];
    }
    return result;
  }
  function forwardProps(layer, mapping) {
    const { transitions, updateTriggers } = layer.props;
    const result = {
      updateTriggers: {},
      transitions: transitions && {
        getPosition: transitions.geometry
      }
    };
    for (const sourceKey in mapping) {
      const targetKey = mapping[sourceKey];
      let value = layer.props[sourceKey];
      if (sourceKey.startsWith("get")) {
        value = layer.getSubLayerAccessor(value);
        result.updateTriggers[targetKey] = updateTriggers[sourceKey];
        if (transitions) {
          result.transitions[targetKey] = transitions[sourceKey];
        }
      }
      result[targetKey] = value;
    }
    return result;
  }

  // ../layers/src/geojson-layer/geojson.ts
  function getGeojsonFeatures(geojson) {
    if (Array.isArray(geojson)) {
      return geojson;
    }
    log_default.assert(geojson.type, "GeoJSON does not have type");
    switch (geojson.type) {
      case "Feature":
        return [geojson];
      case "FeatureCollection":
        log_default.assert(Array.isArray(geojson.features), "GeoJSON does not have features array");
        return geojson.features;
      default:
        return [{ geometry: geojson }];
    }
  }
  function separateGeojsonFeatures(features, wrapFeature, dataRange = {}) {
    const separated = {
      pointFeatures: [],
      lineFeatures: [],
      polygonFeatures: [],
      polygonOutlineFeatures: []
    };
    const { startRow = 0, endRow = features.length } = dataRange;
    for (let featureIndex = startRow; featureIndex < endRow; featureIndex++) {
      const feature = features[featureIndex];
      const { geometry } = feature;
      if (!geometry) {
        continue;
      }
      if (geometry.type === "GeometryCollection") {
        log_default.assert(Array.isArray(geometry.geometries), "GeoJSON does not have geometries array");
        const { geometries } = geometry;
        for (let i7 = 0; i7 < geometries.length; i7++) {
          const subGeometry = geometries[i7];
          separateGeometry(
            subGeometry,
            separated,
            wrapFeature,
            feature,
            featureIndex
          );
        }
      } else {
        separateGeometry(geometry, separated, wrapFeature, feature, featureIndex);
      }
    }
    return separated;
  }
  function separateGeometry(geometry, separated, wrapFeature, sourceFeature, sourceFeatureIndex) {
    const { type, coordinates } = geometry;
    const { pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures } = separated;
    if (!validateGeometry(type, coordinates)) {
      log_default.warn(`${type} coordinates are malformed`)();
      return;
    }
    switch (type) {
      case "Point":
        pointFeatures.push(
          wrapFeature(
            {
              geometry
            },
            sourceFeature,
            sourceFeatureIndex
          )
        );
        break;
      case "MultiPoint":
        coordinates.forEach((point) => {
          pointFeatures.push(
            wrapFeature(
              {
                geometry: { type: "Point", coordinates: point }
              },
              sourceFeature,
              sourceFeatureIndex
            )
          );
        });
        break;
      case "LineString":
        lineFeatures.push(
          wrapFeature(
            {
              geometry
            },
            sourceFeature,
            sourceFeatureIndex
          )
        );
        break;
      case "MultiLineString":
        coordinates.forEach((path) => {
          lineFeatures.push(
            wrapFeature(
              {
                geometry: { type: "LineString", coordinates: path }
              },
              sourceFeature,
              sourceFeatureIndex
            )
          );
        });
        break;
      case "Polygon":
        polygonFeatures.push(
          wrapFeature(
            {
              geometry
            },
            sourceFeature,
            sourceFeatureIndex
          )
        );
        coordinates.forEach((path) => {
          polygonOutlineFeatures.push(
            wrapFeature(
              {
                geometry: { type: "LineString", coordinates: path }
              },
              sourceFeature,
              sourceFeatureIndex
            )
          );
        });
        break;
      case "MultiPolygon":
        coordinates.forEach((polygon) => {
          polygonFeatures.push(
            wrapFeature(
              {
                geometry: { type: "Polygon", coordinates: polygon }
              },
              sourceFeature,
              sourceFeatureIndex
            )
          );
          polygon.forEach((path) => {
            polygonOutlineFeatures.push(
              wrapFeature(
                {
                  geometry: { type: "LineString", coordinates: path }
                },
                sourceFeature,
                sourceFeatureIndex
              )
            );
          });
        });
        break;
      default:
    }
  }
  var COORDINATE_NEST_LEVEL = {
    Point: 1,
    MultiPoint: 2,
    LineString: 2,
    MultiLineString: 3,
    Polygon: 3,
    MultiPolygon: 4
  };
  function validateGeometry(type, coordinates) {
    let nestLevel = COORDINATE_NEST_LEVEL[type];
    log_default.assert(nestLevel, `Unknown GeoJSON type ${type}`);
    while (coordinates && --nestLevel > 0) {
      coordinates = coordinates[0];
    }
    return coordinates && Number.isFinite(coordinates[0]);
  }

  // ../layers/src/geojson-layer/geojson-layer-props.ts
  function createEmptyLayerProps() {
    return {
      points: {},
      lines: {},
      polygons: {},
      polygonsOutline: {}
    };
  }
  function getCoordinates(f6) {
    return f6.geometry.coordinates;
  }
  function createLayerPropsFromFeatures(features, featuresDiff) {
    const layerProps = createEmptyLayerProps();
    const { pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures } = features;
    layerProps.points.data = pointFeatures;
    layerProps.points._dataDiff = featuresDiff.pointFeatures && (() => featuresDiff.pointFeatures);
    layerProps.points.getPosition = getCoordinates;
    layerProps.lines.data = lineFeatures;
    layerProps.lines._dataDiff = featuresDiff.lineFeatures && (() => featuresDiff.lineFeatures);
    layerProps.lines.getPath = getCoordinates;
    layerProps.polygons.data = polygonFeatures;
    layerProps.polygons._dataDiff = featuresDiff.polygonFeatures && (() => featuresDiff.polygonFeatures);
    layerProps.polygons.getPolygon = getCoordinates;
    layerProps.polygonsOutline.data = polygonOutlineFeatures;
    layerProps.polygonsOutline._dataDiff = featuresDiff.polygonOutlineFeatures && (() => featuresDiff.polygonOutlineFeatures);
    layerProps.polygonsOutline.getPath = getCoordinates;
    return layerProps;
  }
  function createLayerPropsFromBinary(geojsonBinary, encodePickingColor) {
    const layerProps = createEmptyLayerProps();
    const { points, lines, polygons } = geojsonBinary;
    const customPickingColors = calculatePickingColors(geojsonBinary, encodePickingColor);
    layerProps.points.data = {
      length: points.positions.value.length / points.positions.size,
      attributes: {
        ...points.attributes,
        getPosition: points.positions,
        instancePickingColors: {
          size: 4,
          value: customPickingColors.points
        }
      },
      properties: points.properties,
      numericProps: points.numericProps,
      featureIds: points.featureIds
    };
    layerProps.lines.data = {
      length: lines.pathIndices.value.length - 1,
      startIndices: lines.pathIndices.value,
      attributes: {
        ...lines.attributes,
        getPath: lines.positions,
        instancePickingColors: {
          size: 4,
          value: customPickingColors.lines
        }
      },
      properties: lines.properties,
      numericProps: lines.numericProps,
      featureIds: lines.featureIds
    };
    layerProps.lines._pathType = "open";
    const vertexCount = polygons.positions.value.length / polygons.positions.size;
    const vertexValid = Array(vertexCount).fill(1);
    for (const index of polygons.primitivePolygonIndices.value) {
      vertexValid[index - 1] = 0;
    }
    layerProps.polygons.data = {
      length: polygons.polygonIndices.value.length - 1,
      startIndices: polygons.polygonIndices.value,
      attributes: {
        ...polygons.attributes,
        getPolygon: polygons.positions,
        instanceVertexValid: {
          size: 1,
          value: new Uint16Array(vertexValid)
        },
        pickingColors: {
          size: 4,
          value: customPickingColors.polygons
        }
      },
      properties: polygons.properties,
      numericProps: polygons.numericProps,
      featureIds: polygons.featureIds
    };
    layerProps.polygons._normalize = false;
    if (polygons.triangles) {
      layerProps.polygons.data.attributes.indices = polygons.triangles.value;
    }
    layerProps.polygonsOutline.data = {
      length: polygons.primitivePolygonIndices.value.length - 1,
      startIndices: polygons.primitivePolygonIndices.value,
      attributes: {
        ...polygons.attributes,
        getPath: polygons.positions,
        instancePickingColors: {
          size: 4,
          value: customPickingColors.polygons
        }
      },
      properties: polygons.properties,
      numericProps: polygons.numericProps,
      featureIds: polygons.featureIds
    };
    layerProps.polygonsOutline._pathType = "open";
    return layerProps;
  }

  // ../layers/src/geojson-layer/geojson-layer.ts
  var FEATURE_TYPES = ["points", "linestrings", "polygons"];
  var defaultProps17 = {
    ...getDefaultProps(POINT_LAYER.circle),
    ...getDefaultProps(POINT_LAYER.icon),
    ...getDefaultProps(POINT_LAYER.text),
    ...getDefaultProps(LINE_LAYER),
    ...getDefaultProps(POLYGON_LAYER),
    // Overwrite sub layer defaults
    stroked: true,
    filled: true,
    extruded: false,
    wireframe: false,
    _full3d: false,
    iconAtlas: { type: "object", value: null },
    iconMapping: { type: "object", value: {} },
    getIcon: { type: "accessor", value: (f6) => f6.properties.icon },
    getText: { type: "accessor", value: (f6) => f6.properties.text },
    // Self props
    pointType: "circle",
    // TODO: deprecated, remove in v9
    getRadius: { deprecatedFor: "getPointRadius" }
  };
  var GeoJsonLayer = class extends CompositeLayer {
    initializeState() {
      this.state = {
        layerProps: {},
        features: {},
        featuresDiff: {}
      };
    }
    updateState({ props, changeFlags }) {
      if (!changeFlags.dataChanged) {
        return;
      }
      const { data } = this.props;
      const binary = data && "points" in data && "polygons" in data && "lines" in data;
      this.setState({ binary });
      if (binary) {
        this._updateStateBinary({ props, changeFlags });
      } else {
        this._updateStateJSON({ props, changeFlags });
      }
    }
    _updateStateBinary({ props, changeFlags }) {
      const layerProps = createLayerPropsFromBinary(props.data, this.encodePickingColor);
      this.setState({ layerProps });
    }
    _updateStateJSON({ props, changeFlags }) {
      const features = getGeojsonFeatures(props.data);
      const wrapFeature = this.getSubLayerRow.bind(this);
      let newFeatures = {};
      const featuresDiff = {};
      if (Array.isArray(changeFlags.dataChanged)) {
        const oldFeatures = this.state.features;
        for (const key in oldFeatures) {
          newFeatures[key] = oldFeatures[key].slice();
          featuresDiff[key] = [];
        }
        for (const dataRange of changeFlags.dataChanged) {
          const partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);
          for (const key in oldFeatures) {
            featuresDiff[key].push(
              replaceInRange({
                data: newFeatures[key],
                getIndex: (f6) => f6.__source.index,
                dataRange,
                replace: partialFeatures[key]
              })
            );
          }
        }
      } else {
        newFeatures = separateGeojsonFeatures(features, wrapFeature);
      }
      const layerProps = createLayerPropsFromFeatures(newFeatures, featuresDiff);
      this.setState({
        features: newFeatures,
        featuresDiff,
        layerProps
      });
    }
    getPickingInfo(params) {
      const info = super.getPickingInfo(params);
      const { index, sourceLayer } = info;
      info.featureType = FEATURE_TYPES.find((ft2) => sourceLayer.id.startsWith(`${this.id}-${ft2}-`));
      if (index >= 0 && sourceLayer.id.startsWith(`${this.id}-points-text`) && this.state.binary) {
        info.index = this.props.data.points.globalFeatureIds.value[index];
      }
      return info;
    }
    _updateAutoHighlight(info) {
      const pointLayerIdPrefix = `${this.id}-points-`;
      const sourceIsPoints = info.featureType === "points";
      for (const layer of this.getSubLayers()) {
        if (layer.id.startsWith(pointLayerIdPrefix) === sourceIsPoints) {
          layer.updateAutoHighlight(info);
        }
      }
    }
    _renderPolygonLayer() {
      const { extruded, wireframe } = this.props;
      const { layerProps } = this.state;
      const id = "polygons-fill";
      const PolygonFillLayer = this.shouldRenderSubLayer(id, layerProps.polygons?.data) && this.getSubLayerClass(id, POLYGON_LAYER.type);
      if (PolygonFillLayer) {
        const forwardedProps = forwardProps(this, POLYGON_LAYER.props);
        const useLineColor = extruded && wireframe;
        if (!useLineColor) {
          delete forwardedProps.getLineColor;
        }
        forwardedProps.updateTriggers.lineColors = useLineColor;
        return new PolygonFillLayer(
          forwardedProps,
          this.getSubLayerProps({
            id,
            updateTriggers: forwardedProps.updateTriggers
          }),
          layerProps.polygons
        );
      }
      return null;
    }
    _renderLineLayers() {
      const { extruded, stroked } = this.props;
      const { layerProps } = this.state;
      const polygonStrokeLayerId = "polygons-stroke";
      const lineStringsLayerId = "linestrings";
      const PolygonStrokeLayer = !extruded && stroked && this.shouldRenderSubLayer(polygonStrokeLayerId, layerProps.polygonsOutline?.data) && this.getSubLayerClass(polygonStrokeLayerId, LINE_LAYER.type);
      const LineStringsLayer = this.shouldRenderSubLayer(lineStringsLayerId, layerProps.lines?.data) && this.getSubLayerClass(lineStringsLayerId, LINE_LAYER.type);
      if (PolygonStrokeLayer || LineStringsLayer) {
        const forwardedProps = forwardProps(this, LINE_LAYER.props);
        return [
          PolygonStrokeLayer && new PolygonStrokeLayer(
            forwardedProps,
            this.getSubLayerProps({
              id: polygonStrokeLayerId,
              updateTriggers: forwardedProps.updateTriggers
            }),
            layerProps.polygonsOutline
          ),
          LineStringsLayer && new LineStringsLayer(
            forwardedProps,
            this.getSubLayerProps({
              id: lineStringsLayerId,
              updateTriggers: forwardedProps.updateTriggers
            }),
            layerProps.lines
          )
        ];
      }
      return null;
    }
    _renderPointLayers() {
      const { pointType } = this.props;
      const { layerProps, binary } = this.state;
      let { highlightedObjectIndex } = this.props;
      if (!binary && Number.isFinite(highlightedObjectIndex)) {
        highlightedObjectIndex = layerProps.points.data.findIndex(
          (d5) => d5.__source.index === highlightedObjectIndex
        );
      }
      const types = new Set(pointType.split("+"));
      const pointLayers = [];
      for (const type of types) {
        const id = `points-${type}`;
        const PointLayerMapping = POINT_LAYER[type];
        const PointsLayer = PointLayerMapping && this.shouldRenderSubLayer(id, layerProps.points?.data) && this.getSubLayerClass(id, PointLayerMapping.type);
        if (PointsLayer) {
          const forwardedProps = forwardProps(this, PointLayerMapping.props);
          let pointsLayerProps = layerProps.points;
          if (type === "text" && binary) {
            const { instancePickingColors, ...rest } = pointsLayerProps.data.attributes;
            pointsLayerProps = {
              ...pointsLayerProps,
              // @ts-expect-error TODO - type binary data
              data: { ...pointsLayerProps.data, attributes: rest }
            };
          }
          pointLayers.push(
            new PointsLayer(
              forwardedProps,
              this.getSubLayerProps({
                id,
                updateTriggers: forwardedProps.updateTriggers,
                highlightedObjectIndex
              }),
              pointsLayerProps
            )
          );
        }
      }
      return pointLayers;
    }
    renderLayers() {
      const { extruded } = this.props;
      const polygonFillLayer = this._renderPolygonLayer();
      const lineLayers = this._renderLineLayers();
      const pointLayers = this._renderPointLayers();
      return [
        // If not extruded: flat fill layer is drawn below outlines
        !extruded && polygonFillLayer,
        lineLayers,
        pointLayers,
        // If extruded: draw fill layer last for correct blending behavior
        extruded && polygonFillLayer
      ];
    }
    getSubLayerAccessor(accessor) {
      const { binary } = this.state;
      if (!binary || typeof accessor !== "function") {
        return super.getSubLayerAccessor(accessor);
      }
      return (object, info) => {
        const { data, index } = info;
        const feature = binaryToFeatureForAccesor(data, index);
        return accessor(feature, info);
      };
    }
  };
  GeoJsonLayer.layerName = "GeoJsonLayer";
  GeoJsonLayer.defaultProps = defaultProps17;

  // ../geo-layers/src/geo-cell-layer/GeoCellLayer.ts
  var defaultProps18 = {
    ...PolygonLayer.defaultProps
  };
  var GeoCellLayer = class extends CompositeLayer {
    /** Implement to generate props to create geometry. */
    indexToBounds() {
      return null;
    }
    renderLayers() {
      const {
        elevationScale,
        extruded,
        wireframe,
        filled,
        stroked,
        lineWidthUnits,
        lineWidthScale,
        lineWidthMinPixels,
        lineWidthMaxPixels,
        lineJointRounded,
        lineMiterLimit,
        lineDashJustified,
        getElevation,
        getFillColor,
        getLineColor,
        getLineWidth
      } = this.props;
      const { updateTriggers, material, transitions } = this.props;
      const CellLayer = this.getSubLayerClass("cell", PolygonLayer);
      const { updateTriggers: boundsUpdateTriggers, ...boundsProps } = this.indexToBounds() || {};
      return new CellLayer(
        {
          filled,
          wireframe,
          extruded,
          elevationScale,
          stroked,
          lineWidthUnits,
          lineWidthScale,
          lineWidthMinPixels,
          lineWidthMaxPixels,
          lineJointRounded,
          lineMiterLimit,
          lineDashJustified,
          material,
          transitions,
          getElevation,
          getFillColor,
          getLineColor,
          getLineWidth
        },
        this.getSubLayerProps({
          id: "cell",
          updateTriggers: updateTriggers && {
            ...boundsUpdateTriggers,
            getElevation: updateTriggers.getElevation,
            getFillColor: updateTriggers.getFillColor,
            getLineColor: updateTriggers.getLineColor,
            getLineWidth: updateTriggers.getLineWidth
          }
        }),
        boundsProps
      );
    }
  };
  GeoCellLayer.layerName = "GeoCellLayer";
  GeoCellLayer.defaultProps = defaultProps18;

  // ../../node_modules/a5-js/dist/a5.js
  var __defProp2 = Object.defineProperty;
  var __export2 = (target2, all) => {
    for (var name13 in all)
      __defProp2(target2, name13, { get: all[name13], enumerable: true });
  };
  var common_exports2 = {};
  __export2(common_exports2, {
    ARRAY_TYPE: () => ARRAY_TYPE2,
    EPSILON: () => EPSILON24,
    RANDOM: () => RANDOM2,
    equals: () => equals6,
    setMatrixArrayType: () => setMatrixArrayType,
    toRadian: () => toRadian
  });
  var EPSILON24 = 1e-6;
  var ARRAY_TYPE2 = typeof Float32Array !== "undefined" ? Float32Array : Array;
  var RANDOM2 = Math.random;
  function setMatrixArrayType(type) {
    ARRAY_TYPE2 = type;
  }
  var degree2 = Math.PI / 180;
  function toRadian(a22) {
    return a22 * degree2;
  }
  function equals6(a22, b22) {
    return Math.abs(a22 - b22) <= EPSILON24 * Math.max(1, Math.abs(a22), Math.abs(b22));
  }
  if (!Math.hypot)
    Math.hypot = function() {
      var y5 = 0, i7 = arguments.length;
      while (i7--) {
        y5 += arguments[i7] * arguments[i7];
      }
      return Math.sqrt(y5);
    };
  var mat2_exports = {};
  __export2(mat2_exports, {
    LDU: () => LDU,
    add: () => add7,
    adjoint: () => adjoint2,
    clone: () => clone6,
    copy: () => copy6,
    create: () => create7,
    determinant: () => determinant3,
    equals: () => equals22,
    exactEquals: () => exactEquals6,
    frob: () => frob2,
    fromRotation: () => fromRotation2,
    fromScaling: () => fromScaling2,
    fromValues: () => fromValues5,
    identity: () => identity3,
    invert: () => invert4,
    mul: () => mul5,
    multiply: () => multiply7,
    multiplyScalar: () => multiplyScalar2,
    multiplyScalarAndAdd: () => multiplyScalarAndAdd2,
    rotate: () => rotate4,
    scale: () => scale7,
    set: () => set5,
    str: () => str5,
    sub: () => sub5,
    subtract: () => subtract5,
    transpose: () => transpose3
  });
  function create7() {
    var out = new ARRAY_TYPE2(4);
    if (ARRAY_TYPE2 != Float32Array) {
      out[1] = 0;
      out[2] = 0;
    }
    out[0] = 1;
    out[3] = 1;
    return out;
  }
  function clone6(a22) {
    var out = new ARRAY_TYPE2(4);
    out[0] = a22[0];
    out[1] = a22[1];
    out[2] = a22[2];
    out[3] = a22[3];
    return out;
  }
  function copy6(out, a22) {
    out[0] = a22[0];
    out[1] = a22[1];
    out[2] = a22[2];
    out[3] = a22[3];
    return out;
  }
  function identity3(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
  }
  function fromValues5(m00, m01, m10, m11) {
    var out = new ARRAY_TYPE2(4);
    out[0] = m00;
    out[1] = m01;
    out[2] = m10;
    out[3] = m11;
    return out;
  }
  function set5(out, m00, m01, m10, m11) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m10;
    out[3] = m11;
    return out;
  }
  function transpose3(out, a22) {
    if (out === a22) {
      var a1 = a22[1];
      out[1] = a22[2];
      out[2] = a1;
    } else {
      out[0] = a22[0];
      out[1] = a22[2];
      out[2] = a22[1];
      out[3] = a22[3];
    }
    return out;
  }
  function invert4(out, a22) {
    var a0 = a22[0], a1 = a22[1], a222 = a22[2], a32 = a22[3];
    var det = a0 * a32 - a222 * a1;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = a32 * det;
    out[1] = -a1 * det;
    out[2] = -a222 * det;
    out[3] = a0 * det;
    return out;
  }
  function adjoint2(out, a22) {
    var a0 = a22[0];
    out[0] = a22[3];
    out[1] = -a22[1];
    out[2] = -a22[2];
    out[3] = a0;
    return out;
  }
  function determinant3(a22) {
    return a22[0] * a22[3] - a22[2] * a22[1];
  }
  function multiply7(out, a22, b22) {
    var a0 = a22[0], a1 = a22[1], a222 = a22[2], a32 = a22[3];
    var b0 = b22[0], b1 = b22[1], b222 = b22[2], b32 = b22[3];
    out[0] = a0 * b0 + a222 * b1;
    out[1] = a1 * b0 + a32 * b1;
    out[2] = a0 * b222 + a222 * b32;
    out[3] = a1 * b222 + a32 * b32;
    return out;
  }
  function rotate4(out, a22, rad) {
    var a0 = a22[0], a1 = a22[1], a222 = a22[2], a32 = a22[3];
    var s5 = Math.sin(rad);
    var c22 = Math.cos(rad);
    out[0] = a0 * c22 + a222 * s5;
    out[1] = a1 * c22 + a32 * s5;
    out[2] = a0 * -s5 + a222 * c22;
    out[3] = a1 * -s5 + a32 * c22;
    return out;
  }
  function scale7(out, a22, v22) {
    var a0 = a22[0], a1 = a22[1], a222 = a22[2], a32 = a22[3];
    var v0 = v22[0], v1 = v22[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a222 * v1;
    out[3] = a32 * v1;
    return out;
  }
  function fromRotation2(out, rad) {
    var s5 = Math.sin(rad);
    var c22 = Math.cos(rad);
    out[0] = c22;
    out[1] = s5;
    out[2] = -s5;
    out[3] = c22;
    return out;
  }
  function fromScaling2(out, v22) {
    out[0] = v22[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = v22[1];
    return out;
  }
  function str5(a22) {
    return "mat2(" + a22[0] + ", " + a22[1] + ", " + a22[2] + ", " + a22[3] + ")";
  }
  function frob2(a22) {
    return Math.hypot(a22[0], a22[1], a22[2], a22[3]);
  }
  function LDU(L22, D22, U2, a22) {
    L22[2] = a22[2] / a22[0];
    U2[0] = a22[0];
    U2[1] = a22[1];
    U2[3] = a22[3] - L22[2] * U2[1];
    return [L22, D22, U2];
  }
  function add7(out, a22, b22) {
    out[0] = a22[0] + b22[0];
    out[1] = a22[1] + b22[1];
    out[2] = a22[2] + b22[2];
    out[3] = a22[3] + b22[3];
    return out;
  }
  function subtract5(out, a22, b22) {
    out[0] = a22[0] - b22[0];
    out[1] = a22[1] - b22[1];
    out[2] = a22[2] - b22[2];
    out[3] = a22[3] - b22[3];
    return out;
  }
  function exactEquals6(a22, b22) {
    return a22[0] === b22[0] && a22[1] === b22[1] && a22[2] === b22[2] && a22[3] === b22[3];
  }
  function equals22(a22, b22) {
    var a0 = a22[0], a1 = a22[1], a222 = a22[2], a32 = a22[3];
    var b0 = b22[0], b1 = b22[1], b222 = b22[2], b32 = b22[3];
    return Math.abs(a0 - b0) <= EPSILON24 * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON24 * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a222 - b222) <= EPSILON24 * Math.max(1, Math.abs(a222), Math.abs(b222)) && Math.abs(a32 - b32) <= EPSILON24 * Math.max(1, Math.abs(a32), Math.abs(b32));
  }
  function multiplyScalar2(out, a22, b22) {
    out[0] = a22[0] * b22;
    out[1] = a22[1] * b22;
    out[2] = a22[2] * b22;
    out[3] = a22[3] * b22;
    return out;
  }
  function multiplyScalarAndAdd2(out, a22, b22, scale72) {
    out[0] = a22[0] + b22[0] * scale72;
    out[1] = a22[1] + b22[1] * scale72;
    out[2] = a22[2] + b22[2] * scale72;
    out[3] = a22[3] + b22[3] * scale72;
    return out;
  }
  var mul5 = multiply7;
  var sub5 = subtract5;
  function create22() {
    var out = new ARRAY_TYPE2(9);
    if (ARRAY_TYPE2 != Float32Array) {
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[5] = 0;
      out[6] = 0;
      out[7] = 0;
    }
    out[0] = 1;
    out[4] = 1;
    out[8] = 1;
    return out;
  }
  var quat_exports = {};
  __export2(quat_exports, {
    add: () => add42,
    calculateW: () => calculateW2,
    clone: () => clone42,
    conjugate: () => conjugate2,
    copy: () => copy42,
    create: () => create52,
    dot: () => dot32,
    equals: () => equals52,
    exactEquals: () => exactEquals42,
    exp: () => exp,
    fromEuler: () => fromEuler,
    fromMat3: () => fromMat32,
    fromValues: () => fromValues42,
    getAngle: () => getAngle,
    getAxisAngle: () => getAxisAngle,
    identity: () => identity22,
    invert: () => invert22,
    len: () => len22,
    length: () => length32,
    lerp: () => lerp32,
    ln: () => ln,
    mul: () => mul32,
    multiply: () => multiply32,
    normalize: () => normalize32,
    pow: () => pow,
    random: () => random22,
    rotateX: () => rotateX22,
    rotateY: () => rotateY22,
    rotateZ: () => rotateZ22,
    rotationTo: () => rotationTo2,
    scale: () => scale42,
    set: () => set42,
    setAxes: () => setAxes2,
    setAxisAngle: () => setAxisAngle2,
    slerp: () => slerp3,
    sqlerp: () => sqlerp2,
    sqrLen: () => sqrLen22,
    squaredLength: () => squaredLength32,
    str: () => str32
  });
  var vec3_exports2 = {};
  __export2(vec3_exports2, {
    add: () => add22,
    angle: () => angle3,
    bezier: () => bezier2,
    ceil: () => ceil4,
    clone: () => clone22,
    copy: () => copy22,
    create: () => create32,
    cross: () => cross4,
    dist: () => dist4,
    distance: () => distance5,
    div: () => div4,
    divide: () => divide4,
    dot: () => dot5,
    equals: () => equals32,
    exactEquals: () => exactEquals22,
    floor: () => floor4,
    forEach: () => forEach5,
    fromValues: () => fromValues22,
    hermite: () => hermite2,
    inverse: () => inverse4,
    len: () => len4,
    length: () => length5,
    lerp: () => lerp7,
    max: () => max4,
    min: () => min4,
    mul: () => mul22,
    multiply: () => multiply22,
    negate: () => negate4,
    normalize: () => normalize6,
    random: () => random4,
    rotateX: () => rotateX4,
    rotateY: () => rotateY4,
    rotateZ: () => rotateZ4,
    round: () => round6,
    scale: () => scale22,
    scaleAndAdd: () => scaleAndAdd4,
    set: () => set22,
    sqrDist: () => sqrDist4,
    sqrLen: () => sqrLen4,
    squaredDistance: () => squaredDistance4,
    squaredLength: () => squaredLength5,
    str: () => str22,
    sub: () => sub22,
    subtract: () => subtract22,
    transformMat3: () => transformMat33,
    transformMat4: () => transformMat44,
    transformQuat: () => transformQuat3,
    zero: () => zero4
  });
  function create32() {
    var out = new ARRAY_TYPE2(3);
    if (ARRAY_TYPE2 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }
    return out;
  }
  function clone22(a22) {
    var out = new ARRAY_TYPE2(3);
    out[0] = a22[0];
    out[1] = a22[1];
    out[2] = a22[2];
    return out;
  }
  function length5(a22) {
    var x4 = a22[0];
    var y5 = a22[1];
    var z4 = a22[2];
    return Math.hypot(x4, y5, z4);
  }
  function fromValues22(x4, y5, z4) {
    var out = new ARRAY_TYPE2(3);
    out[0] = x4;
    out[1] = y5;
    out[2] = z4;
    return out;
  }
  function copy22(out, a22) {
    out[0] = a22[0];
    out[1] = a22[1];
    out[2] = a22[2];
    return out;
  }
  function set22(out, x4, y5, z4) {
    out[0] = x4;
    out[1] = y5;
    out[2] = z4;
    return out;
  }
  function add22(out, a22, b22) {
    out[0] = a22[0] + b22[0];
    out[1] = a22[1] + b22[1];
    out[2] = a22[2] + b22[2];
    return out;
  }
  function subtract22(out, a22, b22) {
    out[0] = a22[0] - b22[0];
    out[1] = a22[1] - b22[1];
    out[2] = a22[2] - b22[2];
    return out;
  }
  function multiply22(out, a22, b22) {
    out[0] = a22[0] * b22[0];
    out[1] = a22[1] * b22[1];
    out[2] = a22[2] * b22[2];
    return out;
  }
  function divide4(out, a22, b22) {
    out[0] = a22[0] / b22[0];
    out[1] = a22[1] / b22[1];
    out[2] = a22[2] / b22[2];
    return out;
  }
  function ceil4(out, a22) {
    out[0] = Math.ceil(a22[0]);
    out[1] = Math.ceil(a22[1]);
    out[2] = Math.ceil(a22[2]);
    return out;
  }
  function floor4(out, a22) {
    out[0] = Math.floor(a22[0]);
    out[1] = Math.floor(a22[1]);
    out[2] = Math.floor(a22[2]);
    return out;
  }
  function min4(out, a22, b22) {
    out[0] = Math.min(a22[0], b22[0]);
    out[1] = Math.min(a22[1], b22[1]);
    out[2] = Math.min(a22[2], b22[2]);
    return out;
  }
  function max4(out, a22, b22) {
    out[0] = Math.max(a22[0], b22[0]);
    out[1] = Math.max(a22[1], b22[1]);
    out[2] = Math.max(a22[2], b22[2]);
    return out;
  }
  function round6(out, a22) {
    out[0] = Math.round(a22[0]);
    out[1] = Math.round(a22[1]);
    out[2] = Math.round(a22[2]);
    return out;
  }
  function scale22(out, a22, b22) {
    out[0] = a22[0] * b22;
    out[1] = a22[1] * b22;
    out[2] = a22[2] * b22;
    return out;
  }
  function scaleAndAdd4(out, a22, b22, scale72) {
    out[0] = a22[0] + b22[0] * scale72;
    out[1] = a22[1] + b22[1] * scale72;
    out[2] = a22[2] + b22[2] * scale72;
    return out;
  }
  function distance5(a22, b22) {
    var x4 = b22[0] - a22[0];
    var y5 = b22[1] - a22[1];
    var z4 = b22[2] - a22[2];
    return Math.hypot(x4, y5, z4);
  }
  function squaredDistance4(a22, b22) {
    var x4 = b22[0] - a22[0];
    var y5 = b22[1] - a22[1];
    var z4 = b22[2] - a22[2];
    return x4 * x4 + y5 * y5 + z4 * z4;
  }
  function squaredLength5(a22) {
    var x4 = a22[0];
    var y5 = a22[1];
    var z4 = a22[2];
    return x4 * x4 + y5 * y5 + z4 * z4;
  }
  function negate4(out, a22) {
    out[0] = -a22[0];
    out[1] = -a22[1];
    out[2] = -a22[2];
    return out;
  }
  function inverse4(out, a22) {
    out[0] = 1 / a22[0];
    out[1] = 1 / a22[1];
    out[2] = 1 / a22[2];
    return out;
  }
  function normalize6(out, a22) {
    var x4 = a22[0];
    var y5 = a22[1];
    var z4 = a22[2];
    var len42 = x4 * x4 + y5 * y5 + z4 * z4;
    if (len42 > 0) {
      len42 = 1 / Math.sqrt(len42);
    }
    out[0] = a22[0] * len42;
    out[1] = a22[1] * len42;
    out[2] = a22[2] * len42;
    return out;
  }
  function dot5(a22, b22) {
    return a22[0] * b22[0] + a22[1] * b22[1] + a22[2] * b22[2];
  }
  function cross4(out, a22, b22) {
    var ax = a22[0], ay = a22[1], az = a22[2];
    var bx = b22[0], by = b22[1], bz = b22[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
  }
  function lerp7(out, a22, b22, t5) {
    var ax = a22[0];
    var ay = a22[1];
    var az = a22[2];
    out[0] = ax + t5 * (b22[0] - ax);
    out[1] = ay + t5 * (b22[1] - ay);
    out[2] = az + t5 * (b22[2] - az);
    return out;
  }
  function hermite2(out, a22, b22, c22, d22, t5) {
    var factorTimes2 = t5 * t5;
    var factor1 = factorTimes2 * (2 * t5 - 3) + 1;
    var factor2 = factorTimes2 * (t5 - 2) + t5;
    var factor3 = factorTimes2 * (t5 - 1);
    var factor4 = factorTimes2 * (3 - 2 * t5);
    out[0] = a22[0] * factor1 + b22[0] * factor2 + c22[0] * factor3 + d22[0] * factor4;
    out[1] = a22[1] * factor1 + b22[1] * factor2 + c22[1] * factor3 + d22[1] * factor4;
    out[2] = a22[2] * factor1 + b22[2] * factor2 + c22[2] * factor3 + d22[2] * factor4;
    return out;
  }
  function bezier2(out, a22, b22, c22, d22, t5) {
    var inverseFactor = 1 - t5;
    var inverseFactorTimesTwo = inverseFactor * inverseFactor;
    var factorTimes2 = t5 * t5;
    var factor1 = inverseFactorTimesTwo * inverseFactor;
    var factor2 = 3 * t5 * inverseFactorTimesTwo;
    var factor3 = 3 * factorTimes2 * inverseFactor;
    var factor4 = factorTimes2 * t5;
    out[0] = a22[0] * factor1 + b22[0] * factor2 + c22[0] * factor3 + d22[0] * factor4;
    out[1] = a22[1] * factor1 + b22[1] * factor2 + c22[1] * factor3 + d22[1] * factor4;
    out[2] = a22[2] * factor1 + b22[2] * factor2 + c22[2] * factor3 + d22[2] * factor4;
    return out;
  }
  function random4(out, scale72) {
    scale72 = scale72 || 1;
    var r5 = RANDOM2() * 2 * Math.PI;
    var z4 = RANDOM2() * 2 - 1;
    var zScale = Math.sqrt(1 - z4 * z4) * scale72;
    out[0] = Math.cos(r5) * zScale;
    out[1] = Math.sin(r5) * zScale;
    out[2] = z4 * scale72;
    return out;
  }
  function transformMat44(out, a22, m3) {
    var x4 = a22[0], y5 = a22[1], z4 = a22[2];
    var w22 = m3[3] * x4 + m3[7] * y5 + m3[11] * z4 + m3[15];
    w22 = w22 || 1;
    out[0] = (m3[0] * x4 + m3[4] * y5 + m3[8] * z4 + m3[12]) / w22;
    out[1] = (m3[1] * x4 + m3[5] * y5 + m3[9] * z4 + m3[13]) / w22;
    out[2] = (m3[2] * x4 + m3[6] * y5 + m3[10] * z4 + m3[14]) / w22;
    return out;
  }
  function transformMat33(out, a22, m3) {
    var x4 = a22[0], y5 = a22[1], z4 = a22[2];
    out[0] = x4 * m3[0] + y5 * m3[3] + z4 * m3[6];
    out[1] = x4 * m3[1] + y5 * m3[4] + z4 * m3[7];
    out[2] = x4 * m3[2] + y5 * m3[5] + z4 * m3[8];
    return out;
  }
  function transformQuat3(out, a22, q3) {
    var qx = q3[0], qy = q3[1], qz = q3[2], qw = q3[3];
    var x4 = a22[0], y5 = a22[1], z4 = a22[2];
    var uvx = qy * z4 - qz * y5, uvy = qz * x4 - qx * z4, uvz = qx * y5 - qy * x4;
    var uuvx = qy * uvz - qz * uvy, uuvy = qz * uvx - qx * uvz, uuvz = qx * uvy - qy * uvx;
    var w22 = qw * 2;
    uvx *= w22;
    uvy *= w22;
    uvz *= w22;
    uuvx *= 2;
    uuvy *= 2;
    uuvz *= 2;
    out[0] = x4 + uvx + uuvx;
    out[1] = y5 + uvy + uuvy;
    out[2] = z4 + uvz + uuvz;
    return out;
  }
  function rotateX4(out, a22, b22, rad) {
    var p5 = [], r5 = [];
    p5[0] = a22[0] - b22[0];
    p5[1] = a22[1] - b22[1];
    p5[2] = a22[2] - b22[2];
    r5[0] = p5[0];
    r5[1] = p5[1] * Math.cos(rad) - p5[2] * Math.sin(rad);
    r5[2] = p5[1] * Math.sin(rad) + p5[2] * Math.cos(rad);
    out[0] = r5[0] + b22[0];
    out[1] = r5[1] + b22[1];
    out[2] = r5[2] + b22[2];
    return out;
  }
  function rotateY4(out, a22, b22, rad) {
    var p5 = [], r5 = [];
    p5[0] = a22[0] - b22[0];
    p5[1] = a22[1] - b22[1];
    p5[2] = a22[2] - b22[2];
    r5[0] = p5[2] * Math.sin(rad) + p5[0] * Math.cos(rad);
    r5[1] = p5[1];
    r5[2] = p5[2] * Math.cos(rad) - p5[0] * Math.sin(rad);
    out[0] = r5[0] + b22[0];
    out[1] = r5[1] + b22[1];
    out[2] = r5[2] + b22[2];
    return out;
  }
  function rotateZ4(out, a22, b22, rad) {
    var p5 = [], r5 = [];
    p5[0] = a22[0] - b22[0];
    p5[1] = a22[1] - b22[1];
    p5[2] = a22[2] - b22[2];
    r5[0] = p5[0] * Math.cos(rad) - p5[1] * Math.sin(rad);
    r5[1] = p5[0] * Math.sin(rad) + p5[1] * Math.cos(rad);
    r5[2] = p5[2];
    out[0] = r5[0] + b22[0];
    out[1] = r5[1] + b22[1];
    out[2] = r5[2] + b22[2];
    return out;
  }
  function angle3(a22, b22) {
    var ax = a22[0], ay = a22[1], az = a22[2], bx = b22[0], by = b22[1], bz = b22[2], mag1 = Math.sqrt(ax * ax + ay * ay + az * az), mag2 = Math.sqrt(bx * bx + by * by + bz * bz), mag = mag1 * mag2, cosine = mag && dot5(a22, b22) / mag;
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
  }
  function zero4(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    return out;
  }
  function str22(a22) {
    return "vec3(" + a22[0] + ", " + a22[1] + ", " + a22[2] + ")";
  }
  function exactEquals22(a22, b22) {
    return a22[0] === b22[0] && a22[1] === b22[1] && a22[2] === b22[2];
  }
  function equals32(a22, b22) {
    var a0 = a22[0], a1 = a22[1], a222 = a22[2];
    var b0 = b22[0], b1 = b22[1], b222 = b22[2];
    return Math.abs(a0 - b0) <= EPSILON24 * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON24 * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a222 - b222) <= EPSILON24 * Math.max(1, Math.abs(a222), Math.abs(b222));
  }
  var sub22 = subtract22;
  var mul22 = multiply22;
  var div4 = divide4;
  var dist4 = distance5;
  var sqrDist4 = squaredDistance4;
  var len4 = length5;
  var sqrLen4 = squaredLength5;
  var forEach5 = function() {
    var vec = create32();
    return function(a22, stride, offset, count3, fn, arg) {
      var i7, l5;
      if (!stride) {
        stride = 3;
      }
      if (!offset) {
        offset = 0;
      }
      if (count3) {
        l5 = Math.min(count3 * stride + offset, a22.length);
      } else {
        l5 = a22.length;
      }
      for (i7 = offset; i7 < l5; i7 += stride) {
        vec[0] = a22[i7];
        vec[1] = a22[i7 + 1];
        vec[2] = a22[i7 + 2];
        fn(vec, vec, arg);
        a22[i7] = vec[0];
        a22[i7 + 1] = vec[1];
        a22[i7 + 2] = vec[2];
      }
      return a22;
    };
  }();
  function create42() {
    var out = new ARRAY_TYPE2(4);
    if (ARRAY_TYPE2 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
    }
    return out;
  }
  function clone32(a22) {
    var out = new ARRAY_TYPE2(4);
    out[0] = a22[0];
    out[1] = a22[1];
    out[2] = a22[2];
    out[3] = a22[3];
    return out;
  }
  function fromValues32(x4, y5, z4, w22) {
    var out = new ARRAY_TYPE2(4);
    out[0] = x4;
    out[1] = y5;
    out[2] = z4;
    out[3] = w22;
    return out;
  }
  function copy32(out, a22) {
    out[0] = a22[0];
    out[1] = a22[1];
    out[2] = a22[2];
    out[3] = a22[3];
    return out;
  }
  function set32(out, x4, y5, z4, w22) {
    out[0] = x4;
    out[1] = y5;
    out[2] = z4;
    out[3] = w22;
    return out;
  }
  function add32(out, a22, b22) {
    out[0] = a22[0] + b22[0];
    out[1] = a22[1] + b22[1];
    out[2] = a22[2] + b22[2];
    out[3] = a22[3] + b22[3];
    return out;
  }
  function scale32(out, a22, b22) {
    out[0] = a22[0] * b22;
    out[1] = a22[1] * b22;
    out[2] = a22[2] * b22;
    out[3] = a22[3] * b22;
    return out;
  }
  function length22(a22) {
    var x4 = a22[0];
    var y5 = a22[1];
    var z4 = a22[2];
    var w22 = a22[3];
    return Math.hypot(x4, y5, z4, w22);
  }
  function squaredLength22(a22) {
    var x4 = a22[0];
    var y5 = a22[1];
    var z4 = a22[2];
    var w22 = a22[3];
    return x4 * x4 + y5 * y5 + z4 * z4 + w22 * w22;
  }
  function normalize22(out, a22) {
    var x4 = a22[0];
    var y5 = a22[1];
    var z4 = a22[2];
    var w22 = a22[3];
    var len42 = x4 * x4 + y5 * y5 + z4 * z4 + w22 * w22;
    if (len42 > 0) {
      len42 = 1 / Math.sqrt(len42);
    }
    out[0] = x4 * len42;
    out[1] = y5 * len42;
    out[2] = z4 * len42;
    out[3] = w22 * len42;
    return out;
  }
  function dot22(a22, b22) {
    return a22[0] * b22[0] + a22[1] * b22[1] + a22[2] * b22[2] + a22[3] * b22[3];
  }
  function lerp22(out, a22, b22, t5) {
    var ax = a22[0];
    var ay = a22[1];
    var az = a22[2];
    var aw = a22[3];
    out[0] = ax + t5 * (b22[0] - ax);
    out[1] = ay + t5 * (b22[1] - ay);
    out[2] = az + t5 * (b22[2] - az);
    out[3] = aw + t5 * (b22[3] - aw);
    return out;
  }
  function exactEquals32(a22, b22) {
    return a22[0] === b22[0] && a22[1] === b22[1] && a22[2] === b22[2] && a22[3] === b22[3];
  }
  function equals42(a22, b22) {
    var a0 = a22[0], a1 = a22[1], a222 = a22[2], a32 = a22[3];
    var b0 = b22[0], b1 = b22[1], b222 = b22[2], b32 = b22[3];
    return Math.abs(a0 - b0) <= EPSILON24 * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON24 * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a222 - b222) <= EPSILON24 * Math.max(1, Math.abs(a222), Math.abs(b222)) && Math.abs(a32 - b32) <= EPSILON24 * Math.max(1, Math.abs(a32), Math.abs(b32));
  }
  var forEach22 = function() {
    var vec = create42();
    return function(a22, stride, offset, count3, fn, arg) {
      var i7, l5;
      if (!stride) {
        stride = 4;
      }
      if (!offset) {
        offset = 0;
      }
      if (count3) {
        l5 = Math.min(count3 * stride + offset, a22.length);
      } else {
        l5 = a22.length;
      }
      for (i7 = offset; i7 < l5; i7 += stride) {
        vec[0] = a22[i7];
        vec[1] = a22[i7 + 1];
        vec[2] = a22[i7 + 2];
        vec[3] = a22[i7 + 3];
        fn(vec, vec, arg);
        a22[i7] = vec[0];
        a22[i7 + 1] = vec[1];
        a22[i7 + 2] = vec[2];
        a22[i7 + 3] = vec[3];
      }
      return a22;
    };
  }();
  function create52() {
    var out = new ARRAY_TYPE2(4);
    if (ARRAY_TYPE2 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }
    out[3] = 1;
    return out;
  }
  function identity22(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
  }
  function setAxisAngle2(out, axis, rad) {
    rad = rad * 0.5;
    var s5 = Math.sin(rad);
    out[0] = s5 * axis[0];
    out[1] = s5 * axis[1];
    out[2] = s5 * axis[2];
    out[3] = Math.cos(rad);
    return out;
  }
  function getAxisAngle(out_axis, q3) {
    var rad = Math.acos(q3[3]) * 2;
    var s5 = Math.sin(rad / 2);
    if (s5 > EPSILON24) {
      out_axis[0] = q3[0] / s5;
      out_axis[1] = q3[1] / s5;
      out_axis[2] = q3[2] / s5;
    } else {
      out_axis[0] = 1;
      out_axis[1] = 0;
      out_axis[2] = 0;
    }
    return rad;
  }
  function getAngle(a22, b22) {
    var dotproduct = dot32(a22, b22);
    return Math.acos(2 * dotproduct * dotproduct - 1);
  }
  function multiply32(out, a22, b22) {
    var ax = a22[0], ay = a22[1], az = a22[2], aw = a22[3];
    var bx = b22[0], by = b22[1], bz = b22[2], bw = b22[3];
    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
  }
  function rotateX22(out, a22, rad) {
    rad *= 0.5;
    var ax = a22[0], ay = a22[1], az = a22[2], aw = a22[3];
    var bx = Math.sin(rad), bw = Math.cos(rad);
    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
  }
  function rotateY22(out, a22, rad) {
    rad *= 0.5;
    var ax = a22[0], ay = a22[1], az = a22[2], aw = a22[3];
    var by = Math.sin(rad), bw = Math.cos(rad);
    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
  }
  function rotateZ22(out, a22, rad) {
    rad *= 0.5;
    var ax = a22[0], ay = a22[1], az = a22[2], aw = a22[3];
    var bz = Math.sin(rad), bw = Math.cos(rad);
    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
  }
  function calculateW2(out, a22) {
    var x4 = a22[0], y5 = a22[1], z4 = a22[2];
    out[0] = x4;
    out[1] = y5;
    out[2] = z4;
    out[3] = Math.sqrt(Math.abs(1 - x4 * x4 - y5 * y5 - z4 * z4));
    return out;
  }
  function exp(out, a22) {
    var x4 = a22[0], y5 = a22[1], z4 = a22[2], w22 = a22[3];
    var r5 = Math.sqrt(x4 * x4 + y5 * y5 + z4 * z4);
    var et2 = Math.exp(w22);
    var s5 = r5 > 0 ? et2 * Math.sin(r5) / r5 : 0;
    out[0] = x4 * s5;
    out[1] = y5 * s5;
    out[2] = z4 * s5;
    out[3] = et2 * Math.cos(r5);
    return out;
  }
  function ln(out, a22) {
    var x4 = a22[0], y5 = a22[1], z4 = a22[2], w22 = a22[3];
    var r5 = Math.sqrt(x4 * x4 + y5 * y5 + z4 * z4);
    var t5 = r5 > 0 ? Math.atan2(r5, w22) / r5 : 0;
    out[0] = x4 * t5;
    out[1] = y5 * t5;
    out[2] = z4 * t5;
    out[3] = 0.5 * Math.log(x4 * x4 + y5 * y5 + z4 * z4 + w22 * w22);
    return out;
  }
  function pow(out, a22, b22) {
    ln(out, a22);
    scale42(out, out, b22);
    exp(out, out);
    return out;
  }
  function slerp3(out, a22, b22, t5) {
    var ax = a22[0], ay = a22[1], az = a22[2], aw = a22[3];
    var bx = b22[0], by = b22[1], bz = b22[2], bw = b22[3];
    var omega, cosom, sinom, scale0, scale1;
    cosom = ax * bx + ay * by + az * bz + aw * bw;
    if (cosom < 0) {
      cosom = -cosom;
      bx = -bx;
      by = -by;
      bz = -bz;
      bw = -bw;
    }
    if (1 - cosom > EPSILON24) {
      omega = Math.acos(cosom);
      sinom = Math.sin(omega);
      scale0 = Math.sin((1 - t5) * omega) / sinom;
      scale1 = Math.sin(t5 * omega) / sinom;
    } else {
      scale0 = 1 - t5;
      scale1 = t5;
    }
    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    return out;
  }
  function random22(out) {
    var u1 = RANDOM2();
    var u22 = RANDOM2();
    var u32 = RANDOM2();
    var sqrt1MinusU1 = Math.sqrt(1 - u1);
    var sqrtU1 = Math.sqrt(u1);
    out[0] = sqrt1MinusU1 * Math.sin(2 * Math.PI * u22);
    out[1] = sqrt1MinusU1 * Math.cos(2 * Math.PI * u22);
    out[2] = sqrtU1 * Math.sin(2 * Math.PI * u32);
    out[3] = sqrtU1 * Math.cos(2 * Math.PI * u32);
    return out;
  }
  function invert22(out, a22) {
    var a0 = a22[0], a1 = a22[1], a222 = a22[2], a32 = a22[3];
    var dot52 = a0 * a0 + a1 * a1 + a222 * a222 + a32 * a32;
    var invDot = dot52 ? 1 / dot52 : 0;
    out[0] = -a0 * invDot;
    out[1] = -a1 * invDot;
    out[2] = -a222 * invDot;
    out[3] = a32 * invDot;
    return out;
  }
  function conjugate2(out, a22) {
    out[0] = -a22[0];
    out[1] = -a22[1];
    out[2] = -a22[2];
    out[3] = a22[3];
    return out;
  }
  function fromMat32(out, m3) {
    var fTrace = m3[0] + m3[4] + m3[8];
    var fRoot;
    if (fTrace > 0) {
      fRoot = Math.sqrt(fTrace + 1);
      out[3] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[0] = (m3[5] - m3[7]) * fRoot;
      out[1] = (m3[6] - m3[2]) * fRoot;
      out[2] = (m3[1] - m3[3]) * fRoot;
    } else {
      var i7 = 0;
      if (m3[4] > m3[0])
        i7 = 1;
      if (m3[8] > m3[i7 * 3 + i7])
        i7 = 2;
      var j4 = (i7 + 1) % 3;
      var k4 = (i7 + 2) % 3;
      fRoot = Math.sqrt(m3[i7 * 3 + i7] - m3[j4 * 3 + j4] - m3[k4 * 3 + k4] + 1);
      out[i7] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[3] = (m3[j4 * 3 + k4] - m3[k4 * 3 + j4]) * fRoot;
      out[j4] = (m3[j4 * 3 + i7] + m3[i7 * 3 + j4]) * fRoot;
      out[k4] = (m3[k4 * 3 + i7] + m3[i7 * 3 + k4]) * fRoot;
    }
    return out;
  }
  function fromEuler(out, x4, y5, z4) {
    var halfToRad = 0.5 * Math.PI / 180;
    x4 *= halfToRad;
    y5 *= halfToRad;
    z4 *= halfToRad;
    var sx = Math.sin(x4);
    var cx = Math.cos(x4);
    var sy = Math.sin(y5);
    var cy = Math.cos(y5);
    var sz = Math.sin(z4);
    var cz = Math.cos(z4);
    out[0] = sx * cy * cz - cx * sy * sz;
    out[1] = cx * sy * cz + sx * cy * sz;
    out[2] = cx * cy * sz - sx * sy * cz;
    out[3] = cx * cy * cz + sx * sy * sz;
    return out;
  }
  function str32(a22) {
    return "quat(" + a22[0] + ", " + a22[1] + ", " + a22[2] + ", " + a22[3] + ")";
  }
  var clone42 = clone32;
  var fromValues42 = fromValues32;
  var copy42 = copy32;
  var set42 = set32;
  var add42 = add32;
  var mul32 = multiply32;
  var scale42 = scale32;
  var dot32 = dot22;
  var lerp32 = lerp22;
  var length32 = length22;
  var len22 = length32;
  var squaredLength32 = squaredLength22;
  var sqrLen22 = squaredLength32;
  var normalize32 = normalize22;
  var exactEquals42 = exactEquals32;
  var equals52 = equals42;
  var rotationTo2 = function() {
    var tmpvec3 = create32();
    var xUnitVec3 = fromValues22(1, 0, 0);
    var yUnitVec3 = fromValues22(0, 1, 0);
    return function(out, a22, b22) {
      var dot52 = dot5(a22, b22);
      if (dot52 < -0.999999) {
        cross4(tmpvec3, xUnitVec3, a22);
        if (len4(tmpvec3) < 1e-6)
          cross4(tmpvec3, yUnitVec3, a22);
        normalize6(tmpvec3, tmpvec3);
        setAxisAngle2(out, tmpvec3, Math.PI);
        return out;
      } else if (dot52 > 0.999999) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        return out;
      } else {
        cross4(tmpvec3, a22, b22);
        out[0] = tmpvec3[0];
        out[1] = tmpvec3[1];
        out[2] = tmpvec3[2];
        out[3] = 1 + dot52;
        return normalize32(out, out);
      }
    };
  }();
  var sqlerp2 = function() {
    var temp1 = create52();
    var temp2 = create52();
    return function(out, a22, b22, c22, d22, t5) {
      slerp3(temp1, a22, d22, t5);
      slerp3(temp2, b22, c22, t5);
      slerp3(out, temp1, temp2, 2 * t5 * (1 - t5));
      return out;
    };
  }();
  var setAxes2 = function() {
    var matr = create22();
    return function(out, view, right, up) {
      matr[0] = right[0];
      matr[3] = right[1];
      matr[6] = right[2];
      matr[1] = up[0];
      matr[4] = up[1];
      matr[7] = up[2];
      matr[2] = -view[0];
      matr[5] = -view[1];
      matr[8] = -view[2];
      return normalize32(out, fromMat32(out, matr));
    };
  }();
  var vec2_exports2 = {};
  __export2(vec2_exports2, {
    add: () => add52,
    angle: () => angle22,
    ceil: () => ceil22,
    clone: () => clone52,
    copy: () => copy52,
    create: () => create62,
    cross: () => cross22,
    dist: () => dist22,
    distance: () => distance22,
    div: () => div22,
    divide: () => divide22,
    dot: () => dot42,
    equals: () => equals62,
    exactEquals: () => exactEquals52,
    floor: () => floor22,
    forEach: () => forEach32,
    fromValues: () => fromValues52,
    inverse: () => inverse22,
    len: () => len32,
    length: () => length42,
    lerp: () => lerp42,
    max: () => max22,
    min: () => min22,
    mul: () => mul42,
    multiply: () => multiply42,
    negate: () => negate22,
    normalize: () => normalize42,
    random: () => random32,
    rotate: () => rotate22,
    round: () => round22,
    scale: () => scale52,
    scaleAndAdd: () => scaleAndAdd22,
    set: () => set52,
    sqrDist: () => sqrDist22,
    sqrLen: () => sqrLen32,
    squaredDistance: () => squaredDistance22,
    squaredLength: () => squaredLength42,
    str: () => str42,
    sub: () => sub32,
    subtract: () => subtract32,
    transformMat2: () => transformMat22,
    transformMat2d: () => transformMat2d2,
    transformMat3: () => transformMat322,
    transformMat4: () => transformMat422,
    zero: () => zero22
  });
  function create62() {
    var out = new ARRAY_TYPE2(2);
    if (ARRAY_TYPE2 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
    }
    return out;
  }
  function clone52(a22) {
    var out = new ARRAY_TYPE2(2);
    out[0] = a22[0];
    out[1] = a22[1];
    return out;
  }
  function fromValues52(x4, y5) {
    var out = new ARRAY_TYPE2(2);
    out[0] = x4;
    out[1] = y5;
    return out;
  }
  function copy52(out, a22) {
    out[0] = a22[0];
    out[1] = a22[1];
    return out;
  }
  function set52(out, x4, y5) {
    out[0] = x4;
    out[1] = y5;
    return out;
  }
  function add52(out, a22, b22) {
    out[0] = a22[0] + b22[0];
    out[1] = a22[1] + b22[1];
    return out;
  }
  function subtract32(out, a22, b22) {
    out[0] = a22[0] - b22[0];
    out[1] = a22[1] - b22[1];
    return out;
  }
  function multiply42(out, a22, b22) {
    out[0] = a22[0] * b22[0];
    out[1] = a22[1] * b22[1];
    return out;
  }
  function divide22(out, a22, b22) {
    out[0] = a22[0] / b22[0];
    out[1] = a22[1] / b22[1];
    return out;
  }
  function ceil22(out, a22) {
    out[0] = Math.ceil(a22[0]);
    out[1] = Math.ceil(a22[1]);
    return out;
  }
  function floor22(out, a22) {
    out[0] = Math.floor(a22[0]);
    out[1] = Math.floor(a22[1]);
    return out;
  }
  function min22(out, a22, b22) {
    out[0] = Math.min(a22[0], b22[0]);
    out[1] = Math.min(a22[1], b22[1]);
    return out;
  }
  function max22(out, a22, b22) {
    out[0] = Math.max(a22[0], b22[0]);
    out[1] = Math.max(a22[1], b22[1]);
    return out;
  }
  function round22(out, a22) {
    out[0] = Math.round(a22[0]);
    out[1] = Math.round(a22[1]);
    return out;
  }
  function scale52(out, a22, b22) {
    out[0] = a22[0] * b22;
    out[1] = a22[1] * b22;
    return out;
  }
  function scaleAndAdd22(out, a22, b22, scale72) {
    out[0] = a22[0] + b22[0] * scale72;
    out[1] = a22[1] + b22[1] * scale72;
    return out;
  }
  function distance22(a22, b22) {
    var x4 = b22[0] - a22[0], y5 = b22[1] - a22[1];
    return Math.hypot(x4, y5);
  }
  function squaredDistance22(a22, b22) {
    var x4 = b22[0] - a22[0], y5 = b22[1] - a22[1];
    return x4 * x4 + y5 * y5;
  }
  function length42(a22) {
    var x4 = a22[0], y5 = a22[1];
    return Math.hypot(x4, y5);
  }
  function squaredLength42(a22) {
    var x4 = a22[0], y5 = a22[1];
    return x4 * x4 + y5 * y5;
  }
  function negate22(out, a22) {
    out[0] = -a22[0];
    out[1] = -a22[1];
    return out;
  }
  function inverse22(out, a22) {
    out[0] = 1 / a22[0];
    out[1] = 1 / a22[1];
    return out;
  }
  function normalize42(out, a22) {
    var x4 = a22[0], y5 = a22[1];
    var len42 = x4 * x4 + y5 * y5;
    if (len42 > 0) {
      len42 = 1 / Math.sqrt(len42);
    }
    out[0] = a22[0] * len42;
    out[1] = a22[1] * len42;
    return out;
  }
  function dot42(a22, b22) {
    return a22[0] * b22[0] + a22[1] * b22[1];
  }
  function cross22(out, a22, b22) {
    var z4 = a22[0] * b22[1] - a22[1] * b22[0];
    out[0] = out[1] = 0;
    out[2] = z4;
    return out;
  }
  function lerp42(out, a22, b22, t5) {
    var ax = a22[0], ay = a22[1];
    out[0] = ax + t5 * (b22[0] - ax);
    out[1] = ay + t5 * (b22[1] - ay);
    return out;
  }
  function random32(out, scale72) {
    scale72 = scale72 || 1;
    var r5 = RANDOM2() * 2 * Math.PI;
    out[0] = Math.cos(r5) * scale72;
    out[1] = Math.sin(r5) * scale72;
    return out;
  }
  function transformMat22(out, a22, m3) {
    var x4 = a22[0], y5 = a22[1];
    out[0] = m3[0] * x4 + m3[2] * y5;
    out[1] = m3[1] * x4 + m3[3] * y5;
    return out;
  }
  function transformMat2d2(out, a22, m3) {
    var x4 = a22[0], y5 = a22[1];
    out[0] = m3[0] * x4 + m3[2] * y5 + m3[4];
    out[1] = m3[1] * x4 + m3[3] * y5 + m3[5];
    return out;
  }
  function transformMat322(out, a22, m3) {
    var x4 = a22[0], y5 = a22[1];
    out[0] = m3[0] * x4 + m3[3] * y5 + m3[6];
    out[1] = m3[1] * x4 + m3[4] * y5 + m3[7];
    return out;
  }
  function transformMat422(out, a22, m3) {
    var x4 = a22[0];
    var y5 = a22[1];
    out[0] = m3[0] * x4 + m3[4] * y5 + m3[12];
    out[1] = m3[1] * x4 + m3[5] * y5 + m3[13];
    return out;
  }
  function rotate22(out, a22, b22, rad) {
    var p0 = a22[0] - b22[0], p1 = a22[1] - b22[1], sinC = Math.sin(rad), cosC = Math.cos(rad);
    out[0] = p0 * cosC - p1 * sinC + b22[0];
    out[1] = p0 * sinC + p1 * cosC + b22[1];
    return out;
  }
  function angle22(a22, b22) {
    var x1 = a22[0], y1 = a22[1], x22 = b22[0], y22 = b22[1], mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x22 * x22 + y22 * y22), cosine = mag && (x1 * x22 + y1 * y22) / mag;
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
  }
  function zero22(out) {
    out[0] = 0;
    out[1] = 0;
    return out;
  }
  function str42(a22) {
    return "vec2(" + a22[0] + ", " + a22[1] + ")";
  }
  function exactEquals52(a22, b22) {
    return a22[0] === b22[0] && a22[1] === b22[1];
  }
  function equals62(a22, b22) {
    var a0 = a22[0], a1 = a22[1];
    var b0 = b22[0], b1 = b22[1];
    return Math.abs(a0 - b0) <= EPSILON24 * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON24 * Math.max(1, Math.abs(a1), Math.abs(b1));
  }
  var len32 = length42;
  var sub32 = subtract32;
  var mul42 = multiply42;
  var div22 = divide22;
  var dist22 = distance22;
  var sqrDist22 = squaredDistance22;
  var sqrLen32 = squaredLength42;
  var forEach32 = function() {
    var vec = create62();
    return function(a22, stride, offset, count3, fn, arg) {
      var i7, l5;
      if (!stride) {
        stride = 2;
      }
      if (!offset) {
        offset = 0;
      }
      if (count3) {
        l5 = Math.min(count3 * stride + offset, a22.length);
      } else {
        l5 = a22.length;
      }
      for (i7 = offset; i7 < l5; i7 += stride) {
        vec[0] = a22[i7];
        vec[1] = a22[i7 + 1];
        fn(vec, vec, arg);
        a22[i7] = vec[0];
        a22[i7 + 1] = vec[1];
      }
      return a22;
    };
  }();
  var \u03C6 = (1 + Math.sqrt(5)) / 2;
  var TWO_PI2 = 2 * Math.PI;
  var TWO_PI_OVER_5 = 2 * Math.PI / 5;
  var PI_OVER_5 = Math.PI / 5;
  var PI_OVER_10 = Math.PI / 10;
  var dihedralAngle = 2 * Math.atan(\u03C6);
  var interhedralAngle = Math.PI - dihedralAngle;
  var faceEdgeAngle = -0.5 * Math.PI + Math.acos(-1 / Math.sqrt(3 - \u03C6));
  var distanceToEdge = (Math.sqrt(5) - 1) / 2;
  var distanceToVertex = 3 - Math.sqrt(5);
  var Rmidedge = Math.sqrt(3 - \u03C6);
  var Rcircumscribed = Math.sqrt(3) * Rmidedge / \u03C6;
  common_exports2.setMatrixArrayType(Float64Array);
  var PentagonShape = class _PentagonShape {
    constructor(vertices) {
      this.vertices = vertices;
      if (!this.isWindingCorrect()) {
        this.vertices.reverse();
      }
    }
    getArea() {
      let signedArea2 = 0;
      const N3 = this.vertices.length;
      for (let i7 = 0; i7 < N3; i7++) {
        const j4 = (i7 + 1) % N3;
        signedArea2 += (this.vertices[j4][0] - this.vertices[i7][0]) * (this.vertices[j4][1] + this.vertices[i7][1]);
      }
      return signedArea2;
    }
    isWindingCorrect() {
      return this.getArea() >= 0;
    }
    getVertices() {
      return this.vertices;
    }
    scale(scale72) {
      for (const vertex5 of this.vertices) {
        vec2_exports2.scale(vertex5, vertex5, scale72);
      }
      return this;
    }
    /**
     * Rotates the pentagon 180 degrees (equivalent to negating x & y)
     * @returns The rotated pentagon
     */
    rotate180() {
      for (const vertex5 of this.vertices) {
        vec2_exports2.negate(vertex5, vertex5);
      }
      return this;
    }
    /**
     * Reflects the pentagon over the x-axis (equivalent to negating y)
     * and reverses the winding order to maintain consistent orientation
     * @returns The reflected pentagon
     */
    reflectY() {
      for (const vertex5 of this.vertices) {
        vertex5[1] = -vertex5[1];
      }
      this.vertices.reverse();
      return this;
    }
    translate(translation2) {
      for (const vertex5 of this.vertices) {
        vec2_exports2.add(vertex5, vertex5, translation2);
      }
      return this;
    }
    transform(transform2) {
      for (const vertex5 of this.vertices) {
        vec2_exports2.transformMat2(vertex5, vertex5, transform2);
      }
      return this;
    }
    transform2d(transform2) {
      for (const vertex5 of this.vertices) {
        vec2_exports2.transformMat2d(vertex5, vertex5, transform2);
      }
      return this;
    }
    clone() {
      const newPentagon = new _PentagonShape(this.vertices.map((v22) => vec2_exports2.clone(v22)));
      return newPentagon;
    }
    getCenter() {
      const n4 = this.vertices.length;
      const sum2 = this.vertices.reduce((sum22, v22) => [sum22[0] + v22[0] / n4, sum22[1] + v22[1] / n4], [0, 0]);
      return sum2;
    }
    /**
     * Tests if a point is inside the pentagon by checking if it's on the correct side of all edges.
     * Assumes consistent winding order (counter-clockwise).
     * @param point The point to test
     * @returns 1 if point is inside, otherwise a negative value proportional to the distance from the point to the edge
     */
    containsPoint(point) {
      if (!this.isWindingCorrect()) {
        throw new Error("Pentagon is not counter-clockwise");
      }
      const N3 = this.vertices.length;
      let dMax = 1;
      for (let i7 = 0; i7 < N3; i7++) {
        const v1 = this.vertices[i7];
        const v22 = this.vertices[(i7 + 1) % N3];
        const dx = v1[0] - v22[0];
        const dy = v1[1] - v22[1];
        const px = point[0] - v1[0];
        const py = point[1] - v1[1];
        const crossProduct = dx * py - dy * px;
        if (crossProduct < 0) {
          const pLength = Math.sqrt(px * px + py * py);
          dMax = Math.min(dMax, crossProduct / pLength);
        }
      }
      return dMax;
    }
    /**
     * Splits each edge of the pentagon into the specified number of segments
     * @param segments Number of segments to split each edge into
     * @returns A new PentagonShape with more vertices, or the original PentagonShape if segments <= 1
     */
    splitEdges(segments) {
      if (segments <= 1) {
        return this;
      }
      const newVertices = [];
      const N3 = this.vertices.length;
      for (let i7 = 0; i7 < N3; i7++) {
        const v1 = this.vertices[i7];
        const v22 = this.vertices[(i7 + 1) % N3];
        newVertices.push(vec2_exports2.clone(v1));
        for (let j4 = 1; j4 < segments; j4++) {
          const t5 = j4 / segments;
          const interpolated = vec2_exports2.create();
          vec2_exports2.lerp(interpolated, v1, v22, t5);
          newVertices.push(interpolated);
        }
      }
      return new _PentagonShape(newVertices);
    }
  };
  common_exports2.setMatrixArrayType(Float64Array);
  var a2 = [0, 0];
  var b2 = [0, 1];
  var c2 = [0.7885966681787006, 1.6149108024237764];
  var d2 = [1.6171013659387945, 1.054928690397459];
  var e3 = [Math.cos(PI_OVER_10), Math.sin(PI_OVER_10)];
  var edgeMidpointD = 2 * vec2_exports2.length(c2) * Math.cos(PI_OVER_5);
  var BASIS_ROTATION = PI_OVER_5 - Math.atan2(c2[1], c2[0]);
  var scale62 = 2 * distanceToEdge / edgeMidpointD;
  [a2, b2, c2, d2, e3].forEach((v22) => {
    vec2_exports2.scale(v22, v22, scale62);
    vec2_exports2.rotate(v22, v22, [0, 0], BASIS_ROTATION);
  });
  var PENTAGON = new PentagonShape([a2, b2, c2, d2, e3]);
  var bisectorAngle = Math.atan2(c2[1], c2[0]) - PI_OVER_5;
  var u2 = [0, 0];
  var L2 = distanceToEdge / Math.cos(PI_OVER_5);
  var V2 = bisectorAngle + PI_OVER_5;
  var v2 = [L2 * Math.cos(V2), L2 * Math.sin(V2)];
  var W2 = bisectorAngle - PI_OVER_5;
  var w2 = [L2 * Math.cos(W2), L2 * Math.sin(W2)];
  var TRIANGLE = new PentagonShape([u2, v2, w2]);
  var BASIS = mat2_exports.fromValues(v2[0], v2[1], w2[0], w2[1]);
  var BASIS_INVERSE = mat2_exports.invert(mat2_exports.create(), BASIS);
  var GEODETIC_TO_AUTHALIC = new Float64Array([
    -0.0022392098386786394,
    21308606513250217e-22,
    -2559257686421274e-24,
    33701965267802837e-28,
    -4667545312611249e-30,
    667492870384816e-32
  ]);
  var AUTHALIC_TO_GEODETIC = new Float64Array([
    0.0022392089963541657,
    28831978048607556e-22,
    508622073997266e-23,
    102018123778161e-25,
    21912872306767718e-30,
    49284235482523806e-33
  ]);
  var AuthalicProjection = class {
    /**
     * Applies coefficients using Clenshaw summation algorithm (order 6)
     * @param phi Angle in radians
     * @param C Array of coefficients
     * @returns Transformed angle in radians
     */
    applyCoefficients(phi, C22) {
      const sinPhi = Math.sin(phi);
      const cosPhi = Math.cos(phi);
      const X2 = 2 * (cosPhi - sinPhi) * (cosPhi + sinPhi);
      let u0, u1;
      u0 = X2 * C22[5] + C22[4];
      u1 = X2 * u0 + C22[3];
      u0 = X2 * u1 - u0 + C22[2];
      u1 = X2 * u0 - u1 + C22[1];
      u0 = X2 * u1 - u0 + C22[0];
      return phi + 2 * sinPhi * cosPhi * u0;
    }
    /**
     * Converts geodetic latitude to authalic latitude
     * @param phi Geodetic latitude in radians
     * @returns Authalic latitude in radians
     */
    forward(phi) {
      return this.applyCoefficients(phi, GEODETIC_TO_AUTHALIC);
    }
    /**
     * Converts authalic latitude to geodetic latitude
     * @param phi Authalic latitude in radians
     * @returns Geodetic latitude in radians
     */
    inverse(phi) {
      return this.applyCoefficients(phi, AUTHALIC_TO_GEODETIC);
    }
  };
  common_exports2.setMatrixArrayType(Float64Array);
  var authalic = new AuthalicProjection();
  function degToRad(deg) {
    return deg * (Math.PI / 180);
  }
  function radToDeg(rad) {
    return rad * (180 / Math.PI);
  }
  function toPolar(xy) {
    const rho = vec2_exports2.length(xy);
    const gamma = Math.atan2(xy[1], xy[0]);
    return [rho, gamma];
  }
  function toFace([rho, gamma]) {
    const x4 = rho * Math.cos(gamma);
    const y5 = rho * Math.sin(gamma);
    return [x4, y5];
  }
  function faceToBarycentric(p5, [p1, p22, p32]) {
    const d31 = [p1[0] - p32[0], p1[1] - p32[1]];
    const d23 = [p32[0] - p22[0], p32[1] - p22[1]];
    const d3p = [p5[0] - p32[0], p5[1] - p32[1]];
    const det = d23[0] * d31[1] - d23[1] * d31[0];
    const b0 = (d23[0] * d3p[1] - d23[1] * d3p[0]) / det;
    const b1 = (d31[0] * d3p[1] - d31[1] * d3p[0]) / det;
    const b22 = 1 - (b0 + b1);
    return [b0, b1, b22];
  }
  function barycentricToFace(b22, [p1, p22, p32]) {
    return [
      b22[0] * p1[0] + b22[1] * p22[0] + b22[2] * p32[0],
      b22[0] * p1[1] + b22[1] * p22[1] + b22[2] * p32[1]
    ];
  }
  function toSpherical(xyz) {
    const theta = Math.atan2(xyz[1], xyz[0]);
    const r5 = Math.sqrt(xyz[0] * xyz[0] + xyz[1] * xyz[1] + xyz[2] * xyz[2]);
    const phi = Math.acos(xyz[2] / r5);
    return [theta, phi];
  }
  function toCartesian([theta, phi]) {
    const sinPhi = Math.sin(phi);
    const x4 = sinPhi * Math.cos(theta);
    const y5 = sinPhi * Math.sin(theta);
    const z4 = Math.cos(phi);
    return [x4, y5, z4];
  }
  var LONGITUDE_OFFSET = 93;
  function fromLonLat([longitude, latitude]) {
    const theta = degToRad(longitude + LONGITUDE_OFFSET);
    const geodeticLat = degToRad(latitude);
    const authalicLat = authalic.forward(geodeticLat);
    const phi = Math.PI / 2 - authalicLat;
    return [theta, phi];
  }
  function toLonLat([theta, phi]) {
    const longitude = radToDeg(theta) - LONGITUDE_OFFSET;
    const authalicLat = Math.PI / 2 - phi;
    const geodeticLat = authalic.inverse(authalicLat);
    const latitude = radToDeg(geodeticLat);
    return [longitude, latitude];
  }
  function normalizeLongitudes(contour) {
    const points = contour.map((lonLat) => toCartesian(fromLonLat(lonLat)));
    const center2 = vec3_exports2.create();
    for (const point of points) {
      vec3_exports2.add(center2, center2, point);
    }
    vec3_exports2.normalize(center2, center2);
    let [centerLon, centerLat] = toLonLat(toSpherical(center2));
    if (centerLat > 89.99 || centerLat < -89.99) {
      centerLon = contour[0][0];
    }
    centerLon = ((centerLon + 180) % 360 + 360) % 360 - 180;
    return contour.map((point) => {
      let [longitude, latitude] = point;
      while (longitude - centerLon > 180)
        longitude = longitude - 360;
      while (longitude - centerLon < -180)
        longitude = longitude + 360;
      return [longitude, latitude];
    });
  }
  common_exports2.setMatrixArrayType(Float64Array);
  var SQRT5 = Math.sqrt(5);
  var INV_SQRT5 = Math.sqrt(0.2);
  var sinAlpha = Math.sqrt((1 - INV_SQRT5) / 2);
  var cosAlpha = Math.sqrt((1 + INV_SQRT5) / 2);
  var A2 = 0.5;
  var B2 = Math.sqrt((2.5 - SQRT5) / 10);
  var C2 = Math.sqrt((2.5 + SQRT5) / 10);
  var D2 = Math.sqrt((1 + INV_SQRT5) / 8);
  var E2 = Math.sqrt((1 - INV_SQRT5) / 8);
  var F2 = Math.sqrt((3 - SQRT5) / 8);
  var G2 = Math.sqrt((3 + SQRT5) / 8);
  var faceCenters = [
    [0, 0],
    // Doesn't actually matter as rotation is 0
    // First ring: five vertices, CCW, multiplied by sinAlpha
    [sinAlpha, 0],
    // [cos0, sin0]
    [B2, A2],
    // [cos72, sin72]
    [-D2, F2],
    // [-cos36, sin36]
    [-D2, -F2],
    // [-cos36, -sin36]
    [B2, -A2],
    // [cos72, -sin72]
    // Second ring: the same five vertices but negated (180deg rotation), multiplied by cosAlpha
    [-cosAlpha, 0],
    // [-cos0, -sin0]
    [-E2, -G2],
    // [-cos72, -sin72]
    [C2, -A2],
    // [cos36, -sin36]
    [C2, A2],
    // [cos36, sin36]
    [-E2, G2],
    // [-cos72, sin72]
    [0, 0]
  ];
  var axes = faceCenters.map(([x4, y5]) => [-y5, x4]);
  var quaternions = axes.map((axis, i7) => {
    if (i7 === 0)
      return [0, 0, 0, 1];
    if (i7 === 11)
      return [0, -1, 0, 0];
    return [...axis, 0, i7 < 6 ? cosAlpha : sinAlpha];
  });
  common_exports2.setMatrixArrayType(Float64Array);
  var clockwiseFan = ["vu", "uw", "vw", "vw", "vw"];
  var clockwiseStep = ["wu", "uw", "vw", "vu", "uw"];
  var counterStep = ["wu", "uv", "wv", "wu", "uw"];
  var counterJump = ["vu", "uv", "wv", "wu", "uw"];
  var QUINTANT_ORIENTATIONS = [
    clockwiseFan,
    // 0 Arctic
    counterJump,
    // 1 North America
    counterStep,
    // 2 South America
    clockwiseStep,
    // 3 North Atlantic & Western Europe & Africa
    counterStep,
    // 4 South Atlantic & Africa
    counterJump,
    // 5 Europe, Middle East & CentralAfrica
    counterStep,
    // 6 Indian Ocean
    clockwiseStep,
    // 7 Asia
    clockwiseStep,
    // 8 Australia
    clockwiseStep,
    // 9 North Pacific
    counterJump,
    // 10 South Pacific
    counterJump
    // 11 Antarctic
  ];
  var QUINTANT_FIRST = [4, 2, 3, 2, 0, 4, 3, 2, 2, 0, 3, 0];
  var ORIGIN_ORDER = [0, 1, 2, 4, 3, 5, 7, 8, 6, 11, 10, 9];
  var origins = [];
  function generateOrigins() {
    addOrigin([0, 0], 0, quaternions[0]);
    for (let i7 = 0; i7 < 5; i7++) {
      const alpha = i7 * TWO_PI_OVER_5;
      const alpha2 = alpha + PI_OVER_5;
      addOrigin([alpha, interhedralAngle], PI_OVER_5, quaternions[i7 + 1]);
      addOrigin([alpha2, Math.PI - interhedralAngle], PI_OVER_5, quaternions[(i7 + 3) % 5 + 6]);
    }
    addOrigin([0, Math.PI], 0, quaternions[11]);
  }
  var originId = 0;
  function addOrigin(axis, angle32, quaternion) {
    if (originId > 11) {
      throw new Error(`Too many origins: ${originId}`);
    }
    const inverseQuat = quat_exports.create();
    quat_exports.conjugate(inverseQuat, quaternion);
    const origin = {
      id: originId,
      axis,
      quat: quaternion,
      inverseQuat,
      angle: angle32,
      orientation: QUINTANT_ORIENTATIONS[originId],
      firstQuintant: QUINTANT_FIRST[originId]
    };
    origins.push(origin);
    originId++;
  }
  generateOrigins();
  origins.sort((a22, b22) => ORIGIN_ORDER.indexOf(a22.id) - ORIGIN_ORDER.indexOf(b22.id));
  origins.forEach((origin, i7) => origin.id = i7);
  function segmentToQuintant(segment, origin) {
    const layout = origin.orientation;
    const step = layout === clockwiseFan || layout === clockwiseStep ? -1 : 1;
    const faceRelativeQuintant = (segment - origin.firstQuintant + 5) % 5;
    const orientation = layout[faceRelativeQuintant];
    const quintant = (origin.firstQuintant + step * faceRelativeQuintant + 5) % 5;
    return { quintant, orientation };
  }
  var GnomonicProjection = class {
    /**
     * Projects spherical coordinates to polar coordinates using gnomonic projection
     * @param spherical Spherical coordinates [theta, phi]
     * @returns Polar coordinates [rho, gamma]
     */
    forward([theta, phi]) {
      return [Math.tan(phi), theta];
    }
    /**
     * Unprojects polar coordinates to spherical coordinates using gnomonic projection
     * @param polar Polar coordinates [rho, gamma]
     * @returns Spherical coordinates [theta, phi]
     */
    inverse([rho, gamma]) {
      return [gamma, Math.atan(rho)];
    }
  };
  var midpointAB = vec3_exports2.create();
  var crossCD = vec3_exports2.create();
  var scaledA = vec3_exports2.create();
  var scaledB = vec3_exports2.create();
  function vectorDifference(A22, B22) {
    vec3_exports2.lerp(midpointAB, A22, B22, 0.5);
    vec3_exports2.normalize(midpointAB, midpointAB);
    vec3_exports2.cross(midpointAB, A22, midpointAB);
    const D22 = vec3_exports2.length(midpointAB);
    if (D22 < 1e-8) {
      const AB = vec3_exports2.subtract(vec3_exports2.create(), A22, B22);
      const halfDistance = 0.5 * vec3_exports2.length(AB);
      return halfDistance;
    }
    return D22;
  }
  function tripleProduct(A22, B22, C22) {
    vec3_exports2.cross(crossCD, B22, C22);
    return vec3_exports2.dot(A22, crossCD);
  }
  function quadrupleProduct(out, A22, B22, C22, D22) {
    vec3_exports2.cross(crossCD, C22, D22);
    const tripleProductACD = vec3_exports2.dot(A22, crossCD);
    const tripleProductBCD = vec3_exports2.dot(B22, crossCD);
    vec3_exports2.scale(scaledA, A22, tripleProductBCD);
    vec3_exports2.scale(scaledB, B22, tripleProductACD);
    return vec3_exports2.sub(out, scaledB, scaledA);
  }
  function slerp22(out, A22, B22, t5) {
    const gamma = vec3_exports2.angle(A22, B22);
    if (gamma < 1e-12) {
      return vec3_exports2.lerp(out, A22, B22, t5);
    }
    const weightA = Math.sin((1 - t5) * gamma) / Math.sin(gamma);
    const weightB = Math.sin(t5 * gamma) / Math.sin(gamma);
    const scaledA2 = vec3_exports2.scale(vec3_exports2.create(), A22, weightA);
    const scaledB2 = vec3_exports2.scale(vec3_exports2.create(), B22, weightB);
    return vec3_exports2.add(out, scaledA2, scaledB2);
  }
  common_exports2.setMatrixArrayType(Float64Array);
  var midA = vec3_exports2.create();
  var midB = vec3_exports2.create();
  var midC = vec3_exports2.create();
  var center = vec3_exports2.create();
  var SphericalPolygonShape = class {
    constructor(vertices) {
      this._area = null;
      this.vertices = vertices;
      Object.freeze(this.vertices);
    }
    /**
     * 
     * @param nSegments Returns a closed boundary of the polygon, with nSegments points per edge
     * @returns SphericalPolygon
     */
    getBoundary(nSegments = 1, closedRing = true) {
      const points = [];
      const N3 = this.vertices.length;
      for (let s5 = 0; s5 < N3 * nSegments; s5++) {
        const t5 = s5 / nSegments;
        points.push(this.slerp(t5));
      }
      if (closedRing) {
        points.push(points[0]);
      }
      return points;
    }
    /**
     * Interpolates along boundary of polygon. Pass t = 1.5 to get the midpoint between 2nd and 3rd vertices
     * @param t 
     * @returns Cartesian coordinate
     */
    slerp(t5) {
      const N3 = this.vertices.length;
      const f6 = t5 % 1;
      const i7 = Math.floor(t5 % N3);
      const j4 = (i7 + 1) % N3;
      return slerp22(vec3_exports2.create(), this.vertices[i7], this.vertices[j4], f6);
    }
    /**
     * Returns the vertex given by index t, along with the vectors:
     * - VA: Vector from vertex to point A
     * - VB: Vector from vertex to point B
     * @param t 
     * @returns 
     */
    getTransformedVertices(t5) {
      const N3 = this.vertices.length;
      const i7 = Math.floor(t5 % N3);
      const j4 = (i7 + 1) % N3;
      const k4 = (i7 + N3 - 1) % N3;
      const V22 = vec3_exports2.clone(this.vertices[i7]);
      const VA = vec3_exports2.clone(this.vertices[j4]);
      const VB = vec3_exports2.clone(this.vertices[k4]);
      vec3_exports2.sub(VA, VA, V22);
      vec3_exports2.sub(VB, VB, V22);
      return [V22, VA, VB];
    }
    containsPoint(point) {
      const N3 = this.vertices.length;
      let thetaDeltaMin = Infinity;
      for (let i7 = 0; i7 < N3; i7++) {
        const [V22, VA, VB] = this.getTransformedVertices(i7);
        const VP = vec3_exports2.sub(vec3_exports2.create(), point, V22);
        vec3_exports2.normalize(VP, VP);
        vec3_exports2.normalize(VA, VA);
        vec3_exports2.normalize(VB, VB);
        const crossAP = vec3_exports2.cross(vec3_exports2.create(), VA, VP);
        const crossPB = vec3_exports2.cross(vec3_exports2.create(), VP, VB);
        const sinAP = vec3_exports2.dot(V22, crossAP);
        const sinPB = vec3_exports2.dot(V22, crossPB);
        thetaDeltaMin = Math.min(thetaDeltaMin, sinAP, sinPB);
      }
      return thetaDeltaMin;
    }
    /**
     * Calculate the area of a spherical triangle given three vertices
     * @param v1 First vertex
     * @param v2 Second vertex  
     * @param v3 Third vertex
     * @returns Area of the spherical triangle in radians
     */
    getTriangleArea(v1, v22, v32) {
      vec3_exports2.lerp(midA, v22, v32, 0.5);
      vec3_exports2.lerp(midB, v32, v1, 0.5);
      vec3_exports2.lerp(midC, v1, v22, 0.5);
      vec3_exports2.normalize(midA, midA);
      vec3_exports2.normalize(midB, midB);
      vec3_exports2.normalize(midC, midC);
      const S3 = tripleProduct(midA, midB, midC);
      const clamped = Math.max(-1, Math.min(1, S3));
      if (Math.abs(clamped) < 1e-8) {
        return 2 * clamped;
      } else {
        return Math.asin(clamped) * 2;
      }
    }
    /**
     * Calculate the area of the spherical polygon by decomposing it into a fan of triangles
     * @returns The area of the spherical polygon in radians
     */
    getArea() {
      if (this._area === null) {
        this._area = this._getArea();
      }
      return this._area;
    }
    _getArea() {
      if (this.vertices.length < 3) {
        return 0;
      }
      if (this.vertices.length === 3) {
        this._area = this.getTriangleArea(this.vertices[0], this.vertices[1], this.vertices[2]);
        return this._area;
      }
      vec3_exports2.set(center, 0, 0, 0);
      for (const vertex5 of this.vertices) {
        vec3_exports2.add(center, center, vertex5);
      }
      vec3_exports2.normalize(center, center);
      let area2 = 0;
      for (let i7 = 0; i7 < this.vertices.length; i7++) {
        const v1 = this.vertices[i7];
        const v22 = this.vertices[(i7 + 1) % this.vertices.length];
        const triArea = this.getTriangleArea(center, v1, v22);
        if (!isNaN(triArea)) {
          area2 += triArea;
        }
      }
      this._area = area2;
      return this._area;
    }
    /**
     * For debugging purposes, check if the winding order is correct
     * In production, should always be correct
     */
    isWindingCorrect() {
      const area2 = this.getArea();
      const isCorrect = area2 > 0;
      if (!isCorrect) {
        debugger;
      }
    }
  };
  common_exports2.setMatrixArrayType(Float64Array);
  var SphericalTriangleShape = class extends SphericalPolygonShape {
    constructor(vertices) {
      if (vertices.length !== 3) {
        throw new Error("SphericalTriangleShape requires exactly 3 vertices");
      }
      super(vertices);
    }
  };
  common_exports2.setMatrixArrayType(Float64Array);
  var PolyhedralProjection = class {
    /**
     * Forward projection: converts a spherical point to face coordinates
     * @param v - The spherical point to project
     * @param sphericalTriangle - The spherical triangle vertices
     * @param faceTriangle - The face triangle vertices
     * @returns The face coordinates
     */
    forward(v22, sphericalTriangle, faceTriangle) {
      const [A22, B22, C22] = sphericalTriangle;
      const triangleShape = new SphericalTriangleShape([A22, B22, C22]);
      const Z2 = vec3_exports2.subtract(vec3_exports2.create(), v22, A22);
      vec3_exports2.normalize(Z2, Z2);
      const p5 = quadrupleProduct(vec3_exports2.create(), A22, Z2, B22, C22);
      vec3_exports2.normalize(p5, p5);
      const h5 = vectorDifference(A22, v22) / vectorDifference(A22, p5);
      const Area_ABC = triangleShape.getArea();
      const scaledArea = h5 / Area_ABC;
      const b22 = [
        1 - h5,
        scaledArea * new SphericalTriangleShape([A22, p5, C22]).getArea(),
        scaledArea * new SphericalTriangleShape([A22, B22, p5]).getArea()
      ];
      return barycentricToFace(b22, faceTriangle);
    }
    /**
     * Inverse projection: converts face coordinates back to spherical coordinates
     * @param facePoint - The face coordinates
     * @param faceTriangle - The face triangle vertices
     * @param sphericalTriangle - The spherical triangle vertices
     * @returns The spherical coordinates
     */
    inverse(facePoint, faceTriangle, sphericalTriangle) {
      const [A22, B22, C22] = sphericalTriangle;
      const triangleShape = new SphericalTriangleShape([A22, B22, C22]);
      const b22 = faceToBarycentric(facePoint, faceTriangle);
      const threshold2 = 1 - 1e-14;
      if (b22[0] > threshold2)
        return A22;
      if (b22[1] > threshold2)
        return B22;
      if (b22[2] > threshold2)
        return C22;
      const c1 = vec3_exports2.create();
      vec3_exports2.cross(c1, B22, C22);
      const Area_ABC = triangleShape.getArea();
      const h5 = 1 - b22[0];
      const R2 = b22[2] / h5;
      const alpha = R2 * Area_ABC;
      const S3 = Math.sin(alpha);
      const halfC = Math.sin(alpha / 2);
      const CC = 2 * halfC * halfC;
      const c01 = vec3_exports2.dot(A22, B22);
      const c12 = vec3_exports2.dot(B22, C22);
      const c20 = vec3_exports2.dot(C22, A22);
      const s12 = vec3_exports2.length(c1);
      const V22 = vec3_exports2.dot(A22, c1);
      const f6 = S3 * V22 + CC * (c01 * c12 - c20);
      const g3 = CC * s12 * (1 + c01);
      const q3 = 2 / Math.acos(c12) * Math.atan2(g3, f6);
      const P3 = slerp22(vec3_exports2.create(), B22, C22, q3);
      const K2 = vectorDifference(A22, P3);
      const t5 = this.safeAcos(h5 * K2) / this.safeAcos(K2);
      const out = slerp22([0, 0, 0], A22, P3, t5);
      return out;
    }
    /**
     * Computes acos(1 - 2 * x * x) without loss of precision for small x
     * @param x 
     * @returns acos(1 - x)
     */
    safeAcos(x4) {
      if (x4 < 1e-3) {
        return 2 * x4 + x4 * x4 * x4 / 3;
      } else {
        return Math.acos(1 - 2 * x4 * x4);
      }
    }
  };
  common_exports2.setMatrixArrayType(Float64Array);
  var YES = -1;
  var NO = 1;
  var KJToIJ = ([k4, j4]) => {
    return vec2_exports2.fromValues(k4 - j4, j4);
  };
  var kPos = vec2_exports2.fromValues(1, 0);
  var jPos = vec2_exports2.fromValues(0, 1);
  var kNeg = vec2_exports2.negate(vec2_exports2.create(), kPos);
  var jNeg = vec2_exports2.negate(vec2_exports2.create(), jPos);
  var ZERO4 = vec2_exports2.fromValues(0, 0);
  var quaternaryToKJ = (n4, [flipX, flipY]) => {
    let p5 = ZERO4;
    let q3 = ZERO4;
    if (flipX === NO && flipY === NO) {
      p5 = kPos;
      q3 = jPos;
    } else if (flipX === YES && flipY === NO) {
      p5 = jNeg;
      q3 = kNeg;
    } else if (flipX === NO && flipY === YES) {
      p5 = jPos;
      q3 = kPos;
    } else if (flipX === YES && flipY === YES) {
      p5 = kNeg;
      q3 = jNeg;
    }
    switch (n4) {
      case 0:
        return ZERO4;
      case 1:
        return p5;
      case 2:
        return vec2_exports2.add(vec2_exports2.create(), q3, p5);
      case 3:
        return vec2_exports2.scaleAndAdd(vec2_exports2.create(), q3, p5, 2);
      default:
        throw new Error(`Invalid Quaternary value: ${n4}`);
    }
  };
  var quaternaryToFlips = (n4) => {
    return [[NO, NO], [NO, YES], [NO, NO], [YES, NO]][n4];
  };
  var FLIP_SHIFT = vec2_exports2.fromValues(-1, 1);
  function reversePattern(pattern) {
    return Array.from({ length: pattern.length }, (_3, i7) => pattern.indexOf(i7));
  }
  var PATTERN = [0, 1, 3, 4, 5, 6, 7, 2];
  var PATTERN_FLIPPED = [0, 1, 2, 7, 3, 4, 5, 6];
  var PATTERN_REVERSED = reversePattern(PATTERN);
  var PATTERN_FLIPPED_REVERSED = reversePattern(PATTERN_FLIPPED);
  var _shiftDigits = (digits, i7, flips, invertJ, pattern) => {
    if (i7 <= 0)
      return;
    const parentK = digits[i7] || 0;
    const childK = digits[i7 - 1];
    const F22 = flips[0] + flips[1];
    let needsShift = true;
    let first = true;
    if (invertJ !== (F22 === 0)) {
      needsShift = parentK === 1 || parentK === 2;
      first = parentK === 1;
    } else {
      needsShift = parentK < 2;
      first = parentK === 0;
    }
    if (!needsShift)
      return;
    const src = first ? childK : childK + 4;
    const dst = pattern[src];
    digits[i7 - 1] = dst % 4;
    digits[i7] = (parentK + 4 + Math.floor(dst / 4) - Math.floor(src / 4)) % 4;
  };
  var sToAnchor = (s5, resolution, orientation) => {
    let input = BigInt(s5);
    const reverse = orientation === "vu" || orientation === "wu" || orientation === "vw";
    const invertJ = orientation === "wv" || orientation === "vw";
    const flipIJ = orientation === "wu" || orientation === "uw";
    if (reverse) {
      input = (1n << BigInt(2 * resolution)) - input - 1n;
    }
    const anchor = _sToAnchor(input, resolution, invertJ, flipIJ);
    if (flipIJ) {
      const { offset: [_i, _j], flips: [flipX, flipY] } = anchor;
      anchor.offset = [_j, _i];
      if (flipX === YES)
        vec2_exports2.add(anchor.offset, anchor.offset, FLIP_SHIFT);
      if (flipY === YES)
        vec2_exports2.subtract(anchor.offset, anchor.offset, FLIP_SHIFT);
    }
    if (invertJ) {
      const { offset: [i7, _j], flips } = anchor;
      const j4 = (1 << resolution) - (i7 + _j);
      flips[0] = -flips[0];
      anchor.offset[1] = j4;
      anchor.flips = flips;
    }
    return anchor;
  };
  var _sToAnchor = (s5, resolution, invertJ, flipIJ) => {
    const offset = vec2_exports2.create();
    const flips = [NO, NO];
    let input = BigInt(s5);
    const digits = [];
    while (input > 0n || digits.length < resolution) {
      digits.push(Number(input % 4n));
      input = input >> 2n;
    }
    const pattern = flipIJ ? PATTERN_FLIPPED : PATTERN;
    for (let i7 = digits.length - 1; i7 >= 0; i7--) {
      _shiftDigits(digits, i7, flips, invertJ, pattern);
      vec2_exports2.multiply(flips, flips, quaternaryToFlips(digits[i7]));
    }
    flips[0] = NO;
    flips[1] = NO;
    for (let i7 = digits.length - 1; i7 >= 0; i7--) {
      vec2_exports2.scale(offset, offset, 2);
      const childOffset = quaternaryToKJ(digits[i7], flips);
      vec2_exports2.add(offset, offset, childOffset);
      vec2_exports2.multiply(flips, flips, quaternaryToFlips(digits[i7]));
    }
    const k4 = digits[0] || 0;
    return { flips, k: k4, offset: KJToIJ(offset) };
  };
  common_exports2.setMatrixArrayType(Float64Array);
  var TRIANGLE_MODE = false;
  var shiftRight = vec2_exports2.clone(w2);
  var shiftLeft = vec2_exports2.negate(vec2_exports2.create(), w2);
  var QUINTANT_ROTATIONS = [0, 1, 2, 3, 4].map((quintant) => {
    const rotation2 = mat2_exports.create();
    mat2_exports.fromRotation(rotation2, TWO_PI_OVER_5 * quintant);
    return rotation2;
  });
  var translation = vec2_exports2.create();
  function getPentagonVertices(resolution, quintant, anchor) {
    const pentagon = (TRIANGLE_MODE ? TRIANGLE : PENTAGON).clone();
    vec2_exports2.transformMat2(translation, anchor.offset, BASIS);
    if (anchor.flips[0] === NO && anchor.flips[1] === YES) {
      pentagon.rotate180();
    }
    const { k: k4 } = anchor;
    const F22 = anchor.flips[0] + anchor.flips[1];
    if (
      // Orient last two pentagons when both or neither flips are YES
      (F22 === -2 || F22 === 2) && k4 > 1 || // Orient first & last pentagons when only one of flips is YES
      F22 === 0 && (k4 === 0 || k4 === 3)
    ) {
      pentagon.reflectY();
    }
    if (anchor.flips[0] === YES && anchor.flips[1] === YES) {
      pentagon.rotate180();
    } else if (anchor.flips[0] === YES) {
      pentagon.translate(shiftLeft);
    } else if (anchor.flips[1] === YES) {
      pentagon.translate(shiftRight);
    }
    pentagon.translate(translation);
    pentagon.scale(1 / 2 ** resolution);
    pentagon.transform(QUINTANT_ROTATIONS[quintant]);
    return pentagon;
  }
  function getQuintantVertices(quintant) {
    const triangle = TRIANGLE.clone();
    triangle.transform(QUINTANT_ROTATIONS[quintant]);
    return triangle;
  }
  function getFaceVertices() {
    const vertices = [];
    for (const rotation2 of QUINTANT_ROTATIONS) {
      vertices.push(vec2_exports2.transformMat2(vec2_exports2.create(), v2, rotation2));
    }
    vertices.reverse();
    return new PentagonShape(vertices);
  }
  common_exports2.setMatrixArrayType(Float64Array);
  var CRS = class {
    constructor() {
      this.vertices = [];
      this.invocations = 0;
      this.addFaceCenters();
      this.addVertices();
      this.addMidpoints();
      if (this.vertices.length !== 62) {
        throw new Error("Failed to construct CRS: vertices length is not 62");
      }
      Object.freeze(this.vertices);
    }
    getVertex(point) {
      this.invocations++;
      if (this.invocations === 1e4) {
        console.warn("Too many CRS invocations, results should be cached");
      }
      for (const vertex5 of this.vertices) {
        if (vec3_exports2.distance(point, vertex5) < 1e-5) {
          return vertex5;
        }
      }
      throw new Error("Failed to find vertex in CRS");
    }
    addFaceCenters() {
      origins.forEach((origin) => this.add(toCartesian(origin.axis)));
    }
    addVertices() {
      const phiVertex = Math.atan(distanceToVertex);
      for (const origin of origins) {
        for (let i7 = 0; i7 < 5; i7++) {
          const thetaVertex = (2 * i7 + 1) * Math.PI / 5;
          const vertex5 = toCartesian([thetaVertex + origin.angle, phiVertex]);
          vec3_exports2.transformQuat(vertex5, vertex5, origin.quat);
          this.add(vertex5);
        }
      }
    }
    addMidpoints() {
      const phiMidpoint = Math.atan(distanceToEdge);
      for (const origin of origins) {
        for (let i7 = 0; i7 < 5; i7++) {
          const thetaMidpoint = 2 * i7 * Math.PI / 5;
          const midpoint = toCartesian([thetaMidpoint + origin.angle, phiMidpoint]);
          vec3_exports2.transformQuat(midpoint, midpoint, origin.quat);
          this.add(midpoint);
        }
      }
    }
    add(newVertex) {
      const normalized = vec3_exports2.normalize(vec3_exports2.create(), newVertex);
      const existingVertex = this.vertices.find((existingVertex2) => vec3_exports2.distance(normalized, existingVertex2) < 1e-5);
      if (existingVertex) {
        return false;
      }
      this.vertices.push(normalized);
      return true;
    }
  };
  common_exports2.setMatrixArrayType(Float64Array);
  var crs = new CRS();
  var DodecahedronProjection = class {
    constructor() {
      this.faceTriangles = [];
      this.sphericalTriangles = [];
      this.polyhedral = new PolyhedralProjection();
      this.gnomonic = new GnomonicProjection();
    }
    /**
     * Projects spherical coordinates to face coordinates using dodecahedron projection
     * @param spherical Spherical coordinates [theta, phi]
     * @param originId Origin ID
     * @returns Face coordinates [x, y]
     */
    forward(spherical, originId2) {
      const origin = origins[originId2];
      const unprojected = toCartesian(spherical);
      const out = vec3_exports2.create();
      vec3_exports2.transformQuat(out, unprojected, origin.inverseQuat);
      const projectedSpherical = toSpherical(out);
      const polar = this.gnomonic.forward(projectedSpherical);
      polar[1] = polar[1] - origin.angle;
      const faceTriangleIndex = this.getFaceTriangleIndex(polar);
      const reflect = this.shouldReflect(polar);
      let faceTriangle = this.getFaceTriangle(faceTriangleIndex, reflect, false);
      let sphericalTriangle = this.getSphericalTriangle(faceTriangleIndex, originId2, reflect);
      return this.polyhedral.forward(unprojected, sphericalTriangle, faceTriangle);
    }
    /**
     * Unprojects face coordinates to spherical coordinates using dodecahedron projection
     * @param face Face coordinates [x, y]
     * @param originId Origin ID
     * @returns Spherical coordinates [theta, phi]
     */
    inverse(face, originId2) {
      const polar = toPolar(face);
      const faceTriangleIndex = this.getFaceTriangleIndex(polar);
      const reflect = this.shouldReflect(polar);
      const faceTriangle = this.getFaceTriangle(faceTriangleIndex, reflect, false);
      const sphericalTriangle = this.getSphericalTriangle(faceTriangleIndex, originId2, reflect);
      const unprojected = this.polyhedral.inverse(face, faceTriangle, sphericalTriangle);
      return toSpherical(unprojected);
    }
    /**
     * Detects when point is beyond the edge of the dodecahedron face
     * In the standard case (reflect = false), the face and spherical triangle can be
     * used directly.
     * In the reflected case (reflect = true), the point is beyond the edge of the dodecahedron face,
     * and so the face triangle is squashed to unproject correctly onto the neighboring dodecahedron face.
     * @param polar Polar coordinates
     * @returns True if point is beyond the edge of the dodecahedron face
     */
    shouldReflect(polar) {
      const [rho, gamma] = polar;
      const D22 = toFace([rho, this.normalizeGamma(gamma)])[0];
      return D22 > distanceToEdge;
    }
    /**
     * Given a polar coordinate, returns the index of the face triangle it belongs to
     * @param polar Polar coordinates
     * @returns Face triangle index, value from 0 to 9
     */
    getFaceTriangleIndex([_3, gamma]) {
      return (Math.floor(gamma / PI_OVER_5) + 10) % 10;
    }
    /**
     * Gets the face triangle for a given polar coordinate
     * @param faceTriangleIndex Face triangle index, value from 0 to 9
     * @returns FaceTriangle: 3 vertices in counter-clockwise order
     */
    getFaceTriangle(faceTriangleIndex, reflected = false, squashed = false) {
      let index = faceTriangleIndex;
      if (reflected) {
        index += squashed ? 20 : 10;
      }
      if (this.faceTriangles[index]) {
        return this.faceTriangles[index];
      }
      this.faceTriangles[index] = reflected ? this._getReflectedFaceTriangle(faceTriangleIndex, squashed) : this._getFaceTriangle(faceTriangleIndex);
      Object.freeze(this.faceTriangles[index]);
      return this.faceTriangles[index];
    }
    _getFaceTriangle(faceTriangleIndex) {
      const quintant = Math.floor((faceTriangleIndex + 1) / 2) % 5;
      const [vCenter, vCorner1, vCorner2] = getQuintantVertices(quintant).getVertices();
      const vEdgeMidpoint = vec2_exports2.create();
      vec2_exports2.lerp(vEdgeMidpoint, vCorner1, vCorner2, 0.5);
      const even = faceTriangleIndex % 2 === 0;
      return even ? [vCenter, vEdgeMidpoint, vCorner1] : [vCenter, vCorner2, vEdgeMidpoint];
    }
    _getReflectedFaceTriangle(faceTriangleIndex, squashed = false) {
      let [A22, B22, C22] = this._getFaceTriangle(faceTriangleIndex).map((face) => vec2_exports2.clone(face));
      const even = faceTriangleIndex % 2 === 0;
      vec2_exports2.negate(A22, A22);
      const midpoint = even ? B22 : C22;
      vec2_exports2.scaleAndAdd(A22, A22, midpoint, squashed ? 1 + 1 / Math.cos(interhedralAngle) : 2);
      return [A22, C22, B22];
    }
    /**
     * Gets the spherical triangle for a given face triangle index and origin
     * @param faceTriangleIndex Face triangle index
     * @param originId Origin ID
     * @returns Spherical triangle
     */
    getSphericalTriangle(faceTriangleIndex, originId2, reflected = false) {
      let index = 10 * originId2 + faceTriangleIndex;
      if (reflected) {
        index += 120;
      }
      if (this.sphericalTriangles[index]) {
        return this.sphericalTriangles[index];
      }
      this.sphericalTriangles[index] = this._getSphericalTriangle(faceTriangleIndex, originId2, reflected);
      Object.freeze(this.sphericalTriangles[index]);
      return this.sphericalTriangles[index];
    }
    _getSphericalTriangle(faceTriangleIndex, originId2, reflected = false) {
      const origin = origins[originId2];
      const faceTriangle = this.getFaceTriangle(faceTriangleIndex, reflected, true);
      const sphericalTriangle = faceTriangle.map((face) => {
        const [rho, gamma] = toPolar(face);
        const rotatedPolar = [rho, gamma + origin.angle];
        const rotated = toCartesian(this.gnomonic.inverse(rotatedPolar));
        vec3_exports2.transformQuat(rotated, rotated, origin.quat);
        return crs.getVertex(rotated);
      });
      return sphericalTriangle;
    }
    /**
     * Normalizes gamma to the range [-PI_OVER_5, PI_OVER_5]
     * @param gamma The gamma value to normalize
     * @returns Normalized gamma value
     */
    normalizeGamma(gamma) {
      const segment = gamma / TWO_PI_OVER_5;
      const sCenter = Math.round(segment);
      const sOffset = segment - sCenter;
      const beta = sOffset * TWO_PI_OVER_5;
      return beta;
    }
  };
  var FIRST_HILBERT_RESOLUTION = 2;
  var MAX_RESOLUTION = 30;
  var HILBERT_START_BIT = 58n;
  var REMOVAL_MASK = 0x3ffffffffffffffn;
  function getResolution(index) {
    let resolution = MAX_RESOLUTION - 1;
    let shifted = index >> 1n;
    while (resolution > -1 && (shifted & 0b1n) === 0n) {
      resolution -= 1;
      shifted = shifted >> (resolution < FIRST_HILBERT_RESOLUTION ? 1n : 2n);
    }
    return resolution;
  }
  function deserialize(index) {
    const resolution = getResolution(index);
    if (resolution === -1) {
      return { origin: origins[0], segment: 0, S: 0n, resolution };
    }
    const top6Bits = Number(index >> 58n);
    let origin, segment;
    if (resolution === 0) {
      const originId2 = top6Bits;
      origin = origins[originId2];
      segment = 0;
    } else {
      const originId2 = Math.floor(top6Bits / 5);
      origin = origins[originId2];
      segment = (top6Bits + origin.firstQuintant) % 5;
    }
    if (!origin) {
      throw new Error(`Could not parse origin: ${top6Bits}`);
    }
    if (resolution < FIRST_HILBERT_RESOLUTION) {
      return { origin, segment, S: 0n, resolution };
    }
    const hilbertLevels = resolution - FIRST_HILBERT_RESOLUTION + 1;
    const hilbertBits = BigInt(2 * hilbertLevels);
    const shift = HILBERT_START_BIT - hilbertBits;
    const S3 = (index & REMOVAL_MASK) >> shift;
    return { origin, segment, S: S3, resolution };
  }
  common_exports2.setMatrixArrayType(Float64Array);
  var rotation = mat2_exports.create();
  var dodecahedron = new DodecahedronProjection();
  function _getPentagon({ S: S3, segment, origin, resolution }) {
    const { quintant, orientation } = segmentToQuintant(segment, origin);
    if (resolution === FIRST_HILBERT_RESOLUTION - 1) {
      const out = getQuintantVertices(quintant);
      return out;
    } else if (resolution === FIRST_HILBERT_RESOLUTION - 2) {
      return getFaceVertices();
    }
    const hilbertResolution = resolution - FIRST_HILBERT_RESOLUTION + 1;
    const anchor = sToAnchor(S3, hilbertResolution, orientation);
    return getPentagonVertices(hilbertResolution, quintant, anchor);
  }
  function cellToBoundary(cellId, { closedRing = true, segments = "auto" } = { closedRing: true, segments: "auto" }) {
    const { S: S3, segment, origin, resolution } = deserialize(cellId);
    if (segments === "auto") {
      segments = Math.max(1, Math.pow(2, 6 - resolution));
    }
    const pentagon = _getPentagon({ S: S3, segment, origin, resolution });
    const splitPentagon = pentagon.splitEdges(segments);
    const vertices = splitPentagon.getVertices();
    const unprojectedVertices = vertices.map((vertex5) => dodecahedron.inverse(vertex5, origin.id));
    const boundary = unprojectedVertices.map((vertex5) => toLonLat(vertex5));
    const normalizedBoundary = normalizeLongitudes(boundary);
    if (closedRing) {
      normalizedBoundary.push(normalizedBoundary[0]);
    }
    normalizedBoundary.reverse();
    return normalizedBoundary;
  }
  function hexToU64(hex) {
    return BigInt(`0x${hex}`);
  }
  var AUTHALIC_RADIUS = 63710072e-1;
  var AUTHALIC_AREA = 4 * Math.PI * AUTHALIC_RADIUS * AUTHALIC_RADIUS;
  common_exports2.setMatrixArrayType(Float64Array);

  // ../geo-layers/src/h3-layers/h3-utils.ts
  var import_h3_js = __toESM(require_h3_js(), 1);
  function normalizeLongitudes2(vertices, refLng) {
    refLng = refLng === void 0 ? vertices[0][0] : refLng;
    for (const pt2 of vertices) {
      const deltaLng = pt2[0] - refLng;
      if (deltaLng > 180) {
        pt2[0] -= 360;
      } else if (deltaLng < -180) {
        pt2[0] += 360;
      }
    }
  }
  function scalePolygon(hexId, vertices, factor) {
    const [lat, lng] = (0, import_h3_js.cellToLatLng)(hexId);
    const actualCount = vertices.length;
    normalizeLongitudes2(vertices, lng);
    const vertexCount = vertices[0] === vertices[actualCount - 1] ? actualCount - 1 : actualCount;
    for (let i7 = 0; i7 < vertexCount; i7++) {
      vertices[i7][0] = lerp(lng, vertices[i7][0], factor);
      vertices[i7][1] = lerp(lat, vertices[i7][1], factor);
    }
  }
  function getHexagonCentroid(getHexagon, object, objectInfo) {
    const hexagonId = getHexagon(object, objectInfo);
    const [lat, lng] = (0, import_h3_js.cellToLatLng)(hexagonId);
    return [lng, lat];
  }
  function h3ToPolygon(hexId, coverage = 1) {
    const vertices = (0, import_h3_js.cellToBoundary)(hexId, true);
    if (coverage !== 1) {
      scalePolygon(hexId, vertices, coverage);
    } else {
      normalizeLongitudes2(vertices);
    }
    return vertices;
  }
  function flattenPolygon(vertices) {
    const positions = new Float64Array(vertices.length * 2);
    let i7 = 0;
    for (const pt2 of vertices) {
      positions[i7++] = pt2[0];
      positions[i7++] = pt2[1];
    }
    return positions;
  }

  // ../geo-layers/src/a5-layer/a5-layer.ts
  var defaultProps19 = {
    getPentagon: { type: "accessor", value: (d5) => d5.pentagon }
  };
  var A5Layer = class extends GeoCellLayer {
    indexToBounds() {
      const { data, getPentagon } = this.props;
      return {
        data,
        _normalize: false,
        _windingOrder: "CCW",
        positionFormat: "XY",
        getPolygon: (x4, objectInfo) => {
          const pentagon = getPentagon(x4, objectInfo);
          const boundary = cellToBoundary(
            typeof pentagon === "string" ? hexToU64(pentagon) : pentagon,
            { closedRing: true, segments: "auto" }
          );
          return flattenPolygon(boundary);
        }
      };
    }
  };
  A5Layer.layerName = "A5Layer";
  A5Layer.defaultProps = defaultProps19;

  // ../../node_modules/@loaders.gl/xml/dist/lib/xml-utils/uncapitalize.js
  function uncapitalize(str8) {
    return typeof str8 === "string" ? str8.charAt(0).toLowerCase() + str8.slice(1) : str8;
  }
  function uncapitalizeKeys(object) {
    if (Array.isArray(object)) {
      return object.map((element) => uncapitalizeKeys(element));
    }
    if (object && typeof object === "object") {
      const newObject = {};
      for (const [key, value] of Object.entries(object)) {
        newObject[uncapitalize(key)] = uncapitalizeKeys(value);
      }
      return newObject;
    }
    return object;
  }

  // ../../node_modules/@loaders.gl/xml/dist/lib/parsers/parse-xml.js
  var import_fast_xml_parser = __toESM(require_fxp(), 1);
  function parseXMLSync(text, options) {
    if (options?._parser && options._parser !== "fast-xml-parser") {
      throw new Error(options?._parser);
    }
    const fastXMLOptions = {
      // Default FastXML options
      // https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#allowbooleanattributes
      allowBooleanAttributes: true,
      // https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#ignoredeclaration
      ignoreDeclaration: true,
      // https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#removensprefix
      removeNSPrefix: options?.removeNSPrefix,
      // https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#textnodename
      textNodeName: options?.textNodeName,
      // Let's application specify keys that are always arrays
      isArray: (name13, jpath, isLeafNode, isAttribute) => {
        const array = Boolean(options?.arrayPaths?.some((path) => jpath === path));
        return array;
      },
      // Application overrides
      ...options?._fastXML
    };
    const xml = fastParseXML(text, fastXMLOptions);
    return options?.uncapitalizeKeys ? uncapitalizeKeys(xml) : xml;
  }
  function fastParseXML(text, options) {
    const parser = new import_fast_xml_parser.XMLParser({
      ignoreAttributes: false,
      attributeNamePrefix: "",
      ...options
    });
    const parsedXML = parser.parse(text);
    return parsedXML;
  }

  // ../../node_modules/@loaders.gl/xml/dist/xml-loader.js
  var VERSION5 = true ? "4.2.1" : "latest";
  var XMLLoader = {
    dataType: null,
    batchType: null,
    name: "XML",
    id: "xml",
    module: "xml",
    version: VERSION5,
    worker: false,
    extensions: ["xml"],
    mimeTypes: ["application/xml", "text/xml"],
    testText: testXMLFile,
    options: {
      xml: {
        _parser: "fast-xml-parser",
        uncapitalizeKeys: false,
        removeNSPrefix: false,
        textNodeName: "value",
        arrayPaths: []
      }
    },
    parse: async (arrayBuffer2, options) => parseXMLSync(new TextDecoder().decode(arrayBuffer2), {
      ...XMLLoader.options.xml,
      ...options?.xml
    }),
    parseTextSync: (text, options) => parseXMLSync(text, { ...XMLLoader.options.xml, ...options?.xml })
  };
  function testXMLFile(text) {
    return text.startsWith("<?xml");
  }

  // ../../node_modules/@loaders.gl/wms/dist/lib/parsers/wms/parse-wms-error.js
  function parseWMSError(text, options) {
    const parsedXML = XMLLoader.parseTextSync?.(text, options);
    const serviceExceptionXML = parsedXML?.ServiceExceptionReport?.ServiceException || parsedXML?.["ogc:ServiceExceptionReport"]?.["ogc:ServiceException"];
    const message2 = typeof serviceExceptionXML === "string" ? serviceExceptionXML : serviceExceptionXML.value || serviceExceptionXML.code || "Unknown error";
    return message2;
  }

  // ../../node_modules/@loaders.gl/wms/dist/wms-error-loader.js
  var VERSION6 = true ? "4.2.1" : "latest";
  var WMSErrorLoader = {
    dataType: null,
    batchType: null,
    id: "wms-error",
    name: "WMS Error",
    module: "wms",
    version: VERSION6,
    worker: false,
    extensions: ["xml"],
    mimeTypes: ["application/vnd.ogc.se_xml", "application/xml", "text/xml"],
    testText: testXMLFile2,
    options: {
      wms: {
        throwOnError: false
      }
    },
    parse: async (arrayBuffer2, options) => parseTextSync(new TextDecoder().decode(arrayBuffer2), options),
    parseSync: (arrayBuffer2, options) => parseTextSync(new TextDecoder().decode(arrayBuffer2), options),
    parseTextSync: (text, options) => parseTextSync(text, options)
  };
  function testXMLFile2(text) {
    return text.startsWith("<?xml");
  }
  function parseTextSync(text, options) {
    const wmsOptions = { ...WMSErrorLoader.options.wms, ...options?.wms };
    const error = parseWMSError(text, wmsOptions);
    const message2 = wmsOptions.minimalErrors ? error : `WMS Service error: ${error}`;
    if (wmsOptions.throwOnError) {
      throw new Error(message2);
    }
    return message2;
  }

  // ../../node_modules/@loaders.gl/wms/dist/lib/parsers/xml/parse-xml-helpers.js
  function getXMLArray(xmlValue) {
    if (Array.isArray(xmlValue)) {
      return xmlValue;
    }
    if (xmlValue) {
      return [xmlValue];
    }
    return [];
  }
  function getXMLStringArray(xmlValue) {
    const xmlArray = getXMLArray(xmlValue);
    if (xmlArray.length > 0 && xmlArray.every((_3) => typeof _3 === "string")) {
      return xmlArray;
    }
    return [];
  }
  function getXMLFloat(xmlValue, defaultValue2 = void 0) {
    switch (typeof xmlValue) {
      case "number":
        return xmlValue;
      case "string":
        return parseFloat(xmlValue);
      default:
        return void 0;
    }
  }
  function getXMLInteger(xmlValue, defaultValue2 = void 0) {
    switch (typeof xmlValue) {
      case "number":
        return xmlValue;
      case "string":
        return parseInt(xmlValue, 10);
      default:
        return void 0;
    }
  }
  function getXMLBoolean(xmlValue) {
    switch (xmlValue) {
      case "true":
        return true;
      case "false":
        return false;
      case "1":
        return true;
      case "0":
        return false;
      default:
        return false;
    }
  }

  // ../../node_modules/@loaders.gl/wms/dist/lib/parsers/wms/parse-wms-capabilities.js
  function parseWMSCapabilities(xmlText, options) {
    const parsedXML = XMLLoader.parseTextSync?.(xmlText, options);
    const xmlCapabilities = parsedXML.WMT_MS_Capabilities || parsedXML.WMS_Capabilities || parsedXML;
    const capabilities = extractCapabilities(xmlCapabilities);
    if (options?.inheritedLayerProps) {
      for (const layer of capabilities.layers) {
        addInheritedLayerProps(layer, null);
      }
    }
    if (options?.includeRawJSON) {
      capabilities.json = xmlCapabilities;
    }
    if (options?.includeXMLText) {
      capabilities.xml = xmlText;
    }
    return capabilities;
  }
  function extractCapabilities(xml) {
    const capabilities = {
      version: String(xml.version || ""),
      name: String(xml.Service?.Name || "unnamed"),
      title: xml.Service?.Title ? String(xml.Service?.Title) : void 0,
      abstract: xml.Service?.Abstract ? String(xml.Service?.Abstract) : void 0,
      keywords: getXMLStringArray(xml.Service?.KeywordList?.Keyword),
      fees: xml.Service?.Fees ? JSON.stringify(xml.Service?.Fees) : void 0,
      accessConstraints: xml.Service?.AccessConstraints ? JSON.stringify(xml.Service?.AccessConstraints) : void 0,
      layerLimit: getXMLInteger(xml.Service?.LayerLimit),
      maxWidth: getXMLInteger(xml.Service?.maxWidth),
      maxHeight: getXMLInteger(xml.Service?.maxHeight),
      layers: [],
      requests: extractRequests(xml.Capability?.Request),
      exceptions: extractExceptions(xml.Exception)
      // contact field is a mess of largely irrelevant information, put it last
      // contact: xml.Service?.Contact ? JSON.stringify(xml.Service?.Contact) : undefined,
    };
    const xmlLayers = getXMLArray(xml.Capability?.Layer);
    for (const xmlSubLayer of xmlLayers) {
      capabilities.layers.push(extractLayer(xmlSubLayer));
    }
    for (const [key, value] of Object.entries(capabilities)) {
      if (value === void 0) {
        delete capabilities[key];
      }
    }
    return capabilities;
  }
  function extractRequests(xmlRequests) {
    const requests = {};
    for (const [name13, xmlRequest] of Object.entries(xmlRequests || {})) {
      const mimeTypes = getXMLStringArray(xmlRequest?.Format);
      requests[name13] = { mimeTypes };
    }
    return requests;
  }
  function extractExceptions(xmlException) {
    const xmlExceptionFormats = getXMLArray(xmlException?.Format);
    if (xmlExceptionFormats.length > 0) {
      return {
        mimeTypes: getXMLStringArray(xmlException)
      };
    }
    return void 0;
  }
  function extractLayer(xmlLayer) {
    const layer = {
      // All layers must have a title
      title: String(xmlLayer?.Title || ""),
      // Name is required only if renderable
      name: xmlLayer?.Name && String(xmlLayer?.Name),
      abstract: xmlLayer?.Name && String(xmlLayer?.Abstract),
      keywords: getXMLStringArray(xmlLayer.KeywordList?.Keyword)
    };
    const crs2 = xmlLayer?.CRS || xmlLayer?.SRS;
    if (crs2 && Array.isArray(crs2) && crs2.every((_3) => typeof _3 === "string")) {
      layer.crs = crs2;
    }
    let geographicBoundingBox = xmlLayer?.EX_GeographicBoundingBox && extractEXBoundingBox(xmlLayer?.EX_GeographicBoundingBox);
    if (geographicBoundingBox) {
      layer.geographicBoundingBox = geographicBoundingBox;
    }
    geographicBoundingBox = xmlLayer?.LatLonBoundingBox && extractLatLonBoundingBox(xmlLayer?.LatLonBoundingBox);
    if (geographicBoundingBox) {
      layer.geographicBoundingBox = geographicBoundingBox;
    }
    const boundingBoxes = xmlLayer?.BoundingBox && extractWMSBoundingBoxes(xmlLayer?.BoundingBox);
    if (boundingBoxes && boundingBoxes.length > 0) {
      layer.boundingBoxes = boundingBoxes;
    }
    const xmlDimensions = getXMLArray(xmlLayer?.Dimension);
    const dimensions = xmlDimensions.map((xml) => extractDimension(xml));
    if (dimensions.length) {
      layer.dimensions = dimensions;
    }
    if (xmlLayer?.opaque) {
      layer.opaque = getXMLBoolean(xmlLayer?.opaque);
    }
    if (xmlLayer?.cascaded) {
      layer.cascaded = getXMLBoolean(xmlLayer?.cascaded);
    }
    if (xmlLayer?.queryable) {
      layer.queryable = getXMLBoolean(xmlLayer?.queryable);
    }
    const xmlLayers = getXMLArray(xmlLayer?.Layer);
    const layers = [];
    for (const xmlSubLayer of xmlLayers) {
      layers.push(extractLayer(xmlSubLayer));
    }
    if (layers.length > 0) {
      layer.layers = layers;
    }
    for (const [key, value] of Object.entries(layer)) {
      if (value === void 0) {
        delete layer[key];
      }
    }
    return layer;
  }
  function extractEXBoundingBox(xmlBoundingBox) {
    const { westBoundLongitude: w5, northBoundLatitude: n4, eastBoundLongitude: e6, southBoundLatitude: s5 } = xmlBoundingBox;
    return [
      [w5, s5],
      [e6, n4]
    ];
  }
  function extractLatLonBoundingBox(xmlBoundingBox) {
    const { minx, miny, maxx, maxy } = xmlBoundingBox;
    return [
      [minx, miny],
      [maxx, maxy]
    ];
  }
  function extractWMSBoundingBoxes(xmlBoundingBoxes) {
    const xmlBoxes = getXMLArray(xmlBoundingBoxes);
    return xmlBoxes.map((xmlBox) => extractWMSBoundingBox(xmlBox));
  }
  function extractWMSBoundingBox(xmlBoundingBox) {
    const { CRS: CRS2, SRS, minx, miny, maxx, maxy, resx, resy } = xmlBoundingBox;
    const boundingBox = {
      // CRS in 1.3.0, SRS in 1.1.1
      crs: CRS2 || SRS,
      boundingBox: [
        [getXMLFloat(minx), getXMLFloat(miny)],
        [getXMLFloat(maxx), getXMLFloat(maxy)]
      ]
    };
    if (resx) {
      boundingBox.xResolution = resx;
    }
    if (resy) {
      boundingBox.yResolution = resy;
    }
    return boundingBox;
  }
  function extractDimension(xmlDimension) {
    const { name: name13, units, value: extent } = xmlDimension;
    const dimension = { name: name13, units, extent };
    if (xmlDimension.unitSymbol) {
      dimension.unitSymbol = xmlDimension.unitSymbol;
    }
    if (xmlDimension.default) {
      dimension.defaultValue = xmlDimension.default;
    }
    if (xmlDimension.multipleValues) {
      dimension.multipleValues = getXMLBoolean(xmlDimension.multipleValues);
    }
    if (xmlDimension.nearestValue) {
      dimension.nearestValue = getXMLBoolean(xmlDimension.nearestValue);
    }
    if (xmlDimension.current) {
      dimension.current = getXMLBoolean(xmlDimension.current);
    }
    return dimension;
  }
  function addInheritedLayerProps(layer, parent) {
    if (parent?.geographicBoundingBox && !layer.geographicBoundingBox) {
      layer.geographicBoundingBox = [...parent.geographicBoundingBox];
    }
    if (parent?.crs && !layer.crs) {
      layer.crs = [...parent.crs];
    }
    if (parent?.boundingBoxes && !layer.boundingBoxes) {
      layer.boundingBoxes = [...parent.boundingBoxes];
    }
    if (parent?.dimensions && !layer.dimensions) {
      layer.dimensions = [...parent.dimensions];
    }
    for (const subLayer of layer.layers || []) {
      addInheritedLayerProps(subLayer, layer);
    }
  }

  // ../../node_modules/@loaders.gl/wms/dist/wms-capabilities-loader.js
  var VERSION7 = true ? "4.2.1" : "latest";
  var WMSCapabilitiesLoader = {
    dataType: null,
    batchType: null,
    id: "wms-capabilities",
    name: "WMS Capabilities",
    module: "wms",
    version: VERSION7,
    worker: false,
    extensions: ["xml"],
    mimeTypes: ["application/vnd.ogc.wms_xml", "application/xml", "text/xml"],
    testText: testXMLFile3,
    options: {
      wms: {}
    },
    parse: async (arrayBuffer2, options) => (
      // TODO pass in XML options
      parseWMSCapabilities(new TextDecoder().decode(arrayBuffer2), options?.wms)
    ),
    parseTextSync: (text, options) => (
      // TODO pass in XML options
      parseWMSCapabilities(text, options?.wms)
    )
  };
  function testXMLFile3(text) {
    return text.startsWith("<?xml");
  }

  // ../../node_modules/@loaders.gl/wms/dist/lib/parsers/wms/parse-wms-features.js
  function parseWMSFeatureInfo(text, options) {
    const parsedXML = XMLLoader.parseTextSync?.(text, options);
    const xmlFeatureInfo = parsedXML.FeatureInfoResponse?.FIELDS || [];
    const xmlFeatures = Array.isArray(xmlFeatureInfo) ? xmlFeatureInfo : [xmlFeatureInfo];
    return {
      features: xmlFeatures.map((xmlFeature) => extractFeature(xmlFeature))
    };
  }
  function extractFeature(xmlFeature) {
    const xmlFields = xmlFeature || {};
    return {
      attributes: xmlFields,
      type: "",
      bounds: { bottom: 0, top: 0, left: 0, right: 0 }
    };
  }

  // ../../node_modules/@loaders.gl/wms/dist/wip/wms-feature-info-loader.js
  var WMSFeatureInfoLoader = {
    ...WMSCapabilitiesLoader,
    dataType: null,
    id: "wms-feature-info",
    name: "WMS FeatureInfo",
    parse: async (arrayBuffer2, options) => parseWMSFeatureInfo(new TextDecoder().decode(arrayBuffer2), options),
    parseTextSync: (text, options) => parseWMSFeatureInfo(text, options)
  };

  // ../../node_modules/@loaders.gl/wms/dist/lib/parsers/wms/parse-wms-layer-description.js
  function parseWMSLayerDescription(text, options) {
    const parsedXML = XMLLoader.parseTextSync?.(text, options);
    return parsedXML;
  }

  // ../../node_modules/@loaders.gl/wms/dist/wip/wms-layer-description-loader.js
  var WMSLayerDescriptionLoader = {
    ...WMSCapabilitiesLoader,
    dataType: null,
    id: "wms-layer-description",
    name: "WMS DescribeLayer",
    parse: async (arrayBuffer2, options) => parseWMSLayerDescription(new TextDecoder().decode(arrayBuffer2), options),
    parseTextSync: (text, options) => parseWMSLayerDescription(text, options)
  };

  // ../../node_modules/@loaders.gl/wms/dist/lib/services/create-image-service.js
  function createImageService(props, services) {
    const { type = "auto" } = props;
    const service = type === "auto" ? guessServiceType(props.url, services) : getServiceOfType(type, services);
    if (!service) {
      throw new Error("Not a valid image source type");
    }
    return service.create(props);
  }
  function getServiceOfType(type, services) {
    for (const service of services) {
      if (service.type === type) {
        return service;
      }
    }
    return null;
  }
  function guessServiceType(url, services) {
    for (const service of services) {
      if (service.testURL && service.testURL(url)) {
        return service;
      }
    }
    return null;
  }

  // ../../node_modules/@loaders.gl/wms/dist/services/ogc/wms-service.js
  var WMSService = {
    type: "wms",
    testURL: (url) => url.toLowerCase().includes("wms"),
    create: (props) => new WMSSource(props)
  };
  var WMSSource = class extends ImageSource {
    /** Base URL to the service */
    url;
    data;
    /** In WMS 1.3.0, replaces references to EPSG:4326 with CRS:84. But not always supported. Default: false */
    substituteCRS84;
    /** In WMS 1.3.0, flips x,y (lng, lat) coordinates for the supplied coordinate systems. Default: ['ESPG:4326'] */
    flipCRS;
    /** Default static WMS parameters */
    wmsParameters;
    /** Default static vendor parameters */
    vendorParameters;
    capabilities = null;
    /** Create a WMSSource */
    constructor(props) {
      super(props);
      this.url = props.url;
      this.data = props.url;
      this.substituteCRS84 = props.substituteCRS84 ?? false;
      this.flipCRS = ["EPSG:4326"];
      this.wmsParameters = {
        layers: void 0,
        query_layers: void 0,
        styles: void 0,
        version: "1.3.0",
        crs: "EPSG:4326",
        format: "image/png",
        info_format: "text/plain",
        transparent: void 0,
        time: void 0,
        elevation: void 0,
        ...props.wmsParameters
      };
      this.vendorParameters = props.vendorParameters || {};
    }
    // ImageService implementation
    async getMetadata() {
      const capabilities = await this.getCapabilities();
      return this.normalizeMetadata(capabilities);
    }
    async getImage(parameters2) {
      const { boundingBox, bbox, ...rest } = parameters2;
      const wmsParameters = {
        bbox: boundingBox ? [...boundingBox[0], ...boundingBox[1]] : bbox,
        ...rest
      };
      return await this.getMap(wmsParameters);
    }
    normalizeMetadata(capabilities) {
      return capabilities;
    }
    // WMS Service API Stubs
    /** Get Capabilities */
    async getCapabilities(wmsParameters, vendorParameters) {
      const url = this.getCapabilitiesURL(wmsParameters, vendorParameters);
      const response = await this.fetch(url);
      const arrayBuffer2 = await response.arrayBuffer();
      this._checkResponse(response, arrayBuffer2);
      const capabilities = await WMSCapabilitiesLoader.parse(arrayBuffer2, this.loadOptions);
      this.capabilities = capabilities;
      return capabilities;
    }
    /** Get a map image */
    async getMap(wmsParameters, vendorParameters) {
      const url = this.getMapURL(wmsParameters, vendorParameters);
      const response = await this.fetch(url);
      const arrayBuffer2 = await response.arrayBuffer();
      this._checkResponse(response, arrayBuffer2);
      try {
        return await ImageLoader.parse(arrayBuffer2, this.loadOptions);
      } catch {
        throw this._parseError(arrayBuffer2);
      }
    }
    /** Get Feature Info for a coordinate */
    async getFeatureInfo(wmsParameters, vendorParameters) {
      const url = this.getFeatureInfoURL(wmsParameters, vendorParameters);
      const response = await this.fetch(url);
      const arrayBuffer2 = await response.arrayBuffer();
      this._checkResponse(response, arrayBuffer2);
      return await WMSFeatureInfoLoader.parse(arrayBuffer2, this.loadOptions);
    }
    /** Get Feature Info for a coordinate */
    async getFeatureInfoText(wmsParameters, vendorParameters) {
      const url = this.getFeatureInfoURL(wmsParameters, vendorParameters);
      const response = await this.fetch(url);
      const arrayBuffer2 = await response.arrayBuffer();
      this._checkResponse(response, arrayBuffer2);
      return new TextDecoder().decode(arrayBuffer2);
    }
    /** Get more information about a layer */
    async describeLayer(wmsParameters, vendorParameters) {
      const url = this.describeLayerURL(wmsParameters, vendorParameters);
      const response = await this.fetch(url);
      const arrayBuffer2 = await response.arrayBuffer();
      this._checkResponse(response, arrayBuffer2);
      return await WMSLayerDescriptionLoader.parse(arrayBuffer2, this.loadOptions);
    }
    /** Get an image with a semantic legend */
    async getLegendGraphic(wmsParameters, vendorParameters) {
      const url = this.getLegendGraphicURL(wmsParameters, vendorParameters);
      const response = await this.fetch(url);
      const arrayBuffer2 = await response.arrayBuffer();
      this._checkResponse(response, arrayBuffer2);
      try {
        return await ImageLoader.parse(arrayBuffer2, this.loadOptions);
      } catch {
        throw this._parseError(arrayBuffer2);
      }
    }
    // Typed URL creators
    // For applications that want full control of fetching and parsing
    /** Generate a URL for the GetCapabilities request */
    getCapabilitiesURL(wmsParameters, vendorParameters) {
      const options = {
        version: this.wmsParameters.version,
        ...wmsParameters
      };
      return this._getWMSUrl("GetCapabilities", options, vendorParameters);
    }
    /** Generate a URL for the GetMap request */
    getMapURL(wmsParameters, vendorParameters) {
      wmsParameters = this._getWMS130Parameters(wmsParameters);
      const options = {
        version: this.wmsParameters.version,
        format: this.wmsParameters.format,
        transparent: this.wmsParameters.transparent,
        time: this.wmsParameters.time,
        elevation: this.wmsParameters.elevation,
        layers: this.wmsParameters.layers,
        styles: this.wmsParameters.styles,
        crs: this.wmsParameters.crs,
        // bbox: [-77.87304, 40.78975, -77.85828, 40.80228],
        // width: 1200,
        // height: 900,
        ...wmsParameters
      };
      return this._getWMSUrl("GetMap", options, vendorParameters);
    }
    /** Generate a URL for the GetFeatureInfo request */
    getFeatureInfoURL(wmsParameters, vendorParameters) {
      wmsParameters = this._getWMS130Parameters(wmsParameters);
      const { boundingBox, bbox } = wmsParameters;
      wmsParameters.bbox = boundingBox ? [...boundingBox[0], ...boundingBox[1]] : bbox;
      const options = {
        version: this.wmsParameters.version,
        // query_layers: [],
        // format: this.wmsParameters.format,
        info_format: this.wmsParameters.info_format,
        layers: this.wmsParameters.layers,
        query_layers: this.wmsParameters.query_layers,
        styles: this.wmsParameters.styles,
        crs: this.wmsParameters.crs,
        // bbox: [-77.87304, 40.78975, -77.85828, 40.80228],
        // width: 1200,
        // height: 900,
        // x: undefined!,
        // y: undefined!,
        ...wmsParameters
      };
      return this._getWMSUrl("GetFeatureInfo", options, vendorParameters);
    }
    /** Generate a URL for the GetFeatureInfo request */
    describeLayerURL(wmsParameters, vendorParameters) {
      const options = {
        version: this.wmsParameters.version,
        ...wmsParameters
      };
      return this._getWMSUrl("DescribeLayer", options, vendorParameters);
    }
    getLegendGraphicURL(wmsParameters, vendorParameters) {
      const options = {
        version: this.wmsParameters.version,
        // format?
        ...wmsParameters
      };
      return this._getWMSUrl("GetLegendGraphic", options, vendorParameters);
    }
    // INTERNAL METHODS
    _parseWMSUrl(url) {
      const [baseUrl, search] = url.split("?");
      const searchParams = search.split("&");
      const parameters2 = {};
      for (const parameter of searchParams) {
        const [key, value] = parameter.split("=");
        parameters2[key] = value;
      }
      return { url: baseUrl, parameters: parameters2 };
    }
    /**
     * Generate a URL with parameters
     * @note case _getWMSUrl may need to be overridden to handle certain backends?
     * @note at the moment, only URLs with parameters are supported (no XML payloads)
     * */
    _getWMSUrl(request, wmsParameters, vendorParameters) {
      let url = this.url;
      let first = true;
      const allParameters = {
        service: "WMS",
        version: wmsParameters.version,
        request,
        ...wmsParameters,
        ...this.vendorParameters,
        ...vendorParameters
      };
      const IGNORE_EMPTY_KEYS = ["transparent", "time", "elevation"];
      for (const [key, value] of Object.entries(allParameters)) {
        if (!IGNORE_EMPTY_KEYS.includes(key) || value) {
          url += first ? "?" : "&";
          first = false;
          url += this._getURLParameter(key, value, wmsParameters);
        }
      }
      return encodeURI(url);
    }
    _getWMS130Parameters(wmsParameters) {
      const newParameters = { ...wmsParameters };
      if (newParameters.srs) {
        newParameters.crs = newParameters.crs || newParameters.srs;
        delete newParameters.srs;
      }
      return newParameters;
    }
    // eslint-disable-next-line complexity
    _getURLParameter(key, value, wmsParameters) {
      switch (key) {
        case "crs":
          if (wmsParameters.version !== "1.3.0") {
            key = "srs";
          } else if (this.substituteCRS84 && value === "EPSG:4326") {
            value = "CRS:84";
          }
          break;
        case "srs":
          if (wmsParameters.version === "1.3.0") {
            key = "crs";
          }
          break;
        case "bbox":
          const bbox = this._flipBoundingBox(value, wmsParameters);
          if (bbox) {
            value = bbox;
          }
          break;
        case "x":
          if (wmsParameters.version === "1.3.0") {
            key = "i";
          }
          break;
        case "y":
          if (wmsParameters.version === "1.3.0") {
            key = "j";
          }
          break;
        default:
      }
      key = key.toUpperCase();
      return Array.isArray(value) ? `${key}=${value.join(",")}` : `${key}=${value ? String(value) : ""}`;
    }
    /** Coordinate order is flipped for certain CRS in WMS 1.3.0 */
    _flipBoundingBox(bboxValue, wmsParameters) {
      if (!Array.isArray(bboxValue) || bboxValue.length !== 4) {
        return null;
      }
      const flipCoordinates = (
        // Only affects WMS 1.3.0
        wmsParameters.version === "1.3.0" && // Flip if we are dealing with a CRS that was flipped in 1.3.0
        this.flipCRS.includes(wmsParameters.crs || "") && // Don't flip if we are subsituting EPSG:4326 with CRS:84
        !(this.substituteCRS84 && wmsParameters.crs === "EPSG:4326")
      );
      const bbox = bboxValue;
      return flipCoordinates ? [bbox[1], bbox[0], bbox[3], bbox[2]] : bbox;
    }
    /** Fetches an array buffer and checks the response (boilerplate reduction) */
    async _fetchArrayBuffer(url) {
      const response = await this.fetch(url);
      const arrayBuffer2 = await response.arrayBuffer();
      this._checkResponse(response, arrayBuffer2);
      return arrayBuffer2;
    }
    /** Checks for and parses a WMS XML formatted ServiceError and throws an exception */
    _checkResponse(response, arrayBuffer2) {
      const contentType = response.headers["content-type"];
      if (!response.ok || WMSErrorLoader.mimeTypes.includes(contentType)) {
        const loadOptions = mergeLoaderOptions(this.loadOptions, {
          wms: { throwOnError: true }
        });
        const error = WMSErrorLoader.parseSync?.(arrayBuffer2, loadOptions);
        throw new Error(error);
      }
    }
    /** Error situation detected */
    _parseError(arrayBuffer2) {
      const error = WMSErrorLoader.parseSync?.(arrayBuffer2, this.loadOptions);
      return new Error(error);
    }
  };

  // ../../node_modules/@loaders.gl/wms/dist/lib/services/image-service.js
  var ImageService = class extends ImageSource {
    constructor(props) {
      super(props);
    }
    // IMAGE SOURCE API
    async getMetadata() {
      throw new Error("ImageSource.getMetadata not implemented");
    }
    async getImage(parameters2) {
      const granularParameters = this.getGranularParameters(parameters2);
      const url = this.getURLFromTemplate(granularParameters);
      const response = await this.fetch(url);
      const arrayBuffer2 = await response.arrayBuffer();
      return await ImageLoader.parse(arrayBuffer2);
    }
    // HELPERS
    /** Break up bounding box in east, north, south, west */
    getGranularParameters(parameters2) {
      const [[east, north], [west, south]] = parameters2.boundingBox;
      return { ...parameters2, east, north, south, west };
    }
    /** Supports both ${} and {} notations */
    getURLFromTemplate(parameters2) {
      let url = this.props.url;
      for (const [key, value] of Object.entries(parameters2)) {
        url = url.replace(`\${${key}}`, String(value));
        url = url.replace(`{${key}}`, String(value));
      }
      return url;
    }
  };
  __publicField(ImageService, "type", "template");
  __publicField(ImageService, "testURL", (url) => url.toLowerCase().includes("{"));

  // ../../node_modules/@loaders.gl/wms/dist/services/arcgis/arcgis-image-service.js
  var ArcGISImageSource = class extends ImageService {
    data;
    constructor(props) {
      super(props);
      this.data = props.url;
    }
    // ImageSource (normalized endpoints)
    async getMetadata() {
      return await this.metadata();
    }
    async getImage(parameters2) {
      throw new Error("not implemented");
    }
    // ImageServer endpoints
    async metadata() {
      throw new Error("not implemented");
    }
    /**
     * Form a URL to an ESRI ImageServer
     // https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer/exportImage?bbox=${bounds[0]},${bounds[1]},${bounds[2]},${bounds[3]}&bboxSR=4326&size=${width},${height}&imageSR=102100&time=&format=jpgpng&pixelType=U8&noData=&noDataInterpretation=esriNoDataMatchAny&interpolation=+RSP_NearestNeighbor&compression=&compressionQuality=&bandIds=&mosaicRule=&renderingRule=&f=image`,
     */
    exportImage(options) {
      throw new Error("not implemented");
    }
    // URL creators
    metadataURL(options) {
      return `${this.props.url}?f=pjson`;
    }
    /**
     * Form a URL to an ESRI ImageServer
     // https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer/exportImage?
     //   bbox=${bounds[0]},${bounds[1]},${bounds[2]},${bounds[3]}&bboxSR=4326&
     //   size=${width},${height}&imageSR=102100&time=&format=jpgpng&pixelType=U8&
     //   noData=&noDataInterpretation=esriNoDataMatchAny&interpolation=+RSP_NearestNeighbor&compression=&
     //   compressionQuality=&bandIds=&mosaicRule=&renderingRule=&
     //   f=image
     */
    exportImageURL(options) {
      const bbox = `bbox=${options.bbox[0]},${options.bbox[1]},${options.bbox[2]},${options.bbox[3]}`;
      const size = `size=${options.width},${options.height}`;
      const arcgisOptions = { ...options, bbox, size };
      delete arcgisOptions.width;
      delete arcgisOptions.height;
      return this.getUrl("exportImage", arcgisOptions);
    }
    // INTERNAL METHODS
    /**
     * @note protected, since perhaps getWMSUrl may need to be overridden to handle certain backends?
     * @note if override is common, maybe add a callback prop?
     * */
    getUrl(path, options, extra) {
      let url = `${this.props.url}/${path}`;
      let first = true;
      for (const [key, value] of Object.entries(options)) {
        url += first ? "?" : "&";
        first = false;
        if (Array.isArray(value)) {
          url += `${key.toUpperCase()}=${value.join(",")}`;
        } else {
          url += `${key.toUpperCase()}=${value ? String(value) : ""}`;
        }
      }
      return url;
    }
    /** Checks for and parses a WMS XML formatted ServiceError and throws an exception */
    async checkResponse(response) {
      if (!response.ok) {
        throw new Error("error");
      }
    }
  };
  var ArcGISImageService = {
    type: "arcgis-image-server",
    testURL: (url) => url.toLowerCase().includes("ImageServer"),
    create: (props) => new ArcGISImageSource(props)
  };

  // ../../node_modules/@loaders.gl/wms/dist/services/create-image-source.js
  var SERVICES = [WMSService, ArcGISImageService];
  function createImageSource(props) {
    return createImageService(props, SERVICES);
  }

  // ../geo-layers/src/wms-layer/utils.ts
  var HALF_EARTH_CIRCUMFERENCE = 6378137 * Math.PI;
  function WGS84ToPseudoMercator(coord) {
    const mercator = lngLatToWorld(coord);
    mercator[0] = (mercator[0] / 256 - 1) * HALF_EARTH_CIRCUMFERENCE;
    mercator[1] = (mercator[1] / 256 - 1) * HALF_EARTH_CIRCUMFERENCE;
    return mercator;
  }

  // ../geo-layers/src/wms-layer/wms-layer.ts
  var defaultProps20 = {
    id: "imagery-layer",
    data: "",
    serviceType: "auto",
    srs: "auto",
    layers: { type: "array", compare: true, value: [] },
    onMetadataLoad: { type: "function", value: () => {
    } },
    // eslint-disable-next-line
    onMetadataLoadError: { type: "function", value: console.error },
    onImageLoadStart: { type: "function", value: () => {
    } },
    onImageLoad: { type: "function", value: () => {
    } },
    onImageLoadError: {
      type: "function",
      compare: false,
      // eslint-disable-next-line
      value: (requestId, error) => console.error(error, requestId)
    }
  };
  var WMSLayer = class extends CompositeLayer {
    /** Returns true if all async resources are loaded */
    get isLoaded() {
      return this.state?.loadCounter === 0 && super.isLoaded;
    }
    /** Lets deck.gl know that we want viewport change events */
    shouldUpdateState() {
      return true;
    }
    initializeState() {
      this.state._nextRequestId = 0;
      this.state.lastRequestId = -1;
      this.state.loadCounter = 0;
    }
    updateState({ changeFlags, props, oldProps }) {
      const { viewport } = this.context;
      if (changeFlags.dataChanged || props.serviceType !== oldProps.serviceType) {
        this.state.imageSource = this._createImageSource(props);
        this._loadMetadata();
        this.debounce(() => this.loadImage(viewport, "image source changed"), 0);
      } else if (!deepEqual2(props.layers, oldProps.layers, 1)) {
        this.debounce(() => this.loadImage(viewport, "layers changed"), 0);
      } else if (changeFlags.viewportChanged) {
        this.debounce(() => this.loadImage(viewport, "viewport changed"));
      }
    }
    finalizeState() {
    }
    renderLayers() {
      const { bounds, image, lastRequestParameters } = this.state;
      return image && new BitmapLayer({
        ...this.getSubLayerProps({ id: "bitmap" }),
        _imageCoordinateSystem: lastRequestParameters.srs === "EPSG:4326" ? COORDINATE_SYSTEM.LNGLAT : COORDINATE_SYSTEM.CARTESIAN,
        bounds,
        image
      });
    }
    async getFeatureInfoText(x4, y5) {
      const { lastRequestParameters } = this.state;
      if (lastRequestParameters) {
        const featureInfo = await this.state.imageSource.getFeatureInfoText?.({
          ...lastRequestParameters,
          query_layers: lastRequestParameters.layers,
          x: x4,
          y: y5,
          info_format: "application/vnd.ogc.gml"
        });
        return featureInfo;
      }
      return "";
    }
    _createImageSource(props) {
      if (props.data instanceof ImageSource) {
        return props.data;
      }
      if (typeof props.data === "string") {
        return createImageSource({
          url: props.data,
          loadOptions: props.loadOptions,
          type: props.serviceType
        });
      }
      throw new Error("invalid image source in props.data");
    }
    /** Run a getMetadata on the image service */
    async _loadMetadata() {
      const { imageSource } = this.state;
      try {
        this.state.loadCounter++;
        const metadata = await imageSource.getMetadata();
        if (this.state.imageSource === imageSource) {
          this.getCurrentLayer()?.props.onMetadataLoad(metadata);
        }
      } catch (error) {
        this.getCurrentLayer()?.props.onMetadataLoadError(error);
      } finally {
        this.state.loadCounter--;
      }
    }
    /** Load an image */
    async loadImage(viewport, reason) {
      const { layers, serviceType } = this.props;
      if (serviceType === "wms" && layers.length === 0) {
        return;
      }
      const bounds = viewport.getBounds();
      const { width, height } = viewport;
      const requestId = this.getRequestId();
      let { srs } = this.props;
      if (srs === "auto") {
        srs = viewport.resolution ? "EPSG:4326" : "EPSG:3857";
      }
      const requestParams = {
        width,
        height,
        boundingBox: [
          [bounds[0], bounds[1]],
          [bounds[2], bounds[3]]
        ],
        layers,
        crs: srs
      };
      if (srs === "EPSG:3857") {
        const min7 = WGS84ToPseudoMercator([bounds[0], bounds[1]]);
        const max7 = WGS84ToPseudoMercator([bounds[2], bounds[3]]);
        requestParams.boundingBox = [min7, max7];
      }
      try {
        this.state.loadCounter++;
        this.props.onImageLoadStart(requestId);
        const image = await this.state.imageSource.getImage(requestParams);
        if (this.state.lastRequestId < requestId) {
          this.getCurrentLayer()?.props.onImageLoad(requestId);
          this.setState({
            image,
            bounds,
            lastRequestParameters: requestParams,
            lastRequestId: requestId
          });
        }
      } catch (error) {
        this.raiseError(error, "Load image");
        this.getCurrentLayer()?.props.onImageLoadError(requestId, error);
      } finally {
        this.state.loadCounter--;
      }
    }
    // HELPERS
    /** Global counter for issuing unique request ids */
    getRequestId() {
      return this.state._nextRequestId++;
    }
    /** Runs an action in the future, cancels it if the new action is issued before it executes */
    debounce(fn, ms = 500) {
      clearTimeout(this.state._timeoutId);
      this.state._timeoutId = setTimeout(() => fn(), ms);
    }
  };
  WMSLayer.layerName = "WMSLayer";
  WMSLayer.defaultProps = defaultProps20;

  // ../geo-layers/src/great-circle-layer/great-circle-layer.ts
  var defaultProps21 = {
    getHeight: { type: "accessor", value: 0 },
    greatCircle: true
  };
  var GreatCircleLayer = class extends ArcLayer {
  };
  GreatCircleLayer.layerName = "GreatCircleLayer";
  GreatCircleLayer.defaultProps = defaultProps21;

  // ../geo-layers/src/s2-layer/s2-geometry.ts
  var import_long = __toESM(require_long(), 1);
  var FACE_BITS = 3;
  var MAX_LEVEL = 30;
  var POS_BITS = 2 * MAX_LEVEL + 1;
  var RADIAN_TO_DEGREE = 180 / Math.PI;
  function IJToST(ij, order, offsets) {
    const maxSize = 1 << order;
    return [(ij[0] + offsets[0]) / maxSize, (ij[1] + offsets[1]) / maxSize];
  }
  function singleSTtoUV(st2) {
    if (st2 >= 0.5) {
      return 1 / 3 * (4 * st2 * st2 - 1);
    }
    return 1 / 3 * (1 - 4 * (1 - st2) * (1 - st2));
  }
  function STToUV(st2) {
    return [singleSTtoUV(st2[0]), singleSTtoUV(st2[1])];
  }
  function FaceUVToXYZ(face, [u6, v5]) {
    switch (face) {
      case 0:
        return [1, u6, v5];
      case 1:
        return [-u6, 1, v5];
      case 2:
        return [-u6, -v5, 1];
      case 3:
        return [-1, -v5, -u6];
      case 4:
        return [v5, -1, -u6];
      case 5:
        return [v5, u6, -1];
      default:
        throw new Error("Invalid face");
    }
  }
  function XYZToLngLat([x4, y5, z4]) {
    const lat = Math.atan2(z4, Math.sqrt(x4 * x4 + y5 * y5));
    const lng = Math.atan2(y5, x4);
    return [lng * RADIAN_TO_DEGREE, lat * RADIAN_TO_DEGREE];
  }
  function toHilbertQuadkey(idS) {
    let bin = import_long.default.fromString(idS, true, 10).toString(2);
    while (bin.length < FACE_BITS + POS_BITS) {
      bin = "0" + bin;
    }
    const lsbIndex = bin.lastIndexOf("1");
    const faceB = bin.substring(0, 3);
    const posB = bin.substring(3, lsbIndex);
    const levelN = posB.length / 2;
    const faceS = import_long.default.fromString(faceB, true, 2).toString(10);
    let posS = import_long.default.fromString(posB, true, 2).toString(4);
    while (posS.length < levelN) {
      posS = "0" + posS;
    }
    return `${faceS}/${posS}`;
  }
  function rotateAndFlipQuadrant(n4, point, rx, ry) {
    if (ry === 0) {
      if (rx === 1) {
        point[0] = n4 - 1 - point[0];
        point[1] = n4 - 1 - point[1];
      }
      const x4 = point[0];
      point[0] = point[1];
      point[1] = x4;
    }
  }
  function FromHilbertQuadKey(hilbertQuadkey) {
    const parts = hilbertQuadkey.split("/");
    const face = parseInt(parts[0], 10);
    const position = parts[1];
    const maxLevel = position.length;
    const point = [0, 0];
    let level;
    for (let i7 = maxLevel - 1; i7 >= 0; i7--) {
      level = maxLevel - i7;
      const bit = position[i7];
      let rx = 0;
      let ry = 0;
      if (bit === "1") {
        ry = 1;
      } else if (bit === "2") {
        rx = 1;
        ry = 1;
      } else if (bit === "3") {
        rx = 1;
      }
      const val2 = Math.pow(2, level - 1);
      rotateAndFlipQuadrant(val2, point, rx, ry);
      point[0] += val2 * rx;
      point[1] += val2 * ry;
    }
    if (face % 2 === 1) {
      const t5 = point[0];
      point[0] = point[1];
      point[1] = t5;
    }
    return { face, ij: point, level };
  }

  // ../geo-layers/src/s2-layer/s2-utils.ts
  var import_long2 = __toESM(require_long(), 1);
  function getIdFromToken(token) {
    const paddedToken = token.padEnd(16, "0");
    return import_long2.default.fromString(paddedToken, 16);
  }
  var MAX_RESOLUTION2 = 100;
  function getGeoBounds({
    face,
    ij,
    level
  }) {
    const offsets = [
      [0, 0],
      [0, 1],
      [1, 1],
      [1, 0],
      [0, 0]
    ];
    const resolution = Math.max(1, Math.ceil(MAX_RESOLUTION2 * Math.pow(2, -level)));
    const result = new Float64Array(4 * resolution * 2 + 2);
    let ptIndex = 0;
    let prevLng = 0;
    for (let i7 = 0; i7 < 4; i7++) {
      const offset = offsets[i7].slice(0);
      const nextOffset = offsets[i7 + 1];
      const stepI = (nextOffset[0] - offset[0]) / resolution;
      const stepJ = (nextOffset[1] - offset[1]) / resolution;
      for (let j4 = 0; j4 < resolution; j4++) {
        offset[0] += stepI;
        offset[1] += stepJ;
        const st2 = IJToST(ij, level, offset);
        const uv = STToUV(st2);
        const xyz = FaceUVToXYZ(face, uv);
        const lngLat = XYZToLngLat(xyz);
        if (Math.abs(lngLat[1]) > 89.999) {
          lngLat[0] = prevLng;
        }
        const deltaLng = lngLat[0] - prevLng;
        lngLat[0] += deltaLng > 180 ? -360 : deltaLng < -180 ? 360 : 0;
        result[ptIndex++] = lngLat[0];
        result[ptIndex++] = lngLat[1];
        prevLng = lngLat[0];
      }
    }
    result[ptIndex++] = result[0];
    result[ptIndex++] = result[1];
    return result;
  }
  function getS2QuadKey(token) {
    if (typeof token === "string") {
      if (token.indexOf("/") > 0) {
        return token;
      }
      token = getIdFromToken(token);
    }
    return toHilbertQuadkey(token.toString());
  }
  function getS2Polygon(token) {
    const key = getS2QuadKey(token);
    const s2cell = FromHilbertQuadKey(key);
    return getGeoBounds(s2cell);
  }

  // ../geo-layers/src/s2-layer/s2-layer.ts
  var defaultProps22 = {
    getS2Token: { type: "accessor", value: (d5) => d5.token }
  };
  var S2Layer = class extends GeoCellLayer {
    indexToBounds() {
      const { data, getS2Token } = this.props;
      return {
        data,
        _normalize: false,
        positionFormat: "XY",
        getPolygon: (x4, objectInfo) => getS2Polygon(getS2Token(x4, objectInfo))
      };
    }
  };
  S2Layer.layerName = "S2Layer";
  S2Layer.defaultProps = defaultProps22;

  // ../geo-layers/src/quadkey-layer/quadkey-utils.ts
  var TILE_SIZE3 = 512;
  function quadkeyToWorldBounds(quadkey, coverage) {
    let x4 = 0;
    let y5 = 0;
    let mask = 1 << quadkey.length;
    const scale24 = mask / TILE_SIZE3;
    for (let i7 = 0; i7 < quadkey.length; i7++) {
      mask >>= 1;
      const q3 = parseInt(quadkey[i7]);
      if (q3 % 2)
        x4 |= mask;
      if (q3 > 1)
        y5 |= mask;
    }
    return [
      [x4 / scale24, TILE_SIZE3 - y5 / scale24],
      [(x4 + coverage) / scale24, TILE_SIZE3 - (y5 + coverage) / scale24]
    ];
  }
  function getQuadkeyPolygon(quadkey, coverage = 1) {
    const [topLeft, bottomRight] = quadkeyToWorldBounds(quadkey, coverage);
    const [w5, n4] = worldToLngLat(topLeft);
    const [e6, s5] = worldToLngLat(bottomRight);
    return [e6, n4, e6, s5, w5, s5, w5, n4, e6, n4];
  }

  // ../geo-layers/src/quadkey-layer/quadkey-layer.ts
  var defaultProps23 = {
    getQuadkey: { type: "accessor", value: (d5) => d5.quadkey }
  };
  var QuadkeyLayer = class extends GeoCellLayer {
    indexToBounds() {
      const { data, extruded, getQuadkey } = this.props;
      const coverage = extruded ? 0.99 : 1;
      return {
        data,
        _normalize: false,
        positionFormat: "XY",
        getPolygon: (x4, objectInfo) => getQuadkeyPolygon(getQuadkey(x4, objectInfo), coverage),
        updateTriggers: { getPolygon: coverage }
      };
    }
  };
  QuadkeyLayer.layerName = "QuadkeyLayer";
  QuadkeyLayer.defaultProps = defaultProps23;

  // ../geo-layers/src/tileset-2d/tile-2d-header.ts
  var Tile2DHeader = class {
    constructor(index) {
      this.index = index;
      this.isVisible = false;
      this.isSelected = false;
      this.parent = null;
      this.children = [];
      this.content = null;
      this._loader = void 0;
      this._abortController = null;
      this._loaderId = 0;
      this._isLoaded = false;
      this._isCancelled = false;
      this._needsReload = false;
    }
    /** @deprecated use `boundingBox` instead */
    get bbox() {
      return this._bbox;
    }
    // TODO - remove in v9
    set bbox(value) {
      if (this._bbox)
        return;
      this._bbox = value;
      if ("west" in value) {
        this.boundingBox = [
          [value.west, value.south],
          [value.east, value.north]
        ];
      } else {
        this.boundingBox = [
          [value.left, value.top],
          [value.right, value.bottom]
        ];
      }
    }
    get data() {
      return this.isLoading && this._loader ? this._loader.then(() => this.data) : this.content;
    }
    get isLoaded() {
      return this._isLoaded && !this._needsReload;
    }
    get isLoading() {
      return Boolean(this._loader) && !this._isCancelled;
    }
    get needsReload() {
      return this._needsReload || this._isCancelled;
    }
    get byteLength() {
      const result = this.content ? this.content.byteLength : 0;
      if (!Number.isFinite(result)) {
        console.error("byteLength not defined in tile data");
      }
      return result;
    }
    /* eslint-disable max-statements */
    async _loadData({
      getData,
      requestScheduler,
      onLoad,
      onError
    }) {
      const { index, id, bbox, userData, zoom } = this;
      const loaderId = this._loaderId;
      this._abortController = new AbortController();
      const { signal } = this._abortController;
      const requestToken = await requestScheduler.scheduleRequest(this, (tile) => {
        return tile.isSelected ? 1 : -1;
      });
      if (!requestToken) {
        this._isCancelled = true;
        return;
      }
      if (this._isCancelled) {
        requestToken.done();
        return;
      }
      let tileData = null;
      let error;
      try {
        tileData = await getData({ index, id, bbox, userData, zoom, signal });
      } catch (err) {
        error = err || true;
      } finally {
        requestToken.done();
      }
      if (loaderId !== this._loaderId) {
        return;
      }
      this._loader = void 0;
      this.content = tileData;
      if (this._isCancelled && !tileData) {
        this._isLoaded = false;
        return;
      }
      this._isLoaded = true;
      this._isCancelled = false;
      if (error) {
        onError(error, this);
      } else {
        onLoad(this);
      }
    }
    loadData(opts) {
      this._isLoaded = false;
      this._isCancelled = false;
      this._needsReload = false;
      this._loaderId++;
      this._loader = this._loadData(opts);
      return this._loader;
    }
    setNeedsReload() {
      if (this.isLoading) {
        this.abort();
        this._loader = void 0;
      }
      this._needsReload = true;
    }
    abort() {
      if (this.isLoaded) {
        return;
      }
      this._isCancelled = true;
      this._abortController?.abort();
    }
  };

  // ../geo-layers/node_modules/@math.gl/culling/dist/constants.js
  var INTERSECTION = {
    OUTSIDE: -1,
    // Represents that an object is not contained within the frustum.
    INTERSECTING: 0,
    // Represents that an object intersects one of the frustum's planes.
    INSIDE: 1
    // Represents that an object is fully within the frustum.
  };

  // ../geo-layers/node_modules/@math.gl/culling/dist/lib/bounding-volumes/axis-aligned-bounding-box.js
  var scratchVector2 = new Vector3();
  var scratchNormal = new Vector3();
  var AxisAlignedBoundingBox = class {
    /**
     * Creates an instance of an AxisAlignedBoundingBox from the minimum and maximum points along the x, y, and z axes.
     * @param minimum=[0, 0, 0] The minimum point along the x, y, and z axes.
     * @param maximum=[0, 0, 0] The maximum point along the x, y, and z axes.
     * @param center The center of the box; automatically computed if not supplied.
     */
    constructor(minimum = [0, 0, 0], maximum = [0, 0, 0], center2) {
      center2 = center2 || scratchVector2.copy(minimum).add(maximum).scale(0.5);
      this.center = new Vector3(center2);
      this.halfDiagonal = new Vector3(maximum).subtract(this.center);
      this.minimum = new Vector3(minimum);
      this.maximum = new Vector3(maximum);
    }
    /**
     * Duplicates a AxisAlignedBoundingBox instance.
     *
     * @returns {AxisAlignedBoundingBox} A new AxisAlignedBoundingBox instance.
     */
    clone() {
      return new AxisAlignedBoundingBox(this.minimum, this.maximum, this.center);
    }
    /**
     * Compares the provided AxisAlignedBoundingBox componentwise and returns
     * <code>true</code> if they are equal, <code>false</code> otherwise.
     *
     * @param {AxisAlignedBoundingBox} [right] The second AxisAlignedBoundingBox to compare with.
     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.
     */
    equals(right) {
      return this === right || Boolean(right) && this.minimum.equals(right.minimum) && this.maximum.equals(right.maximum);
    }
    /**
     * Applies a 4x4 affine transformation matrix to a bounding sphere.
     * @param transform The transformation matrix to apply to the bounding sphere.
     * @returns itself, i.e. the modified BoundingVolume.
     */
    transform(transform2) {
      this.center.transformAsPoint(transform2);
      this.halfDiagonal.transform(transform2);
      this.minimum.transform(transform2);
      this.maximum.transform(transform2);
      return this;
    }
    /**
     * Determines which side of a plane a box is located.
     */
    intersectPlane(plane) {
      const { halfDiagonal } = this;
      const normal = scratchNormal.from(plane.normal);
      const e6 = halfDiagonal.x * Math.abs(normal.x) + halfDiagonal.y * Math.abs(normal.y) + halfDiagonal.z * Math.abs(normal.z);
      const s5 = this.center.dot(normal) + plane.distance;
      if (s5 - e6 > 0) {
        return INTERSECTION.INSIDE;
      }
      if (s5 + e6 < 0) {
        return INTERSECTION.OUTSIDE;
      }
      return INTERSECTION.INTERSECTING;
    }
    /** Computes the estimated distance from the closest point on a bounding box to a point. */
    distanceTo(point) {
      return Math.sqrt(this.distanceSquaredTo(point));
    }
    /** Computes the estimated distance squared from the closest point on a bounding box to a point. */
    distanceSquaredTo(point) {
      const offset = scratchVector2.from(point).subtract(this.center);
      const { halfDiagonal } = this;
      let distanceSquared = 0;
      let d5;
      d5 = Math.abs(offset.x) - halfDiagonal.x;
      if (d5 > 0) {
        distanceSquared += d5 * d5;
      }
      d5 = Math.abs(offset.y) - halfDiagonal.y;
      if (d5 > 0) {
        distanceSquared += d5 * d5;
      }
      d5 = Math.abs(offset.z) - halfDiagonal.z;
      if (d5 > 0) {
        distanceSquared += d5 * d5;
      }
      return distanceSquared;
    }
  };

  // ../geo-layers/node_modules/@math.gl/culling/dist/lib/bounding-volumes/bounding-sphere.js
  var scratchVector3 = new Vector3();
  var scratchVector22 = new Vector3();
  var BoundingSphere = class {
    /** Creates a bounding sphere */
    constructor(center2 = [0, 0, 0], radius = 0) {
      this.radius = -0;
      this.center = new Vector3();
      this.fromCenterRadius(center2, radius);
    }
    /** Sets the bounding sphere from `center` and `radius`. */
    fromCenterRadius(center2, radius) {
      this.center.from(center2);
      this.radius = radius;
      return this;
    }
    /**
     * Computes a bounding sphere from the corner points of an axis-aligned bounding box.  The sphere
     * tightly and fully encompasses the box.
     */
    fromCornerPoints(corner, oppositeCorner) {
      oppositeCorner = scratchVector3.from(oppositeCorner);
      this.center = new Vector3().from(corner).add(oppositeCorner).scale(0.5);
      this.radius = this.center.distance(oppositeCorner);
      return this;
    }
    /** Compares the provided BoundingSphere component wise */
    equals(right) {
      return this === right || Boolean(right) && this.center.equals(right.center) && this.radius === right.radius;
    }
    /** Duplicates a BoundingSphere instance. */
    clone() {
      return new BoundingSphere(this.center, this.radius);
    }
    /** Computes a bounding sphere that contains both the left and right bounding spheres. */
    union(boundingSphere) {
      const leftCenter = this.center;
      const leftRadius = this.radius;
      const rightCenter = boundingSphere.center;
      const rightRadius = boundingSphere.radius;
      const toRightCenter = scratchVector3.copy(rightCenter).subtract(leftCenter);
      const centerSeparation = toRightCenter.magnitude();
      if (leftRadius >= centerSeparation + rightRadius) {
        return this.clone();
      }
      if (rightRadius >= centerSeparation + leftRadius) {
        return boundingSphere.clone();
      }
      const halfDistanceBetweenTangentPoints = (leftRadius + centerSeparation + rightRadius) * 0.5;
      scratchVector22.copy(toRightCenter).scale((-leftRadius + halfDistanceBetweenTangentPoints) / centerSeparation).add(leftCenter);
      this.center.copy(scratchVector22);
      this.radius = halfDistanceBetweenTangentPoints;
      return this;
    }
    /** Computes a bounding sphere by enlarging the provided sphere to contain the provided point. */
    expand(point) {
      const scratchPoint2 = scratchVector3.from(point);
      const radius = scratchPoint2.subtract(this.center).magnitude();
      if (radius > this.radius) {
        this.radius = radius;
      }
      return this;
    }
    // BoundingVolume interface
    /**
     * Applies a 4x4 affine transformation matrix to a bounding sphere.
     * @param sphere The bounding sphere to apply the transformation to.
     * @param transform The transformation matrix to apply to the bounding sphere.
     * @returns self.
     */
    transform(transform2) {
      this.center.transform(transform2);
      const scale24 = mat4_exports.getScaling(scratchVector3, transform2);
      this.radius = Math.max(scale24[0], Math.max(scale24[1], scale24[2])) * this.radius;
      return this;
    }
    /** Computes the estimated distance squared from the closest point on a bounding sphere to a point. */
    distanceSquaredTo(point) {
      const d5 = this.distanceTo(point);
      return d5 * d5;
    }
    /** Computes the estimated distance from the closest point on a bounding sphere to a point. */
    distanceTo(point) {
      const scratchPoint2 = scratchVector3.from(point);
      const delta = scratchPoint2.subtract(this.center);
      return Math.max(0, delta.len() - this.radius);
    }
    /** Determines which side of a plane a sphere is located. */
    intersectPlane(plane) {
      const center2 = this.center;
      const radius = this.radius;
      const normal = plane.normal;
      const distanceToPlane = normal.dot(center2) + plane.distance;
      if (distanceToPlane < -radius) {
        return INTERSECTION.OUTSIDE;
      }
      if (distanceToPlane < radius) {
        return INTERSECTION.INTERSECTING;
      }
      return INTERSECTION.INSIDE;
    }
  };

  // ../geo-layers/node_modules/@math.gl/culling/dist/lib/bounding-volumes/oriented-bounding-box.js
  var scratchVector32 = new Vector3();
  var scratchOffset = new Vector3();
  var scratchVectorU = new Vector3();
  var scratchVectorV = new Vector3();
  var scratchVectorW = new Vector3();
  var scratchCorner = new Vector3();
  var scratchToCenter = new Vector3();
  var MATRIX3 = {
    COLUMN0ROW0: 0,
    COLUMN0ROW1: 1,
    COLUMN0ROW2: 2,
    COLUMN1ROW0: 3,
    COLUMN1ROW1: 4,
    COLUMN1ROW2: 5,
    COLUMN2ROW0: 6,
    COLUMN2ROW1: 7,
    COLUMN2ROW2: 8
  };
  var OrientedBoundingBox = class {
    constructor(center2 = [0, 0, 0], halfAxes = [0, 0, 0, 0, 0, 0, 0, 0, 0]) {
      this.center = new Vector3().from(center2);
      this.halfAxes = new Matrix3(halfAxes);
    }
    /** Returns an array with three halfSizes for the bounding box */
    get halfSize() {
      const xAxis = this.halfAxes.getColumn(0);
      const yAxis = this.halfAxes.getColumn(1);
      const zAxis = this.halfAxes.getColumn(2);
      return [new Vector3(xAxis).len(), new Vector3(yAxis).len(), new Vector3(zAxis).len()];
    }
    /** Returns a quaternion describing the orientation of the bounding box */
    get quaternion() {
      const xAxis = this.halfAxes.getColumn(0);
      const yAxis = this.halfAxes.getColumn(1);
      const zAxis = this.halfAxes.getColumn(2);
      const normXAxis = new Vector3(xAxis).normalize();
      const normYAxis = new Vector3(yAxis).normalize();
      const normZAxis = new Vector3(zAxis).normalize();
      return new Quaternion().fromMatrix3(new Matrix3([...normXAxis, ...normYAxis, ...normZAxis]));
    }
    /**
     * Create OrientedBoundingBox from quaternion based OBB,
     */
    fromCenterHalfSizeQuaternion(center2, halfSize, quaternion) {
      const quaternionObject = new Quaternion(quaternion);
      const directionsMatrix = new Matrix3().fromQuaternion(quaternionObject);
      directionsMatrix[0] = directionsMatrix[0] * halfSize[0];
      directionsMatrix[1] = directionsMatrix[1] * halfSize[0];
      directionsMatrix[2] = directionsMatrix[2] * halfSize[0];
      directionsMatrix[3] = directionsMatrix[3] * halfSize[1];
      directionsMatrix[4] = directionsMatrix[4] * halfSize[1];
      directionsMatrix[5] = directionsMatrix[5] * halfSize[1];
      directionsMatrix[6] = directionsMatrix[6] * halfSize[2];
      directionsMatrix[7] = directionsMatrix[7] * halfSize[2];
      directionsMatrix[8] = directionsMatrix[8] * halfSize[2];
      this.center = new Vector3().from(center2);
      this.halfAxes = directionsMatrix;
      return this;
    }
    /** Duplicates a OrientedBoundingBox instance. */
    clone() {
      return new OrientedBoundingBox(this.center, this.halfAxes);
    }
    /** Compares the provided OrientedBoundingBox component wise and returns */
    equals(right) {
      return this === right || Boolean(right) && this.center.equals(right.center) && this.halfAxes.equals(right.halfAxes);
    }
    /** Computes a tight-fitting bounding sphere enclosing the provided oriented bounding box. */
    getBoundingSphere(result = new BoundingSphere()) {
      const halfAxes = this.halfAxes;
      const u6 = halfAxes.getColumn(0, scratchVectorU);
      const v5 = halfAxes.getColumn(1, scratchVectorV);
      const w5 = halfAxes.getColumn(2, scratchVectorW);
      const cornerVector = scratchVector32.copy(u6).add(v5).add(w5);
      result.center.copy(this.center);
      result.radius = cornerVector.magnitude();
      return result;
    }
    /** Determines which side of a plane the oriented bounding box is located. */
    intersectPlane(plane) {
      const center2 = this.center;
      const normal = plane.normal;
      const halfAxes = this.halfAxes;
      const normalX = normal.x;
      const normalY = normal.y;
      const normalZ = normal.z;
      const radEffective = Math.abs(normalX * halfAxes[MATRIX3.COLUMN0ROW0] + normalY * halfAxes[MATRIX3.COLUMN0ROW1] + normalZ * halfAxes[MATRIX3.COLUMN0ROW2]) + Math.abs(normalX * halfAxes[MATRIX3.COLUMN1ROW0] + normalY * halfAxes[MATRIX3.COLUMN1ROW1] + normalZ * halfAxes[MATRIX3.COLUMN1ROW2]) + Math.abs(normalX * halfAxes[MATRIX3.COLUMN2ROW0] + normalY * halfAxes[MATRIX3.COLUMN2ROW1] + normalZ * halfAxes[MATRIX3.COLUMN2ROW2]);
      const distanceToPlane = normal.dot(center2) + plane.distance;
      if (distanceToPlane <= -radEffective) {
        return INTERSECTION.OUTSIDE;
      } else if (distanceToPlane >= radEffective) {
        return INTERSECTION.INSIDE;
      }
      return INTERSECTION.INTERSECTING;
    }
    /** Computes the estimated distance from the closest point on a bounding box to a point. */
    distanceTo(point) {
      return Math.sqrt(this.distanceSquaredTo(point));
    }
    /**
     * Computes the estimated distance squared from the closest point
     * on a bounding box to a point.
     * See Geometric Tools for Computer Graphics 10.4.2
     */
    distanceSquaredTo(point) {
      const offset = scratchOffset.from(point).subtract(this.center);
      const halfAxes = this.halfAxes;
      const u6 = halfAxes.getColumn(0, scratchVectorU);
      const v5 = halfAxes.getColumn(1, scratchVectorV);
      const w5 = halfAxes.getColumn(2, scratchVectorW);
      const uHalf = u6.magnitude();
      const vHalf = v5.magnitude();
      const wHalf = w5.magnitude();
      u6.normalize();
      v5.normalize();
      w5.normalize();
      let distanceSquared = 0;
      let d5;
      d5 = Math.abs(offset.dot(u6)) - uHalf;
      if (d5 > 0) {
        distanceSquared += d5 * d5;
      }
      d5 = Math.abs(offset.dot(v5)) - vHalf;
      if (d5 > 0) {
        distanceSquared += d5 * d5;
      }
      d5 = Math.abs(offset.dot(w5)) - wHalf;
      if (d5 > 0) {
        distanceSquared += d5 * d5;
      }
      return distanceSquared;
    }
    /**
     * The distances calculated by the vector from the center of the bounding box
     * to position projected onto direction.
     *
     * - If you imagine the infinite number of planes with normal direction,
     *   this computes the smallest distance to the closest and farthest planes
     *   from `position` that intersect the bounding box.
     *
     * @param position The position to calculate the distance from.
     * @param direction The direction from position.
     * @param result An Interval (array of length 2) to store the nearest and farthest distances.
     * @returns Interval (array of length 2) with nearest and farthest distances
     *   on the bounding box from position in direction.
     */
    // eslint-disable-next-line max-statements
    computePlaneDistances(position, direction, result = [-0, -0]) {
      let minDist = Number.POSITIVE_INFINITY;
      let maxDist = Number.NEGATIVE_INFINITY;
      const center2 = this.center;
      const halfAxes = this.halfAxes;
      const u6 = halfAxes.getColumn(0, scratchVectorU);
      const v5 = halfAxes.getColumn(1, scratchVectorV);
      const w5 = halfAxes.getColumn(2, scratchVectorW);
      const corner = scratchCorner.copy(u6).add(v5).add(w5).add(center2);
      const toCenter = scratchToCenter.copy(corner).subtract(position);
      let mag = direction.dot(toCenter);
      minDist = Math.min(mag, minDist);
      maxDist = Math.max(mag, maxDist);
      corner.copy(center2).add(u6).add(v5).subtract(w5);
      toCenter.copy(corner).subtract(position);
      mag = direction.dot(toCenter);
      minDist = Math.min(mag, minDist);
      maxDist = Math.max(mag, maxDist);
      corner.copy(center2).add(u6).subtract(v5).add(w5);
      toCenter.copy(corner).subtract(position);
      mag = direction.dot(toCenter);
      minDist = Math.min(mag, minDist);
      maxDist = Math.max(mag, maxDist);
      corner.copy(center2).add(u6).subtract(v5).subtract(w5);
      toCenter.copy(corner).subtract(position);
      mag = direction.dot(toCenter);
      minDist = Math.min(mag, minDist);
      maxDist = Math.max(mag, maxDist);
      center2.copy(corner).subtract(u6).add(v5).add(w5);
      toCenter.copy(corner).subtract(position);
      mag = direction.dot(toCenter);
      minDist = Math.min(mag, minDist);
      maxDist = Math.max(mag, maxDist);
      center2.copy(corner).subtract(u6).add(v5).subtract(w5);
      toCenter.copy(corner).subtract(position);
      mag = direction.dot(toCenter);
      minDist = Math.min(mag, minDist);
      maxDist = Math.max(mag, maxDist);
      center2.copy(corner).subtract(u6).subtract(v5).add(w5);
      toCenter.copy(corner).subtract(position);
      mag = direction.dot(toCenter);
      minDist = Math.min(mag, minDist);
      maxDist = Math.max(mag, maxDist);
      center2.copy(corner).subtract(u6).subtract(v5).subtract(w5);
      toCenter.copy(corner).subtract(position);
      mag = direction.dot(toCenter);
      minDist = Math.min(mag, minDist);
      maxDist = Math.max(mag, maxDist);
      result[0] = minDist;
      result[1] = maxDist;
      return result;
    }
    /**
     * Applies a 4x4 affine transformation matrix to a bounding sphere.
     * @param transform The transformation matrix to apply to the bounding sphere.
     * @returns itself, i.e. the modified BoundingVolume.
     */
    transform(transformation) {
      this.center.transformAsPoint(transformation);
      const xAxis = this.halfAxes.getColumn(0, scratchVectorU);
      xAxis.transformAsPoint(transformation);
      const yAxis = this.halfAxes.getColumn(1, scratchVectorV);
      yAxis.transformAsPoint(transformation);
      const zAxis = this.halfAxes.getColumn(2, scratchVectorW);
      zAxis.transformAsPoint(transformation);
      this.halfAxes = new Matrix3([...xAxis, ...yAxis, ...zAxis]);
      return this;
    }
    getTransform() {
      throw new Error("not implemented");
    }
  };

  // ../geo-layers/node_modules/@math.gl/culling/dist/lib/plane.js
  var scratchPosition = new Vector3();
  var scratchNormal2 = new Vector3();
  var Plane = class {
    constructor(normal = [0, 0, 1], distance7 = 0) {
      this.normal = new Vector3();
      this.distance = -0;
      this.fromNormalDistance(normal, distance7);
    }
    /** Creates a plane from a normal and a distance from the origin. */
    fromNormalDistance(normal, distance7) {
      assert6(Number.isFinite(distance7));
      this.normal.from(normal).normalize();
      this.distance = distance7;
      return this;
    }
    /** Creates a plane from a normal and a point on the plane. */
    fromPointNormal(point, normal) {
      point = scratchPosition.from(point);
      this.normal.from(normal).normalize();
      const distance7 = -this.normal.dot(point);
      this.distance = distance7;
      return this;
    }
    /** Creates a plane from the general equation */
    fromCoefficients(a6, b4, c5, d5) {
      this.normal.set(a6, b4, c5);
      assert6(equals(this.normal.len(), 1));
      this.distance = d5;
      return this;
    }
    /** Duplicates a Plane instance. */
    clone() {
      return new Plane(this.normal, this.distance);
    }
    /** Compares the provided Planes by normal and distance */
    equals(right) {
      return equals(this.distance, right.distance) && equals(this.normal, right.normal);
    }
    /** Computes the signed shortest distance of a point to a plane.
     * The sign of the distance determines which side of the plane the point is on.
     */
    getPointDistance(point) {
      return this.normal.dot(point) + this.distance;
    }
    /** Transforms the plane by the given transformation matrix. */
    transform(matrix4) {
      const normal = scratchNormal2.copy(this.normal).transformAsVector(matrix4).normalize();
      const point = this.normal.scale(-this.distance).transform(matrix4);
      return this.fromPointNormal(point, normal);
    }
    projectPointOntoPlane(point, result = [0, 0, 0]) {
      const scratchPoint2 = scratchPosition.from(point);
      const pointDistance = this.getPointDistance(scratchPoint2);
      const scaledNormal = scratchNormal2.copy(this.normal).scale(pointDistance);
      return scratchPoint2.subtract(scaledNormal).to(result);
    }
  };

  // ../geo-layers/node_modules/@math.gl/culling/dist/lib/culling-volume.js
  var faces = [new Vector3([1, 0, 0]), new Vector3([0, 1, 0]), new Vector3([0, 0, 1])];
  var scratchPlaneCenter = new Vector3();
  var scratchPlaneNormal = new Vector3();
  var CullingVolume = class {
    /**
     * Create a new `CullingVolume` bounded by an array of clipping planed
     * @param planes Array of clipping planes.
     * */
    constructor(planes = []) {
      this.planes = planes;
    }
    /**
     * Constructs a culling volume from a bounding sphere. Creates six planes that create a box containing the sphere.
     * The planes are aligned to the x, y, and z axes in world coordinates.
     */
    fromBoundingSphere(boundingSphere) {
      this.planes.length = 2 * faces.length;
      const center2 = boundingSphere.center;
      const radius = boundingSphere.radius;
      let planeIndex = 0;
      for (const faceNormal of faces) {
        let plane0 = this.planes[planeIndex];
        let plane1 = this.planes[planeIndex + 1];
        if (!plane0) {
          plane0 = this.planes[planeIndex] = new Plane();
        }
        if (!plane1) {
          plane1 = this.planes[planeIndex + 1] = new Plane();
        }
        const plane0Center = scratchPlaneCenter.copy(faceNormal).scale(-radius).add(center2);
        plane0.fromPointNormal(plane0Center, faceNormal);
        const plane1Center = scratchPlaneCenter.copy(faceNormal).scale(radius).add(center2);
        const negatedFaceNormal = scratchPlaneNormal.copy(faceNormal).negate();
        plane1.fromPointNormal(plane1Center, negatedFaceNormal);
        planeIndex += 2;
      }
      return this;
    }
    /** Determines whether a bounding volume intersects the culling volume. */
    computeVisibility(boundingVolume) {
      let intersect4 = INTERSECTION.INSIDE;
      for (const plane of this.planes) {
        const result = boundingVolume.intersectPlane(plane);
        switch (result) {
          case INTERSECTION.OUTSIDE:
            return INTERSECTION.OUTSIDE;
          case INTERSECTION.INTERSECTING:
            intersect4 = INTERSECTION.INTERSECTING;
            break;
          default:
        }
      }
      return intersect4;
    }
    /**
     * Determines whether a bounding volume intersects the culling volume.
     *
     * @param parentPlaneMask A bit mask from the boundingVolume's parent's check against the same culling
     *   volume, such that if (planeMask & (1 << planeIndex) === 0), for k < 31, then
     *   the parent (and therefore this) volume is completely inside plane[planeIndex]
     *   and that plane check can be skipped.
     */
    computeVisibilityWithPlaneMask(boundingVolume, parentPlaneMask) {
      assert6(Number.isFinite(parentPlaneMask), "parentPlaneMask is required.");
      if (parentPlaneMask === CullingVolume.MASK_OUTSIDE || parentPlaneMask === CullingVolume.MASK_INSIDE) {
        return parentPlaneMask;
      }
      let mask = CullingVolume.MASK_INSIDE;
      const planes = this.planes;
      for (let k4 = 0; k4 < this.planes.length; ++k4) {
        const flag = k4 < 31 ? 1 << k4 : 0;
        if (k4 < 31 && (parentPlaneMask & flag) === 0) {
          continue;
        }
        const plane = planes[k4];
        const result = boundingVolume.intersectPlane(plane);
        if (result === INTERSECTION.OUTSIDE) {
          return CullingVolume.MASK_OUTSIDE;
        } else if (result === INTERSECTION.INTERSECTING) {
          mask |= flag;
        }
      }
      return mask;
    }
  };
  CullingVolume.MASK_OUTSIDE = 4294967295;
  CullingVolume.MASK_INSIDE = 0;
  CullingVolume.MASK_INDETERMINATE = 2147483647;

  // ../geo-layers/node_modules/@math.gl/culling/dist/lib/perspective-off-center-frustum.js
  var scratchPlaneUpVector = new Vector3();
  var scratchPlaneRightVector = new Vector3();
  var scratchPlaneNearCenter = new Vector3();
  var scratchPlaneFarCenter = new Vector3();
  var scratchPlaneNormal2 = new Vector3();

  // ../geo-layers/node_modules/@math.gl/culling/dist/lib/algorithms/bounding-sphere-from-points.js
  var fromPointsXMin = new Vector3();
  var fromPointsYMin = new Vector3();
  var fromPointsZMin = new Vector3();
  var fromPointsXMax = new Vector3();
  var fromPointsYMax = new Vector3();
  var fromPointsZMax = new Vector3();
  var fromPointsCurrentPos = new Vector3();
  var fromPointsScratch = new Vector3();
  var fromPointsRitterCenter = new Vector3();
  var fromPointsMinBoxPt = new Vector3();
  var fromPointsMaxBoxPt = new Vector3();
  var fromPointsNaiveCenterScratch = new Vector3();

  // ../geo-layers/node_modules/@math.gl/culling/dist/lib/algorithms/compute-eigen-decomposition.js
  var scratchMatrix = new Matrix3();
  var scratchUnitary = new Matrix3();
  var scratchDiagonal = new Matrix3();
  var jMatrix = new Matrix3();
  var jMatrixTranspose = new Matrix3();
  function computeEigenDecomposition(matrix, result = {}) {
    const EIGEN_TOLERANCE = math_utils_exports.EPSILON20;
    const EIGEN_MAX_SWEEPS = 10;
    let count3 = 0;
    let sweep = 0;
    const unitaryMatrix = scratchUnitary;
    const diagonalMatrix = scratchDiagonal;
    unitaryMatrix.identity();
    diagonalMatrix.copy(matrix);
    const epsilon = EIGEN_TOLERANCE * computeFrobeniusNorm(diagonalMatrix);
    while (sweep < EIGEN_MAX_SWEEPS && offDiagonalFrobeniusNorm(diagonalMatrix) > epsilon) {
      shurDecomposition(diagonalMatrix, jMatrix);
      jMatrixTranspose.copy(jMatrix).transpose();
      diagonalMatrix.multiplyRight(jMatrix);
      diagonalMatrix.multiplyLeft(jMatrixTranspose);
      unitaryMatrix.multiplyRight(jMatrix);
      if (++count3 > 2) {
        ++sweep;
        count3 = 0;
      }
    }
    result.unitary = unitaryMatrix.toTarget(result.unitary);
    result.diagonal = diagonalMatrix.toTarget(result.diagonal);
    return result;
  }
  function computeFrobeniusNorm(matrix) {
    let norm = 0;
    for (let i7 = 0; i7 < 9; ++i7) {
      const temp = matrix[i7];
      norm += temp * temp;
    }
    return Math.sqrt(norm);
  }
  var rowVal = [1, 0, 0];
  var colVal = [2, 2, 1];
  function offDiagonalFrobeniusNorm(matrix) {
    let norm = 0;
    for (let i7 = 0; i7 < 3; ++i7) {
      const temp = matrix[scratchMatrix.getElementIndex(colVal[i7], rowVal[i7])];
      norm += 2 * temp * temp;
    }
    return Math.sqrt(norm);
  }
  function shurDecomposition(matrix, result) {
    const tolerance = math_utils_exports.EPSILON15;
    let maxDiagonal = 0;
    let rotAxis = 1;
    for (let i7 = 0; i7 < 3; ++i7) {
      const temp = Math.abs(matrix[scratchMatrix.getElementIndex(colVal[i7], rowVal[i7])]);
      if (temp > maxDiagonal) {
        rotAxis = i7;
        maxDiagonal = temp;
      }
    }
    const p5 = rowVal[rotAxis];
    const q3 = colVal[rotAxis];
    let c5 = 1;
    let s5 = 0;
    if (Math.abs(matrix[scratchMatrix.getElementIndex(q3, p5)]) > tolerance) {
      const qq = matrix[scratchMatrix.getElementIndex(q3, q3)];
      const pp = matrix[scratchMatrix.getElementIndex(p5, p5)];
      const qp = matrix[scratchMatrix.getElementIndex(q3, p5)];
      const tau = (qq - pp) / 2 / qp;
      let t5;
      if (tau < 0) {
        t5 = -1 / (-tau + Math.sqrt(1 + tau * tau));
      } else {
        t5 = 1 / (tau + Math.sqrt(1 + tau * tau));
      }
      c5 = 1 / Math.sqrt(1 + t5 * t5);
      s5 = t5 * c5;
    }
    Matrix3.IDENTITY.to(result);
    result[scratchMatrix.getElementIndex(p5, p5)] = result[scratchMatrix.getElementIndex(q3, q3)] = c5;
    result[scratchMatrix.getElementIndex(q3, p5)] = s5;
    result[scratchMatrix.getElementIndex(p5, q3)] = -s5;
    return result;
  }

  // ../geo-layers/node_modules/@math.gl/culling/dist/lib/algorithms/bounding-box-from-points.js
  var scratchVector23 = new Vector3();
  var scratchVector33 = new Vector3();
  var scratchVector4 = new Vector3();
  var scratchVector5 = new Vector3();
  var scratchVector6 = new Vector3();
  var scratchCovarianceResult = new Matrix3();
  var scratchEigenResult = {
    diagonal: new Matrix3(),
    unitary: new Matrix3()
  };
  function makeOrientedBoundingBoxFromPoints(positions, result = new OrientedBoundingBox()) {
    if (!positions || positions.length === 0) {
      result.halfAxes = new Matrix3([0, 0, 0, 0, 0, 0, 0, 0, 0]);
      result.center = new Vector3();
      return result;
    }
    const length17 = positions.length;
    const meanPoint = new Vector3(0, 0, 0);
    for (const position of positions) {
      meanPoint.add(position);
    }
    const invLength = 1 / length17;
    meanPoint.multiplyByScalar(invLength);
    let exx = 0;
    let exy = 0;
    let exz = 0;
    let eyy = 0;
    let eyz = 0;
    let ezz = 0;
    for (const position of positions) {
      const p5 = scratchVector23.copy(position).subtract(meanPoint);
      exx += p5.x * p5.x;
      exy += p5.x * p5.y;
      exz += p5.x * p5.z;
      eyy += p5.y * p5.y;
      eyz += p5.y * p5.z;
      ezz += p5.z * p5.z;
    }
    exx *= invLength;
    exy *= invLength;
    exz *= invLength;
    eyy *= invLength;
    eyz *= invLength;
    ezz *= invLength;
    const covarianceMatrix = scratchCovarianceResult;
    covarianceMatrix[0] = exx;
    covarianceMatrix[1] = exy;
    covarianceMatrix[2] = exz;
    covarianceMatrix[3] = exy;
    covarianceMatrix[4] = eyy;
    covarianceMatrix[5] = eyz;
    covarianceMatrix[6] = exz;
    covarianceMatrix[7] = eyz;
    covarianceMatrix[8] = ezz;
    const { unitary } = computeEigenDecomposition(covarianceMatrix, scratchEigenResult);
    const rotation2 = result.halfAxes.copy(unitary);
    let v1 = rotation2.getColumn(0, scratchVector4);
    let v22 = rotation2.getColumn(1, scratchVector5);
    let v32 = rotation2.getColumn(2, scratchVector6);
    let u1 = -Number.MAX_VALUE;
    let u22 = -Number.MAX_VALUE;
    let u32 = -Number.MAX_VALUE;
    let l1 = Number.MAX_VALUE;
    let l22 = Number.MAX_VALUE;
    let l32 = Number.MAX_VALUE;
    for (const position of positions) {
      scratchVector23.copy(position);
      u1 = Math.max(scratchVector23.dot(v1), u1);
      u22 = Math.max(scratchVector23.dot(v22), u22);
      u32 = Math.max(scratchVector23.dot(v32), u32);
      l1 = Math.min(scratchVector23.dot(v1), l1);
      l22 = Math.min(scratchVector23.dot(v22), l22);
      l32 = Math.min(scratchVector23.dot(v32), l32);
    }
    v1 = v1.multiplyByScalar(0.5 * (l1 + u1));
    v22 = v22.multiplyByScalar(0.5 * (l22 + u22));
    v32 = v32.multiplyByScalar(0.5 * (l32 + u32));
    result.center.copy(v1).add(v22).add(v32);
    const scale24 = scratchVector33.set(u1 - l1, u22 - l22, u32 - l32).multiplyByScalar(0.5);
    const scaleMatrix = new Matrix3([scale24[0], 0, 0, 0, scale24[1], 0, 0, 0, scale24[2]]);
    result.halfAxes.multiplyRight(scaleMatrix);
    return result;
  }

  // ../geo-layers/src/tileset-2d/tile-2d-traversal.ts
  var TILE_SIZE4 = 512;
  var MAX_MAPS = 3;
  var REF_POINTS_5 = [
    [0.5, 0.5],
    [0, 0],
    [0, 1],
    [1, 0],
    [1, 1]
  ];
  var REF_POINTS_9 = REF_POINTS_5.concat([
    [0, 0.5],
    [0.5, 0],
    [1, 0.5],
    [0.5, 1]
  ]);
  var REF_POINTS_11 = REF_POINTS_9.concat([
    [0.25, 0.5],
    [0.75, 0.5]
  ]);
  var OSMNode = class {
    constructor(x4, y5, z4) {
      this.x = x4;
      this.y = y5;
      this.z = z4;
    }
    get children() {
      if (!this._children) {
        const x4 = this.x * 2;
        const y5 = this.y * 2;
        const z4 = this.z + 1;
        this._children = [
          new OSMNode(x4, y5, z4),
          new OSMNode(x4, y5 + 1, z4),
          new OSMNode(x4 + 1, y5, z4),
          new OSMNode(x4 + 1, y5 + 1, z4)
        ];
      }
      return this._children;
    }
    // eslint-disable-next-line complexity
    update(params) {
      const { viewport, cullingVolume: cullingVolume2, elevationBounds, minZ, maxZ, bounds, offset, project: project2 } = params;
      const boundingVolume = this.getBoundingVolume(elevationBounds, offset, project2);
      if (bounds && !this.insideBounds(bounds)) {
        return false;
      }
      const isInside = cullingVolume2.computeVisibility(boundingVolume);
      if (isInside < 0) {
        return false;
      }
      if (!this.childVisible) {
        let { z: z4 } = this;
        if (z4 < maxZ && z4 >= minZ) {
          const distance7 = boundingVolume.distanceTo(viewport.cameraPosition) * viewport.scale / viewport.height;
          z4 += Math.floor(Math.log2(distance7));
        }
        if (z4 >= maxZ) {
          this.selected = true;
          return true;
        }
      }
      this.selected = false;
      this.childVisible = true;
      for (const child of this.children) {
        child.update(params);
      }
      return true;
    }
    getSelected(result = []) {
      if (this.selected) {
        result.push(this);
      }
      if (this._children) {
        for (const node of this._children) {
          node.getSelected(result);
        }
      }
      return result;
    }
    insideBounds([minX, minY, maxX, maxY]) {
      const scale24 = Math.pow(2, this.z);
      const extent = TILE_SIZE4 / scale24;
      return this.x * extent < maxX && this.y * extent < maxY && (this.x + 1) * extent > minX && (this.y + 1) * extent > minY;
    }
    getBoundingVolume(zRange, worldOffset, project2) {
      if (project2) {
        const refPoints = this.z < 1 ? REF_POINTS_11 : this.z < 2 ? REF_POINTS_9 : REF_POINTS_5;
        const refPointPositions = [];
        for (const p5 of refPoints) {
          const lngLat = osmTile2lngLat(this.x + p5[0], this.y + p5[1], this.z);
          lngLat[2] = zRange[0];
          refPointPositions.push(project2(lngLat));
          if (zRange[0] !== zRange[1]) {
            lngLat[2] = zRange[1];
            refPointPositions.push(project2(lngLat));
          }
        }
        return makeOrientedBoundingBoxFromPoints(refPointPositions);
      }
      const scale24 = Math.pow(2, this.z);
      const extent = TILE_SIZE4 / scale24;
      const originX = this.x * extent + worldOffset * TILE_SIZE4;
      const originY = TILE_SIZE4 - (this.y + 1) * extent;
      return new AxisAlignedBoundingBox(
        [originX, originY, zRange[0]],
        [originX + extent, originY + extent, zRange[1]]
      );
    }
  };
  function getOSMTileIndices(viewport, maxZ, zRange, bounds) {
    const project2 = viewport instanceof GlobeViewport && viewport.resolution ? (
      // eslint-disable-next-line @typescript-eslint/unbound-method
      viewport.projectPosition
    ) : null;
    const planes = Object.values(viewport.getFrustumPlanes()).map(
      ({ normal, distance: distance7 }) => new Plane(normal.clone().negate(), distance7)
    );
    const cullingVolume2 = new CullingVolume(planes);
    const unitsPerMeter2 = viewport.distanceScales.unitsPerMeter[2];
    const elevationMin = zRange && zRange[0] * unitsPerMeter2 || 0;
    const elevationMax = zRange && zRange[1] * unitsPerMeter2 || 0;
    const minZ = viewport instanceof WebMercatorViewport2 && viewport.pitch <= 60 ? maxZ : 0;
    if (bounds) {
      const [minLng, minLat, maxLng, maxLat] = bounds;
      const topLeft = lngLatToWorld([minLng, maxLat]);
      const bottomRight = lngLatToWorld([maxLng, minLat]);
      bounds = [topLeft[0], TILE_SIZE4 - topLeft[1], bottomRight[0], TILE_SIZE4 - bottomRight[1]];
    }
    const root = new OSMNode(0, 0, 0);
    const traversalParams = {
      viewport,
      project: project2,
      cullingVolume: cullingVolume2,
      elevationBounds: [elevationMin, elevationMax],
      minZ,
      maxZ,
      bounds,
      // num. of worlds from the center. For repeated maps
      offset: 0
    };
    root.update(traversalParams);
    if (viewport instanceof WebMercatorViewport2 && viewport.subViewports && viewport.subViewports.length > 1) {
      traversalParams.offset = -1;
      while (root.update(traversalParams)) {
        if (--traversalParams.offset < -MAX_MAPS) {
          break;
        }
      }
      traversalParams.offset = 1;
      while (root.update(traversalParams)) {
        if (++traversalParams.offset > MAX_MAPS) {
          break;
        }
      }
    }
    return root.getSelected();
  }

  // ../geo-layers/src/tileset-2d/utils.ts
  var TILE_SIZE5 = 512;
  var DEFAULT_EXTENT = [-Infinity, -Infinity, Infinity, Infinity];
  var urlType = {
    type: "object",
    value: null,
    validate: (value, propType) => propType.optional && value === null || typeof value === "string" || Array.isArray(value) && value.every((url) => typeof url === "string"),
    equal: (value1, value2) => {
      if (value1 === value2) {
        return true;
      }
      if (!Array.isArray(value1) || !Array.isArray(value2)) {
        return false;
      }
      const len9 = value1.length;
      if (len9 !== value2.length) {
        return false;
      }
      for (let i7 = 0; i7 < len9; i7++) {
        if (value1[i7] !== value2[i7]) {
          return false;
        }
      }
      return true;
    }
  };
  function transformBox(bbox, modelMatrix2) {
    const transformedCoords = [
      // top-left
      modelMatrix2.transformAsPoint([bbox[0], bbox[1]]),
      // top-right
      modelMatrix2.transformAsPoint([bbox[2], bbox[1]]),
      // bottom-left
      modelMatrix2.transformAsPoint([bbox[0], bbox[3]]),
      // bottom-right
      modelMatrix2.transformAsPoint([bbox[2], bbox[3]])
    ];
    const transformedBox = [
      // Minimum x coord
      Math.min(...transformedCoords.map((i7) => i7[0])),
      // Minimum y coord
      Math.min(...transformedCoords.map((i7) => i7[1])),
      // Max x coord
      Math.max(...transformedCoords.map((i7) => i7[0])),
      // Max y coord
      Math.max(...transformedCoords.map((i7) => i7[1]))
    ];
    return transformedBox;
  }
  function stringHash(s5) {
    return Math.abs(s5.split("").reduce((a6, b4) => (a6 << 5) - a6 + b4.charCodeAt(0) | 0, 0));
  }
  function getURLFromTemplate(template, tile) {
    if (!template || !template.length) {
      return null;
    }
    const { index, id } = tile;
    if (Array.isArray(template)) {
      const i7 = stringHash(id) % template.length;
      template = template[i7];
    }
    let url = template;
    for (const key of Object.keys(index)) {
      const regex = new RegExp(`{${key}}`, "g");
      url = url.replace(regex, String(index[key]));
    }
    if (Number.isInteger(index.y) && Number.isInteger(index.z)) {
      url = url.replace(/\{-y\}/g, String(Math.pow(2, index.z) - index.y - 1));
    }
    return url;
  }
  function getBoundingBox2(viewport, zRange, extent) {
    let bounds;
    if (zRange && zRange.length === 2) {
      const [minZ, maxZ] = zRange;
      const bounds0 = viewport.getBounds({ z: minZ });
      const bounds1 = viewport.getBounds({ z: maxZ });
      bounds = [
        Math.min(bounds0[0], bounds1[0]),
        Math.min(bounds0[1], bounds1[1]),
        Math.max(bounds0[2], bounds1[2]),
        Math.max(bounds0[3], bounds1[3])
      ];
    } else {
      bounds = viewport.getBounds();
    }
    if (!viewport.isGeospatial) {
      return [
        // Top corner should not be more then bottom corner in either direction
        Math.max(Math.min(bounds[0], extent[2]), extent[0]),
        Math.max(Math.min(bounds[1], extent[3]), extent[1]),
        // Bottom corner should not be less then top corner in either direction
        Math.min(Math.max(bounds[2], extent[0]), extent[2]),
        Math.min(Math.max(bounds[3], extent[1]), extent[3])
      ];
    }
    return [
      Math.max(bounds[0], extent[0]),
      Math.max(bounds[1], extent[1]),
      Math.min(bounds[2], extent[2]),
      Math.min(bounds[3], extent[3])
    ];
  }
  function getCullBounds({
    viewport,
    z: z4,
    cullRect
  }) {
    const subViewports = viewport.subViewports || [viewport];
    return subViewports.map((v5) => getCullBoundsInViewport(v5, z4 || 0, cullRect));
  }
  function getCullBoundsInViewport(viewport, z4, cullRect) {
    if (!Array.isArray(z4)) {
      const x4 = cullRect.x - viewport.x;
      const y5 = cullRect.y - viewport.y;
      const { width, height } = cullRect;
      const unprojectOption = { targetZ: z4 };
      const topLeft = viewport.unproject([x4, y5], unprojectOption);
      const topRight = viewport.unproject([x4 + width, y5], unprojectOption);
      const bottomLeft = viewport.unproject([x4, y5 + height], unprojectOption);
      const bottomRight = viewport.unproject([x4 + width, y5 + height], unprojectOption);
      return [
        Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),
        Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]),
        Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),
        Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1])
      ];
    }
    const bounds0 = getCullBoundsInViewport(viewport, z4[0], cullRect);
    const bounds1 = getCullBoundsInViewport(viewport, z4[1], cullRect);
    return [
      Math.min(bounds0[0], bounds1[0]),
      Math.min(bounds0[1], bounds1[1]),
      Math.max(bounds0[2], bounds1[2]),
      Math.max(bounds0[3], bounds1[3])
    ];
  }
  function getIndexingCoords(bbox, scale24, modelMatrixInverse) {
    if (modelMatrixInverse) {
      const transformedTileIndex = transformBox(bbox, modelMatrixInverse).map(
        (i7) => i7 * scale24 / TILE_SIZE5
      );
      return transformedTileIndex;
    }
    return bbox.map((i7) => i7 * scale24 / TILE_SIZE5);
  }
  function getScale2(z4, tileSize) {
    return Math.pow(2, z4) * TILE_SIZE5 / tileSize;
  }
  function osmTile2lngLat(x4, y5, z4) {
    const scale24 = getScale2(z4, TILE_SIZE5);
    const lng = x4 / scale24 * 360 - 180;
    const n4 = Math.PI - 2 * Math.PI * y5 / scale24;
    const lat = 180 / Math.PI * Math.atan(0.5 * (Math.exp(n4) - Math.exp(-n4)));
    return [lng, lat];
  }
  function tile2XY(x4, y5, z4, tileSize) {
    const scale24 = getScale2(z4, tileSize);
    return [x4 / scale24 * TILE_SIZE5, y5 / scale24 * TILE_SIZE5];
  }
  function tileToBoundingBox(viewport, x4, y5, z4, tileSize = TILE_SIZE5) {
    if (viewport.isGeospatial) {
      const [west, north] = osmTile2lngLat(x4, y5, z4);
      const [east, south] = osmTile2lngLat(x4 + 1, y5 + 1, z4);
      return { west, north, east, south };
    }
    const [left, top] = tile2XY(x4, y5, z4, tileSize);
    const [right, bottom] = tile2XY(x4 + 1, y5 + 1, z4, tileSize);
    return { left, top, right, bottom };
  }
  function getIdentityTileIndices(viewport, z4, tileSize, extent, modelMatrixInverse) {
    const bbox = getBoundingBox2(viewport, null, extent);
    const scale24 = getScale2(z4, tileSize);
    const [minX, minY, maxX, maxY] = getIndexingCoords(bbox, scale24, modelMatrixInverse);
    const indices = [];
    for (let x4 = Math.floor(minX); x4 < maxX; x4++) {
      for (let y5 = Math.floor(minY); y5 < maxY; y5++) {
        indices.push({ x: x4, y: y5, z: z4 });
      }
    }
    return indices;
  }
  function getTileIndices({
    viewport,
    maxZoom,
    minZoom,
    zRange,
    extent,
    tileSize = TILE_SIZE5,
    modelMatrix: modelMatrix2,
    modelMatrixInverse,
    zoomOffset = 0
  }) {
    let z4 = viewport.isGeospatial ? Math.round(viewport.zoom + Math.log2(TILE_SIZE5 / tileSize)) + zoomOffset : Math.ceil(viewport.zoom) + zoomOffset;
    if (typeof minZoom === "number" && Number.isFinite(minZoom) && z4 < minZoom) {
      if (!extent) {
        return [];
      }
      z4 = minZoom;
    }
    if (typeof maxZoom === "number" && Number.isFinite(maxZoom) && z4 > maxZoom) {
      z4 = maxZoom;
    }
    let transformedExtent = extent;
    if (modelMatrix2 && modelMatrixInverse && extent && !viewport.isGeospatial) {
      transformedExtent = transformBox(extent, modelMatrix2);
    }
    return viewport.isGeospatial ? getOSMTileIndices(viewport, z4, zRange, extent) : getIdentityTileIndices(
      viewport,
      z4,
      tileSize,
      transformedExtent || DEFAULT_EXTENT,
      modelMatrixInverse
    );
  }
  function isURLTemplate(s5) {
    return /(?=.*{z})(?=.*{x})(?=.*({y}|{-y}))/.test(s5);
  }
  function isGeoBoundingBox(v5) {
    return Number.isFinite(v5.west) && Number.isFinite(v5.north) && Number.isFinite(v5.east) && Number.isFinite(v5.south);
  }

  // ../geo-layers/src/tileset-2d/memoize.ts
  function memoize2(compute) {
    let cachedArgs = {};
    let cachedResult;
    return (args) => {
      for (const key in args) {
        if (!isEqual2(args[key], cachedArgs[key])) {
          cachedResult = compute(args);
          cachedArgs = args;
          break;
        }
      }
      return cachedResult;
    };
  }
  function isEqual2(a6, b4) {
    if (a6 === b4) {
      return true;
    }
    if (Array.isArray(a6)) {
      const len9 = a6.length;
      if (!b4 || b4.length !== len9) {
        return false;
      }
      for (let i7 = 0; i7 < len9; i7++) {
        if (a6[i7] !== b4[i7]) {
          return false;
        }
      }
      return true;
    }
    return false;
  }

  // ../geo-layers/src/tileset-2d/tileset-2d.ts
  var TILE_STATE_VISITED = 1;
  var TILE_STATE_VISIBLE = 2;
  var STRATEGY_NEVER = "never";
  var STRATEGY_REPLACE = "no-overlap";
  var STRATEGY_DEFAULT = "best-available";
  var DEFAULT_CACHE_SCALE = 5;
  var STRATEGIES = {
    [STRATEGY_DEFAULT]: updateTileStateDefault,
    [STRATEGY_REPLACE]: updateTileStateReplace,
    [STRATEGY_NEVER]: () => {
    }
  };
  var DEFAULT_TILESET2D_PROPS = {
    extent: null,
    tileSize: 512,
    maxZoom: null,
    minZoom: null,
    maxCacheSize: null,
    maxCacheByteSize: null,
    refinementStrategy: "best-available",
    zRange: null,
    maxRequests: 6,
    debounceTime: 0,
    zoomOffset: 0,
    // onTileLoad: (tile: Tile2DHeader) => void,  // onTileUnload: (tile: Tile2DHeader) => void,  // onTileError: (error: any, tile: Tile2DHeader) => void,  /** Called when all tiles in the current viewport are loaded. */
    // onViewportLoad: ((tiles: Tile2DHeader<DataT>[]) => void) | null,
    onTileLoad: () => {
    },
    onTileUnload: () => {
    },
    onTileError: () => {
    }
  };
  var Tileset2D = class {
    /**
     * Takes in a function that returns tile data, a cache size, and a max and a min zoom level.
     * Cache size defaults to 5 * number of tiles in the current viewport
     */
    constructor(opts) {
      /* Private methods */
      this._getCullBounds = memoize2(getCullBounds);
      this.opts = { ...DEFAULT_TILESET2D_PROPS, ...opts };
      this.setOptions(this.opts);
      this.onTileLoad = (tile) => {
        this.opts.onTileLoad?.(tile);
        if (this.opts.maxCacheByteSize !== null) {
          this._cacheByteSize += tile.byteLength;
          this._resizeCache();
        }
      };
      this._requestScheduler = new RequestScheduler({
        throttleRequests: this.opts.maxRequests > 0 || this.opts.debounceTime > 0,
        maxRequests: this.opts.maxRequests,
        debounceTime: this.opts.debounceTime
      });
      this._cache = /* @__PURE__ */ new Map();
      this._tiles = [];
      this._dirty = false;
      this._cacheByteSize = 0;
      this._viewport = null;
      this._zRange = null;
      this._selectedTiles = null;
      this._frameNumber = 0;
      this._modelMatrix = new Matrix4();
      this._modelMatrixInverse = new Matrix4();
    }
    /* Public API */
    get tiles() {
      return this._tiles;
    }
    get selectedTiles() {
      return this._selectedTiles;
    }
    get isLoaded() {
      return this._selectedTiles !== null && this._selectedTiles.every((tile) => tile.isLoaded);
    }
    get needsReload() {
      return this._selectedTiles !== null && this._selectedTiles.some((tile) => tile.needsReload);
    }
    setOptions(opts) {
      Object.assign(this.opts, opts);
      if (Number.isFinite(opts.maxZoom)) {
        this._maxZoom = Math.floor(opts.maxZoom);
      }
      if (Number.isFinite(opts.minZoom)) {
        this._minZoom = Math.ceil(opts.minZoom);
      }
    }
    // Clean up any outstanding tile requests.
    finalize() {
      for (const tile of this._cache.values()) {
        if (tile.isLoading) {
          tile.abort();
        }
      }
      this._cache.clear();
      this._tiles = [];
      this._selectedTiles = null;
    }
    reloadAll() {
      for (const id of this._cache.keys()) {
        const tile = this._cache.get(id);
        if (!this._selectedTiles || !this._selectedTiles.includes(tile)) {
          this._cache.delete(id);
        } else {
          tile.setNeedsReload();
        }
      }
    }
    /**
     * Update the cache with the given viewport and model matrix and triggers callback onUpdate.
     */
    update(viewport, { zRange, modelMatrix: modelMatrix2 } = {
      zRange: null,
      modelMatrix: null
    }) {
      const modelMatrixAsMatrix4 = modelMatrix2 ? new Matrix4(modelMatrix2) : new Matrix4();
      const isModelMatrixNew = !modelMatrixAsMatrix4.equals(this._modelMatrix);
      if (!this._viewport || !viewport.equals(this._viewport) || !equals(this._zRange, zRange) || isModelMatrixNew) {
        if (isModelMatrixNew) {
          this._modelMatrixInverse = modelMatrixAsMatrix4.clone().invert();
          this._modelMatrix = modelMatrixAsMatrix4;
        }
        this._viewport = viewport;
        this._zRange = zRange;
        const tileIndices = this.getTileIndices({
          viewport,
          maxZoom: this._maxZoom,
          minZoom: this._minZoom,
          zRange,
          modelMatrix: this._modelMatrix,
          modelMatrixInverse: this._modelMatrixInverse
        });
        this._selectedTiles = tileIndices.map((index) => this._getTile(index, true));
        if (this._dirty) {
          this._rebuildTree();
        }
      } else if (this.needsReload) {
        this._selectedTiles = this._selectedTiles.map((tile) => this._getTile(tile.index, true));
      }
      const changed = this.updateTileStates();
      this._pruneRequests();
      if (this._dirty) {
        this._resizeCache();
      }
      if (changed) {
        this._frameNumber++;
      }
      return this._frameNumber;
    }
    // eslint-disable-next-line complexity
    isTileVisible(tile, cullRect, modelMatrix2) {
      if (!tile.isVisible) {
        return false;
      }
      if (cullRect && this._viewport) {
        const boundsArr = this._getCullBounds({
          viewport: this._viewport,
          z: this._zRange,
          cullRect
        });
        let { bbox } = tile;
        for (const [minX, minY, maxX, maxY] of boundsArr) {
          let overlaps;
          if ("west" in bbox) {
            overlaps = bbox.west < maxX && bbox.east > minX && bbox.south < maxY && bbox.north > minY;
          } else {
            if (modelMatrix2 && !Matrix4.IDENTITY.equals(modelMatrix2)) {
              const [left, top, right, bottom] = transformBox(
                [bbox.left, bbox.top, bbox.right, bbox.bottom],
                modelMatrix2
              );
              bbox = { left, top, right, bottom };
            }
            const y0 = Math.min(bbox.top, bbox.bottom);
            const y1 = Math.max(bbox.top, bbox.bottom);
            overlaps = bbox.left < maxX && bbox.right > minX && y0 < maxY && y1 > minY;
          }
          if (overlaps) {
            return true;
          }
        }
        return false;
      }
      return true;
    }
    /* Public interface for subclassing */
    /** Returns array of tile indices in the current viewport */
    getTileIndices({
      viewport,
      maxZoom,
      minZoom,
      zRange,
      modelMatrix: modelMatrix2,
      modelMatrixInverse
    }) {
      const { tileSize, extent, zoomOffset } = this.opts;
      return getTileIndices({
        viewport,
        maxZoom,
        minZoom,
        zRange,
        tileSize,
        extent,
        modelMatrix: modelMatrix2,
        modelMatrixInverse,
        zoomOffset
      });
    }
    /** Returns unique string key for a tile index */
    getTileId(index) {
      return `${index.x}-${index.y}-${index.z}`;
    }
    /** Returns a zoom level for a tile index */
    getTileZoom(index) {
      return index.z;
    }
    /** Returns additional metadata to add to tile, bbox by default */
    getTileMetadata(index) {
      const { tileSize } = this.opts;
      return { bbox: tileToBoundingBox(this._viewport, index.x, index.y, index.z, tileSize) };
    }
    /** Returns index of the parent tile */
    getParentIndex(index) {
      const x4 = Math.floor(index.x / 2);
      const y5 = Math.floor(index.y / 2);
      const z4 = index.z - 1;
      return { x: x4, y: y5, z: z4 };
    }
    // Returns true if any tile's visibility changed
    updateTileStates() {
      const refinementStrategy = this.opts.refinementStrategy || STRATEGY_DEFAULT;
      const visibilities = new Array(this._cache.size);
      let i7 = 0;
      for (const tile of this._cache.values()) {
        visibilities[i7++] = tile.isVisible;
        tile.isSelected = false;
        tile.isVisible = false;
      }
      for (const tile of this._selectedTiles) {
        tile.isSelected = true;
        tile.isVisible = true;
      }
      (typeof refinementStrategy === "function" ? refinementStrategy : STRATEGIES[refinementStrategy])(Array.from(this._cache.values()));
      i7 = 0;
      for (const tile of this._cache.values()) {
        if (visibilities[i7++] !== tile.isVisible) {
          return true;
        }
      }
      return false;
    }
    _pruneRequests() {
      const { maxRequests = 0 } = this.opts;
      const abortCandidates = [];
      let ongoingRequestCount = 0;
      for (const tile of this._cache.values()) {
        if (tile.isLoading) {
          ongoingRequestCount++;
          if (!tile.isSelected && !tile.isVisible) {
            abortCandidates.push(tile);
          }
        }
      }
      while (maxRequests > 0 && ongoingRequestCount > maxRequests && abortCandidates.length > 0) {
        const tile = abortCandidates.shift();
        tile.abort();
        ongoingRequestCount--;
      }
    }
    // This needs to be called every time some tiles have been added/removed from cache
    _rebuildTree() {
      const { _cache } = this;
      for (const tile of _cache.values()) {
        tile.parent = null;
        if (tile.children) {
          tile.children.length = 0;
        }
      }
      for (const tile of _cache.values()) {
        const parent = this._getNearestAncestor(tile);
        tile.parent = parent;
        if (parent?.children) {
          parent.children.push(tile);
        }
      }
    }
    /**
     * Clear tiles that are not visible when the cache is full
     */
    /* eslint-disable complexity */
    _resizeCache() {
      const { _cache, opts } = this;
      const maxCacheSize = opts.maxCacheSize ?? // @ts-expect-error called only when selectedTiles is initialized
      (opts.maxCacheByteSize !== null ? Infinity : DEFAULT_CACHE_SCALE * this.selectedTiles.length);
      const maxCacheByteSize = opts.maxCacheByteSize ?? Infinity;
      const overflown = _cache.size > maxCacheSize || this._cacheByteSize > maxCacheByteSize;
      if (overflown) {
        for (const [id, tile] of _cache) {
          if (!tile.isVisible && !tile.isSelected) {
            this._cacheByteSize -= opts.maxCacheByteSize !== null ? tile.byteLength : 0;
            _cache.delete(id);
            this.opts.onTileUnload?.(tile);
          }
          if (_cache.size <= maxCacheSize && this._cacheByteSize <= maxCacheByteSize) {
            break;
          }
        }
        this._rebuildTree();
        this._dirty = true;
      }
      if (this._dirty) {
        this._tiles = Array.from(this._cache.values()).sort((t1, t22) => t1.zoom - t22.zoom);
        this._dirty = false;
      }
    }
    _getTile(index, create33) {
      const id = this.getTileId(index);
      let tile = this._cache.get(id);
      let needsReload = false;
      if (!tile && create33) {
        tile = new Tile2DHeader(index);
        Object.assign(tile, this.getTileMetadata(tile.index));
        Object.assign(tile, { id, zoom: this.getTileZoom(tile.index) });
        needsReload = true;
        this._cache.set(id, tile);
        this._dirty = true;
      } else if (tile && tile.needsReload) {
        needsReload = true;
      }
      if (tile && needsReload) {
        tile.loadData({
          getData: this.opts.getTileData,
          requestScheduler: this._requestScheduler,
          onLoad: this.onTileLoad,
          onError: this.opts.onTileError
        });
      }
      return tile;
    }
    _getNearestAncestor(tile) {
      const { _minZoom = 0 } = this;
      let index = tile.index;
      while (this.getTileZoom(index) > _minZoom) {
        index = this.getParentIndex(index);
        const parent = this._getTile(index);
        if (parent) {
          return parent;
        }
      }
      return null;
    }
  };
  function updateTileStateDefault(allTiles) {
    for (const tile of allTiles) {
      tile.state = 0;
    }
    for (const tile of allTiles) {
      if (tile.isSelected && !getPlaceholderInAncestors(tile)) {
        getPlaceholderInChildren(tile);
      }
    }
    for (const tile of allTiles) {
      tile.isVisible = Boolean(tile.state & TILE_STATE_VISIBLE);
    }
  }
  function updateTileStateReplace(allTiles) {
    for (const tile of allTiles) {
      tile.state = 0;
    }
    for (const tile of allTiles) {
      if (tile.isSelected) {
        getPlaceholderInAncestors(tile);
      }
    }
    const sortedTiles = Array.from(allTiles).sort((t1, t22) => t1.zoom - t22.zoom);
    for (const tile of sortedTiles) {
      tile.isVisible = Boolean(tile.state & TILE_STATE_VISIBLE);
      if (tile.children && (tile.isVisible || tile.state & TILE_STATE_VISITED)) {
        for (const child of tile.children) {
          child.state = TILE_STATE_VISITED;
        }
      } else if (tile.isSelected) {
        getPlaceholderInChildren(tile);
      }
    }
  }
  function getPlaceholderInAncestors(startTile) {
    let tile = startTile;
    while (tile) {
      if (tile.isLoaded || tile.content) {
        tile.state |= TILE_STATE_VISIBLE;
        return true;
      }
      tile = tile.parent;
    }
    return false;
  }
  function getPlaceholderInChildren(tile) {
    for (const child of tile.children) {
      if (child.isLoaded || child.content) {
        child.state |= TILE_STATE_VISIBLE;
      } else {
        getPlaceholderInChildren(child);
      }
    }
  }

  // ../geo-layers/src/tile-layer/tile-layer.ts
  var defaultProps24 = {
    TilesetClass: Tileset2D,
    data: { type: "data", value: [] },
    dataComparator: urlType.equal,
    renderSubLayers: { type: "function", value: (props) => new GeoJsonLayer(props) },
    getTileData: { type: "function", optional: true, value: null },
    // TODO - change to onViewportLoad to align with Tile3DLayer
    onViewportLoad: { type: "function", optional: true, value: null },
    onTileLoad: { type: "function", value: (tile) => {
    } },
    onTileUnload: { type: "function", value: (tile) => {
    } },
    // eslint-disable-next-line
    onTileError: { type: "function", value: (err) => console.error(err) },
    extent: { type: "array", optional: true, value: null, compare: true },
    tileSize: 512,
    maxZoom: null,
    minZoom: 0,
    maxCacheSize: null,
    maxCacheByteSize: null,
    refinementStrategy: STRATEGY_DEFAULT,
    zRange: null,
    maxRequests: 6,
    debounceTime: 0,
    zoomOffset: 0
  };
  var TileLayer = class extends CompositeLayer {
    initializeState() {
      this.state = {
        tileset: null,
        isLoaded: false
      };
    }
    finalizeState() {
      this.state?.tileset?.finalize();
    }
    get isLoaded() {
      return Boolean(
        this.state?.tileset?.selectedTiles?.every(
          (tile) => tile.isLoaded && tile.layers && tile.layers.every((layer) => layer.isLoaded)
        )
      );
    }
    shouldUpdateState({ changeFlags }) {
      return changeFlags.somethingChanged;
    }
    updateState({ changeFlags }) {
      let { tileset } = this.state;
      const propsChanged = changeFlags.propsOrDataChanged || changeFlags.updateTriggersChanged;
      const dataChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData);
      if (!tileset) {
        tileset = new this.props.TilesetClass(this._getTilesetOptions());
        this.setState({ tileset });
      } else if (propsChanged) {
        tileset.setOptions(this._getTilesetOptions());
        if (dataChanged) {
          tileset.reloadAll();
        } else {
          tileset.tiles.forEach((tile) => {
            tile.layers = null;
          });
        }
      }
      this._updateTileset();
    }
    _getTilesetOptions() {
      const {
        tileSize,
        maxCacheSize,
        maxCacheByteSize,
        refinementStrategy,
        extent,
        maxZoom,
        minZoom,
        maxRequests,
        debounceTime,
        zoomOffset
      } = this.props;
      return {
        maxCacheSize,
        maxCacheByteSize,
        maxZoom,
        minZoom,
        tileSize,
        refinementStrategy,
        extent,
        maxRequests,
        debounceTime,
        zoomOffset,
        getTileData: this.getTileData.bind(this),
        onTileLoad: this._onTileLoad.bind(this),
        onTileError: this._onTileError.bind(this),
        onTileUnload: this._onTileUnload.bind(this)
      };
    }
    _updateTileset() {
      const tileset = this.state.tileset;
      const { zRange, modelMatrix: modelMatrix2 } = this.props;
      const frameNumber = tileset.update(this.context.viewport, { zRange, modelMatrix: modelMatrix2 });
      const { isLoaded } = tileset;
      const loadingStateChanged = this.state.isLoaded !== isLoaded;
      const tilesetChanged = this.state.frameNumber !== frameNumber;
      if (isLoaded && (loadingStateChanged || tilesetChanged)) {
        this._onViewportLoad();
      }
      if (tilesetChanged) {
        this.setState({ frameNumber });
      }
      this.state.isLoaded = isLoaded;
    }
    _onViewportLoad() {
      const { tileset } = this.state;
      const { onViewportLoad } = this.props;
      if (onViewportLoad) {
        onViewportLoad(tileset.selectedTiles);
      }
    }
    _onTileLoad(tile) {
      this.props.onTileLoad(tile);
      tile.layers = null;
      this.setNeedsUpdate();
    }
    _onTileError(error, tile) {
      this.props.onTileError(error);
      tile.layers = null;
      this.setNeedsUpdate();
    }
    _onTileUnload(tile) {
      this.props.onTileUnload(tile);
    }
    // Methods for subclass to override
    getTileData(tile) {
      const { data, getTileData, fetch: fetch2 } = this.props;
      const { signal } = tile;
      tile.url = typeof data === "string" || Array.isArray(data) ? getURLFromTemplate(data, tile) : null;
      if (getTileData) {
        return getTileData(tile);
      }
      if (fetch2 && tile.url) {
        return fetch2(tile.url, { propName: "data", layer: this, signal });
      }
      return null;
    }
    renderSubLayers(props) {
      return this.props.renderSubLayers(props);
    }
    getSubLayerPropsByTile(tile) {
      return null;
    }
    getPickingInfo(params) {
      const sourceLayer = params.sourceLayer;
      const sourceTile = sourceLayer.props.tile;
      const info = params.info;
      if (info.picked) {
        info.tile = sourceTile;
      }
      info.sourceTile = sourceTile;
      info.sourceTileSubLayer = sourceLayer;
      return info;
    }
    _updateAutoHighlight(info) {
      info.sourceTileSubLayer.updateAutoHighlight(info);
    }
    renderLayers() {
      return this.state.tileset.tiles.map((tile) => {
        const subLayerProps = this.getSubLayerPropsByTile(tile);
        if (!tile.isLoaded && !tile.content) {
        } else if (!tile.layers) {
          const layers = this.renderSubLayers({
            ...this.props,
            ...this.getSubLayerProps({
              id: tile.id,
              updateTriggers: this.props.updateTriggers
            }),
            data: tile.content,
            _offset: 0,
            tile
          });
          tile.layers = flatten(layers, Boolean).map(
            (layer) => layer.clone({
              tile,
              ...subLayerProps
            })
          );
        } else if (subLayerProps && tile.layers[0] && Object.keys(subLayerProps).some(
          (propName) => tile.layers[0].props[propName] !== subLayerProps[propName]
        )) {
          tile.layers = tile.layers.map((layer) => layer.clone(subLayerProps));
        }
        return tile.layers;
      });
    }
    filterSubLayer({ layer, cullRect }) {
      const { tile } = layer.props;
      const { modelMatrix: modelMatrix2 } = this.props;
      return this.state.tileset.isTileVisible(
        tile,
        cullRect,
        modelMatrix2 ? new Matrix4(modelMatrix2) : null
      );
    }
  };
  TileLayer.defaultProps = defaultProps24;
  TileLayer.layerName = "TileLayer";

  // ../geo-layers/src/trips-layer/trips-layer-uniforms.ts
  var uniformBlock15 = `uniform tripsUniforms {
  bool fadeTrail;
  float trailLength;
  float currentTime;
} trips;
`;
  var tripsUniforms = {
    name: "trips",
    vs: uniformBlock15,
    fs: uniformBlock15,
    uniformTypes: {
      fadeTrail: "f32",
      trailLength: "f32",
      currentTime: "f32"
    }
  };

  // ../geo-layers/src/trips-layer/trips-layer.ts
  var defaultProps25 = {
    fadeTrail: true,
    trailLength: { type: "number", value: 120, min: 0 },
    currentTime: { type: "number", value: 0, min: 0 },
    getTimestamps: { type: "accessor", value: (d5) => d5.timestamps }
  };
  var TripsLayer = class extends PathLayer {
    getShaders() {
      const shaders = super.getShaders();
      shaders.inject = {
        "vs:#decl": `in float instanceTimestamps;
in float instanceNextTimestamps;
out float vTime;
`,
        // Timestamp of the vertex
        "vs:#main-end": `vTime = instanceTimestamps + (instanceNextTimestamps - instanceTimestamps) * vPathPosition.y / vPathLength;
`,
        "fs:#decl": `in float vTime;
`,
        // Drop the segments outside of the time window
        "fs:#main-start": `if(vTime > trips.currentTime || (trips.fadeTrail && (vTime < trips.currentTime - trips.trailLength))) {
  discard;
}
`,
        // Fade the color (currentTime - 100%, end of trail - 0%)
        "fs:DECKGL_FILTER_COLOR": `if(trips.fadeTrail) {
  color.a *= 1.0 - (trips.currentTime - vTime) / trips.trailLength;
}
`
      };
      shaders.modules = [...shaders.modules, tripsUniforms];
      return shaders;
    }
    initializeState() {
      super.initializeState();
      const attributeManager = this.getAttributeManager();
      attributeManager.addInstanced({
        timestamps: {
          size: 1,
          accessor: "getTimestamps",
          shaderAttributes: {
            instanceTimestamps: {
              vertexOffset: 0
            },
            instanceNextTimestamps: {
              vertexOffset: 1
            }
          }
        }
      });
    }
    draw(params) {
      const { fadeTrail, trailLength, currentTime } = this.props;
      const tripsProps = { fadeTrail, trailLength, currentTime };
      const model = this.state.model;
      model.shaderInputs.setProps({ trips: tripsProps });
      super.draw(params);
    }
  };
  TripsLayer.layerName = "TripsLayer";
  TripsLayer.defaultProps = defaultProps25;

  // ../geo-layers/src/h3-layers/h3-cluster-layer.ts
  var import_h3_js3 = __toESM(require_h3_js(), 1);

  // ../geo-layers/src/h3-layers/h3-hexagon-layer.ts
  var import_h3_js2 = __toESM(require_h3_js(), 1);
  var UPDATE_THRESHOLD_KM = 10;
  function mergeTriggers(getHexagon, coverage) {
    let trigger;
    if (getHexagon === void 0 || getHexagon === null) {
      trigger = coverage;
    } else if (typeof getHexagon === "object") {
      trigger = { ...getHexagon, coverage };
    } else {
      trigger = { getHexagon, coverage };
    }
    return trigger;
  }
  var defaultProps26 = {
    ...PolygonLayer.defaultProps,
    highPrecision: "auto",
    coverage: { type: "number", min: 0, max: 1, value: 1 },
    centerHexagon: null,
    getHexagon: { type: "accessor", value: (x4) => x4.hexagon },
    extruded: true
  };
  var _H3HexagonLayer = class extends CompositeLayer {
    initializeState() {
      _H3HexagonLayer._checkH3Lib();
      this.state = {
        edgeLengthKM: 0,
        resolution: -1
      };
    }
    shouldUpdateState({ changeFlags }) {
      return this._shouldUseHighPrecision() ? changeFlags.propsOrDataChanged : changeFlags.somethingChanged;
    }
    updateState({ props, changeFlags }) {
      if (props.highPrecision !== true && (changeFlags.dataChanged || changeFlags.updateTriggersChanged && changeFlags.updateTriggersChanged.getHexagon)) {
        const dataProps = this._calculateH3DataProps();
        this.setState(dataProps);
      }
      this._updateVertices(this.context.viewport);
    }
    _calculateH3DataProps() {
      let resolution = -1;
      let hasPentagon = false;
      let hasMultipleRes = false;
      const { iterable, objectInfo } = createIterable(this.props.data);
      for (const object of iterable) {
        objectInfo.index++;
        const hexId = this.props.getHexagon(object, objectInfo);
        const hexResolution = (0, import_h3_js2.getResolution)(hexId);
        if (resolution < 0) {
          resolution = hexResolution;
          if (!this.props.highPrecision)
            break;
        } else if (resolution !== hexResolution) {
          hasMultipleRes = true;
          break;
        }
        if ((0, import_h3_js2.isPentagon)(hexId)) {
          hasPentagon = true;
          break;
        }
      }
      return {
        resolution,
        edgeLengthKM: resolution >= 0 ? (0, import_h3_js2.getHexagonEdgeLengthAvg)(resolution, "km") : 0,
        hasMultipleRes,
        hasPentagon
      };
    }
    _shouldUseHighPrecision() {
      if (this.props.highPrecision === "auto") {
        const { resolution, hasPentagon, hasMultipleRes } = this.state;
        const { viewport } = this.context;
        return Boolean(viewport?.resolution) || hasMultipleRes || hasPentagon || resolution >= 0 && resolution <= 5;
      }
      return this.props.highPrecision;
    }
    _updateVertices(viewport) {
      if (this._shouldUseHighPrecision()) {
        return;
      }
      const { resolution, edgeLengthKM, centerHex } = this.state;
      if (resolution < 0) {
        return;
      }
      const hex = this.props.centerHexagon || (0, import_h3_js2.latLngToCell)(viewport.latitude, viewport.longitude, resolution);
      if (centerHex === hex) {
        return;
      }
      if (centerHex) {
        try {
          const distance7 = (0, import_h3_js2.gridDistance)(centerHex, hex);
          if (distance7 * edgeLengthKM < UPDATE_THRESHOLD_KM) {
            return;
          }
        } catch {
        }
      }
      const { unitsPerMeter: unitsPerMeter2 } = viewport.distanceScales;
      let vertices = h3ToPolygon(hex);
      const [centerLat, centerLng] = (0, import_h3_js2.cellToLatLng)(hex);
      const [centerX, centerY] = viewport.projectFlat([centerLng, centerLat]);
      vertices = vertices.map((p5) => {
        const worldPosition = viewport.projectFlat(p5);
        return [
          (worldPosition[0] - centerX) / unitsPerMeter2[0],
          (worldPosition[1] - centerY) / unitsPerMeter2[1]
        ];
      });
      this.setState({ centerHex: hex, vertices });
    }
    renderLayers() {
      return this._shouldUseHighPrecision() ? this._renderPolygonLayer() : this._renderColumnLayer();
    }
    _getForwardProps() {
      const {
        elevationScale,
        material,
        coverage,
        extruded,
        wireframe,
        stroked,
        filled,
        lineWidthUnits,
        lineWidthScale,
        lineWidthMinPixels,
        lineWidthMaxPixels,
        getFillColor,
        getElevation,
        getLineColor,
        getLineWidth,
        transitions,
        updateTriggers
      } = this.props;
      return {
        elevationScale,
        extruded,
        coverage,
        wireframe,
        stroked,
        filled,
        lineWidthUnits,
        lineWidthScale,
        lineWidthMinPixels,
        lineWidthMaxPixels,
        material,
        getElevation,
        getFillColor,
        getLineColor,
        getLineWidth,
        transitions,
        updateTriggers: {
          getFillColor: updateTriggers.getFillColor,
          getElevation: updateTriggers.getElevation,
          getLineColor: updateTriggers.getLineColor,
          getLineWidth: updateTriggers.getLineWidth
        }
      };
    }
    _renderPolygonLayer() {
      const { data, getHexagon, updateTriggers, coverage } = this.props;
      const SubLayerClass = this.getSubLayerClass("hexagon-cell-hifi", PolygonLayer);
      const forwardProps2 = this._getForwardProps();
      forwardProps2.updateTriggers.getPolygon = mergeTriggers(updateTriggers.getHexagon, coverage);
      return new SubLayerClass(
        forwardProps2,
        this.getSubLayerProps({
          id: "hexagon-cell-hifi",
          updateTriggers: forwardProps2.updateTriggers
        }),
        {
          data,
          _normalize: false,
          _windingOrder: "CCW",
          positionFormat: "XY",
          getPolygon: (object, objectInfo) => {
            const hexagonId = getHexagon(object, objectInfo);
            return flattenPolygon(h3ToPolygon(hexagonId, coverage));
          }
        }
      );
    }
    _renderColumnLayer() {
      const { data, getHexagon, updateTriggers } = this.props;
      const SubLayerClass = this.getSubLayerClass("hexagon-cell", ColumnLayer);
      const forwardProps2 = this._getForwardProps();
      forwardProps2.updateTriggers.getPosition = updateTriggers.getHexagon;
      return new SubLayerClass(
        forwardProps2,
        this.getSubLayerProps({
          id: "hexagon-cell",
          flatShading: true,
          updateTriggers: forwardProps2.updateTriggers
        }),
        {
          data,
          diskResolution: 6,
          // generate an extruded hexagon as the base geometry
          radius: 1,
          vertices: this.state.vertices,
          getPosition: getHexagonCentroid.bind(null, getHexagon)
        }
      );
    }
  };
  var H3HexagonLayer = _H3HexagonLayer;
  H3HexagonLayer.defaultProps = defaultProps26;
  H3HexagonLayer.layerName = "H3HexagonLayer";
  // See `main/bundle.ts`
  H3HexagonLayer._checkH3Lib = () => {
  };

  // ../geo-layers/src/h3-layers/h3-cluster-layer.ts
  var defaultProps27 = {
    getHexagons: { type: "accessor", value: (d5) => d5.hexagons }
  };
  var H3ClusterLayer = class extends GeoCellLayer {
    initializeState() {
      H3HexagonLayer._checkH3Lib();
    }
    updateState({ props, changeFlags }) {
      if (changeFlags.dataChanged || changeFlags.updateTriggersChanged && changeFlags.updateTriggersChanged.getHexagons) {
        const { data, getHexagons } = props;
        const polygons = [];
        const { iterable, objectInfo } = createIterable(data);
        for (const object of iterable) {
          objectInfo.index++;
          const hexagons = getHexagons(object, objectInfo);
          const multiPolygon = (0, import_h3_js3.cellsToMultiPolygon)(hexagons, true);
          for (const polygon of multiPolygon) {
            for (const ring of polygon) {
              normalizeLongitudes2(ring);
            }
            polygons.push(this.getSubLayerRow({ polygon }, object, objectInfo.index));
          }
        }
        this.setState({ polygons });
      }
    }
    indexToBounds() {
      const { getElevation, getFillColor, getLineColor, getLineWidth } = this.props;
      return {
        data: this.state.polygons,
        getPolygon: (d5) => d5.polygon,
        getElevation: this.getSubLayerAccessor(getElevation),
        getFillColor: this.getSubLayerAccessor(getFillColor),
        getLineColor: this.getSubLayerAccessor(getLineColor),
        getLineWidth: this.getSubLayerAccessor(getLineWidth)
      };
    }
  };
  H3ClusterLayer.layerName = "H3ClusterLayer";
  H3ClusterLayer.defaultProps = defaultProps27;

  // ../mesh-layers/src/simple-mesh-layer/simple-mesh-layer.ts
  init_dist4();

  // ../mesh-layers/src/utils/matrix.ts
  var RADIAN_PER_DEGREE = Math.PI / 180;
  var modelMatrix = new Float32Array(16);
  var valueArray = new Float32Array(12);
  function calculateTransformMatrix(targetMatrix, orientation, scale24) {
    const pitch = orientation[0] * RADIAN_PER_DEGREE;
    const yaw = orientation[1] * RADIAN_PER_DEGREE;
    const roll = orientation[2] * RADIAN_PER_DEGREE;
    const sr = Math.sin(roll);
    const sp = Math.sin(pitch);
    const sw = Math.sin(yaw);
    const cr = Math.cos(roll);
    const cp = Math.cos(pitch);
    const cw = Math.cos(yaw);
    const scx = scale24[0];
    const scy = scale24[1];
    const scz = scale24[2];
    targetMatrix[0] = scx * cw * cp;
    targetMatrix[1] = scx * sw * cp;
    targetMatrix[2] = scx * -sp;
    targetMatrix[3] = scy * (-sw * cr + cw * sp * sr);
    targetMatrix[4] = scy * (cw * cr + sw * sp * sr);
    targetMatrix[5] = scy * cp * sr;
    targetMatrix[6] = scz * (sw * sr + cw * sp * cr);
    targetMatrix[7] = scz * (-cw * sr + sw * sp * cr);
    targetMatrix[8] = scz * cp * cr;
  }
  function getExtendedMat3FromMat4(mat4) {
    mat4[0] = mat4[0];
    mat4[1] = mat4[1];
    mat4[2] = mat4[2];
    mat4[3] = mat4[4];
    mat4[4] = mat4[5];
    mat4[5] = mat4[6];
    mat4[6] = mat4[8];
    mat4[7] = mat4[9];
    mat4[8] = mat4[10];
    mat4[9] = mat4[12];
    mat4[10] = mat4[13];
    mat4[11] = mat4[14];
    return mat4.subarray(0, 12);
  }
  var MATRIX_ATTRIBUTES = {
    size: 12,
    accessor: ["getOrientation", "getScale", "getTranslation", "getTransformMatrix"],
    shaderAttributes: {
      instanceModelMatrixCol0: {
        size: 3,
        elementOffset: 0
      },
      instanceModelMatrixCol1: {
        size: 3,
        elementOffset: 3
      },
      instanceModelMatrixCol2: {
        size: 3,
        elementOffset: 6
      },
      instanceTranslation: {
        size: 3,
        elementOffset: 9
      }
    },
    update(attribute, { startRow, endRow }) {
      const { data, getOrientation, getScale: getScale3, getTranslation: getTranslation3, getTransformMatrix } = this.props;
      const arrayMatrix = Array.isArray(getTransformMatrix);
      const constantMatrix = arrayMatrix && getTransformMatrix.length === 16;
      const constantScale = Array.isArray(getScale3);
      const constantOrientation = Array.isArray(getOrientation);
      const constantTranslation = Array.isArray(getTranslation3);
      const hasMatrix = constantMatrix || !arrayMatrix && Boolean(getTransformMatrix(data[0]));
      if (hasMatrix) {
        attribute.constant = constantMatrix;
      } else {
        attribute.constant = constantOrientation && constantScale && constantTranslation;
      }
      const instanceModelMatrixData = attribute.value;
      if (attribute.constant) {
        let matrix;
        if (hasMatrix) {
          modelMatrix.set(getTransformMatrix);
          matrix = getExtendedMat3FromMat4(modelMatrix);
        } else {
          matrix = valueArray;
          const orientation = getOrientation;
          const scale24 = getScale3;
          calculateTransformMatrix(matrix, orientation, scale24);
          matrix.set(getTranslation3, 9);
        }
        attribute.value = new Float32Array(matrix);
      } else {
        let i7 = startRow * attribute.size;
        const { iterable, objectInfo } = createIterable(data, startRow, endRow);
        for (const object of iterable) {
          objectInfo.index++;
          let matrix;
          if (hasMatrix) {
            modelMatrix.set(
              constantMatrix ? getTransformMatrix : getTransformMatrix(object, objectInfo)
            );
            matrix = getExtendedMat3FromMat4(modelMatrix);
          } else {
            matrix = valueArray;
            const orientation = constantOrientation ? getOrientation : getOrientation(object, objectInfo);
            const scale24 = constantScale ? getScale3 : getScale3(object, objectInfo);
            calculateTransformMatrix(matrix, orientation, scale24);
            matrix.set(constantTranslation ? getTranslation3 : getTranslation3(object, objectInfo), 9);
          }
          instanceModelMatrixData[i7++] = matrix[0];
          instanceModelMatrixData[i7++] = matrix[1];
          instanceModelMatrixData[i7++] = matrix[2];
          instanceModelMatrixData[i7++] = matrix[3];
          instanceModelMatrixData[i7++] = matrix[4];
          instanceModelMatrixData[i7++] = matrix[5];
          instanceModelMatrixData[i7++] = matrix[6];
          instanceModelMatrixData[i7++] = matrix[7];
          instanceModelMatrixData[i7++] = matrix[8];
          instanceModelMatrixData[i7++] = matrix[9];
          instanceModelMatrixData[i7++] = matrix[10];
          instanceModelMatrixData[i7++] = matrix[11];
        }
      }
    }
  };
  function shouldComposeModelMatrix(viewport, coordinateSystem) {
    return coordinateSystem === COORDINATE_SYSTEM.CARTESIAN || coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS || coordinateSystem === COORDINATE_SYSTEM.DEFAULT && !viewport.isGeospatial;
  }

  // ../mesh-layers/src/simple-mesh-layer/simple-mesh-layer-uniforms.ts
  var uniformBlock16 = `uniform simpleMeshUniforms {
  float sizeScale;
  bool composeModelMatrix;
  bool hasTexture;
  bool flatShading;
} simpleMesh;
`;
  var simpleMeshUniforms = {
    name: "simpleMesh",
    vs: uniformBlock16,
    fs: uniformBlock16,
    uniformTypes: {
      sizeScale: "f32",
      composeModelMatrix: "f32",
      hasTexture: "f32",
      flatShading: "f32"
    }
  };

  // ../mesh-layers/src/simple-mesh-layer/simple-mesh-layer-vertex.glsl.ts
  var simple_mesh_layer_vertex_glsl_default = `#version 300 es
#define SHADER_NAME simple-mesh-layer-vs

// Primitive attributes
in vec3 positions;
in vec3 normals;
in vec3 colors;
in vec2 texCoords;

// Instance attributes
in vec3 instancePositions;
in vec3 instancePositions64Low;
in vec4 instanceColors;
in vec3 instancePickingColors;
in vec3 instanceModelMatrixCol0;
in vec3 instanceModelMatrixCol1;
in vec3 instanceModelMatrixCol2;
in vec3 instanceTranslation;

// Outputs to fragment shader
out vec2 vTexCoord;
out vec3 cameraPosition;
out vec3 normals_commonspace;
out vec4 position_commonspace;
out vec4 vColor;

void main(void) {
  geometry.worldPosition = instancePositions;
  geometry.uv = texCoords;
  geometry.pickingColor = instancePickingColors;

  vTexCoord = texCoords;
  cameraPosition = project.cameraPosition;
  vColor = vec4(colors * instanceColors.rgb, instanceColors.a);

  mat3 instanceModelMatrix = mat3(instanceModelMatrixCol0, instanceModelMatrixCol1, instanceModelMatrixCol2);
  vec3 pos = (instanceModelMatrix * positions) * simpleMesh.sizeScale + instanceTranslation;

  if (simpleMesh.composeModelMatrix) {
    DECKGL_FILTER_SIZE(pos, geometry);
    // using instancePositions as world coordinates
    // when using globe mode, this branch does not re-orient the model to align with the surface of the earth
    // call project_normal before setting position to avoid rotation
    normals_commonspace = project_normal(instanceModelMatrix * normals);
    geometry.worldPosition += pos;
    gl_Position = project_position_to_clipspace(pos + instancePositions, instancePositions64Low, vec3(0.0), position_commonspace);
    geometry.position = position_commonspace;
  }
  else {
    pos = project_size(pos);
    DECKGL_FILTER_SIZE(pos, geometry);
    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, pos, position_commonspace);
    geometry.position = position_commonspace;
    normals_commonspace = project_normal(instanceModelMatrix * normals);
  }

  geometry.normal = normals_commonspace;
  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);

  DECKGL_FILTER_COLOR(vColor, geometry);
}
`;

  // ../mesh-layers/src/simple-mesh-layer/simple-mesh-layer-fragment.glsl.ts
  var simple_mesh_layer_fragment_glsl_default = `#version 300 es
#define SHADER_NAME simple-mesh-layer-fs

precision highp float;

uniform sampler2D sampler;

in vec2 vTexCoord;
in vec3 cameraPosition;
in vec3 normals_commonspace;
in vec4 position_commonspace;
in vec4 vColor;

out vec4 fragColor;

void main(void) {
  geometry.uv = vTexCoord;

  vec3 normal;
  if (simpleMesh.flatShading) {

  normal = normalize(cross(dFdx(position_commonspace.xyz), dFdy(position_commonspace.xyz)));
  } else {
    normal = normals_commonspace;
  }

  vec4 color = simpleMesh.hasTexture ? texture(sampler, vTexCoord) : vColor;
  DECKGL_FILTER_COLOR(color, geometry);

  vec3 lightColor = lighting_getLightColor(color.rgb, cameraPosition, position_commonspace.xyz, normal);
  fragColor = vec4(lightColor, color.a * layer.opacity);
}
`;

  // ../mesh-layers/src/simple-mesh-layer/simple-mesh-layer.ts
  function normalizeGeometryAttributes(attributes) {
    const positionAttribute = attributes.positions || attributes.POSITION;
    log_default.assert(positionAttribute, 'no "postions" or "POSITION" attribute in mesh');
    const vertexCount = positionAttribute.value.length / positionAttribute.size;
    let colorAttribute = attributes.COLOR_0 || attributes.colors;
    if (!colorAttribute) {
      colorAttribute = { size: 3, value: new Float32Array(vertexCount * 3).fill(1) };
    }
    let normalAttribute = attributes.NORMAL || attributes.normals;
    if (!normalAttribute) {
      normalAttribute = { size: 3, value: new Float32Array(vertexCount * 3).fill(0) };
    }
    let texCoordAttribute = attributes.TEXCOORD_0 || attributes.texCoords;
    if (!texCoordAttribute) {
      texCoordAttribute = { size: 2, value: new Float32Array(vertexCount * 2).fill(0) };
    }
    return {
      positions: positionAttribute,
      colors: colorAttribute,
      normals: normalAttribute,
      texCoords: texCoordAttribute
    };
  }
  function getGeometry(data) {
    if (data instanceof Geometry) {
      data.attributes = normalizeGeometryAttributes(data.attributes);
      return data;
    } else if (data.attributes) {
      return new Geometry({
        ...data,
        topology: "triangle-list",
        attributes: normalizeGeometryAttributes(data.attributes)
      });
    } else {
      return new Geometry({
        topology: "triangle-list",
        attributes: normalizeGeometryAttributes(data)
      });
    }
  }
  var DEFAULT_COLOR10 = [0, 0, 0, 255];
  var defaultProps28 = {
    mesh: { type: "object", value: null, async: true },
    texture: { type: "image", value: null, async: true },
    sizeScale: { type: "number", value: 1, min: 0 },
    // _instanced is a hack to use world position instead of meter offsets in mesh
    // TODO - formalize API
    _instanced: true,
    // NOTE(Tarek): Quick and dirty wireframe. Just draws
    // the same mesh with LINE_STRIPS. Won't follow edges
    // of the original mesh.
    wireframe: false,
    // Optional material for 'lighting' shader module
    material: true,
    getPosition: { type: "accessor", value: (x4) => x4.position },
    getColor: { type: "accessor", value: DEFAULT_COLOR10 },
    // yaw, pitch and roll are in degrees
    // https://en.wikipedia.org/wiki/Euler_angles
    // [pitch, yaw, roll]
    getOrientation: { type: "accessor", value: [0, 0, 0] },
    getScale: { type: "accessor", value: [1, 1, 1] },
    getTranslation: { type: "accessor", value: [0, 0, 0] },
    // 4x4 matrix
    getTransformMatrix: { type: "accessor", value: [] },
    textureParameters: { type: "object", ignore: true, value: null }
  };
  var SimpleMeshLayer = class extends Layer {
    getShaders() {
      return super.getShaders({
        vs: simple_mesh_layer_vertex_glsl_default,
        fs: simple_mesh_layer_fragment_glsl_default,
        modules: [project32_default, phongMaterial, picking_default, simpleMeshUniforms]
      });
    }
    getBounds() {
      if (this.props._instanced) {
        return super.getBounds();
      }
      let result = this.state.positionBounds;
      if (result) {
        return result;
      }
      const { mesh } = this.props;
      if (!mesh) {
        return null;
      }
      result = mesh.header?.boundingBox;
      if (!result) {
        const { attributes } = getGeometry(mesh);
        attributes.POSITION = attributes.POSITION || attributes.positions;
        result = getMeshBoundingBox(attributes);
      }
      this.state.positionBounds = result;
      return result;
    }
    initializeState() {
      const attributeManager = this.getAttributeManager();
      attributeManager.addInstanced({
        instancePositions: {
          transition: true,
          type: "float64",
          fp64: this.use64bitPositions(),
          size: 3,
          accessor: "getPosition"
        },
        instanceColors: {
          type: "unorm8",
          transition: true,
          size: this.props.colorFormat.length,
          accessor: "getColor",
          defaultValue: [0, 0, 0, 255]
        },
        instanceModelMatrix: MATRIX_ATTRIBUTES
      });
      this.setState({
        // Avoid luma.gl's missing uniform warning
        // TODO - add feature to luma.gl to specify ignored uniforms?
        emptyTexture: this.context.device.createTexture({
          data: new Uint8Array(4),
          width: 1,
          height: 1
        })
      });
    }
    updateState(params) {
      super.updateState(params);
      const { props, oldProps, changeFlags } = params;
      if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {
        this.state.positionBounds = null;
        this.state.model?.destroy();
        if (props.mesh) {
          this.state.model = this.getModel(props.mesh);
          const attributes = props.mesh.attributes || props.mesh;
          this.setState({
            hasNormals: Boolean(attributes.NORMAL || attributes.normals)
          });
        }
        this.getAttributeManager().invalidateAll();
      }
      if (props.texture !== oldProps.texture && props.texture instanceof Texture) {
        this.setTexture(props.texture);
      }
      if (this.state.model) {
        this.state.model.setTopology(this.props.wireframe ? "line-strip" : "triangle-list");
      }
    }
    finalizeState(context) {
      super.finalizeState(context);
      this.state.emptyTexture.delete();
    }
    draw({ uniforms }) {
      const { model } = this.state;
      if (!model) {
        return;
      }
      const { viewport, renderPass } = this.context;
      const { sizeScale, coordinateSystem, _instanced } = this.props;
      const simpleMeshProps = {
        sizeScale,
        composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),
        flatShading: !this.state.hasNormals
      };
      model.shaderInputs.setProps({ simpleMesh: simpleMeshProps });
      model.draw(renderPass);
    }
    get isLoaded() {
      return Boolean(this.state?.model && super.isLoaded);
    }
    getModel(mesh) {
      const model = new Model(this.context.device, {
        ...this.getShaders(),
        id: this.props.id,
        bufferLayout: this.getAttributeManager().getBufferLayouts(),
        geometry: getGeometry(mesh),
        isInstanced: true
      });
      const { texture } = this.props;
      const { emptyTexture } = this.state;
      const simpleMeshProps = {
        sampler: texture || emptyTexture,
        hasTexture: Boolean(texture)
      };
      model.shaderInputs.setProps({ simpleMesh: simpleMeshProps });
      return model;
    }
    setTexture(texture) {
      const { emptyTexture, model } = this.state;
      if (model) {
        const simpleMeshProps = {
          sampler: texture || emptyTexture,
          hasTexture: Boolean(texture)
        };
        model.shaderInputs.setProps({ simpleMesh: simpleMeshProps });
      }
    }
  };
  SimpleMeshLayer.defaultProps = defaultProps28;
  SimpleMeshLayer.layerName = "SimpleMeshLayer";

  // ../../node_modules/@loaders.gl/textures/dist/lib/utils/version.js
  var VERSION8 = true ? "4.2.1" : "latest";

  // ../../node_modules/@loaders.gl/textures/dist/lib/parsers/basis-module-loader.js
  var BASIS_EXTERNAL_LIBRARIES = {
    /** Basis transcoder, javascript wrapper part */
    TRANSCODER: "basis_transcoder.js",
    /** Basis transcoder, compiled web assembly part */
    TRANSCODER_WASM: "basis_transcoder.wasm",
    /** Basis encoder, javascript wrapper part */
    ENCODER: "basis_encoder.js",
    /** Basis encoder, compiled web assembly part */
    ENCODER_WASM: "basis_encoder.wasm"
  };
  var loadBasisTranscoderPromise;
  async function loadBasisTranscoderModule(options) {
    registerJSModules(options.modules);
    const basis = getJSModuleOrNull("basis");
    if (basis) {
      return basis;
    }
    loadBasisTranscoderPromise ||= loadBasisTranscoder(options);
    return await loadBasisTranscoderPromise;
  }
  async function loadBasisTranscoder(options) {
    let BASIS2 = null;
    let wasmBinary = null;
    [BASIS2, wasmBinary] = await Promise.all([
      await loadLibrary(BASIS_EXTERNAL_LIBRARIES.TRANSCODER, "textures", options),
      await loadLibrary(BASIS_EXTERNAL_LIBRARIES.TRANSCODER_WASM, "textures", options)
    ]);
    BASIS2 = BASIS2 || globalThis.BASIS;
    return await initializeBasisTranscoderModule(BASIS2, wasmBinary);
  }
  function initializeBasisTranscoderModule(BasisModule, wasmBinary) {
    const options = {};
    if (wasmBinary) {
      options.wasmBinary = wasmBinary;
    }
    return new Promise((resolve2) => {
      BasisModule(options).then((module) => {
        const { BasisFile, initializeBasis } = module;
        initializeBasis();
        resolve2({ BasisFile });
      });
    });
  }
  var loadBasisEncoderPromise;
  async function loadBasisEncoderModule(options) {
    const modules = options.modules || {};
    if (modules.basisEncoder) {
      return modules.basisEncoder;
    }
    loadBasisEncoderPromise = loadBasisEncoderPromise || loadBasisEncoder(options);
    return await loadBasisEncoderPromise;
  }
  async function loadBasisEncoder(options) {
    let BASIS_ENCODER = null;
    let wasmBinary = null;
    [BASIS_ENCODER, wasmBinary] = await Promise.all([
      await loadLibrary(BASIS_EXTERNAL_LIBRARIES.ENCODER, "textures", options),
      await loadLibrary(BASIS_EXTERNAL_LIBRARIES.ENCODER_WASM, "textures", options)
    ]);
    BASIS_ENCODER = BASIS_ENCODER || globalThis.BASIS;
    return await initializeBasisEncoderModule(BASIS_ENCODER, wasmBinary);
  }
  function initializeBasisEncoderModule(BasisEncoderModule, wasmBinary) {
    const options = {};
    if (wasmBinary) {
      options.wasmBinary = wasmBinary;
    }
    return new Promise((resolve2) => {
      BasisEncoderModule(options).then((module) => {
        const { BasisFile, KTX2File, initializeBasis, BasisEncoder } = module;
        initializeBasis();
        resolve2({ BasisFile, KTX2File, BasisEncoder });
      });
    });
  }

  // ../../node_modules/@loaders.gl/textures/dist/lib/gl-extensions.js
  var GL_EXTENSIONS_CONSTANTS = {
    // WEBGL_compressed_texture_s3tc
    COMPRESSED_RGB_S3TC_DXT1_EXT: 33776,
    COMPRESSED_RGBA_S3TC_DXT1_EXT: 33777,
    COMPRESSED_RGBA_S3TC_DXT3_EXT: 33778,
    COMPRESSED_RGBA_S3TC_DXT5_EXT: 33779,
    // WEBGL_compressed_texture_es3
    COMPRESSED_R11_EAC: 37488,
    COMPRESSED_SIGNED_R11_EAC: 37489,
    COMPRESSED_RG11_EAC: 37490,
    COMPRESSED_SIGNED_RG11_EAC: 37491,
    COMPRESSED_RGB8_ETC2: 37492,
    COMPRESSED_RGBA8_ETC2_EAC: 37493,
    COMPRESSED_SRGB8_ETC2: 37494,
    COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: 37495,
    COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: 37496,
    COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: 37497,
    // WEBGL_compressed_texture_pvrtc
    COMPRESSED_RGB_PVRTC_4BPPV1_IMG: 35840,
    COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: 35842,
    COMPRESSED_RGB_PVRTC_2BPPV1_IMG: 35841,
    COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: 35843,
    // WEBGL_compressed_texture_etc1
    COMPRESSED_RGB_ETC1_WEBGL: 36196,
    // WEBGL_compressed_texture_atc
    COMPRESSED_RGB_ATC_WEBGL: 35986,
    COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL: 35987,
    COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL: 34798,
    // WEBGL_compressed_texture_astc
    COMPRESSED_RGBA_ASTC_4X4_KHR: 37808,
    COMPRESSED_RGBA_ASTC_5X4_KHR: 37809,
    COMPRESSED_RGBA_ASTC_5X5_KHR: 37810,
    COMPRESSED_RGBA_ASTC_6X5_KHR: 37811,
    COMPRESSED_RGBA_ASTC_6X6_KHR: 37812,
    COMPRESSED_RGBA_ASTC_8X5_KHR: 37813,
    COMPRESSED_RGBA_ASTC_8X6_KHR: 37814,
    COMPRESSED_RGBA_ASTC_8X8_KHR: 37815,
    COMPRESSED_RGBA_ASTC_10X5_KHR: 37816,
    COMPRESSED_RGBA_ASTC_10X6_KHR: 37817,
    COMPRESSED_RGBA_ASTC_10X8_KHR: 37818,
    COMPRESSED_RGBA_ASTC_10X10_KHR: 37819,
    COMPRESSED_RGBA_ASTC_12X10_KHR: 37820,
    COMPRESSED_RGBA_ASTC_12X12_KHR: 37821,
    COMPRESSED_SRGB8_ALPHA8_ASTC_4X4_KHR: 37840,
    COMPRESSED_SRGB8_ALPHA8_ASTC_5X4_KHR: 37841,
    COMPRESSED_SRGB8_ALPHA8_ASTC_5X5_KHR: 37842,
    COMPRESSED_SRGB8_ALPHA8_ASTC_6X5_KHR: 37843,
    COMPRESSED_SRGB8_ALPHA8_ASTC_6X6_KHR: 37844,
    COMPRESSED_SRGB8_ALPHA8_ASTC_8X5_KHR: 37845,
    COMPRESSED_SRGB8_ALPHA8_ASTC_8X6_KHR: 37846,
    COMPRESSED_SRGB8_ALPHA8_ASTC_8X8_KHR: 37847,
    COMPRESSED_SRGB8_ALPHA8_ASTC_10X5_KHR: 37848,
    COMPRESSED_SRGB8_ALPHA8_ASTC_10X6_KHR: 37849,
    COMPRESSED_SRGB8_ALPHA8_ASTC_10X8_KHR: 37850,
    COMPRESSED_SRGB8_ALPHA8_ASTC_10X10_KHR: 37851,
    COMPRESSED_SRGB8_ALPHA8_ASTC_12X10_KHR: 37852,
    COMPRESSED_SRGB8_ALPHA8_ASTC_12X12_KHR: 37853,
    // EXT_texture_compression_rgtc
    COMPRESSED_RED_RGTC1_EXT: 36283,
    COMPRESSED_SIGNED_RED_RGTC1_EXT: 36284,
    COMPRESSED_RED_GREEN_RGTC2_EXT: 36285,
    COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT: 36286,
    // WEBGL_compressed_texture_s3tc_srgb
    COMPRESSED_SRGB_S3TC_DXT1_EXT: 35916,
    COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: 35917,
    COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: 35918,
    COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: 35919
  };

  // ../../node_modules/@loaders.gl/textures/dist/lib/utils/texture-formats.js
  var BROWSER_PREFIXES = ["", "WEBKIT_", "MOZ_"];
  var WEBGL_EXTENSIONS = {
    /* eslint-disable camelcase */
    WEBGL_compressed_texture_s3tc: "dxt",
    WEBGL_compressed_texture_s3tc_srgb: "dxt-srgb",
    WEBGL_compressed_texture_etc1: "etc1",
    WEBGL_compressed_texture_etc: "etc2",
    WEBGL_compressed_texture_pvrtc: "pvrtc",
    WEBGL_compressed_texture_atc: "atc",
    WEBGL_compressed_texture_astc: "astc",
    EXT_texture_compression_rgtc: "rgtc"
    /* eslint-enable camelcase */
  };
  var formats = null;
  function getSupportedGPUTextureFormats(gl) {
    if (!formats) {
      gl = gl || getWebGLContext() || void 0;
      formats = /* @__PURE__ */ new Set();
      for (const prefix of BROWSER_PREFIXES) {
        for (const extension in WEBGL_EXTENSIONS) {
          if (gl && gl.getExtension(`${prefix}${extension}`)) {
            const gpuTextureFormat = WEBGL_EXTENSIONS[extension];
            formats.add(gpuTextureFormat);
          }
        }
      }
    }
    return formats;
  }
  function getWebGLContext() {
    try {
      const canvas2 = document.createElement("canvas");
      return canvas2.getContext("webgl");
    } catch (error) {
      return null;
    }
  }

  // ../../node_modules/ktx-parse/dist/ktx-parse.modern.js
  var t2 = new Uint8Array([0]);
  var n2;
  var i2;
  var s2;
  var a3;
  var r2;
  var o2;
  var l2;
  var f2;
  !function(t5) {
    t5[t5.NONE = 0] = "NONE", t5[t5.BASISLZ = 1] = "BASISLZ", t5[t5.ZSTD = 2] = "ZSTD", t5[t5.ZLIB = 3] = "ZLIB";
  }(n2 || (n2 = {})), function(t5) {
    t5[t5.BASICFORMAT = 0] = "BASICFORMAT";
  }(i2 || (i2 = {})), function(t5) {
    t5[t5.UNSPECIFIED = 0] = "UNSPECIFIED", t5[t5.ETC1S = 163] = "ETC1S", t5[t5.UASTC = 166] = "UASTC";
  }(s2 || (s2 = {})), function(t5) {
    t5[t5.UNSPECIFIED = 0] = "UNSPECIFIED", t5[t5.SRGB = 1] = "SRGB";
  }(a3 || (a3 = {})), function(t5) {
    t5[t5.UNSPECIFIED = 0] = "UNSPECIFIED", t5[t5.LINEAR = 1] = "LINEAR", t5[t5.SRGB = 2] = "SRGB", t5[t5.ITU = 3] = "ITU", t5[t5.NTSC = 4] = "NTSC", t5[t5.SLOG = 5] = "SLOG", t5[t5.SLOG2 = 6] = "SLOG2";
  }(r2 || (r2 = {})), function(t5) {
    t5[t5.ALPHA_STRAIGHT = 0] = "ALPHA_STRAIGHT", t5[t5.ALPHA_PREMULTIPLIED = 1] = "ALPHA_PREMULTIPLIED";
  }(o2 || (o2 = {})), function(t5) {
    t5[t5.RGB = 0] = "RGB", t5[t5.RRR = 3] = "RRR", t5[t5.GGG = 4] = "GGG", t5[t5.AAA = 15] = "AAA";
  }(l2 || (l2 = {})), function(t5) {
    t5[t5.RGB = 0] = "RGB", t5[t5.RGBA = 3] = "RGBA", t5[t5.RRR = 4] = "RRR", t5[t5.RRRG = 5] = "RRRG";
  }(f2 || (f2 = {}));

  // ../../node_modules/@loaders.gl/textures/dist/lib/parsers/parse-ktx.js
  var KTX2_ID = [
    // '´', 'K', 'T', 'X', '2', '0', 'ª', '\r', '\n', '\x1A', '\n'
    171,
    75,
    84,
    88,
    32,
    50,
    48,
    187,
    13,
    10,
    26,
    10
  ];
  function isKTX(data) {
    const id = new Uint8Array(data);
    const notKTX = id.byteLength < KTX2_ID.length || id[0] !== KTX2_ID[0] || // '´'
    id[1] !== KTX2_ID[1] || // 'K'
    id[2] !== KTX2_ID[2] || // 'T'
    id[3] !== KTX2_ID[3] || // 'X'
    id[4] !== KTX2_ID[4] || // ' '
    id[5] !== KTX2_ID[5] || // '2'
    id[6] !== KTX2_ID[6] || // '0'
    id[7] !== KTX2_ID[7] || // 'ª'
    id[8] !== KTX2_ID[8] || // '\r'
    id[9] !== KTX2_ID[9] || // '\n'
    id[10] !== KTX2_ID[10] || // '\x1A'
    id[11] !== KTX2_ID[11];
    return !notKTX;
  }

  // ../../node_modules/@loaders.gl/textures/dist/lib/parsers/parse-basis.js
  var OutputFormat = {
    etc1: {
      basisFormat: 0,
      compressed: true,
      format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_ETC1_WEBGL
    },
    etc2: { basisFormat: 1, compressed: true },
    bc1: {
      basisFormat: 2,
      compressed: true,
      format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_S3TC_DXT1_EXT
    },
    bc3: {
      basisFormat: 3,
      compressed: true,
      format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_S3TC_DXT5_EXT
    },
    bc4: { basisFormat: 4, compressed: true },
    bc5: { basisFormat: 5, compressed: true },
    "bc7-m6-opaque-only": { basisFormat: 6, compressed: true },
    "bc7-m5": { basisFormat: 7, compressed: true },
    "pvrtc1-4-rgb": {
      basisFormat: 8,
      compressed: true,
      format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG
    },
    "pvrtc1-4-rgba": {
      basisFormat: 9,
      compressed: true,
      format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG
    },
    "astc-4x4": {
      basisFormat: 10,
      compressed: true,
      format: GL_EXTENSIONS_CONSTANTS.COMPRESSED_RGBA_ASTC_4X4_KHR
    },
    "atc-rgb": { basisFormat: 11, compressed: true },
    "atc-rgba-interpolated-alpha": { basisFormat: 12, compressed: true },
    rgba32: { basisFormat: 13, compressed: false },
    rgb565: { basisFormat: 14, compressed: false },
    bgr565: { basisFormat: 15, compressed: false },
    rgba4444: { basisFormat: 16, compressed: false }
  };
  async function parseBasis(data, options) {
    if (options.basis.containerFormat === "auto") {
      if (isKTX(data)) {
        const fileConstructors = await loadBasisEncoderModule(options);
        return parseKTX2File(fileConstructors.KTX2File, data, options);
      }
      const { BasisFile } = await loadBasisTranscoderModule(options);
      return parseBasisFile(BasisFile, data, options);
    }
    switch (options.basis.module) {
      case "encoder":
        const fileConstructors = await loadBasisEncoderModule(options);
        switch (options.basis.containerFormat) {
          case "ktx2":
            return parseKTX2File(fileConstructors.KTX2File, data, options);
          case "basis":
          default:
            return parseBasisFile(fileConstructors.BasisFile, data, options);
        }
      case "transcoder":
      default:
        const { BasisFile } = await loadBasisTranscoderModule(options);
        return parseBasisFile(BasisFile, data, options);
    }
  }
  function parseBasisFile(BasisFile, data, options) {
    const basisFile = new BasisFile(new Uint8Array(data));
    try {
      if (!basisFile.startTranscoding()) {
        throw new Error("Failed to start basis transcoding");
      }
      const imageCount = basisFile.getNumImages();
      const images = [];
      for (let imageIndex = 0; imageIndex < imageCount; imageIndex++) {
        const levelsCount = basisFile.getNumLevels(imageIndex);
        const levels = [];
        for (let levelIndex = 0; levelIndex < levelsCount; levelIndex++) {
          levels.push(transcodeImage(basisFile, imageIndex, levelIndex, options));
        }
        images.push(levels);
      }
      return images;
    } finally {
      basisFile.close();
      basisFile.delete();
    }
  }
  function transcodeImage(basisFile, imageIndex, levelIndex, options) {
    const width = basisFile.getImageWidth(imageIndex, levelIndex);
    const height = basisFile.getImageHeight(imageIndex, levelIndex);
    const hasAlpha = basisFile.getHasAlpha(
      /* imageIndex, levelIndex */
    );
    const { compressed, format, basisFormat } = getBasisOptions(options, hasAlpha);
    const decodedSize = basisFile.getImageTranscodedSizeInBytes(imageIndex, levelIndex, basisFormat);
    const decodedData = new Uint8Array(decodedSize);
    if (!basisFile.transcodeImage(decodedData, imageIndex, levelIndex, basisFormat, 0, 0)) {
      throw new Error("failed to start Basis transcoding");
    }
    return {
      // standard loaders.gl image category payload
      width,
      height,
      data: decodedData,
      compressed,
      format,
      // Additional fields
      // Add levelSize field.
      hasAlpha
    };
  }
  function parseKTX2File(KTX2File, data, options) {
    const ktx2File = new KTX2File(new Uint8Array(data));
    try {
      if (!ktx2File.startTranscoding()) {
        throw new Error("failed to start KTX2 transcoding");
      }
      const levelsCount = ktx2File.getLevels();
      const levels = [];
      for (let levelIndex = 0; levelIndex < levelsCount; levelIndex++) {
        levels.push(transcodeKTX2Image(ktx2File, levelIndex, options));
        break;
      }
      return [levels];
    } finally {
      ktx2File.close();
      ktx2File.delete();
    }
  }
  function transcodeKTX2Image(ktx2File, levelIndex, options) {
    const { alphaFlag, height, width } = ktx2File.getImageLevelInfo(levelIndex, 0, 0);
    const { compressed, format, basisFormat } = getBasisOptions(options, alphaFlag);
    const decodedSize = ktx2File.getImageTranscodedSizeInBytes(levelIndex, 0, 0, basisFormat);
    const decodedData = new Uint8Array(decodedSize);
    if (!ktx2File.transcodeImage(
      decodedData,
      levelIndex,
      0,
      0,
      basisFormat,
      0,
      -1,
      -1
      /* channel1 */
    )) {
      throw new Error("Failed to transcode KTX2 image");
    }
    return {
      // standard loaders.gl image category payload
      width,
      height,
      data: decodedData,
      compressed,
      // Additional fields
      levelSize: decodedSize,
      hasAlpha: alphaFlag,
      format
    };
  }
  function getBasisOptions(options, hasAlpha) {
    let format = options && options.basis && options.basis.format;
    if (format === "auto") {
      format = selectSupportedBasisFormat();
    }
    if (typeof format === "object") {
      format = hasAlpha ? format.alpha : format.noAlpha;
    }
    format = format.toLowerCase();
    return OutputFormat[format];
  }
  function selectSupportedBasisFormat() {
    const supportedFormats = getSupportedGPUTextureFormats();
    if (supportedFormats.has("astc")) {
      return "astc-4x4";
    } else if (supportedFormats.has("dxt")) {
      return {
        alpha: "bc3",
        noAlpha: "bc1"
      };
    } else if (supportedFormats.has("pvrtc")) {
      return {
        alpha: "pvrtc1-4-rgba",
        noAlpha: "pvrtc1-4-rgb"
      };
    } else if (supportedFormats.has("etc1")) {
      return "etc1";
    } else if (supportedFormats.has("etc2")) {
      return "etc2";
    }
    return "rgb565";
  }

  // ../../node_modules/@loaders.gl/textures/dist/basis-loader.js
  var BasisWorkerLoader = {
    dataType: null,
    batchType: null,
    name: "Basis",
    id: "basis",
    module: "textures",
    version: VERSION8,
    worker: true,
    extensions: ["basis", "ktx2"],
    mimeTypes: ["application/octet-stream", "image/ktx2"],
    tests: ["sB"],
    binary: true,
    options: {
      basis: {
        format: "auto",
        libraryPath: "libs/",
        containerFormat: "auto",
        module: "transcoder"
      }
    }
  };
  var BasisLoader = {
    ...BasisWorkerLoader,
    parse: parseBasis
  };

  // ../../node_modules/@luma.gl/gltf/dist/parsers/parse-pbr-material.js
  init_dist4();

  // ../../node_modules/@luma.gl/gltf/dist/webgl-to-webgpu/convert-webgl-sampler.js
  function convertSampler(gltfSampler) {
    return {
      addressModeU: convertSamplerWrapMode(gltfSampler.wrapS),
      addressModeV: convertSamplerWrapMode(gltfSampler.wrapT),
      magFilter: convertSamplerMagFilter(gltfSampler.magFilter),
      ...convertSamplerMinFilter(gltfSampler.minFilter)
    };
  }
  function convertSamplerWrapMode(mode) {
    switch (mode) {
      case 33071:
        return "clamp-to-edge";
      case 10497:
        return "repeat";
      case 33648:
        return "mirror-repeat";
      default:
        return void 0;
    }
  }
  function convertSamplerMagFilter(mode) {
    switch (mode) {
      case 9728:
        return "nearest";
      case 9729:
        return "linear";
      default:
        return void 0;
    }
  }
  function convertSamplerMinFilter(mode) {
    switch (mode) {
      case 9728:
        return { minFilter: "nearest" };
      case 9729:
        return { minFilter: "linear" };
      case 9984:
        return { minFilter: "nearest", mipmapFilter: "nearest" };
      case 9985:
        return { minFilter: "linear", mipmapFilter: "nearest" };
      case 9986:
        return { minFilter: "nearest", mipmapFilter: "linear" };
      case 9987:
        return { minFilter: "linear", mipmapFilter: "linear" };
      default:
        return {};
    }
  }

  // ../../node_modules/@luma.gl/gltf/dist/parsers/parse-pbr-material.js
  function parsePBRMaterial(device, material, attributes, options) {
    const parsedMaterial = {
      defines: {
        // TODO: Use EXT_sRGB if available (Standard in WebGL 2.0)
        MANUAL_SRGB: true,
        SRGB_FAST_APPROXIMATION: true
      },
      bindings: {},
      uniforms: {
        // TODO: find better values?
        camera: [0, 0, 0],
        // Model should override
        metallicRoughnessValues: [1, 1]
        // Default is 1 and 1
      },
      parameters: {},
      glParameters: {},
      generatedTextures: []
    };
    parsedMaterial.defines["USE_TEX_LOD"] = true;
    const { imageBasedLightingEnvironment } = options;
    if (imageBasedLightingEnvironment) {
      parsedMaterial.bindings.pbr_diffuseEnvSampler = imageBasedLightingEnvironment.diffuseEnvSampler.texture;
      parsedMaterial.bindings.pbr_specularEnvSampler = imageBasedLightingEnvironment.specularEnvSampler.texture;
      parsedMaterial.bindings.pbr_BrdfLUT = imageBasedLightingEnvironment.brdfLutTexture.texture;
      parsedMaterial.uniforms.scaleIBLAmbient = [1, 1];
    }
    if (options?.pbrDebug) {
      parsedMaterial.defines["PBR_DEBUG"] = true;
      parsedMaterial.uniforms.scaleDiffBaseMR = [0, 0, 0, 0];
      parsedMaterial.uniforms.scaleFGDSpec = [0, 0, 0, 0];
    }
    if (attributes["NORMAL"])
      parsedMaterial.defines["HAS_NORMALS"] = true;
    if (attributes["TANGENT"] && options?.useTangents)
      parsedMaterial.defines["HAS_TANGENTS"] = true;
    if (attributes["TEXCOORD_0"])
      parsedMaterial.defines["HAS_UV"] = true;
    if (options?.imageBasedLightingEnvironment)
      parsedMaterial.defines["USE_IBL"] = true;
    if (options?.lights)
      parsedMaterial.defines["USE_LIGHTS"] = true;
    if (material) {
      parseMaterial(device, material, parsedMaterial);
    }
    return parsedMaterial;
  }
  function parseMaterial(device, material, parsedMaterial) {
    parsedMaterial.uniforms.unlit = Boolean(material.unlit);
    if (material.pbrMetallicRoughness) {
      parsePbrMetallicRoughness(device, material.pbrMetallicRoughness, parsedMaterial);
    }
    if (material.normalTexture) {
      addTexture(device, material.normalTexture, "pbr_normalSampler", "HAS_NORMALMAP", parsedMaterial);
      const { scale: scale24 = 1 } = material.normalTexture;
      parsedMaterial.uniforms.normalScale = scale24;
    }
    if (material.occlusionTexture) {
      addTexture(device, material.occlusionTexture, "pbr_occlusionSampler", "HAS_OCCLUSIONMAP", parsedMaterial);
      const { strength = 1 } = material.occlusionTexture;
      parsedMaterial.uniforms.occlusionStrength = strength;
    }
    if (material.emissiveTexture) {
      addTexture(device, material.emissiveTexture, "pbr_emissiveSampler", "HAS_EMISSIVEMAP", parsedMaterial);
      parsedMaterial.uniforms.emissiveFactor = material.emissiveFactor || [0, 0, 0];
    }
    switch (material.alphaMode || "MASK") {
      case "MASK":
        const { alphaCutoff = 0.5 } = material;
        parsedMaterial.defines["ALPHA_CUTOFF"] = true;
        parsedMaterial.uniforms.alphaCutoff = alphaCutoff;
        break;
      case "BLEND":
        log2.warn("glTF BLEND alphaMode might not work well because it requires mesh sorting")();
        parsedMaterial.parameters.blend = true;
        parsedMaterial.parameters.blendColorOperation = "add";
        parsedMaterial.parameters.blendColorSrcFactor = "src-alpha";
        parsedMaterial.parameters.blendColorDstFactor = "one-minus-src-alpha";
        parsedMaterial.parameters.blendAlphaOperation = "add";
        parsedMaterial.parameters.blendAlphaSrcFactor = "one";
        parsedMaterial.parameters.blendAlphaDstFactor = "one-minus-src-alpha";
        parsedMaterial.glParameters["blend"] = true;
        parsedMaterial.glParameters["blendEquation"] = 32774;
        parsedMaterial.glParameters["blendFunc"] = [
          770,
          771,
          1,
          771
        ];
        break;
    }
  }
  function parsePbrMetallicRoughness(device, pbrMetallicRoughness, parsedMaterial) {
    if (pbrMetallicRoughness.baseColorTexture) {
      addTexture(device, pbrMetallicRoughness.baseColorTexture, "pbr_baseColorSampler", "HAS_BASECOLORMAP", parsedMaterial);
    }
    parsedMaterial.uniforms.baseColorFactor = pbrMetallicRoughness.baseColorFactor || [1, 1, 1, 1];
    if (pbrMetallicRoughness.metallicRoughnessTexture) {
      addTexture(device, pbrMetallicRoughness.metallicRoughnessTexture, "pbr_metallicRoughnessSampler", "HAS_METALROUGHNESSMAP", parsedMaterial);
    }
    const { metallicFactor = 1, roughnessFactor = 1 } = pbrMetallicRoughness;
    parsedMaterial.uniforms.metallicRoughnessValues = [metallicFactor, roughnessFactor];
  }
  function addTexture(device, gltfTexture, uniformName, define2, parsedMaterial) {
    const image = gltfTexture.texture.source.image;
    let textureOptions;
    if (image.compressed) {
      textureOptions = image;
    } else {
      textureOptions = { data: image };
    }
    const gltfSampler = {
      wrapS: 10497,
      // default REPEAT S (U) wrapping mode.
      wrapT: 10497,
      // default REPEAT T (V) wrapping mode.
      ...gltfTexture?.texture?.sampler
    };
    const texture = device.createTexture({
      id: gltfTexture.uniformName || gltfTexture.id,
      sampler: convertSampler(gltfSampler),
      ...textureOptions
    });
    parsedMaterial.bindings[uniformName] = texture;
    if (define2)
      parsedMaterial.defines[define2] = true;
    parsedMaterial.generatedTextures.push(texture);
  }

  // ../../node_modules/@luma.gl/gltf/dist/webgl-to-webgpu/convert-webgl-topology.js
  var GLEnum2;
  (function(GLEnum3) {
    GLEnum3[GLEnum3["POINTS"] = 0] = "POINTS";
    GLEnum3[GLEnum3["LINES"] = 1] = "LINES";
    GLEnum3[GLEnum3["LINE_LOOP"] = 2] = "LINE_LOOP";
    GLEnum3[GLEnum3["LINE_STRIP"] = 3] = "LINE_STRIP";
    GLEnum3[GLEnum3["TRIANGLES"] = 4] = "TRIANGLES";
    GLEnum3[GLEnum3["TRIANGLE_STRIP"] = 5] = "TRIANGLE_STRIP";
    GLEnum3[GLEnum3["TRIANGLE_FAN"] = 6] = "TRIANGLE_FAN";
  })(GLEnum2 || (GLEnum2 = {}));
  function convertGLDrawModeToTopology(drawMode) {
    switch (drawMode) {
      case GLEnum2.POINTS:
        return "point-list";
      case GLEnum2.LINES:
        return "line-list";
      case GLEnum2.LINE_STRIP:
        return "line-strip";
      case GLEnum2.TRIANGLES:
        return "triangle-list";
      case GLEnum2.TRIANGLE_STRIP:
        return "triangle-strip";
      default:
        throw new Error(String(drawMode));
    }
  }

  // ../../node_modules/@luma.gl/gltf/dist/gltf/create-gltf-model.js
  init_dist4();
  var SHADER = (
    /* WGSL */
    `
layout(0) positions: vec4; // in vec4 POSITION;

  #ifdef HAS_NORMALS
    in vec4 normals; // in vec4 NORMAL;
  #endif

  #ifdef HAS_TANGENTS
    in vec4 TANGENT;
  #endif

  #ifdef HAS_UV
    // in vec2 TEXCOORD_0;
    in vec2 texCoords;
  #endif

@vertex
  void main(void) {
    vec4 _NORMAL = vec4(0.);
    vec4 _TANGENT = vec4(0.);
    vec2 _TEXCOORD_0 = vec2(0.);

    #ifdef HAS_NORMALS
      _NORMAL = normals;
    #endif

    #ifdef HAS_TANGENTS
      _TANGENT = TANGENT;
    #endif

    #ifdef HAS_UV
      _TEXCOORD_0 = texCoords;
    #endif

    pbr_setPositionNormalTangentUV(positions, _NORMAL, _TANGENT, _TEXCOORD_0);
    gl_Position = u_MVPMatrix * positions;
  }

@fragment
  out vec4 fragmentColor;

  void main(void) {
    vec3 pos = pbr_vPosition;
    fragmentColor = pbr_filterColor(vec4(1.0));
  }
`
  );
  var vs8 = (
    /* glsl */
    `#version 300 es

  // in vec4 POSITION;
  in vec4 positions;

  #ifdef HAS_NORMALS
    // in vec4 NORMAL;
    in vec4 normals;
  #endif

  #ifdef HAS_TANGENTS
    in vec4 TANGENT;
  #endif

  #ifdef HAS_UV
    // in vec2 TEXCOORD_0;
    in vec2 texCoords;
  #endif

  void main(void) {
    vec4 _NORMAL = vec4(0.);
    vec4 _TANGENT = vec4(0.);
    vec2 _TEXCOORD_0 = vec2(0.);

    #ifdef HAS_NORMALS
      _NORMAL = normals;
    #endif

    #ifdef HAS_TANGENTS
      _TANGENT = TANGENT;
    #endif

    #ifdef HAS_UV
      _TEXCOORD_0 = texCoords;
    #endif

    pbr_setPositionNormalTangentUV(positions, _NORMAL, _TANGENT, _TEXCOORD_0);
    gl_Position = pbrProjection.modelViewProjectionMatrix * positions;
  }
`
  );
  var fs6 = (
    /* glsl */
    `#version 300 es
  out vec4 fragmentColor;

  void main(void) {
    vec3 pos = pbr_vPosition;
    fragmentColor = pbr_filterColor(vec4(1.0));
  }
`
  );
  function createGLTFModel(device, options) {
    const { id, geometry, parsedPPBRMaterial, vertexCount, modelOptions = {} } = options;
    log2.info(4, "createGLTFModel defines: ", parsedPPBRMaterial.defines)();
    const managedResources = [];
    const parameters2 = {
      depthWriteEnabled: true,
      depthCompare: "less",
      depthFormat: "depth24plus",
      cullMode: "back"
    };
    const modelProps = {
      id,
      source: SHADER,
      vs: vs8,
      fs: fs6,
      geometry,
      topology: geometry.topology,
      vertexCount,
      modules: [pbrMaterial],
      ...modelOptions,
      defines: { ...parsedPPBRMaterial.defines, ...modelOptions.defines },
      parameters: { ...parameters2, ...parsedPPBRMaterial.parameters, ...modelOptions.parameters }
    };
    const model = new Model(device, modelProps);
    const { camera, ...pbrMaterialProps } = {
      ...parsedPPBRMaterial.uniforms,
      ...modelOptions.uniforms,
      ...parsedPPBRMaterial.bindings,
      ...modelOptions.bindings
    };
    model.shaderInputs.setProps({ pbrMaterial: pbrMaterialProps, pbrProjection: { camera } });
    return new ModelNode({ managedResources, model });
  }

  // ../../node_modules/@luma.gl/gltf/dist/parsers/parse-gltf.js
  var defaultOptions2 = {
    modelOptions: {},
    pbrDebug: false,
    imageBasedLightingEnvironment: void 0,
    lights: true,
    useTangents: false
  };
  function parseGLTF(device, gltf, options_ = {}) {
    const options = { ...defaultOptions2, ...options_ };
    const sceneNodes = gltf.scenes.map((gltfScene) => createScene(device, gltfScene, gltf.nodes, options));
    return sceneNodes;
  }
  function createScene(device, gltfScene, gltfNodes, options) {
    const gltfSceneNodes = gltfScene.nodes || [];
    const nodes = gltfSceneNodes.map((node) => createNode(device, node, gltfNodes, options));
    const sceneNode = new GroupNode({
      id: gltfScene.name || gltfScene.id,
      children: nodes
    });
    return sceneNode;
  }
  function createNode(device, gltfNode, gltfNodes, options) {
    if (!gltfNode._node) {
      const gltfChildren = gltfNode.children || [];
      const children = gltfChildren.map((child) => createNode(device, child, gltfNodes, options));
      if (gltfNode.mesh) {
        children.push(createMesh2(device, gltfNode.mesh, options));
      }
      const node = new GroupNode({
        id: gltfNode.name || gltfNode.id,
        children
      });
      if (gltfNode.matrix) {
        node.setMatrix(gltfNode.matrix);
      } else {
        node.matrix.identity();
        if (gltfNode.translation) {
          node.matrix.translate(gltfNode.translation);
        }
        if (gltfNode.rotation) {
          const rotationMatrix = new Matrix4().fromQuaternion(gltfNode.rotation);
          node.matrix.multiplyRight(rotationMatrix);
        }
        if (gltfNode.scale) {
          node.matrix.scale(gltfNode.scale);
        }
      }
      gltfNode._node = node;
    }
    const topLevelNode = gltfNodes.find((node) => node.id === gltfNode.id);
    topLevelNode._node = gltfNode._node;
    return gltfNode._node;
  }
  function createMesh2(device, gltfMesh, options) {
    if (!gltfMesh._mesh) {
      const gltfPrimitives = gltfMesh.primitives || [];
      const primitives = gltfPrimitives.map((gltfPrimitive, i7) => createPrimitive(device, gltfPrimitive, i7, gltfMesh, options));
      const mesh = new GroupNode({
        id: gltfMesh.name || gltfMesh.id,
        children: primitives
      });
      gltfMesh._mesh = mesh;
    }
    return gltfMesh._mesh;
  }
  function createPrimitive(device, gltfPrimitive, i7, gltfMesh, options) {
    const id = gltfPrimitive.name || `${gltfMesh.name || gltfMesh.id}-primitive-${i7}`;
    const topology = convertGLDrawModeToTopology(gltfPrimitive.mode || 4);
    const vertexCount = gltfPrimitive.indices ? gltfPrimitive.indices.count : getVertexCount(gltfPrimitive.attributes);
    const geometry = createGeometry(id, gltfPrimitive, topology);
    const parsedPPBRMaterial = parsePBRMaterial(device, gltfPrimitive.material, geometry.attributes, options);
    const modelNode = createGLTFModel(device, {
      id,
      geometry: createGeometry(id, gltfPrimitive, topology),
      parsedPPBRMaterial,
      modelOptions: options.modelOptions,
      vertexCount
    });
    modelNode.bounds = [gltfPrimitive.attributes.POSITION.min, gltfPrimitive.attributes.POSITION.max];
    return modelNode;
  }
  function getVertexCount(attributes) {
    throw new Error("getVertexCount not implemented");
  }
  function createGeometry(id, gltfPrimitive, topology) {
    const attributes = {};
    for (const [attributeName, attribute] of Object.entries(gltfPrimitive.attributes)) {
      const { components, size, value } = attribute;
      attributes[attributeName] = { size: size ?? components, value };
    }
    return new Geometry({
      id,
      topology,
      indices: gltfPrimitive.indices.value,
      attributes
    });
  }

  // ../../node_modules/@luma.gl/gltf/dist/gltf/gltf-animator.js
  init_dist4();

  // ../../node_modules/@luma.gl/gltf/dist/gltf/animations/interpolate.js
  init_dist4();
  var scratchQuaternion = new Quaternion();
  function interpolate(time, { input, interpolation, output }, target2, path) {
    const maxTime = input[input.length - 1];
    const animationTime = time % maxTime;
    const nextIndex = input.findIndex((t5) => t5 >= animationTime);
    const previousIndex = Math.max(0, nextIndex - 1);
    if (!Array.isArray(target2[path])) {
      switch (path) {
        case "translation":
          target2[path] = [0, 0, 0];
          break;
        case "rotation":
          target2[path] = [0, 0, 0, 1];
          break;
        case "scale":
          target2[path] = [1, 1, 1];
          break;
        default:
          log2.warn(`Bad animation path ${path}`)();
      }
    }
    const previousTime = input[previousIndex];
    const nextTime = input[nextIndex];
    switch (interpolation) {
      case "STEP":
        stepInterpolate(target2, path, output[previousIndex]);
        break;
      case "LINEAR":
        if (nextTime > previousTime) {
          const ratio = (animationTime - previousTime) / (nextTime - previousTime);
          linearInterpolate(target2, path, output[previousIndex], output[nextIndex], ratio);
        }
        break;
      case "CUBICSPLINE":
        if (nextTime > previousTime) {
          const ratio = (animationTime - previousTime) / (nextTime - previousTime);
          const tDiff = nextTime - previousTime;
          const p0 = output[3 * previousIndex + 1];
          const outTangent0 = output[3 * previousIndex + 2];
          const inTangent1 = output[3 * nextIndex + 0];
          const p1 = output[3 * nextIndex + 1];
          cubicsplineInterpolate(target2, path, { p0, outTangent0, inTangent1, p1, tDiff, ratio });
        }
        break;
      default:
        log2.warn(`Interpolation ${interpolation} not supported`)();
        break;
    }
  }
  function linearInterpolate(target2, path, start, stop, ratio) {
    if (!target2[path]) {
      throw new Error();
    }
    if (path === "rotation") {
      scratchQuaternion.slerp({ start, target: stop, ratio });
      for (let i7 = 0; i7 < scratchQuaternion.length; i7++) {
        target2[path][i7] = scratchQuaternion[i7];
      }
    } else {
      for (let i7 = 0; i7 < start.length; i7++) {
        target2[path][i7] = ratio * stop[i7] + (1 - ratio) * start[i7];
      }
    }
  }
  function cubicsplineInterpolate(target2, path, { p0, outTangent0, inTangent1, p1, tDiff, ratio: t5 }) {
    if (!target2[path]) {
      throw new Error();
    }
    for (let i7 = 0; i7 < target2[path].length; i7++) {
      const m0 = outTangent0[i7] * tDiff;
      const m1 = inTangent1[i7] * tDiff;
      target2[path][i7] = (2 * Math.pow(t5, 3) - 3 * Math.pow(t5, 2) + 1) * p0[i7] + (Math.pow(t5, 3) - 2 * Math.pow(t5, 2) + t5) * m0 + (-2 * Math.pow(t5, 3) + 3 * Math.pow(t5, 2)) * p1[i7] + (Math.pow(t5, 3) - Math.pow(t5, 2)) * m1;
    }
  }
  function stepInterpolate(target2, path, value) {
    if (!target2[path]) {
      throw new Error();
    }
    for (let i7 = 0; i7 < value.length; i7++) {
      target2[path][i7] = value[i7];
    }
  }

  // ../../node_modules/@luma.gl/gltf/dist/gltf/gltf-animator.js
  var GLTFSingleAnimator = class {
    animation;
    startTime = 0;
    playing = true;
    speed = 1;
    constructor(props) {
      this.animation = props.animation;
      this.animation.name ||= "unnamed";
      Object.assign(this, props);
    }
    setTime(timeMs) {
      if (!this.playing) {
        return;
      }
      const absTime = timeMs / 1e3;
      const time = (absTime - this.startTime) * this.speed;
      this.animation.channels.forEach(({ sampler, target: target2, path }) => {
        interpolate(time, sampler, target2, path);
        applyTranslationRotationScale(target2, target2._node);
      });
    }
  };
  var GLTFAnimator = class {
    animations;
    constructor(props) {
      this.animations = props.animations.map((animation, index) => {
        const name13 = animation.name || `Animation-${index}`;
        return new GLTFSingleAnimator({
          animation: { name: name13, channels: animation.channels }
        });
      });
    }
    /** @deprecated Use .setTime(). Will be removed (deck.gl is using this) */
    animate(time) {
      log2.warn("GLTFAnimator#animate is deprecated. Use GLTFAnimator#setTime instead")();
      this.setTime(time);
    }
    setTime(time) {
      this.animations.forEach((animation) => animation.setTime(time));
    }
    getAnimations() {
      return this.animations;
    }
  };
  var scratchMatrix2 = new Matrix4();
  function applyTranslationRotationScale(gltfNode, node) {
    node.matrix.identity();
    if (gltfNode.translation) {
      node.matrix.translate(gltfNode.translation);
    }
    if (gltfNode.rotation) {
      const rotationMatrix = scratchMatrix2.fromQuaternion(gltfNode.rotation);
      node.matrix.multiplyRight(rotationMatrix);
    }
    if (gltfNode.scale) {
      node.matrix.scale(gltfNode.scale);
    }
  }

  // ../../node_modules/@luma.gl/gltf/dist/webgl-to-webgpu/convert-webgl-attribute.js
  var ATTRIBUTE_TYPE_TO_COMPONENTS = {
    SCALAR: 1,
    VEC2: 2,
    VEC3: 3,
    VEC4: 4,
    MAT2: 4,
    MAT3: 9,
    MAT4: 16
  };
  var ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY = {
    5120: Int8Array,
    5121: Uint8Array,
    5122: Int16Array,
    5123: Uint16Array,
    5125: Uint32Array,
    5126: Float32Array
  };
  function accessorToTypedArray(accessor) {
    const ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[accessor.componentType];
    const components = ATTRIBUTE_TYPE_TO_COMPONENTS[accessor.type];
    const length17 = components * accessor.count;
    const { buffer, byteOffset = 0 } = accessor.bufferView?.data ?? {};
    const typedArray = new ArrayType(buffer, byteOffset + (accessor.byteOffset || 0), length17);
    return { typedArray, components };
  }

  // ../../node_modules/@luma.gl/gltf/dist/parsers/parse-gltf-animations.js
  function parseGLTFAnimations(gltf) {
    const gltfAnimations = gltf.animations || [];
    return gltfAnimations.map((animation, index) => {
      const name13 = animation.name || `Animation-${index}`;
      const samplers = animation.samplers.map(({ input, interpolation = "LINEAR", output }) => ({
        input: accessorToJsArray(gltf.accessors[input]),
        interpolation,
        output: accessorToJsArray(gltf.accessors[output])
      }));
      const channels = animation.channels.map(({ sampler, target: target2 }) => ({
        sampler: samplers[sampler],
        target: gltf.nodes[target2.node ?? 0],
        path: target2.path
      }));
      return { name: name13, channels };
    });
  }
  function accessorToJsArray(accessor) {
    if (!accessor._animation) {
      const { typedArray: array, components } = accessorToTypedArray(accessor);
      if (components === 1) {
        accessor._animation = Array.from(array);
      } else {
        const slicedArray = [];
        for (let i7 = 0; i7 < array.length; i7 += components) {
          slicedArray.push(Array.from(array.slice(i7, i7 + components)));
        }
        accessor._animation = slicedArray;
      }
    }
    return accessor._animation;
  }

  // ../../node_modules/@luma.gl/gltf/dist/utils/deep-copy.js
  function deepCopy(object) {
    if (ArrayBuffer.isView(object) || object instanceof ArrayBuffer || object instanceof ImageBitmap) {
      return object;
    }
    if (Array.isArray(object)) {
      return object.map(deepCopy);
    }
    if (object && typeof object === "object") {
      const result = {};
      for (const key in object) {
        result[key] = deepCopy(object[key]);
      }
      return result;
    }
    return object;
  }

  // ../../node_modules/@luma.gl/gltf/dist/gltf/create-scenegraph-from-gltf.js
  function createScenegraphsFromGLTF(device, gltf, options) {
    gltf = deepCopy(gltf);
    const scenes = parseGLTF(device, gltf, options);
    const animations = parseGLTFAnimations(gltf);
    const animator = new GLTFAnimator({ animations });
    return { scenes, animator };
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/extensions/EXT_mesh_features.js
  var EXT_mesh_features_exports = {};
  __export(EXT_mesh_features_exports, {
    decode: () => decode,
    name: () => name2
  });

  // ../../node_modules/@loaders.gl/gltf/dist/lib/utils/assert.js
  function assert9(condition, message2) {
    if (!condition) {
      throw new Error(message2 || "assert failed: gltf");
    }
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/gltf-utils/gltf-constants.js
  var COMPONENTS = {
    SCALAR: 1,
    VEC2: 2,
    VEC3: 3,
    VEC4: 4,
    MAT2: 4,
    MAT3: 9,
    MAT4: 16
  };
  var BYTES = {
    5120: 1,
    // BYTE
    5121: 1,
    // UNSIGNED_BYTE
    5122: 2,
    // SHORT
    5123: 2,
    // UNSIGNED_SHORT
    5125: 4,
    // UNSIGNED_INT
    5126: 4
    // FLOAT
  };

  // ../../node_modules/@loaders.gl/gltf/dist/lib/gltf-utils/gltf-utils.js
  var MIPMAP_FACTOR = 1.33;
  var TYPES = ["SCALAR", "VEC2", "VEC3", "VEC4"];
  var ARRAY_CONSTRUCTOR_TO_WEBGL_CONSTANT = [
    [Int8Array, 5120],
    [Uint8Array, 5121],
    [Int16Array, 5122],
    [Uint16Array, 5123],
    [Uint32Array, 5125],
    [Float32Array, 5126],
    [Float64Array, 5130]
  ];
  var ARRAY_TO_COMPONENT_TYPE = new Map(ARRAY_CONSTRUCTOR_TO_WEBGL_CONSTANT);
  var ATTRIBUTE_TYPE_TO_COMPONENTS2 = {
    SCALAR: 1,
    VEC2: 2,
    VEC3: 3,
    VEC4: 4,
    MAT2: 4,
    MAT3: 9,
    MAT4: 16
  };
  var ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE = {
    5120: 1,
    5121: 1,
    5122: 2,
    5123: 2,
    5125: 4,
    5126: 4
  };
  var ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY2 = {
    5120: Int8Array,
    5121: Uint8Array,
    5122: Int16Array,
    5123: Uint16Array,
    5125: Uint32Array,
    5126: Float32Array
  };
  function getAccessorTypeFromSize(size) {
    const type = TYPES[size - 1];
    return type || TYPES[0];
  }
  function getComponentTypeFromArray(typedArray) {
    const componentType = ARRAY_TO_COMPONENT_TYPE.get(typedArray.constructor);
    if (!componentType) {
      throw new Error("Illegal typed array");
    }
    return componentType;
  }
  function getAccessorArrayTypeAndLength(accessor, bufferView) {
    const ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY2[accessor.componentType];
    const components = ATTRIBUTE_TYPE_TO_COMPONENTS2[accessor.type];
    const bytesPerComponent = ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE[accessor.componentType];
    const length17 = accessor.count * components;
    const byteLength = accessor.count * components * bytesPerComponent;
    assert9(byteLength >= 0 && byteLength <= bufferView.byteLength);
    const componentByteSize = BYTES[accessor.componentType];
    const numberOfComponentsInElement = COMPONENTS[accessor.type];
    return { ArrayType, length: length17, byteLength, componentByteSize, numberOfComponentsInElement };
  }
  function getMemoryUsageGLTF(gltf) {
    let { images, bufferViews } = gltf;
    images = images || [];
    bufferViews = bufferViews || [];
    const imageBufferViews = images.map((i7) => i7.bufferView);
    bufferViews = bufferViews.filter((view) => !imageBufferViews.includes(view));
    const bufferMemory = bufferViews.reduce((acc, view) => acc + view.byteLength, 0);
    const pixelCount = images.reduce((acc, image) => {
      const { width, height } = image.image;
      return acc + width * height;
    }, 0);
    return bufferMemory + Math.ceil(4 * pixelCount * MIPMAP_FACTOR);
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/gltf-utils/get-typed-array.js
  function getTypedArrayForBufferView(json, buffers, bufferViewIndex) {
    const bufferView = json.bufferViews[bufferViewIndex];
    assert9(bufferView);
    const bufferIndex = bufferView.buffer;
    const binChunk = buffers[bufferIndex];
    assert9(binChunk);
    const byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;
    return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);
  }
  function getTypedArrayForAccessor(json, buffers, accessor) {
    const gltfAccessor = typeof accessor === "number" ? json.accessors?.[accessor] : accessor;
    if (!gltfAccessor) {
      throw new Error(`No gltf accessor ${JSON.stringify(accessor)}`);
    }
    const bufferView = json.bufferViews?.[gltfAccessor.bufferView || 0];
    if (!bufferView) {
      throw new Error(`No gltf buffer view for accessor ${bufferView}`);
    }
    const { arrayBuffer: arrayBuffer2, byteOffset: bufferByteOffset } = buffers[bufferView.buffer];
    const byteOffset = (bufferByteOffset || 0) + (gltfAccessor.byteOffset || 0) + (bufferView.byteOffset || 0);
    const { ArrayType, length: length17, componentByteSize, numberOfComponentsInElement } = getAccessorArrayTypeAndLength(gltfAccessor, bufferView);
    const elementByteSize = componentByteSize * numberOfComponentsInElement;
    const elementAddressScale = bufferView.byteStride || elementByteSize;
    if (typeof bufferView.byteStride === "undefined" || bufferView.byteStride === elementByteSize) {
      const result2 = new ArrayType(arrayBuffer2, byteOffset, length17);
      return result2;
    }
    const result = new ArrayType(length17);
    for (let i7 = 0; i7 < gltfAccessor.count; i7++) {
      const values = new ArrayType(arrayBuffer2, byteOffset + i7 * elementAddressScale, numberOfComponentsInElement);
      result.set(values, i7 * numberOfComponentsInElement);
    }
    return result;
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/api/gltf-scenegraph.js
  function makeDefaultGLTFJson() {
    return {
      asset: {
        version: "2.0",
        generator: "loaders.gl"
      },
      buffers: [],
      extensions: {},
      extensionsRequired: [],
      extensionsUsed: []
    };
  }
  var GLTFScenegraph = class {
    // internal
    gltf;
    sourceBuffers;
    byteLength;
    // TODO - why is this not GLTFWithBuffers - what happens to images?
    constructor(gltf) {
      this.gltf = {
        json: gltf?.json || makeDefaultGLTFJson(),
        buffers: gltf?.buffers || [],
        images: gltf?.images || []
      };
      this.sourceBuffers = [];
      this.byteLength = 0;
      if (this.gltf.buffers && this.gltf.buffers[0]) {
        this.byteLength = this.gltf.buffers[0].byteLength;
        this.sourceBuffers = [this.gltf.buffers[0]];
      }
    }
    // Accessors
    get json() {
      return this.gltf.json;
    }
    getApplicationData(key) {
      const data = this.json[key];
      return data;
    }
    getExtraData(key) {
      const extras = this.json.extras || {};
      return extras[key];
    }
    hasExtension(extensionName) {
      const isUsedExtension = this.getUsedExtensions().find((name13) => name13 === extensionName);
      const isRequiredExtension = this.getRequiredExtensions().find((name13) => name13 === extensionName);
      return typeof isUsedExtension === "string" || typeof isRequiredExtension === "string";
    }
    getExtension(extensionName) {
      const isExtension = this.getUsedExtensions().find((name13) => name13 === extensionName);
      const extensions = this.json.extensions || {};
      return isExtension ? extensions[extensionName] : null;
    }
    getRequiredExtension(extensionName) {
      const isRequired = this.getRequiredExtensions().find((name13) => name13 === extensionName);
      return isRequired ? this.getExtension(extensionName) : null;
    }
    getRequiredExtensions() {
      return this.json.extensionsRequired || [];
    }
    getUsedExtensions() {
      return this.json.extensionsUsed || [];
    }
    getRemovedExtensions() {
      return this.json.extensionsRemoved || [];
    }
    getObjectExtension(object, extensionName) {
      const extensions = object.extensions || {};
      return extensions[extensionName];
    }
    getScene(index) {
      return this.getObject("scenes", index);
    }
    getNode(index) {
      return this.getObject("nodes", index);
    }
    getSkin(index) {
      return this.getObject("skins", index);
    }
    getMesh(index) {
      return this.getObject("meshes", index);
    }
    getMaterial(index) {
      return this.getObject("materials", index);
    }
    getAccessor(index) {
      return this.getObject("accessors", index);
    }
    // getCamera(index: number): object | null {
    //   return null; // TODO: fix thi: object  as null;
    // }
    getTexture(index) {
      return this.getObject("textures", index);
    }
    getSampler(index) {
      return this.getObject("samplers", index);
    }
    getImage(index) {
      return this.getObject("images", index);
    }
    getBufferView(index) {
      return this.getObject("bufferViews", index);
    }
    getBuffer(index) {
      return this.getObject("buffers", index);
    }
    getObject(array, index) {
      if (typeof index === "object") {
        return index;
      }
      const object = this.json[array] && this.json[array][index];
      if (!object) {
        throw new Error(`glTF file error: Could not find ${array}[${index}]`);
      }
      return object;
    }
    /**
     * Accepts buffer view index or buffer view object
     * @returns a `Uint8Array`
     */
    getTypedArrayForBufferView(bufferView) {
      bufferView = this.getBufferView(bufferView);
      const bufferIndex = bufferView.buffer;
      const binChunk = this.gltf.buffers[bufferIndex];
      assert9(binChunk);
      const byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;
      return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);
    }
    /** Accepts accessor index or accessor object
     * @returns a typed array with type that matches the types
     */
    getTypedArrayForAccessor(accessor) {
      const gltfAccessor = this.getAccessor(accessor);
      return getTypedArrayForAccessor(this.gltf.json, this.gltf.buffers, gltfAccessor);
    }
    /** accepts accessor index or accessor object
     * returns a `Uint8Array`
     */
    getTypedArrayForImageData(image) {
      image = this.getAccessor(image);
      const bufferView = this.getBufferView(image.bufferView);
      const buffer = this.getBuffer(bufferView.buffer);
      const arrayBuffer2 = buffer.data;
      const byteOffset = bufferView.byteOffset || 0;
      return new Uint8Array(arrayBuffer2, byteOffset, bufferView.byteLength);
    }
    // MODIFERS
    /**
     * Add an extra application-defined key to the top-level data structure
     */
    addApplicationData(key, data) {
      this.json[key] = data;
      return this;
    }
    /**
     * `extras` - Standard GLTF field for storing application specific data
     */
    addExtraData(key, data) {
      this.json.extras = this.json.extras || {};
      this.json.extras[key] = data;
      return this;
    }
    addObjectExtension(object, extensionName, data) {
      object.extensions = object.extensions || {};
      object.extensions[extensionName] = data;
      this.registerUsedExtension(extensionName);
      return this;
    }
    setObjectExtension(object, extensionName, data) {
      const extensions = object.extensions || {};
      extensions[extensionName] = data;
    }
    removeObjectExtension(object, extensionName) {
      const extensions = object?.extensions || {};
      if (extensions[extensionName]) {
        this.json.extensionsRemoved = this.json.extensionsRemoved || [];
        const extensionsRemoved = this.json.extensionsRemoved;
        if (!extensionsRemoved.includes(extensionName)) {
          extensionsRemoved.push(extensionName);
        }
      }
      delete extensions[extensionName];
    }
    /**
     * Add to standard GLTF top level extension object, mark as used
     */
    addExtension(extensionName, extensionData = {}) {
      assert9(extensionData);
      this.json.extensions = this.json.extensions || {};
      this.json.extensions[extensionName] = extensionData;
      this.registerUsedExtension(extensionName);
      return extensionData;
    }
    /**
     * Standard GLTF top level extension object, mark as used and required
     */
    addRequiredExtension(extensionName, extensionData = {}) {
      assert9(extensionData);
      this.addExtension(extensionName, extensionData);
      this.registerRequiredExtension(extensionName);
      return extensionData;
    }
    /**
     * Add extensionName to list of used extensions
     */
    registerUsedExtension(extensionName) {
      this.json.extensionsUsed = this.json.extensionsUsed || [];
      if (!this.json.extensionsUsed.find((ext) => ext === extensionName)) {
        this.json.extensionsUsed.push(extensionName);
      }
    }
    /**
     * Add extensionName to list of required extensions
     */
    registerRequiredExtension(extensionName) {
      this.registerUsedExtension(extensionName);
      this.json.extensionsRequired = this.json.extensionsRequired || [];
      if (!this.json.extensionsRequired.find((ext) => ext === extensionName)) {
        this.json.extensionsRequired.push(extensionName);
      }
    }
    /**
     * Removes an extension from the top-level list
     */
    removeExtension(extensionName) {
      if (this.json.extensions?.[extensionName]) {
        this.json.extensionsRemoved = this.json.extensionsRemoved || [];
        const extensionsRemoved = this.json.extensionsRemoved;
        if (!extensionsRemoved.includes(extensionName)) {
          extensionsRemoved.push(extensionName);
        }
      }
      if (this.json.extensions) {
        delete this.json.extensions[extensionName];
      }
      if (this.json.extensionsRequired) {
        this._removeStringFromArray(this.json.extensionsRequired, extensionName);
      }
      if (this.json.extensionsUsed) {
        this._removeStringFromArray(this.json.extensionsUsed, extensionName);
      }
    }
    /**
     *  Set default scene which is to be displayed at load time
     */
    setDefaultScene(sceneIndex) {
      this.json.scene = sceneIndex;
    }
    /**
     * @todo: add more properties for scene initialization:
     *   name`, `extensions`, `extras`
     *   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-scene
     */
    addScene(scene) {
      const { nodeIndices } = scene;
      this.json.scenes = this.json.scenes || [];
      this.json.scenes.push({ nodes: nodeIndices });
      return this.json.scenes.length - 1;
    }
    /**
     * @todo: add more properties for node initialization:
     *   `name`, `extensions`, `extras`, `camera`, `children`, `skin`, `rotation`, `scale`, `translation`, `weights`
     *   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#node
     */
    addNode(node) {
      const { meshIndex, matrix } = node;
      this.json.nodes = this.json.nodes || [];
      const nodeData = { mesh: meshIndex };
      if (matrix) {
        nodeData.matrix = matrix;
      }
      this.json.nodes.push(nodeData);
      return this.json.nodes.length - 1;
    }
    /** Adds a mesh to the json part */
    addMesh(mesh) {
      const { attributes, indices, material, mode = 4 } = mesh;
      const accessors = this._addAttributes(attributes);
      const glTFMesh = {
        primitives: [
          {
            attributes: accessors,
            mode
          }
        ]
      };
      if (indices) {
        const indicesAccessor = this._addIndices(indices);
        glTFMesh.primitives[0].indices = indicesAccessor;
      }
      if (Number.isFinite(material)) {
        glTFMesh.primitives[0].material = material;
      }
      this.json.meshes = this.json.meshes || [];
      this.json.meshes.push(glTFMesh);
      return this.json.meshes.length - 1;
    }
    addPointCloud(attributes) {
      const accessorIndices = this._addAttributes(attributes);
      const glTFMesh = {
        primitives: [
          {
            attributes: accessorIndices,
            mode: 0
            // GL.POINTS
          }
        ]
      };
      this.json.meshes = this.json.meshes || [];
      this.json.meshes.push(glTFMesh);
      return this.json.meshes.length - 1;
    }
    /**
     * Adds a binary image. Builds glTF "JSON metadata" and saves buffer reference
     * Buffer will be copied into BIN chunk during "pack"
     * Currently encodes as glTF image
     * @param imageData
     * @param mimeType
     */
    addImage(imageData, mimeTypeOpt) {
      const metadata = getBinaryImageMetadata(imageData);
      const mimeType = mimeTypeOpt || metadata?.mimeType;
      const bufferViewIndex = this.addBufferView(imageData);
      const glTFImage = {
        bufferView: bufferViewIndex,
        mimeType
      };
      this.json.images = this.json.images || [];
      this.json.images.push(glTFImage);
      return this.json.images.length - 1;
    }
    /**
     * Add one untyped source buffer, create a matching glTF `bufferView`, and return its index
     * @param buffer
     */
    addBufferView(buffer, bufferIndex = 0, byteOffset = this.byteLength) {
      const byteLength = buffer.byteLength;
      assert9(Number.isFinite(byteLength));
      this.sourceBuffers = this.sourceBuffers || [];
      this.sourceBuffers.push(buffer);
      const glTFBufferView = {
        buffer: bufferIndex,
        // Write offset from the start of the binary body
        byteOffset,
        byteLength
      };
      this.byteLength += padToNBytes(byteLength, 4);
      this.json.bufferViews = this.json.bufferViews || [];
      this.json.bufferViews.push(glTFBufferView);
      return this.json.bufferViews.length - 1;
    }
    /**
     * Adds an accessor to a bufferView
     * @param bufferViewIndex
     * @param accessor
     */
    addAccessor(bufferViewIndex, accessor) {
      const glTFAccessor = {
        bufferView: bufferViewIndex,
        // @ts-ignore
        type: getAccessorTypeFromSize(accessor.size),
        // @ts-ignore
        componentType: accessor.componentType,
        // @ts-ignore
        count: accessor.count,
        // @ts-ignore
        max: accessor.max,
        // @ts-ignore
        min: accessor.min
      };
      this.json.accessors = this.json.accessors || [];
      this.json.accessors.push(glTFAccessor);
      return this.json.accessors.length - 1;
    }
    /**
     * Add a binary buffer. Builds glTF "JSON metadata" and saves buffer reference
     * Buffer will be copied into BIN chunk during "pack"
     * Currently encodes buffers as glTF accessors, but this could be optimized
     * @param sourceBuffer
     * @param accessor
     */
    addBinaryBuffer(sourceBuffer, accessor = { size: 3 }) {
      const bufferViewIndex = this.addBufferView(sourceBuffer);
      let minMax = { min: accessor.min, max: accessor.max };
      if (!minMax.min || !minMax.max) {
        minMax = this._getAccessorMinMax(sourceBuffer, accessor.size);
      }
      const accessorDefaults = {
        // @ts-ignore
        size: accessor.size,
        componentType: getComponentTypeFromArray(sourceBuffer),
        // @ts-ignore
        count: Math.round(sourceBuffer.length / accessor.size),
        min: minMax.min,
        max: minMax.max
      };
      return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));
    }
    /**
     * Adds a texture to the json part
     * @todo: add more properties for texture initialization
     * `sampler`, `name`, `extensions`, `extras`
     * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#texture
     */
    addTexture(texture) {
      const { imageIndex } = texture;
      const glTFTexture = {
        source: imageIndex
      };
      this.json.textures = this.json.textures || [];
      this.json.textures.push(glTFTexture);
      return this.json.textures.length - 1;
    }
    /** Adds a material to the json part */
    addMaterial(pbrMaterialInfo) {
      this.json.materials = this.json.materials || [];
      this.json.materials.push(pbrMaterialInfo);
      return this.json.materials.length - 1;
    }
    /** Pack the binary chunk */
    createBinaryChunk() {
      this.gltf.buffers = [];
      const totalByteLength = this.byteLength;
      const arrayBuffer2 = new ArrayBuffer(totalByteLength);
      const targetArray = new Uint8Array(arrayBuffer2);
      let dstByteOffset = 0;
      for (const sourceBuffer of this.sourceBuffers || []) {
        dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);
      }
      if (this.json?.buffers?.[0]) {
        this.json.buffers[0].byteLength = totalByteLength;
      } else {
        this.json.buffers = [{ byteLength: totalByteLength }];
      }
      this.gltf.binary = arrayBuffer2;
      this.sourceBuffers = [arrayBuffer2];
    }
    // PRIVATE
    _removeStringFromArray(array, string) {
      let found = true;
      while (found) {
        const index = array.indexOf(string);
        if (index > -1) {
          array.splice(index, 1);
        } else {
          found = false;
        }
      }
    }
    /**
     * Add attributes to buffers and create `attributes` object which is part of `mesh`
     */
    _addAttributes(attributes = {}) {
      const result = {};
      for (const attributeKey in attributes) {
        const attributeData = attributes[attributeKey];
        const attrName = this._getGltfAttributeName(attributeKey);
        const accessor = this.addBinaryBuffer(attributeData.value, attributeData);
        result[attrName] = accessor;
      }
      return result;
    }
    /**
     * Add indices to buffers
     */
    _addIndices(indices) {
      return this.addBinaryBuffer(indices, { size: 1 });
    }
    /**
     * Deduce gltf specific attribue name from input attribute name
     */
    _getGltfAttributeName(attributeName) {
      switch (attributeName.toLowerCase()) {
        case "position":
        case "positions":
        case "vertices":
          return "POSITION";
        case "normal":
        case "normals":
          return "NORMAL";
        case "color":
        case "colors":
          return "COLOR_0";
        case "texcoord":
        case "texcoords":
          return "TEXCOORD_0";
        default:
          return attributeName;
      }
    }
    /**
     * Calculate `min` and `max` arrays of accessor according to spec:
     * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-accessor
     */
    _getAccessorMinMax(buffer, size) {
      const result = { min: null, max: null };
      if (buffer.length < size) {
        return result;
      }
      result.min = [];
      result.max = [];
      const initValues = buffer.subarray(0, size);
      for (const value of initValues) {
        result.min.push(value);
        result.max.push(value);
      }
      for (let index = size; index < buffer.length; index += size) {
        for (let componentIndex = 0; componentIndex < size; componentIndex++) {
          result.min[0 + componentIndex] = Math.min(
            // @ts-ignore
            result.min[0 + componentIndex],
            buffer[index + componentIndex]
          );
          result.max[0 + componentIndex] = Math.max(
            // @ts-ignore
            result.max[0 + componentIndex],
            buffer[index + componentIndex]
          );
        }
      }
      return result;
    }
  };

  // ../../node_modules/@loaders.gl/gltf/dist/lib/extensions/utils/3d-tiles-utils.js
  function emod(n4) {
    return (n4 % 1 + 1) % 1;
  }
  var ATTRIBUTE_TYPE_TO_COMPONENTS3 = {
    SCALAR: 1,
    VEC2: 2,
    VEC3: 3,
    VEC4: 4,
    MAT2: 4,
    MAT3: 9,
    MAT4: 16,
    BOOLEAN: 1,
    STRING: 1,
    ENUM: 1
  };
  var ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY3 = {
    INT8: Int8Array,
    UINT8: Uint8Array,
    INT16: Int16Array,
    UINT16: Uint16Array,
    INT32: Int32Array,
    UINT32: Uint32Array,
    INT64: BigInt64Array,
    UINT64: BigUint64Array,
    FLOAT32: Float32Array,
    FLOAT64: Float64Array
  };
  var ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE2 = {
    INT8: 1,
    UINT8: 1,
    INT16: 2,
    UINT16: 2,
    INT32: 4,
    UINT32: 4,
    INT64: 8,
    UINT64: 8,
    FLOAT32: 4,
    FLOAT64: 8
  };
  function getArrayElementByteSize(attributeType, componentType) {
    return ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE2[componentType] * ATTRIBUTE_TYPE_TO_COMPONENTS3[attributeType];
  }
  function getOffsetsForProperty(scenegraph, bufferViewIndex, offsetType, numberOfElements) {
    if (offsetType !== "UINT8" && offsetType !== "UINT16" && offsetType !== "UINT32" && offsetType !== "UINT64") {
      return null;
    }
    const arrayOffsetsBytes = scenegraph.getTypedArrayForBufferView(bufferViewIndex);
    const arrayOffsets = convertRawBufferToMetadataArray(
      arrayOffsetsBytes,
      "SCALAR",
      // offsets consist of ONE component
      offsetType,
      numberOfElements + 1
      // The number of offsets is equal to the property table `count` plus one.
    );
    if (arrayOffsets instanceof BigInt64Array || arrayOffsets instanceof BigUint64Array) {
      return null;
    }
    return arrayOffsets;
  }
  function convertRawBufferToMetadataArray(data, attributeType, componentType, elementCount = 1) {
    const numberOfComponents = ATTRIBUTE_TYPE_TO_COMPONENTS3[attributeType];
    const ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY3[componentType];
    const size = ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE2[componentType];
    const length17 = elementCount * numberOfComponents;
    const byteLength = length17 * size;
    let buffer = data.buffer;
    let offset = data.byteOffset;
    if (offset % size !== 0) {
      const bufferArray = new Uint8Array(buffer);
      buffer = bufferArray.slice(offset, offset + byteLength).buffer;
      offset = 0;
    }
    return new ArrayType(buffer, offset, length17);
  }
  function getPrimitiveTextureData(scenegraph, textureInfo, primitive) {
    const texCoordAccessorKey = `TEXCOORD_${textureInfo.texCoord || 0}`;
    const texCoordAccessorIndex = primitive.attributes[texCoordAccessorKey];
    const textureCoordinates = scenegraph.getTypedArrayForAccessor(texCoordAccessorIndex);
    const json = scenegraph.gltf.json;
    const textureIndex = textureInfo.index;
    const imageIndex = json.textures?.[textureIndex]?.source;
    if (typeof imageIndex !== "undefined") {
      const mimeType = json.images?.[imageIndex]?.mimeType;
      const parsedImage = scenegraph.gltf.images?.[imageIndex];
      if (parsedImage && typeof parsedImage.width !== "undefined") {
        const textureData = [];
        for (let index = 0; index < textureCoordinates.length; index += 2) {
          const value = getImageValueByCoordinates(parsedImage, mimeType, textureCoordinates, index, textureInfo.channels);
          textureData.push(value);
        }
        return textureData;
      }
    }
    return [];
  }
  function primitivePropertyDataToAttributes(scenegraph, attributeName, propertyData, featureTable, primitive) {
    if (!propertyData?.length) {
      return;
    }
    const featureIndices = [];
    for (const texelData of propertyData) {
      let index = featureTable.findIndex((item) => item === texelData);
      if (index === -1) {
        index = featureTable.push(texelData) - 1;
      }
      featureIndices.push(index);
    }
    const typedArray = new Uint32Array(featureIndices);
    const bufferIndex = scenegraph.gltf.buffers.push({
      arrayBuffer: typedArray.buffer,
      byteOffset: typedArray.byteOffset,
      byteLength: typedArray.byteLength
    }) - 1;
    const bufferViewIndex = scenegraph.addBufferView(typedArray, bufferIndex, 0);
    const accessorIndex = scenegraph.addAccessor(bufferViewIndex, {
      size: 1,
      componentType: getComponentTypeFromArray(typedArray),
      count: typedArray.length
    });
    primitive.attributes[attributeName] = accessorIndex;
  }
  function getImageValueByCoordinates(parsedImage, mimeType, textureCoordinates, index, channels = [0]) {
    const CHANNELS_MAP = {
      r: { offset: 0, shift: 0 },
      g: { offset: 1, shift: 8 },
      b: { offset: 2, shift: 16 },
      a: { offset: 3, shift: 24 }
    };
    const u6 = textureCoordinates[index];
    const v5 = textureCoordinates[index + 1];
    let components = 1;
    if (mimeType && (mimeType.indexOf("image/jpeg") !== -1 || mimeType.indexOf("image/png") !== -1))
      components = 4;
    const offset = coordinatesToOffset(u6, v5, parsedImage, components);
    let value = 0;
    for (const c5 of channels) {
      const map6 = typeof c5 === "number" ? Object.values(CHANNELS_MAP)[c5] : CHANNELS_MAP[c5];
      const imageOffset = offset + map6.offset;
      const imageData = getImageData(parsedImage);
      if (imageData.data.length <= imageOffset) {
        throw new Error(`${imageData.data.length} <= ${imageOffset}`);
      }
      const imageValue = imageData.data[imageOffset];
      value |= imageValue << map6.shift;
    }
    return value;
  }
  function coordinatesToOffset(u6, v5, parsedImage, componentsCount = 1) {
    const w5 = parsedImage.width;
    const iX = emod(u6) * (w5 - 1);
    const indX = Math.round(iX);
    const h5 = parsedImage.height;
    const iY = emod(v5) * (h5 - 1);
    const indY = Math.round(iY);
    const components = parsedImage.components ? parsedImage.components : componentsCount;
    const offset = (indY * w5 + indX) * components;
    return offset;
  }
  function parseVariableLengthArrayNumeric(valuesData, numberOfElements, arrayOffsets, valuesDataBytesLength, valueSize) {
    const attributeValueArray = [];
    for (let index = 0; index < numberOfElements; index++) {
      const arrayOffset = arrayOffsets[index];
      const arrayByteSize = arrayOffsets[index + 1] - arrayOffsets[index];
      if (arrayByteSize + arrayOffset > valuesDataBytesLength) {
        break;
      }
      const typedArrayOffset = arrayOffset / valueSize;
      const elementCount = arrayByteSize / valueSize;
      attributeValueArray.push(valuesData.slice(typedArrayOffset, typedArrayOffset + elementCount));
    }
    return attributeValueArray;
  }
  function parseFixedLengthArrayNumeric(valuesData, numberOfElements, arrayCount) {
    const attributeValueArray = [];
    for (let index = 0; index < numberOfElements; index++) {
      const elementOffset = index * arrayCount;
      attributeValueArray.push(valuesData.slice(elementOffset, elementOffset + arrayCount));
    }
    return attributeValueArray;
  }
  function getPropertyDataString(numberOfElements, valuesDataBytes, arrayOffsets, stringOffsets) {
    if (arrayOffsets) {
      throw new Error("Not implemented - arrayOffsets for strings is specified");
    }
    if (stringOffsets) {
      const stringsArray = [];
      const textDecoder = new TextDecoder("utf8");
      let stringOffset = 0;
      for (let index = 0; index < numberOfElements; index++) {
        const stringByteSize = stringOffsets[index + 1] - stringOffsets[index];
        if (stringByteSize + stringOffset <= valuesDataBytes.length) {
          const stringData = valuesDataBytes.subarray(stringOffset, stringByteSize + stringOffset);
          const stringAttribute = textDecoder.decode(stringData);
          stringsArray.push(stringAttribute);
          stringOffset += stringByteSize;
        }
      }
      return stringsArray;
    }
    return [];
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/extensions/EXT_mesh_features.js
  var EXT_MESH_FEATURES_NAME = "EXT_mesh_features";
  var name2 = EXT_MESH_FEATURES_NAME;
  async function decode(gltfData, options) {
    const scenegraph = new GLTFScenegraph(gltfData);
    decodeExtMeshFeatures(scenegraph, options);
  }
  function decodeExtMeshFeatures(scenegraph, options) {
    const json = scenegraph.gltf.json;
    if (!json.meshes) {
      return;
    }
    for (const mesh of json.meshes) {
      for (const primitive of mesh.primitives) {
        processMeshPrimitiveFeatures(scenegraph, primitive, options);
      }
    }
  }
  function processMeshPrimitiveFeatures(scenegraph, primitive, options) {
    if (!options?.gltf?.loadBuffers) {
      return;
    }
    const extension = primitive.extensions?.[EXT_MESH_FEATURES_NAME];
    const featureIds = extension?.featureIds;
    if (!featureIds) {
      return;
    }
    for (const featureId of featureIds) {
      let featureIdData;
      if (typeof featureId.attribute !== "undefined") {
        const accessorKey = `_FEATURE_ID_${featureId.attribute}`;
        const accessorIndex = primitive.attributes[accessorKey];
        featureIdData = scenegraph.getTypedArrayForAccessor(accessorIndex);
      } else if (typeof featureId.texture !== "undefined" && options?.gltf?.loadImages) {
        featureIdData = getPrimitiveTextureData(scenegraph, featureId.texture, primitive);
      } else {
        featureIdData = [];
      }
      featureId.data = featureIdData;
    }
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/extensions/EXT_structural_metadata.js
  var EXT_structural_metadata_exports = {};
  __export(EXT_structural_metadata_exports, {
    decode: () => decode2,
    name: () => name3
  });
  var EXT_STRUCTURAL_METADATA_NAME = "EXT_structural_metadata";
  var name3 = EXT_STRUCTURAL_METADATA_NAME;
  async function decode2(gltfData, options) {
    const scenegraph = new GLTFScenegraph(gltfData);
    decodeExtStructuralMetadata(scenegraph, options);
  }
  function decodeExtStructuralMetadata(scenegraph, options) {
    if (!options.gltf?.loadBuffers) {
      return;
    }
    const extension = scenegraph.getExtension(EXT_STRUCTURAL_METADATA_NAME);
    if (!extension) {
      return;
    }
    if (options.gltf?.loadImages) {
      decodePropertyTextures(scenegraph, extension);
    }
    decodePropertyTables(scenegraph, extension);
  }
  function decodePropertyTextures(scenegraph, extension) {
    const propertyTextures = extension.propertyTextures;
    const json = scenegraph.gltf.json;
    if (propertyTextures && json.meshes) {
      for (const mesh of json.meshes) {
        for (const primitive of mesh.primitives) {
          processPrimitivePropertyTextures(scenegraph, propertyTextures, primitive, extension);
        }
      }
    }
  }
  function decodePropertyTables(scenegraph, extension) {
    const schema = extension.schema;
    if (!schema) {
      return;
    }
    const schemaClasses = schema.classes;
    const propertyTables = extension.propertyTables;
    if (schemaClasses && propertyTables) {
      for (const schemaName in schemaClasses) {
        const propertyTable = findPropertyTableByClass(propertyTables, schemaName);
        if (propertyTable) {
          processPropertyTable(scenegraph, schema, propertyTable);
        }
      }
    }
  }
  function findPropertyTableByClass(propertyTables, schemaClassName) {
    for (const propertyTable of propertyTables) {
      if (propertyTable.class === schemaClassName) {
        return propertyTable;
      }
    }
    return null;
  }
  function processPrimitivePropertyTextures(scenegraph, propertyTextures, primitive, extension) {
    if (!propertyTextures) {
      return;
    }
    const primitiveExtension = primitive.extensions?.[EXT_STRUCTURAL_METADATA_NAME];
    const primitivePropertyTextureIndices = primitiveExtension?.propertyTextures;
    if (!primitivePropertyTextureIndices) {
      return;
    }
    for (const primitivePropertyTextureIndex of primitivePropertyTextureIndices) {
      const propertyTexture = propertyTextures[primitivePropertyTextureIndex];
      processPrimitivePropertyTexture(scenegraph, propertyTexture, primitive, extension);
    }
  }
  function processPrimitivePropertyTexture(scenegraph, propertyTexture, primitive, extension) {
    if (!propertyTexture.properties) {
      return;
    }
    if (!extension.dataAttributeNames) {
      extension.dataAttributeNames = [];
    }
    const className = propertyTexture.class;
    for (const propertyName in propertyTexture.properties) {
      const attributeName = `${className}_${propertyName}`;
      const textureInfoTopLevel = propertyTexture.properties?.[propertyName];
      if (!textureInfoTopLevel) {
        continue;
      }
      if (!textureInfoTopLevel.data) {
        textureInfoTopLevel.data = [];
      }
      const featureTextureTable = textureInfoTopLevel.data;
      const propertyData = getPrimitiveTextureData(scenegraph, textureInfoTopLevel, primitive);
      if (propertyData === null) {
        continue;
      }
      primitivePropertyDataToAttributes(scenegraph, attributeName, propertyData, featureTextureTable, primitive);
      textureInfoTopLevel.data = featureTextureTable;
      extension.dataAttributeNames.push(attributeName);
    }
  }
  function processPropertyTable(scenegraph, schema, propertyTable) {
    const schemaClass = schema.classes?.[propertyTable.class];
    if (!schemaClass) {
      throw new Error(`Incorrect data in the EXT_structural_metadata extension: no schema class with name ${propertyTable.class}`);
    }
    const numberOfElements = propertyTable.count;
    for (const propertyName in schemaClass.properties) {
      const classProperty = schemaClass.properties[propertyName];
      const propertyTableProperty = propertyTable.properties?.[propertyName];
      if (propertyTableProperty) {
        const data = getPropertyDataFromBinarySource(scenegraph, schema, classProperty, numberOfElements, propertyTableProperty);
        propertyTableProperty.data = data;
      }
    }
  }
  function getPropertyDataFromBinarySource(scenegraph, schema, classProperty, numberOfElements, propertyTableProperty) {
    let data = [];
    const valuesBufferView = propertyTableProperty.values;
    const valuesDataBytes = scenegraph.getTypedArrayForBufferView(valuesBufferView);
    const arrayOffsets = getArrayOffsetsForProperty(scenegraph, classProperty, propertyTableProperty, numberOfElements);
    const stringOffsets = getStringOffsetsForProperty(scenegraph, propertyTableProperty, numberOfElements);
    switch (classProperty.type) {
      case "SCALAR":
      case "VEC2":
      case "VEC3":
      case "VEC4":
      case "MAT2":
      case "MAT3":
      case "MAT4": {
        data = getPropertyDataNumeric(classProperty, numberOfElements, valuesDataBytes, arrayOffsets);
        break;
      }
      case "BOOLEAN": {
        throw new Error(`Not implemented - classProperty.type=${classProperty.type}`);
      }
      case "STRING": {
        data = getPropertyDataString(numberOfElements, valuesDataBytes, arrayOffsets, stringOffsets);
        break;
      }
      case "ENUM": {
        data = getPropertyDataENUM(schema, classProperty, numberOfElements, valuesDataBytes, arrayOffsets);
        break;
      }
      default:
        throw new Error(`Unknown classProperty type ${classProperty.type}`);
    }
    return data;
  }
  function getArrayOffsetsForProperty(scenegraph, classProperty, propertyTableProperty, numberOfElements) {
    if (classProperty.array && // `count` is a number of array elements. May only be defined when `array` is true.
    // If `count` is NOT defined, it's a VARIABLE-length array
    typeof classProperty.count === "undefined" && // `arrayOffsets` is an index of the buffer view containing offsets for variable-length arrays.
    typeof propertyTableProperty.arrayOffsets !== "undefined") {
      return getOffsetsForProperty(scenegraph, propertyTableProperty.arrayOffsets, propertyTableProperty.arrayOffsetType || "UINT32", numberOfElements);
    }
    return null;
  }
  function getStringOffsetsForProperty(scenegraph, propertyTableProperty, numberOfElements) {
    if (typeof propertyTableProperty.stringOffsets !== "undefined") {
      return getOffsetsForProperty(scenegraph, propertyTableProperty.stringOffsets, propertyTableProperty.stringOffsetType || "UINT32", numberOfElements);
    }
    return null;
  }
  function getPropertyDataNumeric(classProperty, numberOfElements, valuesDataBytes, arrayOffsets) {
    const isArray11 = classProperty.array;
    const arrayCount = classProperty.count;
    const elementSize = getArrayElementByteSize(classProperty.type, classProperty.componentType);
    const elementCount = valuesDataBytes.byteLength / elementSize;
    let valuesData;
    if (classProperty.componentType) {
      valuesData = convertRawBufferToMetadataArray(
        valuesDataBytes,
        classProperty.type,
        // The datatype of the element's components. Only applicable to `SCALAR`, `VECN`, and `MATN` types.
        classProperty.componentType,
        elementCount
      );
    } else {
      valuesData = valuesDataBytes;
    }
    if (isArray11) {
      if (arrayOffsets) {
        return parseVariableLengthArrayNumeric(valuesData, numberOfElements, arrayOffsets, valuesDataBytes.length, elementSize);
      }
      if (arrayCount) {
        return parseFixedLengthArrayNumeric(valuesData, numberOfElements, arrayCount);
      }
      return [];
    }
    return valuesData;
  }
  function getPropertyDataENUM(schema, classProperty, numberOfElements, valuesDataBytes, arrayOffsets) {
    const enumType = classProperty.enumType;
    if (!enumType) {
      throw new Error("Incorrect data in the EXT_structural_metadata extension: classProperty.enumType is not set for type ENUM");
    }
    const enumEntry = schema.enums?.[enumType];
    if (!enumEntry) {
      throw new Error(`Incorrect data in the EXT_structural_metadata extension: schema.enums does't contain ${enumType}`);
    }
    const enumValueType = enumEntry.valueType || "UINT16";
    const elementSize = getArrayElementByteSize(classProperty.type, enumValueType);
    const elementCount = valuesDataBytes.byteLength / elementSize;
    let valuesData = convertRawBufferToMetadataArray(valuesDataBytes, classProperty.type, enumValueType, elementCount);
    if (!valuesData) {
      valuesData = valuesDataBytes;
    }
    if (classProperty.array) {
      if (arrayOffsets) {
        return parseVariableLengthArrayENUM({
          valuesData,
          numberOfElements,
          arrayOffsets,
          valuesDataBytesLength: valuesDataBytes.length,
          elementSize,
          enumEntry
        });
      }
      const arrayCount = classProperty.count;
      if (arrayCount) {
        return parseFixedLengthArrayENUM(valuesData, numberOfElements, arrayCount, enumEntry);
      }
      return [];
    }
    return getEnumsArray(valuesData, 0, numberOfElements, enumEntry);
  }
  function parseVariableLengthArrayENUM(params) {
    const { valuesData, numberOfElements, arrayOffsets, valuesDataBytesLength, elementSize, enumEntry } = params;
    const attributeValueArray = [];
    for (let index = 0; index < numberOfElements; index++) {
      const arrayOffset = arrayOffsets[index];
      const arrayByteSize = arrayOffsets[index + 1] - arrayOffsets[index];
      if (arrayByteSize + arrayOffset > valuesDataBytesLength) {
        break;
      }
      const typedArrayOffset = arrayOffset / elementSize;
      const elementCount = arrayByteSize / elementSize;
      const array = getEnumsArray(valuesData, typedArrayOffset, elementCount, enumEntry);
      attributeValueArray.push(array);
    }
    return attributeValueArray;
  }
  function parseFixedLengthArrayENUM(valuesData, numberOfElements, arrayCount, enumEntry) {
    const attributeValueArray = [];
    for (let index = 0; index < numberOfElements; index++) {
      const elementOffset = arrayCount * index;
      const array = getEnumsArray(valuesData, elementOffset, arrayCount, enumEntry);
      attributeValueArray.push(array);
    }
    return attributeValueArray;
  }
  function getEnumsArray(valuesData, offset, count3, enumEntry) {
    const array = [];
    for (let i7 = 0; i7 < count3; i7++) {
      if (valuesData instanceof BigInt64Array || valuesData instanceof BigUint64Array) {
        array.push("");
      } else {
        const value = valuesData[offset + i7];
        const enumObject = getEnumByValue(enumEntry, value);
        if (enumObject) {
          array.push(enumObject.name);
        } else {
          array.push("");
        }
      }
    }
    return array;
  }
  function getEnumByValue(enumEntry, value) {
    for (const enumValue of enumEntry.values) {
      if (enumValue.value === value) {
        return enumValue;
      }
    }
    return null;
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/extensions/deprecated/EXT_feature_metadata.js
  var EXT_feature_metadata_exports = {};
  __export(EXT_feature_metadata_exports, {
    decode: () => decode3,
    name: () => name4
  });
  var EXT_FEATURE_METADATA_NAME = "EXT_feature_metadata";
  var name4 = EXT_FEATURE_METADATA_NAME;
  async function decode3(gltfData, options) {
    const scenegraph = new GLTFScenegraph(gltfData);
    decodeExtFeatureMetadata(scenegraph, options);
  }
  function decodeExtFeatureMetadata(scenegraph, options) {
    if (!options.gltf?.loadBuffers) {
      return;
    }
    const extension = scenegraph.getExtension(EXT_FEATURE_METADATA_NAME);
    if (!extension) {
      return;
    }
    if (options.gltf?.loadImages) {
      decodePropertyTextures2(scenegraph, extension);
    }
    decodePropertyTables2(scenegraph, extension);
  }
  function decodePropertyTextures2(scenegraph, extension) {
    const schema = extension.schema;
    if (!schema) {
      return;
    }
    const schemaClasses = schema.classes;
    const { featureTextures } = extension;
    if (schemaClasses && featureTextures) {
      for (const schemaName in schemaClasses) {
        const schemaClass = schemaClasses[schemaName];
        const featureTexture = findFeatureTextureByClass(featureTextures, schemaName);
        if (featureTexture) {
          handleFeatureTextureProperties(scenegraph, featureTexture, schemaClass);
        }
      }
    }
  }
  function decodePropertyTables2(scenegraph, extension) {
    const schema = extension.schema;
    if (!schema) {
      return;
    }
    const schemaClasses = schema.classes;
    const propertyTables = extension.featureTables;
    if (schemaClasses && propertyTables) {
      for (const schemaName in schemaClasses) {
        const propertyTable = findPropertyTableByClass2(propertyTables, schemaName);
        if (propertyTable) {
          processPropertyTable2(scenegraph, schema, propertyTable);
        }
      }
    }
  }
  function findPropertyTableByClass2(propertyTables, schemaClassName) {
    for (const propertyTableName in propertyTables) {
      const propertyTable = propertyTables[propertyTableName];
      if (propertyTable.class === schemaClassName) {
        return propertyTable;
      }
    }
    return null;
  }
  function findFeatureTextureByClass(featureTextures, schemaClassName) {
    for (const featureTexturesName in featureTextures) {
      const featureTable = featureTextures[featureTexturesName];
      if (featureTable.class === schemaClassName) {
        return featureTable;
      }
    }
    return null;
  }
  function processPropertyTable2(scenegraph, schema, propertyTable) {
    if (!propertyTable.class) {
      return;
    }
    const schemaClass = schema.classes?.[propertyTable.class];
    if (!schemaClass) {
      throw new Error(`Incorrect data in the EXT_structural_metadata extension: no schema class with name ${propertyTable.class}`);
    }
    const numberOfElements = propertyTable.count;
    for (const propertyName in schemaClass.properties) {
      const classProperty = schemaClass.properties[propertyName];
      const propertyTableProperty = propertyTable.properties?.[propertyName];
      if (propertyTableProperty) {
        const data = getPropertyDataFromBinarySource2(scenegraph, schema, classProperty, numberOfElements, propertyTableProperty);
        propertyTableProperty.data = data;
      }
    }
  }
  function handleFeatureTextureProperties(scenegraph, featureTexture, schemaClass) {
    const attributeName = featureTexture.class;
    for (const propertyName in schemaClass.properties) {
      const featureTextureProperty = featureTexture?.properties?.[propertyName];
      if (featureTextureProperty) {
        const data = getPropertyDataFromTexture(scenegraph, featureTextureProperty, attributeName);
        featureTextureProperty.data = data;
      }
    }
  }
  function getPropertyDataFromBinarySource2(scenegraph, schema, classProperty, numberOfFeatures, featureTableProperty) {
    let data = [];
    const bufferView = featureTableProperty.bufferView;
    const dataArray = scenegraph.getTypedArrayForBufferView(bufferView);
    const arrayOffsets = getArrayOffsetsForProperty2(scenegraph, classProperty, featureTableProperty, numberOfFeatures);
    const stringOffsets = getStringOffsetsForProperty2(scenegraph, classProperty, featureTableProperty, numberOfFeatures);
    if (classProperty.type === "STRING" || classProperty.componentType === "STRING") {
      data = getPropertyDataString(numberOfFeatures, dataArray, arrayOffsets, stringOffsets);
    } else if (isNumericProperty(classProperty)) {
      data = getPropertyDataNumeric2(classProperty, numberOfFeatures, dataArray, arrayOffsets);
    }
    return data;
  }
  function getArrayOffsetsForProperty2(scenegraph, classProperty, propertyTableProperty, numberOfElements) {
    if (classProperty.type === "ARRAY" && // `componentCount` is a number of fixed-length array elements.
    // If `componentCount` is NOT defined, it's a VARIABLE-length array
    typeof classProperty.componentCount === "undefined" && // `arrayOffsetBufferView` is an index of the buffer view containing offsets for variable-length arrays.
    typeof propertyTableProperty.arrayOffsetBufferView !== "undefined") {
      return getOffsetsForProperty(
        scenegraph,
        propertyTableProperty.arrayOffsetBufferView,
        propertyTableProperty.offsetType || "UINT32",
        // offsetType is used both for stringOffsetBufferView and arrayOffsetBufferView
        numberOfElements
      );
    }
    return null;
  }
  function getStringOffsetsForProperty2(scenegraph, classProperty, propertyTableProperty, numberOfElements) {
    if (typeof propertyTableProperty.stringOffsetBufferView !== "undefined") {
      return getOffsetsForProperty(
        scenegraph,
        propertyTableProperty.stringOffsetBufferView,
        propertyTableProperty.offsetType || "UINT32",
        // offsetType is used both for stringOffsetBufferView and arrayOffsetBufferView
        numberOfElements
      );
    }
    return null;
  }
  function isNumericProperty(schemaProperty) {
    const types = [
      "UINT8",
      "INT16",
      "UINT16",
      "INT32",
      "UINT32",
      "INT64",
      "UINT64",
      "FLOAT32",
      "FLOAT64"
    ];
    return types.includes(schemaProperty.type) || typeof schemaProperty.componentType !== "undefined" && types.includes(schemaProperty.componentType);
  }
  function getPropertyDataNumeric2(classProperty, numberOfElements, valuesDataBytes, arrayOffsets) {
    const isArray11 = classProperty.type === "ARRAY";
    const arrayCount = classProperty.componentCount;
    const attributeType = "SCALAR";
    const componentType = classProperty.componentType || classProperty.type;
    const elementSize = getArrayElementByteSize(attributeType, componentType);
    const elementCount = valuesDataBytes.byteLength / elementSize;
    const valuesData = convertRawBufferToMetadataArray(valuesDataBytes, attributeType, componentType, elementCount);
    if (isArray11) {
      if (arrayOffsets) {
        return parseVariableLengthArrayNumeric(valuesData, numberOfElements, arrayOffsets, valuesDataBytes.length, elementSize);
      }
      if (arrayCount) {
        return parseFixedLengthArrayNumeric(valuesData, numberOfElements, arrayCount);
      }
      return [];
    }
    return valuesData;
  }
  function getPropertyDataFromTexture(scenegraph, featureTextureProperty, attributeName) {
    const json = scenegraph.gltf.json;
    if (!json.meshes) {
      return [];
    }
    const featureTextureTable = [];
    for (const mesh of json.meshes) {
      for (const primitive of mesh.primitives) {
        processPrimitiveTextures(scenegraph, attributeName, featureTextureProperty, featureTextureTable, primitive);
      }
    }
    return featureTextureTable;
  }
  function processPrimitiveTextures(scenegraph, attributeName, featureTextureProperty, featureTextureTable, primitive) {
    const textureInfoTopLevel = {
      channels: featureTextureProperty.channels,
      ...featureTextureProperty.texture
    };
    const propertyData = getPrimitiveTextureData(scenegraph, textureInfoTopLevel, primitive);
    if (!propertyData) {
      return;
    }
    primitivePropertyDataToAttributes(scenegraph, attributeName, propertyData, featureTextureTable, primitive);
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/utils/version.js
  var VERSION9 = true ? "4.2.1" : "latest";

  // ../../node_modules/@loaders.gl/gltf/dist/lib/parsers/parse-glb.js
  var LITTLE_ENDIAN2 = true;
  var MAGIC_glTF = 1735152710;
  var GLB_FILE_HEADER_SIZE = 12;
  var GLB_CHUNK_HEADER_SIZE = 8;
  var GLB_CHUNK_TYPE_JSON = 1313821514;
  var GLB_CHUNK_TYPE_BIN = 5130562;
  var GLB_V1_CONTENT_FORMAT_JSON = 0;
  var GLB_CHUNK_TYPE_JSON_XVIZ_DEPRECATED = 0;
  var GLB_CHUNK_TYPE_BIX_XVIZ_DEPRECATED = 1;
  function getMagicString3(dataView, byteOffset = 0) {
    return `${String.fromCharCode(dataView.getUint8(byteOffset + 0))}${String.fromCharCode(dataView.getUint8(byteOffset + 1))}${String.fromCharCode(dataView.getUint8(byteOffset + 2))}${String.fromCharCode(dataView.getUint8(byteOffset + 3))}`;
  }
  function isGLB(arrayBuffer2, byteOffset = 0, options = {}) {
    const dataView = new DataView(arrayBuffer2);
    const { magic = MAGIC_glTF } = options;
    const magic1 = dataView.getUint32(byteOffset, false);
    return magic1 === magic || magic1 === MAGIC_glTF;
  }
  function parseGLBSync(glb, arrayBuffer2, byteOffset = 0, options = {}) {
    const dataView = new DataView(arrayBuffer2);
    const type = getMagicString3(dataView, byteOffset + 0);
    const version = dataView.getUint32(byteOffset + 4, LITTLE_ENDIAN2);
    const byteLength = dataView.getUint32(byteOffset + 8, LITTLE_ENDIAN2);
    Object.assign(glb, {
      // Put less important stuff in a header, to avoid clutter
      header: {
        byteOffset,
        // Byte offset into the initial arrayBuffer
        byteLength,
        hasBinChunk: false
      },
      type,
      version,
      json: {},
      binChunks: []
    });
    byteOffset += GLB_FILE_HEADER_SIZE;
    switch (glb.version) {
      case 1:
        return parseGLBV1(glb, dataView, byteOffset);
      case 2:
        return parseGLBV2(glb, dataView, byteOffset, options = {});
      default:
        throw new Error(`Invalid GLB version ${glb.version}. Only supports version 1 and 2.`);
    }
  }
  function parseGLBV1(glb, dataView, byteOffset) {
    assert2(glb.header.byteLength > GLB_FILE_HEADER_SIZE + GLB_CHUNK_HEADER_SIZE);
    const contentLength = dataView.getUint32(byteOffset + 0, LITTLE_ENDIAN2);
    const contentFormat = dataView.getUint32(byteOffset + 4, LITTLE_ENDIAN2);
    byteOffset += GLB_CHUNK_HEADER_SIZE;
    assert2(contentFormat === GLB_V1_CONTENT_FORMAT_JSON);
    parseJSONChunk(glb, dataView, byteOffset, contentLength);
    byteOffset += contentLength;
    byteOffset += parseBINChunk(glb, dataView, byteOffset, glb.header.byteLength);
    return byteOffset;
  }
  function parseGLBV2(glb, dataView, byteOffset, options) {
    assert2(glb.header.byteLength > GLB_FILE_HEADER_SIZE + GLB_CHUNK_HEADER_SIZE);
    parseGLBChunksSync(glb, dataView, byteOffset, options);
    return byteOffset + glb.header.byteLength;
  }
  function parseGLBChunksSync(glb, dataView, byteOffset, options) {
    while (byteOffset + 8 <= glb.header.byteLength) {
      const chunkLength = dataView.getUint32(byteOffset + 0, LITTLE_ENDIAN2);
      const chunkFormat = dataView.getUint32(byteOffset + 4, LITTLE_ENDIAN2);
      byteOffset += GLB_CHUNK_HEADER_SIZE;
      switch (chunkFormat) {
        case GLB_CHUNK_TYPE_JSON:
          parseJSONChunk(glb, dataView, byteOffset, chunkLength);
          break;
        case GLB_CHUNK_TYPE_BIN:
          parseBINChunk(glb, dataView, byteOffset, chunkLength);
          break;
        case GLB_CHUNK_TYPE_JSON_XVIZ_DEPRECATED:
          if (!options.strict) {
            parseJSONChunk(glb, dataView, byteOffset, chunkLength);
          }
          break;
        case GLB_CHUNK_TYPE_BIX_XVIZ_DEPRECATED:
          if (!options.strict) {
            parseBINChunk(glb, dataView, byteOffset, chunkLength);
          }
          break;
        default:
          break;
      }
      byteOffset += padToNBytes(chunkLength, 4);
    }
    return byteOffset;
  }
  function parseJSONChunk(glb, dataView, byteOffset, chunkLength) {
    const jsonChunk = new Uint8Array(dataView.buffer, byteOffset, chunkLength);
    const textDecoder = new TextDecoder("utf8");
    const jsonText = textDecoder.decode(jsonChunk);
    glb.json = JSON.parse(jsonText);
    return padToNBytes(chunkLength, 4);
  }
  function parseBINChunk(glb, dataView, byteOffset, chunkLength) {
    glb.header.hasBinChunk = true;
    glb.binChunks.push({
      byteOffset,
      byteLength: chunkLength,
      arrayBuffer: dataView.buffer
      // TODO - copy, or create typed array view?
    });
    return padToNBytes(chunkLength, 4);
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/gltf-utils/resolve-url.js
  function resolveUrl(url, options) {
    const absolute = url.startsWith("data:") || url.startsWith("http:") || url.startsWith("https:");
    if (absolute) {
      return url;
    }
    const baseUrl = options.baseUri || options.uri;
    if (!baseUrl) {
      throw new Error(`'baseUri' must be provided to resolve relative url ${url}`);
    }
    return baseUrl.substr(0, baseUrl.lastIndexOf("/") + 1) + url;
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/extensions/EXT_meshopt_compression.js
  var EXT_meshopt_compression_exports = {};
  __export(EXT_meshopt_compression_exports, {
    decode: () => decode5,
    name: () => name5
  });

  // ../../node_modules/@loaders.gl/gltf/dist/meshopt/meshopt-decoder.js
  var wasm_base = "B9h9z9tFBBBF8fL9gBB9gLaaaaaFa9gEaaaB9gFaFa9gEaaaFaEMcBFFFGGGEIIILF9wFFFLEFBFKNFaFCx/IFMO/LFVK9tv9t9vq95GBt9f9f939h9z9t9f9j9h9s9s9f9jW9vq9zBBp9tv9z9o9v9wW9f9kv9j9v9kv9WvqWv94h919m9mvqBF8Z9tv9z9o9v9wW9f9kv9j9v9kv9J9u9kv94h919m9mvqBGy9tv9z9o9v9wW9f9kv9j9v9kv9J9u9kv949TvZ91v9u9jvBEn9tv9z9o9v9wW9f9kv9j9v9kv69p9sWvq9P9jWBIi9tv9z9o9v9wW9f9kv9j9v9kv69p9sWvq9R919hWBLn9tv9z9o9v9wW9f9kv9j9v9kv69p9sWvq9F949wBKI9z9iqlBOc+x8ycGBM/qQFTa8jUUUUBCU/EBlHL8kUUUUBC9+RKGXAGCFJAI9LQBCaRKAE2BBC+gF9HQBALAEAIJHOAGlAGTkUUUBRNCUoBAG9uC/wgBZHKCUGAKCUG9JyRVAECFJRICBRcGXEXAcAF9PQFAVAFAclAcAVJAF9JyRMGXGXAG9FQBAMCbJHKC9wZRSAKCIrCEJCGrRQANCUGJRfCBRbAIRTEXGXAOATlAQ9PQBCBRISEMATAQJRIGXAS9FQBCBRtCBREEXGXAOAIlCi9PQBCBRISLMANCU/CBJAEJRKGXGXGXGXGXATAECKrJ2BBAtCKZrCEZfIBFGEBMAKhB83EBAKCNJhB83EBSEMAKAI2BIAI2BBHmCKrHYAYCE6HYy86BBAKCFJAICIJAYJHY2BBAmCIrCEZHPAPCE6HPy86BBAKCGJAYAPJHY2BBAmCGrCEZHPAPCE6HPy86BBAKCEJAYAPJHY2BBAmCEZHmAmCE6Hmy86BBAKCIJAYAmJHY2BBAI2BFHmCKrHPAPCE6HPy86BBAKCLJAYAPJHY2BBAmCIrCEZHPAPCE6HPy86BBAKCKJAYAPJHY2BBAmCGrCEZHPAPCE6HPy86BBAKCOJAYAPJHY2BBAmCEZHmAmCE6Hmy86BBAKCNJAYAmJHY2BBAI2BGHmCKrHPAPCE6HPy86BBAKCVJAYAPJHY2BBAmCIrCEZHPAPCE6HPy86BBAKCcJAYAPJHY2BBAmCGrCEZHPAPCE6HPy86BBAKCMJAYAPJHY2BBAmCEZHmAmCE6Hmy86BBAKCSJAYAmJHm2BBAI2BEHICKrHYAYCE6HYy86BBAKCQJAmAYJHm2BBAICIrCEZHYAYCE6HYy86BBAKCfJAmAYJHm2BBAICGrCEZHYAYCE6HYy86BBAKCbJAmAYJHK2BBAICEZHIAICE6HIy86BBAKAIJRISGMAKAI2BNAI2BBHmCIrHYAYCb6HYy86BBAKCFJAICNJAYJHY2BBAmCbZHmAmCb6Hmy86BBAKCGJAYAmJHm2BBAI2BFHYCIrHPAPCb6HPy86BBAKCEJAmAPJHm2BBAYCbZHYAYCb6HYy86BBAKCIJAmAYJHm2BBAI2BGHYCIrHPAPCb6HPy86BBAKCLJAmAPJHm2BBAYCbZHYAYCb6HYy86BBAKCKJAmAYJHm2BBAI2BEHYCIrHPAPCb6HPy86BBAKCOJAmAPJHm2BBAYCbZHYAYCb6HYy86BBAKCNJAmAYJHm2BBAI2BIHYCIrHPAPCb6HPy86BBAKCVJAmAPJHm2BBAYCbZHYAYCb6HYy86BBAKCcJAmAYJHm2BBAI2BLHYCIrHPAPCb6HPy86BBAKCMJAmAPJHm2BBAYCbZHYAYCb6HYy86BBAKCSJAmAYJHm2BBAI2BKHYCIrHPAPCb6HPy86BBAKCQJAmAPJHm2BBAYCbZHYAYCb6HYy86BBAKCfJAmAYJHm2BBAI2BOHICIrHYAYCb6HYy86BBAKCbJAmAYJHK2BBAICbZHIAICb6HIy86BBAKAIJRISFMAKAI8pBB83BBAKCNJAICNJ8pBB83BBAICTJRIMAtCGJRtAECTJHEAS9JQBMMGXAIQBCBRISEMGXAM9FQBANAbJ2BBRtCBRKAfREEXAEANCU/CBJAKJ2BBHTCFrCBATCFZl9zAtJHt86BBAEAGJREAKCFJHKAM9HQBMMAfCFJRfAIRTAbCFJHbAG9HQBMMABAcAG9sJANCUGJAMAG9sTkUUUBpANANCUGJAMCaJAG9sJAGTkUUUBpMAMCBAIyAcJRcAIQBMC9+RKSFMCBC99AOAIlAGCAAGCA9Ly6yRKMALCU/EBJ8kUUUUBAKM+OmFTa8jUUUUBCoFlHL8kUUUUBC9+RKGXAFCE9uHOCtJAI9LQBCaRKAE2BBHNC/wFZC/gF9HQBANCbZHVCF9LQBALCoBJCgFCUFT+JUUUBpALC84Jha83EBALC8wJha83EBALC8oJha83EBALCAJha83EBALCiJha83EBALCTJha83EBALha83ENALha83EBAEAIJC9wJRcAECFJHNAOJRMGXAF9FQBCQCbAVCF6yRSABRECBRVCBRQCBRfCBRICBRKEXGXAMAcuQBC9+RKSEMGXGXAN2BBHOC/vF9LQBALCoBJAOCIrCa9zAKJCbZCEWJHb8oGIRTAb8oGBRtGXAOCbZHbAS9PQBALAOCa9zAIJCbZCGWJ8oGBAVAbyROAb9FRbGXGXAGCG9HQBABAt87FBABCIJAO87FBABCGJAT87FBSFMAEAtjGBAECNJAOjGBAECIJATjGBMAVAbJRVALCoBJAKCEWJHmAOjGBAmATjGIALAICGWJAOjGBALCoBJAKCFJCbZHKCEWJHTAtjGBATAOjGIAIAbJRIAKCFJRKSGMGXGXAbCb6QBAQAbJAbC989zJCFJRQSFMAM1BBHbCgFZROGXGXAbCa9MQBAMCFJRMSFMAM1BFHbCgBZCOWAOCgBZqROGXAbCa9MQBAMCGJRMSFMAM1BGHbCgBZCfWAOqROGXAbCa9MQBAMCEJRMSFMAM1BEHbCgBZCdWAOqROGXAbCa9MQBAMCIJRMSFMAM2BIC8cWAOqROAMCLJRMMAOCFrCBAOCFZl9zAQJRQMGXGXAGCG9HQBABAt87FBABCIJAQ87FBABCGJAT87FBSFMAEAtjGBAECNJAQjGBAECIJATjGBMALCoBJAKCEWJHOAQjGBAOATjGIALAICGWJAQjGBALCoBJAKCFJCbZHKCEWJHOAtjGBAOAQjGIAICFJRIAKCFJRKSFMGXAOCDF9LQBALAIAcAOCbZJ2BBHbCIrHTlCbZCGWJ8oGBAVCFJHtATyROALAIAblCbZCGWJ8oGBAtAT9FHmJHtAbCbZHTyRbAT9FRTGXGXAGCG9HQBABAV87FBABCIJAb87FBABCGJAO87FBSFMAEAVjGBAECNJAbjGBAECIJAOjGBMALAICGWJAVjGBALCoBJAKCEWJHYAOjGBAYAVjGIALAICFJHICbZCGWJAOjGBALCoBJAKCFJCbZCEWJHYAbjGBAYAOjGIALAIAmJCbZHICGWJAbjGBALCoBJAKCGJCbZHKCEWJHOAVjGBAOAbjGIAKCFJRKAIATJRIAtATJRVSFMAVCBAM2BBHYyHTAOC/+F6HPJROAYCbZRtGXGXAYCIrHmQBAOCFJRbSFMAORbALAIAmlCbZCGWJ8oGBROMGXGXAtQBAbCFJRVSFMAbRVALAIAYlCbZCGWJ8oGBRbMGXGXAP9FQBAMCFJRYSFMAM1BFHYCgFZRTGXGXAYCa9MQBAMCGJRYSFMAM1BGHYCgBZCOWATCgBZqRTGXAYCa9MQBAMCEJRYSFMAM1BEHYCgBZCfWATqRTGXAYCa9MQBAMCIJRYSFMAM1BIHYCgBZCdWATqRTGXAYCa9MQBAMCLJRYSFMAMCKJRYAM2BLC8cWATqRTMATCFrCBATCFZl9zAQJHQRTMGXGXAmCb6QBAYRPSFMAY1BBHMCgFZROGXGXAMCa9MQBAYCFJRPSFMAY1BFHMCgBZCOWAOCgBZqROGXAMCa9MQBAYCGJRPSFMAY1BGHMCgBZCfWAOqROGXAMCa9MQBAYCEJRPSFMAY1BEHMCgBZCdWAOqROGXAMCa9MQBAYCIJRPSFMAYCLJRPAY2BIC8cWAOqROMAOCFrCBAOCFZl9zAQJHQROMGXGXAtCb6QBAPRMSFMAP1BBHMCgFZRbGXGXAMCa9MQBAPCFJRMSFMAP1BFHMCgBZCOWAbCgBZqRbGXAMCa9MQBAPCGJRMSFMAP1BGHMCgBZCfWAbqRbGXAMCa9MQBAPCEJRMSFMAP1BEHMCgBZCdWAbqRbGXAMCa9MQBAPCIJRMSFMAPCLJRMAP2BIC8cWAbqRbMAbCFrCBAbCFZl9zAQJHQRbMGXGXAGCG9HQBABAT87FBABCIJAb87FBABCGJAO87FBSFMAEATjGBAECNJAbjGBAECIJAOjGBMALCoBJAKCEWJHYAOjGBAYATjGIALAICGWJATjGBALCoBJAKCFJCbZCEWJHYAbjGBAYAOjGIALAICFJHICbZCGWJAOjGBALCoBJAKCGJCbZCEWJHOATjGBAOAbjGIALAIAm9FAmCb6qJHICbZCGWJAbjGBAIAt9FAtCb6qJRIAKCEJRKMANCFJRNABCKJRBAECSJREAKCbZRKAICbZRIAfCEJHfAF9JQBMMCBC99AMAc6yRKMALCoFJ8kUUUUBAKM/tIFGa8jUUUUBCTlRLC9+RKGXAFCLJAI9LQBCaRKAE2BBC/+FZC/QF9HQBALhB83ENAECFJRKAEAIJC98JREGXAF9FQBGXAGCG6QBEXGXAKAE9JQBC9+bMAK1BBHGCgFZRIGXGXAGCa9MQBAKCFJRKSFMAK1BFHGCgBZCOWAICgBZqRIGXAGCa9MQBAKCGJRKSFMAK1BGHGCgBZCfWAIqRIGXAGCa9MQBAKCEJRKSFMAK1BEHGCgBZCdWAIqRIGXAGCa9MQBAKCIJRKSFMAK2BIC8cWAIqRIAKCLJRKMALCNJAICFZCGWqHGAICGrCBAICFrCFZl9zAG8oGBJHIjGBABAIjGBABCIJRBAFCaJHFQBSGMMEXGXAKAE9JQBC9+bMAK1BBHGCgFZRIGXGXAGCa9MQBAKCFJRKSFMAK1BFHGCgBZCOWAICgBZqRIGXAGCa9MQBAKCGJRKSFMAK1BGHGCgBZCfWAIqRIGXAGCa9MQBAKCEJRKSFMAK1BEHGCgBZCdWAIqRIGXAGCa9MQBAKCIJRKSFMAK2BIC8cWAIqRIAKCLJRKMABAICGrCBAICFrCFZl9zALCNJAICFZCGWqHI8oGBJHG87FBAIAGjGBABCGJRBAFCaJHFQBMMCBC99AKAE6yRKMAKM+lLKFaF99GaG99FaG99GXGXAGCI9HQBAF9FQFEXGXGX9DBBB8/9DBBB+/ABCGJHG1BB+yAB1BBHE+yHI+L+TABCFJHL1BBHK+yHO+L+THN9DBBBB9gHVyAN9DBB/+hANAN+U9DBBBBANAVyHcAc+MHMAECa3yAI+SHIAI+UAcAMAKCa3yAO+SHcAc+U+S+S+R+VHO+U+SHN+L9DBBB9P9d9FQBAN+oRESFMCUUUU94REMAGAE86BBGXGX9DBBB8/9DBBB+/Ac9DBBBB9gyAcAO+U+SHN+L9DBBB9P9d9FQBAN+oRGSFMCUUUU94RGMALAG86BBGXGX9DBBB8/9DBBB+/AI9DBBBB9gyAIAO+U+SHN+L9DBBB9P9d9FQBAN+oRGSFMCUUUU94RGMABAG86BBABCIJRBAFCaJHFQBSGMMAF9FQBEXGXGX9DBBB8/9DBBB+/ABCIJHG8uFB+yAB8uFBHE+yHI+L+TABCGJHL8uFBHK+yHO+L+THN9DBBBB9gHVyAN9DB/+g6ANAN+U9DBBBBANAVyHcAc+MHMAECa3yAI+SHIAI+UAcAMAKCa3yAO+SHcAc+U+S+S+R+VHO+U+SHN+L9DBBB9P9d9FQBAN+oRESFMCUUUU94REMAGAE87FBGXGX9DBBB8/9DBBB+/Ac9DBBBB9gyAcAO+U+SHN+L9DBBB9P9d9FQBAN+oRGSFMCUUUU94RGMALAG87FBGXGX9DBBB8/9DBBB+/AI9DBBBB9gyAIAO+U+SHN+L9DBBB9P9d9FQBAN+oRGSFMCUUUU94RGMABAG87FBABCNJRBAFCaJHFQBMMM/SEIEaE99EaF99GXAF9FQBCBREABRIEXGXGX9D/zI818/AICKJ8uFBHLCEq+y+VHKAI8uFB+y+UHO9DB/+g6+U9DBBB8/9DBBB+/AO9DBBBB9gy+SHN+L9DBBB9P9d9FQBAN+oRVSFMCUUUU94RVMAICIJ8uFBRcAICGJ8uFBRMABALCFJCEZAEqCFWJAV87FBGXGXAKAM+y+UHN9DB/+g6+U9DBBB8/9DBBB+/AN9DBBBB9gy+SHS+L9DBBB9P9d9FQBAS+oRMSFMCUUUU94RMMABALCGJCEZAEqCFWJAM87FBGXGXAKAc+y+UHK9DB/+g6+U9DBBB8/9DBBB+/AK9DBBBB9gy+SHS+L9DBBB9P9d9FQBAS+oRcSFMCUUUU94RcMABALCaJCEZAEqCFWJAc87FBGXGX9DBBU8/AOAO+U+TANAN+U+TAKAK+U+THO9DBBBBAO9DBBBB9gy+R9DB/+g6+U9DBBB8/+SHO+L9DBBB9P9d9FQBAO+oRcSFMCUUUU94RcMABALCEZAEqCFWJAc87FBAICNJRIAECIJREAFCaJHFQBMMM9JBGXAGCGrAF9sHF9FQBEXABAB8oGBHGCNWCN91+yAGCi91CnWCUUU/8EJ+++U84GBABCIJRBAFCaJHFQBMMM9TFEaCBCB8oGUkUUBHFABCEJC98ZJHBjGUkUUBGXGXAB8/BCTWHGuQBCaREABAGlCggEJCTrXBCa6QFMAFREMAEM/lFFFaGXGXAFABqCEZ9FQBABRESFMGXGXAGCT9PQBABRESFMABREEXAEAF8oGBjGBAECIJAFCIJ8oGBjGBAECNJAFCNJ8oGBjGBAECSJAFCSJ8oGBjGBAECTJREAFCTJRFAGC9wJHGCb9LQBMMAGCI9JQBEXAEAF8oGBjGBAFCIJRFAECIJREAGC98JHGCE9LQBMMGXAG9FQBEXAEAF2BB86BBAECFJREAFCFJRFAGCaJHGQBMMABMoFFGaGXGXABCEZ9FQBABRESFMAFCgFZC+BwsN9sRIGXGXAGCT9PQBABRESFMABREEXAEAIjGBAECSJAIjGBAECNJAIjGBAECIJAIjGBAECTJREAGC9wJHGCb9LQBMMAGCI9JQBEXAEAIjGBAECIJREAGC98JHGCE9LQBMMGXAG9FQBEXAEAF86BBAECFJREAGCaJHGQBMMABMMMFBCUNMIT9kBB";
  var wasm_simd = "";
  var detector = new Uint8Array([
    0,
    97,
    115,
    109,
    1,
    0,
    0,
    0,
    1,
    4,
    1,
    96,
    0,
    0,
    3,
    3,
    2,
    0,
    0,
    5,
    3,
    1,
    0,
    1,
    12,
    1,
    0,
    10,
    22,
    2,
    12,
    0,
    65,
    0,
    65,
    0,
    65,
    0,
    252,
    10,
    0,
    0,
    11,
    7,
    0,
    65,
    0,
    253,
    15,
    26,
    11
  ]);
  var wasmpack = new Uint8Array([
    32,
    0,
    65,
    253,
    3,
    1,
    2,
    34,
    4,
    106,
    6,
    5,
    11,
    8,
    7,
    20,
    13,
    33,
    12,
    16,
    128,
    9,
    116,
    64,
    19,
    113,
    127,
    15,
    10,
    21,
    22,
    14,
    255,
    66,
    24,
    54,
    136,
    107,
    18,
    23,
    192,
    26,
    114,
    118,
    132,
    17,
    77,
    101,
    130,
    144,
    27,
    87,
    131,
    44,
    45,
    74,
    156,
    154,
    70,
    167
  ]);
  var FILTERS = {
    // legacy index-based enums for glTF
    0: "",
    1: "meshopt_decodeFilterOct",
    2: "meshopt_decodeFilterQuat",
    3: "meshopt_decodeFilterExp",
    // string-based enums for glTF
    NONE: "",
    OCTAHEDRAL: "meshopt_decodeFilterOct",
    QUATERNION: "meshopt_decodeFilterQuat",
    EXPONENTIAL: "meshopt_decodeFilterExp"
  };
  var DECODERS = {
    // legacy index-based enums for glTF
    0: "meshopt_decodeVertexBuffer",
    1: "meshopt_decodeIndexBuffer",
    2: "meshopt_decodeIndexSequence",
    // string-based enums for glTF
    ATTRIBUTES: "meshopt_decodeVertexBuffer",
    TRIANGLES: "meshopt_decodeIndexBuffer",
    INDICES: "meshopt_decodeIndexSequence"
  };
  async function meshoptDecodeGltfBuffer(target2, count3, size, source4, mode, filter = "NONE") {
    const instance = await loadWasmInstance();
    decode4(instance, instance.exports[DECODERS[mode]], target2, count3, size, source4, instance.exports[FILTERS[filter || "NONE"]]);
  }
  var wasmPromise;
  async function loadWasmInstance() {
    if (!wasmPromise) {
      wasmPromise = loadWasmModule();
    }
    return wasmPromise;
  }
  async function loadWasmModule() {
    let wasm2 = wasm_base;
    if (WebAssembly.validate(detector)) {
      wasm2 = wasm_simd;
      console.log("Warning: meshopt_decoder is using experimental SIMD support");
    }
    const result = await WebAssembly.instantiate(unpack(wasm2), {});
    await result.instance.exports.__wasm_call_ctors();
    return result.instance;
  }
  function unpack(data) {
    const result = new Uint8Array(data.length);
    for (let i7 = 0; i7 < data.length; ++i7) {
      const ch = data.charCodeAt(i7);
      result[i7] = ch > 96 ? ch - 71 : ch > 64 ? ch - 65 : ch > 47 ? ch + 4 : ch > 46 ? 63 : 62;
    }
    let write = 0;
    for (let i7 = 0; i7 < data.length; ++i7) {
      result[write++] = result[i7] < 60 ? wasmpack[result[i7]] : (result[i7] - 60) * 64 + result[++i7];
    }
    return result.buffer.slice(0, write);
  }
  function decode4(instance, fun, target2, count3, size, source4, filter) {
    const sbrk = instance.exports.sbrk;
    const count4 = count3 + 3 & ~3;
    const tp = sbrk(count4 * size);
    const sp = sbrk(source4.length);
    const heap = new Uint8Array(instance.exports.memory.buffer);
    heap.set(source4, sp);
    const res = fun(tp, count3, size, sp, source4.length);
    if (res === 0 && filter) {
      filter(tp, count4, size);
    }
    target2.set(heap.subarray(tp, tp + count3 * size));
    sbrk(tp - sbrk(0));
    if (res !== 0) {
      throw new Error(`Malformed buffer data: ${res}`);
    }
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/extensions/EXT_meshopt_compression.js
  var EXT_MESHOPT_COMPRESSION = "EXT_meshopt_compression";
  var name5 = EXT_MESHOPT_COMPRESSION;
  async function decode5(gltfData, options) {
    const scenegraph = new GLTFScenegraph(gltfData);
    if (!options?.gltf?.decompressMeshes || !options.gltf?.loadBuffers) {
      return;
    }
    const promises = [];
    for (const bufferViewIndex of gltfData.json.bufferViews || []) {
      promises.push(decodeMeshoptBufferView(scenegraph, bufferViewIndex));
    }
    await Promise.all(promises);
    scenegraph.removeExtension(EXT_MESHOPT_COMPRESSION);
  }
  async function decodeMeshoptBufferView(scenegraph, bufferView) {
    const meshoptExtension = scenegraph.getObjectExtension(bufferView, EXT_MESHOPT_COMPRESSION);
    if (meshoptExtension) {
      const { byteOffset = 0, byteLength = 0, byteStride, count: count3, mode, filter = "NONE", buffer: bufferIndex } = meshoptExtension;
      const buffer = scenegraph.gltf.buffers[bufferIndex];
      const source4 = new Uint8Array(buffer.arrayBuffer, buffer.byteOffset + byteOffset, byteLength);
      const result = new Uint8Array(scenegraph.gltf.buffers[bufferView.buffer].arrayBuffer, bufferView.byteOffset, bufferView.byteLength);
      await meshoptDecodeGltfBuffer(result, count3, byteStride, source4, mode, filter);
      scenegraph.removeObjectExtension(bufferView, EXT_MESHOPT_COMPRESSION);
    }
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/extensions/EXT_texture_webp.js
  var EXT_texture_webp_exports = {};
  __export(EXT_texture_webp_exports, {
    name: () => name6,
    preprocess: () => preprocess2
  });
  var EXT_TEXTURE_WEBP = "EXT_texture_webp";
  var name6 = EXT_TEXTURE_WEBP;
  function preprocess2(gltfData, options) {
    const scenegraph = new GLTFScenegraph(gltfData);
    if (!isImageFormatSupported("image/webp")) {
      if (scenegraph.getRequiredExtensions().includes(EXT_TEXTURE_WEBP)) {
        throw new Error(`gltf: Required extension ${EXT_TEXTURE_WEBP} not supported by browser`);
      }
      return;
    }
    const { json } = scenegraph;
    for (const texture of json.textures || []) {
      const extension = scenegraph.getObjectExtension(texture, EXT_TEXTURE_WEBP);
      if (extension) {
        texture.source = extension.source;
      }
      scenegraph.removeObjectExtension(texture, EXT_TEXTURE_WEBP);
    }
    scenegraph.removeExtension(EXT_TEXTURE_WEBP);
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/extensions/KHR_texture_basisu.js
  var KHR_texture_basisu_exports = {};
  __export(KHR_texture_basisu_exports, {
    name: () => name7,
    preprocess: () => preprocess3
  });
  var KHR_TEXTURE_BASISU = "KHR_texture_basisu";
  var name7 = KHR_TEXTURE_BASISU;
  function preprocess3(gltfData, options) {
    const scene = new GLTFScenegraph(gltfData);
    const { json } = scene;
    for (const texture of json.textures || []) {
      const extension = scene.getObjectExtension(texture, KHR_TEXTURE_BASISU);
      if (extension) {
        texture.source = extension.source;
        scene.removeObjectExtension(texture, KHR_TEXTURE_BASISU);
      }
    }
    scene.removeExtension(KHR_TEXTURE_BASISU);
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/extensions/KHR_draco_mesh_compression.js
  var KHR_draco_mesh_compression_exports = {};
  __export(KHR_draco_mesh_compression_exports, {
    decode: () => decode6,
    encode: () => encode,
    name: () => name8,
    preprocess: () => preprocess4
  });

  // ../../node_modules/@loaders.gl/draco/dist/lib/utils/version.js
  var VERSION10 = true ? "4.2.1" : "latest";

  // ../../node_modules/@loaders.gl/draco/dist/draco-loader.js
  var DracoLoader = {
    dataType: null,
    batchType: null,
    name: "Draco",
    id: "draco",
    module: "draco",
    // shapes: ['mesh'],
    version: VERSION10,
    worker: true,
    extensions: ["drc"],
    mimeTypes: ["application/octet-stream"],
    binary: true,
    tests: ["DRACO"],
    options: {
      draco: {
        decoderType: typeof WebAssembly === "object" ? "wasm" : "js",
        // 'js' for IE11
        libraryPath: "libs/",
        extraAttributes: {},
        attributeNameEntry: void 0
      }
    }
  };

  // ../../node_modules/@loaders.gl/draco/dist/lib/utils/get-draco-schema.js
  function getDracoSchema(attributes, loaderData, indices) {
    const metadata = makeMetadata(loaderData.metadata);
    const fields = [];
    const namedLoaderDataAttributes = transformAttributesLoaderData(loaderData.attributes);
    for (const attributeName in attributes) {
      const attribute = attributes[attributeName];
      const field = getArrowFieldFromAttribute(attributeName, attribute, namedLoaderDataAttributes[attributeName]);
      fields.push(field);
    }
    if (indices) {
      const indicesField = getArrowFieldFromAttribute("indices", indices);
      fields.push(indicesField);
    }
    return { fields, metadata };
  }
  function transformAttributesLoaderData(loaderData) {
    const result = {};
    for (const key in loaderData) {
      const dracoAttribute = loaderData[key];
      result[dracoAttribute.name || "undefined"] = dracoAttribute;
    }
    return result;
  }
  function getArrowFieldFromAttribute(attributeName, attribute, loaderData) {
    const metadataMap = loaderData ? makeMetadata(loaderData.metadata) : void 0;
    const field = deduceMeshField(attributeName, attribute, metadataMap);
    return field;
  }
  function makeMetadata(metadata) {
    Object.entries(metadata);
    const serializedMetadata = {};
    for (const key in metadata) {
      serializedMetadata[`${key}.string`] = JSON.stringify(metadata[key]);
    }
    return serializedMetadata;
  }

  // ../../node_modules/@loaders.gl/draco/dist/lib/draco-parser.js
  var DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP = {
    POSITION: "POSITION",
    NORMAL: "NORMAL",
    COLOR: "COLOR_0",
    TEX_COORD: "TEXCOORD_0"
  };
  var DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP = {
    1: Int8Array,
    2: Uint8Array,
    3: Int16Array,
    4: Uint16Array,
    5: Int32Array,
    6: Uint32Array,
    // 7: BigInt64Array,
    // 8: BigUint64Array,
    9: Float32Array
    // 10: Float64Array
    // 11: BOOL - What array type do we use for this?
  };
  var INDEX_ITEM_SIZE = 4;
  var DracoParser = class {
    draco;
    decoder;
    metadataQuerier;
    // draco - the draco decoder, either import `draco3d` or load dynamically
    constructor(draco) {
      this.draco = draco;
      this.decoder = new this.draco.Decoder();
      this.metadataQuerier = new this.draco.MetadataQuerier();
    }
    /**
     * Destroy draco resources
     */
    destroy() {
      this.draco.destroy(this.decoder);
      this.draco.destroy(this.metadataQuerier);
    }
    /**
     * NOTE: caller must call `destroyGeometry` on the return value after using it
     * @param arrayBuffer
     * @param options
     */
    parseSync(arrayBuffer2, options = {}) {
      const buffer = new this.draco.DecoderBuffer();
      buffer.Init(new Int8Array(arrayBuffer2), arrayBuffer2.byteLength);
      this._disableAttributeTransforms(options);
      const geometry_type = this.decoder.GetEncodedGeometryType(buffer);
      const dracoGeometry = geometry_type === this.draco.TRIANGULAR_MESH ? new this.draco.Mesh() : new this.draco.PointCloud();
      try {
        let dracoStatus;
        switch (geometry_type) {
          case this.draco.TRIANGULAR_MESH:
            dracoStatus = this.decoder.DecodeBufferToMesh(buffer, dracoGeometry);
            break;
          case this.draco.POINT_CLOUD:
            dracoStatus = this.decoder.DecodeBufferToPointCloud(buffer, dracoGeometry);
            break;
          default:
            throw new Error("DRACO: Unknown geometry type.");
        }
        if (!dracoStatus.ok() || !dracoGeometry.ptr) {
          const message2 = `DRACO decompression failed: ${dracoStatus.error_msg()}`;
          throw new Error(message2);
        }
        const loaderData = this._getDracoLoaderData(dracoGeometry, geometry_type, options);
        const geometry = this._getMeshData(dracoGeometry, loaderData, options);
        const boundingBox = getMeshBoundingBox(geometry.attributes);
        const schema = getDracoSchema(geometry.attributes, loaderData, geometry.indices);
        const data = {
          loader: "draco",
          loaderData,
          header: {
            vertexCount: dracoGeometry.num_points(),
            boundingBox
          },
          ...geometry,
          schema
        };
        return data;
      } finally {
        this.draco.destroy(buffer);
        if (dracoGeometry) {
          this.draco.destroy(dracoGeometry);
        }
      }
    }
    // Draco specific "loader data"
    /**
     * Extract
     * @param dracoGeometry
     * @param geometry_type
     * @param options
     * @returns
     */
    _getDracoLoaderData(dracoGeometry, geometry_type, options) {
      const metadata = this._getTopLevelMetadata(dracoGeometry);
      const attributes = this._getDracoAttributes(dracoGeometry, options);
      return {
        geometry_type,
        num_attributes: dracoGeometry.num_attributes(),
        num_points: dracoGeometry.num_points(),
        num_faces: dracoGeometry instanceof this.draco.Mesh ? dracoGeometry.num_faces() : 0,
        metadata,
        attributes
      };
    }
    /**
     * Extract all draco provided information and metadata for each attribute
     * @param dracoGeometry
     * @param options
     * @returns
     */
    _getDracoAttributes(dracoGeometry, options) {
      const dracoAttributes = {};
      for (let attributeId = 0; attributeId < dracoGeometry.num_attributes(); attributeId++) {
        const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attributeId);
        const metadata = this._getAttributeMetadata(dracoGeometry, attributeId);
        dracoAttributes[dracoAttribute.unique_id()] = {
          unique_id: dracoAttribute.unique_id(),
          attribute_type: dracoAttribute.attribute_type(),
          data_type: dracoAttribute.data_type(),
          num_components: dracoAttribute.num_components(),
          byte_offset: dracoAttribute.byte_offset(),
          byte_stride: dracoAttribute.byte_stride(),
          normalized: dracoAttribute.normalized(),
          attribute_index: attributeId,
          metadata
        };
        const quantization = this._getQuantizationTransform(dracoAttribute, options);
        if (quantization) {
          dracoAttributes[dracoAttribute.unique_id()].quantization_transform = quantization;
        }
        const octahedron = this._getOctahedronTransform(dracoAttribute, options);
        if (octahedron) {
          dracoAttributes[dracoAttribute.unique_id()].octahedron_transform = octahedron;
        }
      }
      return dracoAttributes;
    }
    /**
     * Get standard loaders.gl mesh category data
     * Extracts the geometry from draco
     * @param dracoGeometry
     * @param options
     */
    _getMeshData(dracoGeometry, loaderData, options) {
      const attributes = this._getMeshAttributes(loaderData, dracoGeometry, options);
      const positionAttribute = attributes.POSITION;
      if (!positionAttribute) {
        throw new Error("DRACO: No position attribute found.");
      }
      if (dracoGeometry instanceof this.draco.Mesh) {
        switch (options.topology) {
          case "triangle-strip":
            return {
              topology: "triangle-strip",
              mode: 4,
              // GL.TRIANGLES
              attributes,
              indices: {
                value: this._getTriangleStripIndices(dracoGeometry),
                size: 1
              }
            };
          case "triangle-list":
          default:
            return {
              topology: "triangle-list",
              mode: 5,
              // GL.TRIANGLE_STRIP
              attributes,
              indices: {
                value: this._getTriangleListIndices(dracoGeometry),
                size: 1
              }
            };
        }
      }
      return {
        topology: "point-list",
        mode: 0,
        // GL.POINTS
        attributes
      };
    }
    _getMeshAttributes(loaderData, dracoGeometry, options) {
      const attributes = {};
      for (const loaderAttribute of Object.values(loaderData.attributes)) {
        const attributeName = this._deduceAttributeName(loaderAttribute, options);
        loaderAttribute.name = attributeName;
        const values = this._getAttributeValues(dracoGeometry, loaderAttribute);
        if (values) {
          const { value, size } = values;
          attributes[attributeName] = {
            value,
            size,
            byteOffset: loaderAttribute.byte_offset,
            byteStride: loaderAttribute.byte_stride,
            normalized: loaderAttribute.normalized
          };
        }
      }
      return attributes;
    }
    // MESH INDICES EXTRACTION
    /**
     * For meshes, we need indices to define the faces.
     * @param dracoGeometry
     */
    _getTriangleListIndices(dracoGeometry) {
      const numFaces = dracoGeometry.num_faces();
      const numIndices = numFaces * 3;
      const byteLength = numIndices * INDEX_ITEM_SIZE;
      const ptr = this.draco._malloc(byteLength);
      try {
        this.decoder.GetTrianglesUInt32Array(dracoGeometry, byteLength, ptr);
        return new Uint32Array(this.draco.HEAPF32.buffer, ptr, numIndices).slice();
      } finally {
        this.draco._free(ptr);
      }
    }
    /**
     * For meshes, we need indices to define the faces.
     * @param dracoGeometry
     */
    _getTriangleStripIndices(dracoGeometry) {
      const dracoArray = new this.draco.DracoInt32Array();
      try {
        this.decoder.GetTriangleStripsFromMesh(dracoGeometry, dracoArray);
        return getUint32Array(dracoArray);
      } finally {
        this.draco.destroy(dracoArray);
      }
    }
    /**
     *
     * @param dracoGeometry
     * @param dracoAttribute
     * @param attributeName
     */
    _getAttributeValues(dracoGeometry, attribute) {
      const TypedArrayCtor = DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP[attribute.data_type];
      if (!TypedArrayCtor) {
        console.warn(`DRACO: Unsupported attribute type ${attribute.data_type}`);
        return null;
      }
      const numComponents = attribute.num_components;
      const numPoints = dracoGeometry.num_points();
      const numValues = numPoints * numComponents;
      const byteLength = numValues * TypedArrayCtor.BYTES_PER_ELEMENT;
      const dataType = getDracoDataType(this.draco, TypedArrayCtor);
      let value;
      const ptr = this.draco._malloc(byteLength);
      try {
        const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attribute.attribute_index);
        this.decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, dracoAttribute, dataType, byteLength, ptr);
        value = new TypedArrayCtor(this.draco.HEAPF32.buffer, ptr, numValues).slice();
      } finally {
        this.draco._free(ptr);
      }
      return { value, size: numComponents };
    }
    // Attribute names
    /**
     * DRACO does not store attribute names - We need to deduce an attribute name
     * for each attribute
    _getAttributeNames(
      dracoGeometry: Mesh | PointCloud,
      options: DracoParseOptions
    ): {[unique_id: number]: string} {
      const attributeNames: {[unique_id: number]: string} = {};
      for (let attributeId = 0; attributeId < dracoGeometry.num_attributes(); attributeId++) {
        const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attributeId);
        const attributeName = this._deduceAttributeName(dracoAttribute, options);
        attributeNames[attributeName] = attributeName;
      }
      return attributeNames;
    }
     */
    /**
     * Deduce an attribute name.
     * @note DRACO does not save attribute names, just general type (POSITION, COLOR)
     * to help optimize compression. We generate GLTF compatible names for the Draco-recognized
     * types
     * @param attributeData
     */
    _deduceAttributeName(attribute, options) {
      const uniqueId2 = attribute.unique_id;
      for (const [attributeName, attributeUniqueId] of Object.entries(options.extraAttributes || {})) {
        if (attributeUniqueId === uniqueId2) {
          return attributeName;
        }
      }
      const thisAttributeType = attribute.attribute_type;
      for (const dracoAttributeConstant in DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP) {
        const attributeType = this.draco[dracoAttributeConstant];
        if (attributeType === thisAttributeType) {
          return DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP[dracoAttributeConstant];
        }
      }
      const entryName = options.attributeNameEntry || "name";
      if (attribute.metadata[entryName]) {
        return attribute.metadata[entryName].string;
      }
      return `CUSTOM_ATTRIBUTE_${uniqueId2}`;
    }
    // METADATA EXTRACTION
    /** Get top level metadata */
    _getTopLevelMetadata(dracoGeometry) {
      const dracoMetadata = this.decoder.GetMetadata(dracoGeometry);
      return this._getDracoMetadata(dracoMetadata);
    }
    /** Get per attribute metadata */
    _getAttributeMetadata(dracoGeometry, attributeId) {
      const dracoMetadata = this.decoder.GetAttributeMetadata(dracoGeometry, attributeId);
      return this._getDracoMetadata(dracoMetadata);
    }
    /**
     * Extract metadata field values
     * @param dracoMetadata
     * @returns
     */
    _getDracoMetadata(dracoMetadata) {
      if (!dracoMetadata || !dracoMetadata.ptr) {
        return {};
      }
      const result = {};
      const numEntries = this.metadataQuerier.NumEntries(dracoMetadata);
      for (let entryIndex = 0; entryIndex < numEntries; entryIndex++) {
        const entryName = this.metadataQuerier.GetEntryName(dracoMetadata, entryIndex);
        result[entryName] = this._getDracoMetadataField(dracoMetadata, entryName);
      }
      return result;
    }
    /**
     * Extracts possible values for one metadata entry by name
     * @param dracoMetadata
     * @param entryName
     */
    _getDracoMetadataField(dracoMetadata, entryName) {
      const dracoArray = new this.draco.DracoInt32Array();
      try {
        this.metadataQuerier.GetIntEntryArray(dracoMetadata, entryName, dracoArray);
        const intArray = getInt32Array(dracoArray);
        return {
          int: this.metadataQuerier.GetIntEntry(dracoMetadata, entryName),
          string: this.metadataQuerier.GetStringEntry(dracoMetadata, entryName),
          double: this.metadataQuerier.GetDoubleEntry(dracoMetadata, entryName),
          intArray
        };
      } finally {
        this.draco.destroy(dracoArray);
      }
    }
    // QUANTIZED ATTRIBUTE SUPPORT (NO DECOMPRESSION)
    /** Skip transforms for specific attribute types */
    _disableAttributeTransforms(options) {
      const { quantizedAttributes = [], octahedronAttributes = [] } = options;
      const skipAttributes = [...quantizedAttributes, ...octahedronAttributes];
      for (const dracoAttributeName of skipAttributes) {
        this.decoder.SkipAttributeTransform(this.draco[dracoAttributeName]);
      }
    }
    /**
     * Extract (and apply?) Position Transform
     * @todo not used
     */
    _getQuantizationTransform(dracoAttribute, options) {
      const { quantizedAttributes = [] } = options;
      const attribute_type = dracoAttribute.attribute_type();
      const skip = quantizedAttributes.map((type) => this.decoder[type]).includes(attribute_type);
      if (skip) {
        const transform2 = new this.draco.AttributeQuantizationTransform();
        try {
          if (transform2.InitFromAttribute(dracoAttribute)) {
            return {
              quantization_bits: transform2.quantization_bits(),
              range: transform2.range(),
              min_values: new Float32Array([1, 2, 3]).map((i7) => transform2.min_value(i7))
            };
          }
        } finally {
          this.draco.destroy(transform2);
        }
      }
      return null;
    }
    _getOctahedronTransform(dracoAttribute, options) {
      const { octahedronAttributes = [] } = options;
      const attribute_type = dracoAttribute.attribute_type();
      const octahedron = octahedronAttributes.map((type) => this.decoder[type]).includes(attribute_type);
      if (octahedron) {
        const transform2 = new this.draco.AttributeQuantizationTransform();
        try {
          if (transform2.InitFromAttribute(dracoAttribute)) {
            return {
              quantization_bits: transform2.quantization_bits()
            };
          }
        } finally {
          this.draco.destroy(transform2);
        }
      }
      return null;
    }
  };
  function getDracoDataType(draco, attributeType) {
    switch (attributeType) {
      case Float32Array:
        return draco.DT_FLOAT32;
      case Int8Array:
        return draco.DT_INT8;
      case Int16Array:
        return draco.DT_INT16;
      case Int32Array:
        return draco.DT_INT32;
      case Uint8Array:
        return draco.DT_UINT8;
      case Uint16Array:
        return draco.DT_UINT16;
      case Uint32Array:
        return draco.DT_UINT32;
      default:
        return draco.DT_INVALID;
    }
  }
  function getInt32Array(dracoArray) {
    const numValues = dracoArray.size();
    const intArray = new Int32Array(numValues);
    for (let i7 = 0; i7 < numValues; i7++) {
      intArray[i7] = dracoArray.GetValue(i7);
    }
    return intArray;
  }
  function getUint32Array(dracoArray) {
    const numValues = dracoArray.size();
    const intArray = new Int32Array(numValues);
    for (let i7 = 0; i7 < numValues; i7++) {
      intArray[i7] = dracoArray.GetValue(i7);
    }
    return intArray;
  }

  // ../../node_modules/@loaders.gl/draco/dist/lib/draco-module-loader.js
  var DRACO_DECODER_VERSION = "1.5.6";
  var DRACO_ENCODER_VERSION = "1.4.1";
  var STATIC_DECODER_URL = `https://www.gstatic.com/draco/versioned/decoders/${DRACO_DECODER_VERSION}`;
  var DRACO_EXTERNAL_LIBRARIES = {
    /** The primary Draco3D encoder, javascript wrapper part */
    DECODER: "draco_wasm_wrapper.js",
    /** The primary draco decoder, compiled web assembly part */
    DECODER_WASM: "draco_decoder.wasm",
    /** Fallback decoder for non-webassebly environments. Very big bundle, lower performance */
    FALLBACK_DECODER: "draco_decoder.js",
    /** Draco encoder */
    ENCODER: "draco_encoder.js"
  };
  var DRACO_EXTERNAL_LIBRARY_URLS = {
    [DRACO_EXTERNAL_LIBRARIES.DECODER]: `${STATIC_DECODER_URL}/${DRACO_EXTERNAL_LIBRARIES.DECODER}`,
    [DRACO_EXTERNAL_LIBRARIES.DECODER_WASM]: `${STATIC_DECODER_URL}/${DRACO_EXTERNAL_LIBRARIES.DECODER_WASM}`,
    [DRACO_EXTERNAL_LIBRARIES.FALLBACK_DECODER]: `${STATIC_DECODER_URL}/${DRACO_EXTERNAL_LIBRARIES.FALLBACK_DECODER}`,
    [DRACO_EXTERNAL_LIBRARIES.ENCODER]: `https://raw.githubusercontent.com/google/draco/${DRACO_ENCODER_VERSION}/javascript/${DRACO_EXTERNAL_LIBRARIES.ENCODER}`
  };
  var loadDecoderPromise;
  async function loadDracoDecoderModule(options) {
    const modules = options.modules || {};
    if (modules.draco3d) {
      loadDecoderPromise ||= modules.draco3d.createDecoderModule({}).then((draco) => {
        return { draco };
      });
    } else {
      loadDecoderPromise ||= loadDracoDecoder(options);
    }
    return await loadDecoderPromise;
  }
  async function loadDracoDecoder(options) {
    let DracoDecoderModule;
    let wasmBinary;
    switch (options.draco && options.draco.decoderType) {
      case "js":
        DracoDecoderModule = await loadLibrary(DRACO_EXTERNAL_LIBRARY_URLS[DRACO_EXTERNAL_LIBRARIES.FALLBACK_DECODER], "draco", options, DRACO_EXTERNAL_LIBRARIES.FALLBACK_DECODER);
        break;
      case "wasm":
      default:
        [DracoDecoderModule, wasmBinary] = await Promise.all([
          await loadLibrary(DRACO_EXTERNAL_LIBRARY_URLS[DRACO_EXTERNAL_LIBRARIES.DECODER], "draco", options, DRACO_EXTERNAL_LIBRARIES.DECODER),
          await loadLibrary(DRACO_EXTERNAL_LIBRARY_URLS[DRACO_EXTERNAL_LIBRARIES.DECODER_WASM], "draco", options, DRACO_EXTERNAL_LIBRARIES.DECODER_WASM)
        ]);
    }
    DracoDecoderModule = DracoDecoderModule || globalThis.DracoDecoderModule;
    return await initializeDracoDecoder(DracoDecoderModule, wasmBinary);
  }
  function initializeDracoDecoder(DracoDecoderModule, wasmBinary) {
    const options = {};
    if (wasmBinary) {
      options.wasmBinary = wasmBinary;
    }
    return new Promise((resolve2) => {
      DracoDecoderModule({
        ...options,
        onModuleLoaded: (draco) => resolve2({ draco })
        // Module is Promise-like. Wrap in object to avoid loop.
      });
    });
  }

  // ../../node_modules/@loaders.gl/draco/dist/index.js
  var DracoLoader2 = {
    ...DracoLoader,
    parse: parse2
  };
  async function parse2(arrayBuffer2, options) {
    const { draco } = await loadDracoDecoderModule(options);
    const dracoParser = new DracoParser(draco);
    try {
      return dracoParser.parseSync(arrayBuffer2, options?.draco);
    } finally {
      dracoParser.destroy();
    }
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/gltf-utils/gltf-attribute-utils.js
  function getGLTFAccessors(attributes) {
    const accessors = {};
    for (const name13 in attributes) {
      const attribute = attributes[name13];
      if (name13 !== "indices") {
        const glTFAccessor = getGLTFAccessor(attribute);
        accessors[name13] = glTFAccessor;
      }
    }
    return accessors;
  }
  function getGLTFAccessor(attribute) {
    const { buffer, size, count: count3 } = getAccessorData(attribute);
    const glTFAccessor = {
      // glTF Accessor values
      // TODO: Instead of a bufferView index we could have an actual buffer (typed array)
      // bufferView: null,
      // TODO: Deprecate `value` in favor of bufferView?
      // @ts-ignore
      value: buffer,
      size,
      // Decoded `type` (e.g. SCALAR)
      byteOffset: 0,
      count: count3,
      type: getAccessorTypeFromSize(size),
      componentType: getComponentTypeFromArray(buffer)
    };
    return glTFAccessor;
  }
  function getAccessorData(attribute) {
    let buffer = attribute;
    let size = 1;
    let count3 = 0;
    if (attribute && attribute.value) {
      buffer = attribute.value;
      size = attribute.size || 1;
    }
    if (buffer) {
      if (!ArrayBuffer.isView(buffer)) {
        buffer = toTypedArray(buffer, Float32Array);
      }
      count3 = buffer.length / size;
    }
    return { buffer, size, count: count3 };
  }
  function toTypedArray(array, ArrayType, convertTypedArrays = false) {
    if (!array) {
      return null;
    }
    if (Array.isArray(array)) {
      return new ArrayType(array);
    }
    if (convertTypedArrays && !(array instanceof ArrayType)) {
      return new ArrayType(array);
    }
    return array;
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/extensions/KHR_draco_mesh_compression.js
  var KHR_DRACO_MESH_COMPRESSION = "KHR_draco_mesh_compression";
  var name8 = KHR_DRACO_MESH_COMPRESSION;
  function preprocess4(gltfData, options, context) {
    const scenegraph = new GLTFScenegraph(gltfData);
    for (const primitive of makeMeshPrimitiveIterator(scenegraph)) {
      if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {
      }
    }
  }
  async function decode6(gltfData, options, context) {
    if (!options?.gltf?.decompressMeshes) {
      return;
    }
    const scenegraph = new GLTFScenegraph(gltfData);
    const promises = [];
    for (const primitive of makeMeshPrimitiveIterator(scenegraph)) {
      if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {
        promises.push(decompressPrimitive(scenegraph, primitive, options, context));
      }
    }
    await Promise.all(promises);
    scenegraph.removeExtension(KHR_DRACO_MESH_COMPRESSION);
  }
  function encode(gltfData, options = {}) {
    const scenegraph = new GLTFScenegraph(gltfData);
    for (const mesh of scenegraph.json.meshes || []) {
      compressMesh(mesh, options);
      scenegraph.addRequiredExtension(KHR_DRACO_MESH_COMPRESSION);
    }
  }
  async function decompressPrimitive(scenegraph, primitive, options, context) {
    const dracoExtension = scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION);
    if (!dracoExtension) {
      return;
    }
    const buffer = scenegraph.getTypedArrayForBufferView(dracoExtension.bufferView);
    const bufferCopy = sliceArrayBuffer(buffer.buffer, buffer.byteOffset);
    const dracoOptions = { ...options };
    delete dracoOptions["3d-tiles"];
    const decodedData = await parseFromContext(bufferCopy, DracoLoader2, dracoOptions, context);
    const decodedAttributes = getGLTFAccessors(decodedData.attributes);
    for (const [attributeName, decodedAttribute] of Object.entries(decodedAttributes)) {
      if (attributeName in primitive.attributes) {
        const accessorIndex = primitive.attributes[attributeName];
        const accessor = scenegraph.getAccessor(accessorIndex);
        if (accessor?.min && accessor?.max) {
          decodedAttribute.min = accessor.min;
          decodedAttribute.max = accessor.max;
        }
      }
    }
    primitive.attributes = decodedAttributes;
    if (decodedData.indices) {
      primitive.indices = getGLTFAccessor(decodedData.indices);
    }
    scenegraph.removeObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION);
    checkPrimitive(primitive);
  }
  function compressMesh(attributes, indices, mode = 4, options, context) {
    if (!options.DracoWriter) {
      throw new Error("options.gltf.DracoWriter not provided");
    }
    const compressedData = options.DracoWriter.encodeSync({ attributes });
    const decodedData = context?.parseSync?.({ attributes });
    const fauxAccessors = options._addFauxAttributes(decodedData.attributes);
    const bufferViewIndex = options.addBufferView(compressedData);
    const glTFMesh = {
      primitives: [
        {
          attributes: fauxAccessors,
          // TODO - verify with spec
          mode,
          // GL.POINTS
          extensions: {
            [KHR_DRACO_MESH_COMPRESSION]: {
              bufferView: bufferViewIndex,
              attributes: fauxAccessors
              // TODO - verify with spec
            }
          }
        }
      ]
    };
    return glTFMesh;
  }
  function checkPrimitive(primitive) {
    if (!primitive.attributes && Object.keys(primitive.attributes).length > 0) {
      throw new Error("glTF: Empty primitive detected: Draco decompression failure?");
    }
  }
  function* makeMeshPrimitiveIterator(scenegraph) {
    for (const mesh of scenegraph.json.meshes || []) {
      for (const primitive of mesh.primitives) {
        yield primitive;
      }
    }
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/extensions/KHR_texture_transform.js
  var KHR_texture_transform_exports = {};
  __export(KHR_texture_transform_exports, {
    decode: () => decode7,
    name: () => name9
  });

  // ../../node_modules/@loaders.gl/gltf/node_modules/@math.gl/core/dist/lib/common.js
  var RADIANS_TO_DEGREES4 = 1 / Math.PI * 180;
  var DEGREES_TO_RADIANS8 = 1 / 180 * Math.PI;
  var DEFAULT_CONFIG2 = {
    EPSILON: 1e-12,
    debug: false,
    precision: 4,
    printTypes: false,
    printDegrees: false,
    printRowMajor: true,
    _cartographicRadians: false
  };
  globalThis.mathgl = globalThis.mathgl || { config: { ...DEFAULT_CONFIG2 } };
  var config2 = globalThis.mathgl.config;
  function formatValue2(value, { precision = config2.precision } = {}) {
    value = round7(value);
    return `${parseFloat(value.toPrecision(precision))}`;
  }
  function isArray5(value) {
    return Array.isArray(value) || ArrayBuffer.isView(value) && !(value instanceof DataView);
  }
  function equals7(a6, b4, epsilon) {
    const oldEpsilon = config2.EPSILON;
    if (epsilon) {
      config2.EPSILON = epsilon;
    }
    try {
      if (a6 === b4) {
        return true;
      }
      if (isArray5(a6) && isArray5(b4)) {
        if (a6.length !== b4.length) {
          return false;
        }
        for (let i7 = 0; i7 < a6.length; ++i7) {
          if (!equals7(a6[i7], b4[i7])) {
            return false;
          }
        }
        return true;
      }
      if (a6 && a6.equals) {
        return a6.equals(b4);
      }
      if (b4 && b4.equals) {
        return b4.equals(a6);
      }
      if (typeof a6 === "number" && typeof b4 === "number") {
        return Math.abs(a6 - b4) <= config2.EPSILON * Math.max(1, Math.abs(a6), Math.abs(b4));
      }
      return false;
    } finally {
      config2.EPSILON = oldEpsilon;
    }
  }
  function round7(value) {
    return Math.round(value / config2.EPSILON) * config2.EPSILON;
  }

  // ../../node_modules/@loaders.gl/gltf/node_modules/@math.gl/core/dist/classes/base/math-array.js
  var MathArray2 = class extends Array {
    // Common methods
    /**
     * Clone the current object
     * @returns a new copy of this object
     */
    clone() {
      return new this.constructor().copy(this);
    }
    fromArray(array, offset = 0) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = array[i7 + offset];
      }
      return this.check();
    }
    toArray(targetArray = [], offset = 0) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        targetArray[offset + i7] = this[i7];
      }
      return targetArray;
    }
    toObject(targetObject) {
      return targetObject;
    }
    from(arrayOrObject) {
      return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : (
        // @ts-ignore
        this.fromObject(arrayOrObject)
      );
    }
    to(arrayOrObject) {
      if (arrayOrObject === this) {
        return this;
      }
      return isArray5(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);
    }
    toTarget(target2) {
      return target2 ? this.to(target2) : this;
    }
    /** @deprecated */
    toFloat32Array() {
      return new Float32Array(this);
    }
    toString() {
      return this.formatString(config2);
    }
    /** Formats string according to options */
    formatString(opts) {
      let string = "";
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        string += (i7 > 0 ? ", " : "") + formatValue2(this[i7], opts);
      }
      return `${opts.printTypes ? this.constructor.name : ""}[${string}]`;
    }
    equals(array) {
      if (!array || this.length !== array.length) {
        return false;
      }
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        if (!equals7(this[i7], array[i7])) {
          return false;
        }
      }
      return true;
    }
    exactEquals(array) {
      if (!array || this.length !== array.length) {
        return false;
      }
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        if (this[i7] !== array[i7]) {
          return false;
        }
      }
      return true;
    }
    // Modifiers
    /** Negates all values in this object */
    negate() {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = -this[i7];
      }
      return this.check();
    }
    lerp(a6, b4, t5) {
      if (t5 === void 0) {
        return this.lerp(this, a6, b4);
      }
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        const ai = a6[i7];
        const endValue = typeof b4 === "number" ? b4 : b4[i7];
        this[i7] = ai + t5 * (endValue - ai);
      }
      return this.check();
    }
    /** Minimal */
    min(vector) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.min(vector[i7], this[i7]);
      }
      return this.check();
    }
    /** Maximal */
    max(vector) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.max(vector[i7], this[i7]);
      }
      return this.check();
    }
    clamp(minVector, maxVector) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.min(Math.max(this[i7], minVector[i7]), maxVector[i7]);
      }
      return this.check();
    }
    add(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] += vector[i7];
        }
      }
      return this.check();
    }
    subtract(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] -= vector[i7];
        }
      }
      return this.check();
    }
    scale(scale24) {
      if (typeof scale24 === "number") {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] *= scale24;
        }
      } else {
        for (let i7 = 0; i7 < this.ELEMENTS && i7 < scale24.length; ++i7) {
          this[i7] *= scale24[i7];
        }
      }
      return this.check();
    }
    /**
     * Multiplies all elements by `scale`
     * Note: `Matrix4.multiplyByScalar` only scales its 3x3 "minor"
     */
    multiplyByScalar(scalar) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] *= scalar;
      }
      return this.check();
    }
    // Debug checks
    /** Throws an error if array length is incorrect or contains illegal values */
    check() {
      if (config2.debug && !this.validate()) {
        throw new Error(`math.gl: ${this.constructor.name} some fields set to invalid numbers'`);
      }
      return this;
    }
    /** Returns false if the array length is incorrect or contains illegal values */
    validate() {
      let valid = this.length === this.ELEMENTS;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        valid = valid && Number.isFinite(this[i7]);
      }
      return valid;
    }
    // three.js compatibility
    /** @deprecated */
    sub(a6) {
      return this.subtract(a6);
    }
    /** @deprecated */
    setScalar(a6) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = a6;
      }
      return this.check();
    }
    /** @deprecated */
    addScalar(a6) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] += a6;
      }
      return this.check();
    }
    /** @deprecated */
    subScalar(a6) {
      return this.addScalar(-a6);
    }
    /** @deprecated */
    multiplyScalar(scalar) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] *= scalar;
      }
      return this.check();
    }
    /** @deprecated */
    divideScalar(a6) {
      return this.multiplyByScalar(1 / a6);
    }
    /** @deprecated */
    clampScalar(min7, max7) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.min(Math.max(this[i7], min7), max7);
      }
      return this.check();
    }
    /** @deprecated */
    get elements() {
      return this;
    }
  };

  // ../../node_modules/@loaders.gl/gltf/node_modules/@math.gl/core/dist/lib/validators.js
  function validateVector2(v5, length17) {
    if (v5.length !== length17) {
      return false;
    }
    for (let i7 = 0; i7 < v5.length; ++i7) {
      if (!Number.isFinite(v5[i7])) {
        return false;
      }
    }
    return true;
  }
  function checkNumber2(value) {
    if (!Number.isFinite(value)) {
      throw new Error(`Invalid number ${JSON.stringify(value)}`);
    }
    return value;
  }
  function checkVector2(v5, length17, callerName = "") {
    if (config2.debug && !validateVector2(v5, length17)) {
      throw new Error(`math.gl: ${callerName} some fields set to invalid numbers'`);
    }
    return v5;
  }

  // ../../node_modules/@loaders.gl/gltf/node_modules/@math.gl/core/dist/lib/assert.js
  function assert10(condition, message2) {
    if (!condition) {
      throw new Error(`math.gl assertion ${message2}`);
    }
  }

  // ../../node_modules/@loaders.gl/gltf/node_modules/@math.gl/core/dist/classes/base/vector.js
  var Vector5 = class extends MathArray2 {
    // ACCESSORS
    get x() {
      return this[0];
    }
    set x(value) {
      this[0] = checkNumber2(value);
    }
    get y() {
      return this[1];
    }
    set y(value) {
      this[1] = checkNumber2(value);
    }
    /**
     * Returns the length of the vector from the origin to the point described by this vector
     *
     * @note `length` is a reserved word for Arrays, so `v.length()` will return number of elements
     * Instead we provide `len` and `magnitude`
     */
    len() {
      return Math.sqrt(this.lengthSquared());
    }
    /**
     * Returns the length of the vector from the origin to the point described by this vector
     */
    magnitude() {
      return this.len();
    }
    /**
     * Returns the squared length of the vector from the origin to the point described by this vector
     */
    lengthSquared() {
      let length17 = 0;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        length17 += this[i7] * this[i7];
      }
      return length17;
    }
    /**
     * Returns the squared length of the vector from the origin to the point described by this vector
     */
    magnitudeSquared() {
      return this.lengthSquared();
    }
    distance(mathArray) {
      return Math.sqrt(this.distanceSquared(mathArray));
    }
    distanceSquared(mathArray) {
      let length17 = 0;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        const dist6 = this[i7] - mathArray[i7];
        length17 += dist6 * dist6;
      }
      return checkNumber2(length17);
    }
    dot(mathArray) {
      let product = 0;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        product += this[i7] * mathArray[i7];
      }
      return checkNumber2(product);
    }
    // MODIFIERS
    normalize() {
      const length17 = this.magnitude();
      if (length17 !== 0) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] /= length17;
        }
      }
      return this.check();
    }
    multiply(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] *= vector[i7];
        }
      }
      return this.check();
    }
    divide(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] /= vector[i7];
        }
      }
      return this.check();
    }
    // THREE.js compatibility
    lengthSq() {
      return this.lengthSquared();
    }
    distanceTo(vector) {
      return this.distance(vector);
    }
    distanceToSquared(vector) {
      return this.distanceSquared(vector);
    }
    getComponent(i7) {
      assert10(i7 >= 0 && i7 < this.ELEMENTS, "index is out of range");
      return checkNumber2(this[i7]);
    }
    setComponent(i7, value) {
      assert10(i7 >= 0 && i7 < this.ELEMENTS, "index is out of range");
      this[i7] = value;
      return this.check();
    }
    addVectors(a6, b4) {
      return this.copy(a6).add(b4);
    }
    subVectors(a6, b4) {
      return this.copy(a6).subtract(b4);
    }
    multiplyVectors(a6, b4) {
      return this.copy(a6).multiply(b4);
    }
    addScaledVector(a6, b4) {
      return this.add(new this.constructor(a6).multiplyScalar(b4));
    }
  };

  // ../../node_modules/@loaders.gl/gltf/node_modules/@math.gl/core/dist/gl-matrix/common.js
  var ARRAY_TYPE3 = typeof Float32Array !== "undefined" ? Float32Array : Array;
  var degree3 = Math.PI / 180;

  // ../../node_modules/@loaders.gl/gltf/node_modules/@math.gl/core/dist/gl-matrix/vec2.js
  function create8() {
    const out = new ARRAY_TYPE3(2);
    if (ARRAY_TYPE3 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
    }
    return out;
  }
  function transformMat34(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[3] * y5 + m3[6];
    out[1] = m3[1] * x4 + m3[4] * y5 + m3[7];
    return out;
  }
  var forEach6 = function() {
    const vec = create8();
    return function(a6, stride, offset, count3, fn, arg) {
      let i7;
      let l5;
      if (!stride) {
        stride = 2;
      }
      if (!offset) {
        offset = 0;
      }
      if (count3) {
        l5 = Math.min(count3 * stride + offset, a6.length);
      } else {
        l5 = a6.length;
      }
      for (i7 = offset; i7 < l5; i7 += stride) {
        vec[0] = a6[i7];
        vec[1] = a6[i7 + 1];
        fn(vec, vec, arg);
        a6[i7] = vec[0];
        a6[i7 + 1] = vec[1];
      }
      return a6;
    };
  }();

  // ../../node_modules/@loaders.gl/gltf/node_modules/@math.gl/core/dist/lib/gl-matrix-extras.js
  function vec3_transformMat4AsVector2(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = m3[3] * x4 + m3[7] * y5 + m3[11] * z4 || 1;
    out[0] = (m3[0] * x4 + m3[4] * y5 + m3[8] * z4) / w5;
    out[1] = (m3[1] * x4 + m3[5] * y5 + m3[9] * z4) / w5;
    out[2] = (m3[2] * x4 + m3[6] * y5 + m3[10] * z4) / w5;
    return out;
  }
  function vec3_transformMat22(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[2] * y5;
    out[1] = m3[1] * x4 + m3[3] * y5;
    out[2] = a6[2];
    return out;
  }
  function vec4_transformMat32(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    out[0] = m3[0] * x4 + m3[3] * y5 + m3[6] * z4;
    out[1] = m3[1] * x4 + m3[4] * y5 + m3[7] * z4;
    out[2] = m3[2] * x4 + m3[5] * y5 + m3[8] * z4;
    out[3] = a6[3];
    return out;
  }

  // ../../node_modules/@loaders.gl/gltf/node_modules/@math.gl/core/dist/gl-matrix/vec3.js
  function create9() {
    const out = new ARRAY_TYPE3(3);
    if (ARRAY_TYPE3 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }
    return out;
  }
  function dot6(a6, b4) {
    return a6[0] * b4[0] + a6[1] * b4[1] + a6[2] * b4[2];
  }
  function cross5(out, a6, b4) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const bx = b4[0];
    const by = b4[1];
    const bz = b4[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
  }
  function transformMat45(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    let w5 = m3[3] * x4 + m3[7] * y5 + m3[11] * z4 + m3[15];
    w5 = w5 || 1;
    out[0] = (m3[0] * x4 + m3[4] * y5 + m3[8] * z4 + m3[12]) / w5;
    out[1] = (m3[1] * x4 + m3[5] * y5 + m3[9] * z4 + m3[13]) / w5;
    out[2] = (m3[2] * x4 + m3[6] * y5 + m3[10] * z4 + m3[14]) / w5;
    return out;
  }
  function transformMat35(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    out[0] = x4 * m3[0] + y5 * m3[3] + z4 * m3[6];
    out[1] = x4 * m3[1] + y5 * m3[4] + z4 * m3[7];
    out[2] = x4 * m3[2] + y5 * m3[5] + z4 * m3[8];
    return out;
  }
  function transformQuat4(out, a6, q3) {
    const qx = q3[0];
    const qy = q3[1];
    const qz = q3[2];
    const qw = q3[3];
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    let uvx = qy * z4 - qz * y5;
    let uvy = qz * x4 - qx * z4;
    let uvz = qx * y5 - qy * x4;
    let uuvx = qy * uvz - qz * uvy;
    let uuvy = qz * uvx - qx * uvz;
    let uuvz = qx * uvy - qy * uvx;
    const w22 = qw * 2;
    uvx *= w22;
    uvy *= w22;
    uvz *= w22;
    uuvx *= 2;
    uuvy *= 2;
    uuvz *= 2;
    out[0] = x4 + uvx + uuvx;
    out[1] = y5 + uvy + uuvy;
    out[2] = z4 + uvz + uuvz;
    return out;
  }
  function rotateX5(out, a6, b4, rad) {
    const p5 = [];
    const r5 = [];
    p5[0] = a6[0] - b4[0];
    p5[1] = a6[1] - b4[1];
    p5[2] = a6[2] - b4[2];
    r5[0] = p5[0];
    r5[1] = p5[1] * Math.cos(rad) - p5[2] * Math.sin(rad);
    r5[2] = p5[1] * Math.sin(rad) + p5[2] * Math.cos(rad);
    out[0] = r5[0] + b4[0];
    out[1] = r5[1] + b4[1];
    out[2] = r5[2] + b4[2];
    return out;
  }
  function rotateY5(out, a6, b4, rad) {
    const p5 = [];
    const r5 = [];
    p5[0] = a6[0] - b4[0];
    p5[1] = a6[1] - b4[1];
    p5[2] = a6[2] - b4[2];
    r5[0] = p5[2] * Math.sin(rad) + p5[0] * Math.cos(rad);
    r5[1] = p5[1];
    r5[2] = p5[2] * Math.cos(rad) - p5[0] * Math.sin(rad);
    out[0] = r5[0] + b4[0];
    out[1] = r5[1] + b4[1];
    out[2] = r5[2] + b4[2];
    return out;
  }
  function rotateZ5(out, a6, b4, rad) {
    const p5 = [];
    const r5 = [];
    p5[0] = a6[0] - b4[0];
    p5[1] = a6[1] - b4[1];
    p5[2] = a6[2] - b4[2];
    r5[0] = p5[0] * Math.cos(rad) - p5[1] * Math.sin(rad);
    r5[1] = p5[0] * Math.sin(rad) + p5[1] * Math.cos(rad);
    r5[2] = p5[2];
    out[0] = r5[0] + b4[0];
    out[1] = r5[1] + b4[1];
    out[2] = r5[2] + b4[2];
    return out;
  }
  function angle4(a6, b4) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const bx = b4[0];
    const by = b4[1];
    const bz = b4[2];
    const mag = Math.sqrt((ax * ax + ay * ay + az * az) * (bx * bx + by * by + bz * bz));
    const cosine = mag && dot6(a6, b4) / mag;
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
  }
  var forEach7 = function() {
    const vec = create9();
    return function(a6, stride, offset, count3, fn, arg) {
      let i7;
      let l5;
      if (!stride) {
        stride = 3;
      }
      if (!offset) {
        offset = 0;
      }
      if (count3) {
        l5 = Math.min(count3 * stride + offset, a6.length);
      } else {
        l5 = a6.length;
      }
      for (i7 = offset; i7 < l5; i7 += stride) {
        vec[0] = a6[i7];
        vec[1] = a6[i7 + 1];
        vec[2] = a6[i7 + 2];
        fn(vec, vec, arg);
        a6[i7] = vec[0];
        a6[i7 + 1] = vec[1];
        a6[i7 + 2] = vec[2];
      }
      return a6;
    };
  }();

  // ../../node_modules/@loaders.gl/gltf/node_modules/@math.gl/core/dist/classes/vector3.js
  var ORIGIN2 = [0, 0, 0];
  var ZERO5;
  var Vector32 = class extends Vector5 {
    static get ZERO() {
      if (!ZERO5) {
        ZERO5 = new Vector32(0, 0, 0);
        Object.freeze(ZERO5);
      }
      return ZERO5;
    }
    /**
     * @class
     * @param x
     * @param y
     * @param z
     */
    constructor(x4 = 0, y5 = 0, z4 = 0) {
      super(-0, -0, -0);
      if (arguments.length === 1 && isArray5(x4)) {
        this.copy(x4);
      } else {
        if (config2.debug) {
          checkNumber2(x4);
          checkNumber2(y5);
          checkNumber2(z4);
        }
        this[0] = x4;
        this[1] = y5;
        this[2] = z4;
      }
    }
    set(x4, y5, z4) {
      this[0] = x4;
      this[1] = y5;
      this[2] = z4;
      return this.check();
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      return this.check();
    }
    fromObject(object) {
      if (config2.debug) {
        checkNumber2(object.x);
        checkNumber2(object.y);
        checkNumber2(object.z);
      }
      this[0] = object.x;
      this[1] = object.y;
      this[2] = object.z;
      return this.check();
    }
    toObject(object) {
      object.x = this[0];
      object.y = this[1];
      object.z = this[2];
      return object;
    }
    // Getters/setters
    get ELEMENTS() {
      return 3;
    }
    get z() {
      return this[2];
    }
    set z(value) {
      this[2] = checkNumber2(value);
    }
    // ACCESSORS
    angle(vector) {
      return angle4(this, vector);
    }
    // MODIFIERS
    cross(vector) {
      cross5(this, this, vector);
      return this.check();
    }
    rotateX({ radians: radians6, origin = ORIGIN2 }) {
      rotateX5(this, this, origin, radians6);
      return this.check();
    }
    rotateY({ radians: radians6, origin = ORIGIN2 }) {
      rotateY5(this, this, origin, radians6);
      return this.check();
    }
    rotateZ({ radians: radians6, origin = ORIGIN2 }) {
      rotateZ5(this, this, origin, radians6);
      return this.check();
    }
    // Transforms
    // transforms as point (4th component is implicitly 1)
    transform(matrix4) {
      return this.transformAsPoint(matrix4);
    }
    // transforms as point (4th component is implicitly 1)
    transformAsPoint(matrix4) {
      transformMat45(this, this, matrix4);
      return this.check();
    }
    // transforms as vector  (4th component is implicitly 0, ignores translation. slightly faster)
    transformAsVector(matrix4) {
      vec3_transformMat4AsVector2(this, this, matrix4);
      return this.check();
    }
    transformByMatrix3(matrix3) {
      transformMat35(this, this, matrix3);
      return this.check();
    }
    transformByMatrix2(matrix2) {
      vec3_transformMat22(this, this, matrix2);
      return this.check();
    }
    transformByQuaternion(quaternion) {
      transformQuat4(this, this, quaternion);
      return this.check();
    }
  };

  // ../../node_modules/@loaders.gl/gltf/node_modules/@math.gl/core/dist/classes/base/matrix.js
  var Matrix2 = class extends MathArray2 {
    // fromObject(object) {
    //   const array = object.elements;
    //   return this.fromRowMajor(array);
    // }
    // toObject(object) {
    //   const array = object.elements;
    //   this.toRowMajor(array);
    //   return object;
    // }
    // TODO better override formatString?
    toString() {
      let string = "[";
      if (config2.printRowMajor) {
        string += "row-major:";
        for (let row = 0; row < this.RANK; ++row) {
          for (let col = 0; col < this.RANK; ++col) {
            string += ` ${this[col * this.RANK + row]}`;
          }
        }
      } else {
        string += "column-major:";
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          string += ` ${this[i7]}`;
        }
      }
      string += "]";
      return string;
    }
    getElementIndex(row, col) {
      return col * this.RANK + row;
    }
    // By default assumes row major indices
    getElement(row, col) {
      return this[col * this.RANK + row];
    }
    // By default assumes row major indices
    setElement(row, col, value) {
      this[col * this.RANK + row] = checkNumber2(value);
      return this;
    }
    getColumn(columnIndex, result = new Array(this.RANK).fill(-0)) {
      const firstIndex = columnIndex * this.RANK;
      for (let i7 = 0; i7 < this.RANK; ++i7) {
        result[i7] = this[firstIndex + i7];
      }
      return result;
    }
    setColumn(columnIndex, columnVector) {
      const firstIndex = columnIndex * this.RANK;
      for (let i7 = 0; i7 < this.RANK; ++i7) {
        this[firstIndex + i7] = columnVector[i7];
      }
      return this;
    }
  };

  // ../../node_modules/@loaders.gl/gltf/node_modules/@math.gl/core/dist/gl-matrix/mat3.js
  function transpose4(out, a6) {
    if (out === a6) {
      const a01 = a6[1];
      const a02 = a6[2];
      const a12 = a6[5];
      out[1] = a6[3];
      out[2] = a6[6];
      out[3] = a01;
      out[5] = a6[7];
      out[6] = a02;
      out[7] = a12;
    } else {
      out[0] = a6[0];
      out[1] = a6[3];
      out[2] = a6[6];
      out[3] = a6[1];
      out[4] = a6[4];
      out[5] = a6[7];
      out[6] = a6[2];
      out[7] = a6[5];
      out[8] = a6[8];
    }
    return out;
  }
  function invert5(out, a6) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    const b01 = a22 * a11 - a12 * a21;
    const b11 = -a22 * a10 + a12 * a20;
    const b21 = a21 * a10 - a11 * a20;
    let det = a00 * b01 + a01 * b11 + a02 * b21;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
  }
  function determinant4(a6) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
  }
  function multiply8(out, a6, b4) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    const b00 = b4[0];
    const b01 = b4[1];
    const b02 = b4[2];
    const b10 = b4[3];
    const b11 = b4[4];
    const b12 = b4[5];
    const b20 = b4[6];
    const b21 = b4[7];
    const b22 = b4[8];
    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;
    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;
    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
  }
  function translate3(out, a6, v5) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    const x4 = v5[0];
    const y5 = v5[1];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a10;
    out[4] = a11;
    out[5] = a12;
    out[6] = x4 * a00 + y5 * a10 + a20;
    out[7] = x4 * a01 + y5 * a11 + a21;
    out[8] = x4 * a02 + y5 * a12 + a22;
    return out;
  }
  function rotate5(out, a6, rad) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    out[0] = c5 * a00 + s5 * a10;
    out[1] = c5 * a01 + s5 * a11;
    out[2] = c5 * a02 + s5 * a12;
    out[3] = c5 * a10 - s5 * a00;
    out[4] = c5 * a11 - s5 * a01;
    out[5] = c5 * a12 - s5 * a02;
    out[6] = a20;
    out[7] = a21;
    out[8] = a22;
    return out;
  }
  function scale8(out, a6, v5) {
    const x4 = v5[0];
    const y5 = v5[1];
    out[0] = x4 * a6[0];
    out[1] = x4 * a6[1];
    out[2] = x4 * a6[2];
    out[3] = y5 * a6[3];
    out[4] = y5 * a6[4];
    out[5] = y5 * a6[5];
    out[6] = a6[6];
    out[7] = a6[7];
    out[8] = a6[8];
    return out;
  }
  function fromQuat4(out, q3) {
    const x4 = q3[0];
    const y5 = q3[1];
    const z4 = q3[2];
    const w5 = q3[3];
    const x22 = x4 + x4;
    const y22 = y5 + y5;
    const z22 = z4 + z4;
    const xx = x4 * x22;
    const yx = y5 * x22;
    const yy = y5 * y22;
    const zx = z4 * x22;
    const zy = z4 * y22;
    const zz = z4 * z22;
    const wx = w5 * x22;
    const wy = w5 * y22;
    const wz = w5 * z22;
    out[0] = 1 - yy - zz;
    out[3] = yx - wz;
    out[6] = zx + wy;
    out[1] = yx + wz;
    out[4] = 1 - xx - zz;
    out[7] = zy - wx;
    out[2] = zx - wy;
    out[5] = zy + wx;
    out[8] = 1 - xx - yy;
    return out;
  }

  // ../../node_modules/@loaders.gl/gltf/node_modules/@math.gl/core/dist/classes/matrix3.js
  var INDICES3;
  (function(INDICES10) {
    INDICES10[INDICES10["COL0ROW0"] = 0] = "COL0ROW0";
    INDICES10[INDICES10["COL0ROW1"] = 1] = "COL0ROW1";
    INDICES10[INDICES10["COL0ROW2"] = 2] = "COL0ROW2";
    INDICES10[INDICES10["COL1ROW0"] = 3] = "COL1ROW0";
    INDICES10[INDICES10["COL1ROW1"] = 4] = "COL1ROW1";
    INDICES10[INDICES10["COL1ROW2"] = 5] = "COL1ROW2";
    INDICES10[INDICES10["COL2ROW0"] = 6] = "COL2ROW0";
    INDICES10[INDICES10["COL2ROW1"] = 7] = "COL2ROW1";
    INDICES10[INDICES10["COL2ROW2"] = 8] = "COL2ROW2";
  })(INDICES3 || (INDICES3 = {}));
  var IDENTITY_MATRIX5 = Object.freeze([1, 0, 0, 0, 1, 0, 0, 0, 1]);
  var Matrix32 = class extends Matrix2 {
    static get IDENTITY() {
      return getIdentityMatrix3();
    }
    static get ZERO() {
      return getZeroMatrix3();
    }
    get ELEMENTS() {
      return 9;
    }
    get RANK() {
      return 3;
    }
    get INDICES() {
      return INDICES3;
    }
    constructor(array, ...args) {
      super(-0, -0, -0, -0, -0, -0, -0, -0, -0);
      if (arguments.length === 1 && Array.isArray(array)) {
        this.copy(array);
      } else if (args.length > 0) {
        this.copy([array, ...args]);
      } else {
        this.identity();
      }
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      this[3] = array[3];
      this[4] = array[4];
      this[5] = array[5];
      this[6] = array[6];
      this[7] = array[7];
      this[8] = array[8];
      return this.check();
    }
    // Constructors
    identity() {
      return this.copy(IDENTITY_MATRIX5);
    }
    /**
     *
     * @param object
     * @returns self
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    fromObject(object) {
      return this.check();
    }
    /** Calculates a 3x3 matrix from the given quaternion
     * q quat  Quaternion to create matrix from
     */
    fromQuaternion(q3) {
      fromQuat4(this, q3);
      return this.check();
    }
    /**
     * accepts column major order, stores in column major order
     */
    // eslint-disable-next-line max-params
    set(m00, m10, m20, m01, m11, m21, m02, m12, m22) {
      this[0] = m00;
      this[1] = m10;
      this[2] = m20;
      this[3] = m01;
      this[4] = m11;
      this[5] = m21;
      this[6] = m02;
      this[7] = m12;
      this[8] = m22;
      return this.check();
    }
    /**
     * accepts row major order, stores as column major
     */
    // eslint-disable-next-line max-params
    setRowMajor(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
      this[0] = m00;
      this[1] = m10;
      this[2] = m20;
      this[3] = m01;
      this[4] = m11;
      this[5] = m21;
      this[6] = m02;
      this[7] = m12;
      this[8] = m22;
      return this.check();
    }
    // Accessors
    determinant() {
      return determinant4(this);
    }
    // Modifiers
    transpose() {
      transpose4(this, this);
      return this.check();
    }
    /** Invert a matrix. Note that this can fail if the matrix is not invertible */
    invert() {
      invert5(this, this);
      return this.check();
    }
    // Operations
    multiplyLeft(a6) {
      multiply8(this, a6, this);
      return this.check();
    }
    multiplyRight(a6) {
      multiply8(this, this, a6);
      return this.check();
    }
    rotate(radians6) {
      rotate5(this, this, radians6);
      return this.check();
    }
    scale(factor) {
      if (Array.isArray(factor)) {
        scale8(this, this, factor);
      } else {
        scale8(this, this, [factor, factor]);
      }
      return this.check();
    }
    translate(vec) {
      translate3(this, this, vec);
      return this.check();
    }
    // Transforms
    transform(vector, result) {
      let out;
      switch (vector.length) {
        case 2:
          out = transformMat34(result || [-0, -0], vector, this);
          break;
        case 3:
          out = transformMat35(result || [-0, -0, -0], vector, this);
          break;
        case 4:
          out = vec4_transformMat32(result || [-0, -0, -0, -0], vector, this);
          break;
        default:
          throw new Error("Illegal vector");
      }
      checkVector2(out, vector.length);
      return out;
    }
    /** @deprecated */
    transformVector(vector, result) {
      return this.transform(vector, result);
    }
    /** @deprecated */
    transformVector2(vector, result) {
      return this.transform(vector, result);
    }
    /** @deprecated */
    transformVector3(vector, result) {
      return this.transform(vector, result);
    }
  };
  var ZERO_MATRIX32;
  var IDENTITY_MATRIX32 = null;
  function getZeroMatrix3() {
    if (!ZERO_MATRIX32) {
      ZERO_MATRIX32 = new Matrix32([0, 0, 0, 0, 0, 0, 0, 0, 0]);
      Object.freeze(ZERO_MATRIX32);
    }
    return ZERO_MATRIX32;
  }
  function getIdentityMatrix3() {
    if (!IDENTITY_MATRIX32) {
      IDENTITY_MATRIX32 = new Matrix32();
      Object.freeze(IDENTITY_MATRIX32);
    }
    return IDENTITY_MATRIX32;
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/extensions/KHR_texture_transform.js
  var KHR_TEXTURE_TRANSFORM = "KHR_texture_transform";
  var name9 = KHR_TEXTURE_TRANSFORM;
  var scratchVector7 = new Vector32();
  var scratchRotationMatrix = new Matrix32();
  var scratchScaleMatrix = new Matrix32();
  async function decode7(gltfData, options) {
    const gltfScenegraph = new GLTFScenegraph(gltfData);
    const hasExtension = gltfScenegraph.hasExtension(KHR_TEXTURE_TRANSFORM);
    if (!hasExtension || !options.gltf?.loadBuffers) {
      return;
    }
    const materials = gltfData.json.materials || [];
    for (let i7 = 0; i7 < materials.length; i7++) {
      transformTexCoords(i7, gltfData);
    }
  }
  function transformTexCoords(materialIndex, gltfData) {
    const material = gltfData.json.materials?.[materialIndex];
    const materialTextures = [
      material?.pbrMetallicRoughness?.baseColorTexture,
      material?.emissiveTexture,
      material?.normalTexture,
      material?.occlusionTexture,
      material?.pbrMetallicRoughness?.metallicRoughnessTexture
    ];
    const processedTexCoords = [];
    for (const textureInfo of materialTextures) {
      if (textureInfo && textureInfo?.extensions?.[KHR_TEXTURE_TRANSFORM]) {
        transformPrimitives(gltfData, materialIndex, textureInfo, processedTexCoords);
      }
    }
  }
  function transformPrimitives(gltfData, materialIndex, texture, processedTexCoords) {
    const transformParameters = getTransformParameters(texture, processedTexCoords);
    if (!transformParameters) {
      return;
    }
    const meshes = gltfData.json.meshes || [];
    for (const mesh of meshes) {
      for (const primitive of mesh.primitives) {
        const material = primitive.material;
        if (Number.isFinite(material) && materialIndex === material) {
          transformPrimitive(gltfData, primitive, transformParameters);
        }
      }
    }
  }
  function getTransformParameters(texture, processedTexCoords) {
    const textureInfo = texture.extensions?.[KHR_TEXTURE_TRANSFORM];
    const { texCoord: originalTexCoord = 0 } = texture;
    const { texCoord = originalTexCoord } = textureInfo;
    const isProcessed = processedTexCoords.findIndex(([original, newTexCoord]) => original === originalTexCoord && newTexCoord === texCoord) !== -1;
    if (!isProcessed) {
      const matrix = makeTransformationMatrix(textureInfo);
      if (originalTexCoord !== texCoord) {
        texture.texCoord = texCoord;
      }
      processedTexCoords.push([originalTexCoord, texCoord]);
      return { originalTexCoord, texCoord, matrix };
    }
    return null;
  }
  function transformPrimitive(gltfData, primitive, transformParameters) {
    const { originalTexCoord, texCoord, matrix } = transformParameters;
    const texCoordAccessor = primitive.attributes[`TEXCOORD_${originalTexCoord}`];
    if (Number.isFinite(texCoordAccessor)) {
      const accessor = gltfData.json.accessors?.[texCoordAccessor];
      if (accessor && accessor.bufferView) {
        const bufferView = gltfData.json.bufferViews?.[accessor.bufferView];
        if (bufferView) {
          const { arrayBuffer: arrayBuffer2, byteOffset: bufferByteOffset } = gltfData.buffers[bufferView.buffer];
          const byteOffset = (bufferByteOffset || 0) + (accessor.byteOffset || 0) + (bufferView.byteOffset || 0);
          const { ArrayType, length: length17 } = getAccessorArrayTypeAndLength(accessor, bufferView);
          const bytes = BYTES[accessor.componentType];
          const components = COMPONENTS[accessor.type];
          const elementAddressScale = bufferView.byteStride || bytes * components;
          const result = new Float32Array(length17);
          for (let i7 = 0; i7 < accessor.count; i7++) {
            const uv = new ArrayType(arrayBuffer2, byteOffset + i7 * elementAddressScale, 2);
            scratchVector7.set(uv[0], uv[1], 1);
            scratchVector7.transformByMatrix3(matrix);
            result.set([scratchVector7[0], scratchVector7[1]], i7 * components);
          }
          if (originalTexCoord === texCoord) {
            updateGltf(accessor, bufferView, gltfData.buffers, result);
          } else {
            createAttribute(texCoord, accessor, primitive, gltfData, result);
          }
        }
      }
    }
  }
  function updateGltf(accessor, bufferView, buffers, newTexCoordArray) {
    accessor.componentType = 5126;
    buffers.push({
      arrayBuffer: newTexCoordArray.buffer,
      byteOffset: 0,
      byteLength: newTexCoordArray.buffer.byteLength
    });
    bufferView.buffer = buffers.length - 1;
    bufferView.byteLength = newTexCoordArray.buffer.byteLength;
    bufferView.byteOffset = 0;
    delete bufferView.byteStride;
  }
  function createAttribute(newTexCoord, originalAccessor, primitive, gltfData, newTexCoordArray) {
    gltfData.buffers.push({
      arrayBuffer: newTexCoordArray.buffer,
      byteOffset: 0,
      byteLength: newTexCoordArray.buffer.byteLength
    });
    const bufferViews = gltfData.json.bufferViews;
    if (!bufferViews) {
      return;
    }
    bufferViews.push({
      buffer: gltfData.buffers.length - 1,
      byteLength: newTexCoordArray.buffer.byteLength,
      byteOffset: 0
    });
    const accessors = gltfData.json.accessors;
    if (!accessors) {
      return;
    }
    accessors.push({
      bufferView: bufferViews?.length - 1,
      byteOffset: 0,
      componentType: 5126,
      count: originalAccessor.count,
      type: "VEC2"
    });
    primitive.attributes[`TEXCOORD_${newTexCoord}`] = accessors.length - 1;
  }
  function makeTransformationMatrix(extensionData) {
    const { offset = [0, 0], rotation: rotation2 = 0, scale: scale24 = [1, 1] } = extensionData;
    const translationMatrix = new Matrix32().set(1, 0, 0, 0, 1, 0, offset[0], offset[1], 1);
    const rotationMatrix = scratchRotationMatrix.set(Math.cos(rotation2), Math.sin(rotation2), 0, -Math.sin(rotation2), Math.cos(rotation2), 0, 0, 0, 1);
    const scaleMatrix = scratchScaleMatrix.set(scale24[0], 0, 0, 0, scale24[1], 0, 0, 0, 1);
    return translationMatrix.multiplyRight(rotationMatrix).multiplyRight(scaleMatrix);
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/extensions/deprecated/KHR_lights_punctual.js
  var KHR_lights_punctual_exports = {};
  __export(KHR_lights_punctual_exports, {
    decode: () => decode8,
    encode: () => encode2,
    name: () => name10
  });
  var KHR_LIGHTS_PUNCTUAL = "KHR_lights_punctual";
  var name10 = KHR_LIGHTS_PUNCTUAL;
  async function decode8(gltfData) {
    const gltfScenegraph = new GLTFScenegraph(gltfData);
    const { json } = gltfScenegraph;
    const extension = gltfScenegraph.getExtension(KHR_LIGHTS_PUNCTUAL);
    if (extension) {
      gltfScenegraph.json.lights = extension.lights;
      gltfScenegraph.removeExtension(KHR_LIGHTS_PUNCTUAL);
    }
    for (const node of json.nodes || []) {
      const nodeExtension = gltfScenegraph.getObjectExtension(node, KHR_LIGHTS_PUNCTUAL);
      if (nodeExtension) {
        node.light = nodeExtension.light;
      }
      gltfScenegraph.removeObjectExtension(node, KHR_LIGHTS_PUNCTUAL);
    }
  }
  async function encode2(gltfData) {
    const gltfScenegraph = new GLTFScenegraph(gltfData);
    const { json } = gltfScenegraph;
    if (json.lights) {
      const extension = gltfScenegraph.addExtension(KHR_LIGHTS_PUNCTUAL);
      assert9(!extension.lights);
      extension.lights = json.lights;
      delete json.lights;
    }
    if (gltfScenegraph.json.lights) {
      for (const light of gltfScenegraph.json.lights) {
        const node = light.node;
        gltfScenegraph.addObjectExtension(node, KHR_LIGHTS_PUNCTUAL, light);
      }
      delete gltfScenegraph.json.lights;
    }
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/extensions/deprecated/KHR_materials_unlit.js
  var KHR_materials_unlit_exports = {};
  __export(KHR_materials_unlit_exports, {
    decode: () => decode9,
    encode: () => encode3,
    name: () => name11
  });
  var KHR_MATERIALS_UNLIT = "KHR_materials_unlit";
  var name11 = KHR_MATERIALS_UNLIT;
  async function decode9(gltfData) {
    const gltfScenegraph = new GLTFScenegraph(gltfData);
    const { json } = gltfScenegraph;
    for (const material of json.materials || []) {
      const extension = material.extensions && material.extensions.KHR_materials_unlit;
      if (extension) {
        material.unlit = true;
      }
      gltfScenegraph.removeObjectExtension(material, KHR_MATERIALS_UNLIT);
    }
    gltfScenegraph.removeExtension(KHR_MATERIALS_UNLIT);
  }
  function encode3(gltfData) {
    const gltfScenegraph = new GLTFScenegraph(gltfData);
    const { json } = gltfScenegraph;
    if (gltfScenegraph.materials) {
      for (const material of json.materials || []) {
        if (material.unlit) {
          delete material.unlit;
          gltfScenegraph.addObjectExtension(material, KHR_MATERIALS_UNLIT, {});
          gltfScenegraph.addExtension(KHR_MATERIALS_UNLIT);
        }
      }
    }
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/extensions/deprecated/KHR_techniques_webgl.js
  var KHR_techniques_webgl_exports = {};
  __export(KHR_techniques_webgl_exports, {
    decode: () => decode10,
    encode: () => encode4,
    name: () => name12
  });
  var KHR_TECHNIQUES_WEBGL = "KHR_techniques_webgl";
  var name12 = KHR_TECHNIQUES_WEBGL;
  async function decode10(gltfData) {
    const gltfScenegraph = new GLTFScenegraph(gltfData);
    const { json } = gltfScenegraph;
    const extension = gltfScenegraph.getExtension(KHR_TECHNIQUES_WEBGL);
    if (extension) {
      const techniques = resolveTechniques(extension, gltfScenegraph);
      for (const material of json.materials || []) {
        const materialExtension = gltfScenegraph.getObjectExtension(material, KHR_TECHNIQUES_WEBGL);
        if (materialExtension) {
          material.technique = Object.assign(
            {},
            materialExtension,
            // @ts-ignore
            techniques[materialExtension.technique]
          );
          material.technique.values = resolveValues(material.technique, gltfScenegraph);
        }
        gltfScenegraph.removeObjectExtension(material, KHR_TECHNIQUES_WEBGL);
      }
      gltfScenegraph.removeExtension(KHR_TECHNIQUES_WEBGL);
    }
  }
  async function encode4(gltfData, options) {
  }
  function resolveTechniques(techniquesExtension, gltfScenegraph) {
    const { programs = [], shaders = [], techniques = [] } = techniquesExtension;
    const textDecoder = new TextDecoder();
    shaders.forEach((shader) => {
      if (Number.isFinite(shader.bufferView)) {
        shader.code = textDecoder.decode(gltfScenegraph.getTypedArrayForBufferView(shader.bufferView));
      } else {
        throw new Error("KHR_techniques_webgl: no shader code");
      }
    });
    programs.forEach((program) => {
      program.fragmentShader = shaders[program.fragmentShader];
      program.vertexShader = shaders[program.vertexShader];
    });
    techniques.forEach((technique) => {
      technique.program = programs[technique.program];
    });
    return techniques;
  }
  function resolveValues(technique, gltfScenegraph) {
    const values = Object.assign({}, technique.values);
    Object.keys(technique.uniforms || {}).forEach((uniform) => {
      if (technique.uniforms[uniform].value && !(uniform in values)) {
        values[uniform] = technique.uniforms[uniform].value;
      }
    });
    Object.keys(values).forEach((uniform) => {
      if (typeof values[uniform] === "object" && values[uniform].index !== void 0) {
        values[uniform].texture = gltfScenegraph.getTexture(values[uniform].index);
      }
    });
    return values;
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/api/gltf-extensions.js
  var EXTENSIONS2 = [
    // 1.0
    // KHR_binary_gltf is handled separately - must be processed before other parsing starts
    // KHR_binary_gltf,
    // 2.0
    EXT_structural_metadata_exports,
    EXT_mesh_features_exports,
    EXT_meshopt_compression_exports,
    EXT_texture_webp_exports,
    // Basisu should come after webp, we want basisu to be preferred if both are provided
    KHR_texture_basisu_exports,
    KHR_draco_mesh_compression_exports,
    KHR_lights_punctual_exports,
    KHR_materials_unlit_exports,
    KHR_techniques_webgl_exports,
    KHR_texture_transform_exports,
    EXT_feature_metadata_exports
  ];
  function preprocessExtensions(gltf, options = {}, context) {
    const extensions = EXTENSIONS2.filter((extension) => useExtension(extension.name, options));
    for (const extension of extensions) {
      extension.preprocess?.(gltf, options, context);
    }
  }
  async function decodeExtensions(gltf, options = {}, context) {
    const extensions = EXTENSIONS2.filter((extension) => useExtension(extension.name, options));
    for (const extension of extensions) {
      await extension.decode?.(gltf, options, context);
    }
  }
  function useExtension(extensionName, options) {
    const excludes = options?.gltf?.excludeExtensions || {};
    const exclude = extensionName in excludes && !excludes[extensionName];
    return !exclude;
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/extensions/KHR_binary_gltf.js
  var KHR_BINARY_GLTF = "KHR_binary_glTF";
  function preprocess5(gltfData) {
    const gltfScenegraph = new GLTFScenegraph(gltfData);
    const { json } = gltfScenegraph;
    for (const image of json.images || []) {
      const extension = gltfScenegraph.getObjectExtension(image, KHR_BINARY_GLTF);
      if (extension) {
        Object.assign(image, extension);
      }
      gltfScenegraph.removeObjectExtension(image, KHR_BINARY_GLTF);
    }
    if (json.buffers && json.buffers[0]) {
      delete json.buffers[0].uri;
    }
    gltfScenegraph.removeExtension(KHR_BINARY_GLTF);
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/api/normalize-gltf-v1.js
  var GLTF_ARRAYS = {
    accessors: "accessor",
    animations: "animation",
    buffers: "buffer",
    bufferViews: "bufferView",
    images: "image",
    materials: "material",
    meshes: "mesh",
    nodes: "node",
    samplers: "sampler",
    scenes: "scene",
    skins: "skin",
    textures: "texture"
  };
  var GLTF_KEYS = {
    accessor: "accessors",
    animations: "animation",
    buffer: "buffers",
    bufferView: "bufferViews",
    image: "images",
    material: "materials",
    mesh: "meshes",
    node: "nodes",
    sampler: "samplers",
    scene: "scenes",
    skin: "skins",
    texture: "textures"
  };
  var GLTFV1Normalizer = class {
    idToIndexMap = {
      animations: {},
      accessors: {},
      buffers: {},
      bufferViews: {},
      images: {},
      materials: {},
      meshes: {},
      nodes: {},
      samplers: {},
      scenes: {},
      skins: {},
      textures: {}
    };
    json;
    // constructor() {}
    /**
     * Convert (normalize) glTF < 2.0 to glTF 2.0
     * @param gltf - object with json and binChunks
     * @param options
     * @param options normalize Whether to actually normalize
     */
    normalize(gltf, options) {
      this.json = gltf.json;
      const json = gltf.json;
      switch (json.asset && json.asset.version) {
        case "2.0":
          return;
        case void 0:
        case "1.0":
          break;
        default:
          console.warn(`glTF: Unknown version ${json.asset.version}`);
          return;
      }
      if (!options.normalize) {
        throw new Error("glTF v1 is not supported.");
      }
      console.warn("Converting glTF v1 to glTF v2 format. This is experimental and may fail.");
      this._addAsset(json);
      this._convertTopLevelObjectsToArrays(json);
      preprocess5(gltf);
      this._convertObjectIdsToArrayIndices(json);
      this._updateObjects(json);
      this._updateMaterial(json);
    }
    // asset is now required, #642 https://github.com/KhronosGroup/glTF/issues/639
    _addAsset(json) {
      json.asset = json.asset || {};
      json.asset.version = "2.0";
      json.asset.generator = json.asset.generator || "Normalized to glTF 2.0 by loaders.gl";
    }
    _convertTopLevelObjectsToArrays(json) {
      for (const arrayName in GLTF_ARRAYS) {
        this._convertTopLevelObjectToArray(json, arrayName);
      }
    }
    /** Convert one top level object to array */
    _convertTopLevelObjectToArray(json, mapName) {
      const objectMap = json[mapName];
      if (!objectMap || Array.isArray(objectMap)) {
        return;
      }
      json[mapName] = [];
      for (const id in objectMap) {
        const object = objectMap[id];
        object.id = object.id || id;
        const index = json[mapName].length;
        json[mapName].push(object);
        this.idToIndexMap[mapName][id] = index;
      }
    }
    /** Go through all objects in all top-level arrays and replace ids with indices */
    _convertObjectIdsToArrayIndices(json) {
      for (const arrayName in GLTF_ARRAYS) {
        this._convertIdsToIndices(json, arrayName);
      }
      if ("scene" in json) {
        json.scene = this._convertIdToIndex(json.scene, "scene");
      }
      for (const texture of json.textures) {
        this._convertTextureIds(texture);
      }
      for (const mesh of json.meshes) {
        this._convertMeshIds(mesh);
      }
      for (const node of json.nodes) {
        this._convertNodeIds(node);
      }
      for (const node of json.scenes) {
        this._convertSceneIds(node);
      }
    }
    _convertTextureIds(texture) {
      if (texture.source) {
        texture.source = this._convertIdToIndex(texture.source, "image");
      }
    }
    _convertMeshIds(mesh) {
      for (const primitive of mesh.primitives) {
        const { attributes, indices, material } = primitive;
        for (const attributeName in attributes) {
          attributes[attributeName] = this._convertIdToIndex(attributes[attributeName], "accessor");
        }
        if (indices) {
          primitive.indices = this._convertIdToIndex(indices, "accessor");
        }
        if (material) {
          primitive.material = this._convertIdToIndex(material, "material");
        }
      }
    }
    _convertNodeIds(node) {
      if (node.children) {
        node.children = node.children.map((child) => this._convertIdToIndex(child, "node"));
      }
      if (node.meshes) {
        node.meshes = node.meshes.map((mesh) => this._convertIdToIndex(mesh, "mesh"));
      }
    }
    _convertSceneIds(scene) {
      if (scene.nodes) {
        scene.nodes = scene.nodes.map((node) => this._convertIdToIndex(node, "node"));
      }
    }
    /** Go through all objects in a top-level array and replace ids with indices */
    _convertIdsToIndices(json, topLevelArrayName) {
      if (!json[topLevelArrayName]) {
        console.warn(`gltf v1: json doesn't contain attribute ${topLevelArrayName}`);
        json[topLevelArrayName] = [];
      }
      for (const object of json[topLevelArrayName]) {
        for (const key in object) {
          const id = object[key];
          const index = this._convertIdToIndex(id, key);
          object[key] = index;
        }
      }
    }
    _convertIdToIndex(id, key) {
      const arrayName = GLTF_KEYS[key];
      if (arrayName in this.idToIndexMap) {
        const index = this.idToIndexMap[arrayName][id];
        if (!Number.isFinite(index)) {
          throw new Error(`gltf v1: failed to resolve ${key} with id ${id}`);
        }
        return index;
      }
      return id;
    }
    /**
     *
     * @param {*} json
     */
    _updateObjects(json) {
      for (const buffer of this.json.buffers) {
        delete buffer.type;
      }
    }
    /**
     * Update material (set pbrMetallicRoughness)
     * @param {*} json
     */
    _updateMaterial(json) {
      for (const material of json.materials) {
        material.pbrMetallicRoughness = {
          baseColorFactor: [1, 1, 1, 1],
          metallicFactor: 1,
          roughnessFactor: 1
        };
        const textureId = material.values?.tex || material.values?.texture2d_0 || material.values?.diffuseTex;
        const textureIndex = json.textures.findIndex((texture) => texture.id === textureId);
        if (textureIndex !== -1) {
          material.pbrMetallicRoughness.baseColorTexture = { index: textureIndex };
        }
      }
    }
  };
  function normalizeGLTFV1(gltf, options = {}) {
    return new GLTFV1Normalizer().normalize(gltf, options);
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/parsers/parse-gltf.js
  async function parseGLTF2(gltf, arrayBufferOrString, byteOffset = 0, options, context) {
    parseGLTFContainerSync(gltf, arrayBufferOrString, byteOffset, options);
    normalizeGLTFV1(gltf, { normalize: options?.gltf?.normalize });
    preprocessExtensions(gltf, options, context);
    if (options?.gltf?.loadBuffers && gltf.json.buffers) {
      await loadBuffers(gltf, options, context);
    }
    if (options?.gltf?.loadImages) {
      await loadImages(gltf, options, context);
    }
    await decodeExtensions(gltf, options, context);
    return gltf;
  }
  function parseGLTFContainerSync(gltf, data, byteOffset, options) {
    if (options.uri) {
      gltf.baseUri = options.uri;
    }
    if (data instanceof ArrayBuffer && !isGLB(data, byteOffset, options)) {
      const textDecoder = new TextDecoder();
      data = textDecoder.decode(data);
    }
    if (typeof data === "string") {
      gltf.json = parseJSON(data);
    } else if (data instanceof ArrayBuffer) {
      const glb = {};
      byteOffset = parseGLBSync(glb, data, byteOffset, options.glb);
      assert9(glb.type === "glTF", `Invalid GLB magic string ${glb.type}`);
      gltf._glb = glb;
      gltf.json = glb.json;
    } else {
      assert9(false, "GLTF: must be ArrayBuffer or string");
    }
    const buffers = gltf.json.buffers || [];
    gltf.buffers = new Array(buffers.length).fill(null);
    if (gltf._glb && gltf._glb.header.hasBinChunk) {
      const { binChunks } = gltf._glb;
      gltf.buffers[0] = {
        arrayBuffer: binChunks[0].arrayBuffer,
        byteOffset: binChunks[0].byteOffset,
        byteLength: binChunks[0].byteLength
      };
    }
    const images = gltf.json.images || [];
    gltf.images = new Array(images.length).fill({});
  }
  async function loadBuffers(gltf, options, context) {
    const buffers = gltf.json.buffers || [];
    for (let i7 = 0; i7 < buffers.length; ++i7) {
      const buffer = buffers[i7];
      if (buffer.uri) {
        const { fetch: fetch2 } = context;
        assert9(fetch2);
        const uri = resolveUrl(buffer.uri, options);
        const response = await context?.fetch?.(uri);
        const arrayBuffer2 = await response?.arrayBuffer?.();
        gltf.buffers[i7] = {
          arrayBuffer: arrayBuffer2,
          byteOffset: 0,
          byteLength: arrayBuffer2.byteLength
        };
        delete buffer.uri;
      } else if (gltf.buffers[i7] === null) {
        gltf.buffers[i7] = {
          arrayBuffer: new ArrayBuffer(buffer.byteLength),
          byteOffset: 0,
          byteLength: buffer.byteLength
        };
      }
    }
  }
  async function loadImages(gltf, options, context) {
    const imageIndices = getReferencesImageIndices(gltf);
    const images = gltf.json.images || [];
    const promises = [];
    for (const imageIndex of imageIndices) {
      promises.push(loadImage(gltf, images[imageIndex], imageIndex, options, context));
    }
    return await Promise.all(promises);
  }
  function getReferencesImageIndices(gltf) {
    const imageIndices = /* @__PURE__ */ new Set();
    const textures = gltf.json.textures || [];
    for (const texture of textures) {
      if (texture.source !== void 0) {
        imageIndices.add(texture.source);
      }
    }
    return Array.from(imageIndices).sort();
  }
  async function loadImage(gltf, image, index, options, context) {
    let arrayBuffer2;
    if (image.uri && !image.hasOwnProperty("bufferView")) {
      const uri = resolveUrl(image.uri, options);
      const { fetch: fetch2 } = context;
      const response = await fetch2(uri);
      arrayBuffer2 = await response.arrayBuffer();
      image.bufferView = {
        data: arrayBuffer2
      };
    }
    if (Number.isFinite(image.bufferView)) {
      const array = getTypedArrayForBufferView(gltf.json, gltf.buffers, image.bufferView);
      arrayBuffer2 = sliceArrayBuffer(array.buffer, array.byteOffset, array.byteLength);
    }
    assert9(arrayBuffer2, "glTF image has no data");
    let parsedImage = await parseFromContext(arrayBuffer2, [ImageLoader, BasisLoader], {
      ...options,
      mimeType: image.mimeType,
      basis: options.basis || { format: selectSupportedBasisFormat() }
    }, context);
    if (parsedImage && parsedImage[0]) {
      parsedImage = {
        compressed: true,
        // @ts-expect-error
        mipmaps: false,
        width: parsedImage[0].width,
        height: parsedImage[0].height,
        data: parsedImage[0]
      };
    }
    gltf.images = gltf.images || [];
    gltf.images[index] = parsedImage;
  }

  // ../../node_modules/@loaders.gl/gltf/dist/gltf-loader.js
  var GLTFLoader = {
    dataType: null,
    batchType: null,
    name: "glTF",
    id: "gltf",
    module: "gltf",
    version: VERSION9,
    extensions: ["gltf", "glb"],
    mimeTypes: ["model/gltf+json", "model/gltf-binary"],
    text: true,
    binary: true,
    tests: ["glTF"],
    parse: parse3,
    options: {
      gltf: {
        normalize: true,
        // Normalize glTF v1 to glTF v2 format (not yet stable)
        loadBuffers: true,
        // Fetch any linked .BIN buffers, decode base64
        loadImages: true,
        // Create image objects
        decompressMeshes: true
        // Decompress Draco encoded meshes
      },
      // common?
      log: console
      // eslint-disable-line
    }
  };
  async function parse3(arrayBuffer2, options = {}, context) {
    options = { ...GLTFLoader.options, ...options };
    options.gltf = { ...GLTFLoader.options.gltf, ...options.gltf };
    const { byteOffset = 0 } = options;
    const gltf = {};
    return await parseGLTF2(gltf, arrayBuffer2, byteOffset, options, context);
  }

  // ../../node_modules/@loaders.gl/gltf/dist/lib/api/post-process-gltf.js
  var COMPONENTS2 = {
    SCALAR: 1,
    VEC2: 2,
    VEC3: 3,
    VEC4: 4,
    MAT2: 4,
    MAT3: 9,
    MAT4: 16
  };
  var BYTES2 = {
    5120: 1,
    // BYTE
    5121: 1,
    // UNSIGNED_BYTE
    5122: 2,
    // SHORT
    5123: 2,
    // UNSIGNED_SHORT
    5125: 4,
    // UNSIGNED_INT
    5126: 4
    // FLOAT
  };
  var GL_SAMPLER = {
    // Sampler parameters
    TEXTURE_MAG_FILTER: 10240,
    TEXTURE_MIN_FILTER: 10241,
    TEXTURE_WRAP_S: 10242,
    TEXTURE_WRAP_T: 10243,
    // Sampler default values
    REPEAT: 10497,
    LINEAR: 9729,
    NEAREST_MIPMAP_LINEAR: 9986
  };
  var SAMPLER_PARAMETER_GLTF_TO_GL = {
    magFilter: GL_SAMPLER.TEXTURE_MAG_FILTER,
    minFilter: GL_SAMPLER.TEXTURE_MIN_FILTER,
    wrapS: GL_SAMPLER.TEXTURE_WRAP_S,
    wrapT: GL_SAMPLER.TEXTURE_WRAP_T
  };
  var DEFAULT_SAMPLER_PARAMETERS2 = {
    [GL_SAMPLER.TEXTURE_MAG_FILTER]: GL_SAMPLER.LINEAR,
    [GL_SAMPLER.TEXTURE_MIN_FILTER]: GL_SAMPLER.NEAREST_MIPMAP_LINEAR,
    [GL_SAMPLER.TEXTURE_WRAP_S]: GL_SAMPLER.REPEAT,
    [GL_SAMPLER.TEXTURE_WRAP_T]: GL_SAMPLER.REPEAT
  };
  function makeDefaultSampler() {
    return {
      id: "default-sampler",
      parameters: DEFAULT_SAMPLER_PARAMETERS2
    };
  }
  function getBytesFromComponentType(componentType) {
    return BYTES2[componentType];
  }
  function getSizeFromAccessorType(type) {
    return COMPONENTS2[type];
  }
  var GLTFPostProcessor = class {
    baseUri = "";
    // @ts-expect-error
    jsonUnprocessed;
    // @ts-expect-error
    json;
    buffers = [];
    images = [];
    postProcess(gltf, options = {}) {
      const { json, buffers = [], images = [] } = gltf;
      const { baseUri = "" } = gltf;
      assert9(json);
      this.baseUri = baseUri;
      this.buffers = buffers;
      this.images = images;
      this.jsonUnprocessed = json;
      this.json = this._resolveTree(gltf.json, options);
      return this.json;
    }
    // Convert indexed glTF structure into tree structure
    // cross-link index resolution, enum lookup, convenience calculations
    // eslint-disable-next-line complexity, max-statements
    _resolveTree(gltf, options = {}) {
      const json = { ...gltf };
      this.json = json;
      if (gltf.bufferViews) {
        json.bufferViews = gltf.bufferViews.map((bufView, i7) => this._resolveBufferView(bufView, i7));
      }
      if (gltf.images) {
        json.images = gltf.images.map((image, i7) => this._resolveImage(image, i7));
      }
      if (gltf.samplers) {
        json.samplers = gltf.samplers.map((sampler, i7) => this._resolveSampler(sampler, i7));
      }
      if (gltf.textures) {
        json.textures = gltf.textures.map((texture, i7) => this._resolveTexture(texture, i7));
      }
      if (gltf.accessors) {
        json.accessors = gltf.accessors.map((accessor, i7) => this._resolveAccessor(accessor, i7));
      }
      if (gltf.materials) {
        json.materials = gltf.materials.map((material, i7) => this._resolveMaterial(material, i7));
      }
      if (gltf.meshes) {
        json.meshes = gltf.meshes.map((mesh, i7) => this._resolveMesh(mesh, i7));
      }
      if (gltf.nodes) {
        json.nodes = gltf.nodes.map((node, i7) => this._resolveNode(node, i7));
        json.nodes = json.nodes.map((node, i7) => this._resolveNodeChildren(node));
      }
      if (gltf.skins) {
        json.skins = gltf.skins.map((skin, i7) => this._resolveSkin(skin, i7));
      }
      if (gltf.scenes) {
        json.scenes = gltf.scenes.map((scene, i7) => this._resolveScene(scene, i7));
      }
      if (typeof this.json.scene === "number" && json.scenes) {
        json.scene = json.scenes[this.json.scene];
      }
      return json;
    }
    getScene(index) {
      return this._get(this.json.scenes, index);
    }
    getNode(index) {
      return this._get(this.json.nodes, index);
    }
    getSkin(index) {
      return this._get(this.json.skins, index);
    }
    getMesh(index) {
      return this._get(this.json.meshes, index);
    }
    getMaterial(index) {
      return this._get(this.json.materials, index);
    }
    getAccessor(index) {
      return this._get(this.json.accessors, index);
    }
    getCamera(index) {
      return this._get(this.json.cameras, index);
    }
    getTexture(index) {
      return this._get(this.json.textures, index);
    }
    getSampler(index) {
      return this._get(this.json.samplers, index);
    }
    getImage(index) {
      return this._get(this.json.images, index);
    }
    getBufferView(index) {
      return this._get(this.json.bufferViews, index);
    }
    getBuffer(index) {
      return this._get(this.json.buffers, index);
    }
    _get(array, index) {
      if (typeof index === "object") {
        return index;
      }
      const object = array && array[index];
      if (!object) {
        console.warn(`glTF file error: Could not find ${array}[${index}]`);
      }
      return object;
    }
    // PARSING HELPERS
    _resolveScene(scene, index) {
      return {
        ...scene,
        // @ts-ignore
        id: scene.id || `scene-${index}`,
        nodes: (scene.nodes || []).map((node) => this.getNode(node))
      };
    }
    _resolveNode(gltfNode, index) {
      const node = {
        ...gltfNode,
        // @ts-expect-error id could already be present, glTF standard does not prevent it
        id: gltfNode?.id || `node-${index}`
      };
      if (gltfNode.mesh !== void 0) {
        node.mesh = this.getMesh(gltfNode.mesh);
      }
      if (gltfNode.camera !== void 0) {
        node.camera = this.getCamera(gltfNode.camera);
      }
      if (gltfNode.skin !== void 0) {
        node.skin = this.getSkin(gltfNode.skin);
      }
      if (gltfNode.meshes !== void 0 && gltfNode.meshes.length) {
        node.mesh = gltfNode.meshes.reduce((accum, meshIndex) => {
          const mesh = this.getMesh(meshIndex);
          accum.id = mesh.id;
          accum.primitives = accum.primitives.concat(mesh.primitives);
          return accum;
        }, { primitives: [] });
      }
      return node;
    }
    _resolveNodeChildren(node) {
      if (node.children) {
        node.children = node.children.map((child) => this.getNode(child));
      }
      return node;
    }
    _resolveSkin(gltfSkin, index) {
      const inverseBindMatrices = typeof gltfSkin.inverseBindMatrices === "number" ? this.getAccessor(gltfSkin.inverseBindMatrices) : void 0;
      return {
        ...gltfSkin,
        id: gltfSkin.id || `skin-${index}`,
        inverseBindMatrices
      };
    }
    _resolveMesh(gltfMesh, index) {
      const mesh = {
        ...gltfMesh,
        id: gltfMesh.id || `mesh-${index}`,
        primitives: []
      };
      if (gltfMesh.primitives) {
        mesh.primitives = gltfMesh.primitives.map((gltfPrimitive) => {
          const primitive = {
            ...gltfPrimitive,
            attributes: {},
            indices: void 0,
            material: void 0
          };
          const attributes = gltfPrimitive.attributes;
          for (const attribute in attributes) {
            primitive.attributes[attribute] = this.getAccessor(attributes[attribute]);
          }
          if (gltfPrimitive.indices !== void 0) {
            primitive.indices = this.getAccessor(gltfPrimitive.indices);
          }
          if (gltfPrimitive.material !== void 0) {
            primitive.material = this.getMaterial(gltfPrimitive.material);
          }
          return primitive;
        });
      }
      return mesh;
    }
    _resolveMaterial(gltfMaterial, index) {
      const material = {
        ...gltfMaterial,
        // @ts-expect-error
        id: gltfMaterial.id || `material-${index}`
      };
      if (material.normalTexture) {
        material.normalTexture = { ...material.normalTexture };
        material.normalTexture.texture = this.getTexture(material.normalTexture.index);
      }
      if (material.occlusionTexture) {
        material.occlusionTexture = { ...material.occlusionTexture };
        material.occlusionTexture.texture = this.getTexture(material.occlusionTexture.index);
      }
      if (material.emissiveTexture) {
        material.emissiveTexture = { ...material.emissiveTexture };
        material.emissiveTexture.texture = this.getTexture(material.emissiveTexture.index);
      }
      if (!material.emissiveFactor) {
        material.emissiveFactor = material.emissiveTexture ? [1, 1, 1] : [0, 0, 0];
      }
      if (material.pbrMetallicRoughness) {
        material.pbrMetallicRoughness = { ...material.pbrMetallicRoughness };
        const mr = material.pbrMetallicRoughness;
        if (mr.baseColorTexture) {
          mr.baseColorTexture = { ...mr.baseColorTexture };
          mr.baseColorTexture.texture = this.getTexture(mr.baseColorTexture.index);
        }
        if (mr.metallicRoughnessTexture) {
          mr.metallicRoughnessTexture = { ...mr.metallicRoughnessTexture };
          mr.metallicRoughnessTexture.texture = this.getTexture(mr.metallicRoughnessTexture.index);
        }
      }
      return material;
    }
    _resolveAccessor(gltfAccessor, index) {
      const bytesPerComponent = getBytesFromComponentType(gltfAccessor.componentType);
      const components = getSizeFromAccessorType(gltfAccessor.type);
      const bytesPerElement = bytesPerComponent * components;
      const accessor = {
        ...gltfAccessor,
        // @ts-expect-error
        id: gltfAccessor.id || `accessor-${index}`,
        bytesPerComponent,
        components,
        bytesPerElement,
        value: void 0,
        bufferView: void 0,
        sparse: void 0
      };
      if (gltfAccessor.bufferView !== void 0) {
        accessor.bufferView = this.getBufferView(gltfAccessor.bufferView);
      }
      if (accessor.bufferView) {
        const buffer = accessor.bufferView.buffer;
        const { ArrayType, byteLength } = getAccessorArrayTypeAndLength(accessor, accessor.bufferView);
        const byteOffset = (accessor.bufferView.byteOffset || 0) + (accessor.byteOffset || 0) + buffer.byteOffset;
        let cutBuffer = buffer.arrayBuffer.slice(byteOffset, byteOffset + byteLength);
        if (accessor.bufferView.byteStride) {
          cutBuffer = this._getValueFromInterleavedBuffer(buffer, byteOffset, accessor.bufferView.byteStride, accessor.bytesPerElement, accessor.count);
        }
        accessor.value = new ArrayType(cutBuffer);
      }
      return accessor;
    }
    /**
     * Take values of particular accessor from interleaved buffer
     * various parts of the buffer
     * @param buffer
     * @param byteOffset
     * @param byteStride
     * @param bytesPerElement
     * @param count
     * @returns
     */
    _getValueFromInterleavedBuffer(buffer, byteOffset, byteStride, bytesPerElement, count3) {
      const result = new Uint8Array(count3 * bytesPerElement);
      for (let i7 = 0; i7 < count3; i7++) {
        const elementOffset = byteOffset + i7 * byteStride;
        result.set(new Uint8Array(buffer.arrayBuffer.slice(elementOffset, elementOffset + bytesPerElement)), i7 * bytesPerElement);
      }
      return result.buffer;
    }
    _resolveTexture(gltfTexture, index) {
      return {
        ...gltfTexture,
        // @ts-expect-error id could already be present, glTF standard does not prevent it
        id: gltfTexture.id || `texture-${index}`,
        sampler: typeof gltfTexture.sampler === "number" ? this.getSampler(gltfTexture.sampler) : makeDefaultSampler(),
        source: typeof gltfTexture.source === "number" ? this.getImage(gltfTexture.source) : void 0
      };
    }
    _resolveSampler(gltfSampler, index) {
      const sampler = {
        // @ts-expect-error id could already be present, glTF standard does not prevent it
        id: gltfSampler.id || `sampler-${index}`,
        ...gltfSampler,
        parameters: {}
      };
      for (const key in sampler) {
        const glEnum = this._enumSamplerParameter(key);
        if (glEnum !== void 0) {
          sampler.parameters[glEnum] = sampler[key];
        }
      }
      return sampler;
    }
    _enumSamplerParameter(key) {
      return SAMPLER_PARAMETER_GLTF_TO_GL[key];
    }
    _resolveImage(gltfImage, index) {
      const image = {
        ...gltfImage,
        // @ts-expect-error id could already be present, glTF standard does not prevent it
        id: gltfImage.id || `image-${index}`,
        image: null,
        bufferView: gltfImage.bufferView !== void 0 ? this.getBufferView(gltfImage.bufferView) : void 0
      };
      const preloadedImage = this.images[index];
      if (preloadedImage) {
        image.image = preloadedImage;
      }
      return image;
    }
    _resolveBufferView(gltfBufferView, index) {
      const bufferIndex = gltfBufferView.buffer;
      const arrayBuffer2 = this.buffers[bufferIndex].arrayBuffer;
      let byteOffset = this.buffers[bufferIndex].byteOffset || 0;
      if (gltfBufferView.byteOffset) {
        byteOffset += gltfBufferView.byteOffset;
      }
      const bufferView = {
        // // @ts-expect-error id could already be present, glTF standard does not prevent it
        id: `bufferView-${index}`,
        ...gltfBufferView,
        // ...this.buffers[bufferIndex],
        buffer: this.buffers[bufferIndex],
        data: new Uint8Array(arrayBuffer2, byteOffset, gltfBufferView.byteLength)
      };
      return bufferView;
    }
    _resolveCamera(gltfCamera, index) {
      const camera = {
        ...gltfCamera,
        // @ts-expect-error id could already be present, glTF standard does not prevent it
        id: gltfCamera.id || `camera-${index}`
      };
      if (camera.perspective) {
      }
      if (camera.orthographic) {
      }
      return camera;
    }
  };
  function postProcessGLTF(gltf, options) {
    return new GLTFPostProcessor().postProcess(gltf, options);
  }

  // ../mesh-layers/src/scenegraph-layer/gltf-utils.ts
  async function waitForGLTFAssets(gltfObjects) {
    const remaining = [];
    gltfObjects.scenes.forEach((scene) => {
      scene.traverse((modelNode) => {
      });
    });
    return await waitWhileCondition(() => remaining.some((uniform) => !uniform.loaded));
  }
  async function waitWhileCondition(condition) {
    while (condition()) {
      await new Promise((resolve2) => requestAnimationFrame(resolve2));
    }
  }

  // ../mesh-layers/src/scenegraph-layer/scenegraph-layer-uniforms.ts
  var uniformBlock17 = `uniform scenegraphUniforms {
  float sizeScale;
  float sizeMinPixels;
  float sizeMaxPixels;
  mat4 sceneModelMatrix;
  bool composeModelMatrix;
} scenegraph;
`;
  var scenegraphUniforms = {
    name: "scenegraph",
    vs: uniformBlock17,
    fs: uniformBlock17,
    uniformTypes: {
      sizeScale: "f32",
      sizeMinPixels: "f32",
      sizeMaxPixels: "f32",
      sceneModelMatrix: "mat4x4<f32>",
      composeModelMatrix: "f32"
    }
  };

  // ../mesh-layers/src/scenegraph-layer/scenegraph-layer-vertex.glsl.ts
  var scenegraph_layer_vertex_glsl_default = `#version 300 es

#define SHADER_NAME scenegraph-layer-vertex-shader

// Instance attributes
in vec3 instancePositions;
in vec3 instancePositions64Low;
in vec4 instanceColors;
in vec3 instancePickingColors;
in vec3 instanceModelMatrixCol0;
in vec3 instanceModelMatrixCol1;
in vec3 instanceModelMatrixCol2;
in vec3 instanceTranslation;

// Primitive attributes
in vec3 positions;
#ifdef HAS_UV
  in vec2 texCoords;
#endif
#ifdef LIGHTING_PBR
  #ifdef HAS_NORMALS
    in vec3 normals;
  #endif
#endif

// Varying
out vec4 vColor;

// pbrMaterial contains all the varying definitions needed
#ifndef LIGHTING_PBR
  #ifdef HAS_UV
    out vec2 vTEXCOORD_0;
  #endif
#endif

// Main
void main(void) {
  #if defined(HAS_UV) && !defined(LIGHTING_PBR)
    vTEXCOORD_0 = texCoords;
    geometry.uv = texCoords;
  #endif

  geometry.worldPosition = instancePositions;
  geometry.pickingColor = instancePickingColors;

  mat3 instanceModelMatrix = mat3(instanceModelMatrixCol0, instanceModelMatrixCol1, instanceModelMatrixCol2);

  vec3 normal = vec3(0.0, 0.0, 1.0);
  #ifdef LIGHTING_PBR
    #ifdef HAS_NORMALS
      normal = instanceModelMatrix * (scenegraph.sceneModelMatrix * vec4(normals, 0.0)).xyz;
    #endif
  #endif

  float originalSize = project_size_to_pixel(scenegraph.sizeScale);
  float clampedSize = clamp(originalSize, scenegraph.sizeMinPixels, scenegraph.sizeMaxPixels);

  vec3 pos = (instanceModelMatrix * (scenegraph.sceneModelMatrix * vec4(positions, 1.0)).xyz) * scenegraph.sizeScale * (clampedSize / originalSize) + instanceTranslation;
  if(scenegraph.composeModelMatrix) {
    DECKGL_FILTER_SIZE(pos, geometry);
    // using instancePositions as world coordinates
    // when using globe mode, this branch does not re-orient the model to align with the surface of the earth
    // call project_normal before setting position to avoid rotation
    geometry.normal = project_normal(normal);
    geometry.worldPosition += pos;
    gl_Position = project_position_to_clipspace(pos + instancePositions, instancePositions64Low, vec3(0.0), geometry.position);
  }
  else {
    pos = project_size(pos);
    DECKGL_FILTER_SIZE(pos, geometry);
    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, pos, geometry.position);
    geometry.normal = project_normal(normal);
  }
  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);

  #ifdef LIGHTING_PBR
    // set PBR data
    pbr_vPosition = geometry.position.xyz;
    #ifdef HAS_NORMALS
      pbr_vNormal = geometry.normal;
    #endif

    #ifdef HAS_UV
      pbr_vUV = texCoords;
    #else
      pbr_vUV = vec2(0., 0.);
    #endif
    geometry.uv = pbr_vUV;
  #endif

  vColor = instanceColors;
  DECKGL_FILTER_COLOR(vColor, geometry);
}
`;

  // ../mesh-layers/src/scenegraph-layer/scenegraph-layer-fragment.glsl.ts
  var scenegraph_layer_fragment_glsl_default = `#version 300 es

#define SHADER_NAME scenegraph-layer-fragment-shader

// Varying
in vec4 vColor;

out vec4 fragColor;

// pbrMaterial contains all the varying definitions needed
#ifndef LIGHTING_PBR
  #if defined(HAS_UV) && defined(HAS_BASECOLORMAP)
    in vec2 vTEXCOORD_0;
    uniform sampler2D pbr_baseColorSampler;
  #endif
#endif

void main(void) {
  #ifdef LIGHTING_PBR
    fragColor = vColor * pbr_filterColor(vec4(0));
    geometry.uv = pbr_vUV;
  #else
    #if defined(HAS_UV) && defined(HAS_BASECOLORMAP)
      fragColor = vColor * texture(pbr_baseColorSampler, vTEXCOORD_0);
      geometry.uv = vTEXCOORD_0;
    #else
      fragColor = vColor;
    #endif
  #endif

  fragColor.a *= layer.opacity;
  DECKGL_FILTER_COLOR(fragColor, geometry);
}
`;

  // ../mesh-layers/src/scenegraph-layer/scenegraph-layer.ts
  var DEFAULT_COLOR11 = [255, 255, 255, 255];
  var defaultProps29 = {
    scenegraph: { type: "object", value: null, async: true },
    getScene: (gltf) => {
      if (gltf && gltf.scenes) {
        return typeof gltf.scene === "object" ? gltf.scene : gltf.scenes[gltf.scene || 0];
      }
      return gltf;
    },
    getAnimator: (scenegraph) => scenegraph && scenegraph.animator,
    _animations: null,
    sizeScale: { type: "number", value: 1, min: 0 },
    sizeMinPixels: { type: "number", min: 0, value: 0 },
    sizeMaxPixels: { type: "number", min: 0, value: Number.MAX_SAFE_INTEGER },
    getPosition: { type: "accessor", value: (x4) => x4.position },
    getColor: { type: "accessor", value: DEFAULT_COLOR11 },
    // flat or pbr
    _lighting: "flat",
    // _lighting must be pbr for this to work
    _imageBasedLightingEnvironment: void 0,
    // yaw, pitch and roll are in degrees
    // https://en.wikipedia.org/wiki/Euler_angles
    // [pitch, yaw, roll]
    getOrientation: { type: "accessor", value: [0, 0, 0] },
    getScale: { type: "accessor", value: [1, 1, 1] },
    getTranslation: { type: "accessor", value: [0, 0, 0] },
    // 4x4 matrix
    getTransformMatrix: { type: "accessor", value: [] },
    loaders: [GLTFLoader]
  };
  var ScenegraphLayer = class extends Layer {
    getShaders() {
      const defines2 = {};
      let pbr;
      if (this.props._lighting === "pbr") {
        pbr = pbrMaterial;
        defines2.LIGHTING_PBR = 1;
      } else {
        pbr = { name: "pbrMaterial" };
      }
      const modules = [project32_default, picking_default, scenegraphUniforms, pbr];
      return super.getShaders({ defines: defines2, vs: scenegraph_layer_vertex_glsl_default, fs: scenegraph_layer_fragment_glsl_default, modules });
    }
    initializeState() {
      const attributeManager = this.getAttributeManager();
      attributeManager.addInstanced({
        instancePositions: {
          size: 3,
          type: "float64",
          fp64: this.use64bitPositions(),
          accessor: "getPosition",
          transition: true
        },
        instanceColors: {
          type: "unorm8",
          size: this.props.colorFormat.length,
          accessor: "getColor",
          defaultValue: DEFAULT_COLOR11,
          transition: true
        },
        instanceModelMatrix: MATRIX_ATTRIBUTES
      });
    }
    updateState(params) {
      super.updateState(params);
      const { props, oldProps } = params;
      if (props.scenegraph !== oldProps.scenegraph) {
        this._updateScenegraph();
      } else if (props._animations !== oldProps._animations) {
        this._applyAnimationsProp(this.state.animator, props._animations);
      }
    }
    finalizeState(context) {
      super.finalizeState(context);
      this.state.scenegraph?.destroy();
    }
    get isLoaded() {
      return Boolean(this.state?.scenegraph && super.isLoaded);
    }
    _updateScenegraph() {
      const props = this.props;
      const { device } = this.context;
      let scenegraphData = null;
      if (props.scenegraph instanceof ScenegraphNode) {
        scenegraphData = { scenes: [props.scenegraph] };
      } else if (props.scenegraph && typeof props.scenegraph === "object") {
        const gltf = props.scenegraph;
        const processedGLTF = gltf.json ? postProcessGLTF(gltf) : gltf;
        const gltfObjects = createScenegraphsFromGLTF(device, processedGLTF, this._getModelOptions());
        scenegraphData = { gltf: processedGLTF, ...gltfObjects };
        waitForGLTFAssets(gltfObjects).then(() => {
          this.setNeedsRedraw();
        }).catch((ex) => {
          this.raiseError(ex, "loading glTF");
        });
      }
      const options = { layer: this, device: this.context.device };
      const scenegraph = props.getScene(scenegraphData, options);
      const animator = props.getAnimator(scenegraphData, options);
      if (scenegraph instanceof GroupNode) {
        this.state.scenegraph?.destroy();
        this._applyAnimationsProp(animator, props._animations);
        const models = [];
        scenegraph.traverse((node) => {
          if (node instanceof ModelNode) {
            models.push(node.model);
          }
        });
        this.setState({ scenegraph, animator, models });
        this.getAttributeManager().invalidateAll();
      } else if (scenegraph !== null) {
        log_default.warn("invalid scenegraph:", scenegraph)();
      }
    }
    _applyAnimationsProp(animator, animationsProp) {
      if (!animator || !animationsProp) {
        return;
      }
      const animations = animator.getAnimations();
      Object.keys(animationsProp).sort().forEach((key) => {
        const value = animationsProp[key];
        if (key === "*") {
          animations.forEach((animation) => {
            Object.assign(animation, value);
          });
        } else if (Number.isFinite(Number(key))) {
          const number = Number(key);
          if (number >= 0 && number < animations.length) {
            Object.assign(animations[number], value);
          } else {
            log_default.warn(`animation ${key} not found`)();
          }
        } else {
          const findResult = animations.find(({ animation }) => animation.name === key);
          if (findResult) {
            Object.assign(findResult, value);
          } else {
            log_default.warn(`animation ${key} not found`)();
          }
        }
      });
    }
    _getModelOptions() {
      const { _imageBasedLightingEnvironment } = this.props;
      let env;
      if (_imageBasedLightingEnvironment) {
        if (typeof _imageBasedLightingEnvironment === "function") {
          env = _imageBasedLightingEnvironment({ gl: this.context.gl, layer: this });
        } else {
          env = _imageBasedLightingEnvironment;
        }
      }
      return {
        imageBasedLightingEnvironment: env,
        modelOptions: {
          id: this.props.id,
          isInstanced: true,
          bufferLayout: this.getAttributeManager().getBufferLayouts(),
          ...this.getShaders()
        },
        // tangents are not supported
        useTangents: false
      };
    }
    draw({ context }) {
      if (!this.state.scenegraph)
        return;
      if (this.props._animations && this.state.animator) {
        this.state.animator.animate(context.timeline.getTime());
        this.setNeedsRedraw();
      }
      const { viewport, renderPass } = this.context;
      const { sizeScale, sizeMinPixels, sizeMaxPixels, coordinateSystem } = this.props;
      const pbrProjectionProps = {
        camera: viewport.cameraPosition
      };
      const numInstances = this.getNumInstances();
      this.state.scenegraph.traverse((node, { worldMatrix }) => {
        if (node instanceof ModelNode) {
          const { model } = node;
          model.setInstanceCount(numInstances);
          const scenegraphProps = {
            sizeScale,
            sizeMinPixels,
            sizeMaxPixels,
            composeModelMatrix: shouldComposeModelMatrix(viewport, coordinateSystem),
            sceneModelMatrix: worldMatrix
          };
          model.shaderInputs.setProps({
            pbrProjection: pbrProjectionProps,
            scenegraph: scenegraphProps
          });
          model.draw(renderPass);
        }
      });
    }
  };
  ScenegraphLayer.defaultProps = defaultProps29;
  ScenegraphLayer.layerName = "ScenegraphLayer";

  // ../geo-layers/src/mesh-layer/mesh-layer-uniforms.ts
  var uniformBlock18 = `uniform meshUniforms {
  bool pickFeatureIds;
} mesh;
`;
  var meshUniforms = {
    name: "mesh",
    vs: uniformBlock18,
    fs: uniformBlock18,
    uniformTypes: {
      pickFeatureIds: "f32"
    }
  };

  // ../geo-layers/src/mesh-layer/mesh-layer-vertex.glsl.ts
  var mesh_layer_vertex_glsl_default = `#version 300 es
#define SHADER_NAME simple-mesh-layer-vs

// Primitive attributes
in vec3 positions;
in vec3 normals;
in vec3 colors;
in vec2 texCoords;
in vec4 uvRegions;
in vec3 featureIdsPickingColors;

// Instance attributes
in vec4 instanceColors;
in vec3 instancePickingColors;
in vec3 instanceModelMatrixCol0;
in vec3 instanceModelMatrixCol1;
in vec3 instanceModelMatrixCol2;

// Outputs to fragment shader
out vec2 vTexCoord;
out vec3 cameraPosition;
out vec3 normals_commonspace;
out vec4 position_commonspace;
out vec4 vColor;

vec2 applyUVRegion(vec2 uv) {
  #ifdef HAS_UV_REGIONS
    // https://github.com/Esri/i3s-spec/blob/master/docs/1.7/geometryUVRegion.cmn.md
    return fract(uv) * (uvRegions.zw - uvRegions.xy) + uvRegions.xy;
  #else
    return uv;
  #endif
}

void main(void) {
  vec2 uv = applyUVRegion(texCoords);
  geometry.uv = uv;

  if (mesh.pickFeatureIds) {
    geometry.pickingColor = featureIdsPickingColors;
  } else {
    geometry.pickingColor = instancePickingColors;
  }

  mat3 instanceModelMatrix = mat3(instanceModelMatrixCol0, instanceModelMatrixCol1, instanceModelMatrixCol2);

  vTexCoord = uv;
  cameraPosition = project.cameraPosition;
  vColor = vec4(colors * instanceColors.rgb, instanceColors.a);

  vec3 pos = (instanceModelMatrix * positions) * simpleMesh.sizeScale;
  vec3 projectedPosition = project_position(positions);
  position_commonspace = vec4(projectedPosition, 1.0);
  gl_Position = project_common_position_to_clipspace(position_commonspace);

  geometry.position = position_commonspace;
  normals_commonspace = project_normal(instanceModelMatrix * normals);
  geometry.normal = normals_commonspace;

  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);

  #ifdef MODULE_PBRMATERIAL
    // set PBR data
    pbr_vPosition = geometry.position.xyz;
    #ifdef HAS_NORMALS
      pbr_vNormal = geometry.normal;
    #endif

    #ifdef HAS_UV
      pbr_vUV = uv;
    #else
      pbr_vUV = vec2(0., 0.);
    #endif
    geometry.uv = pbr_vUV;
  #endif

  DECKGL_FILTER_COLOR(vColor, geometry);
}
`;

  // ../geo-layers/src/mesh-layer/mesh-layer-fragment.glsl.ts
  var mesh_layer_fragment_glsl_default = `#version 300 es
#define SHADER_NAME simple-mesh-layer-fs

precision highp float;

uniform sampler2D sampler;

in vec2 vTexCoord;
in vec3 cameraPosition;
in vec3 normals_commonspace;
in vec4 position_commonspace;
in vec4 vColor;

out vec4 fragColor;

void main(void) {
  
#ifdef MODULE_PBRMATERIAL

  fragColor = vColor * pbr_filterColor(vec4(0));
  geometry.uv = pbr_vUV;
  fragColor.a *= layer.opacity;

#else

  geometry.uv = vTexCoord;

  vec3 normal;
  if (simpleMesh.flatShading) {

  normal = normalize(cross(dFdx(position_commonspace.xyz), dFdy(position_commonspace.xyz)));
  } else {
    normal = normals_commonspace;
  }

  vec4 color = simpleMesh.hasTexture ? texture(sampler, vTexCoord) : vColor;
  vec3 lightColor = lighting_getLightColor(color.rgb, cameraPosition, position_commonspace.xyz, normal);
  fragColor = vec4(lightColor, color.a * layer.opacity);

#endif

  DECKGL_FILTER_COLOR(fragColor, geometry);
}
`;

  // ../geo-layers/src/mesh-layer/mesh-layer.ts
  function validateGeometryAttributes(attributes) {
    const positionAttribute = attributes.positions || attributes.POSITION;
    const vertexCount = positionAttribute.value.length / positionAttribute.size;
    const hasColorAttribute = attributes.COLOR_0 || attributes.colors;
    if (!hasColorAttribute) {
      attributes.colors = {
        size: 4,
        value: new Uint8Array(vertexCount * 4).fill(255),
        normalized: true
      };
    }
  }
  var defaultProps30 = {
    pbrMaterial: { type: "object", value: null },
    featureIds: { type: "array", value: null, optional: true }
  };
  var MeshLayer = class extends SimpleMeshLayer {
    getShaders() {
      const shaders = super.getShaders();
      const modules = shaders.modules;
      modules.push(pbrMaterial, meshUniforms);
      return { ...shaders, vs: mesh_layer_vertex_glsl_default, fs: mesh_layer_fragment_glsl_default };
    }
    initializeState() {
      const { featureIds } = this.props;
      super.initializeState();
      const attributeManager = this.getAttributeManager();
      if (featureIds) {
        attributeManager.add({
          featureIdsPickingColors: {
            type: "uint8",
            size: 3,
            noAlloc: true,
            // eslint-disable-next-line @typescript-eslint/unbound-method
            update: this.calculateFeatureIdsPickingColors
          }
        });
      }
    }
    updateState(params) {
      super.updateState(params);
      const { props, oldProps } = params;
      if (props.pbrMaterial !== oldProps.pbrMaterial) {
        this.updatePbrMaterialUniforms(props.pbrMaterial);
      }
    }
    draw(opts) {
      const { featureIds } = this.props;
      const { model } = this.state;
      if (!model) {
        return;
      }
      const meshProps = {
        pickFeatureIds: Boolean(featureIds)
      };
      const pbrProjectionProps = {
        camera: this.context.viewport.cameraPosition
      };
      model.shaderInputs.setProps({
        pbrProjection: pbrProjectionProps,
        mesh: meshProps
      });
      super.draw(opts);
    }
    getModel(mesh) {
      const { id } = this.props;
      const parsedPBRMaterial = this.parseMaterial(this.props.pbrMaterial, mesh);
      this.setState({ parsedPBRMaterial });
      const shaders = this.getShaders();
      validateGeometryAttributes(mesh.attributes);
      const model = new Model(this.context.device, {
        ...this.getShaders(),
        id,
        geometry: mesh,
        bufferLayout: this.getAttributeManager().getBufferLayouts(),
        defines: {
          ...shaders.defines,
          ...parsedPBRMaterial?.defines,
          HAS_UV_REGIONS: mesh.attributes.uvRegions ? 1 : 0
        },
        parameters: parsedPBRMaterial?.parameters,
        isInstanced: true
      });
      return model;
    }
    updatePbrMaterialUniforms(material) {
      const { model } = this.state;
      if (model) {
        const { mesh } = this.props;
        const parsedPBRMaterial = this.parseMaterial(material, mesh);
        this.setState({ parsedPBRMaterial });
        const { pbr_baseColorSampler } = parsedPBRMaterial.bindings;
        const { emptyTexture } = this.state;
        const simpleMeshProps = {
          sampler: pbr_baseColorSampler || emptyTexture,
          hasTexture: Boolean(pbr_baseColorSampler)
        };
        const { camera, ...pbrMaterialProps } = {
          ...parsedPBRMaterial.bindings,
          ...parsedPBRMaterial.uniforms
        };
        model.shaderInputs.setProps({ simpleMesh: simpleMeshProps, pbrMaterial: pbrMaterialProps });
      }
    }
    parseMaterial(material, mesh) {
      const unlit = Boolean(
        material.pbrMetallicRoughness && material.pbrMetallicRoughness.baseColorTexture
      );
      return parsePBRMaterial(
        this.context.device,
        { unlit, ...material },
        { NORMAL: mesh.attributes.normals, TEXCOORD_0: mesh.attributes.texCoords },
        {
          pbrDebug: false,
          lights: true,
          useTangents: false
        }
      );
    }
    calculateFeatureIdsPickingColors(attribute) {
      const featureIds = this.props.featureIds;
      const value = new Uint8ClampedArray(featureIds.length * attribute.size);
      const pickingColor = [];
      for (let index = 0; index < featureIds.length; index++) {
        this.encodePickingColor(featureIds[index], pickingColor);
        value[index * 3] = pickingColor[0];
        value[index * 3 + 1] = pickingColor[1];
        value[index * 3 + 2] = pickingColor[2];
      }
      attribute.value = value;
    }
    finalizeState(context) {
      super.finalizeState(context);
      this.state.parsedPBRMaterial?.generatedTextures.forEach((texture) => texture.destroy());
      this.setState({ parsedPBRMaterial: null });
    }
  };
  MeshLayer.layerName = "MeshLayer";
  MeshLayer.defaultProps = defaultProps30;

  // ../../node_modules/@loaders.gl/tiles/node_modules/@math.gl/core/dist/lib/common.js
  var RADIANS_TO_DEGREES5 = 1 / Math.PI * 180;
  var DEGREES_TO_RADIANS9 = 1 / 180 * Math.PI;
  var DEFAULT_CONFIG3 = {
    EPSILON: 1e-12,
    debug: false,
    precision: 4,
    printTypes: false,
    printDegrees: false,
    printRowMajor: true,
    _cartographicRadians: false
  };
  globalThis.mathgl = globalThis.mathgl || { config: { ...DEFAULT_CONFIG3 } };
  var config3 = globalThis.mathgl.config;
  function formatValue3(value, { precision = config3.precision } = {}) {
    value = round9(value);
    return `${parseFloat(value.toPrecision(precision))}`;
  }
  function isArray6(value) {
    return Array.isArray(value) || ArrayBuffer.isView(value) && !(value instanceof DataView);
  }
  function degrees2(radians6, result) {
    return map3(radians6, (radians7) => radians7 * RADIANS_TO_DEGREES5, result);
  }
  function equals8(a6, b4, epsilon) {
    const oldEpsilon = config3.EPSILON;
    if (epsilon) {
      config3.EPSILON = epsilon;
    }
    try {
      if (a6 === b4) {
        return true;
      }
      if (isArray6(a6) && isArray6(b4)) {
        if (a6.length !== b4.length) {
          return false;
        }
        for (let i7 = 0; i7 < a6.length; ++i7) {
          if (!equals8(a6[i7], b4[i7])) {
            return false;
          }
        }
        return true;
      }
      if (a6 && a6.equals) {
        return a6.equals(b4);
      }
      if (b4 && b4.equals) {
        return b4.equals(a6);
      }
      if (typeof a6 === "number" && typeof b4 === "number") {
        return Math.abs(a6 - b4) <= config3.EPSILON * Math.max(1, Math.abs(a6), Math.abs(b4));
      }
      return false;
    } finally {
      config3.EPSILON = oldEpsilon;
    }
  }
  function round9(value) {
    return Math.round(value / config3.EPSILON) * config3.EPSILON;
  }
  function duplicateArray2(array) {
    return array.clone ? array.clone() : new Array(array.length);
  }
  function map3(value, func, result) {
    if (isArray6(value)) {
      const array = value;
      result = result || duplicateArray2(array);
      for (let i7 = 0; i7 < result.length && i7 < array.length; ++i7) {
        const val2 = typeof value === "number" ? value : value[i7];
        result[i7] = func(val2, i7, result);
      }
      return result;
    }
    return func(value);
  }

  // ../../node_modules/@loaders.gl/tiles/node_modules/@math.gl/core/dist/classes/base/math-array.js
  var MathArray3 = class extends Array {
    // Common methods
    /**
     * Clone the current object
     * @returns a new copy of this object
     */
    clone() {
      return new this.constructor().copy(this);
    }
    fromArray(array, offset = 0) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = array[i7 + offset];
      }
      return this.check();
    }
    toArray(targetArray = [], offset = 0) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        targetArray[offset + i7] = this[i7];
      }
      return targetArray;
    }
    toObject(targetObject) {
      return targetObject;
    }
    from(arrayOrObject) {
      return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : (
        // @ts-ignore
        this.fromObject(arrayOrObject)
      );
    }
    to(arrayOrObject) {
      if (arrayOrObject === this) {
        return this;
      }
      return isArray6(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);
    }
    toTarget(target2) {
      return target2 ? this.to(target2) : this;
    }
    /** @deprecated */
    toFloat32Array() {
      return new Float32Array(this);
    }
    toString() {
      return this.formatString(config3);
    }
    /** Formats string according to options */
    formatString(opts) {
      let string = "";
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        string += (i7 > 0 ? ", " : "") + formatValue3(this[i7], opts);
      }
      return `${opts.printTypes ? this.constructor.name : ""}[${string}]`;
    }
    equals(array) {
      if (!array || this.length !== array.length) {
        return false;
      }
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        if (!equals8(this[i7], array[i7])) {
          return false;
        }
      }
      return true;
    }
    exactEquals(array) {
      if (!array || this.length !== array.length) {
        return false;
      }
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        if (this[i7] !== array[i7]) {
          return false;
        }
      }
      return true;
    }
    // Modifiers
    /** Negates all values in this object */
    negate() {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = -this[i7];
      }
      return this.check();
    }
    lerp(a6, b4, t5) {
      if (t5 === void 0) {
        return this.lerp(this, a6, b4);
      }
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        const ai = a6[i7];
        const endValue = typeof b4 === "number" ? b4 : b4[i7];
        this[i7] = ai + t5 * (endValue - ai);
      }
      return this.check();
    }
    /** Minimal */
    min(vector) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.min(vector[i7], this[i7]);
      }
      return this.check();
    }
    /** Maximal */
    max(vector) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.max(vector[i7], this[i7]);
      }
      return this.check();
    }
    clamp(minVector, maxVector) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.min(Math.max(this[i7], minVector[i7]), maxVector[i7]);
      }
      return this.check();
    }
    add(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] += vector[i7];
        }
      }
      return this.check();
    }
    subtract(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] -= vector[i7];
        }
      }
      return this.check();
    }
    scale(scale24) {
      if (typeof scale24 === "number") {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] *= scale24;
        }
      } else {
        for (let i7 = 0; i7 < this.ELEMENTS && i7 < scale24.length; ++i7) {
          this[i7] *= scale24[i7];
        }
      }
      return this.check();
    }
    /**
     * Multiplies all elements by `scale`
     * Note: `Matrix4.multiplyByScalar` only scales its 3x3 "minor"
     */
    multiplyByScalar(scalar) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] *= scalar;
      }
      return this.check();
    }
    // Debug checks
    /** Throws an error if array length is incorrect or contains illegal values */
    check() {
      if (config3.debug && !this.validate()) {
        throw new Error(`math.gl: ${this.constructor.name} some fields set to invalid numbers'`);
      }
      return this;
    }
    /** Returns false if the array length is incorrect or contains illegal values */
    validate() {
      let valid = this.length === this.ELEMENTS;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        valid = valid && Number.isFinite(this[i7]);
      }
      return valid;
    }
    // three.js compatibility
    /** @deprecated */
    sub(a6) {
      return this.subtract(a6);
    }
    /** @deprecated */
    setScalar(a6) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = a6;
      }
      return this.check();
    }
    /** @deprecated */
    addScalar(a6) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] += a6;
      }
      return this.check();
    }
    /** @deprecated */
    subScalar(a6) {
      return this.addScalar(-a6);
    }
    /** @deprecated */
    multiplyScalar(scalar) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] *= scalar;
      }
      return this.check();
    }
    /** @deprecated */
    divideScalar(a6) {
      return this.multiplyByScalar(1 / a6);
    }
    /** @deprecated */
    clampScalar(min7, max7) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.min(Math.max(this[i7], min7), max7);
      }
      return this.check();
    }
    /** @deprecated */
    get elements() {
      return this;
    }
  };

  // ../../node_modules/@loaders.gl/tiles/node_modules/@math.gl/core/dist/lib/validators.js
  function validateVector3(v5, length17) {
    if (v5.length !== length17) {
      return false;
    }
    for (let i7 = 0; i7 < v5.length; ++i7) {
      if (!Number.isFinite(v5[i7])) {
        return false;
      }
    }
    return true;
  }
  function checkNumber3(value) {
    if (!Number.isFinite(value)) {
      throw new Error(`Invalid number ${JSON.stringify(value)}`);
    }
    return value;
  }
  function checkVector3(v5, length17, callerName = "") {
    if (config3.debug && !validateVector3(v5, length17)) {
      throw new Error(`math.gl: ${callerName} some fields set to invalid numbers'`);
    }
    return v5;
  }

  // ../../node_modules/@loaders.gl/tiles/node_modules/@math.gl/core/dist/lib/assert.js
  function assert11(condition, message2) {
    if (!condition) {
      throw new Error(`math.gl assertion ${message2}`);
    }
  }

  // ../../node_modules/@loaders.gl/tiles/node_modules/@math.gl/core/dist/classes/base/vector.js
  var Vector6 = class extends MathArray3 {
    // ACCESSORS
    get x() {
      return this[0];
    }
    set x(value) {
      this[0] = checkNumber3(value);
    }
    get y() {
      return this[1];
    }
    set y(value) {
      this[1] = checkNumber3(value);
    }
    /**
     * Returns the length of the vector from the origin to the point described by this vector
     *
     * @note `length` is a reserved word for Arrays, so `v.length()` will return number of elements
     * Instead we provide `len` and `magnitude`
     */
    len() {
      return Math.sqrt(this.lengthSquared());
    }
    /**
     * Returns the length of the vector from the origin to the point described by this vector
     */
    magnitude() {
      return this.len();
    }
    /**
     * Returns the squared length of the vector from the origin to the point described by this vector
     */
    lengthSquared() {
      let length17 = 0;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        length17 += this[i7] * this[i7];
      }
      return length17;
    }
    /**
     * Returns the squared length of the vector from the origin to the point described by this vector
     */
    magnitudeSquared() {
      return this.lengthSquared();
    }
    distance(mathArray) {
      return Math.sqrt(this.distanceSquared(mathArray));
    }
    distanceSquared(mathArray) {
      let length17 = 0;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        const dist6 = this[i7] - mathArray[i7];
        length17 += dist6 * dist6;
      }
      return checkNumber3(length17);
    }
    dot(mathArray) {
      let product = 0;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        product += this[i7] * mathArray[i7];
      }
      return checkNumber3(product);
    }
    // MODIFIERS
    normalize() {
      const length17 = this.magnitude();
      if (length17 !== 0) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] /= length17;
        }
      }
      return this.check();
    }
    multiply(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] *= vector[i7];
        }
      }
      return this.check();
    }
    divide(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] /= vector[i7];
        }
      }
      return this.check();
    }
    // THREE.js compatibility
    lengthSq() {
      return this.lengthSquared();
    }
    distanceTo(vector) {
      return this.distance(vector);
    }
    distanceToSquared(vector) {
      return this.distanceSquared(vector);
    }
    getComponent(i7) {
      assert11(i7 >= 0 && i7 < this.ELEMENTS, "index is out of range");
      return checkNumber3(this[i7]);
    }
    setComponent(i7, value) {
      assert11(i7 >= 0 && i7 < this.ELEMENTS, "index is out of range");
      this[i7] = value;
      return this.check();
    }
    addVectors(a6, b4) {
      return this.copy(a6).add(b4);
    }
    subVectors(a6, b4) {
      return this.copy(a6).subtract(b4);
    }
    multiplyVectors(a6, b4) {
      return this.copy(a6).multiply(b4);
    }
    addScaledVector(a6, b4) {
      return this.add(new this.constructor(a6).multiplyScalar(b4));
    }
  };

  // ../../node_modules/@loaders.gl/tiles/node_modules/@math.gl/core/dist/gl-matrix/common.js
  var EPSILON26 = 1e-6;
  var ARRAY_TYPE4 = typeof Float32Array !== "undefined" ? Float32Array : Array;
  var degree4 = Math.PI / 180;

  // ../../node_modules/@loaders.gl/tiles/node_modules/@math.gl/core/dist/gl-matrix/vec2.js
  function create10() {
    const out = new ARRAY_TYPE4(2);
    if (ARRAY_TYPE4 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
    }
    return out;
  }
  function transformMat36(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[3] * y5 + m3[6];
    out[1] = m3[1] * x4 + m3[4] * y5 + m3[7];
    return out;
  }
  function transformMat46(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[4] * y5 + m3[12];
    out[1] = m3[1] * x4 + m3[5] * y5 + m3[13];
    return out;
  }
  var forEach8 = function() {
    const vec = create10();
    return function(a6, stride, offset, count3, fn, arg) {
      let i7;
      let l5;
      if (!stride) {
        stride = 2;
      }
      if (!offset) {
        offset = 0;
      }
      if (count3) {
        l5 = Math.min(count3 * stride + offset, a6.length);
      } else {
        l5 = a6.length;
      }
      for (i7 = offset; i7 < l5; i7 += stride) {
        vec[0] = a6[i7];
        vec[1] = a6[i7 + 1];
        fn(vec, vec, arg);
        a6[i7] = vec[0];
        a6[i7 + 1] = vec[1];
      }
      return a6;
    };
  }();

  // ../../node_modules/@loaders.gl/tiles/node_modules/@math.gl/core/dist/lib/gl-matrix-extras.js
  function vec2_transformMat4AsVector2(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const w5 = m3[3] * x4 + m3[7] * y5 || 1;
    out[0] = (m3[0] * x4 + m3[4] * y5) / w5;
    out[1] = (m3[1] * x4 + m3[5] * y5) / w5;
    return out;
  }
  function vec3_transformMat4AsVector3(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = m3[3] * x4 + m3[7] * y5 + m3[11] * z4 || 1;
    out[0] = (m3[0] * x4 + m3[4] * y5 + m3[8] * z4) / w5;
    out[1] = (m3[1] * x4 + m3[5] * y5 + m3[9] * z4) / w5;
    out[2] = (m3[2] * x4 + m3[6] * y5 + m3[10] * z4) / w5;
    return out;
  }
  function vec3_transformMat23(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[2] * y5;
    out[1] = m3[1] * x4 + m3[3] * y5;
    out[2] = a6[2];
    return out;
  }
  function vec4_transformMat22(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[2] * y5;
    out[1] = m3[1] * x4 + m3[3] * y5;
    out[2] = a6[2];
    out[3] = a6[3];
    return out;
  }
  function vec4_transformMat33(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    out[0] = m3[0] * x4 + m3[3] * y5 + m3[6] * z4;
    out[1] = m3[1] * x4 + m3[4] * y5 + m3[7] * z4;
    out[2] = m3[2] * x4 + m3[5] * y5 + m3[8] * z4;
    out[3] = a6[3];
    return out;
  }

  // ../../node_modules/@loaders.gl/tiles/node_modules/@math.gl/core/dist/gl-matrix/vec3.js
  function create11() {
    const out = new ARRAY_TYPE4(3);
    if (ARRAY_TYPE4 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }
    return out;
  }
  function length6(a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    return Math.sqrt(x4 * x4 + y5 * y5 + z4 * z4);
  }
  function fromValues6(x4, y5, z4) {
    const out = new ARRAY_TYPE4(3);
    out[0] = x4;
    out[1] = y5;
    out[2] = z4;
    return out;
  }
  function normalize7(out, a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    let len9 = x4 * x4 + y5 * y5 + z4 * z4;
    if (len9 > 0) {
      len9 = 1 / Math.sqrt(len9);
    }
    out[0] = a6[0] * len9;
    out[1] = a6[1] * len9;
    out[2] = a6[2] * len9;
    return out;
  }
  function dot7(a6, b4) {
    return a6[0] * b4[0] + a6[1] * b4[1] + a6[2] * b4[2];
  }
  function cross6(out, a6, b4) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const bx = b4[0];
    const by = b4[1];
    const bz = b4[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
  }
  function transformMat47(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    let w5 = m3[3] * x4 + m3[7] * y5 + m3[11] * z4 + m3[15];
    w5 = w5 || 1;
    out[0] = (m3[0] * x4 + m3[4] * y5 + m3[8] * z4 + m3[12]) / w5;
    out[1] = (m3[1] * x4 + m3[5] * y5 + m3[9] * z4 + m3[13]) / w5;
    out[2] = (m3[2] * x4 + m3[6] * y5 + m3[10] * z4 + m3[14]) / w5;
    return out;
  }
  function transformMat37(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    out[0] = x4 * m3[0] + y5 * m3[3] + z4 * m3[6];
    out[1] = x4 * m3[1] + y5 * m3[4] + z4 * m3[7];
    out[2] = x4 * m3[2] + y5 * m3[5] + z4 * m3[8];
    return out;
  }
  function transformQuat5(out, a6, q3) {
    const qx = q3[0];
    const qy = q3[1];
    const qz = q3[2];
    const qw = q3[3];
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    let uvx = qy * z4 - qz * y5;
    let uvy = qz * x4 - qx * z4;
    let uvz = qx * y5 - qy * x4;
    let uuvx = qy * uvz - qz * uvy;
    let uuvy = qz * uvx - qx * uvz;
    let uuvz = qx * uvy - qy * uvx;
    const w22 = qw * 2;
    uvx *= w22;
    uvy *= w22;
    uvz *= w22;
    uuvx *= 2;
    uuvy *= 2;
    uuvz *= 2;
    out[0] = x4 + uvx + uuvx;
    out[1] = y5 + uvy + uuvy;
    out[2] = z4 + uvz + uuvz;
    return out;
  }
  function rotateX6(out, a6, b4, rad) {
    const p5 = [];
    const r5 = [];
    p5[0] = a6[0] - b4[0];
    p5[1] = a6[1] - b4[1];
    p5[2] = a6[2] - b4[2];
    r5[0] = p5[0];
    r5[1] = p5[1] * Math.cos(rad) - p5[2] * Math.sin(rad);
    r5[2] = p5[1] * Math.sin(rad) + p5[2] * Math.cos(rad);
    out[0] = r5[0] + b4[0];
    out[1] = r5[1] + b4[1];
    out[2] = r5[2] + b4[2];
    return out;
  }
  function rotateY6(out, a6, b4, rad) {
    const p5 = [];
    const r5 = [];
    p5[0] = a6[0] - b4[0];
    p5[1] = a6[1] - b4[1];
    p5[2] = a6[2] - b4[2];
    r5[0] = p5[2] * Math.sin(rad) + p5[0] * Math.cos(rad);
    r5[1] = p5[1];
    r5[2] = p5[2] * Math.cos(rad) - p5[0] * Math.sin(rad);
    out[0] = r5[0] + b4[0];
    out[1] = r5[1] + b4[1];
    out[2] = r5[2] + b4[2];
    return out;
  }
  function rotateZ6(out, a6, b4, rad) {
    const p5 = [];
    const r5 = [];
    p5[0] = a6[0] - b4[0];
    p5[1] = a6[1] - b4[1];
    p5[2] = a6[2] - b4[2];
    r5[0] = p5[0] * Math.cos(rad) - p5[1] * Math.sin(rad);
    r5[1] = p5[0] * Math.sin(rad) + p5[1] * Math.cos(rad);
    r5[2] = p5[2];
    out[0] = r5[0] + b4[0];
    out[1] = r5[1] + b4[1];
    out[2] = r5[2] + b4[2];
    return out;
  }
  function angle5(a6, b4) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const bx = b4[0];
    const by = b4[1];
    const bz = b4[2];
    const mag = Math.sqrt((ax * ax + ay * ay + az * az) * (bx * bx + by * by + bz * bz));
    const cosine = mag && dot7(a6, b4) / mag;
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
  }
  var len5 = length6;
  var forEach9 = function() {
    const vec = create11();
    return function(a6, stride, offset, count3, fn, arg) {
      let i7;
      let l5;
      if (!stride) {
        stride = 3;
      }
      if (!offset) {
        offset = 0;
      }
      if (count3) {
        l5 = Math.min(count3 * stride + offset, a6.length);
      } else {
        l5 = a6.length;
      }
      for (i7 = offset; i7 < l5; i7 += stride) {
        vec[0] = a6[i7];
        vec[1] = a6[i7 + 1];
        vec[2] = a6[i7 + 2];
        fn(vec, vec, arg);
        a6[i7] = vec[0];
        a6[i7 + 1] = vec[1];
        a6[i7 + 2] = vec[2];
      }
      return a6;
    };
  }();

  // ../../node_modules/@loaders.gl/tiles/node_modules/@math.gl/core/dist/classes/vector3.js
  var ORIGIN3 = [0, 0, 0];
  var ZERO6;
  var Vector33 = class extends Vector6 {
    static get ZERO() {
      if (!ZERO6) {
        ZERO6 = new Vector33(0, 0, 0);
        Object.freeze(ZERO6);
      }
      return ZERO6;
    }
    /**
     * @class
     * @param x
     * @param y
     * @param z
     */
    constructor(x4 = 0, y5 = 0, z4 = 0) {
      super(-0, -0, -0);
      if (arguments.length === 1 && isArray6(x4)) {
        this.copy(x4);
      } else {
        if (config3.debug) {
          checkNumber3(x4);
          checkNumber3(y5);
          checkNumber3(z4);
        }
        this[0] = x4;
        this[1] = y5;
        this[2] = z4;
      }
    }
    set(x4, y5, z4) {
      this[0] = x4;
      this[1] = y5;
      this[2] = z4;
      return this.check();
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      return this.check();
    }
    fromObject(object) {
      if (config3.debug) {
        checkNumber3(object.x);
        checkNumber3(object.y);
        checkNumber3(object.z);
      }
      this[0] = object.x;
      this[1] = object.y;
      this[2] = object.z;
      return this.check();
    }
    toObject(object) {
      object.x = this[0];
      object.y = this[1];
      object.z = this[2];
      return object;
    }
    // Getters/setters
    get ELEMENTS() {
      return 3;
    }
    get z() {
      return this[2];
    }
    set z(value) {
      this[2] = checkNumber3(value);
    }
    // ACCESSORS
    angle(vector) {
      return angle5(this, vector);
    }
    // MODIFIERS
    cross(vector) {
      cross6(this, this, vector);
      return this.check();
    }
    rotateX({ radians: radians6, origin = ORIGIN3 }) {
      rotateX6(this, this, origin, radians6);
      return this.check();
    }
    rotateY({ radians: radians6, origin = ORIGIN3 }) {
      rotateY6(this, this, origin, radians6);
      return this.check();
    }
    rotateZ({ radians: radians6, origin = ORIGIN3 }) {
      rotateZ6(this, this, origin, radians6);
      return this.check();
    }
    // Transforms
    // transforms as point (4th component is implicitly 1)
    transform(matrix4) {
      return this.transformAsPoint(matrix4);
    }
    // transforms as point (4th component is implicitly 1)
    transformAsPoint(matrix4) {
      transformMat47(this, this, matrix4);
      return this.check();
    }
    // transforms as vector  (4th component is implicitly 0, ignores translation. slightly faster)
    transformAsVector(matrix4) {
      vec3_transformMat4AsVector3(this, this, matrix4);
      return this.check();
    }
    transformByMatrix3(matrix3) {
      transformMat37(this, this, matrix3);
      return this.check();
    }
    transformByMatrix2(matrix2) {
      vec3_transformMat23(this, this, matrix2);
      return this.check();
    }
    transformByQuaternion(quaternion) {
      transformQuat5(this, this, quaternion);
      return this.check();
    }
  };

  // ../../node_modules/@loaders.gl/tiles/node_modules/@math.gl/core/dist/classes/vector4.js
  var ZERO7;
  var Vector42 = class extends Vector6 {
    static get ZERO() {
      if (!ZERO7) {
        ZERO7 = new Vector42(0, 0, 0, 0);
        Object.freeze(ZERO7);
      }
      return ZERO7;
    }
    constructor(x4 = 0, y5 = 0, z4 = 0, w5 = 0) {
      super(-0, -0, -0, -0);
      if (isArray6(x4) && arguments.length === 1) {
        this.copy(x4);
      } else {
        if (config3.debug) {
          checkNumber3(x4);
          checkNumber3(y5);
          checkNumber3(z4);
          checkNumber3(w5);
        }
        this[0] = x4;
        this[1] = y5;
        this[2] = z4;
        this[3] = w5;
      }
    }
    set(x4, y5, z4, w5) {
      this[0] = x4;
      this[1] = y5;
      this[2] = z4;
      this[3] = w5;
      return this.check();
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      this[3] = array[3];
      return this.check();
    }
    fromObject(object) {
      if (config3.debug) {
        checkNumber3(object.x);
        checkNumber3(object.y);
        checkNumber3(object.z);
        checkNumber3(object.w);
      }
      this[0] = object.x;
      this[1] = object.y;
      this[2] = object.z;
      this[3] = object.w;
      return this;
    }
    toObject(object) {
      object.x = this[0];
      object.y = this[1];
      object.z = this[2];
      object.w = this[3];
      return object;
    }
    // Getters/setters
    /* eslint-disable no-multi-spaces, brace-style, no-return-assign */
    get ELEMENTS() {
      return 4;
    }
    get z() {
      return this[2];
    }
    set z(value) {
      this[2] = checkNumber3(value);
    }
    get w() {
      return this[3];
    }
    set w(value) {
      this[3] = checkNumber3(value);
    }
    transform(matrix4) {
      transformMat47(this, this, matrix4);
      return this.check();
    }
    transformByMatrix3(matrix3) {
      vec4_transformMat33(this, this, matrix3);
      return this.check();
    }
    transformByMatrix2(matrix2) {
      vec4_transformMat22(this, this, matrix2);
      return this.check();
    }
    transformByQuaternion(quaternion) {
      transformQuat5(this, this, quaternion);
      return this.check();
    }
    // three.js compatibility
    applyMatrix4(m3) {
      m3.transform(this, this);
      return this;
    }
  };

  // ../../node_modules/@loaders.gl/tiles/node_modules/@math.gl/core/dist/classes/base/matrix.js
  var Matrix5 = class extends MathArray3 {
    // fromObject(object) {
    //   const array = object.elements;
    //   return this.fromRowMajor(array);
    // }
    // toObject(object) {
    //   const array = object.elements;
    //   this.toRowMajor(array);
    //   return object;
    // }
    // TODO better override formatString?
    toString() {
      let string = "[";
      if (config3.printRowMajor) {
        string += "row-major:";
        for (let row = 0; row < this.RANK; ++row) {
          for (let col = 0; col < this.RANK; ++col) {
            string += ` ${this[col * this.RANK + row]}`;
          }
        }
      } else {
        string += "column-major:";
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          string += ` ${this[i7]}`;
        }
      }
      string += "]";
      return string;
    }
    getElementIndex(row, col) {
      return col * this.RANK + row;
    }
    // By default assumes row major indices
    getElement(row, col) {
      return this[col * this.RANK + row];
    }
    // By default assumes row major indices
    setElement(row, col, value) {
      this[col * this.RANK + row] = checkNumber3(value);
      return this;
    }
    getColumn(columnIndex, result = new Array(this.RANK).fill(-0)) {
      const firstIndex = columnIndex * this.RANK;
      for (let i7 = 0; i7 < this.RANK; ++i7) {
        result[i7] = this[firstIndex + i7];
      }
      return result;
    }
    setColumn(columnIndex, columnVector) {
      const firstIndex = columnIndex * this.RANK;
      for (let i7 = 0; i7 < this.RANK; ++i7) {
        this[firstIndex + i7] = columnVector[i7];
      }
      return this;
    }
  };

  // ../../node_modules/@loaders.gl/tiles/node_modules/@math.gl/core/dist/gl-matrix/mat3.js
  function create12() {
    const out = new ARRAY_TYPE4(9);
    if (ARRAY_TYPE4 != Float32Array) {
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[5] = 0;
      out[6] = 0;
      out[7] = 0;
    }
    out[0] = 1;
    out[4] = 1;
    out[8] = 1;
    return out;
  }
  function transpose5(out, a6) {
    if (out === a6) {
      const a01 = a6[1];
      const a02 = a6[2];
      const a12 = a6[5];
      out[1] = a6[3];
      out[2] = a6[6];
      out[3] = a01;
      out[5] = a6[7];
      out[6] = a02;
      out[7] = a12;
    } else {
      out[0] = a6[0];
      out[1] = a6[3];
      out[2] = a6[6];
      out[3] = a6[1];
      out[4] = a6[4];
      out[5] = a6[7];
      out[6] = a6[2];
      out[7] = a6[5];
      out[8] = a6[8];
    }
    return out;
  }
  function invert6(out, a6) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    const b01 = a22 * a11 - a12 * a21;
    const b11 = -a22 * a10 + a12 * a20;
    const b21 = a21 * a10 - a11 * a20;
    let det = a00 * b01 + a01 * b11 + a02 * b21;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
  }
  function determinant5(a6) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
  }
  function multiply9(out, a6, b4) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    const b00 = b4[0];
    const b01 = b4[1];
    const b02 = b4[2];
    const b10 = b4[3];
    const b11 = b4[4];
    const b12 = b4[5];
    const b20 = b4[6];
    const b21 = b4[7];
    const b22 = b4[8];
    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;
    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;
    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
  }
  function translate4(out, a6, v5) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    const x4 = v5[0];
    const y5 = v5[1];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a10;
    out[4] = a11;
    out[5] = a12;
    out[6] = x4 * a00 + y5 * a10 + a20;
    out[7] = x4 * a01 + y5 * a11 + a21;
    out[8] = x4 * a02 + y5 * a12 + a22;
    return out;
  }
  function rotate6(out, a6, rad) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    out[0] = c5 * a00 + s5 * a10;
    out[1] = c5 * a01 + s5 * a11;
    out[2] = c5 * a02 + s5 * a12;
    out[3] = c5 * a10 - s5 * a00;
    out[4] = c5 * a11 - s5 * a01;
    out[5] = c5 * a12 - s5 * a02;
    out[6] = a20;
    out[7] = a21;
    out[8] = a22;
    return out;
  }
  function scale9(out, a6, v5) {
    const x4 = v5[0];
    const y5 = v5[1];
    out[0] = x4 * a6[0];
    out[1] = x4 * a6[1];
    out[2] = x4 * a6[2];
    out[3] = y5 * a6[3];
    out[4] = y5 * a6[4];
    out[5] = y5 * a6[5];
    out[6] = a6[6];
    out[7] = a6[7];
    out[8] = a6[8];
    return out;
  }
  function fromQuat5(out, q3) {
    const x4 = q3[0];
    const y5 = q3[1];
    const z4 = q3[2];
    const w5 = q3[3];
    const x22 = x4 + x4;
    const y22 = y5 + y5;
    const z22 = z4 + z4;
    const xx = x4 * x22;
    const yx = y5 * x22;
    const yy = y5 * y22;
    const zx = z4 * x22;
    const zy = z4 * y22;
    const zz = z4 * z22;
    const wx = w5 * x22;
    const wy = w5 * y22;
    const wz = w5 * z22;
    out[0] = 1 - yy - zz;
    out[3] = yx - wz;
    out[6] = zx + wy;
    out[1] = yx + wz;
    out[4] = 1 - xx - zz;
    out[7] = zy - wx;
    out[2] = zx - wy;
    out[5] = zy + wx;
    out[8] = 1 - xx - yy;
    return out;
  }

  // ../../node_modules/@loaders.gl/tiles/node_modules/@math.gl/core/dist/classes/matrix3.js
  var INDICES4;
  (function(INDICES10) {
    INDICES10[INDICES10["COL0ROW0"] = 0] = "COL0ROW0";
    INDICES10[INDICES10["COL0ROW1"] = 1] = "COL0ROW1";
    INDICES10[INDICES10["COL0ROW2"] = 2] = "COL0ROW2";
    INDICES10[INDICES10["COL1ROW0"] = 3] = "COL1ROW0";
    INDICES10[INDICES10["COL1ROW1"] = 4] = "COL1ROW1";
    INDICES10[INDICES10["COL1ROW2"] = 5] = "COL1ROW2";
    INDICES10[INDICES10["COL2ROW0"] = 6] = "COL2ROW0";
    INDICES10[INDICES10["COL2ROW1"] = 7] = "COL2ROW1";
    INDICES10[INDICES10["COL2ROW2"] = 8] = "COL2ROW2";
  })(INDICES4 || (INDICES4 = {}));
  var IDENTITY_MATRIX6 = Object.freeze([1, 0, 0, 0, 1, 0, 0, 0, 1]);
  var Matrix33 = class extends Matrix5 {
    static get IDENTITY() {
      return getIdentityMatrix4();
    }
    static get ZERO() {
      return getZeroMatrix4();
    }
    get ELEMENTS() {
      return 9;
    }
    get RANK() {
      return 3;
    }
    get INDICES() {
      return INDICES4;
    }
    constructor(array, ...args) {
      super(-0, -0, -0, -0, -0, -0, -0, -0, -0);
      if (arguments.length === 1 && Array.isArray(array)) {
        this.copy(array);
      } else if (args.length > 0) {
        this.copy([array, ...args]);
      } else {
        this.identity();
      }
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      this[3] = array[3];
      this[4] = array[4];
      this[5] = array[5];
      this[6] = array[6];
      this[7] = array[7];
      this[8] = array[8];
      return this.check();
    }
    // Constructors
    identity() {
      return this.copy(IDENTITY_MATRIX6);
    }
    /**
     *
     * @param object
     * @returns self
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    fromObject(object) {
      return this.check();
    }
    /** Calculates a 3x3 matrix from the given quaternion
     * q quat  Quaternion to create matrix from
     */
    fromQuaternion(q3) {
      fromQuat5(this, q3);
      return this.check();
    }
    /**
     * accepts column major order, stores in column major order
     */
    // eslint-disable-next-line max-params
    set(m00, m10, m20, m01, m11, m21, m02, m12, m22) {
      this[0] = m00;
      this[1] = m10;
      this[2] = m20;
      this[3] = m01;
      this[4] = m11;
      this[5] = m21;
      this[6] = m02;
      this[7] = m12;
      this[8] = m22;
      return this.check();
    }
    /**
     * accepts row major order, stores as column major
     */
    // eslint-disable-next-line max-params
    setRowMajor(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
      this[0] = m00;
      this[1] = m10;
      this[2] = m20;
      this[3] = m01;
      this[4] = m11;
      this[5] = m21;
      this[6] = m02;
      this[7] = m12;
      this[8] = m22;
      return this.check();
    }
    // Accessors
    determinant() {
      return determinant5(this);
    }
    // Modifiers
    transpose() {
      transpose5(this, this);
      return this.check();
    }
    /** Invert a matrix. Note that this can fail if the matrix is not invertible */
    invert() {
      invert6(this, this);
      return this.check();
    }
    // Operations
    multiplyLeft(a6) {
      multiply9(this, a6, this);
      return this.check();
    }
    multiplyRight(a6) {
      multiply9(this, this, a6);
      return this.check();
    }
    rotate(radians6) {
      rotate6(this, this, radians6);
      return this.check();
    }
    scale(factor) {
      if (Array.isArray(factor)) {
        scale9(this, this, factor);
      } else {
        scale9(this, this, [factor, factor]);
      }
      return this.check();
    }
    translate(vec) {
      translate4(this, this, vec);
      return this.check();
    }
    // Transforms
    transform(vector, result) {
      let out;
      switch (vector.length) {
        case 2:
          out = transformMat36(result || [-0, -0], vector, this);
          break;
        case 3:
          out = transformMat37(result || [-0, -0, -0], vector, this);
          break;
        case 4:
          out = vec4_transformMat33(result || [-0, -0, -0, -0], vector, this);
          break;
        default:
          throw new Error("Illegal vector");
      }
      checkVector3(out, vector.length);
      return out;
    }
    /** @deprecated */
    transformVector(vector, result) {
      return this.transform(vector, result);
    }
    /** @deprecated */
    transformVector2(vector, result) {
      return this.transform(vector, result);
    }
    /** @deprecated */
    transformVector3(vector, result) {
      return this.transform(vector, result);
    }
  };
  var ZERO_MATRIX33;
  var IDENTITY_MATRIX33 = null;
  function getZeroMatrix4() {
    if (!ZERO_MATRIX33) {
      ZERO_MATRIX33 = new Matrix33([0, 0, 0, 0, 0, 0, 0, 0, 0]);
      Object.freeze(ZERO_MATRIX33);
    }
    return ZERO_MATRIX33;
  }
  function getIdentityMatrix4() {
    if (!IDENTITY_MATRIX33) {
      IDENTITY_MATRIX33 = new Matrix33();
      Object.freeze(IDENTITY_MATRIX33);
    }
    return IDENTITY_MATRIX33;
  }

  // ../../node_modules/@loaders.gl/tiles/node_modules/@math.gl/core/dist/gl-matrix/mat4.js
  function identity4(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function transpose6(out, a6) {
    if (out === a6) {
      const a01 = a6[1];
      const a02 = a6[2];
      const a03 = a6[3];
      const a12 = a6[6];
      const a13 = a6[7];
      const a23 = a6[11];
      out[1] = a6[4];
      out[2] = a6[8];
      out[3] = a6[12];
      out[4] = a01;
      out[6] = a6[9];
      out[7] = a6[13];
      out[8] = a02;
      out[9] = a12;
      out[11] = a6[14];
      out[12] = a03;
      out[13] = a13;
      out[14] = a23;
    } else {
      out[0] = a6[0];
      out[1] = a6[4];
      out[2] = a6[8];
      out[3] = a6[12];
      out[4] = a6[1];
      out[5] = a6[5];
      out[6] = a6[9];
      out[7] = a6[13];
      out[8] = a6[2];
      out[9] = a6[6];
      out[10] = a6[10];
      out[11] = a6[14];
      out[12] = a6[3];
      out[13] = a6[7];
      out[14] = a6[11];
      out[15] = a6[15];
    }
    return out;
  }
  function invert7(out, a6) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    const a30 = a6[12];
    const a31 = a6[13];
    const a32 = a6[14];
    const a33 = a6[15];
    const b00 = a00 * a11 - a01 * a10;
    const b01 = a00 * a12 - a02 * a10;
    const b02 = a00 * a13 - a03 * a10;
    const b03 = a01 * a12 - a02 * a11;
    const b04 = a01 * a13 - a03 * a11;
    const b05 = a02 * a13 - a03 * a12;
    const b06 = a20 * a31 - a21 * a30;
    const b07 = a20 * a32 - a22 * a30;
    const b08 = a20 * a33 - a23 * a30;
    const b09 = a21 * a32 - a22 * a31;
    const b10 = a21 * a33 - a23 * a31;
    const b11 = a22 * a33 - a23 * a32;
    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
    return out;
  }
  function determinant6(a6) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    const a30 = a6[12];
    const a31 = a6[13];
    const a32 = a6[14];
    const a33 = a6[15];
    const b0 = a00 * a11 - a01 * a10;
    const b1 = a00 * a12 - a02 * a10;
    const b22 = a01 * a12 - a02 * a11;
    const b32 = a20 * a31 - a21 * a30;
    const b4 = a20 * a32 - a22 * a30;
    const b5 = a21 * a32 - a22 * a31;
    const b6 = a00 * b5 - a01 * b4 + a02 * b32;
    const b7 = a10 * b5 - a11 * b4 + a12 * b32;
    const b8 = a20 * b22 - a21 * b1 + a22 * b0;
    const b9 = a30 * b22 - a31 * b1 + a32 * b0;
    return a13 * b6 - a03 * b7 + a33 * b8 - a23 * b9;
  }
  function multiply10(out, a6, b4) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    const a30 = a6[12];
    const a31 = a6[13];
    const a32 = a6[14];
    const a33 = a6[15];
    let b0 = b4[0];
    let b1 = b4[1];
    let b22 = b4[2];
    let b32 = b4[3];
    out[0] = b0 * a00 + b1 * a10 + b22 * a20 + b32 * a30;
    out[1] = b0 * a01 + b1 * a11 + b22 * a21 + b32 * a31;
    out[2] = b0 * a02 + b1 * a12 + b22 * a22 + b32 * a32;
    out[3] = b0 * a03 + b1 * a13 + b22 * a23 + b32 * a33;
    b0 = b4[4];
    b1 = b4[5];
    b22 = b4[6];
    b32 = b4[7];
    out[4] = b0 * a00 + b1 * a10 + b22 * a20 + b32 * a30;
    out[5] = b0 * a01 + b1 * a11 + b22 * a21 + b32 * a31;
    out[6] = b0 * a02 + b1 * a12 + b22 * a22 + b32 * a32;
    out[7] = b0 * a03 + b1 * a13 + b22 * a23 + b32 * a33;
    b0 = b4[8];
    b1 = b4[9];
    b22 = b4[10];
    b32 = b4[11];
    out[8] = b0 * a00 + b1 * a10 + b22 * a20 + b32 * a30;
    out[9] = b0 * a01 + b1 * a11 + b22 * a21 + b32 * a31;
    out[10] = b0 * a02 + b1 * a12 + b22 * a22 + b32 * a32;
    out[11] = b0 * a03 + b1 * a13 + b22 * a23 + b32 * a33;
    b0 = b4[12];
    b1 = b4[13];
    b22 = b4[14];
    b32 = b4[15];
    out[12] = b0 * a00 + b1 * a10 + b22 * a20 + b32 * a30;
    out[13] = b0 * a01 + b1 * a11 + b22 * a21 + b32 * a31;
    out[14] = b0 * a02 + b1 * a12 + b22 * a22 + b32 * a32;
    out[15] = b0 * a03 + b1 * a13 + b22 * a23 + b32 * a33;
    return out;
  }
  function translate5(out, a6, v5) {
    const x4 = v5[0];
    const y5 = v5[1];
    const z4 = v5[2];
    let a00;
    let a01;
    let a02;
    let a03;
    let a10;
    let a11;
    let a12;
    let a13;
    let a20;
    let a21;
    let a22;
    let a23;
    if (a6 === out) {
      out[12] = a6[0] * x4 + a6[4] * y5 + a6[8] * z4 + a6[12];
      out[13] = a6[1] * x4 + a6[5] * y5 + a6[9] * z4 + a6[13];
      out[14] = a6[2] * x4 + a6[6] * y5 + a6[10] * z4 + a6[14];
      out[15] = a6[3] * x4 + a6[7] * y5 + a6[11] * z4 + a6[15];
    } else {
      a00 = a6[0];
      a01 = a6[1];
      a02 = a6[2];
      a03 = a6[3];
      a10 = a6[4];
      a11 = a6[5];
      a12 = a6[6];
      a13 = a6[7];
      a20 = a6[8];
      a21 = a6[9];
      a22 = a6[10];
      a23 = a6[11];
      out[0] = a00;
      out[1] = a01;
      out[2] = a02;
      out[3] = a03;
      out[4] = a10;
      out[5] = a11;
      out[6] = a12;
      out[7] = a13;
      out[8] = a20;
      out[9] = a21;
      out[10] = a22;
      out[11] = a23;
      out[12] = a00 * x4 + a10 * y5 + a20 * z4 + a6[12];
      out[13] = a01 * x4 + a11 * y5 + a21 * z4 + a6[13];
      out[14] = a02 * x4 + a12 * y5 + a22 * z4 + a6[14];
      out[15] = a03 * x4 + a13 * y5 + a23 * z4 + a6[15];
    }
    return out;
  }
  function scale10(out, a6, v5) {
    const x4 = v5[0];
    const y5 = v5[1];
    const z4 = v5[2];
    out[0] = a6[0] * x4;
    out[1] = a6[1] * x4;
    out[2] = a6[2] * x4;
    out[3] = a6[3] * x4;
    out[4] = a6[4] * y5;
    out[5] = a6[5] * y5;
    out[6] = a6[6] * y5;
    out[7] = a6[7] * y5;
    out[8] = a6[8] * z4;
    out[9] = a6[9] * z4;
    out[10] = a6[10] * z4;
    out[11] = a6[11] * z4;
    out[12] = a6[12];
    out[13] = a6[13];
    out[14] = a6[14];
    out[15] = a6[15];
    return out;
  }
  function rotate7(out, a6, rad, axis) {
    let x4 = axis[0];
    let y5 = axis[1];
    let z4 = axis[2];
    let len9 = Math.sqrt(x4 * x4 + y5 * y5 + z4 * z4);
    let c5;
    let s5;
    let t5;
    let a00;
    let a01;
    let a02;
    let a03;
    let a10;
    let a11;
    let a12;
    let a13;
    let a20;
    let a21;
    let a22;
    let a23;
    let b00;
    let b01;
    let b02;
    let b10;
    let b11;
    let b12;
    let b20;
    let b21;
    let b22;
    if (len9 < EPSILON26) {
      return null;
    }
    len9 = 1 / len9;
    x4 *= len9;
    y5 *= len9;
    z4 *= len9;
    s5 = Math.sin(rad);
    c5 = Math.cos(rad);
    t5 = 1 - c5;
    a00 = a6[0];
    a01 = a6[1];
    a02 = a6[2];
    a03 = a6[3];
    a10 = a6[4];
    a11 = a6[5];
    a12 = a6[6];
    a13 = a6[7];
    a20 = a6[8];
    a21 = a6[9];
    a22 = a6[10];
    a23 = a6[11];
    b00 = x4 * x4 * t5 + c5;
    b01 = y5 * x4 * t5 + z4 * s5;
    b02 = z4 * x4 * t5 - y5 * s5;
    b10 = x4 * y5 * t5 - z4 * s5;
    b11 = y5 * y5 * t5 + c5;
    b12 = z4 * y5 * t5 + x4 * s5;
    b20 = x4 * z4 * t5 + y5 * s5;
    b21 = y5 * z4 * t5 - x4 * s5;
    b22 = z4 * z4 * t5 + c5;
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;
    if (a6 !== out) {
      out[12] = a6[12];
      out[13] = a6[13];
      out[14] = a6[14];
      out[15] = a6[15];
    }
    return out;
  }
  function rotateX7(out, a6, rad) {
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    if (a6 !== out) {
      out[0] = a6[0];
      out[1] = a6[1];
      out[2] = a6[2];
      out[3] = a6[3];
      out[12] = a6[12];
      out[13] = a6[13];
      out[14] = a6[14];
      out[15] = a6[15];
    }
    out[4] = a10 * c5 + a20 * s5;
    out[5] = a11 * c5 + a21 * s5;
    out[6] = a12 * c5 + a22 * s5;
    out[7] = a13 * c5 + a23 * s5;
    out[8] = a20 * c5 - a10 * s5;
    out[9] = a21 * c5 - a11 * s5;
    out[10] = a22 * c5 - a12 * s5;
    out[11] = a23 * c5 - a13 * s5;
    return out;
  }
  function rotateY7(out, a6, rad) {
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    if (a6 !== out) {
      out[4] = a6[4];
      out[5] = a6[5];
      out[6] = a6[6];
      out[7] = a6[7];
      out[12] = a6[12];
      out[13] = a6[13];
      out[14] = a6[14];
      out[15] = a6[15];
    }
    out[0] = a00 * c5 - a20 * s5;
    out[1] = a01 * c5 - a21 * s5;
    out[2] = a02 * c5 - a22 * s5;
    out[3] = a03 * c5 - a23 * s5;
    out[8] = a00 * s5 + a20 * c5;
    out[9] = a01 * s5 + a21 * c5;
    out[10] = a02 * s5 + a22 * c5;
    out[11] = a03 * s5 + a23 * c5;
    return out;
  }
  function rotateZ7(out, a6, rad) {
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    if (a6 !== out) {
      out[8] = a6[8];
      out[9] = a6[9];
      out[10] = a6[10];
      out[11] = a6[11];
      out[12] = a6[12];
      out[13] = a6[13];
      out[14] = a6[14];
      out[15] = a6[15];
    }
    out[0] = a00 * c5 + a10 * s5;
    out[1] = a01 * c5 + a11 * s5;
    out[2] = a02 * c5 + a12 * s5;
    out[3] = a03 * c5 + a13 * s5;
    out[4] = a10 * c5 - a00 * s5;
    out[5] = a11 * c5 - a01 * s5;
    out[6] = a12 * c5 - a02 * s5;
    out[7] = a13 * c5 - a03 * s5;
    return out;
  }
  function fromQuat6(out, q3) {
    const x4 = q3[0];
    const y5 = q3[1];
    const z4 = q3[2];
    const w5 = q3[3];
    const x22 = x4 + x4;
    const y22 = y5 + y5;
    const z22 = z4 + z4;
    const xx = x4 * x22;
    const yx = y5 * x22;
    const yy = y5 * y22;
    const zx = z4 * x22;
    const zy = z4 * y22;
    const zz = z4 * z22;
    const wx = w5 * x22;
    const wy = w5 * y22;
    const wz = w5 * z22;
    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;
    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;
    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function frustum2(out, left, right, bottom, top, near, far) {
    const rl = 1 / (right - left);
    const tb = 1 / (top - bottom);
    const nf = 1 / (near - far);
    out[0] = near * 2 * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = near * 2 * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = far * near * 2 * nf;
    out[15] = 0;
    return out;
  }
  function perspectiveNO2(out, fovy, aspect, near, far) {
    const f6 = 1 / Math.tan(fovy / 2);
    out[0] = f6 / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f6;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
      const nf = 1 / (near - far);
      out[10] = (far + near) * nf;
      out[14] = 2 * far * near * nf;
    } else {
      out[10] = -1;
      out[14] = -2 * near;
    }
    return out;
  }
  var perspective2 = perspectiveNO2;
  function orthoNO2(out, left, right, bottom, top, near, far) {
    const lr = 1 / (left - right);
    const bt = 1 / (bottom - top);
    const nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
  }
  var ortho2 = orthoNO2;
  function lookAt2(out, eye, center2, up) {
    let len9;
    let x0;
    let x1;
    let x22;
    let y0;
    let y1;
    let y22;
    let z0;
    let z1;
    let z22;
    const eyex = eye[0];
    const eyey = eye[1];
    const eyez = eye[2];
    const upx = up[0];
    const upy = up[1];
    const upz = up[2];
    const centerx = center2[0];
    const centery = center2[1];
    const centerz = center2[2];
    if (Math.abs(eyex - centerx) < EPSILON26 && Math.abs(eyey - centery) < EPSILON26 && Math.abs(eyez - centerz) < EPSILON26) {
      return identity4(out);
    }
    z0 = eyex - centerx;
    z1 = eyey - centery;
    z22 = eyez - centerz;
    len9 = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z22 * z22);
    z0 *= len9;
    z1 *= len9;
    z22 *= len9;
    x0 = upy * z22 - upz * z1;
    x1 = upz * z0 - upx * z22;
    x22 = upx * z1 - upy * z0;
    len9 = Math.sqrt(x0 * x0 + x1 * x1 + x22 * x22);
    if (!len9) {
      x0 = 0;
      x1 = 0;
      x22 = 0;
    } else {
      len9 = 1 / len9;
      x0 *= len9;
      x1 *= len9;
      x22 *= len9;
    }
    y0 = z1 * x22 - z22 * x1;
    y1 = z22 * x0 - z0 * x22;
    y22 = z0 * x1 - z1 * x0;
    len9 = Math.sqrt(y0 * y0 + y1 * y1 + y22 * y22);
    if (!len9) {
      y0 = 0;
      y1 = 0;
      y22 = 0;
    } else {
      len9 = 1 / len9;
      y0 *= len9;
      y1 *= len9;
      y22 *= len9;
    }
    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x22;
    out[9] = y22;
    out[10] = z22;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x22 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y22 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z22 * eyez);
    out[15] = 1;
    return out;
  }

  // ../../node_modules/@loaders.gl/tiles/node_modules/@math.gl/core/dist/gl-matrix/vec4.js
  function create13() {
    const out = new ARRAY_TYPE4(4);
    if (ARRAY_TYPE4 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
    }
    return out;
  }
  function add8(out, a6, b4) {
    out[0] = a6[0] + b4[0];
    out[1] = a6[1] + b4[1];
    out[2] = a6[2] + b4[2];
    out[3] = a6[3] + b4[3];
    return out;
  }
  function scale11(out, a6, b4) {
    out[0] = a6[0] * b4;
    out[1] = a6[1] * b4;
    out[2] = a6[2] * b4;
    out[3] = a6[3] * b4;
    return out;
  }
  function length7(a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = a6[3];
    return Math.sqrt(x4 * x4 + y5 * y5 + z4 * z4 + w5 * w5);
  }
  function squaredLength6(a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = a6[3];
    return x4 * x4 + y5 * y5 + z4 * z4 + w5 * w5;
  }
  function normalize8(out, a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = a6[3];
    let len9 = x4 * x4 + y5 * y5 + z4 * z4 + w5 * w5;
    if (len9 > 0) {
      len9 = 1 / Math.sqrt(len9);
    }
    out[0] = x4 * len9;
    out[1] = y5 * len9;
    out[2] = z4 * len9;
    out[3] = w5 * len9;
    return out;
  }
  function dot8(a6, b4) {
    return a6[0] * b4[0] + a6[1] * b4[1] + a6[2] * b4[2] + a6[3] * b4[3];
  }
  function lerp8(out, a6, b4, t5) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    out[0] = ax + t5 * (b4[0] - ax);
    out[1] = ay + t5 * (b4[1] - ay);
    out[2] = az + t5 * (b4[2] - az);
    out[3] = aw + t5 * (b4[3] - aw);
    return out;
  }
  function transformMat48(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = a6[3];
    out[0] = m3[0] * x4 + m3[4] * y5 + m3[8] * z4 + m3[12] * w5;
    out[1] = m3[1] * x4 + m3[5] * y5 + m3[9] * z4 + m3[13] * w5;
    out[2] = m3[2] * x4 + m3[6] * y5 + m3[10] * z4 + m3[14] * w5;
    out[3] = m3[3] * x4 + m3[7] * y5 + m3[11] * z4 + m3[15] * w5;
    return out;
  }
  function transformQuat6(out, a6, q3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const qx = q3[0];
    const qy = q3[1];
    const qz = q3[2];
    const qw = q3[3];
    const ix = qw * x4 + qy * z4 - qz * y5;
    const iy = qw * y5 + qz * x4 - qx * z4;
    const iz = qw * z4 + qx * y5 - qy * x4;
    const iw = -qx * x4 - qy * y5 - qz * z4;
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    out[3] = a6[3];
    return out;
  }
  var forEach10 = function() {
    const vec = create13();
    return function(a6, stride, offset, count3, fn, arg) {
      let i7;
      let l5;
      if (!stride) {
        stride = 4;
      }
      if (!offset) {
        offset = 0;
      }
      if (count3) {
        l5 = Math.min(count3 * stride + offset, a6.length);
      } else {
        l5 = a6.length;
      }
      for (i7 = offset; i7 < l5; i7 += stride) {
        vec[0] = a6[i7];
        vec[1] = a6[i7 + 1];
        vec[2] = a6[i7 + 2];
        vec[3] = a6[i7 + 3];
        fn(vec, vec, arg);
        a6[i7] = vec[0];
        a6[i7 + 1] = vec[1];
        a6[i7 + 2] = vec[2];
        a6[i7 + 3] = vec[3];
      }
      return a6;
    };
  }();

  // ../../node_modules/@loaders.gl/tiles/node_modules/@math.gl/core/dist/classes/matrix4.js
  var INDICES5;
  (function(INDICES10) {
    INDICES10[INDICES10["COL0ROW0"] = 0] = "COL0ROW0";
    INDICES10[INDICES10["COL0ROW1"] = 1] = "COL0ROW1";
    INDICES10[INDICES10["COL0ROW2"] = 2] = "COL0ROW2";
    INDICES10[INDICES10["COL0ROW3"] = 3] = "COL0ROW3";
    INDICES10[INDICES10["COL1ROW0"] = 4] = "COL1ROW0";
    INDICES10[INDICES10["COL1ROW1"] = 5] = "COL1ROW1";
    INDICES10[INDICES10["COL1ROW2"] = 6] = "COL1ROW2";
    INDICES10[INDICES10["COL1ROW3"] = 7] = "COL1ROW3";
    INDICES10[INDICES10["COL2ROW0"] = 8] = "COL2ROW0";
    INDICES10[INDICES10["COL2ROW1"] = 9] = "COL2ROW1";
    INDICES10[INDICES10["COL2ROW2"] = 10] = "COL2ROW2";
    INDICES10[INDICES10["COL2ROW3"] = 11] = "COL2ROW3";
    INDICES10[INDICES10["COL3ROW0"] = 12] = "COL3ROW0";
    INDICES10[INDICES10["COL3ROW1"] = 13] = "COL3ROW1";
    INDICES10[INDICES10["COL3ROW2"] = 14] = "COL3ROW2";
    INDICES10[INDICES10["COL3ROW3"] = 15] = "COL3ROW3";
  })(INDICES5 || (INDICES5 = {}));
  var DEFAULT_FOVY2 = 45 * Math.PI / 180;
  var DEFAULT_ASPECT2 = 1;
  var DEFAULT_NEAR2 = 0.1;
  var DEFAULT_FAR2 = 500;
  var IDENTITY_MATRIX7 = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
  var Matrix42 = class extends Matrix5 {
    static get IDENTITY() {
      return getIdentityMatrix5();
    }
    static get ZERO() {
      return getZeroMatrix5();
    }
    get ELEMENTS() {
      return 16;
    }
    get RANK() {
      return 4;
    }
    get INDICES() {
      return INDICES5;
    }
    constructor(array) {
      super(-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0);
      if (arguments.length === 1 && Array.isArray(array)) {
        this.copy(array);
      } else {
        this.identity();
      }
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      this[3] = array[3];
      this[4] = array[4];
      this[5] = array[5];
      this[6] = array[6];
      this[7] = array[7];
      this[8] = array[8];
      this[9] = array[9];
      this[10] = array[10];
      this[11] = array[11];
      this[12] = array[12];
      this[13] = array[13];
      this[14] = array[14];
      this[15] = array[15];
      return this.check();
    }
    // eslint-disable-next-line max-params
    set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {
      this[0] = m00;
      this[1] = m10;
      this[2] = m20;
      this[3] = m30;
      this[4] = m01;
      this[5] = m11;
      this[6] = m21;
      this[7] = m31;
      this[8] = m02;
      this[9] = m12;
      this[10] = m22;
      this[11] = m32;
      this[12] = m03;
      this[13] = m13;
      this[14] = m23;
      this[15] = m33;
      return this.check();
    }
    // accepts row major order, stores as column major
    // eslint-disable-next-line max-params
    setRowMajor(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
      this[0] = m00;
      this[1] = m10;
      this[2] = m20;
      this[3] = m30;
      this[4] = m01;
      this[5] = m11;
      this[6] = m21;
      this[7] = m31;
      this[8] = m02;
      this[9] = m12;
      this[10] = m22;
      this[11] = m32;
      this[12] = m03;
      this[13] = m13;
      this[14] = m23;
      this[15] = m33;
      return this.check();
    }
    toRowMajor(result) {
      result[0] = this[0];
      result[1] = this[4];
      result[2] = this[8];
      result[3] = this[12];
      result[4] = this[1];
      result[5] = this[5];
      result[6] = this[9];
      result[7] = this[13];
      result[8] = this[2];
      result[9] = this[6];
      result[10] = this[10];
      result[11] = this[14];
      result[12] = this[3];
      result[13] = this[7];
      result[14] = this[11];
      result[15] = this[15];
      return result;
    }
    // Constructors
    /** Set to identity matrix */
    identity() {
      return this.copy(IDENTITY_MATRIX7);
    }
    /**
     *
     * @param object
     * @returns self
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    fromObject(object) {
      return this.check();
    }
    /**
     * Calculates a 4x4 matrix from the given quaternion
     * @param quaternion Quaternion to create matrix from
     * @returns self
     */
    fromQuaternion(quaternion) {
      fromQuat6(this, quaternion);
      return this.check();
    }
    /**
     * Generates a frustum matrix with the given bounds
     * @param view.left - Left bound of the frustum
     * @param view.right - Right bound of the frustum
     * @param view.bottom - Bottom bound of the frustum
     * @param view.top - Top bound of the frustum
     * @param view.near - Near bound of the frustum
     * @param view.far - Far bound of the frustum. Can be set to Infinity.
     * @returns self
     */
    frustum(view) {
      const { left, right, bottom, top, near = DEFAULT_NEAR2, far = DEFAULT_FAR2 } = view;
      if (far === Infinity) {
        computeInfinitePerspectiveOffCenter2(this, left, right, bottom, top, near);
      } else {
        frustum2(this, left, right, bottom, top, near, far);
      }
      return this.check();
    }
    /**
     * Generates a look-at matrix with the given eye position, focal point,
     * and up axis
     * @param view.eye - (vector) Position of the viewer
     * @param view.center - (vector) Point the viewer is looking at
     * @param view.up - (vector) Up axis
     * @returns self
     */
    lookAt(view) {
      const { eye, center: center2 = [0, 0, 0], up = [0, 1, 0] } = view;
      lookAt2(this, eye, center2, up);
      return this.check();
    }
    /**
     * Generates a orthogonal projection matrix with the given bounds
     * from "traditional" view space parameters
     * @param view.left - Left bound of the frustum
     * @param view.right number  Right bound of the frustum
     * @param view.bottom - Bottom bound of the frustum
     * @param view.top number  Top bound of the frustum
     * @param view.near - Near bound of the frustum
     * @param view.far number  Far bound of the frustum
     * @returns self
     */
    ortho(view) {
      const { left, right, bottom, top, near = DEFAULT_NEAR2, far = DEFAULT_FAR2 } = view;
      ortho2(this, left, right, bottom, top, near, far);
      return this.check();
    }
    /**
     * Generates an orthogonal projection matrix with the same parameters
     * as a perspective matrix (plus focalDistance)
     * @param view.fovy Vertical field of view in radians
     * @param view.aspect Aspect ratio. Typically viewport width / viewport height
     * @param view.focalDistance Distance in the view frustum used for extent calculations
     * @param view.near Near bound of the frustum
     * @param view.far Far bound of the frustum
     * @returns self
     */
    orthographic(view) {
      const { fovy = DEFAULT_FOVY2, aspect = DEFAULT_ASPECT2, focalDistance = 1, near = DEFAULT_NEAR2, far = DEFAULT_FAR2 } = view;
      checkRadians2(fovy);
      const halfY = fovy / 2;
      const top = focalDistance * Math.tan(halfY);
      const right = top * aspect;
      return this.ortho({
        left: -right,
        right,
        bottom: -top,
        top,
        near,
        far
      });
    }
    /**
     * Generates a perspective projection matrix with the given bounds
     * @param view.fovy Vertical field of view in radians
     * @param view.aspect Aspect ratio. typically viewport width/height
     * @param view.near Near bound of the frustum
     * @param view.far Far bound of the frustum
     * @returns self
     */
    perspective(view) {
      const { fovy = 45 * Math.PI / 180, aspect = 1, near = 0.1, far = 500 } = view;
      checkRadians2(fovy);
      perspective2(this, fovy, aspect, near, far);
      return this.check();
    }
    // Accessors
    determinant() {
      return determinant6(this);
    }
    /**
     * Extracts the non-uniform scale assuming the matrix is an affine transformation.
     * The scales are the "lengths" of the column vectors in the upper-left 3x3 matrix.
     * @param result
     * @returns self
     */
    getScale(result = [-0, -0, -0]) {
      result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);
      result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);
      result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);
      return result;
    }
    /**
     * Gets the translation portion, assuming the matrix is a affine transformation matrix.
     * @param result
     * @returns self
     */
    getTranslation(result = [-0, -0, -0]) {
      result[0] = this[12];
      result[1] = this[13];
      result[2] = this[14];
      return result;
    }
    /**
     * Gets upper left 3x3 pure rotation matrix (non-scaling), assume affine transformation matrix
     * @param result
     * @param scaleResult
     * @returns self
     */
    getRotation(result, scaleResult) {
      result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];
      scaleResult = scaleResult || [-0, -0, -0];
      const scale24 = this.getScale(scaleResult);
      const inverseScale0 = 1 / scale24[0];
      const inverseScale1 = 1 / scale24[1];
      const inverseScale2 = 1 / scale24[2];
      result[0] = this[0] * inverseScale0;
      result[1] = this[1] * inverseScale1;
      result[2] = this[2] * inverseScale2;
      result[3] = 0;
      result[4] = this[4] * inverseScale0;
      result[5] = this[5] * inverseScale1;
      result[6] = this[6] * inverseScale2;
      result[7] = 0;
      result[8] = this[8] * inverseScale0;
      result[9] = this[9] * inverseScale1;
      result[10] = this[10] * inverseScale2;
      result[11] = 0;
      result[12] = 0;
      result[13] = 0;
      result[14] = 0;
      result[15] = 1;
      return result;
    }
    /**
     *
     * @param result
     * @param scaleResult
     * @returns self
     */
    getRotationMatrix3(result, scaleResult) {
      result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0];
      scaleResult = scaleResult || [-0, -0, -0];
      const scale24 = this.getScale(scaleResult);
      const inverseScale0 = 1 / scale24[0];
      const inverseScale1 = 1 / scale24[1];
      const inverseScale2 = 1 / scale24[2];
      result[0] = this[0] * inverseScale0;
      result[1] = this[1] * inverseScale1;
      result[2] = this[2] * inverseScale2;
      result[3] = this[4] * inverseScale0;
      result[4] = this[5] * inverseScale1;
      result[5] = this[6] * inverseScale2;
      result[6] = this[8] * inverseScale0;
      result[7] = this[9] * inverseScale1;
      result[8] = this[10] * inverseScale2;
      return result;
    }
    // Modifiers
    transpose() {
      transpose6(this, this);
      return this.check();
    }
    invert() {
      invert7(this, this);
      return this.check();
    }
    // Operations
    multiplyLeft(a6) {
      multiply10(this, a6, this);
      return this.check();
    }
    multiplyRight(a6) {
      multiply10(this, this, a6);
      return this.check();
    }
    // Rotates a matrix by the given angle around the X axis
    rotateX(radians6) {
      rotateX7(this, this, radians6);
      return this.check();
    }
    // Rotates a matrix by the given angle around the Y axis.
    rotateY(radians6) {
      rotateY7(this, this, radians6);
      return this.check();
    }
    /**
     * Rotates a matrix by the given angle around the Z axis.
     * @param radians
     * @returns self
     */
    rotateZ(radians6) {
      rotateZ7(this, this, radians6);
      return this.check();
    }
    /**
     *
     * @param param0
     * @returns self
     */
    rotateXYZ(angleXYZ) {
      return this.rotateX(angleXYZ[0]).rotateY(angleXYZ[1]).rotateZ(angleXYZ[2]);
    }
    /**
     *
     * @param radians
     * @param axis
     * @returns self
     */
    rotateAxis(radians6, axis) {
      rotate7(this, this, radians6, axis);
      return this.check();
    }
    /**
     *
     * @param factor
     * @returns self
     */
    scale(factor) {
      scale10(this, this, Array.isArray(factor) ? factor : [factor, factor, factor]);
      return this.check();
    }
    /**
     *
     * @param vec
     * @returns self
     */
    translate(vector) {
      translate5(this, this, vector);
      return this.check();
    }
    // Transforms
    /**
     * Transforms any 2, 3 or 4 element vector. 2 and 3 elements are treated as points
     * @param vector
     * @param result
     * @returns self
     */
    transform(vector, result) {
      if (vector.length === 4) {
        result = transformMat48(result || [-0, -0, -0, -0], vector, this);
        checkVector3(result, 4);
        return result;
      }
      return this.transformAsPoint(vector, result);
    }
    /**
     * Transforms any 2 or 3 element array as point (w implicitly 1)
     * @param vector
     * @param result
     * @returns self
     */
    transformAsPoint(vector, result) {
      const { length: length17 } = vector;
      let out;
      switch (length17) {
        case 2:
          out = transformMat46(result || [-0, -0], vector, this);
          break;
        case 3:
          out = transformMat47(result || [-0, -0, -0], vector, this);
          break;
        default:
          throw new Error("Illegal vector");
      }
      checkVector3(out, vector.length);
      return out;
    }
    /**
     * Transforms any 2 or 3 element array as vector (w implicitly 0)
     * @param vector
     * @param result
     * @returns self
     */
    transformAsVector(vector, result) {
      let out;
      switch (vector.length) {
        case 2:
          out = vec2_transformMat4AsVector2(result || [-0, -0], vector, this);
          break;
        case 3:
          out = vec3_transformMat4AsVector3(result || [-0, -0, -0], vector, this);
          break;
        default:
          throw new Error("Illegal vector");
      }
      checkVector3(out, vector.length);
      return out;
    }
    /** @deprecated */
    transformPoint(vector, result) {
      return this.transformAsPoint(vector, result);
    }
    /** @deprecated */
    transformVector(vector, result) {
      return this.transformAsPoint(vector, result);
    }
    /** @deprecated */
    transformDirection(vector, result) {
      return this.transformAsVector(vector, result);
    }
    // three.js math API compatibility
    makeRotationX(radians6) {
      return this.identity().rotateX(radians6);
    }
    makeTranslation(x4, y5, z4) {
      return this.identity().translate([x4, y5, z4]);
    }
  };
  var ZERO8;
  var IDENTITY3;
  function getZeroMatrix5() {
    if (!ZERO8) {
      ZERO8 = new Matrix42([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
      Object.freeze(ZERO8);
    }
    return ZERO8;
  }
  function getIdentityMatrix5() {
    if (!IDENTITY3) {
      IDENTITY3 = new Matrix42();
      Object.freeze(IDENTITY3);
    }
    return IDENTITY3;
  }
  function checkRadians2(possiblyDegrees) {
    if (possiblyDegrees > Math.PI * 2) {
      throw Error("expected radians");
    }
  }
  function computeInfinitePerspectiveOffCenter2(result, left, right, bottom, top, near) {
    const column0Row0 = 2 * near / (right - left);
    const column1Row1 = 2 * near / (top - bottom);
    const column2Row0 = (right + left) / (right - left);
    const column2Row1 = (top + bottom) / (top - bottom);
    const column2Row2 = -1;
    const column2Row3 = -1;
    const column3Row2 = -2 * near;
    result[0] = column0Row0;
    result[1] = 0;
    result[2] = 0;
    result[3] = 0;
    result[4] = 0;
    result[5] = column1Row1;
    result[6] = 0;
    result[7] = 0;
    result[8] = column2Row0;
    result[9] = column2Row1;
    result[10] = column2Row2;
    result[11] = column2Row3;
    result[12] = 0;
    result[13] = 0;
    result[14] = column3Row2;
    result[15] = 0;
    return result;
  }

  // ../../node_modules/@loaders.gl/tiles/node_modules/@math.gl/core/dist/gl-matrix/quat.js
  function create14() {
    const out = new ARRAY_TYPE4(4);
    if (ARRAY_TYPE4 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }
    out[3] = 1;
    return out;
  }
  function identity5(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
  }
  function setAxisAngle3(out, axis, rad) {
    rad = rad * 0.5;
    const s5 = Math.sin(rad);
    out[0] = s5 * axis[0];
    out[1] = s5 * axis[1];
    out[2] = s5 * axis[2];
    out[3] = Math.cos(rad);
    return out;
  }
  function multiply11(out, a6, b4) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    const bx = b4[0];
    const by = b4[1];
    const bz = b4[2];
    const bw = b4[3];
    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
  }
  function rotateX8(out, a6, rad) {
    rad *= 0.5;
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    const bx = Math.sin(rad);
    const bw = Math.cos(rad);
    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
  }
  function rotateY8(out, a6, rad) {
    rad *= 0.5;
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    const by = Math.sin(rad);
    const bw = Math.cos(rad);
    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
  }
  function rotateZ8(out, a6, rad) {
    rad *= 0.5;
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    const bz = Math.sin(rad);
    const bw = Math.cos(rad);
    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
  }
  function calculateW3(out, a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    out[0] = x4;
    out[1] = y5;
    out[2] = z4;
    out[3] = Math.sqrt(Math.abs(1 - x4 * x4 - y5 * y5 - z4 * z4));
    return out;
  }
  function slerp4(out, a6, b4, t5) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    let bx = b4[0];
    let by = b4[1];
    let bz = b4[2];
    let bw = b4[3];
    let cosom;
    let omega;
    let scale0;
    let scale1;
    let sinom;
    cosom = ax * bx + ay * by + az * bz + aw * bw;
    if (cosom < 0) {
      cosom = -cosom;
      bx = -bx;
      by = -by;
      bz = -bz;
      bw = -bw;
    }
    if (1 - cosom > EPSILON26) {
      omega = Math.acos(cosom);
      sinom = Math.sin(omega);
      scale0 = Math.sin((1 - t5) * omega) / sinom;
      scale1 = Math.sin(t5 * omega) / sinom;
    } else {
      scale0 = 1 - t5;
      scale1 = t5;
    }
    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    return out;
  }
  function invert8(out, a6) {
    const a0 = a6[0];
    const a1 = a6[1];
    const a22 = a6[2];
    const a32 = a6[3];
    const dot18 = a0 * a0 + a1 * a1 + a22 * a22 + a32 * a32;
    const invDot = dot18 ? 1 / dot18 : 0;
    out[0] = -a0 * invDot;
    out[1] = -a1 * invDot;
    out[2] = -a22 * invDot;
    out[3] = a32 * invDot;
    return out;
  }
  function conjugate3(out, a6) {
    out[0] = -a6[0];
    out[1] = -a6[1];
    out[2] = -a6[2];
    out[3] = a6[3];
    return out;
  }
  function fromMat33(out, m3) {
    const fTrace = m3[0] + m3[4] + m3[8];
    let fRoot;
    if (fTrace > 0) {
      fRoot = Math.sqrt(fTrace + 1);
      out[3] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[0] = (m3[5] - m3[7]) * fRoot;
      out[1] = (m3[6] - m3[2]) * fRoot;
      out[2] = (m3[1] - m3[3]) * fRoot;
    } else {
      let i7 = 0;
      if (m3[4] > m3[0])
        i7 = 1;
      if (m3[8] > m3[i7 * 3 + i7])
        i7 = 2;
      const j4 = (i7 + 1) % 3;
      const k4 = (i7 + 2) % 3;
      fRoot = Math.sqrt(m3[i7 * 3 + i7] - m3[j4 * 3 + j4] - m3[k4 * 3 + k4] + 1);
      out[i7] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[3] = (m3[j4 * 3 + k4] - m3[k4 * 3 + j4]) * fRoot;
      out[j4] = (m3[j4 * 3 + i7] + m3[i7 * 3 + j4]) * fRoot;
      out[k4] = (m3[k4 * 3 + i7] + m3[i7 * 3 + k4]) * fRoot;
    }
    return out;
  }
  var add9 = add8;
  var scale12 = scale11;
  var dot9 = dot8;
  var lerp9 = lerp8;
  var length8 = length7;
  var squaredLength7 = squaredLength6;
  var normalize9 = normalize8;
  var rotationTo3 = function() {
    const tmpvec3 = create11();
    const xUnitVec3 = fromValues6(1, 0, 0);
    const yUnitVec3 = fromValues6(0, 1, 0);
    return function(out, a6, b4) {
      const dot18 = dot7(a6, b4);
      if (dot18 < -0.999999) {
        cross6(tmpvec3, xUnitVec3, a6);
        if (len5(tmpvec3) < 1e-6)
          cross6(tmpvec3, yUnitVec3, a6);
        normalize7(tmpvec3, tmpvec3);
        setAxisAngle3(out, tmpvec3, Math.PI);
        return out;
      } else if (dot18 > 0.999999) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        return out;
      }
      cross6(tmpvec3, a6, b4);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot18;
      return normalize9(out, out);
    };
  }();
  var sqlerp3 = function() {
    const temp1 = create14();
    const temp2 = create14();
    return function(out, a6, b4, c5, d5, t5) {
      slerp4(temp1, a6, d5, t5);
      slerp4(temp2, b4, c5, t5);
      slerp4(out, temp1, temp2, 2 * t5 * (1 - t5));
      return out;
    };
  }();
  var setAxes3 = function() {
    const matr = create12();
    return function(out, view, right, up) {
      matr[0] = right[0];
      matr[3] = right[1];
      matr[6] = right[2];
      matr[1] = up[0];
      matr[4] = up[1];
      matr[7] = up[2];
      matr[2] = -view[0];
      matr[5] = -view[1];
      matr[8] = -view[2];
      return normalize9(out, fromMat33(out, matr));
    };
  }();

  // ../../node_modules/@loaders.gl/tiles/node_modules/@math.gl/core/dist/classes/quaternion.js
  var IDENTITY_QUATERNION2 = [0, 0, 0, 1];
  var Quaternion2 = class extends MathArray3 {
    constructor(x4 = 0, y5 = 0, z4 = 0, w5 = 1) {
      super(-0, -0, -0, -0);
      if (Array.isArray(x4) && arguments.length === 1) {
        this.copy(x4);
      } else {
        this.set(x4, y5, z4, w5);
      }
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      this[3] = array[3];
      return this.check();
    }
    set(x4, y5, z4, w5) {
      this[0] = x4;
      this[1] = y5;
      this[2] = z4;
      this[3] = w5;
      return this.check();
    }
    fromObject(object) {
      this[0] = object.x;
      this[1] = object.y;
      this[2] = object.z;
      this[3] = object.w;
      return this.check();
    }
    /**
     * Creates a quaternion from the given 3x3 rotation matrix.
     * NOTE: The resultant quaternion is not normalized, so you should
     * be sure to renormalize the quaternion yourself where necessary.
     * @param m
     * @returns
     */
    fromMatrix3(m3) {
      fromMat33(this, m3);
      return this.check();
    }
    fromAxisRotation(axis, rad) {
      setAxisAngle3(this, axis, rad);
      return this.check();
    }
    /** Set a quat to the identity quaternion */
    identity() {
      identity5(this);
      return this.check();
    }
    // Set the components of a quat to the given values
    // set(i, j, k, l) {
    //   quat_set(this, i, j, k, l);
    //   return this.check();
    // }
    // Sets a quat from the given angle and rotation axis, then returns it.
    setAxisAngle(axis, rad) {
      return this.fromAxisRotation(axis, rad);
    }
    // Getters/setters
    get ELEMENTS() {
      return 4;
    }
    get x() {
      return this[0];
    }
    set x(value) {
      this[0] = checkNumber3(value);
    }
    get y() {
      return this[1];
    }
    set y(value) {
      this[1] = checkNumber3(value);
    }
    get z() {
      return this[2];
    }
    set z(value) {
      this[2] = checkNumber3(value);
    }
    get w() {
      return this[3];
    }
    set w(value) {
      this[3] = checkNumber3(value);
    }
    // Calculates the length of a quat
    len() {
      return length8(this);
    }
    // Calculates the squared length of a quat
    lengthSquared() {
      return squaredLength7(this);
    }
    // Calculates the dot product of two quat's
    // @return {Number}
    dot(a6) {
      return dot9(this, a6);
    }
    // Gets the rotation axis and angle for a given quaternion.
    // If a quaternion is created with setAxisAngle, this method will
    // return the same values as providied in the original parameter
    // list OR functionally equivalent values.
    // Example: The quaternion formed by axis [0, 0, 1] and angle -90
    // is the same as the quaternion formed by [0, 0, 1] and 270.
    // This method favors the latter.
    // @return {{[x,y,z], Number}}
    // getAxisAngle() {
    //   const axis = [];
    // //   const angle = quat_getAxisAngle(axis, this);
    //   return {axis, angle};
    // }
    // MODIFIERS
    // Sets a quaternion to represent the shortest rotation from one vector
    // to another. Both vectors are assumed to be unit length.
    rotationTo(vectorA, vectorB) {
      rotationTo3(this, vectorA, vectorB);
      return this.check();
    }
    // Sets the specified quaternion with values corresponding to the given axes.
    // Each axis is a vec3 and is expected to be unit length and perpendicular
    // to all other specified axes.
    // setAxes() {
    //   Number
    // }
    // Performs a spherical linear interpolation with two control points
    // sqlerp() {
    //   Number;
    // }
    // Adds two quat's
    add(a6) {
      add9(this, this, a6);
      return this.check();
    }
    // Calculates the W component of a quat from the X, Y, and Z components.
    // Any existing W component will be ignored.
    calculateW() {
      calculateW3(this, this);
      return this.check();
    }
    // Calculates the conjugate of a quat If the quaternion is normalized,
    // this function is faster than quat_invert and produces the same result.
    conjugate() {
      conjugate3(this, this);
      return this.check();
    }
    // Calculates the inverse of a quat
    invert() {
      invert8(this, this);
      return this.check();
    }
    // Performs a linear interpolation between two quat's
    lerp(a6, b4, t5) {
      if (t5 === void 0) {
        return this.lerp(this, a6, b4);
      }
      lerp9(this, a6, b4, t5);
      return this.check();
    }
    // Multiplies two quat's
    multiplyRight(a6) {
      multiply11(this, this, a6);
      return this.check();
    }
    multiplyLeft(a6) {
      multiply11(this, a6, this);
      return this.check();
    }
    // Normalize a quat
    normalize() {
      const length17 = this.len();
      const l5 = length17 > 0 ? 1 / length17 : 0;
      this[0] = this[0] * l5;
      this[1] = this[1] * l5;
      this[2] = this[2] * l5;
      this[3] = this[3] * l5;
      if (length17 === 0) {
        this[3] = 1;
      }
      return this.check();
    }
    // Rotates a quaternion by the given angle about the X axis
    rotateX(rad) {
      rotateX8(this, this, rad);
      return this.check();
    }
    // Rotates a quaternion by the given angle about the Y axis
    rotateY(rad) {
      rotateY8(this, this, rad);
      return this.check();
    }
    // Rotates a quaternion by the given angle about the Z axis
    rotateZ(rad) {
      rotateZ8(this, this, rad);
      return this.check();
    }
    // Scales a quat by a scalar number
    scale(b4) {
      scale12(this, this, b4);
      return this.check();
    }
    // Performs a spherical linear interpolation between two quat
    slerp(arg0, arg1, arg2) {
      let start;
      let target2;
      let ratio;
      switch (arguments.length) {
        case 1:
          ({
            start = IDENTITY_QUATERNION2,
            target: target2,
            ratio
          } = arg0);
          break;
        case 2:
          start = this;
          target2 = arg0;
          ratio = arg1;
          break;
        default:
          start = arg0;
          target2 = arg1;
          ratio = arg2;
      }
      slerp4(this, start, target2, ratio);
      return this.check();
    }
    transformVector4(vector, result = new Vector42()) {
      transformQuat6(result, vector, this);
      return checkVector3(result, 4);
    }
    // THREE.js Math API compatibility
    lengthSq() {
      return this.lengthSquared();
    }
    setFromAxisAngle(axis, rad) {
      return this.setAxisAngle(axis, rad);
    }
    premultiply(a6) {
      return this.multiplyLeft(a6);
    }
    multiply(a6) {
      return this.multiplyRight(a6);
    }
  };

  // ../../node_modules/@math.gl/geospatial/node_modules/@math.gl/core/dist/lib/common.js
  var RADIANS_TO_DEGREES6 = 1 / Math.PI * 180;
  var DEGREES_TO_RADIANS10 = 1 / 180 * Math.PI;
  var DEFAULT_CONFIG4 = {
    EPSILON: 1e-12,
    debug: false,
    precision: 4,
    printTypes: false,
    printDegrees: false,
    printRowMajor: true,
    _cartographicRadians: false
  };
  globalThis.mathgl = globalThis.mathgl || { config: { ...DEFAULT_CONFIG4 } };
  var config4 = globalThis.mathgl.config;
  function formatValue4(value, { precision = config4.precision } = {}) {
    value = round11(value);
    return `${parseFloat(value.toPrecision(precision))}`;
  }
  function isArray7(value) {
    return Array.isArray(value) || ArrayBuffer.isView(value) && !(value instanceof DataView);
  }
  function toRadians3(degrees6) {
    return radians3(degrees6);
  }
  function toDegrees3(radians6) {
    return degrees3(radians6);
  }
  function radians3(degrees6, result) {
    return map4(degrees6, (degrees7) => degrees7 * DEGREES_TO_RADIANS10, result);
  }
  function degrees3(radians6, result) {
    return map4(radians6, (radians7) => radians7 * RADIANS_TO_DEGREES6, result);
  }
  function equals9(a6, b4, epsilon) {
    const oldEpsilon = config4.EPSILON;
    if (epsilon) {
      config4.EPSILON = epsilon;
    }
    try {
      if (a6 === b4) {
        return true;
      }
      if (isArray7(a6) && isArray7(b4)) {
        if (a6.length !== b4.length) {
          return false;
        }
        for (let i7 = 0; i7 < a6.length; ++i7) {
          if (!equals9(a6[i7], b4[i7])) {
            return false;
          }
        }
        return true;
      }
      if (a6 && a6.equals) {
        return a6.equals(b4);
      }
      if (b4 && b4.equals) {
        return b4.equals(a6);
      }
      if (typeof a6 === "number" && typeof b4 === "number") {
        return Math.abs(a6 - b4) <= config4.EPSILON * Math.max(1, Math.abs(a6), Math.abs(b4));
      }
      return false;
    } finally {
      config4.EPSILON = oldEpsilon;
    }
  }
  function round11(value) {
    return Math.round(value / config4.EPSILON) * config4.EPSILON;
  }
  function duplicateArray3(array) {
    return array.clone ? array.clone() : new Array(array.length);
  }
  function map4(value, func, result) {
    if (isArray7(value)) {
      const array = value;
      result = result || duplicateArray3(array);
      for (let i7 = 0; i7 < result.length && i7 < array.length; ++i7) {
        const val2 = typeof value === "number" ? value : value[i7];
        result[i7] = func(val2, i7, result);
      }
      return result;
    }
    return func(value);
  }

  // ../../node_modules/@math.gl/geospatial/node_modules/@math.gl/core/dist/classes/base/math-array.js
  var MathArray4 = class extends Array {
    // Common methods
    /**
     * Clone the current object
     * @returns a new copy of this object
     */
    clone() {
      return new this.constructor().copy(this);
    }
    fromArray(array, offset = 0) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = array[i7 + offset];
      }
      return this.check();
    }
    toArray(targetArray = [], offset = 0) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        targetArray[offset + i7] = this[i7];
      }
      return targetArray;
    }
    toObject(targetObject) {
      return targetObject;
    }
    from(arrayOrObject) {
      return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : (
        // @ts-ignore
        this.fromObject(arrayOrObject)
      );
    }
    to(arrayOrObject) {
      if (arrayOrObject === this) {
        return this;
      }
      return isArray7(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);
    }
    toTarget(target2) {
      return target2 ? this.to(target2) : this;
    }
    /** @deprecated */
    toFloat32Array() {
      return new Float32Array(this);
    }
    toString() {
      return this.formatString(config4);
    }
    /** Formats string according to options */
    formatString(opts) {
      let string = "";
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        string += (i7 > 0 ? ", " : "") + formatValue4(this[i7], opts);
      }
      return `${opts.printTypes ? this.constructor.name : ""}[${string}]`;
    }
    equals(array) {
      if (!array || this.length !== array.length) {
        return false;
      }
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        if (!equals9(this[i7], array[i7])) {
          return false;
        }
      }
      return true;
    }
    exactEquals(array) {
      if (!array || this.length !== array.length) {
        return false;
      }
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        if (this[i7] !== array[i7]) {
          return false;
        }
      }
      return true;
    }
    // Modifiers
    /** Negates all values in this object */
    negate() {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = -this[i7];
      }
      return this.check();
    }
    lerp(a6, b4, t5) {
      if (t5 === void 0) {
        return this.lerp(this, a6, b4);
      }
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        const ai = a6[i7];
        const endValue = typeof b4 === "number" ? b4 : b4[i7];
        this[i7] = ai + t5 * (endValue - ai);
      }
      return this.check();
    }
    /** Minimal */
    min(vector) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.min(vector[i7], this[i7]);
      }
      return this.check();
    }
    /** Maximal */
    max(vector) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.max(vector[i7], this[i7]);
      }
      return this.check();
    }
    clamp(minVector, maxVector) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.min(Math.max(this[i7], minVector[i7]), maxVector[i7]);
      }
      return this.check();
    }
    add(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] += vector[i7];
        }
      }
      return this.check();
    }
    subtract(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] -= vector[i7];
        }
      }
      return this.check();
    }
    scale(scale24) {
      if (typeof scale24 === "number") {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] *= scale24;
        }
      } else {
        for (let i7 = 0; i7 < this.ELEMENTS && i7 < scale24.length; ++i7) {
          this[i7] *= scale24[i7];
        }
      }
      return this.check();
    }
    /**
     * Multiplies all elements by `scale`
     * Note: `Matrix4.multiplyByScalar` only scales its 3x3 "minor"
     */
    multiplyByScalar(scalar) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] *= scalar;
      }
      return this.check();
    }
    // Debug checks
    /** Throws an error if array length is incorrect or contains illegal values */
    check() {
      if (config4.debug && !this.validate()) {
        throw new Error(`math.gl: ${this.constructor.name} some fields set to invalid numbers'`);
      }
      return this;
    }
    /** Returns false if the array length is incorrect or contains illegal values */
    validate() {
      let valid = this.length === this.ELEMENTS;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        valid = valid && Number.isFinite(this[i7]);
      }
      return valid;
    }
    // three.js compatibility
    /** @deprecated */
    sub(a6) {
      return this.subtract(a6);
    }
    /** @deprecated */
    setScalar(a6) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = a6;
      }
      return this.check();
    }
    /** @deprecated */
    addScalar(a6) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] += a6;
      }
      return this.check();
    }
    /** @deprecated */
    subScalar(a6) {
      return this.addScalar(-a6);
    }
    /** @deprecated */
    multiplyScalar(scalar) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] *= scalar;
      }
      return this.check();
    }
    /** @deprecated */
    divideScalar(a6) {
      return this.multiplyByScalar(1 / a6);
    }
    /** @deprecated */
    clampScalar(min7, max7) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.min(Math.max(this[i7], min7), max7);
      }
      return this.check();
    }
    /** @deprecated */
    get elements() {
      return this;
    }
  };

  // ../../node_modules/@math.gl/geospatial/node_modules/@math.gl/core/dist/lib/validators.js
  function validateVector4(v5, length17) {
    if (v5.length !== length17) {
      return false;
    }
    for (let i7 = 0; i7 < v5.length; ++i7) {
      if (!Number.isFinite(v5[i7])) {
        return false;
      }
    }
    return true;
  }
  function checkNumber4(value) {
    if (!Number.isFinite(value)) {
      throw new Error(`Invalid number ${JSON.stringify(value)}`);
    }
    return value;
  }
  function checkVector4(v5, length17, callerName = "") {
    if (config4.debug && !validateVector4(v5, length17)) {
      throw new Error(`math.gl: ${callerName} some fields set to invalid numbers'`);
    }
    return v5;
  }

  // ../../node_modules/@math.gl/geospatial/node_modules/@math.gl/core/dist/lib/assert.js
  function assert12(condition, message2) {
    if (!condition) {
      throw new Error(`math.gl assertion ${message2}`);
    }
  }

  // ../../node_modules/@math.gl/geospatial/node_modules/@math.gl/core/dist/classes/base/vector.js
  var Vector7 = class extends MathArray4 {
    // ACCESSORS
    get x() {
      return this[0];
    }
    set x(value) {
      this[0] = checkNumber4(value);
    }
    get y() {
      return this[1];
    }
    set y(value) {
      this[1] = checkNumber4(value);
    }
    /**
     * Returns the length of the vector from the origin to the point described by this vector
     *
     * @note `length` is a reserved word for Arrays, so `v.length()` will return number of elements
     * Instead we provide `len` and `magnitude`
     */
    len() {
      return Math.sqrt(this.lengthSquared());
    }
    /**
     * Returns the length of the vector from the origin to the point described by this vector
     */
    magnitude() {
      return this.len();
    }
    /**
     * Returns the squared length of the vector from the origin to the point described by this vector
     */
    lengthSquared() {
      let length17 = 0;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        length17 += this[i7] * this[i7];
      }
      return length17;
    }
    /**
     * Returns the squared length of the vector from the origin to the point described by this vector
     */
    magnitudeSquared() {
      return this.lengthSquared();
    }
    distance(mathArray) {
      return Math.sqrt(this.distanceSquared(mathArray));
    }
    distanceSquared(mathArray) {
      let length17 = 0;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        const dist6 = this[i7] - mathArray[i7];
        length17 += dist6 * dist6;
      }
      return checkNumber4(length17);
    }
    dot(mathArray) {
      let product = 0;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        product += this[i7] * mathArray[i7];
      }
      return checkNumber4(product);
    }
    // MODIFIERS
    normalize() {
      const length17 = this.magnitude();
      if (length17 !== 0) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] /= length17;
        }
      }
      return this.check();
    }
    multiply(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] *= vector[i7];
        }
      }
      return this.check();
    }
    divide(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] /= vector[i7];
        }
      }
      return this.check();
    }
    // THREE.js compatibility
    lengthSq() {
      return this.lengthSquared();
    }
    distanceTo(vector) {
      return this.distance(vector);
    }
    distanceToSquared(vector) {
      return this.distanceSquared(vector);
    }
    getComponent(i7) {
      assert12(i7 >= 0 && i7 < this.ELEMENTS, "index is out of range");
      return checkNumber4(this[i7]);
    }
    setComponent(i7, value) {
      assert12(i7 >= 0 && i7 < this.ELEMENTS, "index is out of range");
      this[i7] = value;
      return this.check();
    }
    addVectors(a6, b4) {
      return this.copy(a6).add(b4);
    }
    subVectors(a6, b4) {
      return this.copy(a6).subtract(b4);
    }
    multiplyVectors(a6, b4) {
      return this.copy(a6).multiply(b4);
    }
    addScaledVector(a6, b4) {
      return this.add(new this.constructor(a6).multiplyScalar(b4));
    }
  };

  // ../../node_modules/@math.gl/geospatial/node_modules/@math.gl/core/dist/gl-matrix/common.js
  var EPSILON27 = 1e-6;
  var ARRAY_TYPE5 = typeof Float32Array !== "undefined" ? Float32Array : Array;
  var RANDOM5 = Math.random;
  function round12(a6) {
    if (a6 >= 0)
      return Math.round(a6);
    return a6 % 0.5 === 0 ? Math.floor(a6) : Math.round(a6);
  }
  var degree5 = Math.PI / 180;

  // ../../node_modules/@math.gl/geospatial/node_modules/@math.gl/core/dist/gl-matrix/vec2.js
  function create15() {
    const out = new ARRAY_TYPE5(2);
    if (ARRAY_TYPE5 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
    }
    return out;
  }
  function transformMat49(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[4] * y5 + m3[12];
    out[1] = m3[1] * x4 + m3[5] * y5 + m3[13];
    return out;
  }
  var forEach11 = function() {
    const vec = create15();
    return function(a6, stride, offset, count3, fn, arg) {
      let i7;
      let l5;
      if (!stride) {
        stride = 2;
      }
      if (!offset) {
        offset = 0;
      }
      if (count3) {
        l5 = Math.min(count3 * stride + offset, a6.length);
      } else {
        l5 = a6.length;
      }
      for (i7 = offset; i7 < l5; i7 += stride) {
        vec[0] = a6[i7];
        vec[1] = a6[i7 + 1];
        fn(vec, vec, arg);
        a6[i7] = vec[0];
        a6[i7 + 1] = vec[1];
      }
      return a6;
    };
  }();

  // ../../node_modules/@math.gl/geospatial/node_modules/@math.gl/core/dist/lib/gl-matrix-extras.js
  function vec2_transformMat4AsVector3(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const w5 = m3[3] * x4 + m3[7] * y5 || 1;
    out[0] = (m3[0] * x4 + m3[4] * y5) / w5;
    out[1] = (m3[1] * x4 + m3[5] * y5) / w5;
    return out;
  }
  function vec3_transformMat4AsVector4(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = m3[3] * x4 + m3[7] * y5 + m3[11] * z4 || 1;
    out[0] = (m3[0] * x4 + m3[4] * y5 + m3[8] * z4) / w5;
    out[1] = (m3[1] * x4 + m3[5] * y5 + m3[9] * z4) / w5;
    out[2] = (m3[2] * x4 + m3[6] * y5 + m3[10] * z4) / w5;
    return out;
  }
  function vec3_transformMat24(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[2] * y5;
    out[1] = m3[1] * x4 + m3[3] * y5;
    out[2] = a6[2];
    return out;
  }

  // ../../node_modules/@math.gl/geospatial/node_modules/@math.gl/core/dist/gl-matrix/vec3.js
  var vec3_exports4 = {};
  __export(vec3_exports4, {
    add: () => add10,
    angle: () => angle6,
    bezier: () => bezier3,
    ceil: () => ceil5,
    clone: () => clone9,
    copy: () => copy8,
    create: () => create16,
    cross: () => cross7,
    dist: () => dist5,
    distance: () => distance6,
    div: () => div5,
    divide: () => divide5,
    dot: () => dot10,
    equals: () => equals10,
    exactEquals: () => exactEquals9,
    floor: () => floor5,
    forEach: () => forEach12,
    fromValues: () => fromValues8,
    hermite: () => hermite3,
    inverse: () => inverse5,
    len: () => len6,
    length: () => length9,
    lerp: () => lerp11,
    max: () => max5,
    min: () => min5,
    mul: () => mul6,
    multiply: () => multiply12,
    negate: () => negate5,
    normalize: () => normalize10,
    random: () => random5,
    rotateX: () => rotateX9,
    rotateY: () => rotateY9,
    rotateZ: () => rotateZ9,
    round: () => round13,
    scale: () => scale13,
    scaleAndAdd: () => scaleAndAdd5,
    set: () => set7,
    slerp: () => slerp5,
    sqrDist: () => sqrDist5,
    sqrLen: () => sqrLen5,
    squaredDistance: () => squaredDistance5,
    squaredLength: () => squaredLength8,
    str: () => str6,
    sub: () => sub6,
    subtract: () => subtract6,
    transformMat3: () => transformMat38,
    transformMat4: () => transformMat410,
    transformQuat: () => transformQuat7,
    zero: () => zero5
  });
  function create16() {
    const out = new ARRAY_TYPE5(3);
    if (ARRAY_TYPE5 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }
    return out;
  }
  function clone9(a6) {
    const out = new ARRAY_TYPE5(3);
    out[0] = a6[0];
    out[1] = a6[1];
    out[2] = a6[2];
    return out;
  }
  function length9(a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    return Math.sqrt(x4 * x4 + y5 * y5 + z4 * z4);
  }
  function fromValues8(x4, y5, z4) {
    const out = new ARRAY_TYPE5(3);
    out[0] = x4;
    out[1] = y5;
    out[2] = z4;
    return out;
  }
  function copy8(out, a6) {
    out[0] = a6[0];
    out[1] = a6[1];
    out[2] = a6[2];
    return out;
  }
  function set7(out, x4, y5, z4) {
    out[0] = x4;
    out[1] = y5;
    out[2] = z4;
    return out;
  }
  function add10(out, a6, b4) {
    out[0] = a6[0] + b4[0];
    out[1] = a6[1] + b4[1];
    out[2] = a6[2] + b4[2];
    return out;
  }
  function subtract6(out, a6, b4) {
    out[0] = a6[0] - b4[0];
    out[1] = a6[1] - b4[1];
    out[2] = a6[2] - b4[2];
    return out;
  }
  function multiply12(out, a6, b4) {
    out[0] = a6[0] * b4[0];
    out[1] = a6[1] * b4[1];
    out[2] = a6[2] * b4[2];
    return out;
  }
  function divide5(out, a6, b4) {
    out[0] = a6[0] / b4[0];
    out[1] = a6[1] / b4[1];
    out[2] = a6[2] / b4[2];
    return out;
  }
  function ceil5(out, a6) {
    out[0] = Math.ceil(a6[0]);
    out[1] = Math.ceil(a6[1]);
    out[2] = Math.ceil(a6[2]);
    return out;
  }
  function floor5(out, a6) {
    out[0] = Math.floor(a6[0]);
    out[1] = Math.floor(a6[1]);
    out[2] = Math.floor(a6[2]);
    return out;
  }
  function min5(out, a6, b4) {
    out[0] = Math.min(a6[0], b4[0]);
    out[1] = Math.min(a6[1], b4[1]);
    out[2] = Math.min(a6[2], b4[2]);
    return out;
  }
  function max5(out, a6, b4) {
    out[0] = Math.max(a6[0], b4[0]);
    out[1] = Math.max(a6[1], b4[1]);
    out[2] = Math.max(a6[2], b4[2]);
    return out;
  }
  function round13(out, a6) {
    out[0] = round12(a6[0]);
    out[1] = round12(a6[1]);
    out[2] = round12(a6[2]);
    return out;
  }
  function scale13(out, a6, b4) {
    out[0] = a6[0] * b4;
    out[1] = a6[1] * b4;
    out[2] = a6[2] * b4;
    return out;
  }
  function scaleAndAdd5(out, a6, b4, scale24) {
    out[0] = a6[0] + b4[0] * scale24;
    out[1] = a6[1] + b4[1] * scale24;
    out[2] = a6[2] + b4[2] * scale24;
    return out;
  }
  function distance6(a6, b4) {
    const x4 = b4[0] - a6[0];
    const y5 = b4[1] - a6[1];
    const z4 = b4[2] - a6[2];
    return Math.sqrt(x4 * x4 + y5 * y5 + z4 * z4);
  }
  function squaredDistance5(a6, b4) {
    const x4 = b4[0] - a6[0];
    const y5 = b4[1] - a6[1];
    const z4 = b4[2] - a6[2];
    return x4 * x4 + y5 * y5 + z4 * z4;
  }
  function squaredLength8(a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    return x4 * x4 + y5 * y5 + z4 * z4;
  }
  function negate5(out, a6) {
    out[0] = -a6[0];
    out[1] = -a6[1];
    out[2] = -a6[2];
    return out;
  }
  function inverse5(out, a6) {
    out[0] = 1 / a6[0];
    out[1] = 1 / a6[1];
    out[2] = 1 / a6[2];
    return out;
  }
  function normalize10(out, a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    let len9 = x4 * x4 + y5 * y5 + z4 * z4;
    if (len9 > 0) {
      len9 = 1 / Math.sqrt(len9);
    }
    out[0] = a6[0] * len9;
    out[1] = a6[1] * len9;
    out[2] = a6[2] * len9;
    return out;
  }
  function dot10(a6, b4) {
    return a6[0] * b4[0] + a6[1] * b4[1] + a6[2] * b4[2];
  }
  function cross7(out, a6, b4) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const bx = b4[0];
    const by = b4[1];
    const bz = b4[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
  }
  function lerp11(out, a6, b4, t5) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    out[0] = ax + t5 * (b4[0] - ax);
    out[1] = ay + t5 * (b4[1] - ay);
    out[2] = az + t5 * (b4[2] - az);
    return out;
  }
  function slerp5(out, a6, b4, t5) {
    const angle10 = Math.acos(Math.min(Math.max(dot10(a6, b4), -1), 1));
    const sinTotal = Math.sin(angle10);
    const ratioA = Math.sin((1 - t5) * angle10) / sinTotal;
    const ratioB = Math.sin(t5 * angle10) / sinTotal;
    out[0] = ratioA * a6[0] + ratioB * b4[0];
    out[1] = ratioA * a6[1] + ratioB * b4[1];
    out[2] = ratioA * a6[2] + ratioB * b4[2];
    return out;
  }
  function hermite3(out, a6, b4, c5, d5, t5) {
    const factorTimes2 = t5 * t5;
    const factor1 = factorTimes2 * (2 * t5 - 3) + 1;
    const factor2 = factorTimes2 * (t5 - 2) + t5;
    const factor3 = factorTimes2 * (t5 - 1);
    const factor4 = factorTimes2 * (3 - 2 * t5);
    out[0] = a6[0] * factor1 + b4[0] * factor2 + c5[0] * factor3 + d5[0] * factor4;
    out[1] = a6[1] * factor1 + b4[1] * factor2 + c5[1] * factor3 + d5[1] * factor4;
    out[2] = a6[2] * factor1 + b4[2] * factor2 + c5[2] * factor3 + d5[2] * factor4;
    return out;
  }
  function bezier3(out, a6, b4, c5, d5, t5) {
    const inverseFactor = 1 - t5;
    const inverseFactorTimesTwo = inverseFactor * inverseFactor;
    const factorTimes2 = t5 * t5;
    const factor1 = inverseFactorTimesTwo * inverseFactor;
    const factor2 = 3 * t5 * inverseFactorTimesTwo;
    const factor3 = 3 * factorTimes2 * inverseFactor;
    const factor4 = factorTimes2 * t5;
    out[0] = a6[0] * factor1 + b4[0] * factor2 + c5[0] * factor3 + d5[0] * factor4;
    out[1] = a6[1] * factor1 + b4[1] * factor2 + c5[1] * factor3 + d5[1] * factor4;
    out[2] = a6[2] * factor1 + b4[2] * factor2 + c5[2] * factor3 + d5[2] * factor4;
    return out;
  }
  function random5(out, scale24) {
    scale24 = scale24 === void 0 ? 1 : scale24;
    const r5 = RANDOM5() * 2 * Math.PI;
    const z4 = RANDOM5() * 2 - 1;
    const zScale = Math.sqrt(1 - z4 * z4) * scale24;
    out[0] = Math.cos(r5) * zScale;
    out[1] = Math.sin(r5) * zScale;
    out[2] = z4 * scale24;
    return out;
  }
  function transformMat410(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    let w5 = m3[3] * x4 + m3[7] * y5 + m3[11] * z4 + m3[15];
    w5 = w5 || 1;
    out[0] = (m3[0] * x4 + m3[4] * y5 + m3[8] * z4 + m3[12]) / w5;
    out[1] = (m3[1] * x4 + m3[5] * y5 + m3[9] * z4 + m3[13]) / w5;
    out[2] = (m3[2] * x4 + m3[6] * y5 + m3[10] * z4 + m3[14]) / w5;
    return out;
  }
  function transformMat38(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    out[0] = x4 * m3[0] + y5 * m3[3] + z4 * m3[6];
    out[1] = x4 * m3[1] + y5 * m3[4] + z4 * m3[7];
    out[2] = x4 * m3[2] + y5 * m3[5] + z4 * m3[8];
    return out;
  }
  function transformQuat7(out, a6, q3) {
    const qx = q3[0];
    const qy = q3[1];
    const qz = q3[2];
    const qw = q3[3];
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    let uvx = qy * z4 - qz * y5;
    let uvy = qz * x4 - qx * z4;
    let uvz = qx * y5 - qy * x4;
    let uuvx = qy * uvz - qz * uvy;
    let uuvy = qz * uvx - qx * uvz;
    let uuvz = qx * uvy - qy * uvx;
    const w22 = qw * 2;
    uvx *= w22;
    uvy *= w22;
    uvz *= w22;
    uuvx *= 2;
    uuvy *= 2;
    uuvz *= 2;
    out[0] = x4 + uvx + uuvx;
    out[1] = y5 + uvy + uuvy;
    out[2] = z4 + uvz + uuvz;
    return out;
  }
  function rotateX9(out, a6, b4, rad) {
    const p5 = [];
    const r5 = [];
    p5[0] = a6[0] - b4[0];
    p5[1] = a6[1] - b4[1];
    p5[2] = a6[2] - b4[2];
    r5[0] = p5[0];
    r5[1] = p5[1] * Math.cos(rad) - p5[2] * Math.sin(rad);
    r5[2] = p5[1] * Math.sin(rad) + p5[2] * Math.cos(rad);
    out[0] = r5[0] + b4[0];
    out[1] = r5[1] + b4[1];
    out[2] = r5[2] + b4[2];
    return out;
  }
  function rotateY9(out, a6, b4, rad) {
    const p5 = [];
    const r5 = [];
    p5[0] = a6[0] - b4[0];
    p5[1] = a6[1] - b4[1];
    p5[2] = a6[2] - b4[2];
    r5[0] = p5[2] * Math.sin(rad) + p5[0] * Math.cos(rad);
    r5[1] = p5[1];
    r5[2] = p5[2] * Math.cos(rad) - p5[0] * Math.sin(rad);
    out[0] = r5[0] + b4[0];
    out[1] = r5[1] + b4[1];
    out[2] = r5[2] + b4[2];
    return out;
  }
  function rotateZ9(out, a6, b4, rad) {
    const p5 = [];
    const r5 = [];
    p5[0] = a6[0] - b4[0];
    p5[1] = a6[1] - b4[1];
    p5[2] = a6[2] - b4[2];
    r5[0] = p5[0] * Math.cos(rad) - p5[1] * Math.sin(rad);
    r5[1] = p5[0] * Math.sin(rad) + p5[1] * Math.cos(rad);
    r5[2] = p5[2];
    out[0] = r5[0] + b4[0];
    out[1] = r5[1] + b4[1];
    out[2] = r5[2] + b4[2];
    return out;
  }
  function angle6(a6, b4) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const bx = b4[0];
    const by = b4[1];
    const bz = b4[2];
    const mag = Math.sqrt((ax * ax + ay * ay + az * az) * (bx * bx + by * by + bz * bz));
    const cosine = mag && dot10(a6, b4) / mag;
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
  }
  function zero5(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    return out;
  }
  function str6(a6) {
    return `vec3(${a6[0]}, ${a6[1]}, ${a6[2]})`;
  }
  function exactEquals9(a6, b4) {
    return a6[0] === b4[0] && a6[1] === b4[1] && a6[2] === b4[2];
  }
  function equals10(a6, b4) {
    const a0 = a6[0];
    const a1 = a6[1];
    const a22 = a6[2];
    const b0 = b4[0];
    const b1 = b4[1];
    const b22 = b4[2];
    return Math.abs(a0 - b0) <= EPSILON27 * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON27 * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a22 - b22) <= EPSILON27 * Math.max(1, Math.abs(a22), Math.abs(b22));
  }
  var sub6 = subtract6;
  var mul6 = multiply12;
  var div5 = divide5;
  var dist5 = distance6;
  var sqrDist5 = squaredDistance5;
  var len6 = length9;
  var sqrLen5 = squaredLength8;
  var forEach12 = function() {
    const vec = create16();
    return function(a6, stride, offset, count3, fn, arg) {
      let i7;
      let l5;
      if (!stride) {
        stride = 3;
      }
      if (!offset) {
        offset = 0;
      }
      if (count3) {
        l5 = Math.min(count3 * stride + offset, a6.length);
      } else {
        l5 = a6.length;
      }
      for (i7 = offset; i7 < l5; i7 += stride) {
        vec[0] = a6[i7];
        vec[1] = a6[i7 + 1];
        vec[2] = a6[i7 + 2];
        fn(vec, vec, arg);
        a6[i7] = vec[0];
        a6[i7 + 1] = vec[1];
        a6[i7 + 2] = vec[2];
      }
      return a6;
    };
  }();

  // ../../node_modules/@math.gl/geospatial/node_modules/@math.gl/core/dist/classes/vector3.js
  var ORIGIN4 = [0, 0, 0];
  var ZERO9;
  var Vector34 = class extends Vector7 {
    static get ZERO() {
      if (!ZERO9) {
        ZERO9 = new Vector34(0, 0, 0);
        Object.freeze(ZERO9);
      }
      return ZERO9;
    }
    /**
     * @class
     * @param x
     * @param y
     * @param z
     */
    constructor(x4 = 0, y5 = 0, z4 = 0) {
      super(-0, -0, -0);
      if (arguments.length === 1 && isArray7(x4)) {
        this.copy(x4);
      } else {
        if (config4.debug) {
          checkNumber4(x4);
          checkNumber4(y5);
          checkNumber4(z4);
        }
        this[0] = x4;
        this[1] = y5;
        this[2] = z4;
      }
    }
    set(x4, y5, z4) {
      this[0] = x4;
      this[1] = y5;
      this[2] = z4;
      return this.check();
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      return this.check();
    }
    fromObject(object) {
      if (config4.debug) {
        checkNumber4(object.x);
        checkNumber4(object.y);
        checkNumber4(object.z);
      }
      this[0] = object.x;
      this[1] = object.y;
      this[2] = object.z;
      return this.check();
    }
    toObject(object) {
      object.x = this[0];
      object.y = this[1];
      object.z = this[2];
      return object;
    }
    // Getters/setters
    get ELEMENTS() {
      return 3;
    }
    get z() {
      return this[2];
    }
    set z(value) {
      this[2] = checkNumber4(value);
    }
    // ACCESSORS
    angle(vector) {
      return angle6(this, vector);
    }
    // MODIFIERS
    cross(vector) {
      cross7(this, this, vector);
      return this.check();
    }
    rotateX({ radians: radians6, origin = ORIGIN4 }) {
      rotateX9(this, this, origin, radians6);
      return this.check();
    }
    rotateY({ radians: radians6, origin = ORIGIN4 }) {
      rotateY9(this, this, origin, radians6);
      return this.check();
    }
    rotateZ({ radians: radians6, origin = ORIGIN4 }) {
      rotateZ9(this, this, origin, radians6);
      return this.check();
    }
    // Transforms
    // transforms as point (4th component is implicitly 1)
    transform(matrix4) {
      return this.transformAsPoint(matrix4);
    }
    // transforms as point (4th component is implicitly 1)
    transformAsPoint(matrix4) {
      transformMat410(this, this, matrix4);
      return this.check();
    }
    // transforms as vector  (4th component is implicitly 0, ignores translation. slightly faster)
    transformAsVector(matrix4) {
      vec3_transformMat4AsVector4(this, this, matrix4);
      return this.check();
    }
    transformByMatrix3(matrix3) {
      transformMat38(this, this, matrix3);
      return this.check();
    }
    transformByMatrix2(matrix2) {
      vec3_transformMat24(this, this, matrix2);
      return this.check();
    }
    transformByQuaternion(quaternion) {
      transformQuat7(this, this, quaternion);
      return this.check();
    }
  };

  // ../../node_modules/@math.gl/geospatial/node_modules/@math.gl/core/dist/classes/base/matrix.js
  var Matrix6 = class extends MathArray4 {
    // fromObject(object) {
    //   const array = object.elements;
    //   return this.fromRowMajor(array);
    // }
    // toObject(object) {
    //   const array = object.elements;
    //   this.toRowMajor(array);
    //   return object;
    // }
    // TODO better override formatString?
    toString() {
      let string = "[";
      if (config4.printRowMajor) {
        string += "row-major:";
        for (let row = 0; row < this.RANK; ++row) {
          for (let col = 0; col < this.RANK; ++col) {
            string += ` ${this[col * this.RANK + row]}`;
          }
        }
      } else {
        string += "column-major:";
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          string += ` ${this[i7]}`;
        }
      }
      string += "]";
      return string;
    }
    getElementIndex(row, col) {
      return col * this.RANK + row;
    }
    // By default assumes row major indices
    getElement(row, col) {
      return this[col * this.RANK + row];
    }
    // By default assumes row major indices
    setElement(row, col, value) {
      this[col * this.RANK + row] = checkNumber4(value);
      return this;
    }
    getColumn(columnIndex, result = new Array(this.RANK).fill(-0)) {
      const firstIndex = columnIndex * this.RANK;
      for (let i7 = 0; i7 < this.RANK; ++i7) {
        result[i7] = this[firstIndex + i7];
      }
      return result;
    }
    setColumn(columnIndex, columnVector) {
      const firstIndex = columnIndex * this.RANK;
      for (let i7 = 0; i7 < this.RANK; ++i7) {
        this[firstIndex + i7] = columnVector[i7];
      }
      return this;
    }
  };

  // ../../node_modules/@math.gl/geospatial/node_modules/@math.gl/core/dist/gl-matrix/mat4.js
  function identity6(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function transpose7(out, a6) {
    if (out === a6) {
      const a01 = a6[1];
      const a02 = a6[2];
      const a03 = a6[3];
      const a12 = a6[6];
      const a13 = a6[7];
      const a23 = a6[11];
      out[1] = a6[4];
      out[2] = a6[8];
      out[3] = a6[12];
      out[4] = a01;
      out[6] = a6[9];
      out[7] = a6[13];
      out[8] = a02;
      out[9] = a12;
      out[11] = a6[14];
      out[12] = a03;
      out[13] = a13;
      out[14] = a23;
    } else {
      out[0] = a6[0];
      out[1] = a6[4];
      out[2] = a6[8];
      out[3] = a6[12];
      out[4] = a6[1];
      out[5] = a6[5];
      out[6] = a6[9];
      out[7] = a6[13];
      out[8] = a6[2];
      out[9] = a6[6];
      out[10] = a6[10];
      out[11] = a6[14];
      out[12] = a6[3];
      out[13] = a6[7];
      out[14] = a6[11];
      out[15] = a6[15];
    }
    return out;
  }
  function invert9(out, a6) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    const a30 = a6[12];
    const a31 = a6[13];
    const a32 = a6[14];
    const a33 = a6[15];
    const b00 = a00 * a11 - a01 * a10;
    const b01 = a00 * a12 - a02 * a10;
    const b02 = a00 * a13 - a03 * a10;
    const b03 = a01 * a12 - a02 * a11;
    const b04 = a01 * a13 - a03 * a11;
    const b05 = a02 * a13 - a03 * a12;
    const b06 = a20 * a31 - a21 * a30;
    const b07 = a20 * a32 - a22 * a30;
    const b08 = a20 * a33 - a23 * a30;
    const b09 = a21 * a32 - a22 * a31;
    const b10 = a21 * a33 - a23 * a31;
    const b11 = a22 * a33 - a23 * a32;
    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
    return out;
  }
  function determinant7(a6) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    const a30 = a6[12];
    const a31 = a6[13];
    const a32 = a6[14];
    const a33 = a6[15];
    const b0 = a00 * a11 - a01 * a10;
    const b1 = a00 * a12 - a02 * a10;
    const b22 = a01 * a12 - a02 * a11;
    const b32 = a20 * a31 - a21 * a30;
    const b4 = a20 * a32 - a22 * a30;
    const b5 = a21 * a32 - a22 * a31;
    const b6 = a00 * b5 - a01 * b4 + a02 * b32;
    const b7 = a10 * b5 - a11 * b4 + a12 * b32;
    const b8 = a20 * b22 - a21 * b1 + a22 * b0;
    const b9 = a30 * b22 - a31 * b1 + a32 * b0;
    return a13 * b6 - a03 * b7 + a33 * b8 - a23 * b9;
  }
  function multiply13(out, a6, b4) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    const a30 = a6[12];
    const a31 = a6[13];
    const a32 = a6[14];
    const a33 = a6[15];
    let b0 = b4[0];
    let b1 = b4[1];
    let b22 = b4[2];
    let b32 = b4[3];
    out[0] = b0 * a00 + b1 * a10 + b22 * a20 + b32 * a30;
    out[1] = b0 * a01 + b1 * a11 + b22 * a21 + b32 * a31;
    out[2] = b0 * a02 + b1 * a12 + b22 * a22 + b32 * a32;
    out[3] = b0 * a03 + b1 * a13 + b22 * a23 + b32 * a33;
    b0 = b4[4];
    b1 = b4[5];
    b22 = b4[6];
    b32 = b4[7];
    out[4] = b0 * a00 + b1 * a10 + b22 * a20 + b32 * a30;
    out[5] = b0 * a01 + b1 * a11 + b22 * a21 + b32 * a31;
    out[6] = b0 * a02 + b1 * a12 + b22 * a22 + b32 * a32;
    out[7] = b0 * a03 + b1 * a13 + b22 * a23 + b32 * a33;
    b0 = b4[8];
    b1 = b4[9];
    b22 = b4[10];
    b32 = b4[11];
    out[8] = b0 * a00 + b1 * a10 + b22 * a20 + b32 * a30;
    out[9] = b0 * a01 + b1 * a11 + b22 * a21 + b32 * a31;
    out[10] = b0 * a02 + b1 * a12 + b22 * a22 + b32 * a32;
    out[11] = b0 * a03 + b1 * a13 + b22 * a23 + b32 * a33;
    b0 = b4[12];
    b1 = b4[13];
    b22 = b4[14];
    b32 = b4[15];
    out[12] = b0 * a00 + b1 * a10 + b22 * a20 + b32 * a30;
    out[13] = b0 * a01 + b1 * a11 + b22 * a21 + b32 * a31;
    out[14] = b0 * a02 + b1 * a12 + b22 * a22 + b32 * a32;
    out[15] = b0 * a03 + b1 * a13 + b22 * a23 + b32 * a33;
    return out;
  }
  function translate6(out, a6, v5) {
    const x4 = v5[0];
    const y5 = v5[1];
    const z4 = v5[2];
    let a00;
    let a01;
    let a02;
    let a03;
    let a10;
    let a11;
    let a12;
    let a13;
    let a20;
    let a21;
    let a22;
    let a23;
    if (a6 === out) {
      out[12] = a6[0] * x4 + a6[4] * y5 + a6[8] * z4 + a6[12];
      out[13] = a6[1] * x4 + a6[5] * y5 + a6[9] * z4 + a6[13];
      out[14] = a6[2] * x4 + a6[6] * y5 + a6[10] * z4 + a6[14];
      out[15] = a6[3] * x4 + a6[7] * y5 + a6[11] * z4 + a6[15];
    } else {
      a00 = a6[0];
      a01 = a6[1];
      a02 = a6[2];
      a03 = a6[3];
      a10 = a6[4];
      a11 = a6[5];
      a12 = a6[6];
      a13 = a6[7];
      a20 = a6[8];
      a21 = a6[9];
      a22 = a6[10];
      a23 = a6[11];
      out[0] = a00;
      out[1] = a01;
      out[2] = a02;
      out[3] = a03;
      out[4] = a10;
      out[5] = a11;
      out[6] = a12;
      out[7] = a13;
      out[8] = a20;
      out[9] = a21;
      out[10] = a22;
      out[11] = a23;
      out[12] = a00 * x4 + a10 * y5 + a20 * z4 + a6[12];
      out[13] = a01 * x4 + a11 * y5 + a21 * z4 + a6[13];
      out[14] = a02 * x4 + a12 * y5 + a22 * z4 + a6[14];
      out[15] = a03 * x4 + a13 * y5 + a23 * z4 + a6[15];
    }
    return out;
  }
  function scale14(out, a6, v5) {
    const x4 = v5[0];
    const y5 = v5[1];
    const z4 = v5[2];
    out[0] = a6[0] * x4;
    out[1] = a6[1] * x4;
    out[2] = a6[2] * x4;
    out[3] = a6[3] * x4;
    out[4] = a6[4] * y5;
    out[5] = a6[5] * y5;
    out[6] = a6[6] * y5;
    out[7] = a6[7] * y5;
    out[8] = a6[8] * z4;
    out[9] = a6[9] * z4;
    out[10] = a6[10] * z4;
    out[11] = a6[11] * z4;
    out[12] = a6[12];
    out[13] = a6[13];
    out[14] = a6[14];
    out[15] = a6[15];
    return out;
  }
  function rotate8(out, a6, rad, axis) {
    let x4 = axis[0];
    let y5 = axis[1];
    let z4 = axis[2];
    let len9 = Math.sqrt(x4 * x4 + y5 * y5 + z4 * z4);
    let c5;
    let s5;
    let t5;
    let a00;
    let a01;
    let a02;
    let a03;
    let a10;
    let a11;
    let a12;
    let a13;
    let a20;
    let a21;
    let a22;
    let a23;
    let b00;
    let b01;
    let b02;
    let b10;
    let b11;
    let b12;
    let b20;
    let b21;
    let b22;
    if (len9 < EPSILON27) {
      return null;
    }
    len9 = 1 / len9;
    x4 *= len9;
    y5 *= len9;
    z4 *= len9;
    s5 = Math.sin(rad);
    c5 = Math.cos(rad);
    t5 = 1 - c5;
    a00 = a6[0];
    a01 = a6[1];
    a02 = a6[2];
    a03 = a6[3];
    a10 = a6[4];
    a11 = a6[5];
    a12 = a6[6];
    a13 = a6[7];
    a20 = a6[8];
    a21 = a6[9];
    a22 = a6[10];
    a23 = a6[11];
    b00 = x4 * x4 * t5 + c5;
    b01 = y5 * x4 * t5 + z4 * s5;
    b02 = z4 * x4 * t5 - y5 * s5;
    b10 = x4 * y5 * t5 - z4 * s5;
    b11 = y5 * y5 * t5 + c5;
    b12 = z4 * y5 * t5 + x4 * s5;
    b20 = x4 * z4 * t5 + y5 * s5;
    b21 = y5 * z4 * t5 - x4 * s5;
    b22 = z4 * z4 * t5 + c5;
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;
    if (a6 !== out) {
      out[12] = a6[12];
      out[13] = a6[13];
      out[14] = a6[14];
      out[15] = a6[15];
    }
    return out;
  }
  function rotateX10(out, a6, rad) {
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    if (a6 !== out) {
      out[0] = a6[0];
      out[1] = a6[1];
      out[2] = a6[2];
      out[3] = a6[3];
      out[12] = a6[12];
      out[13] = a6[13];
      out[14] = a6[14];
      out[15] = a6[15];
    }
    out[4] = a10 * c5 + a20 * s5;
    out[5] = a11 * c5 + a21 * s5;
    out[6] = a12 * c5 + a22 * s5;
    out[7] = a13 * c5 + a23 * s5;
    out[8] = a20 * c5 - a10 * s5;
    out[9] = a21 * c5 - a11 * s5;
    out[10] = a22 * c5 - a12 * s5;
    out[11] = a23 * c5 - a13 * s5;
    return out;
  }
  function rotateY10(out, a6, rad) {
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    if (a6 !== out) {
      out[4] = a6[4];
      out[5] = a6[5];
      out[6] = a6[6];
      out[7] = a6[7];
      out[12] = a6[12];
      out[13] = a6[13];
      out[14] = a6[14];
      out[15] = a6[15];
    }
    out[0] = a00 * c5 - a20 * s5;
    out[1] = a01 * c5 - a21 * s5;
    out[2] = a02 * c5 - a22 * s5;
    out[3] = a03 * c5 - a23 * s5;
    out[8] = a00 * s5 + a20 * c5;
    out[9] = a01 * s5 + a21 * c5;
    out[10] = a02 * s5 + a22 * c5;
    out[11] = a03 * s5 + a23 * c5;
    return out;
  }
  function rotateZ10(out, a6, rad) {
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    if (a6 !== out) {
      out[8] = a6[8];
      out[9] = a6[9];
      out[10] = a6[10];
      out[11] = a6[11];
      out[12] = a6[12];
      out[13] = a6[13];
      out[14] = a6[14];
      out[15] = a6[15];
    }
    out[0] = a00 * c5 + a10 * s5;
    out[1] = a01 * c5 + a11 * s5;
    out[2] = a02 * c5 + a12 * s5;
    out[3] = a03 * c5 + a13 * s5;
    out[4] = a10 * c5 - a00 * s5;
    out[5] = a11 * c5 - a01 * s5;
    out[6] = a12 * c5 - a02 * s5;
    out[7] = a13 * c5 - a03 * s5;
    return out;
  }
  function fromQuat7(out, q3) {
    const x4 = q3[0];
    const y5 = q3[1];
    const z4 = q3[2];
    const w5 = q3[3];
    const x22 = x4 + x4;
    const y22 = y5 + y5;
    const z22 = z4 + z4;
    const xx = x4 * x22;
    const yx = y5 * x22;
    const yy = y5 * y22;
    const zx = z4 * x22;
    const zy = z4 * y22;
    const zz = z4 * z22;
    const wx = w5 * x22;
    const wy = w5 * y22;
    const wz = w5 * z22;
    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;
    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;
    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function frustum3(out, left, right, bottom, top, near, far) {
    const rl = 1 / (right - left);
    const tb = 1 / (top - bottom);
    const nf = 1 / (near - far);
    out[0] = near * 2 * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = near * 2 * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = far * near * 2 * nf;
    out[15] = 0;
    return out;
  }
  function perspectiveNO3(out, fovy, aspect, near, far) {
    const f6 = 1 / Math.tan(fovy / 2);
    out[0] = f6 / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f6;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
      const nf = 1 / (near - far);
      out[10] = (far + near) * nf;
      out[14] = 2 * far * near * nf;
    } else {
      out[10] = -1;
      out[14] = -2 * near;
    }
    return out;
  }
  var perspective3 = perspectiveNO3;
  function orthoNO3(out, left, right, bottom, top, near, far) {
    const lr = 1 / (left - right);
    const bt = 1 / (bottom - top);
    const nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
  }
  var ortho3 = orthoNO3;
  function lookAt3(out, eye, center2, up) {
    let len9;
    let x0;
    let x1;
    let x22;
    let y0;
    let y1;
    let y22;
    let z0;
    let z1;
    let z22;
    const eyex = eye[0];
    const eyey = eye[1];
    const eyez = eye[2];
    const upx = up[0];
    const upy = up[1];
    const upz = up[2];
    const centerx = center2[0];
    const centery = center2[1];
    const centerz = center2[2];
    if (Math.abs(eyex - centerx) < EPSILON27 && Math.abs(eyey - centery) < EPSILON27 && Math.abs(eyez - centerz) < EPSILON27) {
      return identity6(out);
    }
    z0 = eyex - centerx;
    z1 = eyey - centery;
    z22 = eyez - centerz;
    len9 = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z22 * z22);
    z0 *= len9;
    z1 *= len9;
    z22 *= len9;
    x0 = upy * z22 - upz * z1;
    x1 = upz * z0 - upx * z22;
    x22 = upx * z1 - upy * z0;
    len9 = Math.sqrt(x0 * x0 + x1 * x1 + x22 * x22);
    if (!len9) {
      x0 = 0;
      x1 = 0;
      x22 = 0;
    } else {
      len9 = 1 / len9;
      x0 *= len9;
      x1 *= len9;
      x22 *= len9;
    }
    y0 = z1 * x22 - z22 * x1;
    y1 = z22 * x0 - z0 * x22;
    y22 = z0 * x1 - z1 * x0;
    len9 = Math.sqrt(y0 * y0 + y1 * y1 + y22 * y22);
    if (!len9) {
      y0 = 0;
      y1 = 0;
      y22 = 0;
    } else {
      len9 = 1 / len9;
      y0 *= len9;
      y1 *= len9;
      y22 *= len9;
    }
    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x22;
    out[9] = y22;
    out[10] = z22;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x22 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y22 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z22 * eyez);
    out[15] = 1;
    return out;
  }

  // ../../node_modules/@math.gl/geospatial/node_modules/@math.gl/core/dist/gl-matrix/vec4.js
  function create17() {
    const out = new ARRAY_TYPE5(4);
    if (ARRAY_TYPE5 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
    }
    return out;
  }
  function transformMat411(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = a6[3];
    out[0] = m3[0] * x4 + m3[4] * y5 + m3[8] * z4 + m3[12] * w5;
    out[1] = m3[1] * x4 + m3[5] * y5 + m3[9] * z4 + m3[13] * w5;
    out[2] = m3[2] * x4 + m3[6] * y5 + m3[10] * z4 + m3[14] * w5;
    out[3] = m3[3] * x4 + m3[7] * y5 + m3[11] * z4 + m3[15] * w5;
    return out;
  }
  var forEach13 = function() {
    const vec = create17();
    return function(a6, stride, offset, count3, fn, arg) {
      let i7;
      let l5;
      if (!stride) {
        stride = 4;
      }
      if (!offset) {
        offset = 0;
      }
      if (count3) {
        l5 = Math.min(count3 * stride + offset, a6.length);
      } else {
        l5 = a6.length;
      }
      for (i7 = offset; i7 < l5; i7 += stride) {
        vec[0] = a6[i7];
        vec[1] = a6[i7 + 1];
        vec[2] = a6[i7 + 2];
        vec[3] = a6[i7 + 3];
        fn(vec, vec, arg);
        a6[i7] = vec[0];
        a6[i7 + 1] = vec[1];
        a6[i7 + 2] = vec[2];
        a6[i7 + 3] = vec[3];
      }
      return a6;
    };
  }();

  // ../../node_modules/@math.gl/geospatial/node_modules/@math.gl/core/dist/classes/matrix4.js
  var INDICES6;
  (function(INDICES10) {
    INDICES10[INDICES10["COL0ROW0"] = 0] = "COL0ROW0";
    INDICES10[INDICES10["COL0ROW1"] = 1] = "COL0ROW1";
    INDICES10[INDICES10["COL0ROW2"] = 2] = "COL0ROW2";
    INDICES10[INDICES10["COL0ROW3"] = 3] = "COL0ROW3";
    INDICES10[INDICES10["COL1ROW0"] = 4] = "COL1ROW0";
    INDICES10[INDICES10["COL1ROW1"] = 5] = "COL1ROW1";
    INDICES10[INDICES10["COL1ROW2"] = 6] = "COL1ROW2";
    INDICES10[INDICES10["COL1ROW3"] = 7] = "COL1ROW3";
    INDICES10[INDICES10["COL2ROW0"] = 8] = "COL2ROW0";
    INDICES10[INDICES10["COL2ROW1"] = 9] = "COL2ROW1";
    INDICES10[INDICES10["COL2ROW2"] = 10] = "COL2ROW2";
    INDICES10[INDICES10["COL2ROW3"] = 11] = "COL2ROW3";
    INDICES10[INDICES10["COL3ROW0"] = 12] = "COL3ROW0";
    INDICES10[INDICES10["COL3ROW1"] = 13] = "COL3ROW1";
    INDICES10[INDICES10["COL3ROW2"] = 14] = "COL3ROW2";
    INDICES10[INDICES10["COL3ROW3"] = 15] = "COL3ROW3";
  })(INDICES6 || (INDICES6 = {}));
  var DEFAULT_FOVY3 = 45 * Math.PI / 180;
  var DEFAULT_ASPECT3 = 1;
  var DEFAULT_NEAR3 = 0.1;
  var DEFAULT_FAR3 = 500;
  var IDENTITY_MATRIX8 = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
  var Matrix43 = class extends Matrix6 {
    static get IDENTITY() {
      return getIdentityMatrix6();
    }
    static get ZERO() {
      return getZeroMatrix6();
    }
    get ELEMENTS() {
      return 16;
    }
    get RANK() {
      return 4;
    }
    get INDICES() {
      return INDICES6;
    }
    constructor(array) {
      super(-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0);
      if (arguments.length === 1 && Array.isArray(array)) {
        this.copy(array);
      } else {
        this.identity();
      }
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      this[3] = array[3];
      this[4] = array[4];
      this[5] = array[5];
      this[6] = array[6];
      this[7] = array[7];
      this[8] = array[8];
      this[9] = array[9];
      this[10] = array[10];
      this[11] = array[11];
      this[12] = array[12];
      this[13] = array[13];
      this[14] = array[14];
      this[15] = array[15];
      return this.check();
    }
    // eslint-disable-next-line max-params
    set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {
      this[0] = m00;
      this[1] = m10;
      this[2] = m20;
      this[3] = m30;
      this[4] = m01;
      this[5] = m11;
      this[6] = m21;
      this[7] = m31;
      this[8] = m02;
      this[9] = m12;
      this[10] = m22;
      this[11] = m32;
      this[12] = m03;
      this[13] = m13;
      this[14] = m23;
      this[15] = m33;
      return this.check();
    }
    // accepts row major order, stores as column major
    // eslint-disable-next-line max-params
    setRowMajor(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
      this[0] = m00;
      this[1] = m10;
      this[2] = m20;
      this[3] = m30;
      this[4] = m01;
      this[5] = m11;
      this[6] = m21;
      this[7] = m31;
      this[8] = m02;
      this[9] = m12;
      this[10] = m22;
      this[11] = m32;
      this[12] = m03;
      this[13] = m13;
      this[14] = m23;
      this[15] = m33;
      return this.check();
    }
    toRowMajor(result) {
      result[0] = this[0];
      result[1] = this[4];
      result[2] = this[8];
      result[3] = this[12];
      result[4] = this[1];
      result[5] = this[5];
      result[6] = this[9];
      result[7] = this[13];
      result[8] = this[2];
      result[9] = this[6];
      result[10] = this[10];
      result[11] = this[14];
      result[12] = this[3];
      result[13] = this[7];
      result[14] = this[11];
      result[15] = this[15];
      return result;
    }
    // Constructors
    /** Set to identity matrix */
    identity() {
      return this.copy(IDENTITY_MATRIX8);
    }
    /**
     *
     * @param object
     * @returns self
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    fromObject(object) {
      return this.check();
    }
    /**
     * Calculates a 4x4 matrix from the given quaternion
     * @param quaternion Quaternion to create matrix from
     * @returns self
     */
    fromQuaternion(quaternion) {
      fromQuat7(this, quaternion);
      return this.check();
    }
    /**
     * Generates a frustum matrix with the given bounds
     * @param view.left - Left bound of the frustum
     * @param view.right - Right bound of the frustum
     * @param view.bottom - Bottom bound of the frustum
     * @param view.top - Top bound of the frustum
     * @param view.near - Near bound of the frustum
     * @param view.far - Far bound of the frustum. Can be set to Infinity.
     * @returns self
     */
    frustum(view) {
      const { left, right, bottom, top, near = DEFAULT_NEAR3, far = DEFAULT_FAR3 } = view;
      if (far === Infinity) {
        computeInfinitePerspectiveOffCenter3(this, left, right, bottom, top, near);
      } else {
        frustum3(this, left, right, bottom, top, near, far);
      }
      return this.check();
    }
    /**
     * Generates a look-at matrix with the given eye position, focal point,
     * and up axis
     * @param view.eye - (vector) Position of the viewer
     * @param view.center - (vector) Point the viewer is looking at
     * @param view.up - (vector) Up axis
     * @returns self
     */
    lookAt(view) {
      const { eye, center: center2 = [0, 0, 0], up = [0, 1, 0] } = view;
      lookAt3(this, eye, center2, up);
      return this.check();
    }
    /**
     * Generates a orthogonal projection matrix with the given bounds
     * from "traditional" view space parameters
     * @param view.left - Left bound of the frustum
     * @param view.right number  Right bound of the frustum
     * @param view.bottom - Bottom bound of the frustum
     * @param view.top number  Top bound of the frustum
     * @param view.near - Near bound of the frustum
     * @param view.far number  Far bound of the frustum
     * @returns self
     */
    ortho(view) {
      const { left, right, bottom, top, near = DEFAULT_NEAR3, far = DEFAULT_FAR3 } = view;
      ortho3(this, left, right, bottom, top, near, far);
      return this.check();
    }
    /**
     * Generates an orthogonal projection matrix with the same parameters
     * as a perspective matrix (plus focalDistance)
     * @param view.fovy Vertical field of view in radians
     * @param view.aspect Aspect ratio. Typically viewport width / viewport height
     * @param view.focalDistance Distance in the view frustum used for extent calculations
     * @param view.near Near bound of the frustum
     * @param view.far Far bound of the frustum
     * @returns self
     */
    orthographic(view) {
      const { fovy = DEFAULT_FOVY3, aspect = DEFAULT_ASPECT3, focalDistance = 1, near = DEFAULT_NEAR3, far = DEFAULT_FAR3 } = view;
      checkRadians3(fovy);
      const halfY = fovy / 2;
      const top = focalDistance * Math.tan(halfY);
      const right = top * aspect;
      return this.ortho({
        left: -right,
        right,
        bottom: -top,
        top,
        near,
        far
      });
    }
    /**
     * Generates a perspective projection matrix with the given bounds
     * @param view.fovy Vertical field of view in radians
     * @param view.aspect Aspect ratio. typically viewport width/height
     * @param view.near Near bound of the frustum
     * @param view.far Far bound of the frustum
     * @returns self
     */
    perspective(view) {
      const { fovy = 45 * Math.PI / 180, aspect = 1, near = 0.1, far = 500 } = view;
      checkRadians3(fovy);
      perspective3(this, fovy, aspect, near, far);
      return this.check();
    }
    // Accessors
    determinant() {
      return determinant7(this);
    }
    /**
     * Extracts the non-uniform scale assuming the matrix is an affine transformation.
     * The scales are the "lengths" of the column vectors in the upper-left 3x3 matrix.
     * @param result
     * @returns self
     */
    getScale(result = [-0, -0, -0]) {
      result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);
      result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);
      result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);
      return result;
    }
    /**
     * Gets the translation portion, assuming the matrix is a affine transformation matrix.
     * @param result
     * @returns self
     */
    getTranslation(result = [-0, -0, -0]) {
      result[0] = this[12];
      result[1] = this[13];
      result[2] = this[14];
      return result;
    }
    /**
     * Gets upper left 3x3 pure rotation matrix (non-scaling), assume affine transformation matrix
     * @param result
     * @param scaleResult
     * @returns self
     */
    getRotation(result, scaleResult) {
      result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];
      scaleResult = scaleResult || [-0, -0, -0];
      const scale24 = this.getScale(scaleResult);
      const inverseScale0 = 1 / scale24[0];
      const inverseScale1 = 1 / scale24[1];
      const inverseScale2 = 1 / scale24[2];
      result[0] = this[0] * inverseScale0;
      result[1] = this[1] * inverseScale1;
      result[2] = this[2] * inverseScale2;
      result[3] = 0;
      result[4] = this[4] * inverseScale0;
      result[5] = this[5] * inverseScale1;
      result[6] = this[6] * inverseScale2;
      result[7] = 0;
      result[8] = this[8] * inverseScale0;
      result[9] = this[9] * inverseScale1;
      result[10] = this[10] * inverseScale2;
      result[11] = 0;
      result[12] = 0;
      result[13] = 0;
      result[14] = 0;
      result[15] = 1;
      return result;
    }
    /**
     *
     * @param result
     * @param scaleResult
     * @returns self
     */
    getRotationMatrix3(result, scaleResult) {
      result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0];
      scaleResult = scaleResult || [-0, -0, -0];
      const scale24 = this.getScale(scaleResult);
      const inverseScale0 = 1 / scale24[0];
      const inverseScale1 = 1 / scale24[1];
      const inverseScale2 = 1 / scale24[2];
      result[0] = this[0] * inverseScale0;
      result[1] = this[1] * inverseScale1;
      result[2] = this[2] * inverseScale2;
      result[3] = this[4] * inverseScale0;
      result[4] = this[5] * inverseScale1;
      result[5] = this[6] * inverseScale2;
      result[6] = this[8] * inverseScale0;
      result[7] = this[9] * inverseScale1;
      result[8] = this[10] * inverseScale2;
      return result;
    }
    // Modifiers
    transpose() {
      transpose7(this, this);
      return this.check();
    }
    invert() {
      invert9(this, this);
      return this.check();
    }
    // Operations
    multiplyLeft(a6) {
      multiply13(this, a6, this);
      return this.check();
    }
    multiplyRight(a6) {
      multiply13(this, this, a6);
      return this.check();
    }
    // Rotates a matrix by the given angle around the X axis
    rotateX(radians6) {
      rotateX10(this, this, radians6);
      return this.check();
    }
    // Rotates a matrix by the given angle around the Y axis.
    rotateY(radians6) {
      rotateY10(this, this, radians6);
      return this.check();
    }
    /**
     * Rotates a matrix by the given angle around the Z axis.
     * @param radians
     * @returns self
     */
    rotateZ(radians6) {
      rotateZ10(this, this, radians6);
      return this.check();
    }
    /**
     *
     * @param param0
     * @returns self
     */
    rotateXYZ(angleXYZ) {
      return this.rotateX(angleXYZ[0]).rotateY(angleXYZ[1]).rotateZ(angleXYZ[2]);
    }
    /**
     *
     * @param radians
     * @param axis
     * @returns self
     */
    rotateAxis(radians6, axis) {
      rotate8(this, this, radians6, axis);
      return this.check();
    }
    /**
     *
     * @param factor
     * @returns self
     */
    scale(factor) {
      scale14(this, this, Array.isArray(factor) ? factor : [factor, factor, factor]);
      return this.check();
    }
    /**
     *
     * @param vec
     * @returns self
     */
    translate(vector) {
      translate6(this, this, vector);
      return this.check();
    }
    // Transforms
    /**
     * Transforms any 2, 3 or 4 element vector. 2 and 3 elements are treated as points
     * @param vector
     * @param result
     * @returns self
     */
    transform(vector, result) {
      if (vector.length === 4) {
        result = transformMat411(result || [-0, -0, -0, -0], vector, this);
        checkVector4(result, 4);
        return result;
      }
      return this.transformAsPoint(vector, result);
    }
    /**
     * Transforms any 2 or 3 element array as point (w implicitly 1)
     * @param vector
     * @param result
     * @returns self
     */
    transformAsPoint(vector, result) {
      const { length: length17 } = vector;
      let out;
      switch (length17) {
        case 2:
          out = transformMat49(result || [-0, -0], vector, this);
          break;
        case 3:
          out = transformMat410(result || [-0, -0, -0], vector, this);
          break;
        default:
          throw new Error("Illegal vector");
      }
      checkVector4(out, vector.length);
      return out;
    }
    /**
     * Transforms any 2 or 3 element array as vector (w implicitly 0)
     * @param vector
     * @param result
     * @returns self
     */
    transformAsVector(vector, result) {
      let out;
      switch (vector.length) {
        case 2:
          out = vec2_transformMat4AsVector3(result || [-0, -0], vector, this);
          break;
        case 3:
          out = vec3_transformMat4AsVector4(result || [-0, -0, -0], vector, this);
          break;
        default:
          throw new Error("Illegal vector");
      }
      checkVector4(out, vector.length);
      return out;
    }
    /** @deprecated */
    transformPoint(vector, result) {
      return this.transformAsPoint(vector, result);
    }
    /** @deprecated */
    transformVector(vector, result) {
      return this.transformAsPoint(vector, result);
    }
    /** @deprecated */
    transformDirection(vector, result) {
      return this.transformAsVector(vector, result);
    }
    // three.js math API compatibility
    makeRotationX(radians6) {
      return this.identity().rotateX(radians6);
    }
    makeTranslation(x4, y5, z4) {
      return this.identity().translate([x4, y5, z4]);
    }
  };
  var ZERO10;
  var IDENTITY4;
  function getZeroMatrix6() {
    if (!ZERO10) {
      ZERO10 = new Matrix43([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
      Object.freeze(ZERO10);
    }
    return ZERO10;
  }
  function getIdentityMatrix6() {
    if (!IDENTITY4) {
      IDENTITY4 = new Matrix43();
      Object.freeze(IDENTITY4);
    }
    return IDENTITY4;
  }
  function checkRadians3(possiblyDegrees) {
    if (possiblyDegrees > Math.PI * 2) {
      throw Error("expected radians");
    }
  }
  function computeInfinitePerspectiveOffCenter3(result, left, right, bottom, top, near) {
    const column0Row0 = 2 * near / (right - left);
    const column1Row1 = 2 * near / (top - bottom);
    const column2Row0 = (right + left) / (right - left);
    const column2Row1 = (top + bottom) / (top - bottom);
    const column2Row2 = -1;
    const column2Row3 = -1;
    const column3Row2 = -2 * near;
    result[0] = column0Row0;
    result[1] = 0;
    result[2] = 0;
    result[3] = 0;
    result[4] = 0;
    result[5] = column1Row1;
    result[6] = 0;
    result[7] = 0;
    result[8] = column2Row0;
    result[9] = column2Row1;
    result[10] = column2Row2;
    result[11] = column2Row3;
    result[12] = 0;
    result[13] = 0;
    result[14] = column3Row2;
    result[15] = 0;
    return result;
  }

  // ../../node_modules/@math.gl/geospatial/node_modules/@math.gl/core/dist/lib/math-utils.js
  var math_utils_exports2 = {};
  __export(math_utils_exports2, {
    EPSILON1: () => EPSILON110,
    EPSILON10: () => EPSILON102,
    EPSILON11: () => EPSILON112,
    EPSILON12: () => EPSILON122,
    EPSILON13: () => EPSILON132,
    EPSILON14: () => EPSILON142,
    EPSILON15: () => EPSILON152,
    EPSILON16: () => EPSILON162,
    EPSILON17: () => EPSILON172,
    EPSILON18: () => EPSILON182,
    EPSILON19: () => EPSILON192,
    EPSILON2: () => EPSILON28,
    EPSILON20: () => EPSILON202,
    EPSILON3: () => EPSILON32,
    EPSILON4: () => EPSILON42,
    EPSILON5: () => EPSILON52,
    EPSILON6: () => EPSILON62,
    EPSILON7: () => EPSILON72,
    EPSILON8: () => EPSILON82,
    EPSILON9: () => EPSILON92,
    PI_OVER_FOUR: () => PI_OVER_FOUR2,
    PI_OVER_SIX: () => PI_OVER_SIX2,
    PI_OVER_TWO: () => PI_OVER_TWO2,
    TWO_PI: () => TWO_PI3
  });
  var EPSILON110 = 0.1;
  var EPSILON28 = 0.01;
  var EPSILON32 = 1e-3;
  var EPSILON42 = 1e-4;
  var EPSILON52 = 1e-5;
  var EPSILON62 = 1e-6;
  var EPSILON72 = 1e-7;
  var EPSILON82 = 1e-8;
  var EPSILON92 = 1e-9;
  var EPSILON102 = 1e-10;
  var EPSILON112 = 1e-11;
  var EPSILON122 = 1e-12;
  var EPSILON132 = 1e-13;
  var EPSILON142 = 1e-14;
  var EPSILON152 = 1e-15;
  var EPSILON162 = 1e-16;
  var EPSILON172 = 1e-17;
  var EPSILON182 = 1e-18;
  var EPSILON192 = 1e-19;
  var EPSILON202 = 1e-20;
  var PI_OVER_TWO2 = Math.PI / 2;
  var PI_OVER_FOUR2 = Math.PI / 4;
  var PI_OVER_SIX2 = Math.PI / 6;
  var TWO_PI3 = Math.PI * 2;

  // ../../node_modules/@math.gl/geospatial/dist/constants.js
  var WGS84_RADIUS_X = 6378137;
  var WGS84_RADIUS_Y = 6378137;
  var WGS84_RADIUS_Z = 6356752314245179e-9;
  var WGS84_CONSTANTS = {
    radii: [WGS84_RADIUS_X, WGS84_RADIUS_Y, WGS84_RADIUS_Z],
    radiiSquared: [
      WGS84_RADIUS_X * WGS84_RADIUS_X,
      WGS84_RADIUS_Y * WGS84_RADIUS_Y,
      WGS84_RADIUS_Z * WGS84_RADIUS_Z
    ],
    oneOverRadii: [1 / WGS84_RADIUS_X, 1 / WGS84_RADIUS_Y, 1 / WGS84_RADIUS_Z],
    oneOverRadiiSquared: [
      1 / (WGS84_RADIUS_X * WGS84_RADIUS_X),
      1 / (WGS84_RADIUS_Y * WGS84_RADIUS_Y),
      1 / (WGS84_RADIUS_Z * WGS84_RADIUS_Z)
    ],
    maximumRadius: Math.max(WGS84_RADIUS_X, WGS84_RADIUS_Y, WGS84_RADIUS_Z),
    centerToleranceSquared: 0.1
    // EPSILON1;
  };

  // ../../node_modules/@math.gl/geospatial/dist/type-utils.js
  function identity7(x4) {
    return x4;
  }
  var scratchVector8 = new Vector34();
  function fromCartographic(cartographic, result = [], map6 = identity7) {
    if ("longitude" in cartographic) {
      result[0] = map6(cartographic.longitude);
      result[1] = map6(cartographic.latitude);
      result[2] = cartographic.height;
    } else if ("x" in cartographic) {
      result[0] = map6(cartographic.x);
      result[1] = map6(cartographic.y);
      result[2] = cartographic.z;
    } else {
      result[0] = map6(cartographic[0]);
      result[1] = map6(cartographic[1]);
      result[2] = cartographic[2];
    }
    return result;
  }
  function fromCartographicToRadians(cartographic, vector = []) {
    return fromCartographic(cartographic, vector, config4._cartographicRadians ? identity7 : toRadians3);
  }
  function toCartographic(vector, cartographic, map6 = identity7) {
    if ("longitude" in cartographic) {
      cartographic.longitude = map6(vector[0]);
      cartographic.latitude = map6(vector[1]);
      cartographic.height = vector[2];
    } else if ("x" in cartographic) {
      cartographic.x = map6(vector[0]);
      cartographic.y = map6(vector[1]);
      cartographic.z = vector[2];
    } else {
      cartographic[0] = map6(vector[0]);
      cartographic[1] = map6(vector[1]);
      cartographic[2] = vector[2];
    }
    return cartographic;
  }
  function toCartographicFromRadians(vector, cartographic) {
    return toCartographic(vector, cartographic, config4._cartographicRadians ? identity7 : toDegrees3);
  }

  // ../../node_modules/@math.gl/geospatial/dist/ellipsoid/helpers/ellipsoid-transform.js
  var EPSILON143 = 1e-14;
  var scratchOrigin = new Vector34();
  var VECTOR_PRODUCT_LOCAL_FRAME = {
    up: {
      south: "east",
      north: "west",
      west: "south",
      east: "north"
    },
    down: {
      south: "west",
      north: "east",
      west: "north",
      east: "south"
    },
    south: {
      up: "west",
      down: "east",
      west: "down",
      east: "up"
    },
    north: {
      up: "east",
      down: "west",
      west: "up",
      east: "down"
    },
    west: {
      up: "north",
      down: "south",
      north: "down",
      south: "up"
    },
    east: {
      up: "south",
      down: "north",
      north: "up",
      south: "down"
    }
  };
  var degeneratePositionLocalFrame = {
    north: [-1, 0, 0],
    east: [0, 1, 0],
    up: [0, 0, 1],
    south: [1, 0, 0],
    west: [0, -1, 0],
    down: [0, 0, -1]
  };
  var scratchAxisVectors = {
    east: new Vector34(),
    north: new Vector34(),
    up: new Vector34(),
    west: new Vector34(),
    south: new Vector34(),
    down: new Vector34()
  };
  var scratchVector1 = new Vector34();
  var scratchVector24 = new Vector34();
  var scratchVector34 = new Vector34();
  function localFrameToFixedFrame(ellipsoid, firstAxis, secondAxis, thirdAxis, cartesianOrigin, result) {
    const thirdAxisInferred = VECTOR_PRODUCT_LOCAL_FRAME[firstAxis] && VECTOR_PRODUCT_LOCAL_FRAME[firstAxis][secondAxis];
    assert12(thirdAxisInferred && (!thirdAxis || thirdAxis === thirdAxisInferred));
    let firstAxisVector;
    let secondAxisVector;
    let thirdAxisVector;
    const origin = scratchOrigin.copy(cartesianOrigin);
    const atPole = equals9(origin.x, 0, EPSILON143) && equals9(origin.y, 0, EPSILON143);
    if (atPole) {
      const sign2 = Math.sign(origin.z);
      firstAxisVector = scratchVector1.fromArray(degeneratePositionLocalFrame[firstAxis]);
      if (firstAxis !== "east" && firstAxis !== "west") {
        firstAxisVector.scale(sign2);
      }
      secondAxisVector = scratchVector24.fromArray(degeneratePositionLocalFrame[secondAxis]);
      if (secondAxis !== "east" && secondAxis !== "west") {
        secondAxisVector.scale(sign2);
      }
      thirdAxisVector = scratchVector34.fromArray(degeneratePositionLocalFrame[thirdAxis]);
      if (thirdAxis !== "east" && thirdAxis !== "west") {
        thirdAxisVector.scale(sign2);
      }
    } else {
      const { up, east, north } = scratchAxisVectors;
      east.set(-origin.y, origin.x, 0).normalize();
      ellipsoid.geodeticSurfaceNormal(origin, up);
      north.copy(up).cross(east);
      const { down, west, south } = scratchAxisVectors;
      down.copy(up).scale(-1);
      west.copy(east).scale(-1);
      south.copy(north).scale(-1);
      firstAxisVector = scratchAxisVectors[firstAxis];
      secondAxisVector = scratchAxisVectors[secondAxis];
      thirdAxisVector = scratchAxisVectors[thirdAxis];
    }
    result[0] = firstAxisVector.x;
    result[1] = firstAxisVector.y;
    result[2] = firstAxisVector.z;
    result[3] = 0;
    result[4] = secondAxisVector.x;
    result[5] = secondAxisVector.y;
    result[6] = secondAxisVector.z;
    result[7] = 0;
    result[8] = thirdAxisVector.x;
    result[9] = thirdAxisVector.y;
    result[10] = thirdAxisVector.z;
    result[11] = 0;
    result[12] = origin.x;
    result[13] = origin.y;
    result[14] = origin.z;
    result[15] = 1;
    return result;
  }

  // ../../node_modules/@math.gl/geospatial/dist/ellipsoid/helpers/scale-to-geodetic-surface.js
  var scratchVector9 = new Vector34();
  var scaleToGeodeticSurfaceIntersection = new Vector34();
  var scaleToGeodeticSurfaceGradient = new Vector34();
  function scaleToGeodeticSurface(cartesian, ellipsoid, result = []) {
    const { oneOverRadii, oneOverRadiiSquared, centerToleranceSquared } = ellipsoid;
    scratchVector9.from(cartesian);
    const positionX = scratchVector9.x;
    const positionY = scratchVector9.y;
    const positionZ = scratchVector9.z;
    const oneOverRadiiX = oneOverRadii.x;
    const oneOverRadiiY = oneOverRadii.y;
    const oneOverRadiiZ = oneOverRadii.z;
    const x22 = positionX * positionX * oneOverRadiiX * oneOverRadiiX;
    const y22 = positionY * positionY * oneOverRadiiY * oneOverRadiiY;
    const z22 = positionZ * positionZ * oneOverRadiiZ * oneOverRadiiZ;
    const squaredNorm = x22 + y22 + z22;
    const ratio = Math.sqrt(1 / squaredNorm);
    if (!Number.isFinite(ratio)) {
      return void 0;
    }
    const intersection = scaleToGeodeticSurfaceIntersection;
    intersection.copy(cartesian).scale(ratio);
    if (squaredNorm < centerToleranceSquared) {
      return intersection.to(result);
    }
    const oneOverRadiiSquaredX = oneOverRadiiSquared.x;
    const oneOverRadiiSquaredY = oneOverRadiiSquared.y;
    const oneOverRadiiSquaredZ = oneOverRadiiSquared.z;
    const gradient = scaleToGeodeticSurfaceGradient;
    gradient.set(intersection.x * oneOverRadiiSquaredX * 2, intersection.y * oneOverRadiiSquaredY * 2, intersection.z * oneOverRadiiSquaredZ * 2);
    let lambda = (1 - ratio) * scratchVector9.len() / (0.5 * gradient.len());
    let correction = 0;
    let xMultiplier;
    let yMultiplier;
    let zMultiplier;
    let func;
    do {
      lambda -= correction;
      xMultiplier = 1 / (1 + lambda * oneOverRadiiSquaredX);
      yMultiplier = 1 / (1 + lambda * oneOverRadiiSquaredY);
      zMultiplier = 1 / (1 + lambda * oneOverRadiiSquaredZ);
      const xMultiplier2 = xMultiplier * xMultiplier;
      const yMultiplier2 = yMultiplier * yMultiplier;
      const zMultiplier2 = zMultiplier * zMultiplier;
      const xMultiplier3 = xMultiplier2 * xMultiplier;
      const yMultiplier3 = yMultiplier2 * yMultiplier;
      const zMultiplier3 = zMultiplier2 * zMultiplier;
      func = x22 * xMultiplier2 + y22 * yMultiplier2 + z22 * zMultiplier2 - 1;
      const denominator = x22 * xMultiplier3 * oneOverRadiiSquaredX + y22 * yMultiplier3 * oneOverRadiiSquaredY + z22 * zMultiplier3 * oneOverRadiiSquaredZ;
      const derivative = -2 * denominator;
      correction = func / derivative;
    } while (Math.abs(func) > math_utils_exports2.EPSILON12);
    return scratchVector9.scale([xMultiplier, yMultiplier, zMultiplier]).to(result);
  }

  // ../../node_modules/@math.gl/geospatial/dist/ellipsoid/ellipsoid.js
  var scratchVector10 = new Vector34();
  var scratchNormal3 = new Vector34();
  var scratchK = new Vector34();
  var scratchPosition2 = new Vector34();
  var scratchHeight = new Vector34();
  var scratchCartesian = new Vector34();
  var Ellipsoid = class {
    constructor(x4 = 0, y5 = 0, z4 = 0) {
      this.centerToleranceSquared = math_utils_exports2.EPSILON1;
      assert12(x4 >= 0);
      assert12(y5 >= 0);
      assert12(z4 >= 0);
      this.radii = new Vector34(x4, y5, z4);
      this.radiiSquared = new Vector34(x4 * x4, y5 * y5, z4 * z4);
      this.radiiToTheFourth = new Vector34(x4 * x4 * x4 * x4, y5 * y5 * y5 * y5, z4 * z4 * z4 * z4);
      this.oneOverRadii = new Vector34(x4 === 0 ? 0 : 1 / x4, y5 === 0 ? 0 : 1 / y5, z4 === 0 ? 0 : 1 / z4);
      this.oneOverRadiiSquared = new Vector34(x4 === 0 ? 0 : 1 / (x4 * x4), y5 === 0 ? 0 : 1 / (y5 * y5), z4 === 0 ? 0 : 1 / (z4 * z4));
      this.minimumRadius = Math.min(x4, y5, z4);
      this.maximumRadius = Math.max(x4, y5, z4);
      if (this.radiiSquared.z !== 0) {
        this.squaredXOverSquaredZ = this.radiiSquared.x / this.radiiSquared.z;
      }
      Object.freeze(this);
    }
    /** Compares this Ellipsoid against the provided Ellipsoid componentwise */
    equals(right) {
      return this === right || Boolean(right && this.radii.equals(right.radii));
    }
    /** Creates a string representing this Ellipsoid in the format '(radii.x, radii.y, radii.z)'. */
    toString() {
      return this.radii.toString();
    }
    cartographicToCartesian(cartographic, result = [0, 0, 0]) {
      const normal = scratchNormal3;
      const k4 = scratchK;
      const [, , height] = cartographic;
      this.geodeticSurfaceNormalCartographic(cartographic, normal);
      k4.copy(this.radiiSquared).scale(normal);
      const gamma = Math.sqrt(normal.dot(k4));
      k4.scale(1 / gamma);
      normal.scale(height);
      k4.add(normal);
      return k4.to(result);
    }
    cartesianToCartographic(cartesian, result = [0, 0, 0]) {
      scratchCartesian.from(cartesian);
      const point = this.scaleToGeodeticSurface(scratchCartesian, scratchPosition2);
      if (!point) {
        return void 0;
      }
      const normal = this.geodeticSurfaceNormal(point, scratchNormal3);
      const h5 = scratchHeight;
      h5.copy(scratchCartesian).subtract(point);
      const longitude = Math.atan2(normal.y, normal.x);
      const latitude = Math.asin(normal.z);
      const height = Math.sign(vec3_exports4.dot(h5, scratchCartesian)) * vec3_exports4.length(h5);
      return toCartographicFromRadians([longitude, latitude, height], result);
    }
    eastNorthUpToFixedFrame(origin, result = new Matrix43()) {
      return localFrameToFixedFrame(this, "east", "north", "up", origin, result);
    }
    // Computes a 4x4 transformation matrix from a reference frame centered at
    // the provided origin to the ellipsoid's fixed reference frame.
    localFrameToFixedFrame(firstAxis, secondAxis, thirdAxis, origin, result = new Matrix43()) {
      return localFrameToFixedFrame(this, firstAxis, secondAxis, thirdAxis, origin, result);
    }
    geocentricSurfaceNormal(cartesian, result = [0, 0, 0]) {
      return scratchVector10.from(cartesian).normalize().to(result);
    }
    geodeticSurfaceNormalCartographic(cartographic, result = [0, 0, 0]) {
      const cartographicVectorRadians = fromCartographicToRadians(cartographic);
      const longitude = cartographicVectorRadians[0];
      const latitude = cartographicVectorRadians[1];
      const cosLatitude = Math.cos(latitude);
      scratchVector10.set(cosLatitude * Math.cos(longitude), cosLatitude * Math.sin(longitude), Math.sin(latitude)).normalize();
      return scratchVector10.to(result);
    }
    geodeticSurfaceNormal(cartesian, result = [0, 0, 0]) {
      return scratchVector10.from(cartesian).scale(this.oneOverRadiiSquared).normalize().to(result);
    }
    /** Scales the provided Cartesian position along the geodetic surface normal
     * so that it is on the surface of this ellipsoid.  If the position is
     * at the center of the ellipsoid, this function returns undefined. */
    scaleToGeodeticSurface(cartesian, result) {
      return scaleToGeodeticSurface(cartesian, this, result);
    }
    /** Scales the provided Cartesian position along the geocentric surface normal
     * so that it is on the surface of this ellipsoid. */
    scaleToGeocentricSurface(cartesian, result = [0, 0, 0]) {
      scratchPosition2.from(cartesian);
      const positionX = scratchPosition2.x;
      const positionY = scratchPosition2.y;
      const positionZ = scratchPosition2.z;
      const oneOverRadiiSquared = this.oneOverRadiiSquared;
      const beta = 1 / Math.sqrt(positionX * positionX * oneOverRadiiSquared.x + positionY * positionY * oneOverRadiiSquared.y + positionZ * positionZ * oneOverRadiiSquared.z);
      return scratchPosition2.multiplyScalar(beta).to(result);
    }
    /** Transforms a Cartesian X, Y, Z position to the ellipsoid-scaled space by multiplying
     * its components by the result of `Ellipsoid#oneOverRadii` */
    transformPositionToScaledSpace(position, result = [0, 0, 0]) {
      return scratchPosition2.from(position).scale(this.oneOverRadii).to(result);
    }
    /** Transforms a Cartesian X, Y, Z position from the ellipsoid-scaled space by multiplying
     * its components by the result of `Ellipsoid#radii`. */
    transformPositionFromScaledSpace(position, result = [0, 0, 0]) {
      return scratchPosition2.from(position).scale(this.radii).to(result);
    }
    /** Computes a point which is the intersection of the surface normal with the z-axis. */
    getSurfaceNormalIntersectionWithZAxis(position, buffer = 0, result = [0, 0, 0]) {
      assert12(equals9(this.radii.x, this.radii.y, math_utils_exports2.EPSILON15));
      assert12(this.radii.z > 0);
      scratchPosition2.from(position);
      const z4 = scratchPosition2.z * (1 - this.squaredXOverSquaredZ);
      if (Math.abs(z4) >= this.radii.z - buffer) {
        return void 0;
      }
      return scratchPosition2.set(0, 0, z4).to(result);
    }
  };
  Ellipsoid.WGS84 = new Ellipsoid(WGS84_RADIUS_X, WGS84_RADIUS_Y, WGS84_RADIUS_Z);

  // ../../node_modules/@loaders.gl/tiles/dist/tileset/tileset-3d.js
  init_dist3();

  // ../../node_modules/@loaders.gl/tiles/dist/utils/doubly-linked-list-node.js
  var DoublyLinkedListNode = class {
    item;
    previous;
    next;
    constructor(item, previous, next) {
      this.item = item;
      this.previous = previous;
      this.next = next;
    }
  };

  // ../../node_modules/@loaders.gl/tiles/dist/utils/doubly-linked-list.js
  var DoublyLinkedList = class {
    head = null;
    tail = null;
    _length = 0;
    get length() {
      return this._length;
    }
    /**
     * Adds the item to the end of the list
     * @param {*} [item]
     * @return {DoublyLinkedListNode}
     */
    add(item) {
      const node = new DoublyLinkedListNode(item, this.tail, null);
      if (this.tail) {
        this.tail.next = node;
        this.tail = node;
      } else {
        this.head = node;
        this.tail = node;
      }
      ++this._length;
      return node;
    }
    /**
     * Removes the given node from the list
     * @param {DoublyLinkedListNode} node
     */
    remove(node) {
      if (!node) {
        return;
      }
      if (node.previous && node.next) {
        node.previous.next = node.next;
        node.next.previous = node.previous;
      } else if (node.previous) {
        node.previous.next = null;
        this.tail = node.previous;
      } else if (node.next) {
        node.next.previous = null;
        this.head = node.next;
      } else {
        this.head = null;
        this.tail = null;
      }
      node.next = null;
      node.previous = null;
      --this._length;
    }
    /**
     * Moves nextNode after node
     * @param {DoublyLinkedListNode} node
     * @param {DoublyLinkedListNode} nextNode
     */
    splice(node, nextNode) {
      if (node === nextNode) {
        return;
      }
      this.remove(nextNode);
      this._insert(node, nextNode);
    }
    _insert(node, nextNode) {
      const oldNodeNext = node.next;
      node.next = nextNode;
      if (this.tail === node) {
        this.tail = nextNode;
      } else {
        oldNodeNext.previous = nextNode;
      }
      nextNode.next = oldNodeNext;
      nextNode.previous = node;
      ++this._length;
    }
  };

  // ../../node_modules/@loaders.gl/tiles/dist/tileset/tileset-cache.js
  var TilesetCache = class {
    _list;
    _sentinel;
    _trimTiles;
    constructor() {
      this._list = new DoublyLinkedList();
      this._sentinel = this._list.add("sentinel");
      this._trimTiles = false;
    }
    reset() {
      this._list.splice(this._list.tail, this._sentinel);
    }
    touch(tile) {
      const node = tile._cacheNode;
      if (node) {
        this._list.splice(this._sentinel, node);
      }
    }
    add(tileset, tile, addCallback) {
      if (!tile._cacheNode) {
        tile._cacheNode = this._list.add(tile);
        if (addCallback) {
          addCallback(tileset, tile);
        }
      }
    }
    unloadTile(tileset, tile, unloadCallback) {
      const node = tile._cacheNode;
      if (!node) {
        return;
      }
      this._list.remove(node);
      tile._cacheNode = null;
      if (unloadCallback) {
        unloadCallback(tileset, tile);
      }
    }
    unloadTiles(tileset, unloadCallback) {
      const trimTiles = this._trimTiles;
      this._trimTiles = false;
      const list = this._list;
      const maximumMemoryUsageInBytes = tileset.maximumMemoryUsage * 1024 * 1024;
      const sentinel = this._sentinel;
      let node = list.head;
      while (node !== sentinel && (tileset.gpuMemoryUsageInBytes > maximumMemoryUsageInBytes || trimTiles)) {
        const tile = node.item;
        node = node.next;
        this.unloadTile(tileset, tile, unloadCallback);
      }
    }
    trim() {
      this._trimTiles = true;
    }
  };

  // ../../node_modules/@loaders.gl/tiles/dist/tileset/helpers/transform-utils.js
  function calculateTransformProps(tileHeader, tile) {
    assert2(tileHeader);
    assert2(tile);
    const { rtcCenter, gltfUpAxis } = tile;
    const { computedTransform, boundingVolume: { center: center2 } } = tileHeader;
    let modelMatrix2 = new Matrix42(computedTransform);
    if (rtcCenter) {
      modelMatrix2.translate(rtcCenter);
    }
    switch (gltfUpAxis) {
      case "Z":
        break;
      case "Y":
        const rotationY = new Matrix42().rotateX(Math.PI / 2);
        modelMatrix2 = modelMatrix2.multiplyRight(rotationY);
        break;
      case "X":
        const rotationX = new Matrix42().rotateY(-Math.PI / 2);
        modelMatrix2 = modelMatrix2.multiplyRight(rotationX);
        break;
      default:
        break;
    }
    if (tile.isQuantized) {
      modelMatrix2.translate(tile.quantizedVolumeOffset).scale(tile.quantizedVolumeScale);
    }
    const cartesianOrigin = new Vector33(center2);
    tile.cartesianModelMatrix = modelMatrix2;
    tile.cartesianOrigin = cartesianOrigin;
    const cartographicOrigin = Ellipsoid.WGS84.cartesianToCartographic(cartesianOrigin, new Vector33());
    const fromFixedFrameMatrix = Ellipsoid.WGS84.eastNorthUpToFixedFrame(cartesianOrigin);
    const toFixedFrameMatrix = fromFixedFrameMatrix.invert();
    tile.cartographicModelMatrix = toFixedFrameMatrix.multiplyRight(modelMatrix2);
    tile.cartographicOrigin = cartographicOrigin;
    if (!tile.coordinateSystem) {
      tile.modelMatrix = tile.cartographicModelMatrix;
    }
  }

  // ../../node_modules/@math.gl/culling/dist/constants.js
  var INTERSECTION2 = {
    OUTSIDE: -1,
    // Represents that an object is not contained within the frustum.
    INTERSECTING: 0,
    // Represents that an object intersects one of the frustum's planes.
    INSIDE: 1
    // Represents that an object is fully within the frustum.
  };

  // ../../node_modules/@math.gl/culling/node_modules/@math.gl/core/dist/lib/common.js
  var RADIANS_TO_DEGREES7 = 1 / Math.PI * 180;
  var DEGREES_TO_RADIANS11 = 1 / 180 * Math.PI;
  var DEFAULT_CONFIG5 = {
    EPSILON: 1e-12,
    debug: false,
    precision: 4,
    printTypes: false,
    printDegrees: false,
    printRowMajor: true,
    _cartographicRadians: false
  };
  globalThis.mathgl = globalThis.mathgl || { config: { ...DEFAULT_CONFIG5 } };
  var config5 = globalThis.mathgl.config;
  function formatValue5(value, { precision = config5.precision } = {}) {
    value = round14(value);
    return `${parseFloat(value.toPrecision(precision))}`;
  }
  function isArray8(value) {
    return Array.isArray(value) || ArrayBuffer.isView(value) && !(value instanceof DataView);
  }
  function equals11(a6, b4, epsilon) {
    const oldEpsilon = config5.EPSILON;
    if (epsilon) {
      config5.EPSILON = epsilon;
    }
    try {
      if (a6 === b4) {
        return true;
      }
      if (isArray8(a6) && isArray8(b4)) {
        if (a6.length !== b4.length) {
          return false;
        }
        for (let i7 = 0; i7 < a6.length; ++i7) {
          if (!equals11(a6[i7], b4[i7])) {
            return false;
          }
        }
        return true;
      }
      if (a6 && a6.equals) {
        return a6.equals(b4);
      }
      if (b4 && b4.equals) {
        return b4.equals(a6);
      }
      if (typeof a6 === "number" && typeof b4 === "number") {
        return Math.abs(a6 - b4) <= config5.EPSILON * Math.max(1, Math.abs(a6), Math.abs(b4));
      }
      return false;
    } finally {
      config5.EPSILON = oldEpsilon;
    }
  }
  function round14(value) {
    return Math.round(value / config5.EPSILON) * config5.EPSILON;
  }

  // ../../node_modules/@math.gl/culling/node_modules/@math.gl/core/dist/classes/base/math-array.js
  var MathArray5 = class extends Array {
    // Common methods
    /**
     * Clone the current object
     * @returns a new copy of this object
     */
    clone() {
      return new this.constructor().copy(this);
    }
    fromArray(array, offset = 0) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = array[i7 + offset];
      }
      return this.check();
    }
    toArray(targetArray = [], offset = 0) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        targetArray[offset + i7] = this[i7];
      }
      return targetArray;
    }
    toObject(targetObject) {
      return targetObject;
    }
    from(arrayOrObject) {
      return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : (
        // @ts-ignore
        this.fromObject(arrayOrObject)
      );
    }
    to(arrayOrObject) {
      if (arrayOrObject === this) {
        return this;
      }
      return isArray8(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);
    }
    toTarget(target2) {
      return target2 ? this.to(target2) : this;
    }
    /** @deprecated */
    toFloat32Array() {
      return new Float32Array(this);
    }
    toString() {
      return this.formatString(config5);
    }
    /** Formats string according to options */
    formatString(opts) {
      let string = "";
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        string += (i7 > 0 ? ", " : "") + formatValue5(this[i7], opts);
      }
      return `${opts.printTypes ? this.constructor.name : ""}[${string}]`;
    }
    equals(array) {
      if (!array || this.length !== array.length) {
        return false;
      }
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        if (!equals11(this[i7], array[i7])) {
          return false;
        }
      }
      return true;
    }
    exactEquals(array) {
      if (!array || this.length !== array.length) {
        return false;
      }
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        if (this[i7] !== array[i7]) {
          return false;
        }
      }
      return true;
    }
    // Modifiers
    /** Negates all values in this object */
    negate() {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = -this[i7];
      }
      return this.check();
    }
    lerp(a6, b4, t5) {
      if (t5 === void 0) {
        return this.lerp(this, a6, b4);
      }
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        const ai = a6[i7];
        const endValue = typeof b4 === "number" ? b4 : b4[i7];
        this[i7] = ai + t5 * (endValue - ai);
      }
      return this.check();
    }
    /** Minimal */
    min(vector) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.min(vector[i7], this[i7]);
      }
      return this.check();
    }
    /** Maximal */
    max(vector) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.max(vector[i7], this[i7]);
      }
      return this.check();
    }
    clamp(minVector, maxVector) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.min(Math.max(this[i7], minVector[i7]), maxVector[i7]);
      }
      return this.check();
    }
    add(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] += vector[i7];
        }
      }
      return this.check();
    }
    subtract(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] -= vector[i7];
        }
      }
      return this.check();
    }
    scale(scale24) {
      if (typeof scale24 === "number") {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] *= scale24;
        }
      } else {
        for (let i7 = 0; i7 < this.ELEMENTS && i7 < scale24.length; ++i7) {
          this[i7] *= scale24[i7];
        }
      }
      return this.check();
    }
    /**
     * Multiplies all elements by `scale`
     * Note: `Matrix4.multiplyByScalar` only scales its 3x3 "minor"
     */
    multiplyByScalar(scalar) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] *= scalar;
      }
      return this.check();
    }
    // Debug checks
    /** Throws an error if array length is incorrect or contains illegal values */
    check() {
      if (config5.debug && !this.validate()) {
        throw new Error(`math.gl: ${this.constructor.name} some fields set to invalid numbers'`);
      }
      return this;
    }
    /** Returns false if the array length is incorrect or contains illegal values */
    validate() {
      let valid = this.length === this.ELEMENTS;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        valid = valid && Number.isFinite(this[i7]);
      }
      return valid;
    }
    // three.js compatibility
    /** @deprecated */
    sub(a6) {
      return this.subtract(a6);
    }
    /** @deprecated */
    setScalar(a6) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = a6;
      }
      return this.check();
    }
    /** @deprecated */
    addScalar(a6) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] += a6;
      }
      return this.check();
    }
    /** @deprecated */
    subScalar(a6) {
      return this.addScalar(-a6);
    }
    /** @deprecated */
    multiplyScalar(scalar) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] *= scalar;
      }
      return this.check();
    }
    /** @deprecated */
    divideScalar(a6) {
      return this.multiplyByScalar(1 / a6);
    }
    /** @deprecated */
    clampScalar(min7, max7) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.min(Math.max(this[i7], min7), max7);
      }
      return this.check();
    }
    /** @deprecated */
    get elements() {
      return this;
    }
  };

  // ../../node_modules/@math.gl/culling/node_modules/@math.gl/core/dist/lib/validators.js
  function validateVector5(v5, length17) {
    if (v5.length !== length17) {
      return false;
    }
    for (let i7 = 0; i7 < v5.length; ++i7) {
      if (!Number.isFinite(v5[i7])) {
        return false;
      }
    }
    return true;
  }
  function checkNumber5(value) {
    if (!Number.isFinite(value)) {
      throw new Error(`Invalid number ${JSON.stringify(value)}`);
    }
    return value;
  }
  function checkVector5(v5, length17, callerName = "") {
    if (config5.debug && !validateVector5(v5, length17)) {
      throw new Error(`math.gl: ${callerName} some fields set to invalid numbers'`);
    }
    return v5;
  }

  // ../../node_modules/@math.gl/culling/node_modules/@math.gl/core/dist/lib/assert.js
  function assert13(condition, message2) {
    if (!condition) {
      throw new Error(`math.gl assertion ${message2}`);
    }
  }

  // ../../node_modules/@math.gl/culling/node_modules/@math.gl/core/dist/classes/base/vector.js
  var Vector8 = class extends MathArray5 {
    // ACCESSORS
    get x() {
      return this[0];
    }
    set x(value) {
      this[0] = checkNumber5(value);
    }
    get y() {
      return this[1];
    }
    set y(value) {
      this[1] = checkNumber5(value);
    }
    /**
     * Returns the length of the vector from the origin to the point described by this vector
     *
     * @note `length` is a reserved word for Arrays, so `v.length()` will return number of elements
     * Instead we provide `len` and `magnitude`
     */
    len() {
      return Math.sqrt(this.lengthSquared());
    }
    /**
     * Returns the length of the vector from the origin to the point described by this vector
     */
    magnitude() {
      return this.len();
    }
    /**
     * Returns the squared length of the vector from the origin to the point described by this vector
     */
    lengthSquared() {
      let length17 = 0;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        length17 += this[i7] * this[i7];
      }
      return length17;
    }
    /**
     * Returns the squared length of the vector from the origin to the point described by this vector
     */
    magnitudeSquared() {
      return this.lengthSquared();
    }
    distance(mathArray) {
      return Math.sqrt(this.distanceSquared(mathArray));
    }
    distanceSquared(mathArray) {
      let length17 = 0;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        const dist6 = this[i7] - mathArray[i7];
        length17 += dist6 * dist6;
      }
      return checkNumber5(length17);
    }
    dot(mathArray) {
      let product = 0;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        product += this[i7] * mathArray[i7];
      }
      return checkNumber5(product);
    }
    // MODIFIERS
    normalize() {
      const length17 = this.magnitude();
      if (length17 !== 0) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] /= length17;
        }
      }
      return this.check();
    }
    multiply(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] *= vector[i7];
        }
      }
      return this.check();
    }
    divide(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] /= vector[i7];
        }
      }
      return this.check();
    }
    // THREE.js compatibility
    lengthSq() {
      return this.lengthSquared();
    }
    distanceTo(vector) {
      return this.distance(vector);
    }
    distanceToSquared(vector) {
      return this.distanceSquared(vector);
    }
    getComponent(i7) {
      assert13(i7 >= 0 && i7 < this.ELEMENTS, "index is out of range");
      return checkNumber5(this[i7]);
    }
    setComponent(i7, value) {
      assert13(i7 >= 0 && i7 < this.ELEMENTS, "index is out of range");
      this[i7] = value;
      return this.check();
    }
    addVectors(a6, b4) {
      return this.copy(a6).add(b4);
    }
    subVectors(a6, b4) {
      return this.copy(a6).subtract(b4);
    }
    multiplyVectors(a6, b4) {
      return this.copy(a6).multiply(b4);
    }
    addScaledVector(a6, b4) {
      return this.add(new this.constructor(a6).multiplyScalar(b4));
    }
  };

  // ../../node_modules/@math.gl/culling/node_modules/@math.gl/core/dist/gl-matrix/common.js
  var EPSILON29 = 1e-6;
  var ARRAY_TYPE6 = typeof Float32Array !== "undefined" ? Float32Array : Array;
  var degree6 = Math.PI / 180;

  // ../../node_modules/@math.gl/culling/node_modules/@math.gl/core/dist/gl-matrix/vec2.js
  function create18() {
    const out = new ARRAY_TYPE6(2);
    if (ARRAY_TYPE6 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
    }
    return out;
  }
  function transformMat39(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[3] * y5 + m3[6];
    out[1] = m3[1] * x4 + m3[4] * y5 + m3[7];
    return out;
  }
  var forEach14 = function() {
    const vec = create18();
    return function(a6, stride, offset, count3, fn, arg) {
      let i7;
      let l5;
      if (!stride) {
        stride = 2;
      }
      if (!offset) {
        offset = 0;
      }
      if (count3) {
        l5 = Math.min(count3 * stride + offset, a6.length);
      } else {
        l5 = a6.length;
      }
      for (i7 = offset; i7 < l5; i7 += stride) {
        vec[0] = a6[i7];
        vec[1] = a6[i7 + 1];
        fn(vec, vec, arg);
        a6[i7] = vec[0];
        a6[i7 + 1] = vec[1];
      }
      return a6;
    };
  }();

  // ../../node_modules/@math.gl/culling/node_modules/@math.gl/core/dist/lib/gl-matrix-extras.js
  function vec3_transformMat4AsVector5(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = m3[3] * x4 + m3[7] * y5 + m3[11] * z4 || 1;
    out[0] = (m3[0] * x4 + m3[4] * y5 + m3[8] * z4) / w5;
    out[1] = (m3[1] * x4 + m3[5] * y5 + m3[9] * z4) / w5;
    out[2] = (m3[2] * x4 + m3[6] * y5 + m3[10] * z4) / w5;
    return out;
  }
  function vec3_transformMat25(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[2] * y5;
    out[1] = m3[1] * x4 + m3[3] * y5;
    out[2] = a6[2];
    return out;
  }
  function vec4_transformMat23(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[2] * y5;
    out[1] = m3[1] * x4 + m3[3] * y5;
    out[2] = a6[2];
    out[3] = a6[3];
    return out;
  }
  function vec4_transformMat34(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    out[0] = m3[0] * x4 + m3[3] * y5 + m3[6] * z4;
    out[1] = m3[1] * x4 + m3[4] * y5 + m3[7] * z4;
    out[2] = m3[2] * x4 + m3[5] * y5 + m3[8] * z4;
    out[3] = a6[3];
    return out;
  }

  // ../../node_modules/@math.gl/culling/node_modules/@math.gl/core/dist/gl-matrix/vec3.js
  function create19() {
    const out = new ARRAY_TYPE6(3);
    if (ARRAY_TYPE6 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }
    return out;
  }
  function length10(a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    return Math.sqrt(x4 * x4 + y5 * y5 + z4 * z4);
  }
  function fromValues9(x4, y5, z4) {
    const out = new ARRAY_TYPE6(3);
    out[0] = x4;
    out[1] = y5;
    out[2] = z4;
    return out;
  }
  function normalize11(out, a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    let len9 = x4 * x4 + y5 * y5 + z4 * z4;
    if (len9 > 0) {
      len9 = 1 / Math.sqrt(len9);
    }
    out[0] = a6[0] * len9;
    out[1] = a6[1] * len9;
    out[2] = a6[2] * len9;
    return out;
  }
  function dot11(a6, b4) {
    return a6[0] * b4[0] + a6[1] * b4[1] + a6[2] * b4[2];
  }
  function cross8(out, a6, b4) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const bx = b4[0];
    const by = b4[1];
    const bz = b4[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
  }
  function transformMat412(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    let w5 = m3[3] * x4 + m3[7] * y5 + m3[11] * z4 + m3[15];
    w5 = w5 || 1;
    out[0] = (m3[0] * x4 + m3[4] * y5 + m3[8] * z4 + m3[12]) / w5;
    out[1] = (m3[1] * x4 + m3[5] * y5 + m3[9] * z4 + m3[13]) / w5;
    out[2] = (m3[2] * x4 + m3[6] * y5 + m3[10] * z4 + m3[14]) / w5;
    return out;
  }
  function transformMat310(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    out[0] = x4 * m3[0] + y5 * m3[3] + z4 * m3[6];
    out[1] = x4 * m3[1] + y5 * m3[4] + z4 * m3[7];
    out[2] = x4 * m3[2] + y5 * m3[5] + z4 * m3[8];
    return out;
  }
  function transformQuat8(out, a6, q3) {
    const qx = q3[0];
    const qy = q3[1];
    const qz = q3[2];
    const qw = q3[3];
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    let uvx = qy * z4 - qz * y5;
    let uvy = qz * x4 - qx * z4;
    let uvz = qx * y5 - qy * x4;
    let uuvx = qy * uvz - qz * uvy;
    let uuvy = qz * uvx - qx * uvz;
    let uuvz = qx * uvy - qy * uvx;
    const w22 = qw * 2;
    uvx *= w22;
    uvy *= w22;
    uvz *= w22;
    uuvx *= 2;
    uuvy *= 2;
    uuvz *= 2;
    out[0] = x4 + uvx + uuvx;
    out[1] = y5 + uvy + uuvy;
    out[2] = z4 + uvz + uuvz;
    return out;
  }
  function rotateX11(out, a6, b4, rad) {
    const p5 = [];
    const r5 = [];
    p5[0] = a6[0] - b4[0];
    p5[1] = a6[1] - b4[1];
    p5[2] = a6[2] - b4[2];
    r5[0] = p5[0];
    r5[1] = p5[1] * Math.cos(rad) - p5[2] * Math.sin(rad);
    r5[2] = p5[1] * Math.sin(rad) + p5[2] * Math.cos(rad);
    out[0] = r5[0] + b4[0];
    out[1] = r5[1] + b4[1];
    out[2] = r5[2] + b4[2];
    return out;
  }
  function rotateY11(out, a6, b4, rad) {
    const p5 = [];
    const r5 = [];
    p5[0] = a6[0] - b4[0];
    p5[1] = a6[1] - b4[1];
    p5[2] = a6[2] - b4[2];
    r5[0] = p5[2] * Math.sin(rad) + p5[0] * Math.cos(rad);
    r5[1] = p5[1];
    r5[2] = p5[2] * Math.cos(rad) - p5[0] * Math.sin(rad);
    out[0] = r5[0] + b4[0];
    out[1] = r5[1] + b4[1];
    out[2] = r5[2] + b4[2];
    return out;
  }
  function rotateZ11(out, a6, b4, rad) {
    const p5 = [];
    const r5 = [];
    p5[0] = a6[0] - b4[0];
    p5[1] = a6[1] - b4[1];
    p5[2] = a6[2] - b4[2];
    r5[0] = p5[0] * Math.cos(rad) - p5[1] * Math.sin(rad);
    r5[1] = p5[0] * Math.sin(rad) + p5[1] * Math.cos(rad);
    r5[2] = p5[2];
    out[0] = r5[0] + b4[0];
    out[1] = r5[1] + b4[1];
    out[2] = r5[2] + b4[2];
    return out;
  }
  function angle7(a6, b4) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const bx = b4[0];
    const by = b4[1];
    const bz = b4[2];
    const mag = Math.sqrt((ax * ax + ay * ay + az * az) * (bx * bx + by * by + bz * bz));
    const cosine = mag && dot11(a6, b4) / mag;
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
  }
  var len7 = length10;
  var forEach15 = function() {
    const vec = create19();
    return function(a6, stride, offset, count3, fn, arg) {
      let i7;
      let l5;
      if (!stride) {
        stride = 3;
      }
      if (!offset) {
        offset = 0;
      }
      if (count3) {
        l5 = Math.min(count3 * stride + offset, a6.length);
      } else {
        l5 = a6.length;
      }
      for (i7 = offset; i7 < l5; i7 += stride) {
        vec[0] = a6[i7];
        vec[1] = a6[i7 + 1];
        vec[2] = a6[i7 + 2];
        fn(vec, vec, arg);
        a6[i7] = vec[0];
        a6[i7 + 1] = vec[1];
        a6[i7 + 2] = vec[2];
      }
      return a6;
    };
  }();

  // ../../node_modules/@math.gl/culling/node_modules/@math.gl/core/dist/classes/vector3.js
  var ORIGIN5 = [0, 0, 0];
  var ZERO11;
  var Vector35 = class extends Vector8 {
    static get ZERO() {
      if (!ZERO11) {
        ZERO11 = new Vector35(0, 0, 0);
        Object.freeze(ZERO11);
      }
      return ZERO11;
    }
    /**
     * @class
     * @param x
     * @param y
     * @param z
     */
    constructor(x4 = 0, y5 = 0, z4 = 0) {
      super(-0, -0, -0);
      if (arguments.length === 1 && isArray8(x4)) {
        this.copy(x4);
      } else {
        if (config5.debug) {
          checkNumber5(x4);
          checkNumber5(y5);
          checkNumber5(z4);
        }
        this[0] = x4;
        this[1] = y5;
        this[2] = z4;
      }
    }
    set(x4, y5, z4) {
      this[0] = x4;
      this[1] = y5;
      this[2] = z4;
      return this.check();
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      return this.check();
    }
    fromObject(object) {
      if (config5.debug) {
        checkNumber5(object.x);
        checkNumber5(object.y);
        checkNumber5(object.z);
      }
      this[0] = object.x;
      this[1] = object.y;
      this[2] = object.z;
      return this.check();
    }
    toObject(object) {
      object.x = this[0];
      object.y = this[1];
      object.z = this[2];
      return object;
    }
    // Getters/setters
    get ELEMENTS() {
      return 3;
    }
    get z() {
      return this[2];
    }
    set z(value) {
      this[2] = checkNumber5(value);
    }
    // ACCESSORS
    angle(vector) {
      return angle7(this, vector);
    }
    // MODIFIERS
    cross(vector) {
      cross8(this, this, vector);
      return this.check();
    }
    rotateX({ radians: radians6, origin = ORIGIN5 }) {
      rotateX11(this, this, origin, radians6);
      return this.check();
    }
    rotateY({ radians: radians6, origin = ORIGIN5 }) {
      rotateY11(this, this, origin, radians6);
      return this.check();
    }
    rotateZ({ radians: radians6, origin = ORIGIN5 }) {
      rotateZ11(this, this, origin, radians6);
      return this.check();
    }
    // Transforms
    // transforms as point (4th component is implicitly 1)
    transform(matrix4) {
      return this.transformAsPoint(matrix4);
    }
    // transforms as point (4th component is implicitly 1)
    transformAsPoint(matrix4) {
      transformMat412(this, this, matrix4);
      return this.check();
    }
    // transforms as vector  (4th component is implicitly 0, ignores translation. slightly faster)
    transformAsVector(matrix4) {
      vec3_transformMat4AsVector5(this, this, matrix4);
      return this.check();
    }
    transformByMatrix3(matrix3) {
      transformMat310(this, this, matrix3);
      return this.check();
    }
    transformByMatrix2(matrix2) {
      vec3_transformMat25(this, this, matrix2);
      return this.check();
    }
    transformByQuaternion(quaternion) {
      transformQuat8(this, this, quaternion);
      return this.check();
    }
  };

  // ../../node_modules/@math.gl/culling/node_modules/@math.gl/core/dist/classes/vector4.js
  var ZERO12;
  var Vector43 = class extends Vector8 {
    static get ZERO() {
      if (!ZERO12) {
        ZERO12 = new Vector43(0, 0, 0, 0);
        Object.freeze(ZERO12);
      }
      return ZERO12;
    }
    constructor(x4 = 0, y5 = 0, z4 = 0, w5 = 0) {
      super(-0, -0, -0, -0);
      if (isArray8(x4) && arguments.length === 1) {
        this.copy(x4);
      } else {
        if (config5.debug) {
          checkNumber5(x4);
          checkNumber5(y5);
          checkNumber5(z4);
          checkNumber5(w5);
        }
        this[0] = x4;
        this[1] = y5;
        this[2] = z4;
        this[3] = w5;
      }
    }
    set(x4, y5, z4, w5) {
      this[0] = x4;
      this[1] = y5;
      this[2] = z4;
      this[3] = w5;
      return this.check();
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      this[3] = array[3];
      return this.check();
    }
    fromObject(object) {
      if (config5.debug) {
        checkNumber5(object.x);
        checkNumber5(object.y);
        checkNumber5(object.z);
        checkNumber5(object.w);
      }
      this[0] = object.x;
      this[1] = object.y;
      this[2] = object.z;
      this[3] = object.w;
      return this;
    }
    toObject(object) {
      object.x = this[0];
      object.y = this[1];
      object.z = this[2];
      object.w = this[3];
      return object;
    }
    // Getters/setters
    /* eslint-disable no-multi-spaces, brace-style, no-return-assign */
    get ELEMENTS() {
      return 4;
    }
    get z() {
      return this[2];
    }
    set z(value) {
      this[2] = checkNumber5(value);
    }
    get w() {
      return this[3];
    }
    set w(value) {
      this[3] = checkNumber5(value);
    }
    transform(matrix4) {
      transformMat412(this, this, matrix4);
      return this.check();
    }
    transformByMatrix3(matrix3) {
      vec4_transformMat34(this, this, matrix3);
      return this.check();
    }
    transformByMatrix2(matrix2) {
      vec4_transformMat23(this, this, matrix2);
      return this.check();
    }
    transformByQuaternion(quaternion) {
      transformQuat8(this, this, quaternion);
      return this.check();
    }
    // three.js compatibility
    applyMatrix4(m3) {
      m3.transform(this, this);
      return this;
    }
  };

  // ../../node_modules/@math.gl/culling/node_modules/@math.gl/core/dist/classes/base/matrix.js
  var Matrix7 = class extends MathArray5 {
    // fromObject(object) {
    //   const array = object.elements;
    //   return this.fromRowMajor(array);
    // }
    // toObject(object) {
    //   const array = object.elements;
    //   this.toRowMajor(array);
    //   return object;
    // }
    // TODO better override formatString?
    toString() {
      let string = "[";
      if (config5.printRowMajor) {
        string += "row-major:";
        for (let row = 0; row < this.RANK; ++row) {
          for (let col = 0; col < this.RANK; ++col) {
            string += ` ${this[col * this.RANK + row]}`;
          }
        }
      } else {
        string += "column-major:";
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          string += ` ${this[i7]}`;
        }
      }
      string += "]";
      return string;
    }
    getElementIndex(row, col) {
      return col * this.RANK + row;
    }
    // By default assumes row major indices
    getElement(row, col) {
      return this[col * this.RANK + row];
    }
    // By default assumes row major indices
    setElement(row, col, value) {
      this[col * this.RANK + row] = checkNumber5(value);
      return this;
    }
    getColumn(columnIndex, result = new Array(this.RANK).fill(-0)) {
      const firstIndex = columnIndex * this.RANK;
      for (let i7 = 0; i7 < this.RANK; ++i7) {
        result[i7] = this[firstIndex + i7];
      }
      return result;
    }
    setColumn(columnIndex, columnVector) {
      const firstIndex = columnIndex * this.RANK;
      for (let i7 = 0; i7 < this.RANK; ++i7) {
        this[firstIndex + i7] = columnVector[i7];
      }
      return this;
    }
  };

  // ../../node_modules/@math.gl/culling/node_modules/@math.gl/core/dist/gl-matrix/mat3.js
  function create20() {
    const out = new ARRAY_TYPE6(9);
    if (ARRAY_TYPE6 != Float32Array) {
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[5] = 0;
      out[6] = 0;
      out[7] = 0;
    }
    out[0] = 1;
    out[4] = 1;
    out[8] = 1;
    return out;
  }
  function transpose8(out, a6) {
    if (out === a6) {
      const a01 = a6[1];
      const a02 = a6[2];
      const a12 = a6[5];
      out[1] = a6[3];
      out[2] = a6[6];
      out[3] = a01;
      out[5] = a6[7];
      out[6] = a02;
      out[7] = a12;
    } else {
      out[0] = a6[0];
      out[1] = a6[3];
      out[2] = a6[6];
      out[3] = a6[1];
      out[4] = a6[4];
      out[5] = a6[7];
      out[6] = a6[2];
      out[7] = a6[5];
      out[8] = a6[8];
    }
    return out;
  }
  function invert10(out, a6) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    const b01 = a22 * a11 - a12 * a21;
    const b11 = -a22 * a10 + a12 * a20;
    const b21 = a21 * a10 - a11 * a20;
    let det = a00 * b01 + a01 * b11 + a02 * b21;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
  }
  function determinant8(a6) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
  }
  function multiply14(out, a6, b4) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    const b00 = b4[0];
    const b01 = b4[1];
    const b02 = b4[2];
    const b10 = b4[3];
    const b11 = b4[4];
    const b12 = b4[5];
    const b20 = b4[6];
    const b21 = b4[7];
    const b22 = b4[8];
    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;
    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;
    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
  }
  function translate7(out, a6, v5) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    const x4 = v5[0];
    const y5 = v5[1];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a10;
    out[4] = a11;
    out[5] = a12;
    out[6] = x4 * a00 + y5 * a10 + a20;
    out[7] = x4 * a01 + y5 * a11 + a21;
    out[8] = x4 * a02 + y5 * a12 + a22;
    return out;
  }
  function rotate9(out, a6, rad) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    out[0] = c5 * a00 + s5 * a10;
    out[1] = c5 * a01 + s5 * a11;
    out[2] = c5 * a02 + s5 * a12;
    out[3] = c5 * a10 - s5 * a00;
    out[4] = c5 * a11 - s5 * a01;
    out[5] = c5 * a12 - s5 * a02;
    out[6] = a20;
    out[7] = a21;
    out[8] = a22;
    return out;
  }
  function scale15(out, a6, v5) {
    const x4 = v5[0];
    const y5 = v5[1];
    out[0] = x4 * a6[0];
    out[1] = x4 * a6[1];
    out[2] = x4 * a6[2];
    out[3] = y5 * a6[3];
    out[4] = y5 * a6[4];
    out[5] = y5 * a6[5];
    out[6] = a6[6];
    out[7] = a6[7];
    out[8] = a6[8];
    return out;
  }
  function fromQuat8(out, q3) {
    const x4 = q3[0];
    const y5 = q3[1];
    const z4 = q3[2];
    const w5 = q3[3];
    const x22 = x4 + x4;
    const y22 = y5 + y5;
    const z22 = z4 + z4;
    const xx = x4 * x22;
    const yx = y5 * x22;
    const yy = y5 * y22;
    const zx = z4 * x22;
    const zy = z4 * y22;
    const zz = z4 * z22;
    const wx = w5 * x22;
    const wy = w5 * y22;
    const wz = w5 * z22;
    out[0] = 1 - yy - zz;
    out[3] = yx - wz;
    out[6] = zx + wy;
    out[1] = yx + wz;
    out[4] = 1 - xx - zz;
    out[7] = zy - wx;
    out[2] = zx - wy;
    out[5] = zy + wx;
    out[8] = 1 - xx - yy;
    return out;
  }

  // ../../node_modules/@math.gl/culling/node_modules/@math.gl/core/dist/classes/matrix3.js
  var INDICES7;
  (function(INDICES10) {
    INDICES10[INDICES10["COL0ROW0"] = 0] = "COL0ROW0";
    INDICES10[INDICES10["COL0ROW1"] = 1] = "COL0ROW1";
    INDICES10[INDICES10["COL0ROW2"] = 2] = "COL0ROW2";
    INDICES10[INDICES10["COL1ROW0"] = 3] = "COL1ROW0";
    INDICES10[INDICES10["COL1ROW1"] = 4] = "COL1ROW1";
    INDICES10[INDICES10["COL1ROW2"] = 5] = "COL1ROW2";
    INDICES10[INDICES10["COL2ROW0"] = 6] = "COL2ROW0";
    INDICES10[INDICES10["COL2ROW1"] = 7] = "COL2ROW1";
    INDICES10[INDICES10["COL2ROW2"] = 8] = "COL2ROW2";
  })(INDICES7 || (INDICES7 = {}));
  var IDENTITY_MATRIX9 = Object.freeze([1, 0, 0, 0, 1, 0, 0, 0, 1]);
  var Matrix34 = class extends Matrix7 {
    static get IDENTITY() {
      return getIdentityMatrix7();
    }
    static get ZERO() {
      return getZeroMatrix7();
    }
    get ELEMENTS() {
      return 9;
    }
    get RANK() {
      return 3;
    }
    get INDICES() {
      return INDICES7;
    }
    constructor(array, ...args) {
      super(-0, -0, -0, -0, -0, -0, -0, -0, -0);
      if (arguments.length === 1 && Array.isArray(array)) {
        this.copy(array);
      } else if (args.length > 0) {
        this.copy([array, ...args]);
      } else {
        this.identity();
      }
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      this[3] = array[3];
      this[4] = array[4];
      this[5] = array[5];
      this[6] = array[6];
      this[7] = array[7];
      this[8] = array[8];
      return this.check();
    }
    // Constructors
    identity() {
      return this.copy(IDENTITY_MATRIX9);
    }
    /**
     *
     * @param object
     * @returns self
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    fromObject(object) {
      return this.check();
    }
    /** Calculates a 3x3 matrix from the given quaternion
     * q quat  Quaternion to create matrix from
     */
    fromQuaternion(q3) {
      fromQuat8(this, q3);
      return this.check();
    }
    /**
     * accepts column major order, stores in column major order
     */
    // eslint-disable-next-line max-params
    set(m00, m10, m20, m01, m11, m21, m02, m12, m22) {
      this[0] = m00;
      this[1] = m10;
      this[2] = m20;
      this[3] = m01;
      this[4] = m11;
      this[5] = m21;
      this[6] = m02;
      this[7] = m12;
      this[8] = m22;
      return this.check();
    }
    /**
     * accepts row major order, stores as column major
     */
    // eslint-disable-next-line max-params
    setRowMajor(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
      this[0] = m00;
      this[1] = m10;
      this[2] = m20;
      this[3] = m01;
      this[4] = m11;
      this[5] = m21;
      this[6] = m02;
      this[7] = m12;
      this[8] = m22;
      return this.check();
    }
    // Accessors
    determinant() {
      return determinant8(this);
    }
    // Modifiers
    transpose() {
      transpose8(this, this);
      return this.check();
    }
    /** Invert a matrix. Note that this can fail if the matrix is not invertible */
    invert() {
      invert10(this, this);
      return this.check();
    }
    // Operations
    multiplyLeft(a6) {
      multiply14(this, a6, this);
      return this.check();
    }
    multiplyRight(a6) {
      multiply14(this, this, a6);
      return this.check();
    }
    rotate(radians6) {
      rotate9(this, this, radians6);
      return this.check();
    }
    scale(factor) {
      if (Array.isArray(factor)) {
        scale15(this, this, factor);
      } else {
        scale15(this, this, [factor, factor]);
      }
      return this.check();
    }
    translate(vec) {
      translate7(this, this, vec);
      return this.check();
    }
    // Transforms
    transform(vector, result) {
      let out;
      switch (vector.length) {
        case 2:
          out = transformMat39(result || [-0, -0], vector, this);
          break;
        case 3:
          out = transformMat310(result || [-0, -0, -0], vector, this);
          break;
        case 4:
          out = vec4_transformMat34(result || [-0, -0, -0, -0], vector, this);
          break;
        default:
          throw new Error("Illegal vector");
      }
      checkVector5(out, vector.length);
      return out;
    }
    /** @deprecated */
    transformVector(vector, result) {
      return this.transform(vector, result);
    }
    /** @deprecated */
    transformVector2(vector, result) {
      return this.transform(vector, result);
    }
    /** @deprecated */
    transformVector3(vector, result) {
      return this.transform(vector, result);
    }
  };
  var ZERO_MATRIX34;
  var IDENTITY_MATRIX34 = null;
  function getZeroMatrix7() {
    if (!ZERO_MATRIX34) {
      ZERO_MATRIX34 = new Matrix34([0, 0, 0, 0, 0, 0, 0, 0, 0]);
      Object.freeze(ZERO_MATRIX34);
    }
    return ZERO_MATRIX34;
  }
  function getIdentityMatrix7() {
    if (!IDENTITY_MATRIX34) {
      IDENTITY_MATRIX34 = new Matrix34();
      Object.freeze(IDENTITY_MATRIX34);
    }
    return IDENTITY_MATRIX34;
  }

  // ../../node_modules/@math.gl/culling/node_modules/@math.gl/core/dist/gl-matrix/mat4.js
  var mat4_exports2 = {};
  __export(mat4_exports2, {
    add: () => add11,
    adjoint: () => adjoint3,
    clone: () => clone11,
    copy: () => copy9,
    create: () => create21,
    decompose: () => decompose2,
    determinant: () => determinant9,
    equals: () => equals12,
    exactEquals: () => exactEquals11,
    frob: () => frob3,
    fromQuat: () => fromQuat9,
    fromQuat2: () => fromQuat22,
    fromRotation: () => fromRotation3,
    fromRotationTranslation: () => fromRotationTranslation2,
    fromRotationTranslationScale: () => fromRotationTranslationScale2,
    fromRotationTranslationScaleOrigin: () => fromRotationTranslationScaleOrigin2,
    fromScaling: () => fromScaling3,
    fromTranslation: () => fromTranslation2,
    fromValues: () => fromValues10,
    fromXRotation: () => fromXRotation2,
    fromYRotation: () => fromYRotation2,
    fromZRotation: () => fromZRotation2,
    frustum: () => frustum4,
    getRotation: () => getRotation3,
    getScaling: () => getScaling2,
    getTranslation: () => getTranslation2,
    identity: () => identity8,
    invert: () => invert11,
    lookAt: () => lookAt4,
    mul: () => mul7,
    multiply: () => multiply15,
    multiplyScalar: () => multiplyScalar3,
    multiplyScalarAndAdd: () => multiplyScalarAndAdd3,
    ortho: () => ortho4,
    orthoNO: () => orthoNO4,
    orthoZO: () => orthoZO2,
    perspective: () => perspective4,
    perspectiveFromFieldOfView: () => perspectiveFromFieldOfView2,
    perspectiveNO: () => perspectiveNO4,
    perspectiveZO: () => perspectiveZO2,
    rotate: () => rotate10,
    rotateX: () => rotateX12,
    rotateY: () => rotateY12,
    rotateZ: () => rotateZ12,
    scale: () => scale16,
    set: () => set8,
    str: () => str7,
    sub: () => sub7,
    subtract: () => subtract7,
    targetTo: () => targetTo2,
    translate: () => translate8,
    transpose: () => transpose9
  });
  function create21() {
    const out = new ARRAY_TYPE6(16);
    if (ARRAY_TYPE6 != Float32Array) {
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
    }
    out[0] = 1;
    out[5] = 1;
    out[10] = 1;
    out[15] = 1;
    return out;
  }
  function clone11(a6) {
    const out = new ARRAY_TYPE6(16);
    out[0] = a6[0];
    out[1] = a6[1];
    out[2] = a6[2];
    out[3] = a6[3];
    out[4] = a6[4];
    out[5] = a6[5];
    out[6] = a6[6];
    out[7] = a6[7];
    out[8] = a6[8];
    out[9] = a6[9];
    out[10] = a6[10];
    out[11] = a6[11];
    out[12] = a6[12];
    out[13] = a6[13];
    out[14] = a6[14];
    out[15] = a6[15];
    return out;
  }
  function copy9(out, a6) {
    out[0] = a6[0];
    out[1] = a6[1];
    out[2] = a6[2];
    out[3] = a6[3];
    out[4] = a6[4];
    out[5] = a6[5];
    out[6] = a6[6];
    out[7] = a6[7];
    out[8] = a6[8];
    out[9] = a6[9];
    out[10] = a6[10];
    out[11] = a6[11];
    out[12] = a6[12];
    out[13] = a6[13];
    out[14] = a6[14];
    out[15] = a6[15];
    return out;
  }
  function fromValues10(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    const out = new ARRAY_TYPE6(16);
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
  }
  function set8(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
  }
  function identity8(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function transpose9(out, a6) {
    if (out === a6) {
      const a01 = a6[1];
      const a02 = a6[2];
      const a03 = a6[3];
      const a12 = a6[6];
      const a13 = a6[7];
      const a23 = a6[11];
      out[1] = a6[4];
      out[2] = a6[8];
      out[3] = a6[12];
      out[4] = a01;
      out[6] = a6[9];
      out[7] = a6[13];
      out[8] = a02;
      out[9] = a12;
      out[11] = a6[14];
      out[12] = a03;
      out[13] = a13;
      out[14] = a23;
    } else {
      out[0] = a6[0];
      out[1] = a6[4];
      out[2] = a6[8];
      out[3] = a6[12];
      out[4] = a6[1];
      out[5] = a6[5];
      out[6] = a6[9];
      out[7] = a6[13];
      out[8] = a6[2];
      out[9] = a6[6];
      out[10] = a6[10];
      out[11] = a6[14];
      out[12] = a6[3];
      out[13] = a6[7];
      out[14] = a6[11];
      out[15] = a6[15];
    }
    return out;
  }
  function invert11(out, a6) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    const a30 = a6[12];
    const a31 = a6[13];
    const a32 = a6[14];
    const a33 = a6[15];
    const b00 = a00 * a11 - a01 * a10;
    const b01 = a00 * a12 - a02 * a10;
    const b02 = a00 * a13 - a03 * a10;
    const b03 = a01 * a12 - a02 * a11;
    const b04 = a01 * a13 - a03 * a11;
    const b05 = a02 * a13 - a03 * a12;
    const b06 = a20 * a31 - a21 * a30;
    const b07 = a20 * a32 - a22 * a30;
    const b08 = a20 * a33 - a23 * a30;
    const b09 = a21 * a32 - a22 * a31;
    const b10 = a21 * a33 - a23 * a31;
    const b11 = a22 * a33 - a23 * a32;
    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
    return out;
  }
  function adjoint3(out, a6) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    const a30 = a6[12];
    const a31 = a6[13];
    const a32 = a6[14];
    const a33 = a6[15];
    const b00 = a00 * a11 - a01 * a10;
    const b01 = a00 * a12 - a02 * a10;
    const b02 = a00 * a13 - a03 * a10;
    const b03 = a01 * a12 - a02 * a11;
    const b04 = a01 * a13 - a03 * a11;
    const b05 = a02 * a13 - a03 * a12;
    const b06 = a20 * a31 - a21 * a30;
    const b07 = a20 * a32 - a22 * a30;
    const b08 = a20 * a33 - a23 * a30;
    const b09 = a21 * a32 - a22 * a31;
    const b10 = a21 * a33 - a23 * a31;
    const b11 = a22 * a33 - a23 * a32;
    out[0] = a11 * b11 - a12 * b10 + a13 * b09;
    out[1] = a02 * b10 - a01 * b11 - a03 * b09;
    out[2] = a31 * b05 - a32 * b04 + a33 * b03;
    out[3] = a22 * b04 - a21 * b05 - a23 * b03;
    out[4] = a12 * b08 - a10 * b11 - a13 * b07;
    out[5] = a00 * b11 - a02 * b08 + a03 * b07;
    out[6] = a32 * b02 - a30 * b05 - a33 * b01;
    out[7] = a20 * b05 - a22 * b02 + a23 * b01;
    out[8] = a10 * b10 - a11 * b08 + a13 * b06;
    out[9] = a01 * b08 - a00 * b10 - a03 * b06;
    out[10] = a30 * b04 - a31 * b02 + a33 * b00;
    out[11] = a21 * b02 - a20 * b04 - a23 * b00;
    out[12] = a11 * b07 - a10 * b09 - a12 * b06;
    out[13] = a00 * b09 - a01 * b07 + a02 * b06;
    out[14] = a31 * b01 - a30 * b03 - a32 * b00;
    out[15] = a20 * b03 - a21 * b01 + a22 * b00;
    return out;
  }
  function determinant9(a6) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    const a30 = a6[12];
    const a31 = a6[13];
    const a32 = a6[14];
    const a33 = a6[15];
    const b0 = a00 * a11 - a01 * a10;
    const b1 = a00 * a12 - a02 * a10;
    const b22 = a01 * a12 - a02 * a11;
    const b32 = a20 * a31 - a21 * a30;
    const b4 = a20 * a32 - a22 * a30;
    const b5 = a21 * a32 - a22 * a31;
    const b6 = a00 * b5 - a01 * b4 + a02 * b32;
    const b7 = a10 * b5 - a11 * b4 + a12 * b32;
    const b8 = a20 * b22 - a21 * b1 + a22 * b0;
    const b9 = a30 * b22 - a31 * b1 + a32 * b0;
    return a13 * b6 - a03 * b7 + a33 * b8 - a23 * b9;
  }
  function multiply15(out, a6, b4) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    const a30 = a6[12];
    const a31 = a6[13];
    const a32 = a6[14];
    const a33 = a6[15];
    let b0 = b4[0];
    let b1 = b4[1];
    let b22 = b4[2];
    let b32 = b4[3];
    out[0] = b0 * a00 + b1 * a10 + b22 * a20 + b32 * a30;
    out[1] = b0 * a01 + b1 * a11 + b22 * a21 + b32 * a31;
    out[2] = b0 * a02 + b1 * a12 + b22 * a22 + b32 * a32;
    out[3] = b0 * a03 + b1 * a13 + b22 * a23 + b32 * a33;
    b0 = b4[4];
    b1 = b4[5];
    b22 = b4[6];
    b32 = b4[7];
    out[4] = b0 * a00 + b1 * a10 + b22 * a20 + b32 * a30;
    out[5] = b0 * a01 + b1 * a11 + b22 * a21 + b32 * a31;
    out[6] = b0 * a02 + b1 * a12 + b22 * a22 + b32 * a32;
    out[7] = b0 * a03 + b1 * a13 + b22 * a23 + b32 * a33;
    b0 = b4[8];
    b1 = b4[9];
    b22 = b4[10];
    b32 = b4[11];
    out[8] = b0 * a00 + b1 * a10 + b22 * a20 + b32 * a30;
    out[9] = b0 * a01 + b1 * a11 + b22 * a21 + b32 * a31;
    out[10] = b0 * a02 + b1 * a12 + b22 * a22 + b32 * a32;
    out[11] = b0 * a03 + b1 * a13 + b22 * a23 + b32 * a33;
    b0 = b4[12];
    b1 = b4[13];
    b22 = b4[14];
    b32 = b4[15];
    out[12] = b0 * a00 + b1 * a10 + b22 * a20 + b32 * a30;
    out[13] = b0 * a01 + b1 * a11 + b22 * a21 + b32 * a31;
    out[14] = b0 * a02 + b1 * a12 + b22 * a22 + b32 * a32;
    out[15] = b0 * a03 + b1 * a13 + b22 * a23 + b32 * a33;
    return out;
  }
  function translate8(out, a6, v5) {
    const x4 = v5[0];
    const y5 = v5[1];
    const z4 = v5[2];
    let a00;
    let a01;
    let a02;
    let a03;
    let a10;
    let a11;
    let a12;
    let a13;
    let a20;
    let a21;
    let a22;
    let a23;
    if (a6 === out) {
      out[12] = a6[0] * x4 + a6[4] * y5 + a6[8] * z4 + a6[12];
      out[13] = a6[1] * x4 + a6[5] * y5 + a6[9] * z4 + a6[13];
      out[14] = a6[2] * x4 + a6[6] * y5 + a6[10] * z4 + a6[14];
      out[15] = a6[3] * x4 + a6[7] * y5 + a6[11] * z4 + a6[15];
    } else {
      a00 = a6[0];
      a01 = a6[1];
      a02 = a6[2];
      a03 = a6[3];
      a10 = a6[4];
      a11 = a6[5];
      a12 = a6[6];
      a13 = a6[7];
      a20 = a6[8];
      a21 = a6[9];
      a22 = a6[10];
      a23 = a6[11];
      out[0] = a00;
      out[1] = a01;
      out[2] = a02;
      out[3] = a03;
      out[4] = a10;
      out[5] = a11;
      out[6] = a12;
      out[7] = a13;
      out[8] = a20;
      out[9] = a21;
      out[10] = a22;
      out[11] = a23;
      out[12] = a00 * x4 + a10 * y5 + a20 * z4 + a6[12];
      out[13] = a01 * x4 + a11 * y5 + a21 * z4 + a6[13];
      out[14] = a02 * x4 + a12 * y5 + a22 * z4 + a6[14];
      out[15] = a03 * x4 + a13 * y5 + a23 * z4 + a6[15];
    }
    return out;
  }
  function scale16(out, a6, v5) {
    const x4 = v5[0];
    const y5 = v5[1];
    const z4 = v5[2];
    out[0] = a6[0] * x4;
    out[1] = a6[1] * x4;
    out[2] = a6[2] * x4;
    out[3] = a6[3] * x4;
    out[4] = a6[4] * y5;
    out[5] = a6[5] * y5;
    out[6] = a6[6] * y5;
    out[7] = a6[7] * y5;
    out[8] = a6[8] * z4;
    out[9] = a6[9] * z4;
    out[10] = a6[10] * z4;
    out[11] = a6[11] * z4;
    out[12] = a6[12];
    out[13] = a6[13];
    out[14] = a6[14];
    out[15] = a6[15];
    return out;
  }
  function rotate10(out, a6, rad, axis) {
    let x4 = axis[0];
    let y5 = axis[1];
    let z4 = axis[2];
    let len9 = Math.sqrt(x4 * x4 + y5 * y5 + z4 * z4);
    let c5;
    let s5;
    let t5;
    let a00;
    let a01;
    let a02;
    let a03;
    let a10;
    let a11;
    let a12;
    let a13;
    let a20;
    let a21;
    let a22;
    let a23;
    let b00;
    let b01;
    let b02;
    let b10;
    let b11;
    let b12;
    let b20;
    let b21;
    let b22;
    if (len9 < EPSILON29) {
      return null;
    }
    len9 = 1 / len9;
    x4 *= len9;
    y5 *= len9;
    z4 *= len9;
    s5 = Math.sin(rad);
    c5 = Math.cos(rad);
    t5 = 1 - c5;
    a00 = a6[0];
    a01 = a6[1];
    a02 = a6[2];
    a03 = a6[3];
    a10 = a6[4];
    a11 = a6[5];
    a12 = a6[6];
    a13 = a6[7];
    a20 = a6[8];
    a21 = a6[9];
    a22 = a6[10];
    a23 = a6[11];
    b00 = x4 * x4 * t5 + c5;
    b01 = y5 * x4 * t5 + z4 * s5;
    b02 = z4 * x4 * t5 - y5 * s5;
    b10 = x4 * y5 * t5 - z4 * s5;
    b11 = y5 * y5 * t5 + c5;
    b12 = z4 * y5 * t5 + x4 * s5;
    b20 = x4 * z4 * t5 + y5 * s5;
    b21 = y5 * z4 * t5 - x4 * s5;
    b22 = z4 * z4 * t5 + c5;
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;
    if (a6 !== out) {
      out[12] = a6[12];
      out[13] = a6[13];
      out[14] = a6[14];
      out[15] = a6[15];
    }
    return out;
  }
  function rotateX12(out, a6, rad) {
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    if (a6 !== out) {
      out[0] = a6[0];
      out[1] = a6[1];
      out[2] = a6[2];
      out[3] = a6[3];
      out[12] = a6[12];
      out[13] = a6[13];
      out[14] = a6[14];
      out[15] = a6[15];
    }
    out[4] = a10 * c5 + a20 * s5;
    out[5] = a11 * c5 + a21 * s5;
    out[6] = a12 * c5 + a22 * s5;
    out[7] = a13 * c5 + a23 * s5;
    out[8] = a20 * c5 - a10 * s5;
    out[9] = a21 * c5 - a11 * s5;
    out[10] = a22 * c5 - a12 * s5;
    out[11] = a23 * c5 - a13 * s5;
    return out;
  }
  function rotateY12(out, a6, rad) {
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    if (a6 !== out) {
      out[4] = a6[4];
      out[5] = a6[5];
      out[6] = a6[6];
      out[7] = a6[7];
      out[12] = a6[12];
      out[13] = a6[13];
      out[14] = a6[14];
      out[15] = a6[15];
    }
    out[0] = a00 * c5 - a20 * s5;
    out[1] = a01 * c5 - a21 * s5;
    out[2] = a02 * c5 - a22 * s5;
    out[3] = a03 * c5 - a23 * s5;
    out[8] = a00 * s5 + a20 * c5;
    out[9] = a01 * s5 + a21 * c5;
    out[10] = a02 * s5 + a22 * c5;
    out[11] = a03 * s5 + a23 * c5;
    return out;
  }
  function rotateZ12(out, a6, rad) {
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    if (a6 !== out) {
      out[8] = a6[8];
      out[9] = a6[9];
      out[10] = a6[10];
      out[11] = a6[11];
      out[12] = a6[12];
      out[13] = a6[13];
      out[14] = a6[14];
      out[15] = a6[15];
    }
    out[0] = a00 * c5 + a10 * s5;
    out[1] = a01 * c5 + a11 * s5;
    out[2] = a02 * c5 + a12 * s5;
    out[3] = a03 * c5 + a13 * s5;
    out[4] = a10 * c5 - a00 * s5;
    out[5] = a11 * c5 - a01 * s5;
    out[6] = a12 * c5 - a02 * s5;
    out[7] = a13 * c5 - a03 * s5;
    return out;
  }
  function fromTranslation2(out, v5) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = v5[0];
    out[13] = v5[1];
    out[14] = v5[2];
    out[15] = 1;
    return out;
  }
  function fromScaling3(out, v5) {
    out[0] = v5[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = v5[1];
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = v5[2];
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromRotation3(out, rad, axis) {
    let x4 = axis[0];
    let y5 = axis[1];
    let z4 = axis[2];
    let len9 = Math.sqrt(x4 * x4 + y5 * y5 + z4 * z4);
    let c5;
    let s5;
    let t5;
    if (len9 < EPSILON29) {
      return null;
    }
    len9 = 1 / len9;
    x4 *= len9;
    y5 *= len9;
    z4 *= len9;
    s5 = Math.sin(rad);
    c5 = Math.cos(rad);
    t5 = 1 - c5;
    out[0] = x4 * x4 * t5 + c5;
    out[1] = y5 * x4 * t5 + z4 * s5;
    out[2] = z4 * x4 * t5 - y5 * s5;
    out[3] = 0;
    out[4] = x4 * y5 * t5 - z4 * s5;
    out[5] = y5 * y5 * t5 + c5;
    out[6] = z4 * y5 * t5 + x4 * s5;
    out[7] = 0;
    out[8] = x4 * z4 * t5 + y5 * s5;
    out[9] = y5 * z4 * t5 - x4 * s5;
    out[10] = z4 * z4 * t5 + c5;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromXRotation2(out, rad) {
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = c5;
    out[6] = s5;
    out[7] = 0;
    out[8] = 0;
    out[9] = -s5;
    out[10] = c5;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromYRotation2(out, rad) {
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    out[0] = c5;
    out[1] = 0;
    out[2] = -s5;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = s5;
    out[9] = 0;
    out[10] = c5;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromZRotation2(out, rad) {
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    out[0] = c5;
    out[1] = s5;
    out[2] = 0;
    out[3] = 0;
    out[4] = -s5;
    out[5] = c5;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromRotationTranslation2(out, q3, v5) {
    const x4 = q3[0];
    const y5 = q3[1];
    const z4 = q3[2];
    const w5 = q3[3];
    const x22 = x4 + x4;
    const y22 = y5 + y5;
    const z22 = z4 + z4;
    const xx = x4 * x22;
    const xy = x4 * y22;
    const xz = x4 * z22;
    const yy = y5 * y22;
    const yz = y5 * z22;
    const zz = z4 * z22;
    const wx = w5 * x22;
    const wy = w5 * y22;
    const wz = w5 * z22;
    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v5[0];
    out[13] = v5[1];
    out[14] = v5[2];
    out[15] = 1;
    return out;
  }
  function fromQuat22(out, a6) {
    const translation2 = new ARRAY_TYPE6(3);
    const bx = -a6[0];
    const by = -a6[1];
    const bz = -a6[2];
    const bw = a6[3];
    const ax = a6[4];
    const ay = a6[5];
    const az = a6[6];
    const aw = a6[7];
    const magnitude = bx * bx + by * by + bz * bz + bw * bw;
    if (magnitude > 0) {
      translation2[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
      translation2[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
      translation2[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
    } else {
      translation2[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
      translation2[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
      translation2[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
    }
    fromRotationTranslation2(out, a6, translation2);
    return out;
  }
  function getTranslation2(out, mat) {
    out[0] = mat[12];
    out[1] = mat[13];
    out[2] = mat[14];
    return out;
  }
  function getScaling2(out, mat) {
    const m11 = mat[0];
    const m12 = mat[1];
    const m13 = mat[2];
    const m21 = mat[4];
    const m22 = mat[5];
    const m23 = mat[6];
    const m31 = mat[8];
    const m32 = mat[9];
    const m33 = mat[10];
    out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
    out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
    out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);
    return out;
  }
  function getRotation3(out, mat) {
    const scaling = new ARRAY_TYPE6(3);
    getScaling2(scaling, mat);
    const is1 = 1 / scaling[0];
    const is2 = 1 / scaling[1];
    const is3 = 1 / scaling[2];
    const sm11 = mat[0] * is1;
    const sm12 = mat[1] * is2;
    const sm13 = mat[2] * is3;
    const sm21 = mat[4] * is1;
    const sm22 = mat[5] * is2;
    const sm23 = mat[6] * is3;
    const sm31 = mat[8] * is1;
    const sm32 = mat[9] * is2;
    const sm33 = mat[10] * is3;
    const trace = sm11 + sm22 + sm33;
    let S3 = 0;
    if (trace > 0) {
      S3 = Math.sqrt(trace + 1) * 2;
      out[3] = 0.25 * S3;
      out[0] = (sm23 - sm32) / S3;
      out[1] = (sm31 - sm13) / S3;
      out[2] = (sm12 - sm21) / S3;
    } else if (sm11 > sm22 && sm11 > sm33) {
      S3 = Math.sqrt(1 + sm11 - sm22 - sm33) * 2;
      out[3] = (sm23 - sm32) / S3;
      out[0] = 0.25 * S3;
      out[1] = (sm12 + sm21) / S3;
      out[2] = (sm31 + sm13) / S3;
    } else if (sm22 > sm33) {
      S3 = Math.sqrt(1 + sm22 - sm11 - sm33) * 2;
      out[3] = (sm31 - sm13) / S3;
      out[0] = (sm12 + sm21) / S3;
      out[1] = 0.25 * S3;
      out[2] = (sm23 + sm32) / S3;
    } else {
      S3 = Math.sqrt(1 + sm33 - sm11 - sm22) * 2;
      out[3] = (sm12 - sm21) / S3;
      out[0] = (sm31 + sm13) / S3;
      out[1] = (sm23 + sm32) / S3;
      out[2] = 0.25 * S3;
    }
    return out;
  }
  function decompose2(out_r, out_t, out_s, mat) {
    out_t[0] = mat[12];
    out_t[1] = mat[13];
    out_t[2] = mat[14];
    const m11 = mat[0];
    const m12 = mat[1];
    const m13 = mat[2];
    const m21 = mat[4];
    const m22 = mat[5];
    const m23 = mat[6];
    const m31 = mat[8];
    const m32 = mat[9];
    const m33 = mat[10];
    out_s[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
    out_s[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
    out_s[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);
    const is1 = 1 / out_s[0];
    const is2 = 1 / out_s[1];
    const is3 = 1 / out_s[2];
    const sm11 = m11 * is1;
    const sm12 = m12 * is2;
    const sm13 = m13 * is3;
    const sm21 = m21 * is1;
    const sm22 = m22 * is2;
    const sm23 = m23 * is3;
    const sm31 = m31 * is1;
    const sm32 = m32 * is2;
    const sm33 = m33 * is3;
    const trace = sm11 + sm22 + sm33;
    let S3 = 0;
    if (trace > 0) {
      S3 = Math.sqrt(trace + 1) * 2;
      out_r[3] = 0.25 * S3;
      out_r[0] = (sm23 - sm32) / S3;
      out_r[1] = (sm31 - sm13) / S3;
      out_r[2] = (sm12 - sm21) / S3;
    } else if (sm11 > sm22 && sm11 > sm33) {
      S3 = Math.sqrt(1 + sm11 - sm22 - sm33) * 2;
      out_r[3] = (sm23 - sm32) / S3;
      out_r[0] = 0.25 * S3;
      out_r[1] = (sm12 + sm21) / S3;
      out_r[2] = (sm31 + sm13) / S3;
    } else if (sm22 > sm33) {
      S3 = Math.sqrt(1 + sm22 - sm11 - sm33) * 2;
      out_r[3] = (sm31 - sm13) / S3;
      out_r[0] = (sm12 + sm21) / S3;
      out_r[1] = 0.25 * S3;
      out_r[2] = (sm23 + sm32) / S3;
    } else {
      S3 = Math.sqrt(1 + sm33 - sm11 - sm22) * 2;
      out_r[3] = (sm12 - sm21) / S3;
      out_r[0] = (sm31 + sm13) / S3;
      out_r[1] = (sm23 + sm32) / S3;
      out_r[2] = 0.25 * S3;
    }
    return out_r;
  }
  function fromRotationTranslationScale2(out, q3, v5, s5) {
    const x4 = q3[0];
    const y5 = q3[1];
    const z4 = q3[2];
    const w5 = q3[3];
    const x22 = x4 + x4;
    const y22 = y5 + y5;
    const z22 = z4 + z4;
    const xx = x4 * x22;
    const xy = x4 * y22;
    const xz = x4 * z22;
    const yy = y5 * y22;
    const yz = y5 * z22;
    const zz = z4 * z22;
    const wx = w5 * x22;
    const wy = w5 * y22;
    const wz = w5 * z22;
    const sx = s5[0];
    const sy = s5[1];
    const sz = s5[2];
    out[0] = (1 - (yy + zz)) * sx;
    out[1] = (xy + wz) * sx;
    out[2] = (xz - wy) * sx;
    out[3] = 0;
    out[4] = (xy - wz) * sy;
    out[5] = (1 - (xx + zz)) * sy;
    out[6] = (yz + wx) * sy;
    out[7] = 0;
    out[8] = (xz + wy) * sz;
    out[9] = (yz - wx) * sz;
    out[10] = (1 - (xx + yy)) * sz;
    out[11] = 0;
    out[12] = v5[0];
    out[13] = v5[1];
    out[14] = v5[2];
    out[15] = 1;
    return out;
  }
  function fromRotationTranslationScaleOrigin2(out, q3, v5, s5, o5) {
    const x4 = q3[0];
    const y5 = q3[1];
    const z4 = q3[2];
    const w5 = q3[3];
    const x22 = x4 + x4;
    const y22 = y5 + y5;
    const z22 = z4 + z4;
    const xx = x4 * x22;
    const xy = x4 * y22;
    const xz = x4 * z22;
    const yy = y5 * y22;
    const yz = y5 * z22;
    const zz = z4 * z22;
    const wx = w5 * x22;
    const wy = w5 * y22;
    const wz = w5 * z22;
    const sx = s5[0];
    const sy = s5[1];
    const sz = s5[2];
    const ox = o5[0];
    const oy = o5[1];
    const oz = o5[2];
    const out0 = (1 - (yy + zz)) * sx;
    const out1 = (xy + wz) * sx;
    const out2 = (xz - wy) * sx;
    const out4 = (xy - wz) * sy;
    const out5 = (1 - (xx + zz)) * sy;
    const out6 = (yz + wx) * sy;
    const out8 = (xz + wy) * sz;
    const out9 = (yz - wx) * sz;
    const out10 = (1 - (xx + yy)) * sz;
    out[0] = out0;
    out[1] = out1;
    out[2] = out2;
    out[3] = 0;
    out[4] = out4;
    out[5] = out5;
    out[6] = out6;
    out[7] = 0;
    out[8] = out8;
    out[9] = out9;
    out[10] = out10;
    out[11] = 0;
    out[12] = v5[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
    out[13] = v5[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
    out[14] = v5[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
    out[15] = 1;
    return out;
  }
  function fromQuat9(out, q3) {
    const x4 = q3[0];
    const y5 = q3[1];
    const z4 = q3[2];
    const w5 = q3[3];
    const x22 = x4 + x4;
    const y22 = y5 + y5;
    const z22 = z4 + z4;
    const xx = x4 * x22;
    const yx = y5 * x22;
    const yy = y5 * y22;
    const zx = z4 * x22;
    const zy = z4 * y22;
    const zz = z4 * z22;
    const wx = w5 * x22;
    const wy = w5 * y22;
    const wz = w5 * z22;
    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;
    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;
    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function frustum4(out, left, right, bottom, top, near, far) {
    const rl = 1 / (right - left);
    const tb = 1 / (top - bottom);
    const nf = 1 / (near - far);
    out[0] = near * 2 * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = near * 2 * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = far * near * 2 * nf;
    out[15] = 0;
    return out;
  }
  function perspectiveNO4(out, fovy, aspect, near, far) {
    const f6 = 1 / Math.tan(fovy / 2);
    out[0] = f6 / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f6;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
      const nf = 1 / (near - far);
      out[10] = (far + near) * nf;
      out[14] = 2 * far * near * nf;
    } else {
      out[10] = -1;
      out[14] = -2 * near;
    }
    return out;
  }
  var perspective4 = perspectiveNO4;
  function perspectiveZO2(out, fovy, aspect, near, far) {
    const f6 = 1 / Math.tan(fovy / 2);
    out[0] = f6 / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f6;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
      const nf = 1 / (near - far);
      out[10] = far * nf;
      out[14] = far * near * nf;
    } else {
      out[10] = -1;
      out[14] = -near;
    }
    return out;
  }
  function perspectiveFromFieldOfView2(out, fov, near, far) {
    const upTan = Math.tan(fov.upDegrees * Math.PI / 180);
    const downTan = Math.tan(fov.downDegrees * Math.PI / 180);
    const leftTan = Math.tan(fov.leftDegrees * Math.PI / 180);
    const rightTan = Math.tan(fov.rightDegrees * Math.PI / 180);
    const xScale = 2 / (leftTan + rightTan);
    const yScale = 2 / (upTan + downTan);
    out[0] = xScale;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = yScale;
    out[6] = 0;
    out[7] = 0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = (upTan - downTan) * yScale * 0.5;
    out[10] = far / (near - far);
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = far * near / (near - far);
    out[15] = 0;
    return out;
  }
  function orthoNO4(out, left, right, bottom, top, near, far) {
    const lr = 1 / (left - right);
    const bt = 1 / (bottom - top);
    const nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
  }
  var ortho4 = orthoNO4;
  function orthoZO2(out, left, right, bottom, top, near, far) {
    const lr = 1 / (left - right);
    const bt = 1 / (bottom - top);
    const nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = near * nf;
    out[15] = 1;
    return out;
  }
  function lookAt4(out, eye, center2, up) {
    let len9;
    let x0;
    let x1;
    let x22;
    let y0;
    let y1;
    let y22;
    let z0;
    let z1;
    let z22;
    const eyex = eye[0];
    const eyey = eye[1];
    const eyez = eye[2];
    const upx = up[0];
    const upy = up[1];
    const upz = up[2];
    const centerx = center2[0];
    const centery = center2[1];
    const centerz = center2[2];
    if (Math.abs(eyex - centerx) < EPSILON29 && Math.abs(eyey - centery) < EPSILON29 && Math.abs(eyez - centerz) < EPSILON29) {
      return identity8(out);
    }
    z0 = eyex - centerx;
    z1 = eyey - centery;
    z22 = eyez - centerz;
    len9 = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z22 * z22);
    z0 *= len9;
    z1 *= len9;
    z22 *= len9;
    x0 = upy * z22 - upz * z1;
    x1 = upz * z0 - upx * z22;
    x22 = upx * z1 - upy * z0;
    len9 = Math.sqrt(x0 * x0 + x1 * x1 + x22 * x22);
    if (!len9) {
      x0 = 0;
      x1 = 0;
      x22 = 0;
    } else {
      len9 = 1 / len9;
      x0 *= len9;
      x1 *= len9;
      x22 *= len9;
    }
    y0 = z1 * x22 - z22 * x1;
    y1 = z22 * x0 - z0 * x22;
    y22 = z0 * x1 - z1 * x0;
    len9 = Math.sqrt(y0 * y0 + y1 * y1 + y22 * y22);
    if (!len9) {
      y0 = 0;
      y1 = 0;
      y22 = 0;
    } else {
      len9 = 1 / len9;
      y0 *= len9;
      y1 *= len9;
      y22 *= len9;
    }
    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x22;
    out[9] = y22;
    out[10] = z22;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x22 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y22 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z22 * eyez);
    out[15] = 1;
    return out;
  }
  function targetTo2(out, eye, target2, up) {
    const eyex = eye[0];
    const eyey = eye[1];
    const eyez = eye[2];
    const upx = up[0];
    const upy = up[1];
    const upz = up[2];
    let z0 = eyex - target2[0];
    let z1 = eyey - target2[1];
    let z22 = eyez - target2[2];
    let len9 = z0 * z0 + z1 * z1 + z22 * z22;
    if (len9 > 0) {
      len9 = 1 / Math.sqrt(len9);
      z0 *= len9;
      z1 *= len9;
      z22 *= len9;
    }
    let x0 = upy * z22 - upz * z1;
    let x1 = upz * z0 - upx * z22;
    let x22 = upx * z1 - upy * z0;
    len9 = x0 * x0 + x1 * x1 + x22 * x22;
    if (len9 > 0) {
      len9 = 1 / Math.sqrt(len9);
      x0 *= len9;
      x1 *= len9;
      x22 *= len9;
    }
    out[0] = x0;
    out[1] = x1;
    out[2] = x22;
    out[3] = 0;
    out[4] = z1 * x22 - z22 * x1;
    out[5] = z22 * x0 - z0 * x22;
    out[6] = z0 * x1 - z1 * x0;
    out[7] = 0;
    out[8] = z0;
    out[9] = z1;
    out[10] = z22;
    out[11] = 0;
    out[12] = eyex;
    out[13] = eyey;
    out[14] = eyez;
    out[15] = 1;
    return out;
  }
  function str7(a6) {
    return `mat4(${a6[0]}, ${a6[1]}, ${a6[2]}, ${a6[3]}, ${a6[4]}, ${a6[5]}, ${a6[6]}, ${a6[7]}, ${a6[8]}, ${a6[9]}, ${a6[10]}, ${a6[11]}, ${a6[12]}, ${a6[13]}, ${a6[14]}, ${a6[15]})`;
  }
  function frob3(a6) {
    return Math.sqrt(a6[0] * a6[0] + a6[1] * a6[1] + a6[2] * a6[2] + a6[3] * a6[3] + a6[4] * a6[4] + a6[5] * a6[5] + a6[6] * a6[6] + a6[7] * a6[7] + a6[8] * a6[8] + a6[9] * a6[9] + a6[10] * a6[10] + a6[11] * a6[11] + a6[12] * a6[12] + a6[13] * a6[13] + a6[14] * a6[14] + a6[15] * a6[15]);
  }
  function add11(out, a6, b4) {
    out[0] = a6[0] + b4[0];
    out[1] = a6[1] + b4[1];
    out[2] = a6[2] + b4[2];
    out[3] = a6[3] + b4[3];
    out[4] = a6[4] + b4[4];
    out[5] = a6[5] + b4[5];
    out[6] = a6[6] + b4[6];
    out[7] = a6[7] + b4[7];
    out[8] = a6[8] + b4[8];
    out[9] = a6[9] + b4[9];
    out[10] = a6[10] + b4[10];
    out[11] = a6[11] + b4[11];
    out[12] = a6[12] + b4[12];
    out[13] = a6[13] + b4[13];
    out[14] = a6[14] + b4[14];
    out[15] = a6[15] + b4[15];
    return out;
  }
  function subtract7(out, a6, b4) {
    out[0] = a6[0] - b4[0];
    out[1] = a6[1] - b4[1];
    out[2] = a6[2] - b4[2];
    out[3] = a6[3] - b4[3];
    out[4] = a6[4] - b4[4];
    out[5] = a6[5] - b4[5];
    out[6] = a6[6] - b4[6];
    out[7] = a6[7] - b4[7];
    out[8] = a6[8] - b4[8];
    out[9] = a6[9] - b4[9];
    out[10] = a6[10] - b4[10];
    out[11] = a6[11] - b4[11];
    out[12] = a6[12] - b4[12];
    out[13] = a6[13] - b4[13];
    out[14] = a6[14] - b4[14];
    out[15] = a6[15] - b4[15];
    return out;
  }
  function multiplyScalar3(out, a6, b4) {
    out[0] = a6[0] * b4;
    out[1] = a6[1] * b4;
    out[2] = a6[2] * b4;
    out[3] = a6[3] * b4;
    out[4] = a6[4] * b4;
    out[5] = a6[5] * b4;
    out[6] = a6[6] * b4;
    out[7] = a6[7] * b4;
    out[8] = a6[8] * b4;
    out[9] = a6[9] * b4;
    out[10] = a6[10] * b4;
    out[11] = a6[11] * b4;
    out[12] = a6[12] * b4;
    out[13] = a6[13] * b4;
    out[14] = a6[14] * b4;
    out[15] = a6[15] * b4;
    return out;
  }
  function multiplyScalarAndAdd3(out, a6, b4, scale24) {
    out[0] = a6[0] + b4[0] * scale24;
    out[1] = a6[1] + b4[1] * scale24;
    out[2] = a6[2] + b4[2] * scale24;
    out[3] = a6[3] + b4[3] * scale24;
    out[4] = a6[4] + b4[4] * scale24;
    out[5] = a6[5] + b4[5] * scale24;
    out[6] = a6[6] + b4[6] * scale24;
    out[7] = a6[7] + b4[7] * scale24;
    out[8] = a6[8] + b4[8] * scale24;
    out[9] = a6[9] + b4[9] * scale24;
    out[10] = a6[10] + b4[10] * scale24;
    out[11] = a6[11] + b4[11] * scale24;
    out[12] = a6[12] + b4[12] * scale24;
    out[13] = a6[13] + b4[13] * scale24;
    out[14] = a6[14] + b4[14] * scale24;
    out[15] = a6[15] + b4[15] * scale24;
    return out;
  }
  function exactEquals11(a6, b4) {
    return a6[0] === b4[0] && a6[1] === b4[1] && a6[2] === b4[2] && a6[3] === b4[3] && a6[4] === b4[4] && a6[5] === b4[5] && a6[6] === b4[6] && a6[7] === b4[7] && a6[8] === b4[8] && a6[9] === b4[9] && a6[10] === b4[10] && a6[11] === b4[11] && a6[12] === b4[12] && a6[13] === b4[13] && a6[14] === b4[14] && a6[15] === b4[15];
  }
  function equals12(a6, b4) {
    const a0 = a6[0];
    const a1 = a6[1];
    const a22 = a6[2];
    const a32 = a6[3];
    const a42 = a6[4];
    const a52 = a6[5];
    const a62 = a6[6];
    const a7 = a6[7];
    const a8 = a6[8];
    const a9 = a6[9];
    const a10 = a6[10];
    const a11 = a6[11];
    const a12 = a6[12];
    const a13 = a6[13];
    const a14 = a6[14];
    const a15 = a6[15];
    const b0 = b4[0];
    const b1 = b4[1];
    const b22 = b4[2];
    const b32 = b4[3];
    const b42 = b4[4];
    const b5 = b4[5];
    const b6 = b4[6];
    const b7 = b4[7];
    const b8 = b4[8];
    const b9 = b4[9];
    const b10 = b4[10];
    const b11 = b4[11];
    const b12 = b4[12];
    const b13 = b4[13];
    const b14 = b4[14];
    const b15 = b4[15];
    return Math.abs(a0 - b0) <= EPSILON29 * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON29 * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a22 - b22) <= EPSILON29 * Math.max(1, Math.abs(a22), Math.abs(b22)) && Math.abs(a32 - b32) <= EPSILON29 * Math.max(1, Math.abs(a32), Math.abs(b32)) && Math.abs(a42 - b42) <= EPSILON29 * Math.max(1, Math.abs(a42), Math.abs(b42)) && Math.abs(a52 - b5) <= EPSILON29 * Math.max(1, Math.abs(a52), Math.abs(b5)) && Math.abs(a62 - b6) <= EPSILON29 * Math.max(1, Math.abs(a62), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON29 * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON29 * Math.max(1, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON29 * Math.max(1, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON29 * Math.max(1, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON29 * Math.max(1, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON29 * Math.max(1, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON29 * Math.max(1, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON29 * Math.max(1, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON29 * Math.max(1, Math.abs(a15), Math.abs(b15));
  }
  var mul7 = multiply15;
  var sub7 = subtract7;

  // ../../node_modules/@math.gl/culling/node_modules/@math.gl/core/dist/gl-matrix/vec4.js
  function create23() {
    const out = new ARRAY_TYPE6(4);
    if (ARRAY_TYPE6 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
    }
    return out;
  }
  function add12(out, a6, b4) {
    out[0] = a6[0] + b4[0];
    out[1] = a6[1] + b4[1];
    out[2] = a6[2] + b4[2];
    out[3] = a6[3] + b4[3];
    return out;
  }
  function scale17(out, a6, b4) {
    out[0] = a6[0] * b4;
    out[1] = a6[1] * b4;
    out[2] = a6[2] * b4;
    out[3] = a6[3] * b4;
    return out;
  }
  function length11(a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = a6[3];
    return Math.sqrt(x4 * x4 + y5 * y5 + z4 * z4 + w5 * w5);
  }
  function squaredLength9(a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = a6[3];
    return x4 * x4 + y5 * y5 + z4 * z4 + w5 * w5;
  }
  function normalize12(out, a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = a6[3];
    let len9 = x4 * x4 + y5 * y5 + z4 * z4 + w5 * w5;
    if (len9 > 0) {
      len9 = 1 / Math.sqrt(len9);
    }
    out[0] = x4 * len9;
    out[1] = y5 * len9;
    out[2] = z4 * len9;
    out[3] = w5 * len9;
    return out;
  }
  function dot12(a6, b4) {
    return a6[0] * b4[0] + a6[1] * b4[1] + a6[2] * b4[2] + a6[3] * b4[3];
  }
  function lerp13(out, a6, b4, t5) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    out[0] = ax + t5 * (b4[0] - ax);
    out[1] = ay + t5 * (b4[1] - ay);
    out[2] = az + t5 * (b4[2] - az);
    out[3] = aw + t5 * (b4[3] - aw);
    return out;
  }
  function transformQuat9(out, a6, q3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const qx = q3[0];
    const qy = q3[1];
    const qz = q3[2];
    const qw = q3[3];
    const ix = qw * x4 + qy * z4 - qz * y5;
    const iy = qw * y5 + qz * x4 - qx * z4;
    const iz = qw * z4 + qx * y5 - qy * x4;
    const iw = -qx * x4 - qy * y5 - qz * z4;
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    out[3] = a6[3];
    return out;
  }
  var forEach16 = function() {
    const vec = create23();
    return function(a6, stride, offset, count3, fn, arg) {
      let i7;
      let l5;
      if (!stride) {
        stride = 4;
      }
      if (!offset) {
        offset = 0;
      }
      if (count3) {
        l5 = Math.min(count3 * stride + offset, a6.length);
      } else {
        l5 = a6.length;
      }
      for (i7 = offset; i7 < l5; i7 += stride) {
        vec[0] = a6[i7];
        vec[1] = a6[i7 + 1];
        vec[2] = a6[i7 + 2];
        vec[3] = a6[i7 + 3];
        fn(vec, vec, arg);
        a6[i7] = vec[0];
        a6[i7 + 1] = vec[1];
        a6[i7 + 2] = vec[2];
        a6[i7 + 3] = vec[3];
      }
      return a6;
    };
  }();

  // ../../node_modules/@math.gl/culling/node_modules/@math.gl/core/dist/gl-matrix/quat.js
  function create24() {
    const out = new ARRAY_TYPE6(4);
    if (ARRAY_TYPE6 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }
    out[3] = 1;
    return out;
  }
  function identity9(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
  }
  function setAxisAngle4(out, axis, rad) {
    rad = rad * 0.5;
    const s5 = Math.sin(rad);
    out[0] = s5 * axis[0];
    out[1] = s5 * axis[1];
    out[2] = s5 * axis[2];
    out[3] = Math.cos(rad);
    return out;
  }
  function multiply16(out, a6, b4) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    const bx = b4[0];
    const by = b4[1];
    const bz = b4[2];
    const bw = b4[3];
    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
  }
  function rotateX13(out, a6, rad) {
    rad *= 0.5;
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    const bx = Math.sin(rad);
    const bw = Math.cos(rad);
    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
  }
  function rotateY13(out, a6, rad) {
    rad *= 0.5;
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    const by = Math.sin(rad);
    const bw = Math.cos(rad);
    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
  }
  function rotateZ13(out, a6, rad) {
    rad *= 0.5;
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    const bz = Math.sin(rad);
    const bw = Math.cos(rad);
    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
  }
  function calculateW4(out, a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    out[0] = x4;
    out[1] = y5;
    out[2] = z4;
    out[3] = Math.sqrt(Math.abs(1 - x4 * x4 - y5 * y5 - z4 * z4));
    return out;
  }
  function slerp6(out, a6, b4, t5) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    let bx = b4[0];
    let by = b4[1];
    let bz = b4[2];
    let bw = b4[3];
    let cosom;
    let omega;
    let scale0;
    let scale1;
    let sinom;
    cosom = ax * bx + ay * by + az * bz + aw * bw;
    if (cosom < 0) {
      cosom = -cosom;
      bx = -bx;
      by = -by;
      bz = -bz;
      bw = -bw;
    }
    if (1 - cosom > EPSILON29) {
      omega = Math.acos(cosom);
      sinom = Math.sin(omega);
      scale0 = Math.sin((1 - t5) * omega) / sinom;
      scale1 = Math.sin(t5 * omega) / sinom;
    } else {
      scale0 = 1 - t5;
      scale1 = t5;
    }
    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    return out;
  }
  function invert12(out, a6) {
    const a0 = a6[0];
    const a1 = a6[1];
    const a22 = a6[2];
    const a32 = a6[3];
    const dot18 = a0 * a0 + a1 * a1 + a22 * a22 + a32 * a32;
    const invDot = dot18 ? 1 / dot18 : 0;
    out[0] = -a0 * invDot;
    out[1] = -a1 * invDot;
    out[2] = -a22 * invDot;
    out[3] = a32 * invDot;
    return out;
  }
  function conjugate4(out, a6) {
    out[0] = -a6[0];
    out[1] = -a6[1];
    out[2] = -a6[2];
    out[3] = a6[3];
    return out;
  }
  function fromMat34(out, m3) {
    const fTrace = m3[0] + m3[4] + m3[8];
    let fRoot;
    if (fTrace > 0) {
      fRoot = Math.sqrt(fTrace + 1);
      out[3] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[0] = (m3[5] - m3[7]) * fRoot;
      out[1] = (m3[6] - m3[2]) * fRoot;
      out[2] = (m3[1] - m3[3]) * fRoot;
    } else {
      let i7 = 0;
      if (m3[4] > m3[0])
        i7 = 1;
      if (m3[8] > m3[i7 * 3 + i7])
        i7 = 2;
      const j4 = (i7 + 1) % 3;
      const k4 = (i7 + 2) % 3;
      fRoot = Math.sqrt(m3[i7 * 3 + i7] - m3[j4 * 3 + j4] - m3[k4 * 3 + k4] + 1);
      out[i7] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[3] = (m3[j4 * 3 + k4] - m3[k4 * 3 + j4]) * fRoot;
      out[j4] = (m3[j4 * 3 + i7] + m3[i7 * 3 + j4]) * fRoot;
      out[k4] = (m3[k4 * 3 + i7] + m3[i7 * 3 + k4]) * fRoot;
    }
    return out;
  }
  var add13 = add12;
  var scale18 = scale17;
  var dot13 = dot12;
  var lerp14 = lerp13;
  var length12 = length11;
  var squaredLength10 = squaredLength9;
  var normalize13 = normalize12;
  var rotationTo4 = function() {
    const tmpvec3 = create19();
    const xUnitVec3 = fromValues9(1, 0, 0);
    const yUnitVec3 = fromValues9(0, 1, 0);
    return function(out, a6, b4) {
      const dot18 = dot11(a6, b4);
      if (dot18 < -0.999999) {
        cross8(tmpvec3, xUnitVec3, a6);
        if (len7(tmpvec3) < 1e-6)
          cross8(tmpvec3, yUnitVec3, a6);
        normalize11(tmpvec3, tmpvec3);
        setAxisAngle4(out, tmpvec3, Math.PI);
        return out;
      } else if (dot18 > 0.999999) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        return out;
      }
      cross8(tmpvec3, a6, b4);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot18;
      return normalize13(out, out);
    };
  }();
  var sqlerp4 = function() {
    const temp1 = create24();
    const temp2 = create24();
    return function(out, a6, b4, c5, d5, t5) {
      slerp6(temp1, a6, d5, t5);
      slerp6(temp2, b4, c5, t5);
      slerp6(out, temp1, temp2, 2 * t5 * (1 - t5));
      return out;
    };
  }();
  var setAxes4 = function() {
    const matr = create20();
    return function(out, view, right, up) {
      matr[0] = right[0];
      matr[3] = right[1];
      matr[6] = right[2];
      matr[1] = up[0];
      matr[4] = up[1];
      matr[7] = up[2];
      matr[2] = -view[0];
      matr[5] = -view[1];
      matr[8] = -view[2];
      return normalize13(out, fromMat34(out, matr));
    };
  }();

  // ../../node_modules/@math.gl/culling/node_modules/@math.gl/core/dist/classes/quaternion.js
  var IDENTITY_QUATERNION3 = [0, 0, 0, 1];
  var Quaternion3 = class extends MathArray5 {
    constructor(x4 = 0, y5 = 0, z4 = 0, w5 = 1) {
      super(-0, -0, -0, -0);
      if (Array.isArray(x4) && arguments.length === 1) {
        this.copy(x4);
      } else {
        this.set(x4, y5, z4, w5);
      }
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      this[3] = array[3];
      return this.check();
    }
    set(x4, y5, z4, w5) {
      this[0] = x4;
      this[1] = y5;
      this[2] = z4;
      this[3] = w5;
      return this.check();
    }
    fromObject(object) {
      this[0] = object.x;
      this[1] = object.y;
      this[2] = object.z;
      this[3] = object.w;
      return this.check();
    }
    /**
     * Creates a quaternion from the given 3x3 rotation matrix.
     * NOTE: The resultant quaternion is not normalized, so you should
     * be sure to renormalize the quaternion yourself where necessary.
     * @param m
     * @returns
     */
    fromMatrix3(m3) {
      fromMat34(this, m3);
      return this.check();
    }
    fromAxisRotation(axis, rad) {
      setAxisAngle4(this, axis, rad);
      return this.check();
    }
    /** Set a quat to the identity quaternion */
    identity() {
      identity9(this);
      return this.check();
    }
    // Set the components of a quat to the given values
    // set(i, j, k, l) {
    //   quat_set(this, i, j, k, l);
    //   return this.check();
    // }
    // Sets a quat from the given angle and rotation axis, then returns it.
    setAxisAngle(axis, rad) {
      return this.fromAxisRotation(axis, rad);
    }
    // Getters/setters
    get ELEMENTS() {
      return 4;
    }
    get x() {
      return this[0];
    }
    set x(value) {
      this[0] = checkNumber5(value);
    }
    get y() {
      return this[1];
    }
    set y(value) {
      this[1] = checkNumber5(value);
    }
    get z() {
      return this[2];
    }
    set z(value) {
      this[2] = checkNumber5(value);
    }
    get w() {
      return this[3];
    }
    set w(value) {
      this[3] = checkNumber5(value);
    }
    // Calculates the length of a quat
    len() {
      return length12(this);
    }
    // Calculates the squared length of a quat
    lengthSquared() {
      return squaredLength10(this);
    }
    // Calculates the dot product of two quat's
    // @return {Number}
    dot(a6) {
      return dot13(this, a6);
    }
    // Gets the rotation axis and angle for a given quaternion.
    // If a quaternion is created with setAxisAngle, this method will
    // return the same values as providied in the original parameter
    // list OR functionally equivalent values.
    // Example: The quaternion formed by axis [0, 0, 1] and angle -90
    // is the same as the quaternion formed by [0, 0, 1] and 270.
    // This method favors the latter.
    // @return {{[x,y,z], Number}}
    // getAxisAngle() {
    //   const axis = [];
    // //   const angle = quat_getAxisAngle(axis, this);
    //   return {axis, angle};
    // }
    // MODIFIERS
    // Sets a quaternion to represent the shortest rotation from one vector
    // to another. Both vectors are assumed to be unit length.
    rotationTo(vectorA, vectorB) {
      rotationTo4(this, vectorA, vectorB);
      return this.check();
    }
    // Sets the specified quaternion with values corresponding to the given axes.
    // Each axis is a vec3 and is expected to be unit length and perpendicular
    // to all other specified axes.
    // setAxes() {
    //   Number
    // }
    // Performs a spherical linear interpolation with two control points
    // sqlerp() {
    //   Number;
    // }
    // Adds two quat's
    add(a6) {
      add13(this, this, a6);
      return this.check();
    }
    // Calculates the W component of a quat from the X, Y, and Z components.
    // Any existing W component will be ignored.
    calculateW() {
      calculateW4(this, this);
      return this.check();
    }
    // Calculates the conjugate of a quat If the quaternion is normalized,
    // this function is faster than quat_invert and produces the same result.
    conjugate() {
      conjugate4(this, this);
      return this.check();
    }
    // Calculates the inverse of a quat
    invert() {
      invert12(this, this);
      return this.check();
    }
    // Performs a linear interpolation between two quat's
    lerp(a6, b4, t5) {
      if (t5 === void 0) {
        return this.lerp(this, a6, b4);
      }
      lerp14(this, a6, b4, t5);
      return this.check();
    }
    // Multiplies two quat's
    multiplyRight(a6) {
      multiply16(this, this, a6);
      return this.check();
    }
    multiplyLeft(a6) {
      multiply16(this, a6, this);
      return this.check();
    }
    // Normalize a quat
    normalize() {
      const length17 = this.len();
      const l5 = length17 > 0 ? 1 / length17 : 0;
      this[0] = this[0] * l5;
      this[1] = this[1] * l5;
      this[2] = this[2] * l5;
      this[3] = this[3] * l5;
      if (length17 === 0) {
        this[3] = 1;
      }
      return this.check();
    }
    // Rotates a quaternion by the given angle about the X axis
    rotateX(rad) {
      rotateX13(this, this, rad);
      return this.check();
    }
    // Rotates a quaternion by the given angle about the Y axis
    rotateY(rad) {
      rotateY13(this, this, rad);
      return this.check();
    }
    // Rotates a quaternion by the given angle about the Z axis
    rotateZ(rad) {
      rotateZ13(this, this, rad);
      return this.check();
    }
    // Scales a quat by a scalar number
    scale(b4) {
      scale18(this, this, b4);
      return this.check();
    }
    // Performs a spherical linear interpolation between two quat
    slerp(arg0, arg1, arg2) {
      let start;
      let target2;
      let ratio;
      switch (arguments.length) {
        case 1:
          ({
            start = IDENTITY_QUATERNION3,
            target: target2,
            ratio
          } = arg0);
          break;
        case 2:
          start = this;
          target2 = arg0;
          ratio = arg1;
          break;
        default:
          start = arg0;
          target2 = arg1;
          ratio = arg2;
      }
      slerp6(this, start, target2, ratio);
      return this.check();
    }
    transformVector4(vector, result = new Vector43()) {
      transformQuat9(result, vector, this);
      return checkVector5(result, 4);
    }
    // THREE.js Math API compatibility
    lengthSq() {
      return this.lengthSquared();
    }
    setFromAxisAngle(axis, rad) {
      return this.setAxisAngle(axis, rad);
    }
    premultiply(a6) {
      return this.multiplyLeft(a6);
    }
    multiply(a6) {
      return this.multiplyRight(a6);
    }
  };

  // ../../node_modules/@math.gl/culling/node_modules/@math.gl/core/dist/lib/math-utils.js
  var math_utils_exports3 = {};
  __export(math_utils_exports3, {
    EPSILON1: () => EPSILON111,
    EPSILON10: () => EPSILON103,
    EPSILON11: () => EPSILON113,
    EPSILON12: () => EPSILON123,
    EPSILON13: () => EPSILON133,
    EPSILON14: () => EPSILON144,
    EPSILON15: () => EPSILON153,
    EPSILON16: () => EPSILON163,
    EPSILON17: () => EPSILON173,
    EPSILON18: () => EPSILON183,
    EPSILON19: () => EPSILON193,
    EPSILON2: () => EPSILON210,
    EPSILON20: () => EPSILON203,
    EPSILON3: () => EPSILON33,
    EPSILON4: () => EPSILON43,
    EPSILON5: () => EPSILON53,
    EPSILON6: () => EPSILON63,
    EPSILON7: () => EPSILON73,
    EPSILON8: () => EPSILON83,
    EPSILON9: () => EPSILON93,
    PI_OVER_FOUR: () => PI_OVER_FOUR3,
    PI_OVER_SIX: () => PI_OVER_SIX3,
    PI_OVER_TWO: () => PI_OVER_TWO3,
    TWO_PI: () => TWO_PI4
  });
  var EPSILON111 = 0.1;
  var EPSILON210 = 0.01;
  var EPSILON33 = 1e-3;
  var EPSILON43 = 1e-4;
  var EPSILON53 = 1e-5;
  var EPSILON63 = 1e-6;
  var EPSILON73 = 1e-7;
  var EPSILON83 = 1e-8;
  var EPSILON93 = 1e-9;
  var EPSILON103 = 1e-10;
  var EPSILON113 = 1e-11;
  var EPSILON123 = 1e-12;
  var EPSILON133 = 1e-13;
  var EPSILON144 = 1e-14;
  var EPSILON153 = 1e-15;
  var EPSILON163 = 1e-16;
  var EPSILON173 = 1e-17;
  var EPSILON183 = 1e-18;
  var EPSILON193 = 1e-19;
  var EPSILON203 = 1e-20;
  var PI_OVER_TWO3 = Math.PI / 2;
  var PI_OVER_FOUR3 = Math.PI / 4;
  var PI_OVER_SIX3 = Math.PI / 6;
  var TWO_PI4 = Math.PI * 2;

  // ../../node_modules/@math.gl/culling/dist/lib/bounding-volumes/axis-aligned-bounding-box.js
  var scratchVector11 = new Vector35();
  var scratchNormal4 = new Vector35();

  // ../../node_modules/@math.gl/culling/dist/lib/bounding-volumes/bounding-sphere.js
  var scratchVector12 = new Vector35();
  var scratchVector25 = new Vector35();
  var BoundingSphere2 = class {
    /** Creates a bounding sphere */
    constructor(center2 = [0, 0, 0], radius = 0) {
      this.radius = -0;
      this.center = new Vector35();
      this.fromCenterRadius(center2, radius);
    }
    /** Sets the bounding sphere from `center` and `radius`. */
    fromCenterRadius(center2, radius) {
      this.center.from(center2);
      this.radius = radius;
      return this;
    }
    /**
     * Computes a bounding sphere from the corner points of an axis-aligned bounding box.  The sphere
     * tightly and fully encompasses the box.
     */
    fromCornerPoints(corner, oppositeCorner) {
      oppositeCorner = scratchVector12.from(oppositeCorner);
      this.center = new Vector35().from(corner).add(oppositeCorner).scale(0.5);
      this.radius = this.center.distance(oppositeCorner);
      return this;
    }
    /** Compares the provided BoundingSphere component wise */
    equals(right) {
      return this === right || Boolean(right) && this.center.equals(right.center) && this.radius === right.radius;
    }
    /** Duplicates a BoundingSphere instance. */
    clone() {
      return new BoundingSphere2(this.center, this.radius);
    }
    /** Computes a bounding sphere that contains both the left and right bounding spheres. */
    union(boundingSphere) {
      const leftCenter = this.center;
      const leftRadius = this.radius;
      const rightCenter = boundingSphere.center;
      const rightRadius = boundingSphere.radius;
      const toRightCenter = scratchVector12.copy(rightCenter).subtract(leftCenter);
      const centerSeparation = toRightCenter.magnitude();
      if (leftRadius >= centerSeparation + rightRadius) {
        return this.clone();
      }
      if (rightRadius >= centerSeparation + leftRadius) {
        return boundingSphere.clone();
      }
      const halfDistanceBetweenTangentPoints = (leftRadius + centerSeparation + rightRadius) * 0.5;
      scratchVector25.copy(toRightCenter).scale((-leftRadius + halfDistanceBetweenTangentPoints) / centerSeparation).add(leftCenter);
      this.center.copy(scratchVector25);
      this.radius = halfDistanceBetweenTangentPoints;
      return this;
    }
    /** Computes a bounding sphere by enlarging the provided sphere to contain the provided point. */
    expand(point) {
      const scratchPoint2 = scratchVector12.from(point);
      const radius = scratchPoint2.subtract(this.center).magnitude();
      if (radius > this.radius) {
        this.radius = radius;
      }
      return this;
    }
    // BoundingVolume interface
    /**
     * Applies a 4x4 affine transformation matrix to a bounding sphere.
     * @param sphere The bounding sphere to apply the transformation to.
     * @param transform The transformation matrix to apply to the bounding sphere.
     * @returns self.
     */
    transform(transform2) {
      this.center.transform(transform2);
      const scale24 = mat4_exports2.getScaling(scratchVector12, transform2);
      this.radius = Math.max(scale24[0], Math.max(scale24[1], scale24[2])) * this.radius;
      return this;
    }
    /** Computes the estimated distance squared from the closest point on a bounding sphere to a point. */
    distanceSquaredTo(point) {
      const d5 = this.distanceTo(point);
      return d5 * d5;
    }
    /** Computes the estimated distance from the closest point on a bounding sphere to a point. */
    distanceTo(point) {
      const scratchPoint2 = scratchVector12.from(point);
      const delta = scratchPoint2.subtract(this.center);
      return Math.max(0, delta.len() - this.radius);
    }
    /** Determines which side of a plane a sphere is located. */
    intersectPlane(plane) {
      const center2 = this.center;
      const radius = this.radius;
      const normal = plane.normal;
      const distanceToPlane = normal.dot(center2) + plane.distance;
      if (distanceToPlane < -radius) {
        return INTERSECTION2.OUTSIDE;
      }
      if (distanceToPlane < radius) {
        return INTERSECTION2.INTERSECTING;
      }
      return INTERSECTION2.INSIDE;
    }
  };

  // ../../node_modules/@math.gl/culling/dist/lib/bounding-volumes/oriented-bounding-box.js
  var scratchVector35 = new Vector35();
  var scratchOffset2 = new Vector35();
  var scratchVectorU2 = new Vector35();
  var scratchVectorV2 = new Vector35();
  var scratchVectorW2 = new Vector35();
  var scratchCorner2 = new Vector35();
  var scratchToCenter2 = new Vector35();
  var MATRIX32 = {
    COLUMN0ROW0: 0,
    COLUMN0ROW1: 1,
    COLUMN0ROW2: 2,
    COLUMN1ROW0: 3,
    COLUMN1ROW1: 4,
    COLUMN1ROW2: 5,
    COLUMN2ROW0: 6,
    COLUMN2ROW1: 7,
    COLUMN2ROW2: 8
  };
  var OrientedBoundingBox2 = class {
    constructor(center2 = [0, 0, 0], halfAxes = [0, 0, 0, 0, 0, 0, 0, 0, 0]) {
      this.center = new Vector35().from(center2);
      this.halfAxes = new Matrix34(halfAxes);
    }
    /** Returns an array with three halfSizes for the bounding box */
    get halfSize() {
      const xAxis = this.halfAxes.getColumn(0);
      const yAxis = this.halfAxes.getColumn(1);
      const zAxis = this.halfAxes.getColumn(2);
      return [new Vector35(xAxis).len(), new Vector35(yAxis).len(), new Vector35(zAxis).len()];
    }
    /** Returns a quaternion describing the orientation of the bounding box */
    get quaternion() {
      const xAxis = this.halfAxes.getColumn(0);
      const yAxis = this.halfAxes.getColumn(1);
      const zAxis = this.halfAxes.getColumn(2);
      const normXAxis = new Vector35(xAxis).normalize();
      const normYAxis = new Vector35(yAxis).normalize();
      const normZAxis = new Vector35(zAxis).normalize();
      return new Quaternion3().fromMatrix3(new Matrix34([...normXAxis, ...normYAxis, ...normZAxis]));
    }
    /**
     * Create OrientedBoundingBox from quaternion based OBB,
     */
    fromCenterHalfSizeQuaternion(center2, halfSize, quaternion) {
      const quaternionObject = new Quaternion3(quaternion);
      const directionsMatrix = new Matrix34().fromQuaternion(quaternionObject);
      directionsMatrix[0] = directionsMatrix[0] * halfSize[0];
      directionsMatrix[1] = directionsMatrix[1] * halfSize[0];
      directionsMatrix[2] = directionsMatrix[2] * halfSize[0];
      directionsMatrix[3] = directionsMatrix[3] * halfSize[1];
      directionsMatrix[4] = directionsMatrix[4] * halfSize[1];
      directionsMatrix[5] = directionsMatrix[5] * halfSize[1];
      directionsMatrix[6] = directionsMatrix[6] * halfSize[2];
      directionsMatrix[7] = directionsMatrix[7] * halfSize[2];
      directionsMatrix[8] = directionsMatrix[8] * halfSize[2];
      this.center = new Vector35().from(center2);
      this.halfAxes = directionsMatrix;
      return this;
    }
    /** Duplicates a OrientedBoundingBox instance. */
    clone() {
      return new OrientedBoundingBox2(this.center, this.halfAxes);
    }
    /** Compares the provided OrientedBoundingBox component wise and returns */
    equals(right) {
      return this === right || Boolean(right) && this.center.equals(right.center) && this.halfAxes.equals(right.halfAxes);
    }
    /** Computes a tight-fitting bounding sphere enclosing the provided oriented bounding box. */
    getBoundingSphere(result = new BoundingSphere2()) {
      const halfAxes = this.halfAxes;
      const u6 = halfAxes.getColumn(0, scratchVectorU2);
      const v5 = halfAxes.getColumn(1, scratchVectorV2);
      const w5 = halfAxes.getColumn(2, scratchVectorW2);
      const cornerVector = scratchVector35.copy(u6).add(v5).add(w5);
      result.center.copy(this.center);
      result.radius = cornerVector.magnitude();
      return result;
    }
    /** Determines which side of a plane the oriented bounding box is located. */
    intersectPlane(plane) {
      const center2 = this.center;
      const normal = plane.normal;
      const halfAxes = this.halfAxes;
      const normalX = normal.x;
      const normalY = normal.y;
      const normalZ = normal.z;
      const radEffective = Math.abs(normalX * halfAxes[MATRIX32.COLUMN0ROW0] + normalY * halfAxes[MATRIX32.COLUMN0ROW1] + normalZ * halfAxes[MATRIX32.COLUMN0ROW2]) + Math.abs(normalX * halfAxes[MATRIX32.COLUMN1ROW0] + normalY * halfAxes[MATRIX32.COLUMN1ROW1] + normalZ * halfAxes[MATRIX32.COLUMN1ROW2]) + Math.abs(normalX * halfAxes[MATRIX32.COLUMN2ROW0] + normalY * halfAxes[MATRIX32.COLUMN2ROW1] + normalZ * halfAxes[MATRIX32.COLUMN2ROW2]);
      const distanceToPlane = normal.dot(center2) + plane.distance;
      if (distanceToPlane <= -radEffective) {
        return INTERSECTION2.OUTSIDE;
      } else if (distanceToPlane >= radEffective) {
        return INTERSECTION2.INSIDE;
      }
      return INTERSECTION2.INTERSECTING;
    }
    /** Computes the estimated distance from the closest point on a bounding box to a point. */
    distanceTo(point) {
      return Math.sqrt(this.distanceSquaredTo(point));
    }
    /**
     * Computes the estimated distance squared from the closest point
     * on a bounding box to a point.
     * See Geometric Tools for Computer Graphics 10.4.2
     */
    distanceSquaredTo(point) {
      const offset = scratchOffset2.from(point).subtract(this.center);
      const halfAxes = this.halfAxes;
      const u6 = halfAxes.getColumn(0, scratchVectorU2);
      const v5 = halfAxes.getColumn(1, scratchVectorV2);
      const w5 = halfAxes.getColumn(2, scratchVectorW2);
      const uHalf = u6.magnitude();
      const vHalf = v5.magnitude();
      const wHalf = w5.magnitude();
      u6.normalize();
      v5.normalize();
      w5.normalize();
      let distanceSquared = 0;
      let d5;
      d5 = Math.abs(offset.dot(u6)) - uHalf;
      if (d5 > 0) {
        distanceSquared += d5 * d5;
      }
      d5 = Math.abs(offset.dot(v5)) - vHalf;
      if (d5 > 0) {
        distanceSquared += d5 * d5;
      }
      d5 = Math.abs(offset.dot(w5)) - wHalf;
      if (d5 > 0) {
        distanceSquared += d5 * d5;
      }
      return distanceSquared;
    }
    /**
     * The distances calculated by the vector from the center of the bounding box
     * to position projected onto direction.
     *
     * - If you imagine the infinite number of planes with normal direction,
     *   this computes the smallest distance to the closest and farthest planes
     *   from `position` that intersect the bounding box.
     *
     * @param position The position to calculate the distance from.
     * @param direction The direction from position.
     * @param result An Interval (array of length 2) to store the nearest and farthest distances.
     * @returns Interval (array of length 2) with nearest and farthest distances
     *   on the bounding box from position in direction.
     */
    // eslint-disable-next-line max-statements
    computePlaneDistances(position, direction, result = [-0, -0]) {
      let minDist = Number.POSITIVE_INFINITY;
      let maxDist = Number.NEGATIVE_INFINITY;
      const center2 = this.center;
      const halfAxes = this.halfAxes;
      const u6 = halfAxes.getColumn(0, scratchVectorU2);
      const v5 = halfAxes.getColumn(1, scratchVectorV2);
      const w5 = halfAxes.getColumn(2, scratchVectorW2);
      const corner = scratchCorner2.copy(u6).add(v5).add(w5).add(center2);
      const toCenter = scratchToCenter2.copy(corner).subtract(position);
      let mag = direction.dot(toCenter);
      minDist = Math.min(mag, minDist);
      maxDist = Math.max(mag, maxDist);
      corner.copy(center2).add(u6).add(v5).subtract(w5);
      toCenter.copy(corner).subtract(position);
      mag = direction.dot(toCenter);
      minDist = Math.min(mag, minDist);
      maxDist = Math.max(mag, maxDist);
      corner.copy(center2).add(u6).subtract(v5).add(w5);
      toCenter.copy(corner).subtract(position);
      mag = direction.dot(toCenter);
      minDist = Math.min(mag, minDist);
      maxDist = Math.max(mag, maxDist);
      corner.copy(center2).add(u6).subtract(v5).subtract(w5);
      toCenter.copy(corner).subtract(position);
      mag = direction.dot(toCenter);
      minDist = Math.min(mag, minDist);
      maxDist = Math.max(mag, maxDist);
      center2.copy(corner).subtract(u6).add(v5).add(w5);
      toCenter.copy(corner).subtract(position);
      mag = direction.dot(toCenter);
      minDist = Math.min(mag, minDist);
      maxDist = Math.max(mag, maxDist);
      center2.copy(corner).subtract(u6).add(v5).subtract(w5);
      toCenter.copy(corner).subtract(position);
      mag = direction.dot(toCenter);
      minDist = Math.min(mag, minDist);
      maxDist = Math.max(mag, maxDist);
      center2.copy(corner).subtract(u6).subtract(v5).add(w5);
      toCenter.copy(corner).subtract(position);
      mag = direction.dot(toCenter);
      minDist = Math.min(mag, minDist);
      maxDist = Math.max(mag, maxDist);
      center2.copy(corner).subtract(u6).subtract(v5).subtract(w5);
      toCenter.copy(corner).subtract(position);
      mag = direction.dot(toCenter);
      minDist = Math.min(mag, minDist);
      maxDist = Math.max(mag, maxDist);
      result[0] = minDist;
      result[1] = maxDist;
      return result;
    }
    /**
     * Applies a 4x4 affine transformation matrix to a bounding sphere.
     * @param transform The transformation matrix to apply to the bounding sphere.
     * @returns itself, i.e. the modified BoundingVolume.
     */
    transform(transformation) {
      this.center.transformAsPoint(transformation);
      const xAxis = this.halfAxes.getColumn(0, scratchVectorU2);
      xAxis.transformAsPoint(transformation);
      const yAxis = this.halfAxes.getColumn(1, scratchVectorV2);
      yAxis.transformAsPoint(transformation);
      const zAxis = this.halfAxes.getColumn(2, scratchVectorW2);
      zAxis.transformAsPoint(transformation);
      this.halfAxes = new Matrix34([...xAxis, ...yAxis, ...zAxis]);
      return this;
    }
    getTransform() {
      throw new Error("not implemented");
    }
  };

  // ../../node_modules/@math.gl/culling/dist/lib/plane.js
  var scratchPosition3 = new Vector35();
  var scratchNormal5 = new Vector35();
  var Plane2 = class {
    constructor(normal = [0, 0, 1], distance7 = 0) {
      this.normal = new Vector35();
      this.distance = -0;
      this.fromNormalDistance(normal, distance7);
    }
    /** Creates a plane from a normal and a distance from the origin. */
    fromNormalDistance(normal, distance7) {
      assert13(Number.isFinite(distance7));
      this.normal.from(normal).normalize();
      this.distance = distance7;
      return this;
    }
    /** Creates a plane from a normal and a point on the plane. */
    fromPointNormal(point, normal) {
      point = scratchPosition3.from(point);
      this.normal.from(normal).normalize();
      const distance7 = -this.normal.dot(point);
      this.distance = distance7;
      return this;
    }
    /** Creates a plane from the general equation */
    fromCoefficients(a6, b4, c5, d5) {
      this.normal.set(a6, b4, c5);
      assert13(equals11(this.normal.len(), 1));
      this.distance = d5;
      return this;
    }
    /** Duplicates a Plane instance. */
    clone() {
      return new Plane2(this.normal, this.distance);
    }
    /** Compares the provided Planes by normal and distance */
    equals(right) {
      return equals11(this.distance, right.distance) && equals11(this.normal, right.normal);
    }
    /** Computes the signed shortest distance of a point to a plane.
     * The sign of the distance determines which side of the plane the point is on.
     */
    getPointDistance(point) {
      return this.normal.dot(point) + this.distance;
    }
    /** Transforms the plane by the given transformation matrix. */
    transform(matrix4) {
      const normal = scratchNormal5.copy(this.normal).transformAsVector(matrix4).normalize();
      const point = this.normal.scale(-this.distance).transform(matrix4);
      return this.fromPointNormal(point, normal);
    }
    projectPointOntoPlane(point, result = [0, 0, 0]) {
      const scratchPoint2 = scratchPosition3.from(point);
      const pointDistance = this.getPointDistance(scratchPoint2);
      const scaledNormal = scratchNormal5.copy(this.normal).scale(pointDistance);
      return scratchPoint2.subtract(scaledNormal).to(result);
    }
  };

  // ../../node_modules/@math.gl/culling/dist/lib/culling-volume.js
  var faces2 = [new Vector35([1, 0, 0]), new Vector35([0, 1, 0]), new Vector35([0, 0, 1])];
  var scratchPlaneCenter2 = new Vector35();
  var scratchPlaneNormal3 = new Vector35();
  var CullingVolume2 = class {
    /**
     * Create a new `CullingVolume` bounded by an array of clipping planed
     * @param planes Array of clipping planes.
     * */
    constructor(planes = []) {
      this.planes = planes;
    }
    /**
     * Constructs a culling volume from a bounding sphere. Creates six planes that create a box containing the sphere.
     * The planes are aligned to the x, y, and z axes in world coordinates.
     */
    fromBoundingSphere(boundingSphere) {
      this.planes.length = 2 * faces2.length;
      const center2 = boundingSphere.center;
      const radius = boundingSphere.radius;
      let planeIndex = 0;
      for (const faceNormal of faces2) {
        let plane0 = this.planes[planeIndex];
        let plane1 = this.planes[planeIndex + 1];
        if (!plane0) {
          plane0 = this.planes[planeIndex] = new Plane2();
        }
        if (!plane1) {
          plane1 = this.planes[planeIndex + 1] = new Plane2();
        }
        const plane0Center = scratchPlaneCenter2.copy(faceNormal).scale(-radius).add(center2);
        plane0.fromPointNormal(plane0Center, faceNormal);
        const plane1Center = scratchPlaneCenter2.copy(faceNormal).scale(radius).add(center2);
        const negatedFaceNormal = scratchPlaneNormal3.copy(faceNormal).negate();
        plane1.fromPointNormal(plane1Center, negatedFaceNormal);
        planeIndex += 2;
      }
      return this;
    }
    /** Determines whether a bounding volume intersects the culling volume. */
    computeVisibility(boundingVolume) {
      let intersect4 = INTERSECTION2.INSIDE;
      for (const plane of this.planes) {
        const result = boundingVolume.intersectPlane(plane);
        switch (result) {
          case INTERSECTION2.OUTSIDE:
            return INTERSECTION2.OUTSIDE;
          case INTERSECTION2.INTERSECTING:
            intersect4 = INTERSECTION2.INTERSECTING;
            break;
          default:
        }
      }
      return intersect4;
    }
    /**
     * Determines whether a bounding volume intersects the culling volume.
     *
     * @param parentPlaneMask A bit mask from the boundingVolume's parent's check against the same culling
     *   volume, such that if (planeMask & (1 << planeIndex) === 0), for k < 31, then
     *   the parent (and therefore this) volume is completely inside plane[planeIndex]
     *   and that plane check can be skipped.
     */
    computeVisibilityWithPlaneMask(boundingVolume, parentPlaneMask) {
      assert13(Number.isFinite(parentPlaneMask), "parentPlaneMask is required.");
      if (parentPlaneMask === CullingVolume2.MASK_OUTSIDE || parentPlaneMask === CullingVolume2.MASK_INSIDE) {
        return parentPlaneMask;
      }
      let mask = CullingVolume2.MASK_INSIDE;
      const planes = this.planes;
      for (let k4 = 0; k4 < this.planes.length; ++k4) {
        const flag = k4 < 31 ? 1 << k4 : 0;
        if (k4 < 31 && (parentPlaneMask & flag) === 0) {
          continue;
        }
        const plane = planes[k4];
        const result = boundingVolume.intersectPlane(plane);
        if (result === INTERSECTION2.OUTSIDE) {
          return CullingVolume2.MASK_OUTSIDE;
        } else if (result === INTERSECTION2.INTERSECTING) {
          mask |= flag;
        }
      }
      return mask;
    }
  };
  CullingVolume2.MASK_OUTSIDE = 4294967295;
  CullingVolume2.MASK_INSIDE = 0;
  CullingVolume2.MASK_INDETERMINATE = 2147483647;

  // ../../node_modules/@math.gl/culling/dist/lib/perspective-off-center-frustum.js
  var scratchPlaneUpVector2 = new Vector35();
  var scratchPlaneRightVector2 = new Vector35();
  var scratchPlaneNearCenter2 = new Vector35();
  var scratchPlaneFarCenter2 = new Vector35();
  var scratchPlaneNormal4 = new Vector35();

  // ../../node_modules/@math.gl/culling/dist/lib/algorithms/bounding-sphere-from-points.js
  var fromPointsXMin2 = new Vector35();
  var fromPointsYMin2 = new Vector35();
  var fromPointsZMin2 = new Vector35();
  var fromPointsXMax2 = new Vector35();
  var fromPointsYMax2 = new Vector35();
  var fromPointsZMax2 = new Vector35();
  var fromPointsCurrentPos2 = new Vector35();
  var fromPointsScratch2 = new Vector35();
  var fromPointsRitterCenter2 = new Vector35();
  var fromPointsMinBoxPt2 = new Vector35();
  var fromPointsMaxBoxPt2 = new Vector35();
  var fromPointsNaiveCenterScratch2 = new Vector35();

  // ../../node_modules/@math.gl/culling/dist/lib/algorithms/compute-eigen-decomposition.js
  var scratchMatrix3 = new Matrix34();
  var scratchUnitary2 = new Matrix34();
  var scratchDiagonal2 = new Matrix34();
  var jMatrix2 = new Matrix34();
  var jMatrixTranspose2 = new Matrix34();
  function computeEigenDecomposition2(matrix, result = {}) {
    const EIGEN_TOLERANCE = math_utils_exports3.EPSILON20;
    const EIGEN_MAX_SWEEPS = 10;
    let count3 = 0;
    let sweep = 0;
    const unitaryMatrix = scratchUnitary2;
    const diagonalMatrix = scratchDiagonal2;
    unitaryMatrix.identity();
    diagonalMatrix.copy(matrix);
    const epsilon = EIGEN_TOLERANCE * computeFrobeniusNorm2(diagonalMatrix);
    while (sweep < EIGEN_MAX_SWEEPS && offDiagonalFrobeniusNorm2(diagonalMatrix) > epsilon) {
      shurDecomposition2(diagonalMatrix, jMatrix2);
      jMatrixTranspose2.copy(jMatrix2).transpose();
      diagonalMatrix.multiplyRight(jMatrix2);
      diagonalMatrix.multiplyLeft(jMatrixTranspose2);
      unitaryMatrix.multiplyRight(jMatrix2);
      if (++count3 > 2) {
        ++sweep;
        count3 = 0;
      }
    }
    result.unitary = unitaryMatrix.toTarget(result.unitary);
    result.diagonal = diagonalMatrix.toTarget(result.diagonal);
    return result;
  }
  function computeFrobeniusNorm2(matrix) {
    let norm = 0;
    for (let i7 = 0; i7 < 9; ++i7) {
      const temp = matrix[i7];
      norm += temp * temp;
    }
    return Math.sqrt(norm);
  }
  var rowVal2 = [1, 0, 0];
  var colVal2 = [2, 2, 1];
  function offDiagonalFrobeniusNorm2(matrix) {
    let norm = 0;
    for (let i7 = 0; i7 < 3; ++i7) {
      const temp = matrix[scratchMatrix3.getElementIndex(colVal2[i7], rowVal2[i7])];
      norm += 2 * temp * temp;
    }
    return Math.sqrt(norm);
  }
  function shurDecomposition2(matrix, result) {
    const tolerance = math_utils_exports3.EPSILON15;
    let maxDiagonal = 0;
    let rotAxis = 1;
    for (let i7 = 0; i7 < 3; ++i7) {
      const temp = Math.abs(matrix[scratchMatrix3.getElementIndex(colVal2[i7], rowVal2[i7])]);
      if (temp > maxDiagonal) {
        rotAxis = i7;
        maxDiagonal = temp;
      }
    }
    const p5 = rowVal2[rotAxis];
    const q3 = colVal2[rotAxis];
    let c5 = 1;
    let s5 = 0;
    if (Math.abs(matrix[scratchMatrix3.getElementIndex(q3, p5)]) > tolerance) {
      const qq = matrix[scratchMatrix3.getElementIndex(q3, q3)];
      const pp = matrix[scratchMatrix3.getElementIndex(p5, p5)];
      const qp = matrix[scratchMatrix3.getElementIndex(q3, p5)];
      const tau = (qq - pp) / 2 / qp;
      let t5;
      if (tau < 0) {
        t5 = -1 / (-tau + Math.sqrt(1 + tau * tau));
      } else {
        t5 = 1 / (tau + Math.sqrt(1 + tau * tau));
      }
      c5 = 1 / Math.sqrt(1 + t5 * t5);
      s5 = t5 * c5;
    }
    Matrix34.IDENTITY.to(result);
    result[scratchMatrix3.getElementIndex(p5, p5)] = result[scratchMatrix3.getElementIndex(q3, q3)] = c5;
    result[scratchMatrix3.getElementIndex(q3, p5)] = s5;
    result[scratchMatrix3.getElementIndex(p5, q3)] = -s5;
    return result;
  }

  // ../../node_modules/@math.gl/culling/dist/lib/algorithms/bounding-box-from-points.js
  var scratchVector26 = new Vector35();
  var scratchVector36 = new Vector35();
  var scratchVector42 = new Vector35();
  var scratchVector52 = new Vector35();
  var scratchVector62 = new Vector35();
  var scratchCovarianceResult2 = new Matrix34();
  var scratchEigenResult2 = {
    diagonal: new Matrix34(),
    unitary: new Matrix34()
  };
  function makeOrientedBoundingBoxFromPoints2(positions, result = new OrientedBoundingBox2()) {
    if (!positions || positions.length === 0) {
      result.halfAxes = new Matrix34([0, 0, 0, 0, 0, 0, 0, 0, 0]);
      result.center = new Vector35();
      return result;
    }
    const length17 = positions.length;
    const meanPoint = new Vector35(0, 0, 0);
    for (const position of positions) {
      meanPoint.add(position);
    }
    const invLength = 1 / length17;
    meanPoint.multiplyByScalar(invLength);
    let exx = 0;
    let exy = 0;
    let exz = 0;
    let eyy = 0;
    let eyz = 0;
    let ezz = 0;
    for (const position of positions) {
      const p5 = scratchVector26.copy(position).subtract(meanPoint);
      exx += p5.x * p5.x;
      exy += p5.x * p5.y;
      exz += p5.x * p5.z;
      eyy += p5.y * p5.y;
      eyz += p5.y * p5.z;
      ezz += p5.z * p5.z;
    }
    exx *= invLength;
    exy *= invLength;
    exz *= invLength;
    eyy *= invLength;
    eyz *= invLength;
    ezz *= invLength;
    const covarianceMatrix = scratchCovarianceResult2;
    covarianceMatrix[0] = exx;
    covarianceMatrix[1] = exy;
    covarianceMatrix[2] = exz;
    covarianceMatrix[3] = exy;
    covarianceMatrix[4] = eyy;
    covarianceMatrix[5] = eyz;
    covarianceMatrix[6] = exz;
    covarianceMatrix[7] = eyz;
    covarianceMatrix[8] = ezz;
    const { unitary } = computeEigenDecomposition2(covarianceMatrix, scratchEigenResult2);
    const rotation2 = result.halfAxes.copy(unitary);
    let v1 = rotation2.getColumn(0, scratchVector42);
    let v22 = rotation2.getColumn(1, scratchVector52);
    let v32 = rotation2.getColumn(2, scratchVector62);
    let u1 = -Number.MAX_VALUE;
    let u22 = -Number.MAX_VALUE;
    let u32 = -Number.MAX_VALUE;
    let l1 = Number.MAX_VALUE;
    let l22 = Number.MAX_VALUE;
    let l32 = Number.MAX_VALUE;
    for (const position of positions) {
      scratchVector26.copy(position);
      u1 = Math.max(scratchVector26.dot(v1), u1);
      u22 = Math.max(scratchVector26.dot(v22), u22);
      u32 = Math.max(scratchVector26.dot(v32), u32);
      l1 = Math.min(scratchVector26.dot(v1), l1);
      l22 = Math.min(scratchVector26.dot(v22), l22);
      l32 = Math.min(scratchVector26.dot(v32), l32);
    }
    v1 = v1.multiplyByScalar(0.5 * (l1 + u1));
    v22 = v22.multiplyByScalar(0.5 * (l22 + u22));
    v32 = v32.multiplyByScalar(0.5 * (l32 + u32));
    result.center.copy(v1).add(v22).add(v32);
    const scale24 = scratchVector36.set(u1 - l1, u22 - l22, u32 - l32).multiplyByScalar(0.5);
    const scaleMatrix = new Matrix34([scale24[0], 0, 0, 0, scale24[1], 0, 0, 0, scale24[2]]);
    result.halfAxes.multiplyRight(scaleMatrix);
    return result;
  }

  // ../../node_modules/@loaders.gl/tiles/dist/tileset/helpers/frame-state.js
  var scratchVector13 = new Vector33();
  var scratchPosition4 = new Vector33();
  var cullingVolume = new CullingVolume2([
    new Plane2(),
    new Plane2(),
    new Plane2(),
    new Plane2(),
    new Plane2(),
    new Plane2()
  ]);
  function getFrameState(viewport, frameNumber) {
    const { cameraDirection, cameraUp, height } = viewport;
    const { metersPerUnit } = viewport.distanceScales;
    const viewportCenterCartesian = worldToCartesian(viewport, viewport.center);
    const enuToFixedTransform = Ellipsoid.WGS84.eastNorthUpToFixedFrame(viewportCenterCartesian);
    const cameraPositionCartographic = viewport.unprojectPosition(viewport.cameraPosition);
    const cameraPositionCartesian2 = Ellipsoid.WGS84.cartographicToCartesian(cameraPositionCartographic, new Vector33());
    const cameraDirectionCartesian = new Vector33(
      // @ts-ignore
      enuToFixedTransform.transformAsVector(new Vector33(cameraDirection).scale(metersPerUnit))
    ).normalize();
    const cameraUpCartesian = new Vector33(
      // @ts-ignore
      enuToFixedTransform.transformAsVector(new Vector33(cameraUp).scale(metersPerUnit))
    ).normalize();
    commonSpacePlanesToWGS84(viewport);
    const ViewportClass = viewport.constructor;
    const { longitude, latitude, width, bearing, zoom } = viewport;
    const topDownViewport = new ViewportClass({
      longitude,
      latitude,
      height,
      width,
      bearing,
      zoom,
      pitch: 0
    });
    return {
      camera: {
        position: cameraPositionCartesian2,
        direction: cameraDirectionCartesian,
        up: cameraUpCartesian
      },
      viewport,
      topDownViewport,
      height,
      cullingVolume,
      frameNumber,
      // TODO: This can be the same between updates, what number is unique for between updates?
      sseDenominator: 1.15
      // Assumes fovy = 60 degrees
    };
  }
  function limitSelectedTiles(tiles, frameState, maximumTilesSelected) {
    if (maximumTilesSelected === 0 || tiles.length <= maximumTilesSelected) {
      return [tiles, []];
    }
    const tuples = [];
    const { longitude: viewportLongitude, latitude: viewportLatitude } = frameState.viewport;
    for (const [index, tile] of tiles.entries()) {
      const [longitude, latitude] = tile.header.mbs;
      const deltaLon = Math.abs(viewportLongitude - longitude);
      const deltaLat = Math.abs(viewportLatitude - latitude);
      const distance7 = Math.sqrt(deltaLat * deltaLat + deltaLon * deltaLon);
      tuples.push([index, distance7]);
    }
    const tuplesSorted = tuples.sort((a6, b4) => a6[1] - b4[1]);
    const selectedTiles = [];
    for (let i7 = 0; i7 < maximumTilesSelected; i7++) {
      selectedTiles.push(tiles[tuplesSorted[i7][0]]);
    }
    const unselectedTiles = [];
    for (let i7 = maximumTilesSelected; i7 < tuplesSorted.length; i7++) {
      unselectedTiles.push(tiles[tuplesSorted[i7][0]]);
    }
    return [selectedTiles, unselectedTiles];
  }
  function commonSpacePlanesToWGS84(viewport) {
    const frustumPlanes = viewport.getFrustumPlanes();
    const nearCenterCommon = closestPointOnPlane(frustumPlanes.near, viewport.cameraPosition);
    const nearCenterCartesian = worldToCartesian(viewport, nearCenterCommon);
    const cameraCartesian = worldToCartesian(viewport, viewport.cameraPosition, scratchPosition4);
    let i7 = 0;
    cullingVolume.planes[i7++].fromPointNormal(nearCenterCartesian, scratchVector13.copy(nearCenterCartesian).subtract(cameraCartesian));
    for (const dir in frustumPlanes) {
      if (dir === "near") {
        continue;
      }
      const plane = frustumPlanes[dir];
      const posCommon = closestPointOnPlane(plane, nearCenterCommon, scratchPosition4);
      const cartesianPos = worldToCartesian(viewport, posCommon, scratchPosition4);
      cullingVolume.planes[i7++].fromPointNormal(
        cartesianPos,
        // Want the normal to point into the frustum since that's what culling expects
        scratchVector13.copy(nearCenterCartesian).subtract(cartesianPos)
      );
    }
  }
  function closestPointOnPlane(plane, refPoint, out = new Vector33()) {
    const distanceToRef = plane.normal.dot(refPoint);
    out.copy(plane.normal).scale(plane.distance - distanceToRef).add(refPoint);
    return out;
  }
  function worldToCartesian(viewport, point, out = new Vector33()) {
    const cartographicPos = viewport.unprojectPosition(point);
    return Ellipsoid.WGS84.cartographicToCartesian(cartographicPos, out);
  }

  // ../../node_modules/@loaders.gl/tiles/dist/tileset/helpers/zoom.js
  var WGS84_RADIUS_X2 = 6378137;
  var WGS84_RADIUS_Y2 = 6378137;
  var WGS84_RADIUS_Z2 = 6356752314245179e-9;
  var scratchVector14 = new Vector33();
  function getZoomFromBoundingVolume(boundingVolume, cartorgraphicCenter) {
    if (boundingVolume instanceof OrientedBoundingBox2) {
      const { halfAxes } = boundingVolume;
      const obbSize = getObbSize(halfAxes);
      return Math.log2(WGS84_RADIUS_Z2 / (obbSize + cartorgraphicCenter[2]));
    } else if (boundingVolume instanceof BoundingSphere2) {
      const { radius } = boundingVolume;
      return Math.log2(WGS84_RADIUS_Z2 / (radius + cartorgraphicCenter[2]));
    } else if (boundingVolume.width && boundingVolume.height) {
      const { width, height } = boundingVolume;
      const zoomX = Math.log2(WGS84_RADIUS_X2 / width);
      const zoomY = Math.log2(WGS84_RADIUS_Y2 / height);
      return (zoomX + zoomY) / 2;
    }
    return 1;
  }
  function getZoomFromFullExtent(fullExtent, cartorgraphicCenter, cartesianCenter) {
    Ellipsoid.WGS84.cartographicToCartesian([fullExtent.xmax, fullExtent.ymax, fullExtent.zmax], scratchVector14);
    const extentSize = Math.sqrt(Math.pow(scratchVector14[0] - cartesianCenter[0], 2) + Math.pow(scratchVector14[1] - cartesianCenter[1], 2) + Math.pow(scratchVector14[2] - cartesianCenter[2], 2));
    return Math.log2(WGS84_RADIUS_Z2 / (extentSize + cartorgraphicCenter[2]));
  }
  function getZoomFromExtent(extent, cartorgraphicCenter, cartesianCenter) {
    const [xmin, ymin, xmax, ymax] = extent;
    return getZoomFromFullExtent({ xmin, xmax, ymin, ymax, zmin: 0, zmax: 0 }, cartorgraphicCenter, cartesianCenter);
  }
  function getObbSize(halfAxes) {
    halfAxes.getColumn(0, scratchVector14);
    const axeY = halfAxes.getColumn(1);
    const axeZ = halfAxes.getColumn(2);
    const farthestVertex = scratchVector14.add(axeY).add(axeZ);
    const size = farthestVertex.len();
    return size;
  }

  // ../../node_modules/@loaders.gl/tiles/dist/constants.js
  var TILE_CONTENT_STATE = {
    UNLOADED: 0,
    // Has never been requested
    LOADING: 1,
    // Is waiting on a pending request
    PROCESSING: 2,
    // Request received.  Contents are being processed for rendering.  Depending on the content, it might make its own requests for external data.
    READY: 3,
    // Ready to render.
    EXPIRED: 4,
    // Is expired and will be unloaded once new content is loaded.
    FAILED: 5
    // Request failed.
  };
  var TILE_REFINEMENT;
  (function(TILE_REFINEMENT2) {
    TILE_REFINEMENT2[TILE_REFINEMENT2["ADD"] = 1] = "ADD";
    TILE_REFINEMENT2[TILE_REFINEMENT2["REPLACE"] = 2] = "REPLACE";
  })(TILE_REFINEMENT || (TILE_REFINEMENT = {}));
  var TILE_TYPE;
  (function(TILE_TYPE2) {
    TILE_TYPE2["EMPTY"] = "empty";
    TILE_TYPE2["SCENEGRAPH"] = "scenegraph";
    TILE_TYPE2["POINTCLOUD"] = "pointcloud";
    TILE_TYPE2["MESH"] = "mesh";
  })(TILE_TYPE || (TILE_TYPE = {}));
  var TILESET_TYPE;
  (function(TILESET_TYPE2) {
    TILESET_TYPE2["I3S"] = "I3S";
    TILESET_TYPE2["TILES3D"] = "TILES3D";
  })(TILESET_TYPE || (TILESET_TYPE = {}));
  var LOD_METRIC_TYPE;
  (function(LOD_METRIC_TYPE2) {
    LOD_METRIC_TYPE2["GEOMETRIC_ERROR"] = "geometricError";
    LOD_METRIC_TYPE2["MAX_SCREEN_THRESHOLD"] = "maxScreenThreshold";
  })(LOD_METRIC_TYPE || (LOD_METRIC_TYPE = {}));
  var TILE3D_OPTIMIZATION_HINT = {
    NOT_COMPUTED: -1,
    USE_OPTIMIZATION: 1,
    SKIP_OPTIMIZATION: 0
  };

  // ../../node_modules/@loaders.gl/tiles/dist/tileset/helpers/bounding-volume.js
  function defined(x4) {
    return x4 !== void 0 && x4 !== null;
  }
  var scratchPoint = new Vector33();
  var scratchScale = new Vector33();
  var scratchNorthWest = new Vector33();
  var scratchSouthEast = new Vector33();
  var scratchCenter = new Vector33();
  var scratchXAxis = new Vector33();
  var scratchYAxis = new Vector33();
  var scratchZAxis = new Vector33();
  function createBoundingVolume(boundingVolumeHeader, transform2, result) {
    assert2(boundingVolumeHeader, "3D Tile: boundingVolume must be defined");
    if (boundingVolumeHeader.box) {
      return createBox(boundingVolumeHeader.box, transform2, result);
    }
    if (boundingVolumeHeader.region) {
      return createObbFromRegion(boundingVolumeHeader.region);
    }
    if (boundingVolumeHeader.sphere) {
      return createSphere(boundingVolumeHeader.sphere, transform2, result);
    }
    throw new Error("3D Tile: boundingVolume must contain a sphere, region, or box");
  }
  function getCartographicBounds(boundingVolumeHeader, boundingVolume) {
    if (boundingVolumeHeader.box) {
      return orientedBoundingBoxToCartographicBounds(boundingVolume);
    }
    if (boundingVolumeHeader.region) {
      const [west, south, east, north, minHeight, maxHeight] = boundingVolumeHeader.region;
      return [
        [degrees2(west), degrees2(south), minHeight],
        [degrees2(east), degrees2(north), maxHeight]
      ];
    }
    if (boundingVolumeHeader.sphere) {
      return boundingSphereToCartographicBounds(boundingVolume);
    }
    throw new Error("Unkown boundingVolume type");
  }
  function createBox(box, transform2, result) {
    const center2 = new Vector33(box[0], box[1], box[2]);
    transform2.transform(center2, center2);
    let origin = [];
    if (box.length === 10) {
      const halfSize = box.slice(3, 6);
      const quaternion = new Quaternion2();
      quaternion.fromArray(box, 6);
      const x4 = new Vector33([1, 0, 0]);
      const y5 = new Vector33([0, 1, 0]);
      const z4 = new Vector33([0, 0, 1]);
      x4.transformByQuaternion(quaternion);
      x4.scale(halfSize[0]);
      y5.transformByQuaternion(quaternion);
      y5.scale(halfSize[1]);
      z4.transformByQuaternion(quaternion);
      z4.scale(halfSize[2]);
      origin = [...x4.toArray(), ...y5.toArray(), ...z4.toArray()];
    } else {
      origin = [...box.slice(3, 6), ...box.slice(6, 9), ...box.slice(9, 12)];
    }
    const xAxis = transform2.transformAsVector(origin.slice(0, 3));
    const yAxis = transform2.transformAsVector(origin.slice(3, 6));
    const zAxis = transform2.transformAsVector(origin.slice(6, 9));
    const halfAxes = new Matrix33([
      xAxis[0],
      xAxis[1],
      xAxis[2],
      yAxis[0],
      yAxis[1],
      yAxis[2],
      zAxis[0],
      zAxis[1],
      zAxis[2]
    ]);
    if (defined(result)) {
      result.center = center2;
      result.halfAxes = halfAxes;
      return result;
    }
    return new OrientedBoundingBox2(center2, halfAxes);
  }
  function createSphere(sphere, transform2, result) {
    const center2 = new Vector33(sphere[0], sphere[1], sphere[2]);
    transform2.transform(center2, center2);
    const scale24 = transform2.getScale(scratchScale);
    const uniformScale = Math.max(Math.max(scale24[0], scale24[1]), scale24[2]);
    const radius = sphere[3] * uniformScale;
    if (defined(result)) {
      result.center = center2;
      result.radius = radius;
      return result;
    }
    return new BoundingSphere2(center2, radius);
  }
  function createObbFromRegion(region) {
    const [west, south, east, north, minHeight, maxHeight] = region;
    const northWest = Ellipsoid.WGS84.cartographicToCartesian([degrees2(west), degrees2(north), minHeight], scratchNorthWest);
    const southEast = Ellipsoid.WGS84.cartographicToCartesian([degrees2(east), degrees2(south), maxHeight], scratchSouthEast);
    const centerInCartesian = new Vector33().addVectors(northWest, southEast).multiplyByScalar(0.5);
    Ellipsoid.WGS84.cartesianToCartographic(centerInCartesian, scratchCenter);
    Ellipsoid.WGS84.cartographicToCartesian([degrees2(east), scratchCenter[1], scratchCenter[2]], scratchXAxis);
    Ellipsoid.WGS84.cartographicToCartesian([scratchCenter[0], degrees2(north), scratchCenter[2]], scratchYAxis);
    Ellipsoid.WGS84.cartographicToCartesian([scratchCenter[0], scratchCenter[1], maxHeight], scratchZAxis);
    return createBox([
      ...centerInCartesian,
      ...scratchXAxis.subtract(centerInCartesian),
      ...scratchYAxis.subtract(centerInCartesian),
      ...scratchZAxis.subtract(centerInCartesian)
    ], new Matrix42());
  }
  function orientedBoundingBoxToCartographicBounds(boundingVolume) {
    const result = emptyCartographicBounds();
    const { halfAxes } = boundingVolume;
    const xAxis = new Vector33(halfAxes.getColumn(0));
    const yAxis = new Vector33(halfAxes.getColumn(1));
    const zAxis = new Vector33(halfAxes.getColumn(2));
    for (let x4 = 0; x4 < 2; x4++) {
      for (let y5 = 0; y5 < 2; y5++) {
        for (let z4 = 0; z4 < 2; z4++) {
          scratchPoint.copy(boundingVolume.center);
          scratchPoint.add(xAxis);
          scratchPoint.add(yAxis);
          scratchPoint.add(zAxis);
          addToCartographicBounds(result, scratchPoint);
          zAxis.negate();
        }
        yAxis.negate();
      }
      xAxis.negate();
    }
    return result;
  }
  function boundingSphereToCartographicBounds(boundingVolume) {
    const result = emptyCartographicBounds();
    const { center: center2, radius } = boundingVolume;
    const point = Ellipsoid.WGS84.scaleToGeodeticSurface(center2, scratchPoint);
    let zAxis;
    if (point) {
      zAxis = Ellipsoid.WGS84.geodeticSurfaceNormal(point);
    } else {
      zAxis = new Vector33(0, 0, 1);
    }
    let xAxis = new Vector33(zAxis[2], -zAxis[1], 0);
    if (xAxis.len() > 0) {
      xAxis.normalize();
    } else {
      xAxis = new Vector33(0, 1, 0);
    }
    const yAxis = xAxis.clone().cross(zAxis);
    for (const axis of [xAxis, yAxis, zAxis]) {
      scratchScale.copy(axis).scale(radius);
      for (let dir = 0; dir < 2; dir++) {
        scratchPoint.copy(center2);
        scratchPoint.add(scratchScale);
        addToCartographicBounds(result, scratchPoint);
        scratchScale.negate();
      }
    }
    return result;
  }
  function emptyCartographicBounds() {
    return [
      [Infinity, Infinity, Infinity],
      [-Infinity, -Infinity, -Infinity]
    ];
  }
  function addToCartographicBounds(target2, cartesian) {
    Ellipsoid.WGS84.cartesianToCartographic(cartesian, scratchPoint);
    target2[0][0] = Math.min(target2[0][0], scratchPoint[0]);
    target2[0][1] = Math.min(target2[0][1], scratchPoint[1]);
    target2[0][2] = Math.min(target2[0][2], scratchPoint[2]);
    target2[1][0] = Math.max(target2[1][0], scratchPoint[0]);
    target2[1][1] = Math.max(target2[1][1], scratchPoint[1]);
    target2[1][2] = Math.max(target2[1][2], scratchPoint[2]);
  }

  // ../../node_modules/@loaders.gl/tiles/dist/tileset/helpers/tiles-3d-lod.js
  var scratchPositionNormal = new Vector33();
  var scratchCartographic = new Vector33();
  var scratchMatrix4 = new Matrix42();
  var scratchCenter2 = new Vector33();
  var scratchPosition5 = new Vector33();
  var scratchDirection = new Vector33();
  function fog(distanceToCamera, density) {
    const scalar = distanceToCamera * density;
    return 1 - Math.exp(-(scalar * scalar));
  }
  function getDynamicScreenSpaceError(tileset, distanceToCamera) {
    if (tileset.dynamicScreenSpaceError && tileset.dynamicScreenSpaceErrorComputedDensity) {
      const density = tileset.dynamicScreenSpaceErrorComputedDensity;
      const factor = tileset.dynamicScreenSpaceErrorFactor;
      const dynamicError = fog(distanceToCamera, density) * factor;
      return dynamicError;
    }
    return 0;
  }
  function getTiles3DScreenSpaceError(tile, frameState, useParentLodMetric) {
    const tileset = tile.tileset;
    const parentLodMetricValue = tile.parent && tile.parent.lodMetricValue || tile.lodMetricValue;
    const lodMetricValue = useParentLodMetric ? parentLodMetricValue : tile.lodMetricValue;
    if (lodMetricValue === 0) {
      return 0;
    }
    const distance7 = Math.max(tile._distanceToCamera, 1e-7);
    const { height, sseDenominator } = frameState;
    const { viewDistanceScale } = tileset.options;
    let error = lodMetricValue * height * (viewDistanceScale || 1) / (distance7 * sseDenominator);
    error -= getDynamicScreenSpaceError(tileset, distance7);
    return error;
  }

  // ../../node_modules/@loaders.gl/tiles/dist/tileset/helpers/i3s-lod.js
  var cameraPositionCartesian = new Vector33();
  var toEye = new Vector33();
  var cameraPositionEnu = new Vector33();
  var extraVertexEnu = new Vector33();
  var projectedOriginVector = new Vector33();
  var enuToCartesianMatrix = new Matrix42();
  var cartesianToEnuMatrix = new Matrix42();
  function getLodStatus(tile, frameState) {
    if (tile.lodMetricValue === 0 || isNaN(tile.lodMetricValue)) {
      return "DIG";
    }
    const screenSize = 2 * getProjectedRadius(tile, frameState);
    if (screenSize < 2) {
      return "OUT";
    }
    if (!tile.header.children || screenSize <= tile.lodMetricValue) {
      return "DRAW";
    } else if (tile.header.children) {
      return "DIG";
    }
    return "OUT";
  }
  function getProjectedRadius(tile, frameState) {
    const { topDownViewport: viewport } = frameState;
    const mbsLat = tile.header.mbs[1];
    const mbsLon = tile.header.mbs[0];
    const mbsZ = tile.header.mbs[2];
    const mbsR = tile.header.mbs[3];
    const mbsCenterCartesian = [...tile.boundingVolume.center];
    const cameraPositionCartographic = viewport.unprojectPosition(viewport.cameraPosition);
    Ellipsoid.WGS84.cartographicToCartesian(cameraPositionCartographic, cameraPositionCartesian);
    toEye.copy(cameraPositionCartesian).subtract(mbsCenterCartesian).normalize();
    Ellipsoid.WGS84.eastNorthUpToFixedFrame(mbsCenterCartesian, enuToCartesianMatrix);
    cartesianToEnuMatrix.copy(enuToCartesianMatrix).invert();
    cameraPositionEnu.copy(cameraPositionCartesian).transform(cartesianToEnuMatrix);
    const projection = Math.sqrt(cameraPositionEnu[0] * cameraPositionEnu[0] + cameraPositionEnu[1] * cameraPositionEnu[1]);
    const extraZ = projection * projection / cameraPositionEnu[2];
    extraVertexEnu.copy([cameraPositionEnu[0], cameraPositionEnu[1], extraZ]);
    const extraVertexCartesian = extraVertexEnu.transform(enuToCartesianMatrix);
    const extraVectorCartesian = extraVertexCartesian.subtract(mbsCenterCartesian).normalize();
    const radiusVector = toEye.cross(extraVectorCartesian).normalize().scale(mbsR);
    const sphereMbsBorderVertexCartesian = radiusVector.add(mbsCenterCartesian);
    const sphereMbsBorderVertexCartographic = Ellipsoid.WGS84.cartesianToCartographic(sphereMbsBorderVertexCartesian);
    const projectedOrigin = viewport.project([mbsLon, mbsLat, mbsZ]);
    const projectedMbsBorderVertex = viewport.project(sphereMbsBorderVertexCartographic);
    const projectedRadius = projectedOriginVector.copy(projectedOrigin).subtract(projectedMbsBorderVertex).magnitude();
    return projectedRadius;
  }

  // ../../node_modules/@loaders.gl/tiles/dist/tileset/helpers/3d-tiles-options.js
  function get3dTilesOptions(tileset) {
    return {
      assetGltfUpAxis: tileset.asset && tileset.asset.gltfUpAxis || "Y"
    };
  }

  // ../../node_modules/@loaders.gl/tiles/dist/utils/managed-array.js
  var ManagedArray = class {
    _map = /* @__PURE__ */ new Map();
    _array;
    _length;
    constructor(length17 = 0) {
      this._array = new Array(length17);
      this._length = length17;
    }
    /**
     * Gets or sets the length of the array.
     * If the set length is greater than the length of the internal array, the internal array is resized.
     *
     * @memberof ManagedArray.prototype
     * @type Number
     */
    get length() {
      return this._length;
    }
    set length(length17) {
      this._length = length17;
      if (length17 > this._array.length) {
        this._array.length = length17;
      }
    }
    /**
     * Gets the internal array.
     *
     * @memberof ManagedArray.prototype
     * @type Array
     * @readonly
     */
    get values() {
      return this._array;
    }
    /**
     * Gets the element at an index.
     *
     * @param {Number} index The index to get.
     */
    get(index) {
      assert2(index < this._array.length);
      return this._array[index];
    }
    /**
     * Sets the element at an index. Resizes the array if index is greater than the length of the array.
     *
     * @param {Number} index The index to set.
     * @param {*} element The element to set at index.
     */
    set(index, element) {
      assert2(index >= 0);
      if (index >= this.length) {
        this.length = index + 1;
      }
      if (this._map.has(this._array[index])) {
        this._map.delete(this._array[index]);
      }
      this._array[index] = element;
      this._map.set(element, index);
    }
    delete(element) {
      const index = this._map.get(element);
      if (index >= 0) {
        this._array.splice(index, 1);
        this._map.delete(element);
        this.length--;
      }
    }
    /**
     * Returns the last element in the array without modifying the array.
     *
     * @returns {*} The last element in the array.
     */
    peek() {
      return this._array[this._length - 1];
    }
    /**
     * Push an element into the array.
     *
     * @param {*} element The element to push.
     */
    push(element) {
      if (!this._map.has(element)) {
        const index = this.length++;
        this._array[index] = element;
        this._map.set(element, index);
      }
    }
    /**
     * Pop an element from the array.
     *
     * @returns {*} The last element in the array.
     */
    pop() {
      const element = this._array[--this.length];
      this._map.delete(element);
      return element;
    }
    /**
     * Resize the internal array if length > _array.length.
     *
     * @param {Number} length The length.
     */
    reserve(length17) {
      assert2(length17 >= 0);
      if (length17 > this._array.length) {
        this._array.length = length17;
      }
    }
    /**
     * Resize the array.
     *
     * @param {Number} length The length.
     */
    resize(length17) {
      assert2(length17 >= 0);
      this.length = length17;
    }
    /**
     * Trim the internal array to the specified length. Defaults to the current length.
     *
     * @param {Number} [length] The length.
     */
    trim(length17) {
      if (length17 === null || length17 === void 0) {
        length17 = this.length;
      }
      this._array.length = length17;
    }
    reset() {
      this._array = [];
      this._map = /* @__PURE__ */ new Map();
      this._length = 0;
    }
    find(target2) {
      return this._map.has(target2);
    }
  };

  // ../../node_modules/@loaders.gl/tiles/dist/tileset/tileset-traverser.js
  var DEFAULT_PROPS4 = {
    loadSiblings: false,
    skipLevelOfDetail: false,
    updateTransforms: true,
    onTraversalEnd: () => {
    },
    viewportTraversersMap: {},
    basePath: ""
  };
  var TilesetTraverser = class {
    options;
    // fulfill in traverse call
    root = null;
    // tiles should be rendered
    selectedTiles = {};
    // tiles should be loaded from server
    requestedTiles = {};
    // tiles does not have render content
    emptyTiles = {};
    lastUpdate = new Date().getTime();
    updateDebounceTime = 1e3;
    /** temporary storage to hold the traversed tiles during a traversal */
    _traversalStack = new ManagedArray();
    _emptyTraversalStack = new ManagedArray();
    /** set in every traverse cycle */
    _frameNumber = null;
    // RESULT
    traversalFinished(frameState) {
      return true;
    }
    // TODO nested props
    constructor(options) {
      this.options = { ...DEFAULT_PROPS4, ...options };
    }
    // tiles should be visible
    traverse(root, frameState, options) {
      this.root = root;
      this.options = { ...this.options, ...options };
      this.reset();
      this.updateTile(root, frameState);
      this._frameNumber = frameState.frameNumber;
      this.executeTraversal(root, frameState);
    }
    reset() {
      this.requestedTiles = {};
      this.selectedTiles = {};
      this.emptyTiles = {};
      this._traversalStack.reset();
      this._emptyTraversalStack.reset();
    }
    /**
     * Execute traverse
     * Depth-first traversal that traverses all visible tiles and marks tiles for selection.
     * If skipLevelOfDetail is off then a tile does not refine until all children are loaded.
     * This is the traditional replacement refinement approach and is called the base traversal.
     * Tiles that have a greater screen space error than the base screen space error are part of the base traversal,
     * all other tiles are part of the skip traversal. The skip traversal allows for skipping levels of the tree
     * and rendering children and parent tiles simultaneously.
     */
    /* eslint-disable-next-line complexity, max-statements */
    executeTraversal(root, frameState) {
      const stack2 = this._traversalStack;
      root._selectionDepth = 1;
      stack2.push(root);
      while (stack2.length > 0) {
        const tile = stack2.pop();
        let shouldRefine = false;
        if (this.canTraverse(tile, frameState)) {
          this.updateChildTiles(tile, frameState);
          shouldRefine = this.updateAndPushChildren(tile, frameState, stack2, tile.hasRenderContent ? tile._selectionDepth + 1 : tile._selectionDepth);
        }
        const parent = tile.parent;
        const parentRefines = Boolean(!parent || parent._shouldRefine);
        const stoppedRefining = !shouldRefine;
        if (!tile.hasRenderContent) {
          this.emptyTiles[tile.id] = tile;
          this.loadTile(tile, frameState);
          if (stoppedRefining) {
            this.selectTile(tile, frameState);
          }
        } else if (tile.refine === TILE_REFINEMENT.ADD) {
          this.loadTile(tile, frameState);
          this.selectTile(tile, frameState);
        } else if (tile.refine === TILE_REFINEMENT.REPLACE) {
          this.loadTile(tile, frameState);
          if (stoppedRefining) {
            this.selectTile(tile, frameState);
          }
        }
        this.touchTile(tile, frameState);
        tile._shouldRefine = shouldRefine && parentRefines;
      }
      const newTime = new Date().getTime();
      if (this.traversalFinished(frameState) || newTime - this.lastUpdate > this.updateDebounceTime) {
        this.lastUpdate = newTime;
        this.options.onTraversalEnd(frameState);
      }
    }
    updateChildTiles(tile, frameState) {
      const children = tile.children;
      for (const child of children) {
        this.updateTile(child, frameState);
      }
    }
    /* eslint-disable complexity, max-statements */
    updateAndPushChildren(tile, frameState, stack2, depth) {
      const { loadSiblings, skipLevelOfDetail } = this.options;
      const children = tile.children;
      children.sort(this.compareDistanceToCamera.bind(this));
      const checkRefines = tile.refine === TILE_REFINEMENT.REPLACE && tile.hasRenderContent && !skipLevelOfDetail;
      let hasVisibleChild = false;
      let refines = true;
      for (const child of children) {
        child._selectionDepth = depth;
        if (child.isVisibleAndInRequestVolume) {
          if (stack2.find(child)) {
            stack2.delete(child);
          }
          stack2.push(child);
          hasVisibleChild = true;
        } else if (checkRefines || loadSiblings) {
          this.loadTile(child, frameState);
          this.touchTile(child, frameState);
        }
        if (checkRefines) {
          let childRefines;
          if (!child._inRequestVolume) {
            childRefines = false;
          } else if (!child.hasRenderContent) {
            childRefines = this.executeEmptyTraversal(child, frameState);
          } else {
            childRefines = child.contentAvailable;
          }
          refines = refines && childRefines;
          if (!refines) {
            return false;
          }
        }
      }
      if (!hasVisibleChild) {
        refines = false;
      }
      return refines;
    }
    /* eslint-enable complexity, max-statements */
    updateTile(tile, frameState) {
      this.updateTileVisibility(tile, frameState);
    }
    // tile to render in the browser
    selectTile(tile, frameState) {
      if (this.shouldSelectTile(tile)) {
        tile._selectedFrame = frameState.frameNumber;
        this.selectedTiles[tile.id] = tile;
      }
    }
    // tile to load from server
    loadTile(tile, frameState) {
      if (this.shouldLoadTile(tile)) {
        tile._requestedFrame = frameState.frameNumber;
        tile._priority = tile._getPriority();
        this.requestedTiles[tile.id] = tile;
      }
    }
    // cache tile
    touchTile(tile, frameState) {
      tile.tileset._cache.touch(tile);
      tile._touchedFrame = frameState.frameNumber;
    }
    // tile should be visible
    // tile should have children
    // tile LoD (level of detail) is not sufficient under current viewport
    canTraverse(tile, frameState, useParentMetric = false, ignoreVisibility = false) {
      if (!tile.hasChildren) {
        return false;
      }
      if (tile.hasTilesetContent) {
        return !tile.contentExpired;
      }
      if (!ignoreVisibility && !tile.isVisibleAndInRequestVolume) {
        return false;
      }
      return this.shouldRefine(tile, frameState, useParentMetric);
    }
    shouldLoadTile(tile) {
      return tile.hasUnloadedContent || tile.contentExpired;
    }
    shouldSelectTile(tile) {
      return tile.contentAvailable && !this.options.skipLevelOfDetail;
    }
    /** Decide if tile LoD (level of detail) is not sufficient under current viewport */
    shouldRefine(tile, frameState, useParentMetric = false) {
      let screenSpaceError = tile._screenSpaceError;
      if (useParentMetric) {
        screenSpaceError = tile.getScreenSpaceError(frameState, true);
      }
      return screenSpaceError > tile.tileset.memoryAdjustedScreenSpaceError;
    }
    updateTileVisibility(tile, frameState) {
      const viewportIds = [];
      if (this.options.viewportTraversersMap) {
        for (const key in this.options.viewportTraversersMap) {
          const value = this.options.viewportTraversersMap[key];
          if (value === frameState.viewport.id) {
            viewportIds.push(key);
          }
        }
      } else {
        viewportIds.push(frameState.viewport.id);
      }
      tile.updateVisibility(frameState, viewportIds);
    }
    // UTILITIES
    compareDistanceToCamera(b4, a6) {
      return b4._distanceToCamera - a6._distanceToCamera;
    }
    anyChildrenVisible(tile, frameState) {
      let anyVisible = false;
      for (const child of tile.children) {
        child.updateVisibility(frameState);
        anyVisible = anyVisible || child.isVisibleAndInRequestVolume;
      }
      return anyVisible;
    }
    // Depth-first traversal that checks if all nearest descendants with content are loaded.
    // Ignores visibility.
    executeEmptyTraversal(root, frameState) {
      let allDescendantsLoaded = true;
      const stack2 = this._emptyTraversalStack;
      stack2.push(root);
      while (stack2.length > 0) {
        const tile = stack2.pop();
        const traverse = !tile.hasRenderContent && this.canTraverse(tile, frameState, false, false);
        const emptyLeaf = !tile.hasRenderContent && tile.children.length === 0;
        if (!traverse && !tile.contentAvailable && !emptyLeaf) {
          allDescendantsLoaded = false;
        }
        this.updateTile(tile, frameState);
        if (!tile.isVisibleAndInRequestVolume) {
          this.loadTile(tile, frameState);
          this.touchTile(tile, frameState);
        }
        if (traverse) {
          const children = tile.children;
          for (const child of children) {
            stack2.push(child);
          }
        }
      }
      return allDescendantsLoaded;
    }
  };

  // ../../node_modules/@loaders.gl/tiles/dist/tileset/tile-3d.js
  var scratchVector15 = new Vector33();
  function defined2(x4) {
    return x4 !== void 0 && x4 !== null;
  }
  var Tile3D = class {
    tileset;
    header;
    id;
    url;
    parent;
    /* Specifies the type of refine that is used when traversing this tile for rendering. */
    refine;
    type;
    contentUrl;
    /** Different refinement algorithms used by I3S and 3D tiles */
    lodMetricType = "geometricError";
    /** The error, in meters, introduced if this tile is rendered and its children are not. */
    lodMetricValue = 0;
    /** @todo math.gl is not exporting BoundingVolume base type? */
    boundingVolume = null;
    /**
     * The tile's content.  This represents the actual tile's payload,
     * not the content's metadata in the tileset JSON file.
     */
    content = null;
    contentState = TILE_CONTENT_STATE.UNLOADED;
    gpuMemoryUsageInBytes = 0;
    /** The tile's children - an array of Tile3D objects. */
    children = [];
    depth = 0;
    viewportIds = [];
    transform = new Matrix42();
    extensions = null;
    /** TODO Cesium 3d tiles specific */
    implicitTiling = null;
    /** Container to store application specific data */
    userData = {};
    computedTransform;
    hasEmptyContent = false;
    hasTilesetContent = false;
    traverser = new TilesetTraverser({});
    /** Used by TilesetCache */
    _cacheNode = null;
    _frameNumber = null;
    // TODO Cesium 3d tiles specific
    _expireDate = null;
    _expiredContent = null;
    _boundingBox = void 0;
    /** updated every frame for tree traversal and rendering optimizations: */
    _distanceToCamera = 0;
    _screenSpaceError = 0;
    _visibilityPlaneMask;
    _visible = void 0;
    _contentBoundingVolume;
    _viewerRequestVolume;
    _initialTransform = new Matrix42();
    // Used by traverser, cannot be marked private
    _priority = 0;
    _selectedFrame = 0;
    _requestedFrame = 0;
    _selectionDepth = 0;
    _touchedFrame = 0;
    _centerZDepth = 0;
    _shouldRefine = false;
    _stackLength = 0;
    _visitedFrame = 0;
    _inRequestVolume = false;
    _lodJudge = null;
    // TODO i3s specific, needs to remove
    /**
     * @constructs
     * Create a Tile3D instance
     * @param tileset - Tileset3D instance
     * @param header - tile header - JSON loaded from a dataset
     * @param parentHeader - parent Tile3D instance
     * @param extendedId - optional ID to separate copies of a tile for different viewports.
     *    const extendedId = `${tile.id}-${frameState.viewport.id}`;
     */
    // eslint-disable-next-line max-statements
    constructor(tileset, header, parentHeader, extendedId = "") {
      this.header = header;
      this.tileset = tileset;
      this.id = extendedId || header.id;
      this.url = header.url;
      this.parent = parentHeader;
      this.refine = this._getRefine(header.refine);
      this.type = header.type;
      this.contentUrl = header.contentUrl;
      this._initializeLodMetric(header);
      this._initializeTransforms(header);
      this._initializeBoundingVolumes(header);
      this._initializeContent(header);
      this._initializeRenderingState(header);
      Object.seal(this);
    }
    destroy() {
      this.header = null;
    }
    isDestroyed() {
      return this.header === null;
    }
    get selected() {
      return this._selectedFrame === this.tileset._frameNumber;
    }
    get isVisible() {
      return this._visible;
    }
    get isVisibleAndInRequestVolume() {
      return this._visible && this._inRequestVolume;
    }
    /** Returns true if tile is not an empty tile and not an external tileset */
    get hasRenderContent() {
      return !this.hasEmptyContent && !this.hasTilesetContent;
    }
    /** Returns true if tile has children */
    get hasChildren() {
      return this.children.length > 0 || this.header.children && this.header.children.length > 0;
    }
    /**
     * Determines if the tile's content is ready. This is automatically `true` for
     * tiles with empty content.
     */
    get contentReady() {
      return this.contentState === TILE_CONTENT_STATE.READY || this.hasEmptyContent;
    }
    /**
     * Determines if the tile has available content to render.  `true` if the tile's
     * content is ready or if it has expired content this renders while new content loads; otherwise,
     */
    get contentAvailable() {
      return Boolean(this.contentReady && this.hasRenderContent || this._expiredContent && !this.contentFailed);
    }
    /** Returns true if tile has renderable content but it's unloaded */
    get hasUnloadedContent() {
      return this.hasRenderContent && this.contentUnloaded;
    }
    /**
     * Determines if the tile's content has not be requested. `true` if tile's
     * content has not be requested; otherwise, `false`.
     */
    get contentUnloaded() {
      return this.contentState === TILE_CONTENT_STATE.UNLOADED;
    }
    /**
     * Determines if the tile's content is expired. `true` if tile's
     * content is expired; otherwise, `false`.
     */
    get contentExpired() {
      return this.contentState === TILE_CONTENT_STATE.EXPIRED;
    }
    // Determines if the tile's content failed to load.  `true` if the tile's
    // content failed to load; otherwise, `false`.
    get contentFailed() {
      return this.contentState === TILE_CONTENT_STATE.FAILED;
    }
    /**
     * Distance from the tile's bounding volume center to the camera
     */
    get distanceToCamera() {
      return this._distanceToCamera;
    }
    /**
     * Screen space error for LOD selection
     */
    get screenSpaceError() {
      return this._screenSpaceError;
    }
    /**
     * Get bounding box in cartographic coordinates
     * @returns [min, max] each in [longitude, latitude, altitude]
     */
    get boundingBox() {
      if (!this._boundingBox) {
        this._boundingBox = getCartographicBounds(this.header.boundingVolume, this.boundingVolume);
      }
      return this._boundingBox;
    }
    /** Get the tile's screen space error. */
    getScreenSpaceError(frameState, useParentLodMetric) {
      switch (this.tileset.type) {
        case TILESET_TYPE.I3S:
          return getProjectedRadius(this, frameState);
        case TILESET_TYPE.TILES3D:
          return getTiles3DScreenSpaceError(this, frameState, useParentLodMetric);
        default:
          throw new Error("Unsupported tileset type");
      }
    }
    /**
     * Make tile unselected than means it won't be shown
     * but it can be still loaded in memory
     */
    unselect() {
      this._selectedFrame = 0;
    }
    /**
     * Memory usage of tile on GPU
     */
    _getGpuMemoryUsageInBytes() {
      return this.content.gpuMemoryUsageInBytes || this.content.byteLength || 0;
    }
    /*
     * If skipLevelOfDetail is off try to load child tiles as soon as possible so that their parent can refine sooner.
     * Tiles are prioritized by screen space error.
     */
    // eslint-disable-next-line complexity
    _getPriority() {
      const traverser = this.tileset._traverser;
      const { skipLevelOfDetail } = traverser.options;
      const maySkipTile = this.refine === TILE_REFINEMENT.ADD || skipLevelOfDetail;
      if (maySkipTile && !this.isVisible && this._visible !== void 0) {
        return -1;
      }
      if (this.tileset._frameNumber - this._touchedFrame >= 1) {
        return -1;
      }
      if (this.contentState === TILE_CONTENT_STATE.UNLOADED) {
        return -1;
      }
      const parent = this.parent;
      const useParentScreenSpaceError = parent && (!maySkipTile || this._screenSpaceError === 0 || parent.hasTilesetContent);
      const screenSpaceError = useParentScreenSpaceError ? parent._screenSpaceError : this._screenSpaceError;
      const rootScreenSpaceError = traverser.root ? traverser.root._screenSpaceError : 0;
      return Math.max(rootScreenSpaceError - screenSpaceError, 0);
    }
    /**
     *  Requests the tile's content.
     * The request may not be made if the Request Scheduler can't prioritize it.
     */
    // eslint-disable-next-line max-statements, complexity
    async loadContent() {
      if (this.hasEmptyContent) {
        return false;
      }
      if (this.content) {
        return true;
      }
      const expired = this.contentExpired;
      if (expired) {
        this._expireDate = null;
      }
      this.contentState = TILE_CONTENT_STATE.LOADING;
      const requestToken = await this.tileset._requestScheduler.scheduleRequest(this.id, this._getPriority.bind(this));
      if (!requestToken) {
        this.contentState = TILE_CONTENT_STATE.UNLOADED;
        return false;
      }
      try {
        const contentUrl = this.tileset.getTileUrl(this.contentUrl);
        const loader = this.tileset.loader;
        const options = {
          ...this.tileset.loadOptions,
          [loader.id]: {
            // @ts-expect-error
            ...this.tileset.loadOptions[loader.id],
            isTileset: this.type === "json",
            ...this._getLoaderSpecificOptions(loader.id)
          }
        };
        this.content = await load(contentUrl, loader, options);
        if (this.tileset.options.contentLoader) {
          await this.tileset.options.contentLoader(this);
        }
        if (this._isTileset()) {
          this.tileset._initializeTileHeaders(this.content, this);
        }
        this.contentState = TILE_CONTENT_STATE.READY;
        this._onContentLoaded();
        return true;
      } catch (error) {
        this.contentState = TILE_CONTENT_STATE.FAILED;
        throw error;
      } finally {
        requestToken.done();
      }
    }
    // Unloads the tile's content.
    unloadContent() {
      if (this.content && this.content.destroy) {
        this.content.destroy();
      }
      this.content = null;
      if (this.header.content && this.header.content.destroy) {
        this.header.content.destroy();
      }
      this.header.content = null;
      this.contentState = TILE_CONTENT_STATE.UNLOADED;
      return true;
    }
    /**
     * Update the tile's visibility
     * @param {Object} frameState - frame state for tile culling
     * @param {string[]} viewportIds - a list of viewport ids that show this tile
     * @return {void}
     */
    updateVisibility(frameState, viewportIds) {
      if (this._frameNumber === frameState.frameNumber) {
        return;
      }
      const parent = this.parent;
      const parentVisibilityPlaneMask = parent ? parent._visibilityPlaneMask : CullingVolume2.MASK_INDETERMINATE;
      if (this.tileset._traverser.options.updateTransforms) {
        const parentTransform = parent ? parent.computedTransform : this.tileset.modelMatrix;
        this._updateTransform(parentTransform);
      }
      this._distanceToCamera = this.distanceToTile(frameState);
      this._screenSpaceError = this.getScreenSpaceError(frameState, false);
      this._visibilityPlaneMask = this.visibility(frameState, parentVisibilityPlaneMask);
      this._visible = this._visibilityPlaneMask !== CullingVolume2.MASK_OUTSIDE;
      this._inRequestVolume = this.insideViewerRequestVolume(frameState);
      this._frameNumber = frameState.frameNumber;
      this.viewportIds = viewportIds;
    }
    // Determines whether the tile's bounding volume intersects the culling volume.
    // @param {FrameState} frameState The frame state.
    // @param {Number} parentVisibilityPlaneMask The parent's plane mask to speed up the visibility check.
    // @returns {Number} A plane mask as described above in {@link CullingVolume#computeVisibilityWithPlaneMask}.
    visibility(frameState, parentVisibilityPlaneMask) {
      const { cullingVolume: cullingVolume2 } = frameState;
      const { boundingVolume } = this;
      return cullingVolume2.computeVisibilityWithPlaneMask(boundingVolume, parentVisibilityPlaneMask);
    }
    // Assuming the tile's bounding volume intersects the culling volume, determines
    // whether the tile's content's bounding volume intersects the culling volume.
    // @param {FrameState} frameState The frame state.
    // @returns {Intersect} The result of the intersection: the tile's content is completely outside, completely inside, or intersecting the culling volume.
    contentVisibility() {
      return true;
    }
    /**
     * Computes the (potentially approximate) distance from the closest point of the tile's bounding volume to the camera.
     * @param frameState The frame state.
     * @returns {Number} The distance, in meters, or zero if the camera is inside the bounding volume.
     */
    distanceToTile(frameState) {
      const boundingVolume = this.boundingVolume;
      return Math.sqrt(Math.max(boundingVolume.distanceSquaredTo(frameState.camera.position), 0));
    }
    /**
     * Computes the tile's camera-space z-depth.
     * @param frameState The frame state.
     * @returns The distance, in meters.
     */
    cameraSpaceZDepth({ camera }) {
      const boundingVolume = this.boundingVolume;
      scratchVector15.subVectors(boundingVolume.center, camera.position);
      return camera.direction.dot(scratchVector15);
    }
    /**
     * Checks if the camera is inside the viewer request volume.
     * @param {FrameState} frameState The frame state.
     * @returns {Boolean} Whether the camera is inside the volume.
     */
    insideViewerRequestVolume(frameState) {
      const viewerRequestVolume = this._viewerRequestVolume;
      return !viewerRequestVolume || viewerRequestVolume.distanceSquaredTo(frameState.camera.position) <= 0;
    }
    // TODO Cesium specific
    // Update whether the tile has expired.
    updateExpiration() {
      if (defined2(this._expireDate) && this.contentReady && !this.hasEmptyContent) {
        const now = Date.now();
        if (Date.lessThan(this._expireDate, now)) {
          this.contentState = TILE_CONTENT_STATE.EXPIRED;
          this._expiredContent = this.content;
        }
      }
    }
    get extras() {
      return this.header.extras;
    }
    // INTERNAL METHODS
    _initializeLodMetric(header) {
      if ("lodMetricType" in header) {
        this.lodMetricType = header.lodMetricType;
      } else {
        this.lodMetricType = this.parent && this.parent.lodMetricType || this.tileset.lodMetricType;
        console.warn(`3D Tile: Required prop lodMetricType is undefined. Using parent lodMetricType`);
      }
      if ("lodMetricValue" in header) {
        this.lodMetricValue = header.lodMetricValue;
      } else {
        this.lodMetricValue = this.parent && this.parent.lodMetricValue || this.tileset.lodMetricValue;
        console.warn("3D Tile: Required prop lodMetricValue is undefined. Using parent lodMetricValue");
      }
    }
    _initializeTransforms(tileHeader) {
      this.transform = tileHeader.transform ? new Matrix42(tileHeader.transform) : new Matrix42();
      const parent = this.parent;
      const tileset = this.tileset;
      const parentTransform = parent && parent.computedTransform ? parent.computedTransform.clone() : tileset.modelMatrix.clone();
      this.computedTransform = new Matrix42(parentTransform).multiplyRight(this.transform);
      const parentInitialTransform = parent && parent._initialTransform ? parent._initialTransform.clone() : new Matrix42();
      this._initialTransform = new Matrix42(parentInitialTransform).multiplyRight(this.transform);
    }
    _initializeBoundingVolumes(tileHeader) {
      this._contentBoundingVolume = null;
      this._viewerRequestVolume = null;
      this._updateBoundingVolume(tileHeader);
    }
    _initializeContent(tileHeader) {
      this.content = { _tileset: this.tileset, _tile: this };
      this.hasEmptyContent = true;
      this.contentState = TILE_CONTENT_STATE.UNLOADED;
      this.hasTilesetContent = false;
      if (tileHeader.contentUrl) {
        this.content = null;
        this.hasEmptyContent = false;
      }
    }
    // TODO - remove anything not related to basic visibility detection
    _initializeRenderingState(header) {
      this.depth = header.level || (this.parent ? this.parent.depth + 1 : 0);
      this._shouldRefine = false;
      this._distanceToCamera = 0;
      this._centerZDepth = 0;
      this._screenSpaceError = 0;
      this._visibilityPlaneMask = CullingVolume2.MASK_INDETERMINATE;
      this._visible = void 0;
      this._inRequestVolume = false;
      this._stackLength = 0;
      this._selectionDepth = 0;
      this._frameNumber = 0;
      this._touchedFrame = 0;
      this._visitedFrame = 0;
      this._selectedFrame = 0;
      this._requestedFrame = 0;
      this._priority = 0;
    }
    _getRefine(refine) {
      return refine || this.parent && this.parent.refine || TILE_REFINEMENT.REPLACE;
    }
    _isTileset() {
      return this.contentUrl.indexOf(".json") !== -1;
    }
    _onContentLoaded() {
      switch (this.content && this.content.type) {
        case "vctr":
        case "geom":
          this.tileset._traverser.disableSkipLevelOfDetail = true;
          break;
        default:
      }
      if (this._isTileset()) {
        this.hasTilesetContent = true;
      } else {
        this.gpuMemoryUsageInBytes = this._getGpuMemoryUsageInBytes();
      }
    }
    _updateBoundingVolume(header) {
      this.boundingVolume = createBoundingVolume(header.boundingVolume, this.computedTransform, this.boundingVolume);
      const content = header.content;
      if (!content) {
        return;
      }
      if (content.boundingVolume) {
        this._contentBoundingVolume = createBoundingVolume(content.boundingVolume, this.computedTransform, this._contentBoundingVolume);
      }
      if (header.viewerRequestVolume) {
        this._viewerRequestVolume = createBoundingVolume(header.viewerRequestVolume, this.computedTransform, this._viewerRequestVolume);
      }
    }
    // Update the tile's transform. The transform is applied to the tile's bounding volumes.
    _updateTransform(parentTransform = new Matrix42()) {
      const computedTransform = parentTransform.clone().multiplyRight(this.transform);
      const didTransformChange = !computedTransform.equals(this.computedTransform);
      if (!didTransformChange) {
        return;
      }
      this.computedTransform = computedTransform;
      this._updateBoundingVolume(this.header);
    }
    // Get options which are applicable only for the particular loader
    _getLoaderSpecificOptions(loaderId) {
      switch (loaderId) {
        case "i3s":
          return {
            ...this.tileset.options.i3s,
            _tileOptions: {
              attributeUrls: this.header.attributeUrls,
              textureUrl: this.header.textureUrl,
              textureFormat: this.header.textureFormat,
              textureLoaderOptions: this.header.textureLoaderOptions,
              materialDefinition: this.header.materialDefinition,
              isDracoGeometry: this.header.isDracoGeometry,
              mbs: this.header.mbs
            },
            _tilesetOptions: {
              store: this.tileset.tileset.store,
              attributeStorageInfo: this.tileset.tileset.attributeStorageInfo,
              fields: this.tileset.tileset.fields
            },
            isTileHeader: false
          };
        case "3d-tiles":
        case "cesium-ion":
        default:
          return get3dTilesOptions(this.tileset.tileset);
      }
    }
  };

  // ../../node_modules/@loaders.gl/tiles/dist/tileset/format-3d-tiles/tileset-3d-traverser.js
  var Tileset3DTraverser = class extends TilesetTraverser {
    compareDistanceToCamera(a6, b4) {
      return b4._distanceToCamera === 0 && a6._distanceToCamera === 0 ? b4._centerZDepth - a6._centerZDepth : b4._distanceToCamera - a6._distanceToCamera;
    }
    updateTileVisibility(tile, frameState) {
      super.updateTileVisibility(tile, frameState);
      if (!tile.isVisibleAndInRequestVolume) {
        return;
      }
      const hasChildren = tile.children.length > 0;
      if (tile.hasTilesetContent && hasChildren) {
        const firstChild = tile.children[0];
        this.updateTileVisibility(firstChild, frameState);
        tile._visible = firstChild._visible;
        return;
      }
      if (this.meetsScreenSpaceErrorEarly(tile, frameState)) {
        tile._visible = false;
        return;
      }
      const replace = tile.refine === TILE_REFINEMENT.REPLACE;
      const useOptimization = tile._optimChildrenWithinParent === TILE3D_OPTIMIZATION_HINT.USE_OPTIMIZATION;
      if (replace && useOptimization && hasChildren) {
        if (!this.anyChildrenVisible(tile, frameState)) {
          tile._visible = false;
          return;
        }
      }
    }
    meetsScreenSpaceErrorEarly(tile, frameState) {
      const { parent } = tile;
      if (!parent || parent.hasTilesetContent || parent.refine !== TILE_REFINEMENT.ADD) {
        return false;
      }
      return !this.shouldRefine(tile, frameState, true);
    }
  };

  // ../../node_modules/@loaders.gl/tiles/dist/tileset/format-i3s/i3s-pending-tiles-register.js
  var I3SPendingTilesRegister = class {
    frameNumberMap = /* @__PURE__ */ new Map();
    /**
     * Register a new pending tile header for the particular frameNumber
     * @param viewportId
     * @param frameNumber
     */
    register(viewportId, frameNumber) {
      const viewportMap = this.frameNumberMap.get(viewportId) || /* @__PURE__ */ new Map();
      const oldCount = viewportMap.get(frameNumber) || 0;
      viewportMap.set(frameNumber, oldCount + 1);
      this.frameNumberMap.set(viewportId, viewportMap);
    }
    /**
     * Deregister a pending tile header for the particular frameNumber
     * @param viewportId
     * @param frameNumber
     */
    deregister(viewportId, frameNumber) {
      const viewportMap = this.frameNumberMap.get(viewportId);
      if (!viewportMap) {
        return;
      }
      const oldCount = viewportMap.get(frameNumber) || 1;
      viewportMap.set(frameNumber, oldCount - 1);
    }
    /**
     * Check is there are no pending tile headers registered for the particular frameNumber
     * @param viewportId
     * @param frameNumber
     * @returns
     */
    isZero(viewportId, frameNumber) {
      const count3 = this.frameNumberMap.get(viewportId)?.get(frameNumber) || 0;
      return count3 === 0;
    }
  };

  // ../../node_modules/@loaders.gl/tiles/dist/tileset/format-i3s/i3s-tile-manager.js
  var STATUS = {
    REQUESTED: "REQUESTED",
    COMPLETED: "COMPLETED",
    ERROR: "ERROR"
  };
  var I3STileManager = class {
    _statusMap;
    pendingTilesRegister = new I3SPendingTilesRegister();
    constructor() {
      this._statusMap = {};
    }
    /**
     * Add request to map
     * @param request - node metadata request
     * @param key - unique key
     * @param callback - callback after request completed
     * @param frameState - frameState data
     */
    add(request, key, callback, frameState) {
      if (!this._statusMap[key]) {
        const { frameNumber, viewport: { id } } = frameState;
        this._statusMap[key] = { request, callback, key, frameState, status: STATUS.REQUESTED };
        this.pendingTilesRegister.register(id, frameNumber);
        request().then((data) => {
          this._statusMap[key].status = STATUS.COMPLETED;
          const { frameNumber: actualFrameNumber, viewport: { id: id2 } } = this._statusMap[key].frameState;
          this.pendingTilesRegister.deregister(id2, actualFrameNumber);
          this._statusMap[key].callback(data, frameState);
        }).catch((error) => {
          this._statusMap[key].status = STATUS.ERROR;
          const { frameNumber: actualFrameNumber, viewport: { id: id2 } } = this._statusMap[key].frameState;
          this.pendingTilesRegister.deregister(id2, actualFrameNumber);
          callback(error);
        });
      }
    }
    /**
     * Update request if it is still actual for the new frameState
     * @param key - unique key
     * @param frameState - frameState data
     */
    update(key, frameState) {
      if (this._statusMap[key]) {
        const { frameNumber, viewport: { id } } = this._statusMap[key].frameState;
        this.pendingTilesRegister.deregister(id, frameNumber);
        const { frameNumber: newFrameNumber, viewport: { id: newViewportId } } = frameState;
        this.pendingTilesRegister.register(newViewportId, newFrameNumber);
        this._statusMap[key].frameState = frameState;
      }
    }
    /**
     * Find request in the map
     * @param key - unique key
     * @returns
     */
    find(key) {
      return this._statusMap[key];
    }
    /**
     * Check it there are pending tile headers for the particular frameNumber
     * @param viewportId
     * @param frameNumber
     * @returns
     */
    hasPendingTiles(viewportId, frameNumber) {
      return !this.pendingTilesRegister.isZero(viewportId, frameNumber);
    }
  };

  // ../../node_modules/@loaders.gl/tiles/dist/tileset/format-i3s/i3s-tileset-traverser.js
  var I3STilesetTraverser = class extends TilesetTraverser {
    _tileManager;
    constructor(options) {
      super(options);
      this._tileManager = new I3STileManager();
    }
    /**
     * Check if there are no penging tile header requests,
     * that means the traversal is finished and we can call
     * following-up callbacks.
     */
    traversalFinished(frameState) {
      return !this._tileManager.hasPendingTiles(frameState.viewport.id, this._frameNumber || 0);
    }
    shouldRefine(tile, frameState) {
      tile._lodJudge = getLodStatus(tile, frameState);
      return tile._lodJudge === "DIG";
    }
    updateChildTiles(tile, frameState) {
      const children = tile.header.children || [];
      const childTiles = tile.children;
      const tileset = tile.tileset;
      for (const child of children) {
        const extendedId = `${child.id}-${frameState.viewport.id}`;
        const childTile = childTiles && childTiles.find((t5) => t5.id === extendedId);
        if (!childTile) {
          let request = () => this._loadTile(child.id, tileset);
          const cachedRequest = this._tileManager.find(extendedId);
          if (!cachedRequest) {
            if (tileset.tileset.nodePages) {
              request = () => tileset.tileset.nodePagesTile.formTileFromNodePages(child.id);
            }
            this._tileManager.add(request, extendedId, (header) => this._onTileLoad(header, tile, extendedId), frameState);
          } else {
            this._tileManager.update(extendedId, frameState);
          }
        } else if (childTile) {
          this.updateTile(childTile, frameState);
        }
      }
      return false;
    }
    async _loadTile(nodeId, tileset) {
      const { loader } = tileset;
      const nodeUrl = tileset.getTileUrl(`${tileset.url}/nodes/${nodeId}`);
      const options = {
        ...tileset.loadOptions,
        i3s: {
          ...tileset.loadOptions.i3s,
          isTileHeader: true
        }
      };
      return await load(nodeUrl, loader, options);
    }
    /**
     * The callback to init Tile3D instance after loading the tile JSON
     * @param {Object} header - the tile JSON from a dataset
     * @param {Tile3D} tile - the parent Tile3D instance
     * @param {string} extendedId - optional ID to separate copies of a tile for different viewports.
     *                              const extendedId = `${tile.id}-${frameState.viewport.id}`;
     * @return {void}
     */
    _onTileLoad(header, tile, extendedId) {
      const childTile = new Tile3D(tile.tileset, header, tile, extendedId);
      tile.children.push(childTile);
      const frameState = this._tileManager.find(childTile.id).frameState;
      this.updateTile(childTile, frameState);
      if (this._frameNumber === frameState.frameNumber && (this.traversalFinished(frameState) || new Date().getTime() - this.lastUpdate > this.updateDebounceTime)) {
        this.executeTraversal(childTile, frameState);
      }
    }
  };

  // ../../node_modules/@loaders.gl/tiles/dist/tileset/tileset-3d.js
  var DEFAULT_PROPS5 = {
    description: "",
    ellipsoid: Ellipsoid.WGS84,
    modelMatrix: new Matrix42(),
    throttleRequests: true,
    maxRequests: 64,
    /** Default memory values optimized for viewing mesh-based 3D Tiles on both mobile and desktop devices */
    maximumMemoryUsage: 32,
    memoryCacheOverflow: 1,
    maximumTilesSelected: 0,
    debounceTime: 0,
    onTileLoad: () => {
    },
    onTileUnload: () => {
    },
    onTileError: () => {
    },
    onTraversalComplete: (selectedTiles) => selectedTiles,
    contentLoader: void 0,
    viewDistanceScale: 1,
    maximumScreenSpaceError: 8,
    memoryAdjustedScreenSpaceError: false,
    loadTiles: true,
    updateTransforms: true,
    viewportTraversersMap: null,
    loadOptions: { fetch: {} },
    attributions: [],
    basePath: "",
    i3s: {}
  };
  var TILES_TOTAL = "Tiles In Tileset(s)";
  var TILES_IN_MEMORY = "Tiles In Memory";
  var TILES_IN_VIEW = "Tiles In View";
  var TILES_RENDERABLE = "Tiles To Render";
  var TILES_LOADED = "Tiles Loaded";
  var TILES_LOADING = "Tiles Loading";
  var TILES_UNLOADED = "Tiles Unloaded";
  var TILES_LOAD_FAILED = "Failed Tile Loads";
  var POINTS_COUNT = "Points/Vertices";
  var TILES_GPU_MEMORY = "Tile Memory Use";
  var MAXIMUM_SSE = "Maximum Screen Space Error";
  var Tileset3D = class {
    // props: Tileset3DProps;
    options;
    loadOptions;
    type;
    tileset;
    loader;
    url;
    basePath;
    modelMatrix;
    ellipsoid;
    lodMetricType;
    lodMetricValue;
    refine;
    root = null;
    roots = {};
    /** @todo any->unknown */
    asset = {};
    // Metadata for the entire tileset
    description = "";
    properties;
    extras = null;
    attributions = {};
    credits = {};
    stats;
    /** flags that contain information about data types in nested tiles */
    contentFormats = { draco: false, meshopt: false, dds: false, ktx2: false };
    // view props
    cartographicCenter = null;
    cartesianCenter = null;
    zoom = 1;
    boundingVolume = null;
    /** Updated based on the camera position and direction */
    dynamicScreenSpaceErrorComputedDensity = 0;
    // METRICS
    /**
     * The maximum amount of GPU memory (in MB) that may be used to cache tiles
     * Tiles not in view are unloaded to enforce private
     */
    maximumMemoryUsage = 32;
    /** The total amount of GPU memory in bytes used by the tileset. */
    gpuMemoryUsageInBytes = 0;
    /**
     * If loading the level of detail required by maximumScreenSpaceError
     * results in the memory usage exceeding maximumMemoryUsage (GPU), level of detail refinement
     * will instead use this (larger) adjusted screen space error to achieve the
     * best possible visual quality within the available memory.
     */
    memoryAdjustedScreenSpaceError = 0;
    _cacheBytes = 0;
    _cacheOverflowBytes = 0;
    /** Update tracker. increase in each update cycle. */
    _frameNumber = 0;
    _queryParams = {};
    _extensionsUsed = [];
    _tiles = {};
    /** counter for tracking tiles requests */
    _pendingCount = 0;
    /** Hold traversal results */
    selectedTiles = [];
    // TRAVERSAL
    traverseCounter = 0;
    geometricError = 0;
    lastUpdatedVieports = null;
    _requestedTiles = [];
    _emptyTiles = [];
    frameStateData = {};
    _traverser;
    _cache = new TilesetCache();
    _requestScheduler;
    // Promise tracking
    updatePromise = null;
    tilesetInitializationPromise;
    /**
     * Create a new Tileset3D
     * @param json
     * @param props
     */
    // eslint-disable-next-line max-statements
    constructor(tileset, options) {
      this.options = { ...DEFAULT_PROPS5, ...options };
      this.tileset = tileset;
      this.loader = tileset.loader;
      this.type = tileset.type;
      this.url = tileset.url;
      this.basePath = tileset.basePath || path_exports.dirname(this.url);
      this.modelMatrix = this.options.modelMatrix;
      this.ellipsoid = this.options.ellipsoid;
      this.lodMetricType = tileset.lodMetricType;
      this.lodMetricValue = tileset.lodMetricValue;
      this.refine = tileset.root.refine;
      this.loadOptions = this.options.loadOptions || {};
      this._traverser = this._initializeTraverser();
      this._requestScheduler = new RequestScheduler({
        throttleRequests: this.options.throttleRequests,
        maxRequests: this.options.maxRequests
      });
      this.memoryAdjustedScreenSpaceError = this.options.maximumScreenSpaceError;
      this._cacheBytes = this.options.maximumMemoryUsage * 1024 * 1024;
      this._cacheOverflowBytes = this.options.memoryCacheOverflow * 1024 * 1024;
      this.stats = new Stats({ id: this.url });
      this._initializeStats();
      this.tilesetInitializationPromise = this._initializeTileSet(tileset);
    }
    /** Release resources */
    destroy() {
      this._destroy();
    }
    /** Is the tileset loaded (update needs to have been called at least once) */
    isLoaded() {
      return this._pendingCount === 0 && this._frameNumber !== 0 && this._requestedTiles.length === 0;
    }
    get tiles() {
      return Object.values(this._tiles);
    }
    get frameNumber() {
      return this._frameNumber;
    }
    get queryParams() {
      return new URLSearchParams(this._queryParams).toString();
    }
    setProps(props) {
      this.options = { ...this.options, ...props };
    }
    /** @deprecated */
    // setOptions(options: Tileset3DProps): void {
    //   this.options = {...this.options, ...options};
    // }
    /**
     * Return a loadable tile url for a specific tile subpath
     * @param tilePath a tile subpath
     */
    getTileUrl(tilePath) {
      const isDataUrl = tilePath.startsWith("data:");
      if (isDataUrl) {
        return tilePath;
      }
      let tileUrl = tilePath;
      if (this.queryParams.length) {
        tileUrl = `${tilePath}${tilePath.includes("?") ? "&" : "?"}${this.queryParams}`;
      }
      return tileUrl;
    }
    // TODO CESIUM specific
    hasExtension(extensionName) {
      return Boolean(this._extensionsUsed.indexOf(extensionName) > -1);
    }
    /**
     * Update visible tiles relying on a list of viewports
     * @param viewports - list of viewports
     * @deprecated
     */
    update(viewports = null) {
      this.tilesetInitializationPromise.then(() => {
        if (!viewports && this.lastUpdatedVieports) {
          viewports = this.lastUpdatedVieports;
        } else {
          this.lastUpdatedVieports = viewports;
        }
        if (viewports) {
          this.doUpdate(viewports);
        }
      });
    }
    /**
     * Update visible tiles relying on a list of viewports.
     * Do it with debounce delay to prevent update spam
     * @param viewports viewports
     * @returns Promise of new frameNumber
     */
    async selectTiles(viewports = null) {
      await this.tilesetInitializationPromise;
      if (viewports) {
        this.lastUpdatedVieports = viewports;
      }
      if (!this.updatePromise) {
        this.updatePromise = new Promise((resolve2) => {
          setTimeout(() => {
            if (this.lastUpdatedVieports) {
              this.doUpdate(this.lastUpdatedVieports);
            }
            resolve2(this._frameNumber);
            this.updatePromise = null;
          }, this.options.debounceTime);
        });
      }
      return this.updatePromise;
    }
    adjustScreenSpaceError() {
      if (this.gpuMemoryUsageInBytes < this._cacheBytes) {
        this.memoryAdjustedScreenSpaceError = Math.max(this.memoryAdjustedScreenSpaceError / 1.02, this.options.maximumScreenSpaceError);
      } else if (this.gpuMemoryUsageInBytes > this._cacheBytes + this._cacheOverflowBytes) {
        this.memoryAdjustedScreenSpaceError *= 1.02;
      }
    }
    /**
     * Update visible tiles relying on a list of viewports
     * @param viewports viewports
     */
    // eslint-disable-next-line max-statements, complexity
    doUpdate(viewports) {
      if ("loadTiles" in this.options && !this.options.loadTiles) {
        return;
      }
      if (this.traverseCounter > 0) {
        return;
      }
      const preparedViewports = viewports instanceof Array ? viewports : [viewports];
      this._cache.reset();
      this._frameNumber++;
      this.traverseCounter = preparedViewports.length;
      const viewportsToTraverse = [];
      for (const viewport of preparedViewports) {
        const id = viewport.id;
        if (this._needTraverse(id)) {
          viewportsToTraverse.push(id);
        } else {
          this.traverseCounter--;
        }
      }
      for (const viewport of preparedViewports) {
        const id = viewport.id;
        if (!this.roots[id]) {
          this.roots[id] = this._initializeTileHeaders(this.tileset, null);
        }
        if (!viewportsToTraverse.includes(id)) {
          continue;
        }
        const frameState = getFrameState(viewport, this._frameNumber);
        this._traverser.traverse(this.roots[id], frameState, this.options);
      }
    }
    /**
     * Check if traversal is needed for particular viewport
     * @param {string} viewportId - id of a viewport
     * @return {boolean}
     */
    _needTraverse(viewportId) {
      let traverserId = viewportId;
      if (this.options.viewportTraversersMap) {
        traverserId = this.options.viewportTraversersMap[viewportId];
      }
      if (traverserId !== viewportId) {
        return false;
      }
      return true;
    }
    /**
     * The callback to post-process tiles after traversal procedure
     * @param frameState - frame state for tile culling
     */
    _onTraversalEnd(frameState) {
      const id = frameState.viewport.id;
      if (!this.frameStateData[id]) {
        this.frameStateData[id] = { selectedTiles: [], _requestedTiles: [], _emptyTiles: [] };
      }
      const currentFrameStateData = this.frameStateData[id];
      const selectedTiles = Object.values(this._traverser.selectedTiles);
      const [filteredSelectedTiles, unselectedTiles] = limitSelectedTiles(selectedTiles, frameState, this.options.maximumTilesSelected);
      currentFrameStateData.selectedTiles = filteredSelectedTiles;
      for (const tile of unselectedTiles) {
        tile.unselect();
      }
      currentFrameStateData._requestedTiles = Object.values(this._traverser.requestedTiles);
      currentFrameStateData._emptyTiles = Object.values(this._traverser.emptyTiles);
      this.traverseCounter--;
      if (this.traverseCounter > 0) {
        return;
      }
      this._updateTiles();
    }
    /**
     * Update tiles relying on data from all traversers
     */
    _updateTiles() {
      this.selectedTiles = [];
      this._requestedTiles = [];
      this._emptyTiles = [];
      for (const frameStateKey in this.frameStateData) {
        const frameStateDataValue = this.frameStateData[frameStateKey];
        this.selectedTiles = this.selectedTiles.concat(frameStateDataValue.selectedTiles);
        this._requestedTiles = this._requestedTiles.concat(frameStateDataValue._requestedTiles);
        this._emptyTiles = this._emptyTiles.concat(frameStateDataValue._emptyTiles);
      }
      this.selectedTiles = this.options.onTraversalComplete(this.selectedTiles);
      for (const tile of this.selectedTiles) {
        this._tiles[tile.id] = tile;
      }
      this._loadTiles();
      this._unloadTiles();
      this._updateStats();
    }
    _tilesChanged(oldSelectedTiles, selectedTiles) {
      if (oldSelectedTiles.length !== selectedTiles.length) {
        return true;
      }
      const set1 = new Set(oldSelectedTiles.map((t5) => t5.id));
      const set23 = new Set(selectedTiles.map((t5) => t5.id));
      let changed = oldSelectedTiles.filter((x4) => !set23.has(x4.id)).length > 0;
      changed = changed || selectedTiles.filter((x4) => !set1.has(x4.id)).length > 0;
      return changed;
    }
    _loadTiles() {
      for (const tile of this._requestedTiles) {
        if (tile.contentUnloaded) {
          this._loadTile(tile);
        }
      }
    }
    _unloadTiles() {
      this._cache.unloadTiles(this, (tileset, tile) => tileset._unloadTile(tile));
    }
    _updateStats() {
      let tilesRenderable = 0;
      let pointsRenderable = 0;
      for (const tile of this.selectedTiles) {
        if (tile.contentAvailable && tile.content) {
          tilesRenderable++;
          if (tile.content.pointCount) {
            pointsRenderable += tile.content.pointCount;
          } else {
            pointsRenderable += tile.content.vertexCount;
          }
        }
      }
      this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;
      this.stats.get(TILES_RENDERABLE).count = tilesRenderable;
      this.stats.get(POINTS_COUNT).count = pointsRenderable;
      this.stats.get(MAXIMUM_SSE).count = this.memoryAdjustedScreenSpaceError;
    }
    async _initializeTileSet(tilesetJson) {
      if (this.type === TILESET_TYPE.I3S) {
        this.calculateViewPropsI3S();
        tilesetJson.root = await tilesetJson.root;
      }
      this.root = this._initializeTileHeaders(tilesetJson, null);
      if (this.type === TILESET_TYPE.TILES3D) {
        this._initializeTiles3DTileset(tilesetJson);
        this.calculateViewPropsTiles3D();
      }
      if (this.type === TILESET_TYPE.I3S) {
        this._initializeI3STileset();
      }
    }
    /**
     * Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.
     * These metrics help apps center view on tileset
     * For I3S there is extent (<1.8 version) or fullExtent (>=1.8 version) to calculate view props
     * @returns
     */
    calculateViewPropsI3S() {
      const fullExtent = this.tileset.fullExtent;
      if (fullExtent) {
        const { xmin, xmax, ymin, ymax, zmin, zmax } = fullExtent;
        this.cartographicCenter = new Vector33(xmin + (xmax - xmin) / 2, ymin + (ymax - ymin) / 2, zmin + (zmax - zmin) / 2);
        this.cartesianCenter = new Vector33();
        Ellipsoid.WGS84.cartographicToCartesian(this.cartographicCenter, this.cartesianCenter);
        this.zoom = getZoomFromFullExtent(fullExtent, this.cartographicCenter, this.cartesianCenter);
        return;
      }
      const extent = this.tileset.store?.extent;
      if (extent) {
        const [xmin, ymin, xmax, ymax] = extent;
        this.cartographicCenter = new Vector33(xmin + (xmax - xmin) / 2, ymin + (ymax - ymin) / 2, 0);
        this.cartesianCenter = new Vector33();
        Ellipsoid.WGS84.cartographicToCartesian(this.cartographicCenter, this.cartesianCenter);
        this.zoom = getZoomFromExtent(extent, this.cartographicCenter, this.cartesianCenter);
        return;
      }
      console.warn("Extent is not defined in the tileset header");
      this.cartographicCenter = new Vector33();
      this.zoom = 1;
      return;
    }
    /**
     * Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.
     * These metrics help apps center view on tileset.
     * For 3DTiles the root tile data is used to calculate view props.
     * @returns
     */
    calculateViewPropsTiles3D() {
      const root = this.root;
      const { center: center2 } = root.boundingVolume;
      if (!center2) {
        console.warn("center was not pre-calculated for the root tile");
        this.cartographicCenter = new Vector33();
        this.zoom = 1;
        return;
      }
      if (center2[0] !== 0 || center2[1] !== 0 || center2[2] !== 0) {
        this.cartographicCenter = new Vector33();
        Ellipsoid.WGS84.cartesianToCartographic(center2, this.cartographicCenter);
      } else {
        this.cartographicCenter = new Vector33(0, 0, -Ellipsoid.WGS84.radii[0]);
      }
      this.cartesianCenter = center2;
      this.zoom = getZoomFromBoundingVolume(root.boundingVolume, this.cartographicCenter);
    }
    _initializeStats() {
      this.stats.get(TILES_TOTAL);
      this.stats.get(TILES_LOADING);
      this.stats.get(TILES_IN_MEMORY);
      this.stats.get(TILES_IN_VIEW);
      this.stats.get(TILES_RENDERABLE);
      this.stats.get(TILES_LOADED);
      this.stats.get(TILES_UNLOADED);
      this.stats.get(TILES_LOAD_FAILED);
      this.stats.get(POINTS_COUNT);
      this.stats.get(TILES_GPU_MEMORY, "memory");
      this.stats.get(MAXIMUM_SSE);
    }
    // Installs the main tileset JSON file or a tileset JSON file referenced from a tile.
    // eslint-disable-next-line max-statements
    _initializeTileHeaders(tilesetJson, parentTileHeader) {
      const rootTile = new Tile3D(this, tilesetJson.root, parentTileHeader);
      if (parentTileHeader) {
        parentTileHeader.children.push(rootTile);
        rootTile.depth = parentTileHeader.depth + 1;
      }
      if (this.type === TILESET_TYPE.TILES3D) {
        const stack2 = [];
        stack2.push(rootTile);
        while (stack2.length > 0) {
          const tile = stack2.pop();
          this.stats.get(TILES_TOTAL).incrementCount();
          const children = tile.header.children || [];
          for (const childHeader of children) {
            const childTile = new Tile3D(this, childHeader, tile);
            if (childTile.contentUrl?.includes("?session=")) {
              const url = new URL(childTile.contentUrl);
              const session = url.searchParams.get("session");
              if (session) {
                this._queryParams.session = session;
              }
            }
            tile.children.push(childTile);
            childTile.depth = tile.depth + 1;
            stack2.push(childTile);
          }
        }
      }
      return rootTile;
    }
    _initializeTraverser() {
      let TraverserClass;
      const type = this.type;
      switch (type) {
        case TILESET_TYPE.TILES3D:
          TraverserClass = Tileset3DTraverser;
          break;
        case TILESET_TYPE.I3S:
          TraverserClass = I3STilesetTraverser;
          break;
        default:
          TraverserClass = TilesetTraverser;
      }
      return new TraverserClass({
        basePath: this.basePath,
        onTraversalEnd: this._onTraversalEnd.bind(this)
      });
    }
    _destroyTileHeaders(parentTile) {
      this._destroySubtree(parentTile);
    }
    async _loadTile(tile) {
      let loaded;
      try {
        this._onStartTileLoading();
        loaded = await tile.loadContent();
      } catch (error) {
        this._onTileLoadError(tile, error instanceof Error ? error : new Error("load failed"));
      } finally {
        this._onEndTileLoading();
        this._onTileLoad(tile, loaded);
      }
    }
    _onTileLoadError(tile, error) {
      this.stats.get(TILES_LOAD_FAILED).incrementCount();
      const message2 = error.message || error.toString();
      const url = tile.url;
      console.error(`A 3D tile failed to load: ${tile.url} ${message2}`);
      this.options.onTileError(tile, message2, url);
    }
    _onTileLoad(tile, loaded) {
      if (!loaded) {
        return;
      }
      if (this.type === TILESET_TYPE.I3S) {
        const nodesInNodePages = this.tileset?.nodePagesTile?.nodesInNodePages || 0;
        this.stats.get(TILES_TOTAL).reset();
        this.stats.get(TILES_TOTAL).addCount(nodesInNodePages);
      }
      if (tile && tile.content) {
        calculateTransformProps(tile, tile.content);
      }
      this.updateContentTypes(tile);
      this._addTileToCache(tile);
      this.options.onTileLoad(tile);
    }
    /**
     * Update information about data types in nested tiles
     * @param tile instance of a nested Tile3D
     */
    updateContentTypes(tile) {
      if (this.type === TILESET_TYPE.I3S) {
        if (tile.header.isDracoGeometry) {
          this.contentFormats.draco = true;
        }
        switch (tile.header.textureFormat) {
          case "dds":
            this.contentFormats.dds = true;
            break;
          case "ktx2":
            this.contentFormats.ktx2 = true;
            break;
          default:
        }
      } else if (this.type === TILESET_TYPE.TILES3D) {
        const { extensionsRemoved = [] } = tile.content?.gltf || {};
        if (extensionsRemoved.includes("KHR_draco_mesh_compression")) {
          this.contentFormats.draco = true;
        }
        if (extensionsRemoved.includes("EXT_meshopt_compression")) {
          this.contentFormats.meshopt = true;
        }
        if (extensionsRemoved.includes("KHR_texture_basisu")) {
          this.contentFormats.ktx2 = true;
        }
      }
    }
    _onStartTileLoading() {
      this._pendingCount++;
      this.stats.get(TILES_LOADING).incrementCount();
    }
    _onEndTileLoading() {
      this._pendingCount--;
      this.stats.get(TILES_LOADING).decrementCount();
    }
    _addTileToCache(tile) {
      this._cache.add(this, tile, (tileset) => tileset._updateCacheStats(tile));
    }
    _updateCacheStats(tile) {
      this.stats.get(TILES_LOADED).incrementCount();
      this.stats.get(TILES_IN_MEMORY).incrementCount();
      this.gpuMemoryUsageInBytes += tile.gpuMemoryUsageInBytes || 0;
      this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;
      if (this.options.memoryAdjustedScreenSpaceError) {
        this.adjustScreenSpaceError();
      }
    }
    _unloadTile(tile) {
      this.gpuMemoryUsageInBytes -= tile.gpuMemoryUsageInBytes || 0;
      this.stats.get(TILES_IN_MEMORY).decrementCount();
      this.stats.get(TILES_UNLOADED).incrementCount();
      this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;
      this.options.onTileUnload(tile);
      tile.unloadContent();
    }
    // Traverse the tree and destroy all tiles
    _destroy() {
      const stack2 = [];
      if (this.root) {
        stack2.push(this.root);
      }
      while (stack2.length > 0) {
        const tile = stack2.pop();
        for (const child of tile.children) {
          stack2.push(child);
        }
        this._destroyTile(tile);
      }
      this.root = null;
    }
    // Traverse the tree and destroy all sub tiles
    _destroySubtree(tile) {
      const root = tile;
      const stack2 = [];
      stack2.push(root);
      while (stack2.length > 0) {
        tile = stack2.pop();
        for (const child of tile.children) {
          stack2.push(child);
        }
        if (tile !== root) {
          this._destroyTile(tile);
        }
      }
      root.children = [];
    }
    _destroyTile(tile) {
      this._cache.unloadTile(this, tile);
      this._unloadTile(tile);
      tile.destroy();
    }
    _initializeTiles3DTileset(tilesetJson) {
      if (tilesetJson.queryString) {
        const searchParams = new URLSearchParams(tilesetJson.queryString);
        const queryParams = Object.fromEntries(searchParams.entries());
        this._queryParams = { ...this._queryParams, ...queryParams };
      }
      this.asset = tilesetJson.asset;
      if (!this.asset) {
        throw new Error("Tileset must have an asset property.");
      }
      if (this.asset.version !== "0.0" && this.asset.version !== "1.0" && this.asset.version !== "1.1") {
        throw new Error("The tileset must be 3D Tiles version either 0.0 or 1.0 or 1.1.");
      }
      if ("tilesetVersion" in this.asset) {
        this._queryParams.v = this.asset.tilesetVersion;
      }
      this.credits = {
        attributions: this.options.attributions || []
      };
      this.description = this.options.description || "";
      this.properties = tilesetJson.properties;
      this.geometricError = tilesetJson.geometricError;
      this._extensionsUsed = tilesetJson.extensionsUsed || [];
      this.extras = tilesetJson.extras;
    }
    _initializeI3STileset() {
      if (this.loadOptions.i3s && "token" in this.loadOptions.i3s) {
        this._queryParams.token = this.loadOptions.i3s.token;
      }
    }
  };

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/utils/version.js
  var VERSION11 = true ? "4.2.1" : "latest";

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/constants.js
  var TILE3D_TYPE = {
    COMPOSITE: "cmpt",
    POINT_CLOUD: "pnts",
    BATCHED_3D_MODEL: "b3dm",
    INSTANCED_3D_MODEL: "i3dm",
    GEOMETRY: "geom",
    VECTOR: "vect",
    GLTF: "glTF"
  };
  var TILE3D_TYPES = Object.keys(TILE3D_TYPE);

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/helpers/parse-utils.js
  function getStringFromArrayBuffer(arrayBuffer2, byteOffset, byteLength) {
    assert2(arrayBuffer2 instanceof ArrayBuffer);
    const textDecoder = new TextDecoder("utf8");
    const typedArray = new Uint8Array(arrayBuffer2, byteOffset, byteLength);
    const string = textDecoder.decode(typedArray);
    return string;
  }
  function getMagicString4(arrayBuffer2, byteOffset = 0) {
    const dataView = new DataView(arrayBuffer2);
    return `${String.fromCharCode(dataView.getUint8(byteOffset + 0))}${String.fromCharCode(dataView.getUint8(byteOffset + 1))}${String.fromCharCode(dataView.getUint8(byteOffset + 2))}${String.fromCharCode(dataView.getUint8(byteOffset + 3))}`;
  }

  // ../../node_modules/@loaders.gl/math/dist/geometry/constants.js
  var GL_PRIMITIVE_MODE = {
    POINTS: 0,
    // Points. single points.
    LINES: 1,
    // Lines. Each vertex connects to the one after it.
    LINE_LOOP: 2,
    // Lines. Each set of two vertices is treated as a separate line segment.
    LINE_STRIP: 3,
    // Lines/ a connected group of line segments from the first vertex to the last
    TRIANGLES: 4,
    // Triangles. Each set of three vertices creates a separate triangle.
    TRIANGLE_STRIP: 5,
    // Triangles. A connected group of triangles.
    TRIANGLE_FAN: 6
    // Triangles. A connected group of triangles.
    // Each vertex connects to the previous and the first vertex in the fan.
  };
  var GL_TYPE = {
    BYTE: 5120,
    UNSIGNED_BYTE: 5121,
    SHORT: 5122,
    UNSIGNED_SHORT: 5123,
    INT: 5124,
    UNSIGNED_INT: 5125,
    FLOAT: 5126,
    DOUBLE: 5130
  };
  var GL2 = {
    ...GL_PRIMITIVE_MODE,
    ...GL_TYPE
  };

  // ../../node_modules/@loaders.gl/math/dist/geometry/gl/gl-type.js
  var GL_TYPE_TO_ARRAY_TYPE = {
    [GL_TYPE.DOUBLE]: Float64Array,
    [GL_TYPE.FLOAT]: Float32Array,
    [GL_TYPE.UNSIGNED_SHORT]: Uint16Array,
    [GL_TYPE.UNSIGNED_INT]: Uint32Array,
    [GL_TYPE.UNSIGNED_BYTE]: Uint8Array,
    [GL_TYPE.BYTE]: Int8Array,
    [GL_TYPE.SHORT]: Int16Array,
    [GL_TYPE.INT]: Int32Array
  };
  var NAME_TO_GL_TYPE = {
    DOUBLE: GL_TYPE.DOUBLE,
    FLOAT: GL_TYPE.FLOAT,
    UNSIGNED_SHORT: GL_TYPE.UNSIGNED_SHORT,
    UNSIGNED_INT: GL_TYPE.UNSIGNED_INT,
    UNSIGNED_BYTE: GL_TYPE.UNSIGNED_BYTE,
    BYTE: GL_TYPE.BYTE,
    SHORT: GL_TYPE.SHORT,
    INT: GL_TYPE.INT
  };
  var ERR_TYPE_CONVERSION = "Failed to convert GL type";
  var GLType = class {
    // Signature: fromTypedArray(new Uint8Array())
    // Signature: fromTypedArray(Uint8Array)
    /**
     * Returns the size, in bytes, of the corresponding datatype
     * @param arrayOrType
     * @returns glType a a string
     */
    static fromTypedArray(arrayOrType) {
      arrayOrType = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;
      for (const glType in GL_TYPE_TO_ARRAY_TYPE) {
        const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];
        if (ArrayType === arrayOrType) {
          return glType;
        }
      }
      throw new Error(ERR_TYPE_CONVERSION);
    }
    /**
     * Extracts name for glType from array NAME_TO_GL_TYPE
     * @param name
     * @returns glType as a number
     */
    static fromName(name13) {
      const glType = NAME_TO_GL_TYPE[name13];
      if (!glType) {
        throw new Error(ERR_TYPE_CONVERSION);
      }
      return glType;
    }
    // Converts GL constant to corresponding typed array type
    // eslint-disable-next-line complexity
    static getArrayType(glType) {
      switch (glType) {
        case GL_TYPE.UNSIGNED_SHORT_5_6_5:
        case GL_TYPE.UNSIGNED_SHORT_4_4_4_4:
        case GL_TYPE.UNSIGNED_SHORT_5_5_5_1:
          return Uint16Array;
        default:
          const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];
          if (!ArrayType) {
            throw new Error(ERR_TYPE_CONVERSION);
          }
          return ArrayType;
      }
    }
    /**
     * Returns the size in bytes of one element of the provided WebGL type
     * @param glType
     * @returns size of glType
     */
    static getByteSize(glType) {
      const ArrayType = GLType.getArrayType(glType);
      return ArrayType.BYTES_PER_ELEMENT;
    }
    /**
     * Returns `true` if `glType` is a valid WebGL data type.
     * @param glType
     * @returns boolean
     */
    static validate(glType) {
      return Boolean(GLType.getArrayType(glType));
    }
    /**
     * Creates a typed view of an array of bytes
     * @param glType The type of typed array (ArrayBuffer view) to create
     * @param buffer The buffer storage to use for the view.
     * @param byteOffset The offset, in bytes, to the first element in the view
     * @param length The number of elements in the view. Defaults to buffer length
     * @returns A typed array view of the buffer
     */
    static createTypedArray(glType, buffer, byteOffset = 0, length17) {
      if (length17 === void 0) {
        length17 = (buffer.byteLength - byteOffset) / GLType.getByteSize(glType);
      }
      const ArrayType = GLType.getArrayType(glType);
      return new ArrayType(buffer, byteOffset, length17);
    }
  };

  // ../../node_modules/@loaders.gl/math/node_modules/@math.gl/core/dist/lib/common.js
  var RADIANS_TO_DEGREES8 = 1 / Math.PI * 180;
  var DEGREES_TO_RADIANS12 = 1 / 180 * Math.PI;
  var DEFAULT_CONFIG6 = {
    EPSILON: 1e-12,
    debug: false,
    precision: 4,
    printTypes: false,
    printDegrees: false,
    printRowMajor: true,
    _cartographicRadians: false
  };
  globalThis.mathgl = globalThis.mathgl || { config: { ...DEFAULT_CONFIG6 } };
  var config6 = globalThis.mathgl.config;
  function formatValue6(value, { precision = config6.precision } = {}) {
    value = round16(value);
    return `${parseFloat(value.toPrecision(precision))}`;
  }
  function isArray9(value) {
    return Array.isArray(value) || ArrayBuffer.isView(value) && !(value instanceof DataView);
  }
  function clamp6(value, min7, max7) {
    return map5(value, (value2) => Math.max(min7, Math.min(max7, value2)));
  }
  function equals13(a6, b4, epsilon) {
    const oldEpsilon = config6.EPSILON;
    if (epsilon) {
      config6.EPSILON = epsilon;
    }
    try {
      if (a6 === b4) {
        return true;
      }
      if (isArray9(a6) && isArray9(b4)) {
        if (a6.length !== b4.length) {
          return false;
        }
        for (let i7 = 0; i7 < a6.length; ++i7) {
          if (!equals13(a6[i7], b4[i7])) {
            return false;
          }
        }
        return true;
      }
      if (a6 && a6.equals) {
        return a6.equals(b4);
      }
      if (b4 && b4.equals) {
        return b4.equals(a6);
      }
      if (typeof a6 === "number" && typeof b4 === "number") {
        return Math.abs(a6 - b4) <= config6.EPSILON * Math.max(1, Math.abs(a6), Math.abs(b4));
      }
      return false;
    } finally {
      config6.EPSILON = oldEpsilon;
    }
  }
  function round16(value) {
    return Math.round(value / config6.EPSILON) * config6.EPSILON;
  }
  function duplicateArray4(array) {
    return array.clone ? array.clone() : new Array(array.length);
  }
  function map5(value, func, result) {
    if (isArray9(value)) {
      const array = value;
      result = result || duplicateArray4(array);
      for (let i7 = 0; i7 < result.length && i7 < array.length; ++i7) {
        const val2 = typeof value === "number" ? value : value[i7];
        result[i7] = func(val2, i7, result);
      }
      return result;
    }
    return func(value);
  }

  // ../../node_modules/@loaders.gl/math/node_modules/@math.gl/core/dist/classes/base/math-array.js
  var MathArray6 = class extends Array {
    // Common methods
    /**
     * Clone the current object
     * @returns a new copy of this object
     */
    clone() {
      return new this.constructor().copy(this);
    }
    fromArray(array, offset = 0) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = array[i7 + offset];
      }
      return this.check();
    }
    toArray(targetArray = [], offset = 0) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        targetArray[offset + i7] = this[i7];
      }
      return targetArray;
    }
    toObject(targetObject) {
      return targetObject;
    }
    from(arrayOrObject) {
      return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : (
        // @ts-ignore
        this.fromObject(arrayOrObject)
      );
    }
    to(arrayOrObject) {
      if (arrayOrObject === this) {
        return this;
      }
      return isArray9(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);
    }
    toTarget(target2) {
      return target2 ? this.to(target2) : this;
    }
    /** @deprecated */
    toFloat32Array() {
      return new Float32Array(this);
    }
    toString() {
      return this.formatString(config6);
    }
    /** Formats string according to options */
    formatString(opts) {
      let string = "";
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        string += (i7 > 0 ? ", " : "") + formatValue6(this[i7], opts);
      }
      return `${opts.printTypes ? this.constructor.name : ""}[${string}]`;
    }
    equals(array) {
      if (!array || this.length !== array.length) {
        return false;
      }
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        if (!equals13(this[i7], array[i7])) {
          return false;
        }
      }
      return true;
    }
    exactEquals(array) {
      if (!array || this.length !== array.length) {
        return false;
      }
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        if (this[i7] !== array[i7]) {
          return false;
        }
      }
      return true;
    }
    // Modifiers
    /** Negates all values in this object */
    negate() {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = -this[i7];
      }
      return this.check();
    }
    lerp(a6, b4, t5) {
      if (t5 === void 0) {
        return this.lerp(this, a6, b4);
      }
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        const ai = a6[i7];
        const endValue = typeof b4 === "number" ? b4 : b4[i7];
        this[i7] = ai + t5 * (endValue - ai);
      }
      return this.check();
    }
    /** Minimal */
    min(vector) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.min(vector[i7], this[i7]);
      }
      return this.check();
    }
    /** Maximal */
    max(vector) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.max(vector[i7], this[i7]);
      }
      return this.check();
    }
    clamp(minVector, maxVector) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.min(Math.max(this[i7], minVector[i7]), maxVector[i7]);
      }
      return this.check();
    }
    add(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] += vector[i7];
        }
      }
      return this.check();
    }
    subtract(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] -= vector[i7];
        }
      }
      return this.check();
    }
    scale(scale24) {
      if (typeof scale24 === "number") {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] *= scale24;
        }
      } else {
        for (let i7 = 0; i7 < this.ELEMENTS && i7 < scale24.length; ++i7) {
          this[i7] *= scale24[i7];
        }
      }
      return this.check();
    }
    /**
     * Multiplies all elements by `scale`
     * Note: `Matrix4.multiplyByScalar` only scales its 3x3 "minor"
     */
    multiplyByScalar(scalar) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] *= scalar;
      }
      return this.check();
    }
    // Debug checks
    /** Throws an error if array length is incorrect or contains illegal values */
    check() {
      if (config6.debug && !this.validate()) {
        throw new Error(`math.gl: ${this.constructor.name} some fields set to invalid numbers'`);
      }
      return this;
    }
    /** Returns false if the array length is incorrect or contains illegal values */
    validate() {
      let valid = this.length === this.ELEMENTS;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        valid = valid && Number.isFinite(this[i7]);
      }
      return valid;
    }
    // three.js compatibility
    /** @deprecated */
    sub(a6) {
      return this.subtract(a6);
    }
    /** @deprecated */
    setScalar(a6) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = a6;
      }
      return this.check();
    }
    /** @deprecated */
    addScalar(a6) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] += a6;
      }
      return this.check();
    }
    /** @deprecated */
    subScalar(a6) {
      return this.addScalar(-a6);
    }
    /** @deprecated */
    multiplyScalar(scalar) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] *= scalar;
      }
      return this.check();
    }
    /** @deprecated */
    divideScalar(a6) {
      return this.multiplyByScalar(1 / a6);
    }
    /** @deprecated */
    clampScalar(min7, max7) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.min(Math.max(this[i7], min7), max7);
      }
      return this.check();
    }
    /** @deprecated */
    get elements() {
      return this;
    }
  };

  // ../../node_modules/@loaders.gl/math/node_modules/@math.gl/core/dist/lib/validators.js
  function checkNumber6(value) {
    if (!Number.isFinite(value)) {
      throw new Error(`Invalid number ${JSON.stringify(value)}`);
    }
    return value;
  }

  // ../../node_modules/@loaders.gl/math/node_modules/@math.gl/core/dist/lib/assert.js
  function assert14(condition, message2) {
    if (!condition) {
      throw new Error(`math.gl assertion ${message2}`);
    }
  }

  // ../../node_modules/@loaders.gl/math/node_modules/@math.gl/core/dist/classes/base/vector.js
  var Vector9 = class extends MathArray6 {
    // ACCESSORS
    get x() {
      return this[0];
    }
    set x(value) {
      this[0] = checkNumber6(value);
    }
    get y() {
      return this[1];
    }
    set y(value) {
      this[1] = checkNumber6(value);
    }
    /**
     * Returns the length of the vector from the origin to the point described by this vector
     *
     * @note `length` is a reserved word for Arrays, so `v.length()` will return number of elements
     * Instead we provide `len` and `magnitude`
     */
    len() {
      return Math.sqrt(this.lengthSquared());
    }
    /**
     * Returns the length of the vector from the origin to the point described by this vector
     */
    magnitude() {
      return this.len();
    }
    /**
     * Returns the squared length of the vector from the origin to the point described by this vector
     */
    lengthSquared() {
      let length17 = 0;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        length17 += this[i7] * this[i7];
      }
      return length17;
    }
    /**
     * Returns the squared length of the vector from the origin to the point described by this vector
     */
    magnitudeSquared() {
      return this.lengthSquared();
    }
    distance(mathArray) {
      return Math.sqrt(this.distanceSquared(mathArray));
    }
    distanceSquared(mathArray) {
      let length17 = 0;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        const dist6 = this[i7] - mathArray[i7];
        length17 += dist6 * dist6;
      }
      return checkNumber6(length17);
    }
    dot(mathArray) {
      let product = 0;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        product += this[i7] * mathArray[i7];
      }
      return checkNumber6(product);
    }
    // MODIFIERS
    normalize() {
      const length17 = this.magnitude();
      if (length17 !== 0) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] /= length17;
        }
      }
      return this.check();
    }
    multiply(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] *= vector[i7];
        }
      }
      return this.check();
    }
    divide(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] /= vector[i7];
        }
      }
      return this.check();
    }
    // THREE.js compatibility
    lengthSq() {
      return this.lengthSquared();
    }
    distanceTo(vector) {
      return this.distance(vector);
    }
    distanceToSquared(vector) {
      return this.distanceSquared(vector);
    }
    getComponent(i7) {
      assert14(i7 >= 0 && i7 < this.ELEMENTS, "index is out of range");
      return checkNumber6(this[i7]);
    }
    setComponent(i7, value) {
      assert14(i7 >= 0 && i7 < this.ELEMENTS, "index is out of range");
      this[i7] = value;
      return this.check();
    }
    addVectors(a6, b4) {
      return this.copy(a6).add(b4);
    }
    subVectors(a6, b4) {
      return this.copy(a6).subtract(b4);
    }
    multiplyVectors(a6, b4) {
      return this.copy(a6).multiply(b4);
    }
    addScaledVector(a6, b4) {
      return this.add(new this.constructor(a6).multiplyScalar(b4));
    }
  };

  // ../../node_modules/@loaders.gl/math/node_modules/@math.gl/core/dist/gl-matrix/common.js
  var ARRAY_TYPE7 = typeof Float32Array !== "undefined" ? Float32Array : Array;
  var degree7 = Math.PI / 180;

  // ../../node_modules/@loaders.gl/math/node_modules/@math.gl/core/dist/gl-matrix/vec2.js
  function create25() {
    const out = new ARRAY_TYPE7(2);
    if (ARRAY_TYPE7 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
    }
    return out;
  }
  function transformMat23(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[2] * y5;
    out[1] = m3[1] * x4 + m3[3] * y5;
    return out;
  }
  function transformMat2d3(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[2] * y5 + m3[4];
    out[1] = m3[1] * x4 + m3[3] * y5 + m3[5];
    return out;
  }
  function transformMat311(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[3] * y5 + m3[6];
    out[1] = m3[1] * x4 + m3[4] * y5 + m3[7];
    return out;
  }
  function transformMat413(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[4] * y5 + m3[12];
    out[1] = m3[1] * x4 + m3[5] * y5 + m3[13];
    return out;
  }
  var forEach17 = function() {
    const vec = create25();
    return function(a6, stride, offset, count3, fn, arg) {
      let i7;
      let l5;
      if (!stride) {
        stride = 2;
      }
      if (!offset) {
        offset = 0;
      }
      if (count3) {
        l5 = Math.min(count3 * stride + offset, a6.length);
      } else {
        l5 = a6.length;
      }
      for (i7 = offset; i7 < l5; i7 += stride) {
        vec[0] = a6[i7];
        vec[1] = a6[i7 + 1];
        fn(vec, vec, arg);
        a6[i7] = vec[0];
        a6[i7 + 1] = vec[1];
      }
      return a6;
    };
  }();

  // ../../node_modules/@loaders.gl/math/node_modules/@math.gl/core/dist/lib/gl-matrix-extras.js
  function vec2_transformMat4AsVector4(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const w5 = m3[3] * x4 + m3[7] * y5 || 1;
    out[0] = (m3[0] * x4 + m3[4] * y5) / w5;
    out[1] = (m3[1] * x4 + m3[5] * y5) / w5;
    return out;
  }
  function vec3_transformMat4AsVector6(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = m3[3] * x4 + m3[7] * y5 + m3[11] * z4 || 1;
    out[0] = (m3[0] * x4 + m3[4] * y5 + m3[8] * z4) / w5;
    out[1] = (m3[1] * x4 + m3[5] * y5 + m3[9] * z4) / w5;
    out[2] = (m3[2] * x4 + m3[6] * y5 + m3[10] * z4) / w5;
    return out;
  }
  function vec3_transformMat26(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[2] * y5;
    out[1] = m3[1] * x4 + m3[3] * y5;
    out[2] = a6[2];
    return out;
  }

  // ../../node_modules/@loaders.gl/math/node_modules/@math.gl/core/dist/classes/vector2.js
  var Vector22 = class extends Vector9 {
    // Creates a new, empty vec2
    constructor(x4 = 0, y5 = 0) {
      super(2);
      if (isArray9(x4) && arguments.length === 1) {
        this.copy(x4);
      } else {
        if (config6.debug) {
          checkNumber6(x4);
          checkNumber6(y5);
        }
        this[0] = x4;
        this[1] = y5;
      }
    }
    set(x4, y5) {
      this[0] = x4;
      this[1] = y5;
      return this.check();
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      return this.check();
    }
    fromObject(object) {
      if (config6.debug) {
        checkNumber6(object.x);
        checkNumber6(object.y);
      }
      this[0] = object.x;
      this[1] = object.y;
      return this.check();
    }
    toObject(object) {
      object.x = this[0];
      object.y = this[1];
      return object;
    }
    // Getters/setters
    get ELEMENTS() {
      return 2;
    }
    /**
     * Returns angle from x axis
     * @returns
     */
    horizontalAngle() {
      return Math.atan2(this.y, this.x);
    }
    /**
     * Returns angle from y axis
     * @returns
     */
    verticalAngle() {
      return Math.atan2(this.x, this.y);
    }
    // Transforms
    /**
     * Transforms as point
     * @param matrix4
     * @returns
     */
    transform(matrix4) {
      return this.transformAsPoint(matrix4);
    }
    /**
     * transforms as point (4th component is implicitly 1)
     * @param matrix4
     * @returns
     */
    transformAsPoint(matrix4) {
      transformMat413(this, this, matrix4);
      return this.check();
    }
    /**
     * transforms as vector (4th component is implicitly 0, ignores translation. slightly faster)
     * @param matrix4
     * @returns
     */
    transformAsVector(matrix4) {
      vec2_transformMat4AsVector4(this, this, matrix4);
      return this.check();
    }
    transformByMatrix3(matrix3) {
      transformMat311(this, this, matrix3);
      return this.check();
    }
    transformByMatrix2x3(matrix2x3) {
      transformMat2d3(this, this, matrix2x3);
      return this.check();
    }
    transformByMatrix2(matrix2) {
      transformMat23(this, this, matrix2);
      return this.check();
    }
  };

  // ../../node_modules/@loaders.gl/math/node_modules/@math.gl/core/dist/gl-matrix/vec3.js
  function create26() {
    const out = new ARRAY_TYPE7(3);
    if (ARRAY_TYPE7 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }
    return out;
  }
  function dot14(a6, b4) {
    return a6[0] * b4[0] + a6[1] * b4[1] + a6[2] * b4[2];
  }
  function cross9(out, a6, b4) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const bx = b4[0];
    const by = b4[1];
    const bz = b4[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
  }
  function transformMat414(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    let w5 = m3[3] * x4 + m3[7] * y5 + m3[11] * z4 + m3[15];
    w5 = w5 || 1;
    out[0] = (m3[0] * x4 + m3[4] * y5 + m3[8] * z4 + m3[12]) / w5;
    out[1] = (m3[1] * x4 + m3[5] * y5 + m3[9] * z4 + m3[13]) / w5;
    out[2] = (m3[2] * x4 + m3[6] * y5 + m3[10] * z4 + m3[14]) / w5;
    return out;
  }
  function transformMat312(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    out[0] = x4 * m3[0] + y5 * m3[3] + z4 * m3[6];
    out[1] = x4 * m3[1] + y5 * m3[4] + z4 * m3[7];
    out[2] = x4 * m3[2] + y5 * m3[5] + z4 * m3[8];
    return out;
  }
  function transformQuat10(out, a6, q3) {
    const qx = q3[0];
    const qy = q3[1];
    const qz = q3[2];
    const qw = q3[3];
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    let uvx = qy * z4 - qz * y5;
    let uvy = qz * x4 - qx * z4;
    let uvz = qx * y5 - qy * x4;
    let uuvx = qy * uvz - qz * uvy;
    let uuvy = qz * uvx - qx * uvz;
    let uuvz = qx * uvy - qy * uvx;
    const w22 = qw * 2;
    uvx *= w22;
    uvy *= w22;
    uvz *= w22;
    uuvx *= 2;
    uuvy *= 2;
    uuvz *= 2;
    out[0] = x4 + uvx + uuvx;
    out[1] = y5 + uvy + uuvy;
    out[2] = z4 + uvz + uuvz;
    return out;
  }
  function rotateX14(out, a6, b4, rad) {
    const p5 = [];
    const r5 = [];
    p5[0] = a6[0] - b4[0];
    p5[1] = a6[1] - b4[1];
    p5[2] = a6[2] - b4[2];
    r5[0] = p5[0];
    r5[1] = p5[1] * Math.cos(rad) - p5[2] * Math.sin(rad);
    r5[2] = p5[1] * Math.sin(rad) + p5[2] * Math.cos(rad);
    out[0] = r5[0] + b4[0];
    out[1] = r5[1] + b4[1];
    out[2] = r5[2] + b4[2];
    return out;
  }
  function rotateY14(out, a6, b4, rad) {
    const p5 = [];
    const r5 = [];
    p5[0] = a6[0] - b4[0];
    p5[1] = a6[1] - b4[1];
    p5[2] = a6[2] - b4[2];
    r5[0] = p5[2] * Math.sin(rad) + p5[0] * Math.cos(rad);
    r5[1] = p5[1];
    r5[2] = p5[2] * Math.cos(rad) - p5[0] * Math.sin(rad);
    out[0] = r5[0] + b4[0];
    out[1] = r5[1] + b4[1];
    out[2] = r5[2] + b4[2];
    return out;
  }
  function rotateZ14(out, a6, b4, rad) {
    const p5 = [];
    const r5 = [];
    p5[0] = a6[0] - b4[0];
    p5[1] = a6[1] - b4[1];
    p5[2] = a6[2] - b4[2];
    r5[0] = p5[0] * Math.cos(rad) - p5[1] * Math.sin(rad);
    r5[1] = p5[0] * Math.sin(rad) + p5[1] * Math.cos(rad);
    r5[2] = p5[2];
    out[0] = r5[0] + b4[0];
    out[1] = r5[1] + b4[1];
    out[2] = r5[2] + b4[2];
    return out;
  }
  function angle8(a6, b4) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const bx = b4[0];
    const by = b4[1];
    const bz = b4[2];
    const mag = Math.sqrt((ax * ax + ay * ay + az * az) * (bx * bx + by * by + bz * bz));
    const cosine = mag && dot14(a6, b4) / mag;
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
  }
  var forEach18 = function() {
    const vec = create26();
    return function(a6, stride, offset, count3, fn, arg) {
      let i7;
      let l5;
      if (!stride) {
        stride = 3;
      }
      if (!offset) {
        offset = 0;
      }
      if (count3) {
        l5 = Math.min(count3 * stride + offset, a6.length);
      } else {
        l5 = a6.length;
      }
      for (i7 = offset; i7 < l5; i7 += stride) {
        vec[0] = a6[i7];
        vec[1] = a6[i7 + 1];
        vec[2] = a6[i7 + 2];
        fn(vec, vec, arg);
        a6[i7] = vec[0];
        a6[i7 + 1] = vec[1];
        a6[i7 + 2] = vec[2];
      }
      return a6;
    };
  }();

  // ../../node_modules/@loaders.gl/math/node_modules/@math.gl/core/dist/classes/vector3.js
  var ORIGIN6 = [0, 0, 0];
  var ZERO13;
  var Vector36 = class extends Vector9 {
    static get ZERO() {
      if (!ZERO13) {
        ZERO13 = new Vector36(0, 0, 0);
        Object.freeze(ZERO13);
      }
      return ZERO13;
    }
    /**
     * @class
     * @param x
     * @param y
     * @param z
     */
    constructor(x4 = 0, y5 = 0, z4 = 0) {
      super(-0, -0, -0);
      if (arguments.length === 1 && isArray9(x4)) {
        this.copy(x4);
      } else {
        if (config6.debug) {
          checkNumber6(x4);
          checkNumber6(y5);
          checkNumber6(z4);
        }
        this[0] = x4;
        this[1] = y5;
        this[2] = z4;
      }
    }
    set(x4, y5, z4) {
      this[0] = x4;
      this[1] = y5;
      this[2] = z4;
      return this.check();
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      return this.check();
    }
    fromObject(object) {
      if (config6.debug) {
        checkNumber6(object.x);
        checkNumber6(object.y);
        checkNumber6(object.z);
      }
      this[0] = object.x;
      this[1] = object.y;
      this[2] = object.z;
      return this.check();
    }
    toObject(object) {
      object.x = this[0];
      object.y = this[1];
      object.z = this[2];
      return object;
    }
    // Getters/setters
    get ELEMENTS() {
      return 3;
    }
    get z() {
      return this[2];
    }
    set z(value) {
      this[2] = checkNumber6(value);
    }
    // ACCESSORS
    angle(vector) {
      return angle8(this, vector);
    }
    // MODIFIERS
    cross(vector) {
      cross9(this, this, vector);
      return this.check();
    }
    rotateX({ radians: radians6, origin = ORIGIN6 }) {
      rotateX14(this, this, origin, radians6);
      return this.check();
    }
    rotateY({ radians: radians6, origin = ORIGIN6 }) {
      rotateY14(this, this, origin, radians6);
      return this.check();
    }
    rotateZ({ radians: radians6, origin = ORIGIN6 }) {
      rotateZ14(this, this, origin, radians6);
      return this.check();
    }
    // Transforms
    // transforms as point (4th component is implicitly 1)
    transform(matrix4) {
      return this.transformAsPoint(matrix4);
    }
    // transforms as point (4th component is implicitly 1)
    transformAsPoint(matrix4) {
      transformMat414(this, this, matrix4);
      return this.check();
    }
    // transforms as vector  (4th component is implicitly 0, ignores translation. slightly faster)
    transformAsVector(matrix4) {
      vec3_transformMat4AsVector6(this, this, matrix4);
      return this.check();
    }
    transformByMatrix3(matrix3) {
      transformMat312(this, this, matrix3);
      return this.check();
    }
    transformByMatrix2(matrix2) {
      vec3_transformMat26(this, this, matrix2);
      return this.check();
    }
    transformByQuaternion(quaternion) {
      transformQuat10(this, this, quaternion);
      return this.check();
    }
  };

  // ../../node_modules/@loaders.gl/math/dist/geometry/utils/assert.js
  function assert15(condition, message2) {
    if (!condition) {
      throw new Error(`math.gl assertion failed. ${message2}`);
    }
  }

  // ../../node_modules/@loaders.gl/math/dist/geometry/colors/rgb565.js
  function decodeRGB565(rgb565, target2 = [0, 0, 0]) {
    const r5 = rgb565 >> 11 & 31;
    const g6 = rgb565 >> 5 & 63;
    const b5 = rgb565 & 31;
    target2[0] = r5 << 3;
    target2[1] = g6 << 2;
    target2[2] = b5 << 3;
    return target2;
  }

  // ../../node_modules/@loaders.gl/math/dist/geometry/compression/attribute-compression.js
  var RIGHT_SHIFT = 1 / 256;
  var scratchVector27 = new Vector22();
  var scratchVector37 = new Vector36();
  var scratchEncodeVector2 = new Vector22();
  var octEncodeScratch = new Vector22();
  var uint8ForceArray = new Uint8Array(1);
  function fromSNorm(value, rangeMaximum = 255) {
    return clamp6(value, 0, rangeMaximum) / rangeMaximum * 2 - 1;
  }
  function signNotZero(value) {
    return value < 0 ? -1 : 1;
  }
  function octDecodeInRange(x4, y5, rangeMax, result) {
    assert15(result);
    if (x4 < 0 || x4 > rangeMax || y5 < 0 || y5 > rangeMax) {
      throw new Error(`x and y must be unsigned normalized integers between 0 and ${rangeMax}`);
    }
    result.x = fromSNorm(x4, rangeMax);
    result.y = fromSNorm(y5, rangeMax);
    result.z = 1 - (Math.abs(result.x) + Math.abs(result.y));
    if (result.z < 0) {
      const oldVX = result.x;
      result.x = (1 - Math.abs(result.y)) * signNotZero(oldVX);
      result.y = (1 - Math.abs(oldVX)) * signNotZero(result.y);
    }
    return result.normalize();
  }
  function octDecode(x4, y5, result) {
    return octDecodeInRange(x4, y5, 255, result);
  }

  // ../../node_modules/@loaders.gl/3d-tiles/node_modules/@math.gl/core/dist/lib/common.js
  var RADIANS_TO_DEGREES9 = 1 / Math.PI * 180;
  var DEGREES_TO_RADIANS13 = 1 / 180 * Math.PI;
  var DEFAULT_CONFIG7 = {
    EPSILON: 1e-12,
    debug: false,
    precision: 4,
    printTypes: false,
    printDegrees: false,
    printRowMajor: true,
    _cartographicRadians: false
  };
  globalThis.mathgl = globalThis.mathgl || { config: { ...DEFAULT_CONFIG7 } };
  var config7 = globalThis.mathgl.config;
  function formatValue7(value, { precision = config7.precision } = {}) {
    value = round18(value);
    return `${parseFloat(value.toPrecision(precision))}`;
  }
  function isArray10(value) {
    return Array.isArray(value) || ArrayBuffer.isView(value) && !(value instanceof DataView);
  }
  function equals14(a6, b4, epsilon) {
    const oldEpsilon = config7.EPSILON;
    if (epsilon) {
      config7.EPSILON = epsilon;
    }
    try {
      if (a6 === b4) {
        return true;
      }
      if (isArray10(a6) && isArray10(b4)) {
        if (a6.length !== b4.length) {
          return false;
        }
        for (let i7 = 0; i7 < a6.length; ++i7) {
          if (!equals14(a6[i7], b4[i7])) {
            return false;
          }
        }
        return true;
      }
      if (a6 && a6.equals) {
        return a6.equals(b4);
      }
      if (b4 && b4.equals) {
        return b4.equals(a6);
      }
      if (typeof a6 === "number" && typeof b4 === "number") {
        return Math.abs(a6 - b4) <= config7.EPSILON * Math.max(1, Math.abs(a6), Math.abs(b4));
      }
      return false;
    } finally {
      config7.EPSILON = oldEpsilon;
    }
  }
  function round18(value) {
    return Math.round(value / config7.EPSILON) * config7.EPSILON;
  }

  // ../../node_modules/@loaders.gl/3d-tiles/node_modules/@math.gl/core/dist/classes/base/math-array.js
  var MathArray7 = class extends Array {
    // Common methods
    /**
     * Clone the current object
     * @returns a new copy of this object
     */
    clone() {
      return new this.constructor().copy(this);
    }
    fromArray(array, offset = 0) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = array[i7 + offset];
      }
      return this.check();
    }
    toArray(targetArray = [], offset = 0) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        targetArray[offset + i7] = this[i7];
      }
      return targetArray;
    }
    toObject(targetObject) {
      return targetObject;
    }
    from(arrayOrObject) {
      return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : (
        // @ts-ignore
        this.fromObject(arrayOrObject)
      );
    }
    to(arrayOrObject) {
      if (arrayOrObject === this) {
        return this;
      }
      return isArray10(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);
    }
    toTarget(target2) {
      return target2 ? this.to(target2) : this;
    }
    /** @deprecated */
    toFloat32Array() {
      return new Float32Array(this);
    }
    toString() {
      return this.formatString(config7);
    }
    /** Formats string according to options */
    formatString(opts) {
      let string = "";
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        string += (i7 > 0 ? ", " : "") + formatValue7(this[i7], opts);
      }
      return `${opts.printTypes ? this.constructor.name : ""}[${string}]`;
    }
    equals(array) {
      if (!array || this.length !== array.length) {
        return false;
      }
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        if (!equals14(this[i7], array[i7])) {
          return false;
        }
      }
      return true;
    }
    exactEquals(array) {
      if (!array || this.length !== array.length) {
        return false;
      }
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        if (this[i7] !== array[i7]) {
          return false;
        }
      }
      return true;
    }
    // Modifiers
    /** Negates all values in this object */
    negate() {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = -this[i7];
      }
      return this.check();
    }
    lerp(a6, b4, t5) {
      if (t5 === void 0) {
        return this.lerp(this, a6, b4);
      }
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        const ai = a6[i7];
        const endValue = typeof b4 === "number" ? b4 : b4[i7];
        this[i7] = ai + t5 * (endValue - ai);
      }
      return this.check();
    }
    /** Minimal */
    min(vector) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.min(vector[i7], this[i7]);
      }
      return this.check();
    }
    /** Maximal */
    max(vector) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.max(vector[i7], this[i7]);
      }
      return this.check();
    }
    clamp(minVector, maxVector) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.min(Math.max(this[i7], minVector[i7]), maxVector[i7]);
      }
      return this.check();
    }
    add(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] += vector[i7];
        }
      }
      return this.check();
    }
    subtract(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] -= vector[i7];
        }
      }
      return this.check();
    }
    scale(scale24) {
      if (typeof scale24 === "number") {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] *= scale24;
        }
      } else {
        for (let i7 = 0; i7 < this.ELEMENTS && i7 < scale24.length; ++i7) {
          this[i7] *= scale24[i7];
        }
      }
      return this.check();
    }
    /**
     * Multiplies all elements by `scale`
     * Note: `Matrix4.multiplyByScalar` only scales its 3x3 "minor"
     */
    multiplyByScalar(scalar) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] *= scalar;
      }
      return this.check();
    }
    // Debug checks
    /** Throws an error if array length is incorrect or contains illegal values */
    check() {
      if (config7.debug && !this.validate()) {
        throw new Error(`math.gl: ${this.constructor.name} some fields set to invalid numbers'`);
      }
      return this;
    }
    /** Returns false if the array length is incorrect or contains illegal values */
    validate() {
      let valid = this.length === this.ELEMENTS;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        valid = valid && Number.isFinite(this[i7]);
      }
      return valid;
    }
    // three.js compatibility
    /** @deprecated */
    sub(a6) {
      return this.subtract(a6);
    }
    /** @deprecated */
    setScalar(a6) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = a6;
      }
      return this.check();
    }
    /** @deprecated */
    addScalar(a6) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] += a6;
      }
      return this.check();
    }
    /** @deprecated */
    subScalar(a6) {
      return this.addScalar(-a6);
    }
    /** @deprecated */
    multiplyScalar(scalar) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] *= scalar;
      }
      return this.check();
    }
    /** @deprecated */
    divideScalar(a6) {
      return this.multiplyByScalar(1 / a6);
    }
    /** @deprecated */
    clampScalar(min7, max7) {
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        this[i7] = Math.min(Math.max(this[i7], min7), max7);
      }
      return this.check();
    }
    /** @deprecated */
    get elements() {
      return this;
    }
  };

  // ../../node_modules/@loaders.gl/3d-tiles/node_modules/@math.gl/core/dist/lib/validators.js
  function validateVector6(v5, length17) {
    if (v5.length !== length17) {
      return false;
    }
    for (let i7 = 0; i7 < v5.length; ++i7) {
      if (!Number.isFinite(v5[i7])) {
        return false;
      }
    }
    return true;
  }
  function checkNumber7(value) {
    if (!Number.isFinite(value)) {
      throw new Error(`Invalid number ${JSON.stringify(value)}`);
    }
    return value;
  }
  function checkVector6(v5, length17, callerName = "") {
    if (config7.debug && !validateVector6(v5, length17)) {
      throw new Error(`math.gl: ${callerName} some fields set to invalid numbers'`);
    }
    return v5;
  }

  // ../../node_modules/@loaders.gl/3d-tiles/node_modules/@math.gl/core/dist/lib/assert.js
  function assert16(condition, message2) {
    if (!condition) {
      throw new Error(`math.gl assertion ${message2}`);
    }
  }

  // ../../node_modules/@loaders.gl/3d-tiles/node_modules/@math.gl/core/dist/classes/base/vector.js
  var Vector10 = class extends MathArray7 {
    // ACCESSORS
    get x() {
      return this[0];
    }
    set x(value) {
      this[0] = checkNumber7(value);
    }
    get y() {
      return this[1];
    }
    set y(value) {
      this[1] = checkNumber7(value);
    }
    /**
     * Returns the length of the vector from the origin to the point described by this vector
     *
     * @note `length` is a reserved word for Arrays, so `v.length()` will return number of elements
     * Instead we provide `len` and `magnitude`
     */
    len() {
      return Math.sqrt(this.lengthSquared());
    }
    /**
     * Returns the length of the vector from the origin to the point described by this vector
     */
    magnitude() {
      return this.len();
    }
    /**
     * Returns the squared length of the vector from the origin to the point described by this vector
     */
    lengthSquared() {
      let length17 = 0;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        length17 += this[i7] * this[i7];
      }
      return length17;
    }
    /**
     * Returns the squared length of the vector from the origin to the point described by this vector
     */
    magnitudeSquared() {
      return this.lengthSquared();
    }
    distance(mathArray) {
      return Math.sqrt(this.distanceSquared(mathArray));
    }
    distanceSquared(mathArray) {
      let length17 = 0;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        const dist6 = this[i7] - mathArray[i7];
        length17 += dist6 * dist6;
      }
      return checkNumber7(length17);
    }
    dot(mathArray) {
      let product = 0;
      for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
        product += this[i7] * mathArray[i7];
      }
      return checkNumber7(product);
    }
    // MODIFIERS
    normalize() {
      const length17 = this.magnitude();
      if (length17 !== 0) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] /= length17;
        }
      }
      return this.check();
    }
    multiply(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] *= vector[i7];
        }
      }
      return this.check();
    }
    divide(...vectors) {
      for (const vector of vectors) {
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          this[i7] /= vector[i7];
        }
      }
      return this.check();
    }
    // THREE.js compatibility
    lengthSq() {
      return this.lengthSquared();
    }
    distanceTo(vector) {
      return this.distance(vector);
    }
    distanceToSquared(vector) {
      return this.distanceSquared(vector);
    }
    getComponent(i7) {
      assert16(i7 >= 0 && i7 < this.ELEMENTS, "index is out of range");
      return checkNumber7(this[i7]);
    }
    setComponent(i7, value) {
      assert16(i7 >= 0 && i7 < this.ELEMENTS, "index is out of range");
      this[i7] = value;
      return this.check();
    }
    addVectors(a6, b4) {
      return this.copy(a6).add(b4);
    }
    subVectors(a6, b4) {
      return this.copy(a6).subtract(b4);
    }
    multiplyVectors(a6, b4) {
      return this.copy(a6).multiply(b4);
    }
    addScaledVector(a6, b4) {
      return this.add(new this.constructor(a6).multiplyScalar(b4));
    }
  };

  // ../../node_modules/@loaders.gl/3d-tiles/node_modules/@math.gl/core/dist/gl-matrix/common.js
  var EPSILON31 = 1e-6;
  var ARRAY_TYPE8 = typeof Float32Array !== "undefined" ? Float32Array : Array;
  var degree8 = Math.PI / 180;

  // ../../node_modules/@loaders.gl/3d-tiles/node_modules/@math.gl/core/dist/gl-matrix/vec2.js
  function create27() {
    const out = new ARRAY_TYPE8(2);
    if (ARRAY_TYPE8 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
    }
    return out;
  }
  function transformMat313(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[3] * y5 + m3[6];
    out[1] = m3[1] * x4 + m3[4] * y5 + m3[7];
    return out;
  }
  function transformMat415(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[4] * y5 + m3[12];
    out[1] = m3[1] * x4 + m3[5] * y5 + m3[13];
    return out;
  }
  var forEach19 = function() {
    const vec = create27();
    return function(a6, stride, offset, count3, fn, arg) {
      let i7;
      let l5;
      if (!stride) {
        stride = 2;
      }
      if (!offset) {
        offset = 0;
      }
      if (count3) {
        l5 = Math.min(count3 * stride + offset, a6.length);
      } else {
        l5 = a6.length;
      }
      for (i7 = offset; i7 < l5; i7 += stride) {
        vec[0] = a6[i7];
        vec[1] = a6[i7 + 1];
        fn(vec, vec, arg);
        a6[i7] = vec[0];
        a6[i7 + 1] = vec[1];
      }
      return a6;
    };
  }();

  // ../../node_modules/@loaders.gl/3d-tiles/node_modules/@math.gl/core/dist/lib/gl-matrix-extras.js
  function vec2_transformMat4AsVector5(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const w5 = m3[3] * x4 + m3[7] * y5 || 1;
    out[0] = (m3[0] * x4 + m3[4] * y5) / w5;
    out[1] = (m3[1] * x4 + m3[5] * y5) / w5;
    return out;
  }
  function vec3_transformMat4AsVector7(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = m3[3] * x4 + m3[7] * y5 + m3[11] * z4 || 1;
    out[0] = (m3[0] * x4 + m3[4] * y5 + m3[8] * z4) / w5;
    out[1] = (m3[1] * x4 + m3[5] * y5 + m3[9] * z4) / w5;
    out[2] = (m3[2] * x4 + m3[6] * y5 + m3[10] * z4) / w5;
    return out;
  }
  function vec3_transformMat27(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[2] * y5;
    out[1] = m3[1] * x4 + m3[3] * y5;
    out[2] = a6[2];
    return out;
  }
  function vec4_transformMat24(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    out[0] = m3[0] * x4 + m3[2] * y5;
    out[1] = m3[1] * x4 + m3[3] * y5;
    out[2] = a6[2];
    out[3] = a6[3];
    return out;
  }
  function vec4_transformMat35(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    out[0] = m3[0] * x4 + m3[3] * y5 + m3[6] * z4;
    out[1] = m3[1] * x4 + m3[4] * y5 + m3[7] * z4;
    out[2] = m3[2] * x4 + m3[5] * y5 + m3[8] * z4;
    out[3] = a6[3];
    return out;
  }

  // ../../node_modules/@loaders.gl/3d-tiles/node_modules/@math.gl/core/dist/gl-matrix/vec3.js
  function create28() {
    const out = new ARRAY_TYPE8(3);
    if (ARRAY_TYPE8 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }
    return out;
  }
  function length13(a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    return Math.sqrt(x4 * x4 + y5 * y5 + z4 * z4);
  }
  function fromValues12(x4, y5, z4) {
    const out = new ARRAY_TYPE8(3);
    out[0] = x4;
    out[1] = y5;
    out[2] = z4;
    return out;
  }
  function normalize14(out, a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    let len9 = x4 * x4 + y5 * y5 + z4 * z4;
    if (len9 > 0) {
      len9 = 1 / Math.sqrt(len9);
    }
    out[0] = a6[0] * len9;
    out[1] = a6[1] * len9;
    out[2] = a6[2] * len9;
    return out;
  }
  function dot15(a6, b4) {
    return a6[0] * b4[0] + a6[1] * b4[1] + a6[2] * b4[2];
  }
  function cross10(out, a6, b4) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const bx = b4[0];
    const by = b4[1];
    const bz = b4[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
  }
  function transformMat416(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    let w5 = m3[3] * x4 + m3[7] * y5 + m3[11] * z4 + m3[15];
    w5 = w5 || 1;
    out[0] = (m3[0] * x4 + m3[4] * y5 + m3[8] * z4 + m3[12]) / w5;
    out[1] = (m3[1] * x4 + m3[5] * y5 + m3[9] * z4 + m3[13]) / w5;
    out[2] = (m3[2] * x4 + m3[6] * y5 + m3[10] * z4 + m3[14]) / w5;
    return out;
  }
  function transformMat314(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    out[0] = x4 * m3[0] + y5 * m3[3] + z4 * m3[6];
    out[1] = x4 * m3[1] + y5 * m3[4] + z4 * m3[7];
    out[2] = x4 * m3[2] + y5 * m3[5] + z4 * m3[8];
    return out;
  }
  function transformQuat11(out, a6, q3) {
    const qx = q3[0];
    const qy = q3[1];
    const qz = q3[2];
    const qw = q3[3];
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    let uvx = qy * z4 - qz * y5;
    let uvy = qz * x4 - qx * z4;
    let uvz = qx * y5 - qy * x4;
    let uuvx = qy * uvz - qz * uvy;
    let uuvy = qz * uvx - qx * uvz;
    let uuvz = qx * uvy - qy * uvx;
    const w22 = qw * 2;
    uvx *= w22;
    uvy *= w22;
    uvz *= w22;
    uuvx *= 2;
    uuvy *= 2;
    uuvz *= 2;
    out[0] = x4 + uvx + uuvx;
    out[1] = y5 + uvy + uuvy;
    out[2] = z4 + uvz + uuvz;
    return out;
  }
  function rotateX15(out, a6, b4, rad) {
    const p5 = [];
    const r5 = [];
    p5[0] = a6[0] - b4[0];
    p5[1] = a6[1] - b4[1];
    p5[2] = a6[2] - b4[2];
    r5[0] = p5[0];
    r5[1] = p5[1] * Math.cos(rad) - p5[2] * Math.sin(rad);
    r5[2] = p5[1] * Math.sin(rad) + p5[2] * Math.cos(rad);
    out[0] = r5[0] + b4[0];
    out[1] = r5[1] + b4[1];
    out[2] = r5[2] + b4[2];
    return out;
  }
  function rotateY15(out, a6, b4, rad) {
    const p5 = [];
    const r5 = [];
    p5[0] = a6[0] - b4[0];
    p5[1] = a6[1] - b4[1];
    p5[2] = a6[2] - b4[2];
    r5[0] = p5[2] * Math.sin(rad) + p5[0] * Math.cos(rad);
    r5[1] = p5[1];
    r5[2] = p5[2] * Math.cos(rad) - p5[0] * Math.sin(rad);
    out[0] = r5[0] + b4[0];
    out[1] = r5[1] + b4[1];
    out[2] = r5[2] + b4[2];
    return out;
  }
  function rotateZ15(out, a6, b4, rad) {
    const p5 = [];
    const r5 = [];
    p5[0] = a6[0] - b4[0];
    p5[1] = a6[1] - b4[1];
    p5[2] = a6[2] - b4[2];
    r5[0] = p5[0] * Math.cos(rad) - p5[1] * Math.sin(rad);
    r5[1] = p5[0] * Math.sin(rad) + p5[1] * Math.cos(rad);
    r5[2] = p5[2];
    out[0] = r5[0] + b4[0];
    out[1] = r5[1] + b4[1];
    out[2] = r5[2] + b4[2];
    return out;
  }
  function angle9(a6, b4) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const bx = b4[0];
    const by = b4[1];
    const bz = b4[2];
    const mag = Math.sqrt((ax * ax + ay * ay + az * az) * (bx * bx + by * by + bz * bz));
    const cosine = mag && dot15(a6, b4) / mag;
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
  }
  var len8 = length13;
  var forEach20 = function() {
    const vec = create28();
    return function(a6, stride, offset, count3, fn, arg) {
      let i7;
      let l5;
      if (!stride) {
        stride = 3;
      }
      if (!offset) {
        offset = 0;
      }
      if (count3) {
        l5 = Math.min(count3 * stride + offset, a6.length);
      } else {
        l5 = a6.length;
      }
      for (i7 = offset; i7 < l5; i7 += stride) {
        vec[0] = a6[i7];
        vec[1] = a6[i7 + 1];
        vec[2] = a6[i7 + 2];
        fn(vec, vec, arg);
        a6[i7] = vec[0];
        a6[i7 + 1] = vec[1];
        a6[i7 + 2] = vec[2];
      }
      return a6;
    };
  }();

  // ../../node_modules/@loaders.gl/3d-tiles/node_modules/@math.gl/core/dist/classes/vector3.js
  var ORIGIN7 = [0, 0, 0];
  var ZERO14;
  var Vector37 = class extends Vector10 {
    static get ZERO() {
      if (!ZERO14) {
        ZERO14 = new Vector37(0, 0, 0);
        Object.freeze(ZERO14);
      }
      return ZERO14;
    }
    /**
     * @class
     * @param x
     * @param y
     * @param z
     */
    constructor(x4 = 0, y5 = 0, z4 = 0) {
      super(-0, -0, -0);
      if (arguments.length === 1 && isArray10(x4)) {
        this.copy(x4);
      } else {
        if (config7.debug) {
          checkNumber7(x4);
          checkNumber7(y5);
          checkNumber7(z4);
        }
        this[0] = x4;
        this[1] = y5;
        this[2] = z4;
      }
    }
    set(x4, y5, z4) {
      this[0] = x4;
      this[1] = y5;
      this[2] = z4;
      return this.check();
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      return this.check();
    }
    fromObject(object) {
      if (config7.debug) {
        checkNumber7(object.x);
        checkNumber7(object.y);
        checkNumber7(object.z);
      }
      this[0] = object.x;
      this[1] = object.y;
      this[2] = object.z;
      return this.check();
    }
    toObject(object) {
      object.x = this[0];
      object.y = this[1];
      object.z = this[2];
      return object;
    }
    // Getters/setters
    get ELEMENTS() {
      return 3;
    }
    get z() {
      return this[2];
    }
    set z(value) {
      this[2] = checkNumber7(value);
    }
    // ACCESSORS
    angle(vector) {
      return angle9(this, vector);
    }
    // MODIFIERS
    cross(vector) {
      cross10(this, this, vector);
      return this.check();
    }
    rotateX({ radians: radians6, origin = ORIGIN7 }) {
      rotateX15(this, this, origin, radians6);
      return this.check();
    }
    rotateY({ radians: radians6, origin = ORIGIN7 }) {
      rotateY15(this, this, origin, radians6);
      return this.check();
    }
    rotateZ({ radians: radians6, origin = ORIGIN7 }) {
      rotateZ15(this, this, origin, radians6);
      return this.check();
    }
    // Transforms
    // transforms as point (4th component is implicitly 1)
    transform(matrix4) {
      return this.transformAsPoint(matrix4);
    }
    // transforms as point (4th component is implicitly 1)
    transformAsPoint(matrix4) {
      transformMat416(this, this, matrix4);
      return this.check();
    }
    // transforms as vector  (4th component is implicitly 0, ignores translation. slightly faster)
    transformAsVector(matrix4) {
      vec3_transformMat4AsVector7(this, this, matrix4);
      return this.check();
    }
    transformByMatrix3(matrix3) {
      transformMat314(this, this, matrix3);
      return this.check();
    }
    transformByMatrix2(matrix2) {
      vec3_transformMat27(this, this, matrix2);
      return this.check();
    }
    transformByQuaternion(quaternion) {
      transformQuat11(this, this, quaternion);
      return this.check();
    }
  };

  // ../../node_modules/@loaders.gl/3d-tiles/node_modules/@math.gl/core/dist/classes/vector4.js
  var ZERO15;
  var Vector44 = class extends Vector10 {
    static get ZERO() {
      if (!ZERO15) {
        ZERO15 = new Vector44(0, 0, 0, 0);
        Object.freeze(ZERO15);
      }
      return ZERO15;
    }
    constructor(x4 = 0, y5 = 0, z4 = 0, w5 = 0) {
      super(-0, -0, -0, -0);
      if (isArray10(x4) && arguments.length === 1) {
        this.copy(x4);
      } else {
        if (config7.debug) {
          checkNumber7(x4);
          checkNumber7(y5);
          checkNumber7(z4);
          checkNumber7(w5);
        }
        this[0] = x4;
        this[1] = y5;
        this[2] = z4;
        this[3] = w5;
      }
    }
    set(x4, y5, z4, w5) {
      this[0] = x4;
      this[1] = y5;
      this[2] = z4;
      this[3] = w5;
      return this.check();
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      this[3] = array[3];
      return this.check();
    }
    fromObject(object) {
      if (config7.debug) {
        checkNumber7(object.x);
        checkNumber7(object.y);
        checkNumber7(object.z);
        checkNumber7(object.w);
      }
      this[0] = object.x;
      this[1] = object.y;
      this[2] = object.z;
      this[3] = object.w;
      return this;
    }
    toObject(object) {
      object.x = this[0];
      object.y = this[1];
      object.z = this[2];
      object.w = this[3];
      return object;
    }
    // Getters/setters
    /* eslint-disable no-multi-spaces, brace-style, no-return-assign */
    get ELEMENTS() {
      return 4;
    }
    get z() {
      return this[2];
    }
    set z(value) {
      this[2] = checkNumber7(value);
    }
    get w() {
      return this[3];
    }
    set w(value) {
      this[3] = checkNumber7(value);
    }
    transform(matrix4) {
      transformMat416(this, this, matrix4);
      return this.check();
    }
    transformByMatrix3(matrix3) {
      vec4_transformMat35(this, this, matrix3);
      return this.check();
    }
    transformByMatrix2(matrix2) {
      vec4_transformMat24(this, this, matrix2);
      return this.check();
    }
    transformByQuaternion(quaternion) {
      transformQuat11(this, this, quaternion);
      return this.check();
    }
    // three.js compatibility
    applyMatrix4(m3) {
      m3.transform(this, this);
      return this;
    }
  };

  // ../../node_modules/@loaders.gl/3d-tiles/node_modules/@math.gl/core/dist/classes/base/matrix.js
  var Matrix8 = class extends MathArray7 {
    // fromObject(object) {
    //   const array = object.elements;
    //   return this.fromRowMajor(array);
    // }
    // toObject(object) {
    //   const array = object.elements;
    //   this.toRowMajor(array);
    //   return object;
    // }
    // TODO better override formatString?
    toString() {
      let string = "[";
      if (config7.printRowMajor) {
        string += "row-major:";
        for (let row = 0; row < this.RANK; ++row) {
          for (let col = 0; col < this.RANK; ++col) {
            string += ` ${this[col * this.RANK + row]}`;
          }
        }
      } else {
        string += "column-major:";
        for (let i7 = 0; i7 < this.ELEMENTS; ++i7) {
          string += ` ${this[i7]}`;
        }
      }
      string += "]";
      return string;
    }
    getElementIndex(row, col) {
      return col * this.RANK + row;
    }
    // By default assumes row major indices
    getElement(row, col) {
      return this[col * this.RANK + row];
    }
    // By default assumes row major indices
    setElement(row, col, value) {
      this[col * this.RANK + row] = checkNumber7(value);
      return this;
    }
    getColumn(columnIndex, result = new Array(this.RANK).fill(-0)) {
      const firstIndex = columnIndex * this.RANK;
      for (let i7 = 0; i7 < this.RANK; ++i7) {
        result[i7] = this[firstIndex + i7];
      }
      return result;
    }
    setColumn(columnIndex, columnVector) {
      const firstIndex = columnIndex * this.RANK;
      for (let i7 = 0; i7 < this.RANK; ++i7) {
        this[firstIndex + i7] = columnVector[i7];
      }
      return this;
    }
  };

  // ../../node_modules/@loaders.gl/3d-tiles/node_modules/@math.gl/core/dist/gl-matrix/mat3.js
  function create29() {
    const out = new ARRAY_TYPE8(9);
    if (ARRAY_TYPE8 != Float32Array) {
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[5] = 0;
      out[6] = 0;
      out[7] = 0;
    }
    out[0] = 1;
    out[4] = 1;
    out[8] = 1;
    return out;
  }
  function transpose10(out, a6) {
    if (out === a6) {
      const a01 = a6[1];
      const a02 = a6[2];
      const a12 = a6[5];
      out[1] = a6[3];
      out[2] = a6[6];
      out[3] = a01;
      out[5] = a6[7];
      out[6] = a02;
      out[7] = a12;
    } else {
      out[0] = a6[0];
      out[1] = a6[3];
      out[2] = a6[6];
      out[3] = a6[1];
      out[4] = a6[4];
      out[5] = a6[7];
      out[6] = a6[2];
      out[7] = a6[5];
      out[8] = a6[8];
    }
    return out;
  }
  function invert13(out, a6) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    const b01 = a22 * a11 - a12 * a21;
    const b11 = -a22 * a10 + a12 * a20;
    const b21 = a21 * a10 - a11 * a20;
    let det = a00 * b01 + a01 * b11 + a02 * b21;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
  }
  function determinant10(a6) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
  }
  function multiply17(out, a6, b4) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    const b00 = b4[0];
    const b01 = b4[1];
    const b02 = b4[2];
    const b10 = b4[3];
    const b11 = b4[4];
    const b12 = b4[5];
    const b20 = b4[6];
    const b21 = b4[7];
    const b22 = b4[8];
    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;
    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;
    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
  }
  function translate9(out, a6, v5) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    const x4 = v5[0];
    const y5 = v5[1];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a10;
    out[4] = a11;
    out[5] = a12;
    out[6] = x4 * a00 + y5 * a10 + a20;
    out[7] = x4 * a01 + y5 * a11 + a21;
    out[8] = x4 * a02 + y5 * a12 + a22;
    return out;
  }
  function rotate11(out, a6, rad) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a10 = a6[3];
    const a11 = a6[4];
    const a12 = a6[5];
    const a20 = a6[6];
    const a21 = a6[7];
    const a22 = a6[8];
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    out[0] = c5 * a00 + s5 * a10;
    out[1] = c5 * a01 + s5 * a11;
    out[2] = c5 * a02 + s5 * a12;
    out[3] = c5 * a10 - s5 * a00;
    out[4] = c5 * a11 - s5 * a01;
    out[5] = c5 * a12 - s5 * a02;
    out[6] = a20;
    out[7] = a21;
    out[8] = a22;
    return out;
  }
  function scale19(out, a6, v5) {
    const x4 = v5[0];
    const y5 = v5[1];
    out[0] = x4 * a6[0];
    out[1] = x4 * a6[1];
    out[2] = x4 * a6[2];
    out[3] = y5 * a6[3];
    out[4] = y5 * a6[4];
    out[5] = y5 * a6[5];
    out[6] = a6[6];
    out[7] = a6[7];
    out[8] = a6[8];
    return out;
  }
  function fromQuat10(out, q3) {
    const x4 = q3[0];
    const y5 = q3[1];
    const z4 = q3[2];
    const w5 = q3[3];
    const x22 = x4 + x4;
    const y22 = y5 + y5;
    const z22 = z4 + z4;
    const xx = x4 * x22;
    const yx = y5 * x22;
    const yy = y5 * y22;
    const zx = z4 * x22;
    const zy = z4 * y22;
    const zz = z4 * z22;
    const wx = w5 * x22;
    const wy = w5 * y22;
    const wz = w5 * z22;
    out[0] = 1 - yy - zz;
    out[3] = yx - wz;
    out[6] = zx + wy;
    out[1] = yx + wz;
    out[4] = 1 - xx - zz;
    out[7] = zy - wx;
    out[2] = zx - wy;
    out[5] = zy + wx;
    out[8] = 1 - xx - yy;
    return out;
  }

  // ../../node_modules/@loaders.gl/3d-tiles/node_modules/@math.gl/core/dist/classes/matrix3.js
  var INDICES8;
  (function(INDICES10) {
    INDICES10[INDICES10["COL0ROW0"] = 0] = "COL0ROW0";
    INDICES10[INDICES10["COL0ROW1"] = 1] = "COL0ROW1";
    INDICES10[INDICES10["COL0ROW2"] = 2] = "COL0ROW2";
    INDICES10[INDICES10["COL1ROW0"] = 3] = "COL1ROW0";
    INDICES10[INDICES10["COL1ROW1"] = 4] = "COL1ROW1";
    INDICES10[INDICES10["COL1ROW2"] = 5] = "COL1ROW2";
    INDICES10[INDICES10["COL2ROW0"] = 6] = "COL2ROW0";
    INDICES10[INDICES10["COL2ROW1"] = 7] = "COL2ROW1";
    INDICES10[INDICES10["COL2ROW2"] = 8] = "COL2ROW2";
  })(INDICES8 || (INDICES8 = {}));
  var IDENTITY_MATRIX10 = Object.freeze([1, 0, 0, 0, 1, 0, 0, 0, 1]);
  var Matrix35 = class extends Matrix8 {
    static get IDENTITY() {
      return getIdentityMatrix8();
    }
    static get ZERO() {
      return getZeroMatrix8();
    }
    get ELEMENTS() {
      return 9;
    }
    get RANK() {
      return 3;
    }
    get INDICES() {
      return INDICES8;
    }
    constructor(array, ...args) {
      super(-0, -0, -0, -0, -0, -0, -0, -0, -0);
      if (arguments.length === 1 && Array.isArray(array)) {
        this.copy(array);
      } else if (args.length > 0) {
        this.copy([array, ...args]);
      } else {
        this.identity();
      }
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      this[3] = array[3];
      this[4] = array[4];
      this[5] = array[5];
      this[6] = array[6];
      this[7] = array[7];
      this[8] = array[8];
      return this.check();
    }
    // Constructors
    identity() {
      return this.copy(IDENTITY_MATRIX10);
    }
    /**
     *
     * @param object
     * @returns self
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    fromObject(object) {
      return this.check();
    }
    /** Calculates a 3x3 matrix from the given quaternion
     * q quat  Quaternion to create matrix from
     */
    fromQuaternion(q3) {
      fromQuat10(this, q3);
      return this.check();
    }
    /**
     * accepts column major order, stores in column major order
     */
    // eslint-disable-next-line max-params
    set(m00, m10, m20, m01, m11, m21, m02, m12, m22) {
      this[0] = m00;
      this[1] = m10;
      this[2] = m20;
      this[3] = m01;
      this[4] = m11;
      this[5] = m21;
      this[6] = m02;
      this[7] = m12;
      this[8] = m22;
      return this.check();
    }
    /**
     * accepts row major order, stores as column major
     */
    // eslint-disable-next-line max-params
    setRowMajor(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
      this[0] = m00;
      this[1] = m10;
      this[2] = m20;
      this[3] = m01;
      this[4] = m11;
      this[5] = m21;
      this[6] = m02;
      this[7] = m12;
      this[8] = m22;
      return this.check();
    }
    // Accessors
    determinant() {
      return determinant10(this);
    }
    // Modifiers
    transpose() {
      transpose10(this, this);
      return this.check();
    }
    /** Invert a matrix. Note that this can fail if the matrix is not invertible */
    invert() {
      invert13(this, this);
      return this.check();
    }
    // Operations
    multiplyLeft(a6) {
      multiply17(this, a6, this);
      return this.check();
    }
    multiplyRight(a6) {
      multiply17(this, this, a6);
      return this.check();
    }
    rotate(radians6) {
      rotate11(this, this, radians6);
      return this.check();
    }
    scale(factor) {
      if (Array.isArray(factor)) {
        scale19(this, this, factor);
      } else {
        scale19(this, this, [factor, factor]);
      }
      return this.check();
    }
    translate(vec) {
      translate9(this, this, vec);
      return this.check();
    }
    // Transforms
    transform(vector, result) {
      let out;
      switch (vector.length) {
        case 2:
          out = transformMat313(result || [-0, -0], vector, this);
          break;
        case 3:
          out = transformMat314(result || [-0, -0, -0], vector, this);
          break;
        case 4:
          out = vec4_transformMat35(result || [-0, -0, -0, -0], vector, this);
          break;
        default:
          throw new Error("Illegal vector");
      }
      checkVector6(out, vector.length);
      return out;
    }
    /** @deprecated */
    transformVector(vector, result) {
      return this.transform(vector, result);
    }
    /** @deprecated */
    transformVector2(vector, result) {
      return this.transform(vector, result);
    }
    /** @deprecated */
    transformVector3(vector, result) {
      return this.transform(vector, result);
    }
  };
  var ZERO_MATRIX35;
  var IDENTITY_MATRIX35 = null;
  function getZeroMatrix8() {
    if (!ZERO_MATRIX35) {
      ZERO_MATRIX35 = new Matrix35([0, 0, 0, 0, 0, 0, 0, 0, 0]);
      Object.freeze(ZERO_MATRIX35);
    }
    return ZERO_MATRIX35;
  }
  function getIdentityMatrix8() {
    if (!IDENTITY_MATRIX35) {
      IDENTITY_MATRIX35 = new Matrix35();
      Object.freeze(IDENTITY_MATRIX35);
    }
    return IDENTITY_MATRIX35;
  }

  // ../../node_modules/@loaders.gl/3d-tiles/node_modules/@math.gl/core/dist/gl-matrix/mat4.js
  function identity10(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function transpose11(out, a6) {
    if (out === a6) {
      const a01 = a6[1];
      const a02 = a6[2];
      const a03 = a6[3];
      const a12 = a6[6];
      const a13 = a6[7];
      const a23 = a6[11];
      out[1] = a6[4];
      out[2] = a6[8];
      out[3] = a6[12];
      out[4] = a01;
      out[6] = a6[9];
      out[7] = a6[13];
      out[8] = a02;
      out[9] = a12;
      out[11] = a6[14];
      out[12] = a03;
      out[13] = a13;
      out[14] = a23;
    } else {
      out[0] = a6[0];
      out[1] = a6[4];
      out[2] = a6[8];
      out[3] = a6[12];
      out[4] = a6[1];
      out[5] = a6[5];
      out[6] = a6[9];
      out[7] = a6[13];
      out[8] = a6[2];
      out[9] = a6[6];
      out[10] = a6[10];
      out[11] = a6[14];
      out[12] = a6[3];
      out[13] = a6[7];
      out[14] = a6[11];
      out[15] = a6[15];
    }
    return out;
  }
  function invert14(out, a6) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    const a30 = a6[12];
    const a31 = a6[13];
    const a32 = a6[14];
    const a33 = a6[15];
    const b00 = a00 * a11 - a01 * a10;
    const b01 = a00 * a12 - a02 * a10;
    const b02 = a00 * a13 - a03 * a10;
    const b03 = a01 * a12 - a02 * a11;
    const b04 = a01 * a13 - a03 * a11;
    const b05 = a02 * a13 - a03 * a12;
    const b06 = a20 * a31 - a21 * a30;
    const b07 = a20 * a32 - a22 * a30;
    const b08 = a20 * a33 - a23 * a30;
    const b09 = a21 * a32 - a22 * a31;
    const b10 = a21 * a33 - a23 * a31;
    const b11 = a22 * a33 - a23 * a32;
    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
    return out;
  }
  function determinant11(a6) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    const a30 = a6[12];
    const a31 = a6[13];
    const a32 = a6[14];
    const a33 = a6[15];
    const b0 = a00 * a11 - a01 * a10;
    const b1 = a00 * a12 - a02 * a10;
    const b22 = a01 * a12 - a02 * a11;
    const b32 = a20 * a31 - a21 * a30;
    const b4 = a20 * a32 - a22 * a30;
    const b5 = a21 * a32 - a22 * a31;
    const b6 = a00 * b5 - a01 * b4 + a02 * b32;
    const b7 = a10 * b5 - a11 * b4 + a12 * b32;
    const b8 = a20 * b22 - a21 * b1 + a22 * b0;
    const b9 = a30 * b22 - a31 * b1 + a32 * b0;
    return a13 * b6 - a03 * b7 + a33 * b8 - a23 * b9;
  }
  function multiply18(out, a6, b4) {
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    const a30 = a6[12];
    const a31 = a6[13];
    const a32 = a6[14];
    const a33 = a6[15];
    let b0 = b4[0];
    let b1 = b4[1];
    let b22 = b4[2];
    let b32 = b4[3];
    out[0] = b0 * a00 + b1 * a10 + b22 * a20 + b32 * a30;
    out[1] = b0 * a01 + b1 * a11 + b22 * a21 + b32 * a31;
    out[2] = b0 * a02 + b1 * a12 + b22 * a22 + b32 * a32;
    out[3] = b0 * a03 + b1 * a13 + b22 * a23 + b32 * a33;
    b0 = b4[4];
    b1 = b4[5];
    b22 = b4[6];
    b32 = b4[7];
    out[4] = b0 * a00 + b1 * a10 + b22 * a20 + b32 * a30;
    out[5] = b0 * a01 + b1 * a11 + b22 * a21 + b32 * a31;
    out[6] = b0 * a02 + b1 * a12 + b22 * a22 + b32 * a32;
    out[7] = b0 * a03 + b1 * a13 + b22 * a23 + b32 * a33;
    b0 = b4[8];
    b1 = b4[9];
    b22 = b4[10];
    b32 = b4[11];
    out[8] = b0 * a00 + b1 * a10 + b22 * a20 + b32 * a30;
    out[9] = b0 * a01 + b1 * a11 + b22 * a21 + b32 * a31;
    out[10] = b0 * a02 + b1 * a12 + b22 * a22 + b32 * a32;
    out[11] = b0 * a03 + b1 * a13 + b22 * a23 + b32 * a33;
    b0 = b4[12];
    b1 = b4[13];
    b22 = b4[14];
    b32 = b4[15];
    out[12] = b0 * a00 + b1 * a10 + b22 * a20 + b32 * a30;
    out[13] = b0 * a01 + b1 * a11 + b22 * a21 + b32 * a31;
    out[14] = b0 * a02 + b1 * a12 + b22 * a22 + b32 * a32;
    out[15] = b0 * a03 + b1 * a13 + b22 * a23 + b32 * a33;
    return out;
  }
  function translate10(out, a6, v5) {
    const x4 = v5[0];
    const y5 = v5[1];
    const z4 = v5[2];
    let a00;
    let a01;
    let a02;
    let a03;
    let a10;
    let a11;
    let a12;
    let a13;
    let a20;
    let a21;
    let a22;
    let a23;
    if (a6 === out) {
      out[12] = a6[0] * x4 + a6[4] * y5 + a6[8] * z4 + a6[12];
      out[13] = a6[1] * x4 + a6[5] * y5 + a6[9] * z4 + a6[13];
      out[14] = a6[2] * x4 + a6[6] * y5 + a6[10] * z4 + a6[14];
      out[15] = a6[3] * x4 + a6[7] * y5 + a6[11] * z4 + a6[15];
    } else {
      a00 = a6[0];
      a01 = a6[1];
      a02 = a6[2];
      a03 = a6[3];
      a10 = a6[4];
      a11 = a6[5];
      a12 = a6[6];
      a13 = a6[7];
      a20 = a6[8];
      a21 = a6[9];
      a22 = a6[10];
      a23 = a6[11];
      out[0] = a00;
      out[1] = a01;
      out[2] = a02;
      out[3] = a03;
      out[4] = a10;
      out[5] = a11;
      out[6] = a12;
      out[7] = a13;
      out[8] = a20;
      out[9] = a21;
      out[10] = a22;
      out[11] = a23;
      out[12] = a00 * x4 + a10 * y5 + a20 * z4 + a6[12];
      out[13] = a01 * x4 + a11 * y5 + a21 * z4 + a6[13];
      out[14] = a02 * x4 + a12 * y5 + a22 * z4 + a6[14];
      out[15] = a03 * x4 + a13 * y5 + a23 * z4 + a6[15];
    }
    return out;
  }
  function scale20(out, a6, v5) {
    const x4 = v5[0];
    const y5 = v5[1];
    const z4 = v5[2];
    out[0] = a6[0] * x4;
    out[1] = a6[1] * x4;
    out[2] = a6[2] * x4;
    out[3] = a6[3] * x4;
    out[4] = a6[4] * y5;
    out[5] = a6[5] * y5;
    out[6] = a6[6] * y5;
    out[7] = a6[7] * y5;
    out[8] = a6[8] * z4;
    out[9] = a6[9] * z4;
    out[10] = a6[10] * z4;
    out[11] = a6[11] * z4;
    out[12] = a6[12];
    out[13] = a6[13];
    out[14] = a6[14];
    out[15] = a6[15];
    return out;
  }
  function rotate12(out, a6, rad, axis) {
    let x4 = axis[0];
    let y5 = axis[1];
    let z4 = axis[2];
    let len9 = Math.sqrt(x4 * x4 + y5 * y5 + z4 * z4);
    let c5;
    let s5;
    let t5;
    let a00;
    let a01;
    let a02;
    let a03;
    let a10;
    let a11;
    let a12;
    let a13;
    let a20;
    let a21;
    let a22;
    let a23;
    let b00;
    let b01;
    let b02;
    let b10;
    let b11;
    let b12;
    let b20;
    let b21;
    let b22;
    if (len9 < EPSILON31) {
      return null;
    }
    len9 = 1 / len9;
    x4 *= len9;
    y5 *= len9;
    z4 *= len9;
    s5 = Math.sin(rad);
    c5 = Math.cos(rad);
    t5 = 1 - c5;
    a00 = a6[0];
    a01 = a6[1];
    a02 = a6[2];
    a03 = a6[3];
    a10 = a6[4];
    a11 = a6[5];
    a12 = a6[6];
    a13 = a6[7];
    a20 = a6[8];
    a21 = a6[9];
    a22 = a6[10];
    a23 = a6[11];
    b00 = x4 * x4 * t5 + c5;
    b01 = y5 * x4 * t5 + z4 * s5;
    b02 = z4 * x4 * t5 - y5 * s5;
    b10 = x4 * y5 * t5 - z4 * s5;
    b11 = y5 * y5 * t5 + c5;
    b12 = z4 * y5 * t5 + x4 * s5;
    b20 = x4 * z4 * t5 + y5 * s5;
    b21 = y5 * z4 * t5 - x4 * s5;
    b22 = z4 * z4 * t5 + c5;
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;
    if (a6 !== out) {
      out[12] = a6[12];
      out[13] = a6[13];
      out[14] = a6[14];
      out[15] = a6[15];
    }
    return out;
  }
  function rotateX16(out, a6, rad) {
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    if (a6 !== out) {
      out[0] = a6[0];
      out[1] = a6[1];
      out[2] = a6[2];
      out[3] = a6[3];
      out[12] = a6[12];
      out[13] = a6[13];
      out[14] = a6[14];
      out[15] = a6[15];
    }
    out[4] = a10 * c5 + a20 * s5;
    out[5] = a11 * c5 + a21 * s5;
    out[6] = a12 * c5 + a22 * s5;
    out[7] = a13 * c5 + a23 * s5;
    out[8] = a20 * c5 - a10 * s5;
    out[9] = a21 * c5 - a11 * s5;
    out[10] = a22 * c5 - a12 * s5;
    out[11] = a23 * c5 - a13 * s5;
    return out;
  }
  function rotateY16(out, a6, rad) {
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a20 = a6[8];
    const a21 = a6[9];
    const a22 = a6[10];
    const a23 = a6[11];
    if (a6 !== out) {
      out[4] = a6[4];
      out[5] = a6[5];
      out[6] = a6[6];
      out[7] = a6[7];
      out[12] = a6[12];
      out[13] = a6[13];
      out[14] = a6[14];
      out[15] = a6[15];
    }
    out[0] = a00 * c5 - a20 * s5;
    out[1] = a01 * c5 - a21 * s5;
    out[2] = a02 * c5 - a22 * s5;
    out[3] = a03 * c5 - a23 * s5;
    out[8] = a00 * s5 + a20 * c5;
    out[9] = a01 * s5 + a21 * c5;
    out[10] = a02 * s5 + a22 * c5;
    out[11] = a03 * s5 + a23 * c5;
    return out;
  }
  function rotateZ16(out, a6, rad) {
    const s5 = Math.sin(rad);
    const c5 = Math.cos(rad);
    const a00 = a6[0];
    const a01 = a6[1];
    const a02 = a6[2];
    const a03 = a6[3];
    const a10 = a6[4];
    const a11 = a6[5];
    const a12 = a6[6];
    const a13 = a6[7];
    if (a6 !== out) {
      out[8] = a6[8];
      out[9] = a6[9];
      out[10] = a6[10];
      out[11] = a6[11];
      out[12] = a6[12];
      out[13] = a6[13];
      out[14] = a6[14];
      out[15] = a6[15];
    }
    out[0] = a00 * c5 + a10 * s5;
    out[1] = a01 * c5 + a11 * s5;
    out[2] = a02 * c5 + a12 * s5;
    out[3] = a03 * c5 + a13 * s5;
    out[4] = a10 * c5 - a00 * s5;
    out[5] = a11 * c5 - a01 * s5;
    out[6] = a12 * c5 - a02 * s5;
    out[7] = a13 * c5 - a03 * s5;
    return out;
  }
  function fromQuat11(out, q3) {
    const x4 = q3[0];
    const y5 = q3[1];
    const z4 = q3[2];
    const w5 = q3[3];
    const x22 = x4 + x4;
    const y22 = y5 + y5;
    const z22 = z4 + z4;
    const xx = x4 * x22;
    const yx = y5 * x22;
    const yy = y5 * y22;
    const zx = z4 * x22;
    const zy = z4 * y22;
    const zz = z4 * z22;
    const wx = w5 * x22;
    const wy = w5 * y22;
    const wz = w5 * z22;
    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;
    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;
    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function frustum5(out, left, right, bottom, top, near, far) {
    const rl = 1 / (right - left);
    const tb = 1 / (top - bottom);
    const nf = 1 / (near - far);
    out[0] = near * 2 * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = near * 2 * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = far * near * 2 * nf;
    out[15] = 0;
    return out;
  }
  function perspectiveNO5(out, fovy, aspect, near, far) {
    const f6 = 1 / Math.tan(fovy / 2);
    out[0] = f6 / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f6;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
      const nf = 1 / (near - far);
      out[10] = (far + near) * nf;
      out[14] = 2 * far * near * nf;
    } else {
      out[10] = -1;
      out[14] = -2 * near;
    }
    return out;
  }
  var perspective5 = perspectiveNO5;
  function orthoNO5(out, left, right, bottom, top, near, far) {
    const lr = 1 / (left - right);
    const bt = 1 / (bottom - top);
    const nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
  }
  var ortho5 = orthoNO5;
  function lookAt5(out, eye, center2, up) {
    let len9;
    let x0;
    let x1;
    let x22;
    let y0;
    let y1;
    let y22;
    let z0;
    let z1;
    let z22;
    const eyex = eye[0];
    const eyey = eye[1];
    const eyez = eye[2];
    const upx = up[0];
    const upy = up[1];
    const upz = up[2];
    const centerx = center2[0];
    const centery = center2[1];
    const centerz = center2[2];
    if (Math.abs(eyex - centerx) < EPSILON31 && Math.abs(eyey - centery) < EPSILON31 && Math.abs(eyez - centerz) < EPSILON31) {
      return identity10(out);
    }
    z0 = eyex - centerx;
    z1 = eyey - centery;
    z22 = eyez - centerz;
    len9 = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z22 * z22);
    z0 *= len9;
    z1 *= len9;
    z22 *= len9;
    x0 = upy * z22 - upz * z1;
    x1 = upz * z0 - upx * z22;
    x22 = upx * z1 - upy * z0;
    len9 = Math.sqrt(x0 * x0 + x1 * x1 + x22 * x22);
    if (!len9) {
      x0 = 0;
      x1 = 0;
      x22 = 0;
    } else {
      len9 = 1 / len9;
      x0 *= len9;
      x1 *= len9;
      x22 *= len9;
    }
    y0 = z1 * x22 - z22 * x1;
    y1 = z22 * x0 - z0 * x22;
    y22 = z0 * x1 - z1 * x0;
    len9 = Math.sqrt(y0 * y0 + y1 * y1 + y22 * y22);
    if (!len9) {
      y0 = 0;
      y1 = 0;
      y22 = 0;
    } else {
      len9 = 1 / len9;
      y0 *= len9;
      y1 *= len9;
      y22 *= len9;
    }
    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x22;
    out[9] = y22;
    out[10] = z22;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x22 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y22 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z22 * eyez);
    out[15] = 1;
    return out;
  }

  // ../../node_modules/@loaders.gl/3d-tiles/node_modules/@math.gl/core/dist/gl-matrix/vec4.js
  function create30() {
    const out = new ARRAY_TYPE8(4);
    if (ARRAY_TYPE8 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
    }
    return out;
  }
  function add14(out, a6, b4) {
    out[0] = a6[0] + b4[0];
    out[1] = a6[1] + b4[1];
    out[2] = a6[2] + b4[2];
    out[3] = a6[3] + b4[3];
    return out;
  }
  function scale21(out, a6, b4) {
    out[0] = a6[0] * b4;
    out[1] = a6[1] * b4;
    out[2] = a6[2] * b4;
    out[3] = a6[3] * b4;
    return out;
  }
  function length14(a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = a6[3];
    return Math.sqrt(x4 * x4 + y5 * y5 + z4 * z4 + w5 * w5);
  }
  function squaredLength11(a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = a6[3];
    return x4 * x4 + y5 * y5 + z4 * z4 + w5 * w5;
  }
  function normalize15(out, a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = a6[3];
    let len9 = x4 * x4 + y5 * y5 + z4 * z4 + w5 * w5;
    if (len9 > 0) {
      len9 = 1 / Math.sqrt(len9);
    }
    out[0] = x4 * len9;
    out[1] = y5 * len9;
    out[2] = z4 * len9;
    out[3] = w5 * len9;
    return out;
  }
  function dot16(a6, b4) {
    return a6[0] * b4[0] + a6[1] * b4[1] + a6[2] * b4[2] + a6[3] * b4[3];
  }
  function lerp17(out, a6, b4, t5) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    out[0] = ax + t5 * (b4[0] - ax);
    out[1] = ay + t5 * (b4[1] - ay);
    out[2] = az + t5 * (b4[2] - az);
    out[3] = aw + t5 * (b4[3] - aw);
    return out;
  }
  function transformMat417(out, a6, m3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const w5 = a6[3];
    out[0] = m3[0] * x4 + m3[4] * y5 + m3[8] * z4 + m3[12] * w5;
    out[1] = m3[1] * x4 + m3[5] * y5 + m3[9] * z4 + m3[13] * w5;
    out[2] = m3[2] * x4 + m3[6] * y5 + m3[10] * z4 + m3[14] * w5;
    out[3] = m3[3] * x4 + m3[7] * y5 + m3[11] * z4 + m3[15] * w5;
    return out;
  }
  function transformQuat12(out, a6, q3) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    const qx = q3[0];
    const qy = q3[1];
    const qz = q3[2];
    const qw = q3[3];
    const ix = qw * x4 + qy * z4 - qz * y5;
    const iy = qw * y5 + qz * x4 - qx * z4;
    const iz = qw * z4 + qx * y5 - qy * x4;
    const iw = -qx * x4 - qy * y5 - qz * z4;
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    out[3] = a6[3];
    return out;
  }
  var forEach21 = function() {
    const vec = create30();
    return function(a6, stride, offset, count3, fn, arg) {
      let i7;
      let l5;
      if (!stride) {
        stride = 4;
      }
      if (!offset) {
        offset = 0;
      }
      if (count3) {
        l5 = Math.min(count3 * stride + offset, a6.length);
      } else {
        l5 = a6.length;
      }
      for (i7 = offset; i7 < l5; i7 += stride) {
        vec[0] = a6[i7];
        vec[1] = a6[i7 + 1];
        vec[2] = a6[i7 + 2];
        vec[3] = a6[i7 + 3];
        fn(vec, vec, arg);
        a6[i7] = vec[0];
        a6[i7 + 1] = vec[1];
        a6[i7 + 2] = vec[2];
        a6[i7 + 3] = vec[3];
      }
      return a6;
    };
  }();

  // ../../node_modules/@loaders.gl/3d-tiles/node_modules/@math.gl/core/dist/classes/matrix4.js
  var INDICES9;
  (function(INDICES10) {
    INDICES10[INDICES10["COL0ROW0"] = 0] = "COL0ROW0";
    INDICES10[INDICES10["COL0ROW1"] = 1] = "COL0ROW1";
    INDICES10[INDICES10["COL0ROW2"] = 2] = "COL0ROW2";
    INDICES10[INDICES10["COL0ROW3"] = 3] = "COL0ROW3";
    INDICES10[INDICES10["COL1ROW0"] = 4] = "COL1ROW0";
    INDICES10[INDICES10["COL1ROW1"] = 5] = "COL1ROW1";
    INDICES10[INDICES10["COL1ROW2"] = 6] = "COL1ROW2";
    INDICES10[INDICES10["COL1ROW3"] = 7] = "COL1ROW3";
    INDICES10[INDICES10["COL2ROW0"] = 8] = "COL2ROW0";
    INDICES10[INDICES10["COL2ROW1"] = 9] = "COL2ROW1";
    INDICES10[INDICES10["COL2ROW2"] = 10] = "COL2ROW2";
    INDICES10[INDICES10["COL2ROW3"] = 11] = "COL2ROW3";
    INDICES10[INDICES10["COL3ROW0"] = 12] = "COL3ROW0";
    INDICES10[INDICES10["COL3ROW1"] = 13] = "COL3ROW1";
    INDICES10[INDICES10["COL3ROW2"] = 14] = "COL3ROW2";
    INDICES10[INDICES10["COL3ROW3"] = 15] = "COL3ROW3";
  })(INDICES9 || (INDICES9 = {}));
  var DEFAULT_FOVY4 = 45 * Math.PI / 180;
  var DEFAULT_ASPECT4 = 1;
  var DEFAULT_NEAR4 = 0.1;
  var DEFAULT_FAR4 = 500;
  var IDENTITY_MATRIX11 = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
  var Matrix45 = class extends Matrix8 {
    static get IDENTITY() {
      return getIdentityMatrix9();
    }
    static get ZERO() {
      return getZeroMatrix9();
    }
    get ELEMENTS() {
      return 16;
    }
    get RANK() {
      return 4;
    }
    get INDICES() {
      return INDICES9;
    }
    constructor(array) {
      super(-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0);
      if (arguments.length === 1 && Array.isArray(array)) {
        this.copy(array);
      } else {
        this.identity();
      }
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      this[3] = array[3];
      this[4] = array[4];
      this[5] = array[5];
      this[6] = array[6];
      this[7] = array[7];
      this[8] = array[8];
      this[9] = array[9];
      this[10] = array[10];
      this[11] = array[11];
      this[12] = array[12];
      this[13] = array[13];
      this[14] = array[14];
      this[15] = array[15];
      return this.check();
    }
    // eslint-disable-next-line max-params
    set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {
      this[0] = m00;
      this[1] = m10;
      this[2] = m20;
      this[3] = m30;
      this[4] = m01;
      this[5] = m11;
      this[6] = m21;
      this[7] = m31;
      this[8] = m02;
      this[9] = m12;
      this[10] = m22;
      this[11] = m32;
      this[12] = m03;
      this[13] = m13;
      this[14] = m23;
      this[15] = m33;
      return this.check();
    }
    // accepts row major order, stores as column major
    // eslint-disable-next-line max-params
    setRowMajor(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
      this[0] = m00;
      this[1] = m10;
      this[2] = m20;
      this[3] = m30;
      this[4] = m01;
      this[5] = m11;
      this[6] = m21;
      this[7] = m31;
      this[8] = m02;
      this[9] = m12;
      this[10] = m22;
      this[11] = m32;
      this[12] = m03;
      this[13] = m13;
      this[14] = m23;
      this[15] = m33;
      return this.check();
    }
    toRowMajor(result) {
      result[0] = this[0];
      result[1] = this[4];
      result[2] = this[8];
      result[3] = this[12];
      result[4] = this[1];
      result[5] = this[5];
      result[6] = this[9];
      result[7] = this[13];
      result[8] = this[2];
      result[9] = this[6];
      result[10] = this[10];
      result[11] = this[14];
      result[12] = this[3];
      result[13] = this[7];
      result[14] = this[11];
      result[15] = this[15];
      return result;
    }
    // Constructors
    /** Set to identity matrix */
    identity() {
      return this.copy(IDENTITY_MATRIX11);
    }
    /**
     *
     * @param object
     * @returns self
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    fromObject(object) {
      return this.check();
    }
    /**
     * Calculates a 4x4 matrix from the given quaternion
     * @param quaternion Quaternion to create matrix from
     * @returns self
     */
    fromQuaternion(quaternion) {
      fromQuat11(this, quaternion);
      return this.check();
    }
    /**
     * Generates a frustum matrix with the given bounds
     * @param view.left - Left bound of the frustum
     * @param view.right - Right bound of the frustum
     * @param view.bottom - Bottom bound of the frustum
     * @param view.top - Top bound of the frustum
     * @param view.near - Near bound of the frustum
     * @param view.far - Far bound of the frustum. Can be set to Infinity.
     * @returns self
     */
    frustum(view) {
      const { left, right, bottom, top, near = DEFAULT_NEAR4, far = DEFAULT_FAR4 } = view;
      if (far === Infinity) {
        computeInfinitePerspectiveOffCenter4(this, left, right, bottom, top, near);
      } else {
        frustum5(this, left, right, bottom, top, near, far);
      }
      return this.check();
    }
    /**
     * Generates a look-at matrix with the given eye position, focal point,
     * and up axis
     * @param view.eye - (vector) Position of the viewer
     * @param view.center - (vector) Point the viewer is looking at
     * @param view.up - (vector) Up axis
     * @returns self
     */
    lookAt(view) {
      const { eye, center: center2 = [0, 0, 0], up = [0, 1, 0] } = view;
      lookAt5(this, eye, center2, up);
      return this.check();
    }
    /**
     * Generates a orthogonal projection matrix with the given bounds
     * from "traditional" view space parameters
     * @param view.left - Left bound of the frustum
     * @param view.right number  Right bound of the frustum
     * @param view.bottom - Bottom bound of the frustum
     * @param view.top number  Top bound of the frustum
     * @param view.near - Near bound of the frustum
     * @param view.far number  Far bound of the frustum
     * @returns self
     */
    ortho(view) {
      const { left, right, bottom, top, near = DEFAULT_NEAR4, far = DEFAULT_FAR4 } = view;
      ortho5(this, left, right, bottom, top, near, far);
      return this.check();
    }
    /**
     * Generates an orthogonal projection matrix with the same parameters
     * as a perspective matrix (plus focalDistance)
     * @param view.fovy Vertical field of view in radians
     * @param view.aspect Aspect ratio. Typically viewport width / viewport height
     * @param view.focalDistance Distance in the view frustum used for extent calculations
     * @param view.near Near bound of the frustum
     * @param view.far Far bound of the frustum
     * @returns self
     */
    orthographic(view) {
      const { fovy = DEFAULT_FOVY4, aspect = DEFAULT_ASPECT4, focalDistance = 1, near = DEFAULT_NEAR4, far = DEFAULT_FAR4 } = view;
      checkRadians4(fovy);
      const halfY = fovy / 2;
      const top = focalDistance * Math.tan(halfY);
      const right = top * aspect;
      return this.ortho({
        left: -right,
        right,
        bottom: -top,
        top,
        near,
        far
      });
    }
    /**
     * Generates a perspective projection matrix with the given bounds
     * @param view.fovy Vertical field of view in radians
     * @param view.aspect Aspect ratio. typically viewport width/height
     * @param view.near Near bound of the frustum
     * @param view.far Far bound of the frustum
     * @returns self
     */
    perspective(view) {
      const { fovy = 45 * Math.PI / 180, aspect = 1, near = 0.1, far = 500 } = view;
      checkRadians4(fovy);
      perspective5(this, fovy, aspect, near, far);
      return this.check();
    }
    // Accessors
    determinant() {
      return determinant11(this);
    }
    /**
     * Extracts the non-uniform scale assuming the matrix is an affine transformation.
     * The scales are the "lengths" of the column vectors in the upper-left 3x3 matrix.
     * @param result
     * @returns self
     */
    getScale(result = [-0, -0, -0]) {
      result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);
      result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);
      result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);
      return result;
    }
    /**
     * Gets the translation portion, assuming the matrix is a affine transformation matrix.
     * @param result
     * @returns self
     */
    getTranslation(result = [-0, -0, -0]) {
      result[0] = this[12];
      result[1] = this[13];
      result[2] = this[14];
      return result;
    }
    /**
     * Gets upper left 3x3 pure rotation matrix (non-scaling), assume affine transformation matrix
     * @param result
     * @param scaleResult
     * @returns self
     */
    getRotation(result, scaleResult) {
      result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];
      scaleResult = scaleResult || [-0, -0, -0];
      const scale24 = this.getScale(scaleResult);
      const inverseScale0 = 1 / scale24[0];
      const inverseScale1 = 1 / scale24[1];
      const inverseScale2 = 1 / scale24[2];
      result[0] = this[0] * inverseScale0;
      result[1] = this[1] * inverseScale1;
      result[2] = this[2] * inverseScale2;
      result[3] = 0;
      result[4] = this[4] * inverseScale0;
      result[5] = this[5] * inverseScale1;
      result[6] = this[6] * inverseScale2;
      result[7] = 0;
      result[8] = this[8] * inverseScale0;
      result[9] = this[9] * inverseScale1;
      result[10] = this[10] * inverseScale2;
      result[11] = 0;
      result[12] = 0;
      result[13] = 0;
      result[14] = 0;
      result[15] = 1;
      return result;
    }
    /**
     *
     * @param result
     * @param scaleResult
     * @returns self
     */
    getRotationMatrix3(result, scaleResult) {
      result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0];
      scaleResult = scaleResult || [-0, -0, -0];
      const scale24 = this.getScale(scaleResult);
      const inverseScale0 = 1 / scale24[0];
      const inverseScale1 = 1 / scale24[1];
      const inverseScale2 = 1 / scale24[2];
      result[0] = this[0] * inverseScale0;
      result[1] = this[1] * inverseScale1;
      result[2] = this[2] * inverseScale2;
      result[3] = this[4] * inverseScale0;
      result[4] = this[5] * inverseScale1;
      result[5] = this[6] * inverseScale2;
      result[6] = this[8] * inverseScale0;
      result[7] = this[9] * inverseScale1;
      result[8] = this[10] * inverseScale2;
      return result;
    }
    // Modifiers
    transpose() {
      transpose11(this, this);
      return this.check();
    }
    invert() {
      invert14(this, this);
      return this.check();
    }
    // Operations
    multiplyLeft(a6) {
      multiply18(this, a6, this);
      return this.check();
    }
    multiplyRight(a6) {
      multiply18(this, this, a6);
      return this.check();
    }
    // Rotates a matrix by the given angle around the X axis
    rotateX(radians6) {
      rotateX16(this, this, radians6);
      return this.check();
    }
    // Rotates a matrix by the given angle around the Y axis.
    rotateY(radians6) {
      rotateY16(this, this, radians6);
      return this.check();
    }
    /**
     * Rotates a matrix by the given angle around the Z axis.
     * @param radians
     * @returns self
     */
    rotateZ(radians6) {
      rotateZ16(this, this, radians6);
      return this.check();
    }
    /**
     *
     * @param param0
     * @returns self
     */
    rotateXYZ(angleXYZ) {
      return this.rotateX(angleXYZ[0]).rotateY(angleXYZ[1]).rotateZ(angleXYZ[2]);
    }
    /**
     *
     * @param radians
     * @param axis
     * @returns self
     */
    rotateAxis(radians6, axis) {
      rotate12(this, this, radians6, axis);
      return this.check();
    }
    /**
     *
     * @param factor
     * @returns self
     */
    scale(factor) {
      scale20(this, this, Array.isArray(factor) ? factor : [factor, factor, factor]);
      return this.check();
    }
    /**
     *
     * @param vec
     * @returns self
     */
    translate(vector) {
      translate10(this, this, vector);
      return this.check();
    }
    // Transforms
    /**
     * Transforms any 2, 3 or 4 element vector. 2 and 3 elements are treated as points
     * @param vector
     * @param result
     * @returns self
     */
    transform(vector, result) {
      if (vector.length === 4) {
        result = transformMat417(result || [-0, -0, -0, -0], vector, this);
        checkVector6(result, 4);
        return result;
      }
      return this.transformAsPoint(vector, result);
    }
    /**
     * Transforms any 2 or 3 element array as point (w implicitly 1)
     * @param vector
     * @param result
     * @returns self
     */
    transformAsPoint(vector, result) {
      const { length: length17 } = vector;
      let out;
      switch (length17) {
        case 2:
          out = transformMat415(result || [-0, -0], vector, this);
          break;
        case 3:
          out = transformMat416(result || [-0, -0, -0], vector, this);
          break;
        default:
          throw new Error("Illegal vector");
      }
      checkVector6(out, vector.length);
      return out;
    }
    /**
     * Transforms any 2 or 3 element array as vector (w implicitly 0)
     * @param vector
     * @param result
     * @returns self
     */
    transformAsVector(vector, result) {
      let out;
      switch (vector.length) {
        case 2:
          out = vec2_transformMat4AsVector5(result || [-0, -0], vector, this);
          break;
        case 3:
          out = vec3_transformMat4AsVector7(result || [-0, -0, -0], vector, this);
          break;
        default:
          throw new Error("Illegal vector");
      }
      checkVector6(out, vector.length);
      return out;
    }
    /** @deprecated */
    transformPoint(vector, result) {
      return this.transformAsPoint(vector, result);
    }
    /** @deprecated */
    transformVector(vector, result) {
      return this.transformAsPoint(vector, result);
    }
    /** @deprecated */
    transformDirection(vector, result) {
      return this.transformAsVector(vector, result);
    }
    // three.js math API compatibility
    makeRotationX(radians6) {
      return this.identity().rotateX(radians6);
    }
    makeTranslation(x4, y5, z4) {
      return this.identity().translate([x4, y5, z4]);
    }
  };
  var ZERO16;
  var IDENTITY5;
  function getZeroMatrix9() {
    if (!ZERO16) {
      ZERO16 = new Matrix45([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
      Object.freeze(ZERO16);
    }
    return ZERO16;
  }
  function getIdentityMatrix9() {
    if (!IDENTITY5) {
      IDENTITY5 = new Matrix45();
      Object.freeze(IDENTITY5);
    }
    return IDENTITY5;
  }
  function checkRadians4(possiblyDegrees) {
    if (possiblyDegrees > Math.PI * 2) {
      throw Error("expected radians");
    }
  }
  function computeInfinitePerspectiveOffCenter4(result, left, right, bottom, top, near) {
    const column0Row0 = 2 * near / (right - left);
    const column1Row1 = 2 * near / (top - bottom);
    const column2Row0 = (right + left) / (right - left);
    const column2Row1 = (top + bottom) / (top - bottom);
    const column2Row2 = -1;
    const column2Row3 = -1;
    const column3Row2 = -2 * near;
    result[0] = column0Row0;
    result[1] = 0;
    result[2] = 0;
    result[3] = 0;
    result[4] = 0;
    result[5] = column1Row1;
    result[6] = 0;
    result[7] = 0;
    result[8] = column2Row0;
    result[9] = column2Row1;
    result[10] = column2Row2;
    result[11] = column2Row3;
    result[12] = 0;
    result[13] = 0;
    result[14] = column3Row2;
    result[15] = 0;
    return result;
  }

  // ../../node_modules/@loaders.gl/3d-tiles/node_modules/@math.gl/core/dist/gl-matrix/quat.js
  function create31() {
    const out = new ARRAY_TYPE8(4);
    if (ARRAY_TYPE8 != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }
    out[3] = 1;
    return out;
  }
  function identity11(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
  }
  function setAxisAngle5(out, axis, rad) {
    rad = rad * 0.5;
    const s5 = Math.sin(rad);
    out[0] = s5 * axis[0];
    out[1] = s5 * axis[1];
    out[2] = s5 * axis[2];
    out[3] = Math.cos(rad);
    return out;
  }
  function multiply19(out, a6, b4) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    const bx = b4[0];
    const by = b4[1];
    const bz = b4[2];
    const bw = b4[3];
    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
  }
  function rotateX17(out, a6, rad) {
    rad *= 0.5;
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    const bx = Math.sin(rad);
    const bw = Math.cos(rad);
    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
  }
  function rotateY17(out, a6, rad) {
    rad *= 0.5;
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    const by = Math.sin(rad);
    const bw = Math.cos(rad);
    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
  }
  function rotateZ17(out, a6, rad) {
    rad *= 0.5;
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    const bz = Math.sin(rad);
    const bw = Math.cos(rad);
    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
  }
  function calculateW5(out, a6) {
    const x4 = a6[0];
    const y5 = a6[1];
    const z4 = a6[2];
    out[0] = x4;
    out[1] = y5;
    out[2] = z4;
    out[3] = Math.sqrt(Math.abs(1 - x4 * x4 - y5 * y5 - z4 * z4));
    return out;
  }
  function slerp7(out, a6, b4, t5) {
    const ax = a6[0];
    const ay = a6[1];
    const az = a6[2];
    const aw = a6[3];
    let bx = b4[0];
    let by = b4[1];
    let bz = b4[2];
    let bw = b4[3];
    let cosom;
    let omega;
    let scale0;
    let scale1;
    let sinom;
    cosom = ax * bx + ay * by + az * bz + aw * bw;
    if (cosom < 0) {
      cosom = -cosom;
      bx = -bx;
      by = -by;
      bz = -bz;
      bw = -bw;
    }
    if (1 - cosom > EPSILON31) {
      omega = Math.acos(cosom);
      sinom = Math.sin(omega);
      scale0 = Math.sin((1 - t5) * omega) / sinom;
      scale1 = Math.sin(t5 * omega) / sinom;
    } else {
      scale0 = 1 - t5;
      scale1 = t5;
    }
    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    return out;
  }
  function invert15(out, a6) {
    const a0 = a6[0];
    const a1 = a6[1];
    const a22 = a6[2];
    const a32 = a6[3];
    const dot18 = a0 * a0 + a1 * a1 + a22 * a22 + a32 * a32;
    const invDot = dot18 ? 1 / dot18 : 0;
    out[0] = -a0 * invDot;
    out[1] = -a1 * invDot;
    out[2] = -a22 * invDot;
    out[3] = a32 * invDot;
    return out;
  }
  function conjugate5(out, a6) {
    out[0] = -a6[0];
    out[1] = -a6[1];
    out[2] = -a6[2];
    out[3] = a6[3];
    return out;
  }
  function fromMat35(out, m3) {
    const fTrace = m3[0] + m3[4] + m3[8];
    let fRoot;
    if (fTrace > 0) {
      fRoot = Math.sqrt(fTrace + 1);
      out[3] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[0] = (m3[5] - m3[7]) * fRoot;
      out[1] = (m3[6] - m3[2]) * fRoot;
      out[2] = (m3[1] - m3[3]) * fRoot;
    } else {
      let i7 = 0;
      if (m3[4] > m3[0])
        i7 = 1;
      if (m3[8] > m3[i7 * 3 + i7])
        i7 = 2;
      const j4 = (i7 + 1) % 3;
      const k4 = (i7 + 2) % 3;
      fRoot = Math.sqrt(m3[i7 * 3 + i7] - m3[j4 * 3 + j4] - m3[k4 * 3 + k4] + 1);
      out[i7] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[3] = (m3[j4 * 3 + k4] - m3[k4 * 3 + j4]) * fRoot;
      out[j4] = (m3[j4 * 3 + i7] + m3[i7 * 3 + j4]) * fRoot;
      out[k4] = (m3[k4 * 3 + i7] + m3[i7 * 3 + k4]) * fRoot;
    }
    return out;
  }
  var add15 = add14;
  var scale23 = scale21;
  var dot17 = dot16;
  var lerp18 = lerp17;
  var length15 = length14;
  var squaredLength12 = squaredLength11;
  var normalize16 = normalize15;
  var rotationTo5 = function() {
    const tmpvec3 = create28();
    const xUnitVec3 = fromValues12(1, 0, 0);
    const yUnitVec3 = fromValues12(0, 1, 0);
    return function(out, a6, b4) {
      const dot18 = dot15(a6, b4);
      if (dot18 < -0.999999) {
        cross10(tmpvec3, xUnitVec3, a6);
        if (len8(tmpvec3) < 1e-6)
          cross10(tmpvec3, yUnitVec3, a6);
        normalize14(tmpvec3, tmpvec3);
        setAxisAngle5(out, tmpvec3, Math.PI);
        return out;
      } else if (dot18 > 0.999999) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        return out;
      }
      cross10(tmpvec3, a6, b4);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot18;
      return normalize16(out, out);
    };
  }();
  var sqlerp5 = function() {
    const temp1 = create31();
    const temp2 = create31();
    return function(out, a6, b4, c5, d5, t5) {
      slerp7(temp1, a6, d5, t5);
      slerp7(temp2, b4, c5, t5);
      slerp7(out, temp1, temp2, 2 * t5 * (1 - t5));
      return out;
    };
  }();
  var setAxes5 = function() {
    const matr = create29();
    return function(out, view, right, up) {
      matr[0] = right[0];
      matr[3] = right[1];
      matr[6] = right[2];
      matr[1] = up[0];
      matr[4] = up[1];
      matr[7] = up[2];
      matr[2] = -view[0];
      matr[5] = -view[1];
      matr[8] = -view[2];
      return normalize16(out, fromMat35(out, matr));
    };
  }();

  // ../../node_modules/@loaders.gl/3d-tiles/node_modules/@math.gl/core/dist/classes/quaternion.js
  var IDENTITY_QUATERNION4 = [0, 0, 0, 1];
  var Quaternion4 = class extends MathArray7 {
    constructor(x4 = 0, y5 = 0, z4 = 0, w5 = 1) {
      super(-0, -0, -0, -0);
      if (Array.isArray(x4) && arguments.length === 1) {
        this.copy(x4);
      } else {
        this.set(x4, y5, z4, w5);
      }
    }
    copy(array) {
      this[0] = array[0];
      this[1] = array[1];
      this[2] = array[2];
      this[3] = array[3];
      return this.check();
    }
    set(x4, y5, z4, w5) {
      this[0] = x4;
      this[1] = y5;
      this[2] = z4;
      this[3] = w5;
      return this.check();
    }
    fromObject(object) {
      this[0] = object.x;
      this[1] = object.y;
      this[2] = object.z;
      this[3] = object.w;
      return this.check();
    }
    /**
     * Creates a quaternion from the given 3x3 rotation matrix.
     * NOTE: The resultant quaternion is not normalized, so you should
     * be sure to renormalize the quaternion yourself where necessary.
     * @param m
     * @returns
     */
    fromMatrix3(m3) {
      fromMat35(this, m3);
      return this.check();
    }
    fromAxisRotation(axis, rad) {
      setAxisAngle5(this, axis, rad);
      return this.check();
    }
    /** Set a quat to the identity quaternion */
    identity() {
      identity11(this);
      return this.check();
    }
    // Set the components of a quat to the given values
    // set(i, j, k, l) {
    //   quat_set(this, i, j, k, l);
    //   return this.check();
    // }
    // Sets a quat from the given angle and rotation axis, then returns it.
    setAxisAngle(axis, rad) {
      return this.fromAxisRotation(axis, rad);
    }
    // Getters/setters
    get ELEMENTS() {
      return 4;
    }
    get x() {
      return this[0];
    }
    set x(value) {
      this[0] = checkNumber7(value);
    }
    get y() {
      return this[1];
    }
    set y(value) {
      this[1] = checkNumber7(value);
    }
    get z() {
      return this[2];
    }
    set z(value) {
      this[2] = checkNumber7(value);
    }
    get w() {
      return this[3];
    }
    set w(value) {
      this[3] = checkNumber7(value);
    }
    // Calculates the length of a quat
    len() {
      return length15(this);
    }
    // Calculates the squared length of a quat
    lengthSquared() {
      return squaredLength12(this);
    }
    // Calculates the dot product of two quat's
    // @return {Number}
    dot(a6) {
      return dot17(this, a6);
    }
    // Gets the rotation axis and angle for a given quaternion.
    // If a quaternion is created with setAxisAngle, this method will
    // return the same values as providied in the original parameter
    // list OR functionally equivalent values.
    // Example: The quaternion formed by axis [0, 0, 1] and angle -90
    // is the same as the quaternion formed by [0, 0, 1] and 270.
    // This method favors the latter.
    // @return {{[x,y,z], Number}}
    // getAxisAngle() {
    //   const axis = [];
    // //   const angle = quat_getAxisAngle(axis, this);
    //   return {axis, angle};
    // }
    // MODIFIERS
    // Sets a quaternion to represent the shortest rotation from one vector
    // to another. Both vectors are assumed to be unit length.
    rotationTo(vectorA, vectorB) {
      rotationTo5(this, vectorA, vectorB);
      return this.check();
    }
    // Sets the specified quaternion with values corresponding to the given axes.
    // Each axis is a vec3 and is expected to be unit length and perpendicular
    // to all other specified axes.
    // setAxes() {
    //   Number
    // }
    // Performs a spherical linear interpolation with two control points
    // sqlerp() {
    //   Number;
    // }
    // Adds two quat's
    add(a6) {
      add15(this, this, a6);
      return this.check();
    }
    // Calculates the W component of a quat from the X, Y, and Z components.
    // Any existing W component will be ignored.
    calculateW() {
      calculateW5(this, this);
      return this.check();
    }
    // Calculates the conjugate of a quat If the quaternion is normalized,
    // this function is faster than quat_invert and produces the same result.
    conjugate() {
      conjugate5(this, this);
      return this.check();
    }
    // Calculates the inverse of a quat
    invert() {
      invert15(this, this);
      return this.check();
    }
    // Performs a linear interpolation between two quat's
    lerp(a6, b4, t5) {
      if (t5 === void 0) {
        return this.lerp(this, a6, b4);
      }
      lerp18(this, a6, b4, t5);
      return this.check();
    }
    // Multiplies two quat's
    multiplyRight(a6) {
      multiply19(this, this, a6);
      return this.check();
    }
    multiplyLeft(a6) {
      multiply19(this, a6, this);
      return this.check();
    }
    // Normalize a quat
    normalize() {
      const length17 = this.len();
      const l5 = length17 > 0 ? 1 / length17 : 0;
      this[0] = this[0] * l5;
      this[1] = this[1] * l5;
      this[2] = this[2] * l5;
      this[3] = this[3] * l5;
      if (length17 === 0) {
        this[3] = 1;
      }
      return this.check();
    }
    // Rotates a quaternion by the given angle about the X axis
    rotateX(rad) {
      rotateX17(this, this, rad);
      return this.check();
    }
    // Rotates a quaternion by the given angle about the Y axis
    rotateY(rad) {
      rotateY17(this, this, rad);
      return this.check();
    }
    // Rotates a quaternion by the given angle about the Z axis
    rotateZ(rad) {
      rotateZ17(this, this, rad);
      return this.check();
    }
    // Scales a quat by a scalar number
    scale(b4) {
      scale23(this, this, b4);
      return this.check();
    }
    // Performs a spherical linear interpolation between two quat
    slerp(arg0, arg1, arg2) {
      let start;
      let target2;
      let ratio;
      switch (arguments.length) {
        case 1:
          ({
            start = IDENTITY_QUATERNION4,
            target: target2,
            ratio
          } = arg0);
          break;
        case 2:
          start = this;
          target2 = arg0;
          ratio = arg1;
          break;
        default:
          start = arg0;
          target2 = arg1;
          ratio = arg2;
      }
      slerp7(this, start, target2, ratio);
      return this.check();
    }
    transformVector4(vector, result = new Vector44()) {
      transformQuat12(result, vector, this);
      return checkVector6(result, 4);
    }
    // THREE.js Math API compatibility
    lengthSq() {
      return this.lengthSquared();
    }
    setFromAxisAngle(axis, rad) {
      return this.setAxisAngle(axis, rad);
    }
    premultiply(a6) {
      return this.multiplyLeft(a6);
    }
    multiply(a6) {
      return this.multiplyRight(a6);
    }
  };

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/classes/tile-3d-feature-table.js
  var Tile3DFeatureTable = class {
    json;
    buffer;
    featuresLength = 0;
    _cachedTypedArrays = {};
    constructor(featureTableJson, featureTableBinary) {
      this.json = featureTableJson;
      this.buffer = featureTableBinary;
    }
    getExtension(extensionName) {
      return this.json.extensions && this.json.extensions[extensionName];
    }
    hasProperty(propertyName) {
      return Boolean(this.json[propertyName]);
    }
    getGlobalProperty(propertyName, componentType = GL2.UNSIGNED_INT, componentLength = 1) {
      const jsonValue = this.json[propertyName];
      if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {
        return this._getTypedArrayFromBinary(propertyName, componentType, componentLength, 1, jsonValue.byteOffset);
      }
      return jsonValue;
    }
    getPropertyArray(propertyName, componentType, componentLength) {
      const jsonValue = this.json[propertyName];
      if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {
        if ("componentType" in jsonValue) {
          componentType = GLType.fromName(jsonValue.componentType);
        }
        return this._getTypedArrayFromBinary(propertyName, componentType, componentLength, this.featuresLength, jsonValue.byteOffset);
      }
      return this._getTypedArrayFromArray(propertyName, componentType, jsonValue);
    }
    getProperty(propertyName, componentType, componentLength, featureId, result) {
      const jsonValue = this.json[propertyName];
      if (!jsonValue) {
        return jsonValue;
      }
      const typedArray = this.getPropertyArray(propertyName, componentType, componentLength);
      if (componentLength === 1) {
        return typedArray[featureId];
      }
      for (let i7 = 0; i7 < componentLength; ++i7) {
        result[i7] = typedArray[componentLength * featureId + i7];
      }
      return result;
    }
    // HELPERS
    _getTypedArrayFromBinary(propertyName, componentType, componentLength, count3, byteOffset) {
      const cachedTypedArrays = this._cachedTypedArrays;
      let typedArray = cachedTypedArrays[propertyName];
      if (!typedArray) {
        typedArray = GLType.createTypedArray(componentType, this.buffer.buffer, this.buffer.byteOffset + byteOffset, count3 * componentLength);
        cachedTypedArrays[propertyName] = typedArray;
      }
      return typedArray;
    }
    _getTypedArrayFromArray(propertyName, componentType, array) {
      const cachedTypedArrays = this._cachedTypedArrays;
      let typedArray = cachedTypedArrays[propertyName];
      if (!typedArray) {
        typedArray = GLType.createTypedArray(componentType, array);
        cachedTypedArrays[propertyName] = typedArray;
      }
      return typedArray;
    }
  };

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/classes/helpers/tile-3d-accessor-utils.js
  var COMPONENTS_PER_ATTRIBUTE = {
    SCALAR: 1,
    VEC2: 2,
    VEC3: 3,
    VEC4: 4,
    MAT2: 4,
    MAT3: 9,
    MAT4: 16
  };
  var UNPACKER = {
    SCALAR: (values, i7) => values[i7],
    VEC2: (values, i7) => [values[2 * i7 + 0], values[2 * i7 + 1]],
    VEC3: (values, i7) => [values[3 * i7 + 0], values[3 * i7 + 1], values[3 * i7 + 2]],
    VEC4: (values, i7) => [values[4 * i7 + 0], values[4 * i7 + 1], values[4 * i7 + 2], values[4 * i7 + 3]],
    // TODO: check column major
    MAT2: (values, i7) => [
      values[4 * i7 + 0],
      values[4 * i7 + 1],
      values[4 * i7 + 2],
      values[4 * i7 + 3]
    ],
    MAT3: (values, i7) => [
      values[9 * i7 + 0],
      values[9 * i7 + 1],
      values[9 * i7 + 2],
      values[9 * i7 + 3],
      values[9 * i7 + 4],
      values[9 * i7 + 5],
      values[9 * i7 + 6],
      values[9 * i7 + 7],
      values[9 * i7 + 8]
    ],
    MAT4: (values, i7) => [
      values[16 * i7 + 0],
      values[16 * i7 + 1],
      values[16 * i7 + 2],
      values[16 * i7 + 3],
      values[16 * i7 + 4],
      values[16 * i7 + 5],
      values[16 * i7 + 6],
      values[16 * i7 + 7],
      values[16 * i7 + 8],
      values[16 * i7 + 9],
      values[16 * i7 + 10],
      values[16 * i7 + 11],
      values[16 * i7 + 12],
      values[16 * i7 + 13],
      values[16 * i7 + 14],
      values[16 * i7 + 15]
    ]
  };
  var PACKER = {
    SCALAR: (x4, values, i7) => {
      values[i7] = x4;
    },
    VEC2: (x4, values, i7) => {
      values[2 * i7 + 0] = x4[0];
      values[2 * i7 + 1] = x4[1];
    },
    VEC3: (x4, values, i7) => {
      values[3 * i7 + 0] = x4[0];
      values[3 * i7 + 1] = x4[1];
      values[3 * i7 + 2] = x4[2];
    },
    VEC4: (x4, values, i7) => {
      values[4 * i7 + 0] = x4[0];
      values[4 * i7 + 1] = x4[1];
      values[4 * i7 + 2] = x4[2];
      values[4 * i7 + 3] = x4[3];
    },
    // TODO: check column major correctness
    MAT2: (x4, values, i7) => {
      values[4 * i7 + 0] = x4[0];
      values[4 * i7 + 1] = x4[1];
      values[4 * i7 + 2] = x4[2];
      values[4 * i7 + 3] = x4[3];
    },
    MAT3: (x4, values, i7) => {
      values[9 * i7 + 0] = x4[0];
      values[9 * i7 + 1] = x4[1];
      values[9 * i7 + 2] = x4[2];
      values[9 * i7 + 3] = x4[3];
      values[9 * i7 + 4] = x4[4];
      values[9 * i7 + 5] = x4[5];
      values[9 * i7 + 6] = x4[6];
      values[9 * i7 + 7] = x4[7];
      values[9 * i7 + 8] = x4[8];
      values[9 * i7 + 9] = x4[9];
    },
    MAT4: (x4, values, i7) => {
      values[16 * i7 + 0] = x4[0];
      values[16 * i7 + 1] = x4[1];
      values[16 * i7 + 2] = x4[2];
      values[16 * i7 + 3] = x4[3];
      values[16 * i7 + 4] = x4[4];
      values[16 * i7 + 5] = x4[5];
      values[16 * i7 + 6] = x4[6];
      values[16 * i7 + 7] = x4[7];
      values[16 * i7 + 8] = x4[8];
      values[16 * i7 + 9] = x4[9];
      values[16 * i7 + 10] = x4[10];
      values[16 * i7 + 11] = x4[11];
      values[16 * i7 + 12] = x4[12];
      values[16 * i7 + 13] = x4[13];
      values[16 * i7 + 14] = x4[14];
      values[16 * i7 + 15] = x4[15];
    }
  };
  function createTypedArrayFromAccessor(tile3DAccessor, buffer, byteOffset, length17) {
    const { componentType } = tile3DAccessor;
    assert2(tile3DAccessor.componentType);
    const type = typeof componentType === "string" ? GLType.fromName(componentType) : componentType;
    const size = COMPONENTS_PER_ATTRIBUTE[tile3DAccessor.type];
    const unpacker = UNPACKER[tile3DAccessor.type];
    const packer = PACKER[tile3DAccessor.type];
    byteOffset += tile3DAccessor.byteOffset;
    const values = GLType.createTypedArray(type, buffer, byteOffset, size * length17);
    return {
      values,
      type,
      size,
      unpacker,
      packer
    };
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/classes/tile-3d-batch-table-hierarchy.js
  var defined3 = (x4) => x4 !== void 0;
  function initializeHierarchy(batchTable, jsonHeader, binaryBody) {
    if (!jsonHeader) {
      return null;
    }
    let hierarchy = batchTable.getExtension("3DTILES_batch_table_hierarchy");
    const legacyHierarchy = jsonHeader.HIERARCHY;
    if (legacyHierarchy) {
      console.warn("3D Tile Parser: HIERARCHY is deprecated. Use 3DTILES_batch_table_hierarchy.");
      jsonHeader.extensions = jsonHeader.extensions || {};
      jsonHeader.extensions["3DTILES_batch_table_hierarchy"] = legacyHierarchy;
      hierarchy = legacyHierarchy;
    }
    if (!hierarchy) {
      return null;
    }
    return initializeHierarchyValues(hierarchy, binaryBody);
  }
  function initializeHierarchyValues(hierarchyJson, binaryBody) {
    let i7;
    let classId;
    let binaryAccessor;
    const instancesLength = hierarchyJson.instancesLength;
    const classes = hierarchyJson.classes;
    let classIds = hierarchyJson.classIds;
    let parentCounts = hierarchyJson.parentCounts;
    let parentIds = hierarchyJson.parentIds;
    let parentIdsLength = instancesLength;
    if (defined3(classIds.byteOffset)) {
      classIds.componentType = defaultValue(classIds.componentType, GL.UNSIGNED_SHORT);
      classIds.type = AttributeType.SCALAR;
      binaryAccessor = getBinaryAccessor(classIds);
      classIds = binaryAccessor.createArrayBufferView(binaryBody.buffer, binaryBody.byteOffset + classIds.byteOffset, instancesLength);
    }
    let parentIndexes;
    if (defined3(parentCounts)) {
      if (defined3(parentCounts.byteOffset)) {
        parentCounts.componentType = defaultValue(parentCounts.componentType, GL.UNSIGNED_SHORT);
        parentCounts.type = AttributeType.SCALAR;
        binaryAccessor = getBinaryAccessor(parentCounts);
        parentCounts = binaryAccessor.createArrayBufferView(binaryBody.buffer, binaryBody.byteOffset + parentCounts.byteOffset, instancesLength);
      }
      parentIndexes = new Uint16Array(instancesLength);
      parentIdsLength = 0;
      for (i7 = 0; i7 < instancesLength; ++i7) {
        parentIndexes[i7] = parentIdsLength;
        parentIdsLength += parentCounts[i7];
      }
    }
    if (defined3(parentIds) && defined3(parentIds.byteOffset)) {
      parentIds.componentType = defaultValue(parentIds.componentType, GL.UNSIGNED_SHORT);
      parentIds.type = AttributeType.SCALAR;
      binaryAccessor = getBinaryAccessor(parentIds);
      parentIds = binaryAccessor.createArrayBufferView(binaryBody.buffer, binaryBody.byteOffset + parentIds.byteOffset, parentIdsLength);
    }
    const classesLength = classes.length;
    for (i7 = 0; i7 < classesLength; ++i7) {
      const classInstancesLength = classes[i7].length;
      const properties = classes[i7].instances;
      const binaryProperties = getBinaryProperties(classInstancesLength, properties, binaryBody);
      classes[i7].instances = combine(binaryProperties, properties);
    }
    const classCounts = new Array(classesLength).fill(0);
    const classIndexes = new Uint16Array(instancesLength);
    for (i7 = 0; i7 < instancesLength; ++i7) {
      classId = classIds[i7];
      classIndexes[i7] = classCounts[classId];
      ++classCounts[classId];
    }
    const hierarchy = {
      classes,
      classIds,
      classIndexes,
      parentCounts,
      parentIndexes,
      parentIds
    };
    validateHierarchy(hierarchy);
    return hierarchy;
  }
  function traverseHierarchy(hierarchy, instanceIndex, endConditionCallback) {
    if (!hierarchy) {
      return;
    }
    const parentCounts = hierarchy.parentCounts;
    const parentIds = hierarchy.parentIds;
    if (parentIds) {
      return endConditionCallback(hierarchy, instanceIndex);
    }
    if (parentCounts > 0) {
      return traverseHierarchyMultipleParents(hierarchy, instanceIndex, endConditionCallback);
    }
    return traverseHierarchySingleParent(hierarchy, instanceIndex, endConditionCallback);
  }
  function traverseHierarchyMultipleParents(hierarchy, instanceIndex, endConditionCallback) {
    const classIds = hierarchy.classIds;
    const parentCounts = hierarchy.parentCounts;
    const parentIds = hierarchy.parentIds;
    const parentIndexes = hierarchy.parentIndexes;
    const instancesLength = classIds.length;
    const visited = scratchVisited;
    visited.length = Math.max(visited.length, instancesLength);
    const visitedMarker = ++marker;
    const stack2 = scratchStack;
    stack2.length = 0;
    stack2.push(instanceIndex);
    while (stack2.length > 0) {
      instanceIndex = stack2.pop();
      if (visited[instanceIndex] === visitedMarker) {
        continue;
      }
      visited[instanceIndex] = visitedMarker;
      const result = endConditionCallback(hierarchy, instanceIndex);
      if (defined3(result)) {
        return result;
      }
      const parentCount = parentCounts[instanceIndex];
      const parentIndex = parentIndexes[instanceIndex];
      for (let i7 = 0; i7 < parentCount; ++i7) {
        const parentId = parentIds[parentIndex + i7];
        if (parentId !== instanceIndex) {
          stack2.push(parentId);
        }
      }
    }
    return null;
  }
  function traverseHierarchySingleParent(hierarchy, instanceIndex, endConditionCallback) {
    let hasParent2 = true;
    while (hasParent2) {
      const result = endConditionCallback(hierarchy, instanceIndex);
      if (defined3(result)) {
        return result;
      }
      const parentId = hierarchy.parentIds[instanceIndex];
      hasParent2 = parentId !== instanceIndex;
      instanceIndex = parentId;
    }
    throw new Error("traverseHierarchySingleParent");
  }
  function validateHierarchy(hierarchy) {
    const scratchValidateStack = [];
    const classIds = hierarchy.classIds;
    const instancesLength = classIds.length;
    for (let i7 = 0; i7 < instancesLength; ++i7) {
      validateInstance(hierarchy, i7, stack);
    }
  }
  function validateInstance(hierarchy, instanceIndex, stack2) {
    const parentCounts = hierarchy.parentCounts;
    const parentIds = hierarchy.parentIds;
    const parentIndexes = hierarchy.parentIndexes;
    const classIds = hierarchy.classIds;
    const instancesLength = classIds.length;
    if (!defined3(parentIds)) {
      return;
    }
    assert(instanceIndex < instancesLength, `Parent index ${instanceIndex} exceeds the total number of instances: ${instancesLength}`);
    assert(stack2.indexOf(instanceIndex) === -1, "Circular dependency detected in the batch table hierarchy.");
    stack2.push(instanceIndex);
    const parentCount = defined3(parentCounts) ? parentCounts[instanceIndex] : 1;
    const parentIndex = defined3(parentCounts) ? parentIndexes[instanceIndex] : instanceIndex;
    for (let i7 = 0; i7 < parentCount; ++i7) {
      const parentId = parentIds[parentIndex + i7];
      if (parentId !== instanceIndex) {
        validateInstance(hierarchy, parentId, stack2);
      }
    }
    stack2.pop(instanceIndex);
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/classes/tile-3d-batch-table.js
  function defined4(x4) {
    return x4 !== void 0 && x4 !== null;
  }
  var clone16 = (x4, y5) => x4;
  var IGNORED_PROPERTY_FIELDS = {
    HIERARCHY: true,
    // Deprecated HIERARCHY property
    extensions: true,
    extras: true
  };
  var Tile3DBatchTableParser = class {
    json;
    binary;
    featureCount;
    _extensions;
    // Copy all top-level property fields from the json object, ignoring special fields
    _properties;
    _binaryProperties;
    // TODO: hierarchy support is only partially implemented and not tested
    _hierarchy;
    constructor(json, binary, featureCount, options = {}) {
      assert2(featureCount >= 0);
      this.json = json || {};
      this.binary = binary;
      this.featureCount = featureCount;
      this._extensions = this.json?.extensions || {};
      this._properties = {};
      for (const propertyName in this.json) {
        if (!IGNORED_PROPERTY_FIELDS[propertyName]) {
          this._properties[propertyName] = this.json[propertyName];
        }
      }
      this._binaryProperties = this._initializeBinaryProperties();
      if (options["3DTILES_batch_table_hierarchy"]) {
        this._hierarchy = initializeHierarchy(this, this.json, this.binary);
      }
    }
    getExtension(extensionName) {
      return this.json && this.json.extensions && this.json.extensions[extensionName];
    }
    memorySizeInBytes() {
      return 0;
    }
    isClass(batchId, className) {
      this._checkBatchId(batchId);
      assert2(typeof className === "string", className);
      if (this._hierarchy) {
        const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {
          const classId = hierarchy.classIds[instanceIndex];
          const instanceClass = hierarchy.classes[classId];
          return instanceClass.name === className;
        });
        return defined4(result);
      }
      return false;
    }
    isExactClass(batchId, className) {
      assert2(typeof className === "string", className);
      return this.getExactClassName(batchId) === className;
    }
    getExactClassName(batchId) {
      this._checkBatchId(batchId);
      if (this._hierarchy) {
        const classId = this._hierarchy.classIds[batchId];
        const instanceClass = this._hierarchy.classes[classId];
        return instanceClass.name;
      }
      return void 0;
    }
    hasProperty(batchId, name13) {
      this._checkBatchId(batchId);
      assert2(typeof name13 === "string", name13);
      return defined4(this._properties[name13]) || this._hasPropertyInHierarchy(batchId, name13);
    }
    getPropertyNames(batchId, results) {
      this._checkBatchId(batchId);
      results = defined4(results) ? results : [];
      results.length = 0;
      const propertyNames = Object.keys(this._properties);
      results.push(...propertyNames);
      if (this._hierarchy) {
        this._getPropertyNamesInHierarchy(batchId, results);
      }
      return results;
    }
    getProperty(batchId, name13) {
      this._checkBatchId(batchId);
      assert2(typeof name13 === "string", name13);
      if (this._binaryProperties) {
        const binaryProperty = this._binaryProperties[name13];
        if (defined4(binaryProperty)) {
          return this._getBinaryProperty(binaryProperty, batchId);
        }
      }
      const propertyValues = this._properties[name13];
      if (defined4(propertyValues)) {
        return clone16(propertyValues[batchId], true);
      }
      if (this._hierarchy) {
        const hierarchyProperty = this._getHierarchyProperty(batchId, name13);
        if (defined4(hierarchyProperty)) {
          return hierarchyProperty;
        }
      }
      return void 0;
    }
    setProperty(batchId, name13, value) {
      const featureCount = this.featureCount;
      this._checkBatchId(batchId);
      assert2(typeof name13 === "string", name13);
      if (this._binaryProperties) {
        const binaryProperty = this._binaryProperties[name13];
        if (binaryProperty) {
          this._setBinaryProperty(binaryProperty, batchId, value);
          return;
        }
      }
      if (this._hierarchy) {
        if (this._setHierarchyProperty(this, batchId, name13, value)) {
          return;
        }
      }
      let propertyValues = this._properties[name13];
      if (!defined4(propertyValues)) {
        this._properties[name13] = new Array(featureCount);
        propertyValues = this._properties[name13];
      }
      propertyValues[batchId] = clone16(value, true);
    }
    // PRIVATE METHODS
    _checkBatchId(batchId) {
      const valid = batchId >= 0 && batchId < this.featureCount;
      if (!valid) {
        throw new Error("batchId not in range [0, featureCount - 1].");
      }
    }
    _getBinaryProperty(binaryProperty, index) {
      return binaryProperty.unpack(binaryProperty.typedArray, index);
    }
    _setBinaryProperty(binaryProperty, index, value) {
      binaryProperty.pack(value, binaryProperty.typedArray, index);
    }
    _initializeBinaryProperties() {
      let binaryProperties = null;
      for (const name13 in this._properties) {
        const property = this._properties[name13];
        const binaryProperty = this._initializeBinaryProperty(name13, property);
        if (binaryProperty) {
          binaryProperties = binaryProperties || {};
          binaryProperties[name13] = binaryProperty;
        }
      }
      return binaryProperties;
    }
    _initializeBinaryProperty(name13, property) {
      if ("byteOffset" in property) {
        const tile3DAccessor = property;
        assert2(this.binary, `Property ${name13} requires a batch table binary.`);
        assert2(tile3DAccessor.type, `Property ${name13} requires a type.`);
        const accessor = createTypedArrayFromAccessor(tile3DAccessor, this.binary.buffer, this.binary.byteOffset | 0, this.featureCount);
        return {
          typedArray: accessor.values,
          componentCount: accessor.size,
          unpack: accessor.unpacker,
          pack: accessor.packer
        };
      }
      return null;
    }
    //  EXTENSION SUPPORT: 3DTILES_batch_table_hierarchy
    _hasPropertyInHierarchy(batchId, name13) {
      if (!this._hierarchy) {
        return false;
      }
      const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {
        const classId = hierarchy.classIds[instanceIndex];
        const instances = hierarchy.classes[classId].instances;
        return defined4(instances[name13]);
      });
      return defined4(result);
    }
    _getPropertyNamesInHierarchy(batchId, results) {
      traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {
        const classId = hierarchy.classIds[instanceIndex];
        const instances = hierarchy.classes[classId].instances;
        for (const name13 in instances) {
          if (instances.hasOwnProperty(name13)) {
            if (results.indexOf(name13) === -1) {
              results.push(name13);
            }
          }
        }
      });
    }
    _getHierarchyProperty(batchId, name13) {
      return traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {
        const classId = hierarchy.classIds[instanceIndex];
        const instanceClass = hierarchy.classes[classId];
        const indexInClass = hierarchy.classIndexes[instanceIndex];
        const propertyValues = instanceClass.instances[name13];
        if (defined4(propertyValues)) {
          if (defined4(propertyValues.typedArray)) {
            return this._getBinaryProperty(propertyValues, indexInClass);
          }
          return clone16(propertyValues[indexInClass], true);
        }
        return null;
      });
    }
    _setHierarchyProperty(batchTable, batchId, name13, value) {
      const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {
        const classId = hierarchy.classIds[instanceIndex];
        const instanceClass = hierarchy.classes[classId];
        const indexInClass = hierarchy.classIndexes[instanceIndex];
        const propertyValues = instanceClass.instances[name13];
        if (defined4(propertyValues)) {
          assert2(instanceIndex === batchId, `Inherited property "${name13}" is read-only.`);
          if (defined4(propertyValues.typedArray)) {
            this._setBinaryProperty(propertyValues, indexInClass, value);
          } else {
            propertyValues[indexInClass] = clone16(value, true);
          }
          return true;
        }
        return false;
      });
      return defined4(result);
    }
  };

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/helpers/parse-3d-tile-header.js
  var SIZEOF_UINT32 = 4;
  function parse3DTileHeaderSync(tile, arrayBuffer2, byteOffset = 0) {
    const view = new DataView(arrayBuffer2);
    tile.magic = view.getUint32(byteOffset, true);
    byteOffset += SIZEOF_UINT32;
    tile.version = view.getUint32(byteOffset, true);
    byteOffset += SIZEOF_UINT32;
    tile.byteLength = view.getUint32(byteOffset, true);
    byteOffset += SIZEOF_UINT32;
    if (tile.version !== 1) {
      throw new Error(`3D Tile Version ${tile.version} not supported`);
    }
    return byteOffset;
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/helpers/parse-3d-tile-tables.js
  var SIZEOF_UINT322 = 4;
  var DEPRECATION_WARNING = "b3dm tile in legacy format.";
  function parse3DTileTablesHeaderSync(tile, arrayBuffer2, byteOffset) {
    const view = new DataView(arrayBuffer2);
    let batchLength;
    tile.header = tile.header || {};
    let featureTableJsonByteLength = view.getUint32(byteOffset, true);
    byteOffset += SIZEOF_UINT322;
    let featureTableBinaryByteLength = view.getUint32(byteOffset, true);
    byteOffset += SIZEOF_UINT322;
    let batchTableJsonByteLength = view.getUint32(byteOffset, true);
    byteOffset += SIZEOF_UINT322;
    let batchTableBinaryByteLength = view.getUint32(byteOffset, true);
    byteOffset += SIZEOF_UINT322;
    if (batchTableJsonByteLength >= 570425344) {
      byteOffset -= SIZEOF_UINT322 * 2;
      batchLength = featureTableJsonByteLength;
      batchTableJsonByteLength = featureTableBinaryByteLength;
      batchTableBinaryByteLength = 0;
      featureTableJsonByteLength = 0;
      featureTableBinaryByteLength = 0;
      console.warn(DEPRECATION_WARNING);
    } else if (batchTableBinaryByteLength >= 570425344) {
      byteOffset -= SIZEOF_UINT322;
      batchLength = batchTableJsonByteLength;
      batchTableJsonByteLength = featureTableJsonByteLength;
      batchTableBinaryByteLength = featureTableBinaryByteLength;
      featureTableJsonByteLength = 0;
      featureTableBinaryByteLength = 0;
      console.warn(DEPRECATION_WARNING);
    }
    tile.header.featureTableJsonByteLength = featureTableJsonByteLength;
    tile.header.featureTableBinaryByteLength = featureTableBinaryByteLength;
    tile.header.batchTableJsonByteLength = batchTableJsonByteLength;
    tile.header.batchTableBinaryByteLength = batchTableBinaryByteLength;
    tile.header.batchLength = batchLength;
    return byteOffset;
  }
  function parse3DTileTablesSync(tile, arrayBuffer2, byteOffset, options) {
    byteOffset = parse3DTileFeatureTable(tile, arrayBuffer2, byteOffset, options);
    byteOffset = parse3DTileBatchTable(tile, arrayBuffer2, byteOffset, options);
    return byteOffset;
  }
  function parse3DTileFeatureTable(tile, arrayBuffer2, byteOffset, options) {
    const { featureTableJsonByteLength, featureTableBinaryByteLength, batchLength } = tile.header || {};
    tile.featureTableJson = {
      BATCH_LENGTH: batchLength || 0
    };
    if (featureTableJsonByteLength && featureTableJsonByteLength > 0) {
      const featureTableString = getStringFromArrayBuffer(arrayBuffer2, byteOffset, featureTableJsonByteLength);
      tile.featureTableJson = JSON.parse(featureTableString);
    }
    byteOffset += featureTableJsonByteLength || 0;
    tile.featureTableBinary = new Uint8Array(arrayBuffer2, byteOffset, featureTableBinaryByteLength);
    byteOffset += featureTableBinaryByteLength || 0;
    return byteOffset;
  }
  function parse3DTileBatchTable(tile, arrayBuffer2, byteOffset, options) {
    const { batchTableJsonByteLength, batchTableBinaryByteLength } = tile.header || {};
    if (batchTableJsonByteLength && batchTableJsonByteLength > 0) {
      const batchTableString = getStringFromArrayBuffer(arrayBuffer2, byteOffset, batchTableJsonByteLength);
      tile.batchTableJson = JSON.parse(batchTableString);
      byteOffset += batchTableJsonByteLength;
      if (batchTableBinaryByteLength && batchTableBinaryByteLength > 0) {
        tile.batchTableBinary = new Uint8Array(arrayBuffer2, byteOffset, batchTableBinaryByteLength);
        tile.batchTableBinary = new Uint8Array(tile.batchTableBinary);
        byteOffset += batchTableBinaryByteLength;
      }
    }
    return byteOffset;
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/helpers/normalize-3d-tile-colors.js
  function normalize3DTileColorAttribute(tile, colors, batchTable) {
    if (!colors && (!tile || !tile.batchIds || !batchTable)) {
      return null;
    }
    const { batchIds, isRGB565, pointCount = 0 } = tile;
    if (batchIds && batchTable) {
      const colorArray = new Uint8ClampedArray(pointCount * 3);
      for (let i7 = 0; i7 < pointCount; i7++) {
        const batchId = batchIds[i7];
        const dimensions = batchTable.getProperty(batchId, "dimensions");
        const color = dimensions.map((d5) => d5 * 255);
        colorArray[i7 * 3] = color[0];
        colorArray[i7 * 3 + 1] = color[1];
        colorArray[i7 * 3 + 2] = color[2];
      }
      return {
        type: GL2.UNSIGNED_BYTE,
        value: colorArray,
        size: 3,
        normalized: true
      };
    }
    if (colors && isRGB565) {
      const colorArray = new Uint8ClampedArray(pointCount * 3);
      for (let i7 = 0; i7 < pointCount; i7++) {
        const color = decodeRGB565(colors[i7]);
        colorArray[i7 * 3] = color[0];
        colorArray[i7 * 3 + 1] = color[1];
        colorArray[i7 * 3 + 2] = color[2];
      }
      return {
        type: GL2.UNSIGNED_BYTE,
        value: colorArray,
        size: 3,
        normalized: true
      };
    }
    if (colors && colors.length === pointCount * 3) {
      return {
        type: GL2.UNSIGNED_BYTE,
        value: colors,
        size: 3,
        normalized: true
      };
    }
    return {
      type: GL2.UNSIGNED_BYTE,
      value: colors || new Uint8ClampedArray(),
      size: 4,
      normalized: true
    };
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/helpers/normalize-3d-tile-normals.js
  var scratchNormal6 = new Vector37();
  function normalize3DTileNormalAttribute(tile, normals) {
    if (!normals) {
      return null;
    }
    if (tile.isOctEncoded16P) {
      const decodedArray = new Float32Array((tile.pointsLength || 0) * 3);
      for (let i7 = 0; i7 < (tile.pointsLength || 0); i7++) {
        octDecode(normals[i7 * 2], normals[i7 * 2 + 1], scratchNormal6);
        scratchNormal6.toArray(decodedArray, i7 * 3);
      }
      return {
        type: GL2.FLOAT,
        size: 2,
        value: decodedArray
      };
    }
    return {
      type: GL2.FLOAT,
      size: 2,
      value: normals
    };
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/helpers/normalize-3d-tile-positions.js
  function normalize3DTilePositionAttribute(tile, positions, options) {
    if (!tile.isQuantized) {
      return positions;
    }
    if (options["3d-tiles"] && options["3d-tiles"].decodeQuantizedPositions) {
      tile.isQuantized = false;
      return decodeQuantizedPositions(tile, positions);
    }
    return {
      type: GL2.UNSIGNED_SHORT,
      value: positions,
      size: 3,
      normalized: true
    };
  }
  function decodeQuantizedPositions(tile, positions) {
    const scratchPosition6 = new Vector37();
    const decodedArray = new Float32Array(tile.pointCount * 3);
    for (let i7 = 0; i7 < tile.pointCount; i7++) {
      scratchPosition6.set(positions[i7 * 3], positions[i7 * 3 + 1], positions[i7 * 3 + 2]).scale(1 / tile.quantizedRange).multiply(tile.quantizedVolumeScale).add(tile.quantizedVolumeOffset).toArray(decodedArray, i7 * 3);
    }
    return decodedArray;
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/parse-3d-tile-point-cloud.js
  async function parsePointCloud3DTile(tile, arrayBuffer2, byteOffset, options, context) {
    byteOffset = parse3DTileHeaderSync(tile, arrayBuffer2, byteOffset);
    byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer2, byteOffset);
    byteOffset = parse3DTileTablesSync(tile, arrayBuffer2, byteOffset, options);
    initializeTile(tile);
    const { featureTable, batchTable } = parsePointCloudTables(tile);
    await parseDraco(tile, featureTable, batchTable, options, context);
    parsePositions(tile, featureTable, options);
    parseColors(tile, featureTable, batchTable);
    parseNormals(tile, featureTable);
    return byteOffset;
  }
  function initializeTile(tile) {
    tile.attributes = {
      positions: null,
      colors: null,
      normals: null,
      batchIds: null
    };
    tile.isQuantized = false;
    tile.isTranslucent = false;
    tile.isRGB565 = false;
    tile.isOctEncoded16P = false;
  }
  function parsePointCloudTables(tile) {
    const featureTable = new Tile3DFeatureTable(tile.featureTableJson, tile.featureTableBinary);
    const pointsLength = featureTable.getGlobalProperty("POINTS_LENGTH");
    if (!Number.isFinite(pointsLength)) {
      throw new Error("POINTS_LENGTH must be defined");
    }
    featureTable.featuresLength = pointsLength;
    tile.featuresLength = pointsLength;
    tile.pointsLength = pointsLength;
    tile.pointCount = pointsLength;
    tile.rtcCenter = featureTable.getGlobalProperty("RTC_CENTER", GL2.FLOAT, 3);
    const batchTable = parseBatchIds(tile, featureTable);
    return { featureTable, batchTable };
  }
  function parsePositions(tile, featureTable, options) {
    tile.attributes = tile.attributes || {
      positions: null,
      colors: null,
      normals: null,
      batchIds: null
    };
    if (!tile.attributes.positions) {
      if (featureTable.hasProperty("POSITION")) {
        tile.attributes.positions = featureTable.getPropertyArray("POSITION", GL2.FLOAT, 3);
      } else if (featureTable.hasProperty("POSITION_QUANTIZED")) {
        const positions = featureTable.getPropertyArray("POSITION_QUANTIZED", GL2.UNSIGNED_SHORT, 3);
        tile.isQuantized = true;
        tile.quantizedRange = (1 << 16) - 1;
        tile.quantizedVolumeScale = featureTable.getGlobalProperty("QUANTIZED_VOLUME_SCALE", GL2.FLOAT, 3);
        if (!tile.quantizedVolumeScale) {
          throw new Error("QUANTIZED_VOLUME_SCALE must be defined for quantized positions.");
        }
        tile.quantizedVolumeOffset = featureTable.getGlobalProperty("QUANTIZED_VOLUME_OFFSET", GL2.FLOAT, 3);
        if (!tile.quantizedVolumeOffset) {
          throw new Error("QUANTIZED_VOLUME_OFFSET must be defined for quantized positions.");
        }
        tile.attributes.positions = normalize3DTilePositionAttribute(tile, positions, options);
      }
    }
    if (!tile.attributes.positions) {
      throw new Error("Either POSITION or POSITION_QUANTIZED must be defined.");
    }
  }
  function parseColors(tile, featureTable, batchTable) {
    tile.attributes = tile.attributes || {
      positions: null,
      colors: null,
      normals: null,
      batchIds: null
    };
    if (!tile.attributes.colors) {
      let colors = null;
      if (featureTable.hasProperty("RGBA")) {
        colors = featureTable.getPropertyArray("RGBA", GL2.UNSIGNED_BYTE, 4);
        tile.isTranslucent = true;
      } else if (featureTable.hasProperty("RGB")) {
        colors = featureTable.getPropertyArray("RGB", GL2.UNSIGNED_BYTE, 3);
      } else if (featureTable.hasProperty("RGB565")) {
        colors = featureTable.getPropertyArray("RGB565", GL2.UNSIGNED_SHORT, 1);
        tile.isRGB565 = true;
      }
      tile.attributes.colors = normalize3DTileColorAttribute(tile, colors, batchTable);
    }
    if (featureTable.hasProperty("CONSTANT_RGBA")) {
      tile.constantRGBA = featureTable.getGlobalProperty("CONSTANT_RGBA", GL2.UNSIGNED_BYTE, 4);
    }
  }
  function parseNormals(tile, featureTable) {
    tile.attributes = tile.attributes || {
      positions: null,
      colors: null,
      normals: null,
      batchIds: null
    };
    if (!tile.attributes.normals) {
      let normals = null;
      if (featureTable.hasProperty("NORMAL")) {
        normals = featureTable.getPropertyArray("NORMAL", GL2.FLOAT, 3);
      } else if (featureTable.hasProperty("NORMAL_OCT16P")) {
        normals = featureTable.getPropertyArray("NORMAL_OCT16P", GL2.UNSIGNED_BYTE, 2);
        tile.isOctEncoded16P = true;
      }
      tile.attributes.normals = normalize3DTileNormalAttribute(tile, normals);
    }
  }
  function parseBatchIds(tile, featureTable) {
    let batchTable = null;
    if (!tile.batchIds && featureTable.hasProperty("BATCH_ID")) {
      tile.batchIds = featureTable.getPropertyArray("BATCH_ID", GL2.UNSIGNED_SHORT, 1);
      if (tile.batchIds) {
        const batchFeatureLength = featureTable.getGlobalProperty("BATCH_LENGTH");
        if (!batchFeatureLength) {
          throw new Error("Global property: BATCH_LENGTH must be defined when BATCH_ID is defined.");
        }
        const { batchTableJson, batchTableBinary } = tile;
        batchTable = new Tile3DBatchTableParser(batchTableJson, batchTableBinary, batchFeatureLength);
      }
    }
    return batchTable;
  }
  async function parseDraco(tile, featureTable, batchTable, options, context) {
    let dracoBuffer;
    let dracoFeatureTableProperties;
    let dracoBatchTableProperties;
    const batchTableDraco = tile.batchTableJson && tile.batchTableJson.extensions && tile.batchTableJson.extensions["3DTILES_draco_point_compression"];
    if (batchTableDraco) {
      dracoBatchTableProperties = batchTableDraco.properties;
    }
    const featureTableDraco = featureTable.getExtension("3DTILES_draco_point_compression");
    if (featureTableDraco) {
      dracoFeatureTableProperties = featureTableDraco.properties;
      const dracoByteOffset = featureTableDraco.byteOffset;
      const dracoByteLength = featureTableDraco.byteLength;
      if (!dracoFeatureTableProperties || !Number.isFinite(dracoByteOffset) || !dracoByteLength) {
        throw new Error("Draco properties, byteOffset, and byteLength must be defined");
      }
      dracoBuffer = (tile.featureTableBinary || []).slice(dracoByteOffset, dracoByteOffset + dracoByteLength);
      tile.hasPositions = Number.isFinite(dracoFeatureTableProperties.POSITION);
      tile.hasColors = Number.isFinite(dracoFeatureTableProperties.RGB) || Number.isFinite(dracoFeatureTableProperties.RGBA);
      tile.hasNormals = Number.isFinite(dracoFeatureTableProperties.NORMAL);
      tile.hasBatchIds = Number.isFinite(dracoFeatureTableProperties.BATCH_ID);
      tile.isTranslucent = Number.isFinite(dracoFeatureTableProperties.RGBA);
    }
    if (!dracoBuffer) {
      return true;
    }
    const dracoData = {
      buffer: dracoBuffer,
      properties: { ...dracoFeatureTableProperties, ...dracoBatchTableProperties },
      featureTableProperties: dracoFeatureTableProperties,
      batchTableProperties: dracoBatchTableProperties,
      dequantizeInShader: false
    };
    return await loadDraco(tile, dracoData, options, context);
  }
  async function loadDraco(tile, dracoData, options, context) {
    if (!context) {
      return;
    }
    const dracoOptions = {
      ...options,
      draco: {
        ...options?.draco,
        extraAttributes: dracoData.batchTableProperties || {}
      }
    };
    delete dracoOptions["3d-tiles"];
    const data = await parseFromContext(dracoData.buffer, DracoLoader2, dracoOptions, context);
    const decodedPositions = data.attributes.POSITION && data.attributes.POSITION.value;
    const decodedColors = data.attributes.COLOR_0 && data.attributes.COLOR_0.value;
    const decodedNormals = data.attributes.NORMAL && data.attributes.NORMAL.value;
    const decodedBatchIds = data.attributes.BATCH_ID && data.attributes.BATCH_ID.value;
    const isQuantizedDraco = decodedPositions && data.attributes.POSITION.value.quantization;
    const isOctEncodedDraco = decodedNormals && data.attributes.NORMAL.value.quantization;
    if (isQuantizedDraco) {
      const quantization = data.POSITION.data.quantization;
      const range = quantization.range;
      tile.quantizedVolumeScale = new Vector37(range, range, range);
      tile.quantizedVolumeOffset = new Vector37(quantization.minValues);
      tile.quantizedRange = (1 << quantization.quantizationBits) - 1;
      tile.isQuantizedDraco = true;
    }
    if (isOctEncodedDraco) {
      tile.octEncodedRange = (1 << data.NORMAL.data.quantization.quantizationBits) - 1;
      tile.isOctEncodedDraco = true;
    }
    const batchTableAttributes = {};
    if (dracoData.batchTableProperties) {
      for (const attributeName of Object.keys(dracoData.batchTableProperties)) {
        if (data.attributes[attributeName] && data.attributes[attributeName].value) {
          batchTableAttributes[attributeName.toLowerCase()] = data.attributes[attributeName].value;
        }
      }
    }
    tile.attributes = {
      // @ts-expect-error
      positions: decodedPositions,
      // @ts-expect-error
      colors: normalize3DTileColorAttribute(tile, decodedColors, void 0),
      // @ts-expect-error
      normals: decodedNormals,
      // @ts-expect-error
      batchIds: decodedBatchIds,
      ...batchTableAttributes
    };
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/helpers/parse-3d-tile-gltf-view.js
  var GLTF_FORMAT = {
    URI: 0,
    EMBEDDED: 1
  };
  function parse3DTileGLTFViewSync(tile, arrayBuffer2, byteOffset, options) {
    tile.rotateYtoZ = true;
    const gltfByteLength = (tile.byteOffset || 0) + (tile.byteLength || 0) - byteOffset;
    if (gltfByteLength === 0) {
      throw new Error("glTF byte length must be greater than 0.");
    }
    tile.gltfUpAxis = options?.["3d-tiles"] && options["3d-tiles"].assetGltfUpAxis ? options["3d-tiles"].assetGltfUpAxis : "Y";
    tile.gltfArrayBuffer = sliceArrayBuffer(arrayBuffer2, byteOffset, gltfByteLength);
    tile.gltfByteOffset = 0;
    tile.gltfByteLength = gltfByteLength;
    if (byteOffset % 4 === 0) {
    } else {
      console.warn(`${tile.type}: embedded glb is not aligned to a 4-byte boundary.`);
    }
    return (tile.byteOffset || 0) + (tile.byteLength || 0);
  }
  async function extractGLTF(tile, gltfFormat, options, context) {
    const tile3DOptions = options?.["3d-tiles"] || {};
    extractGLTFBufferOrURL(tile, gltfFormat, options);
    if (tile3DOptions.loadGLTF) {
      if (!context) {
        return;
      }
      if (tile.gltfUrl) {
        const { fetch: fetch2 } = context;
        const response = await fetch2(tile.gltfUrl, options);
        tile.gltfArrayBuffer = await response.arrayBuffer();
        tile.gltfByteOffset = 0;
      }
      if (tile.gltfArrayBuffer) {
        const gltfWithBuffers = await parseFromContext(tile.gltfArrayBuffer, GLTFLoader, options, context);
        tile.gltf = postProcessGLTF(gltfWithBuffers);
        tile.gpuMemoryUsageInBytes = getMemoryUsageGLTF(tile.gltf);
        delete tile.gltfArrayBuffer;
        delete tile.gltfByteOffset;
        delete tile.gltfByteLength;
      }
    }
  }
  function extractGLTFBufferOrURL(tile, gltfFormat, options) {
    switch (gltfFormat) {
      case GLTF_FORMAT.URI:
        if (tile.gltfArrayBuffer) {
          const gltfUrlBytes = new Uint8Array(tile.gltfArrayBuffer, tile.gltfByteOffset);
          const textDecoder = new TextDecoder();
          const gltfUrl = textDecoder.decode(gltfUrlBytes);
          tile.gltfUrl = gltfUrl.replace(/[\s\0]+$/, "");
        }
        delete tile.gltfArrayBuffer;
        delete tile.gltfByteOffset;
        delete tile.gltfByteLength;
        break;
      case GLTF_FORMAT.EMBEDDED:
        break;
      default:
        throw new Error("b3dm: Illegal glTF format field");
    }
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/parse-3d-tile-batched-model.js
  async function parseBatchedModel3DTile(tile, arrayBuffer2, byteOffset, options, context) {
    byteOffset = parseBatchedModel(tile, arrayBuffer2, byteOffset, options, context);
    await extractGLTF(tile, GLTF_FORMAT.EMBEDDED, options, context);
    const extensions = tile?.gltf?.extensions;
    if (extensions && extensions.CESIUM_RTC) {
      tile.rtcCenter = extensions.CESIUM_RTC.center;
    }
    return byteOffset;
  }
  function parseBatchedModel(tile, arrayBuffer2, byteOffset, options, context) {
    byteOffset = parse3DTileHeaderSync(tile, arrayBuffer2, byteOffset);
    byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer2, byteOffset);
    byteOffset = parse3DTileTablesSync(tile, arrayBuffer2, byteOffset, options);
    byteOffset = parse3DTileGLTFViewSync(tile, arrayBuffer2, byteOffset, options);
    const featureTable = new Tile3DFeatureTable(tile.featureTableJson, tile.featureTableBinary);
    tile.rtcCenter = featureTable.getGlobalProperty("RTC_CENTER", GL2.FLOAT, 3);
    return byteOffset;
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/parse-3d-tile-instanced-model.js
  async function parseInstancedModel3DTile(tile, arrayBuffer2, byteOffset, options, context) {
    byteOffset = parseInstancedModel(tile, arrayBuffer2, byteOffset, options, context);
    await extractGLTF(tile, tile.gltfFormat || 0, options, context);
    return byteOffset;
  }
  function parseInstancedModel(tile, arrayBuffer2, byteOffset, options, context) {
    byteOffset = parse3DTileHeaderSync(tile, arrayBuffer2, byteOffset);
    if (tile.version !== 1) {
      throw new Error(`Instanced 3D Model version ${tile.version} is not supported`);
    }
    byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer2, byteOffset);
    const view = new DataView(arrayBuffer2);
    tile.gltfFormat = view.getUint32(byteOffset, true);
    byteOffset += 4;
    byteOffset = parse3DTileTablesSync(tile, arrayBuffer2, byteOffset, options);
    byteOffset = parse3DTileGLTFViewSync(tile, arrayBuffer2, byteOffset, options);
    if (!tile?.header?.featureTableJsonByteLength || tile.header.featureTableJsonByteLength === 0) {
      throw new Error("i3dm parser: featureTableJsonByteLength is zero.");
    }
    const featureTable = new Tile3DFeatureTable(tile.featureTableJson, tile.featureTableBinary);
    const instancesLength = featureTable.getGlobalProperty("INSTANCES_LENGTH");
    featureTable.featuresLength = instancesLength;
    if (!Number.isFinite(instancesLength)) {
      throw new Error("i3dm parser: INSTANCES_LENGTH must be defined");
    }
    tile.eastNorthUp = featureTable.getGlobalProperty("EAST_NORTH_UP");
    tile.rtcCenter = featureTable.getGlobalProperty("RTC_CENTER", GL2.FLOAT, 3);
    const batchTable = new Tile3DBatchTableParser(tile.batchTableJson, tile.batchTableBinary, instancesLength);
    extractInstancedAttributes(tile, featureTable, batchTable, instancesLength);
    return byteOffset;
  }
  function extractInstancedAttributes(tile, featureTable, batchTable, instancesLength) {
    const instances = new Array(instancesLength);
    const instancePosition = new Vector37();
    const instanceNormalRight = new Vector37();
    const instanceNormalUp = new Vector37();
    const instanceNormalForward = new Vector37();
    const instanceRotation = new Matrix35();
    const instanceQuaternion = new Quaternion4();
    const instanceScale = new Vector37();
    const instanceTranslationRotationScale = {};
    const instanceTransform = new Matrix45();
    const scratch1 = [];
    const scratch2 = [];
    const scratch3 = [];
    const scratch4 = [];
    for (let i7 = 0; i7 < instancesLength; i7++) {
      let position;
      if (featureTable.hasProperty("POSITION")) {
        position = featureTable.getProperty("POSITION", GL2.FLOAT, 3, i7, instancePosition);
      } else if (featureTable.hasProperty("POSITION_QUANTIZED")) {
        position = featureTable.getProperty("POSITION_QUANTIZED", GL2.UNSIGNED_SHORT, 3, i7, instancePosition);
        const quantizedVolumeOffset = featureTable.getGlobalProperty("QUANTIZED_VOLUME_OFFSET", GL2.FLOAT, 3);
        if (!quantizedVolumeOffset) {
          throw new Error("i3dm parser: QUANTIZED_VOLUME_OFFSET must be defined for quantized positions.");
        }
        const quantizedVolumeScale = featureTable.getGlobalProperty("QUANTIZED_VOLUME_SCALE", GL2.FLOAT, 3);
        if (!quantizedVolumeScale) {
          throw new Error("i3dm parser: QUANTIZED_VOLUME_SCALE must be defined for quantized positions.");
        }
        const MAX_UNSIGNED_SHORT = 65535;
        for (let j4 = 0; j4 < 3; j4++) {
          position[j4] = position[j4] / MAX_UNSIGNED_SHORT * quantizedVolumeScale[j4] + quantizedVolumeOffset[j4];
        }
      }
      if (!position) {
        throw new Error("i3dm: POSITION or POSITION_QUANTIZED must be defined for each instance.");
      }
      instancePosition.copy(position);
      instanceTranslationRotationScale.translation = instancePosition;
      tile.normalUp = featureTable.getProperty("NORMAL_UP", GL2.FLOAT, 3, i7, scratch1);
      tile.normalRight = featureTable.getProperty("NORMAL_RIGHT", GL2.FLOAT, 3, i7, scratch2);
      const hasCustomOrientation = false;
      if (tile.normalUp) {
        if (!tile.normalRight) {
          throw new Error("i3dm: Custom orientation requires both NORMAL_UP and NORMAL_RIGHT.");
        }
        tile.hasCustomOrientation = true;
      } else {
        tile.octNormalUp = featureTable.getProperty("NORMAL_UP_OCT32P", GL2.UNSIGNED_SHORT, 2, i7, scratch1);
        tile.octNormalRight = featureTable.getProperty("NORMAL_RIGHT_OCT32P", GL2.UNSIGNED_SHORT, 2, i7, scratch2);
        if (tile.octNormalUp) {
          if (!tile.octNormalRight) {
            throw new Error("i3dm: oct-encoded orientation requires NORMAL_UP_OCT32P and NORMAL_RIGHT_OCT32P");
          }
          throw new Error("i3dm: oct-encoded orientation not implemented");
        } else if (tile.eastNorthUp) {
          Ellipsoid.WGS84.eastNorthUpToFixedFrame(instancePosition, instanceTransform);
          instanceTransform.getRotationMatrix3(instanceRotation);
        } else {
          instanceRotation.identity();
        }
      }
      if (hasCustomOrientation) {
        instanceNormalForward.copy(instanceNormalRight).cross(instanceNormalUp).normalize();
        instanceRotation.setColumn(0, instanceNormalRight);
        instanceRotation.setColumn(1, instanceNormalUp);
        instanceRotation.setColumn(2, instanceNormalForward);
      }
      instanceQuaternion.fromMatrix3(instanceRotation);
      instanceTranslationRotationScale.rotation = instanceQuaternion;
      instanceScale.set(1, 1, 1);
      const scale24 = featureTable.getProperty("SCALE", GL2.FLOAT, 1, i7, scratch3);
      if (Number.isFinite(scale24)) {
        instanceScale.multiplyByScalar(scale24);
      }
      const nonUniformScale = featureTable.getProperty("SCALE_NON_UNIFORM", GL2.FLOAT, 3, i7, scratch1);
      if (nonUniformScale) {
        instanceScale.scale(nonUniformScale);
      }
      instanceTranslationRotationScale.scale = instanceScale;
      let batchId = featureTable.getProperty("BATCH_ID", GL2.UNSIGNED_SHORT, 1, i7, scratch4);
      if (batchId === void 0) {
        batchId = i7;
      }
      const rotationMatrix = new Matrix45().fromQuaternion(instanceTranslationRotationScale.rotation);
      instanceTransform.identity();
      instanceTransform.translate(instanceTranslationRotationScale.translation);
      instanceTransform.multiplyRight(rotationMatrix);
      instanceTransform.scale(instanceTranslationRotationScale.scale);
      const modelMatrix2 = instanceTransform.clone();
      instances[i7] = {
        modelMatrix: modelMatrix2,
        batchId
      };
    }
    tile.instances = instances;
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/parse-3d-tile-composite.js
  async function parseComposite3DTile(tile, arrayBuffer2, byteOffset, options, context, parse3DTile2) {
    byteOffset = parse3DTileHeaderSync(tile, arrayBuffer2, byteOffset);
    const view = new DataView(arrayBuffer2);
    tile.tilesLength = view.getUint32(byteOffset, true);
    byteOffset += 4;
    tile.tiles = [];
    while (tile.tiles.length < tile.tilesLength && (tile.byteLength || 0) - byteOffset > 12) {
      const subtile = { shape: "tile3d" };
      tile.tiles.push(subtile);
      byteOffset = await parse3DTile2(arrayBuffer2, byteOffset, options, context, subtile);
    }
    return byteOffset;
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/parse-3d-tile-gltf.js
  async function parseGltf3DTile(tile, arrayBuffer2, options, context) {
    tile.rotateYtoZ = true;
    tile.gltfUpAxis = options?.["3d-tiles"]?.assetGltfUpAxis ? options["3d-tiles"].assetGltfUpAxis : "Y";
    if (options?.["3d-tiles"]?.loadGLTF) {
      if (!context) {
        return arrayBuffer2.byteLength;
      }
      const gltfWithBuffers = await parseFromContext(arrayBuffer2, GLTFLoader, options, context);
      tile.gltf = postProcessGLTF(gltfWithBuffers);
      tile.gpuMemoryUsageInBytes = getMemoryUsageGLTF(tile.gltf);
    } else {
      tile.gltfArrayBuffer = arrayBuffer2;
    }
    return arrayBuffer2.byteLength;
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/parse-3d-tile.js
  async function parse3DTile(arrayBuffer2, byteOffset = 0, options, context, tile = { shape: "tile3d" }) {
    tile.byteOffset = byteOffset;
    tile.type = getMagicString4(arrayBuffer2, byteOffset);
    switch (tile.type) {
      case TILE3D_TYPE.COMPOSITE:
        return await parseComposite3DTile(tile, arrayBuffer2, byteOffset, options, context, parse3DTile);
      case TILE3D_TYPE.BATCHED_3D_MODEL:
        return await parseBatchedModel3DTile(tile, arrayBuffer2, byteOffset, options, context);
      case TILE3D_TYPE.GLTF:
        return await parseGltf3DTile(tile, arrayBuffer2, options, context);
      case TILE3D_TYPE.INSTANCED_3D_MODEL:
        return await parseInstancedModel3DTile(tile, arrayBuffer2, byteOffset, options, context);
      case TILE3D_TYPE.POINT_CLOUD:
        return await parsePointCloud3DTile(tile, arrayBuffer2, byteOffset, options, context);
      default:
        throw new Error(`3DTileLoader: unknown type ${tile.type}`);
    }
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/helpers/parse-3d-tile-subtree.js
  var SUBTREE_FILE_MAGIC = 1952609651;
  var SUBTREE_FILE_VERSION = 1;
  async function parse3DTilesSubtree(data, options, context) {
    const magic = new Uint32Array(data.slice(0, 4));
    if (magic[0] !== SUBTREE_FILE_MAGIC) {
      throw new Error("Wrong subtree file magic number");
    }
    const version = new Uint32Array(data.slice(4, 8));
    if (version[0] !== SUBTREE_FILE_VERSION) {
      throw new Error("Wrong subtree file verson, must be 1");
    }
    const jsonByteLength = parseUint64Value(data.slice(8, 16));
    const stringAttribute = new Uint8Array(data, 24, jsonByteLength);
    const textDecoder = new TextDecoder("utf8");
    const string = textDecoder.decode(stringAttribute);
    const subtree = JSON.parse(string);
    const binaryByteLength = parseUint64Value(data.slice(16, 24));
    let internalBinaryBuffer = new ArrayBuffer(0);
    if (binaryByteLength) {
      internalBinaryBuffer = data.slice(24 + jsonByteLength);
    }
    await loadExplicitBitstream(subtree, subtree.tileAvailability, internalBinaryBuffer, context);
    if (Array.isArray(subtree.contentAvailability)) {
      for (const contentAvailability of subtree.contentAvailability) {
        await loadExplicitBitstream(subtree, contentAvailability, internalBinaryBuffer, context);
      }
    } else {
      await loadExplicitBitstream(subtree, subtree.contentAvailability, internalBinaryBuffer, context);
    }
    await loadExplicitBitstream(subtree, subtree.childSubtreeAvailability, internalBinaryBuffer, context);
    return subtree;
  }
  async function loadExplicitBitstream(subtree, availabilityObject, internalBinaryBuffer, context) {
    const bufferViewIndex = Number.isFinite(availabilityObject.bitstream) ? availabilityObject.bitstream : availabilityObject.bufferView;
    if (typeof bufferViewIndex !== "number") {
      return;
    }
    const bufferView = subtree.bufferViews[bufferViewIndex];
    const buffer = subtree.buffers[bufferView.buffer];
    if (!context?.baseUrl) {
      throw new Error("Url is not provided");
    }
    if (!context.fetch) {
      throw new Error("fetch is not provided");
    }
    if (buffer.uri) {
      const bufferUri = `${context?.baseUrl || ""}/${buffer.uri}`;
      const response = await context.fetch(bufferUri);
      const data = await response.arrayBuffer();
      availabilityObject.explicitBitstream = new Uint8Array(data, bufferView.byteOffset, bufferView.byteLength);
      return;
    }
    const bufferStart = subtree.buffers.slice(0, bufferView.buffer).reduce((offset, buf) => offset + buf.byteLength, 0);
    availabilityObject.explicitBitstream = new Uint8Array(internalBinaryBuffer.slice(bufferStart, bufferStart + buffer.byteLength), bufferView.byteOffset, bufferView.byteLength);
  }
  function parseUint64Value(buffer) {
    const dataView = new DataView(buffer);
    const left = dataView.getUint32(0, true);
    const right = dataView.getUint32(4, true);
    return left + 2 ** 32 * right;
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/tile-3d-subtree-loader.js
  var Tile3DSubtreeLoader = {
    dataType: null,
    batchType: null,
    id: "3d-tiles-subtree",
    name: "3D Tiles Subtree",
    module: "3d-tiles",
    version: VERSION11,
    extensions: ["subtree"],
    mimeTypes: ["application/octet-stream"],
    tests: ["subtree"],
    parse: parse3DTilesSubtree,
    options: {}
  };

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/helpers/parse-3d-implicit-tiles.js
  init_dist2();

  // ../../node_modules/@loaders.gl/3d-tiles/node_modules/long/index.js
  var wasm = null;
  try {
    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
      0,
      97,
      115,
      109,
      1,
      0,
      0,
      0,
      1,
      13,
      2,
      96,
      0,
      1,
      127,
      96,
      4,
      127,
      127,
      127,
      127,
      1,
      127,
      3,
      7,
      6,
      0,
      1,
      1,
      1,
      1,
      1,
      6,
      6,
      1,
      127,
      1,
      65,
      0,
      11,
      7,
      50,
      6,
      3,
      109,
      117,
      108,
      0,
      1,
      5,
      100,
      105,
      118,
      95,
      115,
      0,
      2,
      5,
      100,
      105,
      118,
      95,
      117,
      0,
      3,
      5,
      114,
      101,
      109,
      95,
      115,
      0,
      4,
      5,
      114,
      101,
      109,
      95,
      117,
      0,
      5,
      8,
      103,
      101,
      116,
      95,
      104,
      105,
      103,
      104,
      0,
      0,
      10,
      191,
      1,
      6,
      4,
      0,
      35,
      0,
      11,
      36,
      1,
      1,
      126,
      32,
      0,
      173,
      32,
      1,
      173,
      66,
      32,
      134,
      132,
      32,
      2,
      173,
      32,
      3,
      173,
      66,
      32,
      134,
      132,
      126,
      34,
      4,
      66,
      32,
      135,
      167,
      36,
      0,
      32,
      4,
      167,
      11,
      36,
      1,
      1,
      126,
      32,
      0,
      173,
      32,
      1,
      173,
      66,
      32,
      134,
      132,
      32,
      2,
      173,
      32,
      3,
      173,
      66,
      32,
      134,
      132,
      127,
      34,
      4,
      66,
      32,
      135,
      167,
      36,
      0,
      32,
      4,
      167,
      11,
      36,
      1,
      1,
      126,
      32,
      0,
      173,
      32,
      1,
      173,
      66,
      32,
      134,
      132,
      32,
      2,
      173,
      32,
      3,
      173,
      66,
      32,
      134,
      132,
      128,
      34,
      4,
      66,
      32,
      135,
      167,
      36,
      0,
      32,
      4,
      167,
      11,
      36,
      1,
      1,
      126,
      32,
      0,
      173,
      32,
      1,
      173,
      66,
      32,
      134,
      132,
      32,
      2,
      173,
      32,
      3,
      173,
      66,
      32,
      134,
      132,
      129,
      34,
      4,
      66,
      32,
      135,
      167,
      36,
      0,
      32,
      4,
      167,
      11,
      36,
      1,
      1,
      126,
      32,
      0,
      173,
      32,
      1,
      173,
      66,
      32,
      134,
      132,
      32,
      2,
      173,
      32,
      3,
      173,
      66,
      32,
      134,
      132,
      130,
      34,
      4,
      66,
      32,
      135,
      167,
      36,
      0,
      32,
      4,
      167,
      11
    ])), {}).exports;
  } catch (e6) {
  }
  function Long3(low, high, unsigned) {
    this.low = low | 0;
    this.high = high | 0;
    this.unsigned = !!unsigned;
  }
  Long3.prototype.__isLong__;
  Object.defineProperty(Long3.prototype, "__isLong__", { value: true });
  function isLong(obj) {
    return (obj && obj["__isLong__"]) === true;
  }
  function ctz32(value) {
    var c5 = Math.clz32(value & -value);
    return value ? 31 - c5 : c5;
  }
  Long3.isLong = isLong;
  var INT_CACHE = {};
  var UINT_CACHE = {};
  function fromInt(value, unsigned) {
    var obj, cachedObj, cache3;
    if (unsigned) {
      value >>>= 0;
      if (cache3 = 0 <= value && value < 256) {
        cachedObj = UINT_CACHE[value];
        if (cachedObj)
          return cachedObj;
      }
      obj = fromBits(value, 0, true);
      if (cache3)
        UINT_CACHE[value] = obj;
      return obj;
    } else {
      value |= 0;
      if (cache3 = -128 <= value && value < 128) {
        cachedObj = INT_CACHE[value];
        if (cachedObj)
          return cachedObj;
      }
      obj = fromBits(value, value < 0 ? -1 : 0, false);
      if (cache3)
        INT_CACHE[value] = obj;
      return obj;
    }
  }
  Long3.fromInt = fromInt;
  function fromNumber(value, unsigned) {
    if (isNaN(value))
      return unsigned ? UZERO : ZERO17;
    if (unsigned) {
      if (value < 0)
        return UZERO;
      if (value >= TWO_PWR_64_DBL)
        return MAX_UNSIGNED_VALUE;
    } else {
      if (value <= -TWO_PWR_63_DBL)
        return MIN_VALUE;
      if (value + 1 >= TWO_PWR_63_DBL)
        return MAX_VALUE;
    }
    if (value < 0)
      return fromNumber(-value, unsigned).neg();
    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
  }
  Long3.fromNumber = fromNumber;
  function fromBits(lowBits, highBits, unsigned) {
    return new Long3(lowBits, highBits, unsigned);
  }
  Long3.fromBits = fromBits;
  var pow_dbl = Math.pow;
  function fromString(str8, unsigned, radix) {
    if (str8.length === 0)
      throw Error("empty string");
    if (typeof unsigned === "number") {
      radix = unsigned;
      unsigned = false;
    } else {
      unsigned = !!unsigned;
    }
    if (str8 === "NaN" || str8 === "Infinity" || str8 === "+Infinity" || str8 === "-Infinity")
      return unsigned ? UZERO : ZERO17;
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
      throw RangeError("radix");
    var p5;
    if ((p5 = str8.indexOf("-")) > 0)
      throw Error("interior hyphen");
    else if (p5 === 0) {
      return fromString(str8.substring(1), unsigned, radix).neg();
    }
    var radixToPower = fromNumber(pow_dbl(radix, 8));
    var result = ZERO17;
    for (var i7 = 0; i7 < str8.length; i7 += 8) {
      var size = Math.min(8, str8.length - i7), value = parseInt(str8.substring(i7, i7 + size), radix);
      if (size < 8) {
        var power = fromNumber(pow_dbl(radix, size));
        result = result.mul(power).add(fromNumber(value));
      } else {
        result = result.mul(radixToPower);
        result = result.add(fromNumber(value));
      }
    }
    result.unsigned = unsigned;
    return result;
  }
  Long3.fromString = fromString;
  function fromValue(val2, unsigned) {
    if (typeof val2 === "number")
      return fromNumber(val2, unsigned);
    if (typeof val2 === "string")
      return fromString(val2, unsigned);
    return fromBits(val2.low, val2.high, typeof unsigned === "boolean" ? unsigned : val2.unsigned);
  }
  Long3.fromValue = fromValue;
  var TWO_PWR_16_DBL = 1 << 16;
  var TWO_PWR_24_DBL = 1 << 24;
  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);
  var ZERO17 = fromInt(0);
  Long3.ZERO = ZERO17;
  var UZERO = fromInt(0, true);
  Long3.UZERO = UZERO;
  var ONE = fromInt(1);
  Long3.ONE = ONE;
  var UONE = fromInt(1, true);
  Long3.UONE = UONE;
  var NEG_ONE = fromInt(-1);
  Long3.NEG_ONE = NEG_ONE;
  var MAX_VALUE = fromBits(4294967295 | 0, 2147483647 | 0, false);
  Long3.MAX_VALUE = MAX_VALUE;
  var MAX_UNSIGNED_VALUE = fromBits(4294967295 | 0, 4294967295 | 0, true);
  Long3.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;
  var MIN_VALUE = fromBits(0, 2147483648 | 0, false);
  Long3.MIN_VALUE = MIN_VALUE;
  var LongPrototype = Long3.prototype;
  LongPrototype.toInt = function toInt() {
    return this.unsigned ? this.low >>> 0 : this.low;
  };
  LongPrototype.toNumber = function toNumber() {
    if (this.unsigned)
      return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
  };
  LongPrototype.toString = function toString(radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
      throw RangeError("radix");
    if (this.isZero())
      return "0";
    if (this.isNegative()) {
      if (this.eq(MIN_VALUE)) {
        var radixLong = fromNumber(radix), div6 = this.div(radixLong), rem1 = div6.mul(radixLong).sub(this);
        return div6.toString(radix) + rem1.toInt().toString(radix);
      } else
        return "-" + this.neg().toString(radix);
    }
    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned), rem = this;
    var result = "";
    while (true) {
      var remDiv = rem.div(radixToPower), intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0, digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero())
        return digits + result;
      else {
        while (digits.length < 6)
          digits = "0" + digits;
        result = "" + digits + result;
      }
    }
  };
  LongPrototype.getHighBits = function getHighBits() {
    return this.high;
  };
  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
    return this.high >>> 0;
  };
  LongPrototype.getLowBits = function getLowBits() {
    return this.low;
  };
  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
    return this.low >>> 0;
  };
  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
    if (this.isNegative())
      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    var val2 = this.high != 0 ? this.high : this.low;
    for (var bit = 31; bit > 0; bit--)
      if ((val2 & 1 << bit) != 0)
        break;
    return this.high != 0 ? bit + 33 : bit + 1;
  };
  LongPrototype.isZero = function isZero() {
    return this.high === 0 && this.low === 0;
  };
  LongPrototype.eqz = LongPrototype.isZero;
  LongPrototype.isNegative = function isNegative() {
    return !this.unsigned && this.high < 0;
  };
  LongPrototype.isPositive = function isPositive() {
    return this.unsigned || this.high >= 0;
  };
  LongPrototype.isOdd = function isOdd() {
    return (this.low & 1) === 1;
  };
  LongPrototype.isEven = function isEven() {
    return (this.low & 1) === 0;
  };
  LongPrototype.equals = function equals15(other) {
    if (!isLong(other))
      other = fromValue(other);
    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)
      return false;
    return this.high === other.high && this.low === other.low;
  };
  LongPrototype.eq = LongPrototype.equals;
  LongPrototype.notEquals = function notEquals(other) {
    return !this.eq(
      /* validates */
      other
    );
  };
  LongPrototype.neq = LongPrototype.notEquals;
  LongPrototype.ne = LongPrototype.notEquals;
  LongPrototype.lessThan = function lessThan(other) {
    return this.comp(
      /* validates */
      other
    ) < 0;
  };
  LongPrototype.lt = LongPrototype.lessThan;
  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
    return this.comp(
      /* validates */
      other
    ) <= 0;
  };
  LongPrototype.lte = LongPrototype.lessThanOrEqual;
  LongPrototype.le = LongPrototype.lessThanOrEqual;
  LongPrototype.greaterThan = function greaterThan(other) {
    return this.comp(
      /* validates */
      other
    ) > 0;
  };
  LongPrototype.gt = LongPrototype.greaterThan;
  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
    return this.comp(
      /* validates */
      other
    ) >= 0;
  };
  LongPrototype.gte = LongPrototype.greaterThanOrEqual;
  LongPrototype.ge = LongPrototype.greaterThanOrEqual;
  LongPrototype.compare = function compare(other) {
    if (!isLong(other))
      other = fromValue(other);
    if (this.eq(other))
      return 0;
    var thisNeg = this.isNegative(), otherNeg = other.isNegative();
    if (thisNeg && !otherNeg)
      return -1;
    if (!thisNeg && otherNeg)
      return 1;
    if (!this.unsigned)
      return this.sub(other).isNegative() ? -1 : 1;
    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
  };
  LongPrototype.comp = LongPrototype.compare;
  LongPrototype.negate = function negate6() {
    if (!this.unsigned && this.eq(MIN_VALUE))
      return MIN_VALUE;
    return this.not().add(ONE);
  };
  LongPrototype.neg = LongPrototype.negate;
  LongPrototype.add = function add16(addend) {
    if (!isLong(addend))
      addend = fromValue(addend);
    var a48 = this.high >>> 16;
    var a32 = this.high & 65535;
    var a16 = this.low >>> 16;
    var a00 = this.low & 65535;
    var b48 = addend.high >>> 16;
    var b32 = addend.high & 65535;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 65535;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 65535;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 65535;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 65535;
    c48 += a48 + b48;
    c48 &= 65535;
    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
  };
  LongPrototype.subtract = function subtract8(subtrahend) {
    if (!isLong(subtrahend))
      subtrahend = fromValue(subtrahend);
    return this.add(subtrahend.neg());
  };
  LongPrototype.sub = LongPrototype.subtract;
  LongPrototype.multiply = function multiply20(multiplier) {
    if (this.isZero())
      return this;
    if (!isLong(multiplier))
      multiplier = fromValue(multiplier);
    if (wasm) {
      var low = wasm["mul"](
        this.low,
        this.high,
        multiplier.low,
        multiplier.high
      );
      return fromBits(low, wasm["get_high"](), this.unsigned);
    }
    if (multiplier.isZero())
      return this.unsigned ? UZERO : ZERO17;
    if (this.eq(MIN_VALUE))
      return multiplier.isOdd() ? MIN_VALUE : ZERO17;
    if (multiplier.eq(MIN_VALUE))
      return this.isOdd() ? MIN_VALUE : ZERO17;
    if (this.isNegative()) {
      if (multiplier.isNegative())
        return this.neg().mul(multiplier.neg());
      else
        return this.neg().mul(multiplier).neg();
    } else if (multiplier.isNegative())
      return this.mul(multiplier.neg()).neg();
    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
      return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);
    var a48 = this.high >>> 16;
    var a32 = this.high & 65535;
    var a16 = this.low >>> 16;
    var a00 = this.low & 65535;
    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 65535;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 65535;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 65535;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 65535;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 65535;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 65535;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 65535;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 65535;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 65535;
    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
  };
  LongPrototype.mul = LongPrototype.multiply;
  LongPrototype.divide = function divide6(divisor) {
    if (!isLong(divisor))
      divisor = fromValue(divisor);
    if (divisor.isZero())
      throw Error("division by zero");
    if (wasm) {
      if (!this.unsigned && this.high === -2147483648 && divisor.low === -1 && divisor.high === -1) {
        return this;
      }
      var low = (this.unsigned ? wasm["div_u"] : wasm["div_s"])(
        this.low,
        this.high,
        divisor.low,
        divisor.high
      );
      return fromBits(low, wasm["get_high"](), this.unsigned);
    }
    if (this.isZero())
      return this.unsigned ? UZERO : ZERO17;
    var approx, rem, res;
    if (!this.unsigned) {
      if (this.eq(MIN_VALUE)) {
        if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
          return MIN_VALUE;
        else if (divisor.eq(MIN_VALUE))
          return ONE;
        else {
          var halfThis = this.shr(1);
          approx = halfThis.div(divisor).shl(1);
          if (approx.eq(ZERO17)) {
            return divisor.isNegative() ? ONE : NEG_ONE;
          } else {
            rem = this.sub(divisor.mul(approx));
            res = approx.add(rem.div(divisor));
            return res;
          }
        }
      } else if (divisor.eq(MIN_VALUE))
        return this.unsigned ? UZERO : ZERO17;
      if (this.isNegative()) {
        if (divisor.isNegative())
          return this.neg().div(divisor.neg());
        return this.neg().div(divisor).neg();
      } else if (divisor.isNegative())
        return this.div(divisor.neg()).neg();
      res = ZERO17;
    } else {
      if (!divisor.unsigned)
        divisor = divisor.toUnsigned();
      if (divisor.gt(this))
        return UZERO;
      if (divisor.gt(this.shru(1)))
        return UONE;
      res = UZERO;
    }
    rem = this;
    while (rem.gte(divisor)) {
      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
      var log23 = Math.ceil(Math.log(approx) / Math.LN2), delta = log23 <= 48 ? 1 : pow_dbl(2, log23 - 48), approxRes = fromNumber(approx), approxRem = approxRes.mul(divisor);
      while (approxRem.isNegative() || approxRem.gt(rem)) {
        approx -= delta;
        approxRes = fromNumber(approx, this.unsigned);
        approxRem = approxRes.mul(divisor);
      }
      if (approxRes.isZero())
        approxRes = ONE;
      res = res.add(approxRes);
      rem = rem.sub(approxRem);
    }
    return res;
  };
  LongPrototype.div = LongPrototype.divide;
  LongPrototype.modulo = function modulo(divisor) {
    if (!isLong(divisor))
      divisor = fromValue(divisor);
    if (wasm) {
      var low = (this.unsigned ? wasm["rem_u"] : wasm["rem_s"])(
        this.low,
        this.high,
        divisor.low,
        divisor.high
      );
      return fromBits(low, wasm["get_high"](), this.unsigned);
    }
    return this.sub(this.div(divisor).mul(divisor));
  };
  LongPrototype.mod = LongPrototype.modulo;
  LongPrototype.rem = LongPrototype.modulo;
  LongPrototype.not = function not() {
    return fromBits(~this.low, ~this.high, this.unsigned);
  };
  LongPrototype.countLeadingZeros = function countLeadingZeros() {
    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;
  };
  LongPrototype.clz = LongPrototype.countLeadingZeros;
  LongPrototype.countTrailingZeros = function countTrailingZeros() {
    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;
  };
  LongPrototype.ctz = LongPrototype.countTrailingZeros;
  LongPrototype.and = function and(other) {
    if (!isLong(other))
      other = fromValue(other);
    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
  };
  LongPrototype.or = function or(other) {
    if (!isLong(other))
      other = fromValue(other);
    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
  };
  LongPrototype.xor = function xor(other) {
    if (!isLong(other))
      other = fromValue(other);
    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
  };
  LongPrototype.shiftLeft = function shiftLeft2(numBits) {
    if (isLong(numBits))
      numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
      return this;
    else if (numBits < 32)
      return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);
    else
      return fromBits(0, this.low << numBits - 32, this.unsigned);
  };
  LongPrototype.shl = LongPrototype.shiftLeft;
  LongPrototype.shiftRight = function shiftRight2(numBits) {
    if (isLong(numBits))
      numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
      return this;
    else if (numBits < 32)
      return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);
    else
      return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
  };
  LongPrototype.shr = LongPrototype.shiftRight;
  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
    if (isLong(numBits))
      numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
      return this;
    if (numBits < 32)
      return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);
    if (numBits === 32)
      return fromBits(this.high, 0, this.unsigned);
    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);
  };
  LongPrototype.shru = LongPrototype.shiftRightUnsigned;
  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;
  LongPrototype.rotateLeft = function rotateLeft(numBits) {
    var b4;
    if (isLong(numBits))
      numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
      return this;
    if (numBits === 32)
      return fromBits(this.high, this.low, this.unsigned);
    if (numBits < 32) {
      b4 = 32 - numBits;
      return fromBits(this.low << numBits | this.high >>> b4, this.high << numBits | this.low >>> b4, this.unsigned);
    }
    numBits -= 32;
    b4 = 32 - numBits;
    return fromBits(this.high << numBits | this.low >>> b4, this.low << numBits | this.high >>> b4, this.unsigned);
  };
  LongPrototype.rotl = LongPrototype.rotateLeft;
  LongPrototype.rotateRight = function rotateRight(numBits) {
    var b4;
    if (isLong(numBits))
      numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
      return this;
    if (numBits === 32)
      return fromBits(this.high, this.low, this.unsigned);
    if (numBits < 32) {
      b4 = 32 - numBits;
      return fromBits(this.high << b4 | this.low >>> numBits, this.low << b4 | this.high >>> numBits, this.unsigned);
    }
    numBits -= 32;
    b4 = 32 - numBits;
    return fromBits(this.low << b4 | this.high >>> numBits, this.high << b4 | this.low >>> numBits, this.unsigned);
  };
  LongPrototype.rotr = LongPrototype.rotateRight;
  LongPrototype.toSigned = function toSigned() {
    if (!this.unsigned)
      return this;
    return fromBits(this.low, this.high, false);
  };
  LongPrototype.toUnsigned = function toUnsigned() {
    if (this.unsigned)
      return this;
    return fromBits(this.low, this.high, true);
  };
  LongPrototype.toBytes = function toBytes(le2) {
    return le2 ? this.toBytesLE() : this.toBytesBE();
  };
  LongPrototype.toBytesLE = function toBytesLE() {
    var hi = this.high, lo = this.low;
    return [
      lo & 255,
      lo >>> 8 & 255,
      lo >>> 16 & 255,
      lo >>> 24,
      hi & 255,
      hi >>> 8 & 255,
      hi >>> 16 & 255,
      hi >>> 24
    ];
  };
  LongPrototype.toBytesBE = function toBytesBE() {
    var hi = this.high, lo = this.low;
    return [
      hi >>> 24,
      hi >>> 16 & 255,
      hi >>> 8 & 255,
      hi & 255,
      lo >>> 24,
      lo >>> 16 & 255,
      lo >>> 8 & 255,
      lo & 255
    ];
  };
  Long3.fromBytes = function fromBytes(bytes, unsigned, le2) {
    return le2 ? Long3.fromBytesLE(bytes, unsigned) : Long3.fromBytesBE(bytes, unsigned);
  };
  Long3.fromBytesLE = function fromBytesLE(bytes, unsigned) {
    return new Long3(
      bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24,
      bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24,
      unsigned
    );
  };
  Long3.fromBytesBE = function fromBytesBE(bytes, unsigned) {
    return new Long3(
      bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7],
      bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3],
      unsigned
    );
  };
  var long_default = Long3;

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/utils/s2/s2-token-functions.js
  var MAXIMUM_TOKEN_LENGTH = 16;
  function getS2CellIdFromToken(token) {
    if (token === "X") {
      token = "";
    }
    const paddedToken = token.padEnd(MAXIMUM_TOKEN_LENGTH, "0");
    return long_default.fromString(paddedToken, true, 16);
  }
  function getS2TokenFromCellId(cellId) {
    if (cellId.isZero()) {
      return "X";
    }
    let numZeroDigits = cellId.countTrailingZeros();
    const remainder = numZeroDigits % 4;
    numZeroDigits = (numZeroDigits - remainder) / 4;
    const trailingZeroHexChars = numZeroDigits;
    numZeroDigits *= 4;
    const x4 = cellId.shiftRightUnsigned(numZeroDigits);
    const hexString = x4.toString(16).replace(/0+$/, "");
    const zeroString = Array(17 - trailingZeroHexChars - hexString.length).join("0");
    return zeroString + hexString;
  }
  function getS2ChildCellId(cellId, index) {
    const newLsb = lsb(cellId).shiftRightUnsigned(2);
    const childCellId = cellId.add(long_default.fromNumber(2 * index + 1 - 4).multiply(newLsb));
    return childCellId;
  }
  function lsb(cellId) {
    return cellId.and(cellId.not().add(1));
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/utils/s2/s2geometry/s2-geometry.js
  var FACE_BITS2 = 3;
  var MAX_LEVEL2 = 30;
  var POS_BITS2 = 2 * MAX_LEVEL2 + 1;
  var RADIAN_TO_DEGREE2 = 180 / Math.PI;
  function getS2CellFromQuadKey(hilbertQuadkey) {
    if (hilbertQuadkey.length === 0) {
      throw new Error(`Invalid Hilbert quad key ${hilbertQuadkey}`);
    }
    const parts = hilbertQuadkey.split("/");
    const face = parseInt(parts[0], 10);
    const position = parts[1];
    const maxLevel = position.length;
    let level = 0;
    const point = [0, 0];
    for (let i7 = maxLevel - 1; i7 >= 0; i7--) {
      level = maxLevel - i7;
      const bit = position[i7];
      let rx = 0;
      let ry = 0;
      if (bit === "1") {
        ry = 1;
      } else if (bit === "2") {
        rx = 1;
        ry = 1;
      } else if (bit === "3") {
        rx = 1;
      }
      const val2 = Math.pow(2, level - 1);
      rotateAndFlipQuadrant2(val2, point, rx, ry);
      point[0] += val2 * rx;
      point[1] += val2 * ry;
    }
    if (face % 2 === 1) {
      const t5 = point[0];
      point[0] = point[1];
      point[1] = t5;
    }
    return { face, ij: point, level };
  }
  function getS2QuadkeyFromCellId(cellId) {
    if (cellId.isZero()) {
      return "";
    }
    let bin = cellId.toString(2);
    while (bin.length < FACE_BITS2 + POS_BITS2) {
      bin = "0" + bin;
    }
    const lsbIndex = bin.lastIndexOf("1");
    const faceB = bin.substring(0, 3);
    const posB = bin.substring(3, lsbIndex);
    const levelN = posB.length / 2;
    const faceS = long_default.fromString(faceB, true, 2).toString(10);
    let posS = "";
    if (levelN !== 0) {
      posS = long_default.fromString(posB, true, 2).toString(4);
      while (posS.length < levelN) {
        posS = "0" + posS;
      }
    }
    return `${faceS}/${posS}`;
  }
  function IJToST2(ij, level, offsets) {
    const maxSize = 1 << level;
    return [(ij[0] + offsets[0]) / maxSize, (ij[1] + offsets[1]) / maxSize];
  }
  function singleSTtoUV2(st2) {
    if (st2 >= 0.5) {
      return 1 / 3 * (4 * st2 * st2 - 1);
    }
    return 1 / 3 * (1 - 4 * (1 - st2) * (1 - st2));
  }
  function STToUV2(st2) {
    return [singleSTtoUV2(st2[0]), singleSTtoUV2(st2[1])];
  }
  function FaceUVToXYZ2(face, [u6, v5]) {
    switch (face) {
      case 0:
        return [1, u6, v5];
      case 1:
        return [-u6, 1, v5];
      case 2:
        return [-u6, -v5, 1];
      case 3:
        return [-1, -v5, -u6];
      case 4:
        return [v5, -1, -u6];
      case 5:
        return [v5, u6, -1];
      default:
        throw new Error("Invalid face");
    }
  }
  function XYZToLngLat2([x4, y5, z4]) {
    const lat = Math.atan2(z4, Math.sqrt(x4 * x4 + y5 * y5));
    const lng = Math.atan2(y5, x4);
    return [lng * RADIAN_TO_DEGREE2, lat * RADIAN_TO_DEGREE2];
  }
  function rotateAndFlipQuadrant2(n4, point, rx, ry) {
    if (ry === 0) {
      if (rx === 1) {
        point[0] = n4 - 1 - point[0];
        point[1] = n4 - 1 - point[1];
      }
      const x4 = point[0];
      point[0] = point[1];
      point[1] = x4;
    }
  }
  function getS2LngLatFromS2Cell(s2Cell) {
    const st2 = IJToST2(s2Cell.ij, s2Cell.level, [0.5, 0.5]);
    const uv = STToUV2(st2);
    const xyz = FaceUVToXYZ2(s2Cell.face, uv);
    return XYZToLngLat2(xyz);
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/utils/s2/converters/s2-to-boundary.js
  var MAX_RESOLUTION3 = 100;
  function getS2BoundaryFlatFromS2Cell(s2cell) {
    const { face, ij, level } = s2cell;
    const offsets = [
      [0, 0],
      [0, 1],
      [1, 1],
      [1, 0],
      [0, 0]
    ];
    const resolution = Math.max(1, Math.ceil(MAX_RESOLUTION3 * Math.pow(2, -level)));
    const result = new Float64Array(4 * resolution * 2 + 2);
    let ptIndex = 0;
    let prevLng = 0;
    for (let i7 = 0; i7 < 4; i7++) {
      const offset = offsets[i7].slice(0);
      const nextOffset = offsets[i7 + 1];
      const stepI = (nextOffset[0] - offset[0]) / resolution;
      const stepJ = (nextOffset[1] - offset[1]) / resolution;
      for (let j4 = 0; j4 < resolution; j4++) {
        offset[0] += stepI;
        offset[1] += stepJ;
        const st2 = IJToST2(ij, level, offset);
        const uv = STToUV2(st2);
        const xyz = FaceUVToXYZ2(face, uv);
        const lngLat = XYZToLngLat2(xyz);
        if (Math.abs(lngLat[1]) > 89.999) {
          lngLat[0] = prevLng;
        }
        const deltaLng = lngLat[0] - prevLng;
        lngLat[0] += deltaLng > 180 ? -360 : deltaLng < -180 ? 360 : 0;
        result[ptIndex++] = lngLat[0];
        result[ptIndex++] = lngLat[1];
        prevLng = lngLat[0];
      }
    }
    result[ptIndex++] = result[0];
    result[ptIndex++] = result[1];
    return result;
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/utils/s2/s2geometry/s2-cell-utils.js
  function getS2Cell(tokenOrKey) {
    const key = getS2QuadKey2(tokenOrKey);
    const s2cell = getS2CellFromQuadKey(key);
    return s2cell;
  }
  function getS2QuadKey2(tokenOrKey) {
    if (tokenOrKey.indexOf("/") > 0) {
      return tokenOrKey;
    }
    const id = getS2CellIdFromToken(tokenOrKey);
    return getS2QuadkeyFromCellId(id);
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/utils/s2/s2-geometry-functions.js
  function getS2LngLat(s2Token) {
    const s2cell = getS2Cell(s2Token);
    return getS2LngLatFromS2Cell(s2cell);
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/utils/s2/converters/s2-to-region.js
  function getS2Region(s2cell) {
    let region;
    if (s2cell.face === 2 || s2cell.face === 5) {
      let corners = null;
      let len9 = 0;
      for (let i7 = 0; i7 < 4; i7++) {
        const key = `${s2cell.face}/${i7}`;
        const cell = getS2Cell(key);
        const corns = getS2BoundaryFlatFromS2Cell(cell);
        if (typeof corners === "undefined" || corners === null)
          corners = new Float64Array(4 * corns.length);
        corners.set(corns, len9);
        len9 += corns.length;
      }
      region = get2DRegionFromS2Corners(corners);
    } else {
      const corners = getS2BoundaryFlatFromS2Cell(s2cell);
      region = get2DRegionFromS2Corners(corners);
    }
    return region;
  }
  function get2DRegionFromS2Corners(corners) {
    if (corners.length % 2 !== 0) {
      throw new Error("Invalid corners");
    }
    const longitudes = [];
    const latitudes = [];
    for (let i7 = 0; i7 < corners.length; i7 += 2) {
      longitudes.push(corners[i7]);
      latitudes.push(corners[i7 + 1]);
    }
    longitudes.sort((a6, b4) => a6 - b4);
    latitudes.sort((a6, b4) => a6 - b4);
    return {
      west: longitudes[0],
      east: longitudes[longitudes.length - 1],
      north: latitudes[latitudes.length - 1],
      south: latitudes[0]
    };
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/utils/s2/converters/s2-to-obb-points.js
  function getS2OrientedBoundingBoxCornerPoints(tokenOrKey, heightInfo) {
    const min7 = heightInfo?.minimumHeight || 0;
    const max7 = heightInfo?.maximumHeight || 0;
    const s2cell = getS2Cell(tokenOrKey);
    const region = getS2Region(s2cell);
    const W3 = region.west;
    const S3 = region.south;
    const E3 = region.east;
    const N3 = region.north;
    const points = [];
    points.push(new Vector37(W3, N3, min7));
    points.push(new Vector37(E3, N3, min7));
    points.push(new Vector37(E3, S3, min7));
    points.push(new Vector37(W3, S3, min7));
    points.push(new Vector37(W3, N3, max7));
    points.push(new Vector37(E3, N3, max7));
    points.push(new Vector37(E3, S3, max7));
    points.push(new Vector37(W3, S3, max7));
    return points;
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/utils/obb/s2-corners-to-obb.js
  function convertS2BoundingVolumetoOBB(s2VolumeInfo) {
    const token = s2VolumeInfo.token;
    const heightInfo = {
      minimumHeight: s2VolumeInfo.minimumHeight,
      maximumHeight: s2VolumeInfo.maximumHeight
    };
    const corners = getS2OrientedBoundingBoxCornerPoints(token, heightInfo);
    const center2 = getS2LngLat(token);
    const centerLng = center2[0];
    const centerLat = center2[1];
    const point = Ellipsoid.WGS84.cartographicToCartesian([
      centerLng,
      centerLat,
      heightInfo.maximumHeight
    ]);
    const centerPointAdditional = new Vector37(point[0], point[1], point[2]);
    corners.push(centerPointAdditional);
    const obb = makeOrientedBoundingBoxFromPoints2(corners);
    const box = [...obb.center, ...obb.halfAxes];
    return box;
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/helpers/parse-3d-implicit-tiles.js
  var QUADTREE_DIVISION_COUNT = 4;
  var OCTREE_DIVISION_COUNT = 8;
  var SUBDIVISION_COUNT_MAP = {
    QUADTREE: QUADTREE_DIVISION_COUNT,
    OCTREE: OCTREE_DIVISION_COUNT
  };
  function getChildS2VolumeBox(s2VolumeBox, index, subdivisionScheme) {
    if (s2VolumeBox?.box) {
      const cellId = getS2CellIdFromToken(s2VolumeBox.s2VolumeInfo.token);
      const childCellId = getS2ChildCellId(cellId, index);
      const childToken = getS2TokenFromCellId(childCellId);
      const s2ChildVolumeInfo = { ...s2VolumeBox.s2VolumeInfo };
      s2ChildVolumeInfo.token = childToken;
      switch (subdivisionScheme) {
        case "OCTREE":
          const s2VolumeInfo = s2VolumeBox.s2VolumeInfo;
          const delta = s2VolumeInfo.maximumHeight - s2VolumeInfo.minimumHeight;
          const sizeZ = delta / 2;
          const midZ = s2VolumeInfo.minimumHeight + delta / 2;
          s2VolumeInfo.minimumHeight = midZ - sizeZ;
          s2VolumeInfo.maximumHeight = midZ + sizeZ;
          break;
        default:
          break;
      }
      const box = convertS2BoundingVolumetoOBB(s2ChildVolumeInfo);
      const childS2VolumeBox = {
        box,
        s2VolumeInfo: s2ChildVolumeInfo
      };
      return childS2VolumeBox;
    }
    return void 0;
  }
  async function parseImplicitTiles(params) {
    const { implicitOptions, parentData = {
      mortonIndex: 0,
      x: 0,
      y: 0,
      z: 0
    }, childIndex = 0, s2VolumeBox, loaderOptions } = params;
    let { subtree, level = 0, globalData = {
      level: 0,
      mortonIndex: 0,
      x: 0,
      y: 0,
      z: 0
    } } = params;
    const { subdivisionScheme, subtreeLevels, maximumLevel, contentUrlTemplate, subtreesUriTemplate, basePath } = implicitOptions;
    const tile = { children: [], lodMetricValue: 0, contentUrl: "" };
    if (!maximumLevel) {
      dist_default.once(`Missing 'maximumLevel' or 'availableLevels' property. The subtree ${contentUrlTemplate} won't be loaded...`);
      return tile;
    }
    const lev = level + globalData.level;
    if (lev > maximumLevel) {
      return tile;
    }
    const childrenPerTile = SUBDIVISION_COUNT_MAP[subdivisionScheme];
    const bitsPerTile = Math.log2(childrenPerTile);
    const childX = childIndex & 1;
    const childY = childIndex >> 1 & 1;
    const childZ = childIndex >> 2 & 1;
    const levelOffset = (childrenPerTile ** level - 1) / (childrenPerTile - 1);
    let childTileMortonIndex = concatBits(parentData.mortonIndex, childIndex, bitsPerTile);
    let tileAvailabilityIndex = levelOffset + childTileMortonIndex;
    let childTileX = concatBits(parentData.x, childX, 1);
    let childTileY = concatBits(parentData.y, childY, 1);
    let childTileZ = concatBits(parentData.z, childZ, 1);
    let isChildSubtreeAvailable = false;
    if (level >= subtreeLevels) {
      isChildSubtreeAvailable = getAvailabilityResult(subtree.childSubtreeAvailability, childTileMortonIndex);
    }
    const x4 = concatBits(globalData.x, childTileX, level);
    const y5 = concatBits(globalData.y, childTileY, level);
    const z4 = concatBits(globalData.z, childTileZ, level);
    if (isChildSubtreeAvailable) {
      const subtreePath = `${basePath}/${subtreesUriTemplate}`;
      const childSubtreeUrl = replaceContentUrlTemplate(subtreePath, lev, x4, y5, z4);
      const childSubtree = await load(childSubtreeUrl, Tile3DSubtreeLoader, loaderOptions);
      subtree = childSubtree;
      globalData = {
        mortonIndex: childTileMortonIndex,
        x: childTileX,
        y: childTileY,
        z: childTileZ,
        level
      };
      childTileMortonIndex = 0;
      tileAvailabilityIndex = 0;
      childTileX = 0;
      childTileY = 0;
      childTileZ = 0;
      level = 0;
    }
    const isTileAvailable = getAvailabilityResult(subtree.tileAvailability, tileAvailabilityIndex);
    if (!isTileAvailable) {
      return tile;
    }
    const isContentAvailable = getAvailabilityResult(subtree.contentAvailability, tileAvailabilityIndex);
    if (isContentAvailable) {
      tile.contentUrl = replaceContentUrlTemplate(contentUrlTemplate, lev, x4, y5, z4);
    }
    const childTileLevel = level + 1;
    const pData = { mortonIndex: childTileMortonIndex, x: childTileX, y: childTileY, z: childTileZ };
    for (let index = 0; index < childrenPerTile; index++) {
      const childS2VolumeBox = getChildS2VolumeBox(s2VolumeBox, index, subdivisionScheme);
      const childTileParsed = await parseImplicitTiles({
        subtree,
        implicitOptions,
        loaderOptions,
        parentData: pData,
        childIndex: index,
        level: childTileLevel,
        globalData: { ...globalData },
        s2VolumeBox: childS2VolumeBox
      });
      if (childTileParsed.contentUrl || childTileParsed.children.length) {
        const globalLevel = lev + 1;
        const childCoordinates = { childTileX, childTileY, childTileZ };
        const formattedTile = formatTileData(childTileParsed, globalLevel, childCoordinates, implicitOptions, s2VolumeBox);
        tile.children.push(formattedTile);
      }
    }
    return tile;
  }
  function getAvailabilityResult(availabilityData, index) {
    let availabilityObject;
    if (Array.isArray(availabilityData)) {
      availabilityObject = availabilityData[0];
      if (availabilityData.length > 1) {
        dist_default.once('Not supported extension "3DTILES_multiple_contents" has been detected');
      }
    } else {
      availabilityObject = availabilityData;
    }
    if ("constant" in availabilityObject) {
      return Boolean(availabilityObject.constant);
    }
    if (availabilityObject.explicitBitstream) {
      return getBooleanValueFromBitstream(index, availabilityObject.explicitBitstream);
    }
    return false;
  }
  function formatTileData(tile, level, childCoordinates, options, s2VolumeBox) {
    const { basePath, refine, getRefine: getRefine2, lodMetricType, getTileType: getTileType2, rootLodMetricValue, rootBoundingVolume } = options;
    const uri = tile.contentUrl && tile.contentUrl.replace(`${basePath}/`, "");
    const lodMetricValue = rootLodMetricValue / 2 ** level;
    const boundingVolume = s2VolumeBox?.box ? { box: s2VolumeBox.box } : rootBoundingVolume;
    const boundingVolumeForChildTile = calculateBoundingVolumeForChildTile(level, boundingVolume, childCoordinates);
    return {
      children: tile.children,
      contentUrl: tile.contentUrl,
      content: { uri },
      id: tile.contentUrl,
      refine: getRefine2(refine),
      type: getTileType2(tile),
      lodMetricType,
      lodMetricValue,
      geometricError: lodMetricValue,
      transform: tile.transform,
      boundingVolume: boundingVolumeForChildTile
    };
  }
  function calculateBoundingVolumeForChildTile(level, rootBoundingVolume, childCoordinates) {
    if (rootBoundingVolume.region) {
      const { childTileX, childTileY, childTileZ } = childCoordinates;
      const [west, south, east, north, minimumHeight, maximumHeight] = rootBoundingVolume.region;
      const boundingVolumesCount = 2 ** level;
      const sizeX = (east - west) / boundingVolumesCount;
      const sizeY = (north - south) / boundingVolumesCount;
      const sizeZ = (maximumHeight - minimumHeight) / boundingVolumesCount;
      const [childWest, childEast] = [west + sizeX * childTileX, west + sizeX * (childTileX + 1)];
      const [childSouth, childNorth] = [south + sizeY * childTileY, south + sizeY * (childTileY + 1)];
      const [childMinimumHeight, childMaximumHeight] = [
        minimumHeight + sizeZ * childTileZ,
        minimumHeight + sizeZ * (childTileZ + 1)
      ];
      return {
        region: [childWest, childSouth, childEast, childNorth, childMinimumHeight, childMaximumHeight]
      };
    }
    if (rootBoundingVolume.box) {
      return rootBoundingVolume;
    }
    throw new Error(`Unsupported bounding volume type ${JSON.stringify(rootBoundingVolume)}`);
  }
  function concatBits(higher, lower, shift) {
    return (higher << shift) + lower;
  }
  function replaceContentUrlTemplate(templateUrl, level, x4, y5, z4) {
    const mapUrl = generateMapUrl({ level, x: x4, y: y5, z: z4 });
    return templateUrl.replace(/{level}|{x}|{y}|{z}/gi, (matched) => mapUrl[matched]);
  }
  function generateMapUrl(items) {
    const mapUrl = {};
    for (const key in items) {
      mapUrl[`{${key}}`] = items[key];
    }
    return mapUrl;
  }
  function getBooleanValueFromBitstream(availabilityIndex, availabilityBuffer) {
    const byteIndex = Math.floor(availabilityIndex / 8);
    const bitIndex = availabilityIndex % 8;
    const bitValue = availabilityBuffer[byteIndex] >> bitIndex & 1;
    return bitValue === 1;
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/lib/parsers/parse-3d-tile-header.js
  function getTileType(tile, tileContentUrl = "") {
    if (!tileContentUrl) {
      return TILE_TYPE.EMPTY;
    }
    const contentUrl = tileContentUrl.split("?")[0];
    const fileExtension = contentUrl.split(".").pop();
    switch (fileExtension) {
      case "pnts":
        return TILE_TYPE.POINTCLOUD;
      case "i3dm":
      case "b3dm":
      case "glb":
      case "gltf":
        return TILE_TYPE.SCENEGRAPH;
      default:
        return fileExtension || TILE_TYPE.EMPTY;
    }
  }
  function getRefine(refine) {
    switch (refine) {
      case "REPLACE":
      case "replace":
        return TILE_REFINEMENT.REPLACE;
      case "ADD":
      case "add":
        return TILE_REFINEMENT.ADD;
      default:
        return refine;
    }
  }
  function resolveUri(uri, basePath) {
    const urlSchemeRegex = /^[a-z][0-9a-z+.-]*:/i;
    if (urlSchemeRegex.test(basePath)) {
      const url = new URL(uri, `${basePath}/`);
      return decodeURI(url.toString());
    } else if (uri.startsWith("/")) {
      return uri;
    }
    return path_exports.resolve(basePath, uri);
  }
  function normalizeTileData(tile, basePath) {
    if (!tile) {
      return null;
    }
    let tileContentUrl;
    if (tile.content) {
      const contentUri = tile.content.uri || tile.content?.url;
      if (typeof contentUri !== "undefined") {
        tileContentUrl = resolveUri(contentUri, basePath);
      }
    }
    const tilePostprocessed = {
      ...tile,
      id: tileContentUrl,
      contentUrl: tileContentUrl,
      lodMetricType: LOD_METRIC_TYPE.GEOMETRIC_ERROR,
      lodMetricValue: tile.geometricError,
      transformMatrix: tile.transform,
      type: getTileType(tile, tileContentUrl),
      refine: getRefine(tile.refine)
    };
    return tilePostprocessed;
  }
  async function normalizeTileHeaders(tileset, basePath, options) {
    let root = null;
    const rootImplicitTilingExtension = getImplicitTilingExtensionData(tileset.root);
    if (rootImplicitTilingExtension && tileset.root) {
      root = await normalizeImplicitTileHeaders(tileset.root, tileset, basePath, rootImplicitTilingExtension, options);
    } else {
      root = normalizeTileData(tileset.root, basePath);
    }
    const stack2 = [];
    stack2.push(root);
    while (stack2.length > 0) {
      const tile = stack2.pop() || {};
      const children = tile.children || [];
      const childrenPostprocessed = [];
      for (const childHeader of children) {
        const childImplicitTilingExtension = getImplicitTilingExtensionData(childHeader);
        let childHeaderPostprocessed;
        if (childImplicitTilingExtension) {
          childHeaderPostprocessed = await normalizeImplicitTileHeaders(childHeader, tileset, basePath, childImplicitTilingExtension, options);
        } else {
          childHeaderPostprocessed = normalizeTileData(childHeader, basePath);
        }
        if (childHeaderPostprocessed) {
          childrenPostprocessed.push(childHeaderPostprocessed);
          stack2.push(childHeaderPostprocessed);
        }
      }
      tile.children = childrenPostprocessed;
    }
    return root;
  }
  async function normalizeImplicitTileHeaders(tile, tileset, basePath, implicitTilingExtension, options) {
    const { subdivisionScheme, maximumLevel, availableLevels, subtreeLevels, subtrees: { uri: subtreesUriTemplate } } = implicitTilingExtension;
    const replacedUrlTemplate = replaceContentUrlTemplate(subtreesUriTemplate, 0, 0, 0, 0);
    const subtreeUrl = resolveUri(replacedUrlTemplate, basePath);
    const subtree = await load(subtreeUrl, Tile3DSubtreeLoader, options);
    const tileContentUri = tile.content?.uri;
    const contentUrlTemplate = tileContentUri ? resolveUri(tileContentUri, basePath) : "";
    const refine = tileset?.root?.refine;
    const rootLodMetricValue = tile.geometricError;
    const s2VolumeInfo = tile.boundingVolume.extensions?.["3DTILES_bounding_volume_S2"];
    if (s2VolumeInfo) {
      const box = convertS2BoundingVolumetoOBB(s2VolumeInfo);
      const s2VolumeBox = { box, s2VolumeInfo };
      tile.boundingVolume = s2VolumeBox;
    }
    const rootBoundingVolume = tile.boundingVolume;
    const implicitOptions = {
      contentUrlTemplate,
      subtreesUriTemplate,
      subdivisionScheme,
      subtreeLevels,
      maximumLevel: Number.isFinite(availableLevels) ? availableLevels - 1 : maximumLevel,
      refine,
      basePath,
      lodMetricType: LOD_METRIC_TYPE.GEOMETRIC_ERROR,
      rootLodMetricValue,
      rootBoundingVolume,
      getTileType,
      getRefine
    };
    return await normalizeImplicitTileData(tile, basePath, subtree, implicitOptions, options);
  }
  async function normalizeImplicitTileData(tile, basePath, rootSubtree, implicitOptions, loaderOptions) {
    if (!tile) {
      return null;
    }
    const { children, contentUrl } = await parseImplicitTiles({
      subtree: rootSubtree,
      implicitOptions,
      loaderOptions
    });
    let tileContentUrl;
    let tileContent = null;
    if (contentUrl) {
      tileContentUrl = contentUrl;
      tileContent = { uri: contentUrl.replace(`${basePath}/`, "") };
    }
    const tilePostprocessed = {
      ...tile,
      id: tileContentUrl,
      contentUrl: tileContentUrl,
      lodMetricType: LOD_METRIC_TYPE.GEOMETRIC_ERROR,
      lodMetricValue: tile.geometricError,
      transformMatrix: tile.transform,
      type: getTileType(tile, tileContentUrl),
      refine: getRefine(tile.refine),
      content: tileContent || tile.content,
      children
    };
    return tilePostprocessed;
  }
  function getImplicitTilingExtensionData(tile) {
    return tile?.extensions?.["3DTILES_implicit_tiling"] || tile?.implicitTiling;
  }

  // ../../node_modules/@loaders.gl/3d-tiles/dist/tiles-3d-loader.js
  var Tiles3DLoader = {
    dataType: null,
    batchType: null,
    id: "3d-tiles",
    name: "3D Tiles",
    module: "3d-tiles",
    version: VERSION11,
    extensions: ["cmpt", "pnts", "b3dm", "i3dm"],
    mimeTypes: ["application/octet-stream"],
    tests: ["cmpt", "pnts", "b3dm", "i3dm"],
    parse: parse4,
    options: {
      "3d-tiles": {
        loadGLTF: true,
        decodeQuantizedPositions: false,
        isTileset: "auto",
        assetGltfUpAxis: null
      }
    }
  };
  async function parse4(data, options = {}, context) {
    const loaderOptions = options["3d-tiles"] || {};
    let isTileset;
    if (loaderOptions.isTileset === "auto") {
      isTileset = context?.url && context.url.indexOf(".json") !== -1;
    } else {
      isTileset = loaderOptions.isTileset;
    }
    return isTileset ? parseTileset(data, options, context) : parseTile(data, options, context);
  }
  async function parseTileset(data, options, context) {
    const tilesetJson = JSON.parse(new TextDecoder().decode(data));
    const tilesetUrl = context?.url || "";
    const basePath = getBaseUri(tilesetUrl);
    const normalizedRoot = await normalizeTileHeaders(tilesetJson, basePath, options || {});
    const tilesetJsonPostprocessed = {
      ...tilesetJson,
      shape: "tileset3d",
      loader: Tiles3DLoader,
      url: tilesetUrl,
      queryString: context?.queryString || "",
      basePath,
      root: normalizedRoot || tilesetJson.root,
      type: TILESET_TYPE.TILES3D,
      lodMetricType: LOD_METRIC_TYPE.GEOMETRIC_ERROR,
      lodMetricValue: tilesetJson.root?.geometricError || 0
    };
    return tilesetJsonPostprocessed;
  }
  async function parseTile(arrayBuffer2, options, context) {
    const tile = {
      content: {
        shape: "tile3d",
        featureIds: null
      }
    };
    const byteOffset = 0;
    await parse3DTile(arrayBuffer2, byteOffset, options, context, tile.content);
    return tile.content;
  }
  function getBaseUri(tilesetUrl) {
    return path_exports.dirname(tilesetUrl);
  }

  // ../geo-layers/src/tile-3d-layer/tile-3d-layer.ts
  var SINGLE_DATA = [0];
  var defaultProps31 = {
    getPointColor: { type: "accessor", value: [0, 0, 0, 255] },
    pointSize: 1,
    // Disable async data loading (handling it in _loadTileSet)
    data: "",
    loader: Tiles3DLoader,
    onTilesetLoad: { type: "function", value: (tileset3d) => {
    } },
    onTileLoad: { type: "function", value: (tileHeader) => {
    } },
    onTileUnload: { type: "function", value: (tileHeader) => {
    } },
    onTileError: { type: "function", value: (tile, message2, url) => {
    } },
    _getMeshColor: { type: "function", value: (tileHeader) => [255, 255, 255] }
  };
  var Tile3DLayer = class extends CompositeLayer {
    initializeState() {
      if ("onTileLoadFail" in this.props) {
        log_default.removed("onTileLoadFail", "onTileError")();
      }
      this.state = {
        layerMap: {},
        tileset3d: null,
        activeViewports: {},
        lastUpdatedViewports: null
      };
    }
    get isLoaded() {
      return Boolean(this.state?.tileset3d?.isLoaded() && super.isLoaded);
    }
    shouldUpdateState({ changeFlags }) {
      return changeFlags.somethingChanged;
    }
    updateState({ props, oldProps, changeFlags }) {
      if (props.data && props.data !== oldProps.data) {
        this._loadTileset(props.data);
      }
      if (changeFlags.viewportChanged) {
        const { activeViewports } = this.state;
        const viewportsNumber = Object.keys(activeViewports).length;
        if (viewportsNumber) {
          this._updateTileset(activeViewports);
          this.state.lastUpdatedViewports = activeViewports;
          this.state.activeViewports = {};
        }
      }
      if (changeFlags.propsChanged) {
        const { layerMap } = this.state;
        for (const key in layerMap) {
          layerMap[key].needsUpdate = true;
        }
      }
    }
    activateViewport(viewport) {
      const { activeViewports, lastUpdatedViewports } = this.state;
      this.internalState.viewport = viewport;
      activeViewports[viewport.id] = viewport;
      const lastViewport = lastUpdatedViewports?.[viewport.id];
      if (!lastViewport || !viewport.equals(lastViewport)) {
        this.setChangeFlags({ viewportChanged: true });
        this.setNeedsUpdate();
      }
    }
    getPickingInfo({ info, sourceLayer }) {
      const sourceTile = sourceLayer && sourceLayer.props.tile;
      if (info.picked) {
        info.object = sourceTile;
      }
      info.sourceTile = sourceTile;
      return info;
    }
    filterSubLayer({ layer, viewport }) {
      const { tile } = layer.props;
      const { id: viewportId } = viewport;
      return tile.selected && tile.viewportIds.includes(viewportId);
    }
    _updateAutoHighlight(info) {
      const sourceTile = info.sourceTile;
      const layerCache = this.state.layerMap[sourceTile?.id];
      if (layerCache && layerCache.layer) {
        layerCache.layer.updateAutoHighlight(info);
      }
    }
    async _loadTileset(tilesetUrl) {
      const { loadOptions = {} } = this.props;
      const loaders = this.props.loader || this.props.loaders;
      const loader = Array.isArray(loaders) ? loaders[0] : loaders;
      const options = { loadOptions: { ...loadOptions } };
      let actualTilesetUrl = tilesetUrl;
      if (loader.preload) {
        const preloadOptions = await loader.preload(tilesetUrl, loadOptions);
        if (preloadOptions.url) {
          actualTilesetUrl = preloadOptions.url;
        }
        if (preloadOptions.headers) {
          options.loadOptions.fetch = {
            ...options.loadOptions.fetch,
            headers: preloadOptions.headers
          };
        }
        Object.assign(options, preloadOptions);
      }
      const tilesetJson = await load(actualTilesetUrl, loader, options.loadOptions);
      const tileset3d = new Tileset3D(tilesetJson, {
        onTileLoad: this._onTileLoad.bind(this),
        onTileUnload: this._onTileUnload.bind(this),
        onTileError: this.props.onTileError,
        ...options
      });
      this.setState({
        tileset3d,
        layerMap: {}
      });
      this._updateTileset(this.state.activeViewports);
      this.props.onTilesetLoad(tileset3d);
    }
    _onTileLoad(tileHeader) {
      const { lastUpdatedViewports } = this.state;
      this.props.onTileLoad(tileHeader);
      this._updateTileset(lastUpdatedViewports);
      this.setNeedsUpdate();
    }
    _onTileUnload(tileHeader) {
      delete this.state.layerMap[tileHeader.id];
      this.props.onTileUnload(tileHeader);
    }
    _updateTileset(viewports) {
      if (!viewports) {
        return;
      }
      const { tileset3d } = this.state;
      const { timeline } = this.context;
      const viewportsNumber = Object.keys(viewports).length;
      if (!timeline || !viewportsNumber || !tileset3d) {
        return;
      }
      tileset3d.selectTiles(Object.values(viewports)).then((frameNumber) => {
        const tilesetChanged = this.state.frameNumber !== frameNumber;
        if (tilesetChanged) {
          this.setState({ frameNumber });
        }
      });
    }
    _getSubLayer(tileHeader, oldLayer) {
      if (!tileHeader.content) {
        return null;
      }
      switch (tileHeader.type) {
        case TILE_TYPE.POINTCLOUD:
          return this._makePointCloudLayer(tileHeader, oldLayer);
        case TILE_TYPE.SCENEGRAPH:
          return this._make3DModelLayer(tileHeader);
        case TILE_TYPE.MESH:
          return this._makeSimpleMeshLayer(tileHeader, oldLayer);
        default:
          throw new Error(`Tile3DLayer: Failed to render layer of type ${tileHeader.content.type}`);
      }
    }
    _makePointCloudLayer(tileHeader, oldLayer) {
      const { attributes, pointCount, constantRGBA, cartographicOrigin, modelMatrix: modelMatrix2 } = tileHeader.content;
      const { positions, normals, colors } = attributes;
      if (!positions) {
        return null;
      }
      const data = oldLayer && oldLayer.props.data || {
        header: {
          vertexCount: pointCount
        },
        attributes: {
          POSITION: positions,
          NORMAL: normals,
          COLOR_0: colors
        }
      };
      const { pointSize, getPointColor } = this.props;
      const SubLayerClass = this.getSubLayerClass("pointcloud", PointCloudLayer);
      return new SubLayerClass(
        {
          pointSize
        },
        this.getSubLayerProps({
          id: "pointcloud"
        }),
        {
          id: `${this.id}-pointcloud-${tileHeader.id}`,
          tile: tileHeader,
          data,
          coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,
          coordinateOrigin: cartographicOrigin,
          modelMatrix: modelMatrix2,
          getColor: constantRGBA || getPointColor,
          _offset: 0
        }
      );
    }
    _make3DModelLayer(tileHeader) {
      const { gltf, instances, cartographicOrigin, modelMatrix: modelMatrix2 } = tileHeader.content;
      const SubLayerClass = this.getSubLayerClass("scenegraph", ScenegraphLayer);
      return new SubLayerClass(
        {
          _lighting: "pbr"
        },
        this.getSubLayerProps({
          id: "scenegraph"
        }),
        {
          id: `${this.id}-scenegraph-${tileHeader.id}`,
          tile: tileHeader,
          data: instances || SINGLE_DATA,
          scenegraph: gltf,
          coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,
          coordinateOrigin: cartographicOrigin,
          modelMatrix: modelMatrix2,
          getTransformMatrix: (instance) => instance.modelMatrix,
          getPosition: [0, 0, 0],
          _offset: 0
        }
      );
    }
    _makeSimpleMeshLayer(tileHeader, oldLayer) {
      const content = tileHeader.content;
      const {
        attributes,
        indices,
        modelMatrix: modelMatrix2,
        cartographicOrigin,
        coordinateSystem = COORDINATE_SYSTEM.METER_OFFSETS,
        material,
        featureIds
      } = content;
      const { _getMeshColor } = this.props;
      const geometry = oldLayer && oldLayer.props.mesh || new Geometry({
        topology: "triangle-list",
        attributes: getMeshGeometry(attributes),
        indices
      });
      const SubLayerClass = this.getSubLayerClass("mesh", MeshLayer);
      return new SubLayerClass(
        this.getSubLayerProps({
          id: "mesh"
        }),
        {
          id: `${this.id}-mesh-${tileHeader.id}`,
          tile: tileHeader,
          mesh: geometry,
          data: SINGLE_DATA,
          getColor: _getMeshColor(tileHeader),
          pbrMaterial: material,
          modelMatrix: modelMatrix2,
          coordinateOrigin: cartographicOrigin,
          coordinateSystem,
          featureIds,
          _offset: 0
        }
      );
    }
    renderLayers() {
      const { tileset3d, layerMap } = this.state;
      if (!tileset3d) {
        return null;
      }
      return tileset3d.tiles.map((tile) => {
        const layerCache = layerMap[tile.id] = layerMap[tile.id] || { tile };
        let { layer } = layerCache;
        if (tile.selected) {
          if (!layer) {
            layer = this._getSubLayer(tile);
          } else if (layerCache.needsUpdate) {
            layer = this._getSubLayer(tile, layer);
            layerCache.needsUpdate = false;
          }
        }
        layerCache.layer = layer;
        return layer;
      }).filter(Boolean);
    }
  };
  Tile3DLayer.defaultProps = defaultProps31;
  Tile3DLayer.layerName = "Tile3DLayer";
  function getMeshGeometry(contentAttributes) {
    const attributes = {};
    attributes.positions = {
      ...contentAttributes.positions,
      value: new Float32Array(contentAttributes.positions.value)
    };
    if (contentAttributes.normals) {
      attributes.normals = contentAttributes.normals;
    }
    if (contentAttributes.texCoords) {
      attributes.texCoords = contentAttributes.texCoords;
    }
    if (contentAttributes.colors) {
      attributes.colors = contentAttributes.colors;
    }
    if (contentAttributes.uvRegions) {
      attributes.uvRegions = contentAttributes.uvRegions;
    }
    return attributes;
  }

  // ../../node_modules/@loaders.gl/terrain/dist/lib/decode-quantized-mesh.js
  var QUANTIZED_MESH_HEADER = /* @__PURE__ */ new Map([
    ["centerX", Float64Array.BYTES_PER_ELEMENT],
    ["centerY", Float64Array.BYTES_PER_ELEMENT],
    ["centerZ", Float64Array.BYTES_PER_ELEMENT],
    ["minHeight", Float32Array.BYTES_PER_ELEMENT],
    ["maxHeight", Float32Array.BYTES_PER_ELEMENT],
    ["boundingSphereCenterX", Float64Array.BYTES_PER_ELEMENT],
    ["boundingSphereCenterY", Float64Array.BYTES_PER_ELEMENT],
    ["boundingSphereCenterZ", Float64Array.BYTES_PER_ELEMENT],
    ["boundingSphereRadius", Float64Array.BYTES_PER_ELEMENT],
    ["horizonOcclusionPointX", Float64Array.BYTES_PER_ELEMENT],
    ["horizonOcclusionPointY", Float64Array.BYTES_PER_ELEMENT],
    ["horizonOcclusionPointZ", Float64Array.BYTES_PER_ELEMENT]
  ]);
  function decodeZigZag(value) {
    return value >> 1 ^ -(value & 1);
  }
  function decodeHeader(dataView) {
    let position = 0;
    const header = {};
    for (const [key, bytesCount] of QUANTIZED_MESH_HEADER) {
      const getter = bytesCount === 8 ? dataView.getFloat64 : dataView.getFloat32;
      header[key] = getter.call(dataView, position, true);
      position += bytesCount;
    }
    return { header, headerEndPosition: position };
  }
  function decodeVertexData(dataView, headerEndPosition) {
    let position = headerEndPosition;
    const elementsPerVertex = 3;
    const vertexCount = dataView.getUint32(position, true);
    const vertexData = new Uint16Array(vertexCount * elementsPerVertex);
    position += Uint32Array.BYTES_PER_ELEMENT;
    const bytesPerArrayElement = Uint16Array.BYTES_PER_ELEMENT;
    const elementArrayLength = vertexCount * bytesPerArrayElement;
    const uArrayStartPosition = position;
    const vArrayStartPosition = uArrayStartPosition + elementArrayLength;
    const heightArrayStartPosition = vArrayStartPosition + elementArrayLength;
    let u6 = 0;
    let v5 = 0;
    let height = 0;
    for (let i7 = 0; i7 < vertexCount; i7++) {
      u6 += decodeZigZag(dataView.getUint16(uArrayStartPosition + bytesPerArrayElement * i7, true));
      v5 += decodeZigZag(dataView.getUint16(vArrayStartPosition + bytesPerArrayElement * i7, true));
      height += decodeZigZag(dataView.getUint16(heightArrayStartPosition + bytesPerArrayElement * i7, true));
      vertexData[i7] = u6;
      vertexData[i7 + vertexCount] = v5;
      vertexData[i7 + vertexCount * 2] = height;
    }
    position += elementArrayLength * 3;
    return { vertexData, vertexDataEndPosition: position };
  }
  function decodeIndex(buffer, position, indicesCount, bytesPerIndex, encoded = true) {
    let indices;
    if (bytesPerIndex === 2) {
      indices = new Uint16Array(buffer, position, indicesCount);
    } else {
      indices = new Uint32Array(buffer, position, indicesCount);
    }
    if (!encoded) {
      return indices;
    }
    let highest = 0;
    for (let i7 = 0; i7 < indices.length; ++i7) {
      const code = indices[i7];
      indices[i7] = highest - code;
      if (code === 0) {
        ++highest;
      }
    }
    return indices;
  }
  function decodeTriangleIndices(dataView, vertexData, vertexDataEndPosition) {
    let position = vertexDataEndPosition;
    const elementsPerVertex = 3;
    const vertexCount = vertexData.length / elementsPerVertex;
    const bytesPerIndex = vertexCount > 65536 ? Uint32Array.BYTES_PER_ELEMENT : Uint16Array.BYTES_PER_ELEMENT;
    if (position % bytesPerIndex !== 0) {
      position += bytesPerIndex - position % bytesPerIndex;
    }
    const triangleCount = dataView.getUint32(position, true);
    position += Uint32Array.BYTES_PER_ELEMENT;
    const triangleIndicesCount = triangleCount * 3;
    const triangleIndices = decodeIndex(dataView.buffer, position, triangleIndicesCount, bytesPerIndex);
    position += triangleIndicesCount * bytesPerIndex;
    return {
      triangleIndicesEndPosition: position,
      triangleIndices
    };
  }
  function decodeEdgeIndices(dataView, vertexData, triangleIndicesEndPosition) {
    let position = triangleIndicesEndPosition;
    const elementsPerVertex = 3;
    const vertexCount = vertexData.length / elementsPerVertex;
    const bytesPerIndex = vertexCount > 65536 ? Uint32Array.BYTES_PER_ELEMENT : Uint16Array.BYTES_PER_ELEMENT;
    const westVertexCount = dataView.getUint32(position, true);
    position += Uint32Array.BYTES_PER_ELEMENT;
    const westIndices = decodeIndex(dataView.buffer, position, westVertexCount, bytesPerIndex, false);
    position += westVertexCount * bytesPerIndex;
    const southVertexCount = dataView.getUint32(position, true);
    position += Uint32Array.BYTES_PER_ELEMENT;
    const southIndices = decodeIndex(dataView.buffer, position, southVertexCount, bytesPerIndex, false);
    position += southVertexCount * bytesPerIndex;
    const eastVertexCount = dataView.getUint32(position, true);
    position += Uint32Array.BYTES_PER_ELEMENT;
    const eastIndices = decodeIndex(dataView.buffer, position, eastVertexCount, bytesPerIndex, false);
    position += eastVertexCount * bytesPerIndex;
    const northVertexCount = dataView.getUint32(position, true);
    position += Uint32Array.BYTES_PER_ELEMENT;
    const northIndices = decodeIndex(dataView.buffer, position, northVertexCount, bytesPerIndex, false);
    position += northVertexCount * bytesPerIndex;
    return {
      edgeIndicesEndPosition: position,
      westIndices,
      southIndices,
      eastIndices,
      northIndices
    };
  }
  function decodeVertexNormalsExtension(extensionDataView) {
    return new Uint8Array(extensionDataView.buffer, extensionDataView.byteOffset, extensionDataView.byteLength);
  }
  function decodeWaterMaskExtension(extensionDataView) {
    return extensionDataView.buffer.slice(extensionDataView.byteOffset, extensionDataView.byteOffset + extensionDataView.byteLength);
  }
  function decodeExtensions2(dataView, indicesEndPosition) {
    const extensions = {};
    if (dataView.byteLength <= indicesEndPosition) {
      return { extensions, extensionsEndPosition: indicesEndPosition };
    }
    let position = indicesEndPosition;
    while (position < dataView.byteLength) {
      const extensionId = dataView.getUint8(position, true);
      position += Uint8Array.BYTES_PER_ELEMENT;
      const extensionLength = dataView.getUint32(position, true);
      position += Uint32Array.BYTES_PER_ELEMENT;
      const extensionView = new DataView(dataView.buffer, position, extensionLength);
      switch (extensionId) {
        case 1: {
          extensions.vertexNormals = decodeVertexNormalsExtension(extensionView);
          break;
        }
        case 2: {
          extensions.waterMask = decodeWaterMaskExtension(extensionView);
          break;
        }
        default: {
        }
      }
      position += extensionLength;
    }
    return { extensions, extensionsEndPosition: position };
  }
  var DECODING_STEPS = {
    header: 0,
    vertices: 1,
    triangleIndices: 2,
    edgeIndices: 3,
    extensions: 4
  };
  var DEFAULT_OPTIONS2 = {
    maxDecodingStep: DECODING_STEPS.extensions
  };
  function decode11(data, userOptions) {
    const options = Object.assign({}, DEFAULT_OPTIONS2, userOptions);
    const view = new DataView(data);
    const { header, headerEndPosition } = decodeHeader(view);
    if (options.maxDecodingStep < DECODING_STEPS.vertices) {
      return { header };
    }
    const { vertexData, vertexDataEndPosition } = decodeVertexData(view, headerEndPosition);
    if (options.maxDecodingStep < DECODING_STEPS.triangleIndices) {
      return { header, vertexData };
    }
    const { triangleIndices, triangleIndicesEndPosition } = decodeTriangleIndices(view, vertexData, vertexDataEndPosition);
    if (options.maxDecodingStep < DECODING_STEPS.edgeIndices) {
      return { header, vertexData, triangleIndices };
    }
    const { westIndices, southIndices, eastIndices, northIndices, edgeIndicesEndPosition } = decodeEdgeIndices(view, vertexData, triangleIndicesEndPosition);
    if (options.maxDecodingStep < DECODING_STEPS.extensions) {
      return {
        header,
        vertexData,
        triangleIndices,
        westIndices,
        northIndices,
        eastIndices,
        southIndices
      };
    }
    const { extensions } = decodeExtensions2(view, edgeIndicesEndPosition);
    return {
      header,
      vertexData,
      triangleIndices,
      westIndices,
      northIndices,
      eastIndices,
      southIndices,
      extensions
    };
  }

  // ../../node_modules/@loaders.gl/terrain/dist/lib/helpers/skirt.js
  function addSkirt(attributes, triangles, skirtHeight, outsideIndices) {
    const outsideEdges = outsideIndices ? getOutsideEdgesFromIndices(outsideIndices, attributes.POSITION.value) : getOutsideEdgesFromTriangles(triangles);
    const newPosition = new attributes.POSITION.value.constructor(outsideEdges.length * 6);
    const newTexcoord0 = new attributes.TEXCOORD_0.value.constructor(outsideEdges.length * 4);
    const newTriangles = new triangles.constructor(outsideEdges.length * 6);
    for (let i7 = 0; i7 < outsideEdges.length; i7++) {
      const edge = outsideEdges[i7];
      updateAttributesForNewEdge({
        edge,
        edgeIndex: i7,
        attributes,
        skirtHeight,
        newPosition,
        newTexcoord0,
        newTriangles
      });
    }
    attributes.POSITION.value = concatenateTypedArrays(attributes.POSITION.value, newPosition);
    attributes.TEXCOORD_0.value = concatenateTypedArrays(attributes.TEXCOORD_0.value, newTexcoord0);
    const resultTriangles = triangles instanceof Array ? triangles.concat(newTriangles) : concatenateTypedArrays(triangles, newTriangles);
    return {
      attributes,
      triangles: resultTriangles
    };
  }
  function getOutsideEdgesFromTriangles(triangles) {
    const edges = [];
    for (let i7 = 0; i7 < triangles.length; i7 += 3) {
      edges.push([triangles[i7], triangles[i7 + 1]]);
      edges.push([triangles[i7 + 1], triangles[i7 + 2]]);
      edges.push([triangles[i7 + 2], triangles[i7]]);
    }
    edges.sort((a6, b4) => Math.min(...a6) - Math.min(...b4) || Math.max(...a6) - Math.max(...b4));
    const outsideEdges = [];
    let index = 0;
    while (index < edges.length) {
      if (edges[index][0] === edges[index + 1]?.[1] && edges[index][1] === edges[index + 1]?.[0]) {
        index += 2;
      } else {
        outsideEdges.push(edges[index]);
        index++;
      }
    }
    return outsideEdges;
  }
  function getOutsideEdgesFromIndices(indices, position) {
    indices.westIndices.sort((a6, b4) => position[3 * a6 + 1] - position[3 * b4 + 1]);
    indices.eastIndices.sort((a6, b4) => position[3 * b4 + 1] - position[3 * a6 + 1]);
    indices.southIndices.sort((a6, b4) => position[3 * b4] - position[3 * a6]);
    indices.northIndices.sort((a6, b4) => position[3 * a6] - position[3 * b4]);
    const edges = [];
    for (const index in indices) {
      const indexGroup = indices[index];
      for (let i7 = 0; i7 < indexGroup.length - 1; i7++) {
        edges.push([indexGroup[i7], indexGroup[i7 + 1]]);
      }
    }
    return edges;
  }
  function updateAttributesForNewEdge({ edge, edgeIndex, attributes, skirtHeight, newPosition, newTexcoord0, newTriangles }) {
    const positionsLength = attributes.POSITION.value.length;
    const vertex1Offset = edgeIndex * 2;
    const vertex2Offset = edgeIndex * 2 + 1;
    newPosition.set(attributes.POSITION.value.subarray(edge[0] * 3, edge[0] * 3 + 3), vertex1Offset * 3);
    newPosition[vertex1Offset * 3 + 2] = newPosition[vertex1Offset * 3 + 2] - skirtHeight;
    newPosition.set(attributes.POSITION.value.subarray(edge[1] * 3, edge[1] * 3 + 3), vertex2Offset * 3);
    newPosition[vertex2Offset * 3 + 2] = newPosition[vertex2Offset * 3 + 2] - skirtHeight;
    newTexcoord0.set(attributes.TEXCOORD_0.value.subarray(edge[0] * 2, edge[0] * 2 + 2), vertex1Offset * 2);
    newTexcoord0.set(attributes.TEXCOORD_0.value.subarray(edge[1] * 2, edge[1] * 2 + 2), vertex2Offset * 2);
    const triangle1Offset = edgeIndex * 2 * 3;
    newTriangles[triangle1Offset] = edge[0];
    newTriangles[triangle1Offset + 1] = positionsLength / 3 + vertex2Offset;
    newTriangles[triangle1Offset + 2] = edge[1];
    newTriangles[triangle1Offset + 3] = positionsLength / 3 + vertex2Offset;
    newTriangles[triangle1Offset + 4] = edge[0];
    newTriangles[triangle1Offset + 5] = positionsLength / 3 + vertex1Offset;
  }

  // ../../node_modules/@loaders.gl/terrain/dist/lib/parse-quantized-mesh.js
  function parseQuantizedMesh(arrayBuffer2, options = {}) {
    const { bounds } = options;
    const { header, vertexData, triangleIndices: originalTriangleIndices, westIndices, northIndices, eastIndices, southIndices } = decode11(arrayBuffer2, DECODING_STEPS.triangleIndices);
    let triangleIndices = originalTriangleIndices;
    let attributes = getMeshAttributes(vertexData, header, bounds);
    const boundingBox = getMeshBoundingBox(attributes);
    if (options?.skirtHeight) {
      const { attributes: newAttributes, triangles: newTriangles } = addSkirt(attributes, triangleIndices, options.skirtHeight, {
        westIndices,
        northIndices,
        eastIndices,
        southIndices
      });
      attributes = newAttributes;
      triangleIndices = newTriangles;
    }
    return {
      // Data return by this loader implementation
      loaderData: {
        header: {}
      },
      header: {
        // @ts-ignore
        vertexCount: triangleIndices.length,
        boundingBox
      },
      // TODO
      schema: void 0,
      topology: "triangle-list",
      mode: 4,
      // TRIANGLES
      indices: { value: triangleIndices, size: 1 },
      attributes
    };
  }
  function getMeshAttributes(vertexData, header, bounds) {
    const { minHeight, maxHeight } = header;
    const [minX, minY, maxX, maxY] = bounds || [0, 0, 1, 1];
    const xScale = maxX - minX;
    const yScale = maxY - minY;
    const zScale = maxHeight - minHeight;
    const nCoords = vertexData.length / 3;
    const positions = new Float32Array(nCoords * 3);
    const texCoords = new Float32Array(nCoords * 2);
    for (let i7 = 0; i7 < nCoords; i7++) {
      const x4 = vertexData[i7] / 32767;
      const y5 = vertexData[i7 + nCoords] / 32767;
      const z4 = vertexData[i7 + nCoords * 2] / 32767;
      positions[3 * i7 + 0] = x4 * xScale + minX;
      positions[3 * i7 + 1] = y5 * yScale + minY;
      positions[3 * i7 + 2] = z4 * zScale + minHeight;
      texCoords[2 * i7 + 0] = x4;
      texCoords[2 * i7 + 1] = y5;
    }
    return {
      POSITION: { value: positions, size: 3 },
      TEXCOORD_0: { value: texCoords, size: 2 }
      // TODO: Parse normals if they exist in the file
      // NORMAL: {}, - optional, but creates the high poly look with lighting
    };
  }

  // ../../node_modules/@mapbox/martini/index.js
  var Martini = class {
    constructor(gridSize = 257) {
      this.gridSize = gridSize;
      const tileSize = gridSize - 1;
      if (tileSize & tileSize - 1)
        throw new Error(
          `Expected grid size to be 2^n+1, got ${gridSize}.`
        );
      this.numTriangles = tileSize * tileSize * 2 - 2;
      this.numParentTriangles = this.numTriangles - tileSize * tileSize;
      this.indices = new Uint32Array(this.gridSize * this.gridSize);
      this.coords = new Uint16Array(this.numTriangles * 4);
      for (let i7 = 0; i7 < this.numTriangles; i7++) {
        let id = i7 + 2;
        let ax = 0, ay = 0, bx = 0, by = 0, cx = 0, cy = 0;
        if (id & 1) {
          bx = by = cx = tileSize;
        } else {
          ax = ay = cy = tileSize;
        }
        while ((id >>= 1) > 1) {
          const mx = ax + bx >> 1;
          const my = ay + by >> 1;
          if (id & 1) {
            bx = ax;
            by = ay;
            ax = cx;
            ay = cy;
          } else {
            ax = bx;
            ay = by;
            bx = cx;
            by = cy;
          }
          cx = mx;
          cy = my;
        }
        const k4 = i7 * 4;
        this.coords[k4 + 0] = ax;
        this.coords[k4 + 1] = ay;
        this.coords[k4 + 2] = bx;
        this.coords[k4 + 3] = by;
      }
    }
    createTile(terrain) {
      return new Tile(terrain, this);
    }
  };
  var Tile = class {
    constructor(terrain, martini) {
      const size = martini.gridSize;
      if (terrain.length !== size * size)
        throw new Error(
          `Expected terrain data of length ${size * size} (${size} x ${size}), got ${terrain.length}.`
        );
      this.terrain = terrain;
      this.martini = martini;
      this.errors = new Float32Array(terrain.length);
      this.update();
    }
    update() {
      const { numTriangles, numParentTriangles, coords, gridSize: size } = this.martini;
      const { terrain, errors } = this;
      for (let i7 = numTriangles - 1; i7 >= 0; i7--) {
        const k4 = i7 * 4;
        const ax = coords[k4 + 0];
        const ay = coords[k4 + 1];
        const bx = coords[k4 + 2];
        const by = coords[k4 + 3];
        const mx = ax + bx >> 1;
        const my = ay + by >> 1;
        const cx = mx + my - ay;
        const cy = my + ax - mx;
        const interpolatedHeight = (terrain[ay * size + ax] + terrain[by * size + bx]) / 2;
        const middleIndex = my * size + mx;
        const middleError = Math.abs(interpolatedHeight - terrain[middleIndex]);
        errors[middleIndex] = Math.max(errors[middleIndex], middleError);
        if (i7 < numParentTriangles) {
          const leftChildIndex = (ay + cy >> 1) * size + (ax + cx >> 1);
          const rightChildIndex = (by + cy >> 1) * size + (bx + cx >> 1);
          errors[middleIndex] = Math.max(errors[middleIndex], errors[leftChildIndex], errors[rightChildIndex]);
        }
      }
    }
    getMesh(maxError = 0) {
      const { gridSize: size, indices } = this.martini;
      const { errors } = this;
      let numVertices = 0;
      let numTriangles = 0;
      const max7 = size - 1;
      indices.fill(0);
      function countElements(ax, ay, bx, by, cx, cy) {
        const mx = ax + bx >> 1;
        const my = ay + by >> 1;
        if (Math.abs(ax - cx) + Math.abs(ay - cy) > 1 && errors[my * size + mx] > maxError) {
          countElements(cx, cy, ax, ay, mx, my);
          countElements(bx, by, cx, cy, mx, my);
        } else {
          indices[ay * size + ax] = indices[ay * size + ax] || ++numVertices;
          indices[by * size + bx] = indices[by * size + bx] || ++numVertices;
          indices[cy * size + cx] = indices[cy * size + cx] || ++numVertices;
          numTriangles++;
        }
      }
      countElements(0, 0, max7, max7, max7, 0);
      countElements(max7, max7, 0, 0, 0, max7);
      const vertices = new Uint16Array(numVertices * 2);
      const triangles = new Uint32Array(numTriangles * 3);
      let triIndex = 0;
      function processTriangle(ax, ay, bx, by, cx, cy) {
        const mx = ax + bx >> 1;
        const my = ay + by >> 1;
        if (Math.abs(ax - cx) + Math.abs(ay - cy) > 1 && errors[my * size + mx] > maxError) {
          processTriangle(cx, cy, ax, ay, mx, my);
          processTriangle(bx, by, cx, cy, mx, my);
        } else {
          const a6 = indices[ay * size + ax] - 1;
          const b4 = indices[by * size + bx] - 1;
          const c5 = indices[cy * size + cx] - 1;
          vertices[2 * a6] = ax;
          vertices[2 * a6 + 1] = ay;
          vertices[2 * b4] = bx;
          vertices[2 * b4 + 1] = by;
          vertices[2 * c5] = cx;
          vertices[2 * c5 + 1] = cy;
          triangles[triIndex++] = a6;
          triangles[triIndex++] = b4;
          triangles[triIndex++] = c5;
        }
      }
      processTriangle(0, 0, max7, max7, max7, 0);
      processTriangle(max7, max7, 0, 0, 0, max7);
      return { vertices, triangles };
    }
  };

  // ../../node_modules/@loaders.gl/terrain/dist/lib/delatin/index.js
  var Delatin = class {
    constructor(data, width, height = width) {
      this.data = data;
      this.width = width;
      this.height = height;
      this.coords = [];
      this.triangles = [];
      this._halfedges = [];
      this._candidates = [];
      this._queueIndices = [];
      this._queue = [];
      this._errors = [];
      this._rms = [];
      this._pending = [];
      this._pendingLen = 0;
      this._rmsSum = 0;
      const x1 = width - 1;
      const y1 = height - 1;
      const p0 = this._addPoint(0, 0);
      const p1 = this._addPoint(x1, 0);
      const p22 = this._addPoint(0, y1);
      const p32 = this._addPoint(x1, y1);
      const t0 = this._addTriangle(p32, p0, p22, -1, -1, -1);
      this._addTriangle(p0, p32, p1, t0, -1, -1);
      this._flush();
    }
    // refine the mesh until its maximum error gets below the given one
    run(maxError = 1) {
      while (this.getMaxError() > maxError) {
        this.refine();
      }
    }
    // refine the mesh with a single point
    refine() {
      this._step();
      this._flush();
    }
    // max error of the current mesh
    getMaxError() {
      return this._errors[0];
    }
    // root-mean-square deviation of the current mesh
    getRMSD() {
      return this._rmsSum > 0 ? Math.sqrt(this._rmsSum / (this.width * this.height)) : 0;
    }
    // height value at a given position
    heightAt(x4, y5) {
      return this.data[this.width * y5 + x4];
    }
    // rasterize and queue all triangles that got added or updated in _step
    _flush() {
      const coords = this.coords;
      for (let i7 = 0; i7 < this._pendingLen; i7++) {
        const t5 = this._pending[i7];
        const a6 = 2 * this.triangles[t5 * 3 + 0];
        const b4 = 2 * this.triangles[t5 * 3 + 1];
        const c5 = 2 * this.triangles[t5 * 3 + 2];
        this._findCandidate(coords[a6], coords[a6 + 1], coords[b4], coords[b4 + 1], coords[c5], coords[c5 + 1], t5);
      }
      this._pendingLen = 0;
    }
    // rasterize a triangle, find its max error, and queue it for processing
    _findCandidate(p0x, p0y, p1x, p1y, p2x, p2y, t5) {
      const minX = Math.min(p0x, p1x, p2x);
      const minY = Math.min(p0y, p1y, p2y);
      const maxX = Math.max(p0x, p1x, p2x);
      const maxY = Math.max(p0y, p1y, p2y);
      let w00 = orient(p1x, p1y, p2x, p2y, minX, minY);
      let w01 = orient(p2x, p2y, p0x, p0y, minX, minY);
      let w02 = orient(p0x, p0y, p1x, p1y, minX, minY);
      const a01 = p1y - p0y;
      const b01 = p0x - p1x;
      const a12 = p2y - p1y;
      const b12 = p1x - p2x;
      const a20 = p0y - p2y;
      const b20 = p2x - p0x;
      const a6 = orient(p0x, p0y, p1x, p1y, p2x, p2y);
      const z0 = this.heightAt(p0x, p0y) / a6;
      const z1 = this.heightAt(p1x, p1y) / a6;
      const z22 = this.heightAt(p2x, p2y) / a6;
      let maxError = 0;
      let mx = 0;
      let my = 0;
      let rms = 0;
      for (let y5 = minY; y5 <= maxY; y5++) {
        let dx = 0;
        if (w00 < 0 && a12 !== 0) {
          dx = Math.max(dx, Math.floor(-w00 / a12));
        }
        if (w01 < 0 && a20 !== 0) {
          dx = Math.max(dx, Math.floor(-w01 / a20));
        }
        if (w02 < 0 && a01 !== 0) {
          dx = Math.max(dx, Math.floor(-w02 / a01));
        }
        let w0 = w00 + a12 * dx;
        let w1 = w01 + a20 * dx;
        let w22 = w02 + a01 * dx;
        let wasInside = false;
        for (let x4 = minX + dx; x4 <= maxX; x4++) {
          if (w0 >= 0 && w1 >= 0 && w22 >= 0) {
            wasInside = true;
            const z4 = z0 * w0 + z1 * w1 + z22 * w22;
            const dz = Math.abs(z4 - this.heightAt(x4, y5));
            rms += dz * dz;
            if (dz > maxError) {
              maxError = dz;
              mx = x4;
              my = y5;
            }
          } else if (wasInside) {
            break;
          }
          w0 += a12;
          w1 += a20;
          w22 += a01;
        }
        w00 += b12;
        w01 += b20;
        w02 += b01;
      }
      if (mx === p0x && my === p0y || mx === p1x && my === p1y || mx === p2x && my === p2y) {
        maxError = 0;
      }
      this._candidates[2 * t5] = mx;
      this._candidates[2 * t5 + 1] = my;
      this._rms[t5] = rms;
      this._queuePush(t5, maxError, rms);
    }
    // process the next triangle in the queue, splitting it with a new point
    _step() {
      const t5 = this._queuePop();
      const e0 = t5 * 3 + 0;
      const e1 = t5 * 3 + 1;
      const e22 = t5 * 3 + 2;
      const p0 = this.triangles[e0];
      const p1 = this.triangles[e1];
      const p22 = this.triangles[e22];
      const ax = this.coords[2 * p0];
      const ay = this.coords[2 * p0 + 1];
      const bx = this.coords[2 * p1];
      const by = this.coords[2 * p1 + 1];
      const cx = this.coords[2 * p22];
      const cy = this.coords[2 * p22 + 1];
      const px = this._candidates[2 * t5];
      const py = this._candidates[2 * t5 + 1];
      const pn = this._addPoint(px, py);
      if (orient(ax, ay, bx, by, px, py) === 0) {
        this._handleCollinear(pn, e0);
      } else if (orient(bx, by, cx, cy, px, py) === 0) {
        this._handleCollinear(pn, e1);
      } else if (orient(cx, cy, ax, ay, px, py) === 0) {
        this._handleCollinear(pn, e22);
      } else {
        const h0 = this._halfedges[e0];
        const h1 = this._halfedges[e1];
        const h22 = this._halfedges[e22];
        const t0 = this._addTriangle(p0, p1, pn, h0, -1, -1, e0);
        const t1 = this._addTriangle(p1, p22, pn, h1, -1, t0 + 1);
        const t22 = this._addTriangle(p22, p0, pn, h22, t0 + 2, t1 + 1);
        this._legalize(t0);
        this._legalize(t1);
        this._legalize(t22);
      }
    }
    // add coordinates for a new vertex
    _addPoint(x4, y5) {
      const i7 = this.coords.length >> 1;
      this.coords.push(x4, y5);
      return i7;
    }
    // add or update a triangle in the mesh
    _addTriangle(a6, b4, c5, ab, bc, ca, e6 = this.triangles.length) {
      const t5 = e6 / 3;
      this.triangles[e6 + 0] = a6;
      this.triangles[e6 + 1] = b4;
      this.triangles[e6 + 2] = c5;
      this._halfedges[e6 + 0] = ab;
      this._halfedges[e6 + 1] = bc;
      this._halfedges[e6 + 2] = ca;
      if (ab >= 0) {
        this._halfedges[ab] = e6 + 0;
      }
      if (bc >= 0) {
        this._halfedges[bc] = e6 + 1;
      }
      if (ca >= 0) {
        this._halfedges[ca] = e6 + 2;
      }
      this._candidates[2 * t5 + 0] = 0;
      this._candidates[2 * t5 + 1] = 0;
      this._queueIndices[t5] = -1;
      this._rms[t5] = 0;
      this._pending[this._pendingLen++] = t5;
      return e6;
    }
    _legalize(a6) {
      const b4 = this._halfedges[a6];
      if (b4 < 0) {
        return;
      }
      const a0 = a6 - a6 % 3;
      const b0 = b4 - b4 % 3;
      const al = a0 + (a6 + 1) % 3;
      const ar = a0 + (a6 + 2) % 3;
      const bl = b0 + (b4 + 2) % 3;
      const br = b0 + (b4 + 1) % 3;
      const p0 = this.triangles[ar];
      const pr = this.triangles[a6];
      const pl = this.triangles[al];
      const p1 = this.triangles[bl];
      const coords = this.coords;
      if (!inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1])) {
        return;
      }
      const hal = this._halfedges[al];
      const har = this._halfedges[ar];
      const hbl = this._halfedges[bl];
      const hbr = this._halfedges[br];
      this._queueRemove(a0 / 3);
      this._queueRemove(b0 / 3);
      const t0 = this._addTriangle(p0, p1, pl, -1, hbl, hal, a0);
      const t1 = this._addTriangle(p1, p0, pr, t0, har, hbr, b0);
      this._legalize(t0 + 1);
      this._legalize(t1 + 2);
    }
    // handle a case where new vertex is on the edge of a triangle
    _handleCollinear(pn, a6) {
      const a0 = a6 - a6 % 3;
      const al = a0 + (a6 + 1) % 3;
      const ar = a0 + (a6 + 2) % 3;
      const p0 = this.triangles[ar];
      const pr = this.triangles[a6];
      const pl = this.triangles[al];
      const hal = this._halfedges[al];
      const har = this._halfedges[ar];
      const b4 = this._halfedges[a6];
      if (b4 < 0) {
        const t02 = this._addTriangle(pn, p0, pr, -1, har, -1, a0);
        const t12 = this._addTriangle(p0, pn, pl, t02, -1, hal);
        this._legalize(t02 + 1);
        this._legalize(t12 + 2);
        return;
      }
      const b0 = b4 - b4 % 3;
      const bl = b0 + (b4 + 2) % 3;
      const br = b0 + (b4 + 1) % 3;
      const p1 = this.triangles[bl];
      const hbl = this._halfedges[bl];
      const hbr = this._halfedges[br];
      this._queueRemove(b0 / 3);
      const t0 = this._addTriangle(p0, pr, pn, har, -1, -1, a0);
      const t1 = this._addTriangle(pr, p1, pn, hbr, -1, t0 + 1, b0);
      const t22 = this._addTriangle(p1, pl, pn, hbl, -1, t1 + 1);
      const t32 = this._addTriangle(pl, p0, pn, hal, t0 + 2, t22 + 1);
      this._legalize(t0);
      this._legalize(t1);
      this._legalize(t22);
      this._legalize(t32);
    }
    // priority queue methods
    _queuePush(t5, error, rms) {
      const i7 = this._queue.length;
      this._queueIndices[t5] = i7;
      this._queue.push(t5);
      this._errors.push(error);
      this._rmsSum += rms;
      this._queueUp(i7);
    }
    _queuePop() {
      const n4 = this._queue.length - 1;
      this._queueSwap(0, n4);
      this._queueDown(0, n4);
      return this._queuePopBack();
    }
    _queuePopBack() {
      const t5 = this._queue.pop();
      this._errors.pop();
      this._rmsSum -= this._rms[t5];
      this._queueIndices[t5] = -1;
      return t5;
    }
    _queueRemove(t5) {
      const i7 = this._queueIndices[t5];
      if (i7 < 0) {
        const it2 = this._pending.indexOf(t5);
        if (it2 !== -1) {
          this._pending[it2] = this._pending[--this._pendingLen];
        } else {
          throw new Error("Broken triangulation (something went wrong).");
        }
        return;
      }
      const n4 = this._queue.length - 1;
      if (n4 !== i7) {
        this._queueSwap(i7, n4);
        if (!this._queueDown(i7, n4)) {
          this._queueUp(i7);
        }
      }
      this._queuePopBack();
    }
    _queueLess(i7, j4) {
      return this._errors[i7] > this._errors[j4];
    }
    _queueSwap(i7, j4) {
      const pi = this._queue[i7];
      const pj = this._queue[j4];
      this._queue[i7] = pj;
      this._queue[j4] = pi;
      this._queueIndices[pi] = j4;
      this._queueIndices[pj] = i7;
      const e6 = this._errors[i7];
      this._errors[i7] = this._errors[j4];
      this._errors[j4] = e6;
    }
    _queueUp(j0) {
      let j4 = j0;
      while (true) {
        const i7 = j4 - 1 >> 1;
        if (i7 === j4 || !this._queueLess(j4, i7)) {
          break;
        }
        this._queueSwap(i7, j4);
        j4 = i7;
      }
    }
    _queueDown(i0, n4) {
      let i7 = i0;
      while (true) {
        const j1 = 2 * i7 + 1;
        if (j1 >= n4 || j1 < 0) {
          break;
        }
        const j22 = j1 + 1;
        let j4 = j1;
        if (j22 < n4 && this._queueLess(j22, j1)) {
          j4 = j22;
        }
        if (!this._queueLess(j4, i7)) {
          break;
        }
        this._queueSwap(i7, j4);
        i7 = j4;
      }
      return i7 > i0;
    }
  };
  function orient(ax, ay, bx, by, cx, cy) {
    return (bx - cx) * (ay - cy) - (by - cy) * (ax - cx);
  }
  function inCircle(ax, ay, bx, by, cx, cy, px, py) {
    const dx = ax - px;
    const dy = ay - py;
    const ex = bx - px;
    const ey = by - py;
    const fx = cx - px;
    const fy = cy - py;
    const ap = dx * dx + dy * dy;
    const bp = ex * ex + ey * ey;
    const cp = fx * fx + fy * fy;
    return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
  }

  // ../../node_modules/@loaders.gl/terrain/dist/lib/parse-terrain.js
  function makeTerrainMeshFromImage(terrainImage, terrainOptions) {
    const { meshMaxError, bounds, elevationDecoder } = terrainOptions;
    const { data, width, height } = terrainImage;
    let terrain;
    let mesh;
    switch (terrainOptions.tesselator) {
      case "martini":
        terrain = getTerrain(data, width, height, elevationDecoder, terrainOptions.tesselator);
        mesh = getMartiniTileMesh(meshMaxError, width, terrain);
        break;
      case "delatin":
        terrain = getTerrain(data, width, height, elevationDecoder, terrainOptions.tesselator);
        mesh = getDelatinTileMesh(meshMaxError, width, height, terrain);
        break;
      default:
        if (width === height && !(height & width - 1)) {
          terrain = getTerrain(data, width, height, elevationDecoder, "martini");
          mesh = getMartiniTileMesh(meshMaxError, width, terrain);
        } else {
          terrain = getTerrain(data, width, height, elevationDecoder, "delatin");
          mesh = getDelatinTileMesh(meshMaxError, width, height, terrain);
        }
        break;
    }
    const { vertices } = mesh;
    let { triangles } = mesh;
    let attributes = getMeshAttributes2(vertices, terrain, width, height, bounds);
    const boundingBox = getMeshBoundingBox(attributes);
    if (terrainOptions.skirtHeight) {
      const { attributes: newAttributes, triangles: newTriangles } = addSkirt(attributes, triangles, terrainOptions.skirtHeight);
      attributes = newAttributes;
      triangles = newTriangles;
    }
    return {
      // Data return by this loader implementation
      loaderData: {
        header: {}
      },
      header: {
        vertexCount: triangles.length,
        boundingBox
      },
      mode: 4,
      // TRIANGLES
      indices: { value: Uint32Array.from(triangles), size: 1 },
      attributes
    };
  }
  function getMartiniTileMesh(meshMaxError, width, terrain) {
    const gridSize = width + 1;
    const martini = new Martini(gridSize);
    const tile = martini.createTile(terrain);
    const { vertices, triangles } = tile.getMesh(meshMaxError);
    return { vertices, triangles };
  }
  function getDelatinTileMesh(meshMaxError, width, height, terrain) {
    const tin = new Delatin(terrain, width + 1, height + 1);
    tin.run(meshMaxError);
    const { coords, triangles } = tin;
    const vertices = coords;
    return { vertices, triangles };
  }
  function getTerrain(imageData, width, height, elevationDecoder, tesselator) {
    const { rScaler, bScaler, gScaler, offset } = elevationDecoder;
    const terrain = new Float32Array((width + 1) * (height + 1));
    for (let i7 = 0, y5 = 0; y5 < height; y5++) {
      for (let x4 = 0; x4 < width; x4++, i7++) {
        const k4 = i7 * 4;
        const r5 = imageData[k4 + 0];
        const g3 = imageData[k4 + 1];
        const b4 = imageData[k4 + 2];
        terrain[i7 + y5] = r5 * rScaler + g3 * gScaler + b4 * bScaler + offset;
      }
    }
    if (tesselator === "martini") {
      for (let i7 = (width + 1) * width, x4 = 0; x4 < width; x4++, i7++) {
        terrain[i7] = terrain[i7 - width - 1];
      }
      for (let i7 = height, y5 = 0; y5 < height + 1; y5++, i7 += height + 1) {
        terrain[i7] = terrain[i7 - 1];
      }
    }
    return terrain;
  }
  function getMeshAttributes2(vertices, terrain, width, height, bounds) {
    const gridSize = width + 1;
    const numOfVerticies = vertices.length / 2;
    const positions = new Float32Array(numOfVerticies * 3);
    const texCoords = new Float32Array(numOfVerticies * 2);
    const [minX, minY, maxX, maxY] = bounds || [0, 0, width, height];
    const xScale = (maxX - minX) / width;
    const yScale = (maxY - minY) / height;
    for (let i7 = 0; i7 < numOfVerticies; i7++) {
      const x4 = vertices[i7 * 2];
      const y5 = vertices[i7 * 2 + 1];
      const pixelIdx = y5 * gridSize + x4;
      positions[3 * i7 + 0] = x4 * xScale + minX;
      positions[3 * i7 + 1] = -y5 * yScale + maxY;
      positions[3 * i7 + 2] = terrain[pixelIdx];
      texCoords[2 * i7 + 0] = x4 / width;
      texCoords[2 * i7 + 1] = y5 / height;
    }
    return {
      POSITION: { value: positions, size: 3 },
      TEXCOORD_0: { value: texCoords, size: 2 }
      // NORMAL: {}, - optional, but creates the high poly look with lighting
    };
  }

  // ../../node_modules/@loaders.gl/terrain/dist/lib/utils/version.js
  var VERSION12 = true ? "4.2.1" : "latest";

  // ../../node_modules/@loaders.gl/terrain/dist/terrain-loader.js
  var TerrainLoader = {
    dataType: null,
    batchType: null,
    name: "Terrain",
    id: "terrain",
    module: "terrain",
    version: VERSION12,
    worker: true,
    extensions: ["png", "pngraw", "jpg", "jpeg", "gif", "webp", "bmp"],
    mimeTypes: ["image/png", "image/jpeg", "image/gif", "image/webp", "image/bmp"],
    options: {
      terrain: {
        tesselator: "auto",
        bounds: void 0,
        meshMaxError: 10,
        elevationDecoder: {
          rScaler: 1,
          gScaler: 0,
          bScaler: 0,
          offset: 0
        },
        skirtHeight: void 0
      }
    }
  };

  // ../../node_modules/@loaders.gl/terrain/dist/quantized-mesh-loader.js
  var QuantizedMeshLoader = {
    dataType: null,
    // Mesh,
    batchType: null,
    name: "Quantized Mesh",
    id: "quantized-mesh",
    module: "terrain",
    version: VERSION12,
    worker: true,
    extensions: ["terrain"],
    mimeTypes: ["application/vnd.quantized-mesh"],
    options: {
      "quantized-mesh": {
        bounds: [0, 0, 1, 1],
        skirtHeight: null
      }
    }
  };

  // ../../node_modules/@loaders.gl/terrain/dist/index.js
  var TerrainLoader2 = {
    ...TerrainLoader,
    parse: parseTerrain
  };
  async function parseTerrain(arrayBuffer2, options, context) {
    const loadImageOptions = {
      ...options,
      mimeType: "application/x.image",
      image: { ...options?.image, type: "data" }
    };
    const image = await parseFromContext(arrayBuffer2, [], loadImageOptions, context);
    const terrainOptions = { ...TerrainLoader2.options.terrain, ...options?.terrain };
    return makeTerrainMeshFromImage(image, terrainOptions);
  }
  var QuantizedMeshLoader2 = {
    ...QuantizedMeshLoader,
    parseSync: (arrayBuffer2, options) => parseQuantizedMesh(arrayBuffer2, options?.["quantized-mesh"]),
    parse: async (arrayBuffer2, options) => parseQuantizedMesh(arrayBuffer2, options?.["quantized-mesh"])
  };

  // ../geo-layers/src/terrain-layer/terrain-layer.ts
  var DUMMY_DATA = [1];
  var defaultProps32 = {
    ...TileLayer.defaultProps,
    // Image url that encodes height data
    elevationData: urlType,
    // Image url to use as texture
    texture: { ...urlType, optional: true },
    // Martini error tolerance in meters, smaller number -> more detailed mesh
    meshMaxError: { type: "number", value: 4 },
    // Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates
    bounds: { type: "array", value: null, optional: true, compare: true },
    // Color to use if texture is unavailable
    color: { type: "color", value: [255, 255, 255] },
    // Object to decode height data, from (r, g, b) to height in meters
    elevationDecoder: {
      type: "object",
      value: {
        rScaler: 1,
        gScaler: 0,
        bScaler: 0,
        offset: 0
      }
    },
    // Supply url to local terrain worker bundle. Only required if running offline and cannot access CDN.
    workerUrl: "",
    // Same as SimpleMeshLayer wireframe
    wireframe: false,
    material: true,
    loaders: [TerrainLoader]
  };
  function urlTemplateToUpdateTrigger(template) {
    if (Array.isArray(template)) {
      return template.join(";");
    }
    return template || "";
  }
  var TerrainLayer = class extends CompositeLayer {
    updateState({ props, oldProps }) {
      const elevationDataChanged = props.elevationData !== oldProps.elevationData;
      if (elevationDataChanged) {
        const { elevationData } = props;
        const isTiled = elevationData && (Array.isArray(elevationData) || isTileSetURL(elevationData));
        this.setState({ isTiled });
      }
      const shouldReload = elevationDataChanged || props.meshMaxError !== oldProps.meshMaxError || props.elevationDecoder !== oldProps.elevationDecoder || props.bounds !== oldProps.bounds;
      if (!this.state.isTiled && shouldReload) {
        const terrain = this.loadTerrain(props);
        this.setState({ terrain });
      }
      if (props.workerUrl) {
        log_default.removed("workerUrl", "loadOptions.terrain.workerUrl")();
      }
    }
    loadTerrain({
      elevationData,
      bounds,
      elevationDecoder,
      meshMaxError,
      signal
    }) {
      if (!elevationData) {
        return null;
      }
      let loadOptions = this.getLoadOptions();
      loadOptions = {
        ...loadOptions,
        terrain: {
          skirtHeight: this.state.isTiled ? meshMaxError * 2 : 0,
          ...loadOptions?.terrain,
          bounds,
          meshMaxError,
          elevationDecoder
        }
      };
      const { fetch: fetch2 } = this.props;
      return fetch2(elevationData, { propName: "elevationData", layer: this, loadOptions, signal });
    }
    getTiledTerrainData(tile) {
      const { elevationData, fetch: fetch2, texture, elevationDecoder, meshMaxError } = this.props;
      const { viewport } = this.context;
      const dataUrl = getURLFromTemplate(elevationData, tile);
      const textureUrl = texture && getURLFromTemplate(texture, tile);
      const { signal } = tile;
      let bottomLeft = [0, 0];
      let topRight = [0, 0];
      if (viewport.isGeospatial) {
        const bbox = tile.bbox;
        bottomLeft = viewport.projectFlat([bbox.west, bbox.south]);
        topRight = viewport.projectFlat([bbox.east, bbox.north]);
      } else {
        const bbox = tile.bbox;
        bottomLeft = [bbox.left, bbox.bottom];
        topRight = [bbox.right, bbox.top];
      }
      const bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];
      const terrain = this.loadTerrain({
        elevationData: dataUrl,
        bounds,
        elevationDecoder,
        meshMaxError,
        signal
      });
      const surface = textureUrl ? (
        // If surface image fails to load, the tile should still be displayed
        fetch2(textureUrl, { propName: "texture", layer: this, loaders: [], signal }).catch((_3) => null)
      ) : Promise.resolve(null);
      return Promise.all([terrain, surface]);
    }
    renderSubLayers(props) {
      const SubLayerClass = this.getSubLayerClass("mesh", SimpleMeshLayer);
      const { color, wireframe, material } = this.props;
      const { data } = props;
      if (!data) {
        return null;
      }
      const [mesh, texture] = data;
      return new SubLayerClass(props, {
        data: DUMMY_DATA,
        mesh,
        texture,
        _instanced: false,
        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,
        getPosition: (d5) => [0, 0, 0],
        getColor: color,
        wireframe,
        material
      });
    }
    // Update zRange of viewport
    onViewportLoad(tiles) {
      if (!tiles) {
        return;
      }
      const { zRange } = this.state;
      const ranges = tiles.map((tile) => tile.content).filter(Boolean).map((arr) => {
        const bounds = arr[0].header.boundingBox;
        return bounds.map((bound) => bound[2]);
      });
      if (ranges.length === 0) {
        return;
      }
      const minZ = Math.min(...ranges.map((x4) => x4[0]));
      const maxZ = Math.max(...ranges.map((x4) => x4[1]));
      if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {
        this.setState({ zRange: [minZ, maxZ] });
      }
    }
    renderLayers() {
      const {
        color,
        material,
        elevationData,
        texture,
        wireframe,
        meshMaxError,
        elevationDecoder,
        tileSize,
        maxZoom,
        minZoom,
        extent,
        maxRequests,
        onTileLoad,
        onTileUnload,
        onTileError,
        maxCacheSize,
        maxCacheByteSize,
        refinementStrategy
      } = this.props;
      if (this.state.isTiled) {
        return new TileLayer(
          this.getSubLayerProps({
            id: "tiles"
          }),
          {
            getTileData: this.getTiledTerrainData.bind(this),
            renderSubLayers: this.renderSubLayers.bind(this),
            updateTriggers: {
              getTileData: {
                elevationData: urlTemplateToUpdateTrigger(elevationData),
                texture: urlTemplateToUpdateTrigger(texture),
                meshMaxError,
                elevationDecoder
              }
            },
            onViewportLoad: this.onViewportLoad.bind(this),
            zRange: this.state.zRange || null,
            tileSize,
            maxZoom,
            minZoom,
            extent,
            maxRequests,
            onTileLoad,
            onTileUnload,
            onTileError,
            maxCacheSize,
            maxCacheByteSize,
            refinementStrategy
          }
        );
      }
      if (!elevationData) {
        return null;
      }
      const SubLayerClass = this.getSubLayerClass("mesh", SimpleMeshLayer);
      return new SubLayerClass(
        this.getSubLayerProps({
          id: "mesh"
        }),
        {
          data: DUMMY_DATA,
          mesh: this.state.terrain,
          texture,
          _instanced: false,
          getPosition: (d5) => [0, 0, 0],
          getColor: color,
          material,
          wireframe
        }
      );
    }
  };
  TerrainLayer.defaultProps = defaultProps32;
  TerrainLayer.layerName = "TerrainLayer";
  var isTileSetURL = (url) => url.includes("{x}") && (url.includes("{y}") || url.includes("{-y}"));

  // ../extensions/src/brushing/shader-module.ts
  var uniformBlock19 = (
    /* glsl */
    `uniform brushingUniforms {
  bool enabled;
  highp int target;
  vec2 mousePos;
  float radius;
} brushing;
`
  );
  var vertex2 = (
    /* glsl */
    `
  in vec2 brushingTargets;

  out float brushing_isVisible;

  bool brushing_isPointInRange(vec2 position) {
    if (!brushing.enabled) {
      return true;
    }
    vec2 source_commonspace = project_position(position);
    vec2 target_commonspace = project_position(brushing.mousePos);
    float distance = length((target_commonspace - source_commonspace) / project.commonUnitsPerMeter.xy);

    return distance <= brushing.radius;
  }

  bool brushing_arePointsInRange(vec2 sourcePos, vec2 targetPos) {
    return brushing_isPointInRange(sourcePos) || brushing_isPointInRange(targetPos);
  }

  void brushing_setVisible(bool visible) {
    brushing_isVisible = float(visible);
  }
`
  );
  var vs9 = `
${uniformBlock19}
${vertex2}
`;
  var fragment2 = (
    /* glsl */
    `
  in float brushing_isVisible;
`
  );
  var fs7 = `
${uniformBlock19}
${fragment2}
`;
  var TARGET = {
    source: 0,
    target: 1,
    custom: 2,
    source_target: 3
  };
  var inject = {
    "vs:DECKGL_FILTER_GL_POSITION": (
      /* glsl */
      `
    vec2 brushingTarget;
    vec2 brushingSource;
    if (brushing.target == 3) {
      brushingTarget = geometry.worldPositionAlt.xy;
      brushingSource = geometry.worldPosition.xy;
    } else if (brushing.target == 0) {
      brushingTarget = geometry.worldPosition.xy;
    } else if (brushing.target == 1) {
      brushingTarget = geometry.worldPositionAlt.xy;
    } else {
      brushingTarget = brushingTargets;
    }
    bool visible;
    if (brushing.target == 3) {
      visible = brushing_arePointsInRange(brushingSource, brushingTarget);
    } else {
      visible = brushing_isPointInRange(brushingTarget);
    }
    brushing_setVisible(visible);
  `
    ),
    "fs:DECKGL_FILTER_COLOR": `
    if (brushing.enabled && brushing_isVisible < 0.5) {
      discard;
    }
  `
  };
  var shader_module_default = {
    name: "brushing",
    dependencies: [project_default],
    vs: vs9,
    fs: fs7,
    inject,
    getUniforms: (opts) => {
      if (!opts || !("viewport" in opts)) {
        return {};
      }
      const {
        brushingEnabled = true,
        brushingRadius = 1e4,
        brushingTarget = "source",
        mousePosition,
        viewport
      } = opts;
      return {
        enabled: Boolean(brushingEnabled && mousePosition && viewport.containsPixel(mousePosition)),
        radius: brushingRadius,
        target: TARGET[brushingTarget] || 0,
        mousePos: mousePosition ? viewport.unproject([mousePosition.x - viewport.x, mousePosition.y - viewport.y]) : [0, 0]
      };
    },
    uniformTypes: {
      enabled: "i32",
      target: "i32",
      mousePos: "vec2<f32>",
      radius: "f32"
    }
  };

  // ../extensions/src/brushing/brushing-extension.ts
  var defaultProps33 = {
    getBrushingTarget: { type: "accessor", value: [0, 0] },
    brushingTarget: "source",
    brushingEnabled: true,
    brushingRadius: 1e4
  };
  var BrushingExtension = class extends LayerExtension {
    getShaders() {
      return {
        modules: [shader_module_default]
      };
    }
    initializeState(context, extension) {
      const attributeManager = this.getAttributeManager();
      if (attributeManager) {
        attributeManager.add({
          brushingTargets: {
            size: 2,
            stepMode: "dynamic",
            accessor: "getBrushingTarget"
          }
        });
      }
      const onMouseMove = () => {
        this.getCurrentLayer()?.setNeedsRedraw();
      };
      this.state.onMouseMove = onMouseMove;
      if (context.deck) {
        context.deck.eventManager.on({
          pointermove: onMouseMove,
          pointerleave: onMouseMove
        });
      }
    }
    finalizeState(context, extension) {
      if (context.deck) {
        const onMouseMove = this.state.onMouseMove;
        context.deck.eventManager.off({
          pointermove: onMouseMove,
          pointerleave: onMouseMove
        });
      }
    }
    draw(params, extension) {
      const { viewport, mousePosition } = params.context;
      const { brushingEnabled, brushingRadius, brushingTarget } = this.props;
      const brushingProps = {
        viewport,
        mousePosition,
        brushingEnabled,
        brushingRadius,
        brushingTarget
      };
      this.setShaderModuleProps({ brushing: brushingProps });
    }
  };
  BrushingExtension.defaultProps = defaultProps33;
  BrushingExtension.extensionName = "BrushingExtension";

  // ../extensions/src/data-filter/shader-module.ts
  var uniformBlock20 = (
    /* glsl */
    `uniform dataFilterUniforms {
  bool useSoftMargin;
  bool enabled;
  bool transformSize;
  bool transformColor;
#ifdef DATAFILTER_TYPE
  DATAFILTER_TYPE min;
  DATAFILTER_TYPE softMin;
  DATAFILTER_TYPE softMax;
  DATAFILTER_TYPE max;
#ifdef DATAFILTER_DOUBLE
  DATAFILTER_TYPE min64High;
  DATAFILTER_TYPE max64High;
#endif
#endif
#ifdef DATACATEGORY_TYPE
  highp uvec4 categoryBitMask;
#endif
} dataFilter;
`
  );
  var vertex3 = (
    /* glsl */
    `
#ifdef DATAFILTER_TYPE
  in DATAFILTER_TYPE filterValues;
#ifdef DATAFILTER_DOUBLE
  in DATAFILTER_TYPE filterValues64Low;
#endif
#endif

#ifdef DATACATEGORY_TYPE
  in DATACATEGORY_TYPE filterCategoryValues;
#endif

out float dataFilter_value;

float dataFilter_reduceValue(float value) {
  return value;
}
float dataFilter_reduceValue(vec2 value) {
  return min(value.x, value.y);
}
float dataFilter_reduceValue(vec3 value) {
  return min(min(value.x, value.y), value.z);
}
float dataFilter_reduceValue(vec4 value) {
  return min(min(value.x, value.y), min(value.z, value.w));
}

#ifdef DATAFILTER_TYPE
  void dataFilter_setValue(DATAFILTER_TYPE valueFromMin, DATAFILTER_TYPE valueFromMax) {
    if (dataFilter.useSoftMargin) {
      // smoothstep results are undefined if edge0 \u2265 edge1
      // Fallback to ignore filterSoftRange if it is truncated by filterRange
      DATAFILTER_TYPE leftInRange = mix(
        smoothstep(dataFilter.min, dataFilter.softMin, valueFromMin),
        step(dataFilter.min, valueFromMin),
        step(dataFilter.softMin, dataFilter.min)
      );
      DATAFILTER_TYPE rightInRange = mix(
        1.0 - smoothstep(dataFilter.softMax, dataFilter.max, valueFromMax),
        step(valueFromMax, dataFilter.max),
        step(dataFilter.max, dataFilter.softMax)
      );
      dataFilter_value = dataFilter_reduceValue(leftInRange * rightInRange);
    } else {
      dataFilter_value = dataFilter_reduceValue(
        step(dataFilter.min, valueFromMin) * step(valueFromMax, dataFilter.max)
      );
    }
  }
#endif

#ifdef DATACATEGORY_TYPE
  void dataFilter_setCategoryValue(DATACATEGORY_TYPE category) {
    #if DATACATEGORY_CHANNELS == 1 // One 128-bit mask
    uint dataFilter_masks = dataFilter.categoryBitMask[category / 32u];
    #elif DATACATEGORY_CHANNELS == 2 // Two 64-bit masks
    uvec2 dataFilter_masks = uvec2(
      dataFilter.categoryBitMask[category.x / 32u],
      dataFilter.categoryBitMask[category.y / 32u + 2u]
    );
    #elif DATACATEGORY_CHANNELS == 3 // Three 32-bit masks
    uvec3 dataFilter_masks = dataFilter.categoryBitMask.xyz;
    #else // Four 32-bit masks
    uvec4 dataFilter_masks = dataFilter.categoryBitMask;
    #endif

    // Shift mask and extract relevant bits
    DATACATEGORY_TYPE dataFilter_bits = DATACATEGORY_TYPE(dataFilter_masks) >> (category & 31u);
    dataFilter_bits &= 1u;

    #if DATACATEGORY_CHANNELS == 1
    if(dataFilter_bits == 0u) dataFilter_value = 0.0;
    #else
    if(any(equal(dataFilter_bits, DATACATEGORY_TYPE(0u)))) dataFilter_value = 0.0;
    #endif
  }
#endif
`
  );
  var vs10 = `
${uniformBlock20}
${vertex3}
`;
  var fragment3 = (
    /* glsl */
    `
in float dataFilter_value;
`
  );
  var fs8 = `
${uniformBlock20}
${fragment3}
`;
  function getUniforms4(opts) {
    if (!opts || !("extensions" in opts)) {
      return {};
    }
    const {
      filterRange = [-1, 1],
      filterEnabled = true,
      filterTransformSize = true,
      filterTransformColor = true,
      categoryBitMask
    } = opts;
    const filterSoftRange = opts.filterSoftRange || filterRange;
    return {
      ...Number.isFinite(filterRange[0]) ? {
        min: filterRange[0],
        softMin: filterSoftRange[0],
        softMax: filterSoftRange[1],
        max: filterRange[1]
      } : {
        min: filterRange.map((r5) => r5[0]),
        softMin: filterSoftRange.map((r5) => r5[0]),
        softMax: filterSoftRange.map((r5) => r5[1]),
        max: filterRange.map((r5) => r5[1])
      },
      enabled: filterEnabled,
      useSoftMargin: Boolean(opts.filterSoftRange),
      transformSize: filterEnabled && filterTransformSize,
      transformColor: filterEnabled && filterTransformColor,
      ...categoryBitMask && { categoryBitMask }
    };
  }
  function getUniforms64(opts) {
    if (!opts || !("extensions" in opts)) {
      return {};
    }
    const uniforms = getUniforms4(opts);
    if (Number.isFinite(uniforms.min)) {
      const min64High = Math.fround(uniforms.min);
      uniforms.min -= min64High;
      uniforms.softMin -= min64High;
      uniforms.min64High = min64High;
      const max64High = Math.fround(uniforms.max);
      uniforms.max -= max64High;
      uniforms.softMax -= max64High;
      uniforms.max64High = max64High;
    } else {
      const min64High = uniforms.min.map(Math.fround);
      uniforms.min = uniforms.min.map((x4, i7) => x4 - min64High[i7]);
      uniforms.softMin = uniforms.softMin.map((x4, i7) => x4 - min64High[i7]);
      uniforms.min64High = min64High;
      const max64High = uniforms.max.map(Math.fround);
      uniforms.max = uniforms.max.map((x4, i7) => x4 - max64High[i7]);
      uniforms.softMax = uniforms.softMax.map((x4, i7) => x4 - max64High[i7]);
      uniforms.max64High = max64High;
    }
    return uniforms;
  }
  var inject2 = {
    "vs:#main-start": (
      /* glsl */
      `
    dataFilter_value = 1.0;
    if (dataFilter.enabled) {
      #ifdef DATAFILTER_TYPE
        #ifdef DATAFILTER_DOUBLE
          dataFilter_setValue(
            filterValues - dataFilter.min64High + filterValues64Low,
            filterValues - dataFilter.max64High + filterValues64Low
          );
        #else
          dataFilter_setValue(filterValues, filterValues);
        #endif
      #endif

      #ifdef DATACATEGORY_TYPE
        dataFilter_setCategoryValue(filterCategoryValues);
      #endif
    }
  `
    ),
    "vs:#main-end": (
      /* glsl */
      `
    if (dataFilter_value == 0.0) {
      gl_Position = vec4(0.);
    }
  `
    ),
    "vs:DECKGL_FILTER_SIZE": (
      /* glsl */
      `
    if (dataFilter.transformSize) {
      size = size * dataFilter_value;
    }
  `
    ),
    "fs:DECKGL_FILTER_COLOR": (
      /* glsl */
      `
    if (dataFilter_value == 0.0) discard;
    if (dataFilter.transformColor) {
      color.a *= dataFilter_value;
    }
  `
    )
  };
  function uniformTypesFromOptions(opts) {
    const { categorySize, filterSize, fp64: fp642 } = opts;
    const uniformTypes = {
      useSoftMargin: "i32",
      enabled: "i32",
      transformSize: "i32",
      transformColor: "i32"
    };
    if (filterSize) {
      const uniformFormat = filterSize === 1 ? "f32" : `vec${filterSize}<f32>`;
      uniformTypes.min = uniformFormat;
      uniformTypes.softMin = uniformFormat;
      uniformTypes.softMax = uniformFormat;
      uniformTypes.max = uniformFormat;
      if (fp642) {
        uniformTypes.min64High = uniformFormat;
        uniformTypes.max64High = uniformFormat;
      }
    }
    if (categorySize) {
      uniformTypes.categoryBitMask = "vec4<i32>";
    }
    return uniformTypes;
  }
  var dataFilter = {
    name: "dataFilter",
    vs: vs10,
    fs: fs8,
    inject: inject2,
    getUniforms: getUniforms4,
    uniformTypesFromOptions
  };
  var dataFilter64 = {
    name: "dataFilter",
    vs: vs10,
    fs: fs8,
    inject: inject2,
    getUniforms: getUniforms64,
    uniformTypesFromOptions
  };

  // ../extensions/src/data-filter/aggregator.ts
  var AGGREGATE_VS = `#version 300 es
#define SHADER_NAME data-filter-vertex-shader

#ifdef FLOAT_TARGET
  in float filterIndices;
  in float filterPrevIndices;
#else
  in vec2 filterIndices;
  in vec2 filterPrevIndices;
#endif

out vec4 vColor;
const float component = 1.0 / 255.0;

void main() {
  #ifdef FLOAT_TARGET
    dataFilter_value *= float(filterIndices != filterPrevIndices);
    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);
    vColor = vec4(0.0, 0.0, 0.0, 1.0);
  #else
    // Float texture is not supported: pack result into 4 channels x 256 px x 64px
    dataFilter_value *= float(filterIndices.x != filterPrevIndices.x);
    float col = filterIndices.x;
    float row = filterIndices.y * 4.0;
    float channel = floor(row);
    row = fract(row);
    vColor = component * vec4(bvec4(channel == 0.0, channel == 1.0, channel == 2.0, channel == 3.0));
    gl_Position = vec4(col * 2.0 - 1.0, row * 2.0 - 1.0, 0.0, 1.0);
  #endif
  gl_PointSize = 1.0;
}
`;
  var AGGREGATE_FS = `#version 300 es
#define SHADER_NAME data-filter-fragment-shader
precision highp float;

in vec4 vColor;

out vec4 fragColor;

void main() {
  if (dataFilter_value < 0.5) {
    discard;
  }
  fragColor = vColor;
}
`;
  var FLOAT_TARGET_FEATURES = [
    "float32-renderable-webgl",
    // ability to render to float texture
    "texture-blend-float-webgl"
    // ability to blend when rendering to float texture
  ];
  function supportsFloatTarget(device) {
    return FLOAT_TARGET_FEATURES.every((feature) => device.features.has(feature));
  }
  function getFramebuffer4(device, useFloatTarget) {
    if (useFloatTarget) {
      return device.createFramebuffer({
        width: 1,
        height: 1,
        colorAttachments: [
          device.createTexture({
            format: "rgba32float",
            dimension: "2d",
            width: 1,
            height: 1
          })
        ]
      });
    }
    return device.createFramebuffer({
      width: 256,
      height: 64,
      colorAttachments: [
        device.createTexture({ format: "rgba8unorm", dimension: "2d", width: 256, height: 64 })
      ]
    });
  }
  function getModel(device, bufferLayout, shaderOptions, useFloatTarget) {
    shaderOptions.defines.NON_INSTANCED_MODEL = 1;
    if (useFloatTarget) {
      shaderOptions.defines.FLOAT_TARGET = 1;
    }
    return new Model(device, {
      id: "data-filter-aggregation-model",
      vertexCount: 1,
      isInstanced: false,
      topology: "point-list",
      disableWarnings: true,
      vs: AGGREGATE_VS,
      fs: AGGREGATE_FS,
      bufferLayout,
      ...shaderOptions
    });
  }
  var parameters = {
    blend: true,
    blendColorSrcFactor: "one",
    blendColorDstFactor: "one",
    blendAlphaSrcFactor: "one",
    blendAlphaDstFactor: "one",
    blendColorOperation: "add",
    blendAlphaOperation: "add",
    depthCompare: "never"
  };

  // ../extensions/src/data-filter/data-filter-extension.ts
  var defaultProps34 = {
    getFilterValue: { type: "accessor", value: 0 },
    getFilterCategory: { type: "accessor", value: 0 },
    onFilteredItemsChange: { type: "function", value: null, optional: true },
    filterEnabled: true,
    filterRange: [-1, 1],
    filterSoftRange: null,
    filterCategories: [0],
    filterTransformSize: true,
    filterTransformColor: true
  };
  var defaultOptions3 = {
    categorySize: 0,
    filterSize: 1,
    fp64: false,
    countItems: false
  };
  var CATEGORY_TYPE_FROM_SIZE = {
    1: "uint",
    2: "uvec2",
    3: "uvec3",
    4: "uvec4"
  };
  var DATA_TYPE_FROM_SIZE = {
    1: "float",
    2: "vec2",
    3: "vec3",
    4: "vec4"
  };
  var DataFilterExtension = class extends LayerExtension {
    constructor(opts = {}) {
      super({ ...defaultOptions3, ...opts });
    }
    getShaders(extension) {
      const { categorySize, filterSize, fp64: fp642 } = extension.opts;
      const defines2 = {};
      if (categorySize) {
        defines2.DATACATEGORY_TYPE = CATEGORY_TYPE_FROM_SIZE[categorySize];
        defines2.DATACATEGORY_CHANNELS = categorySize;
      }
      if (filterSize) {
        defines2.DATAFILTER_TYPE = DATA_TYPE_FROM_SIZE[filterSize];
        defines2.DATAFILTER_DOUBLE = Boolean(fp642);
      }
      const module = fp642 ? dataFilter64 : dataFilter;
      module.uniformTypes = module.uniformTypesFromOptions(extension.opts);
      return { modules: [module], defines: defines2 };
    }
    initializeState(context, extension) {
      const attributeManager = this.getAttributeManager();
      const { categorySize, filterSize, fp64: fp642 } = extension.opts;
      if (attributeManager) {
        if (filterSize) {
          attributeManager.add({
            filterValues: {
              size: filterSize,
              type: fp642 ? "float64" : "float32",
              stepMode: "dynamic",
              accessor: "getFilterValue"
            }
          });
        }
        if (categorySize) {
          attributeManager.add({
            filterCategoryValues: {
              size: categorySize,
              stepMode: "dynamic",
              accessor: "getFilterCategory",
              type: "uint32",
              transform: categorySize === 1 ? (d5) => extension._getCategoryKey.call(this, d5, 0) : (d5) => d5.map((x4, i7) => extension._getCategoryKey.call(this, x4, i7))
            }
          });
        }
      }
      const { device } = this.context;
      if (attributeManager && extension.opts.countItems) {
        const useFloatTarget = supportsFloatTarget(device);
        attributeManager.add({
          filterVertexIndices: {
            size: useFloatTarget ? 1 : 2,
            vertexOffset: 1,
            type: "unorm8",
            accessor: (object, { index }) => {
              const i7 = object && object.__source ? object.__source.index : index;
              return useFloatTarget ? (i7 + 1) % 255 : [(i7 + 1) % 255, Math.floor(i7 / 255) % 255];
            },
            shaderAttributes: {
              filterPrevIndices: {
                vertexOffset: 0
              },
              filterIndices: {
                vertexOffset: 1
              }
            }
          }
        });
        const filterFBO = getFramebuffer4(device, useFloatTarget);
        const filterModel = getModel(
          device,
          attributeManager.getBufferLayouts({ isInstanced: false }),
          extension.getShaders.call(this, extension),
          useFloatTarget
        );
        this.setState({ filterFBO, filterModel });
      }
    }
    // eslint-disable-next-line complexity
    updateState({ props, oldProps, changeFlags }, extension) {
      const attributeManager = this.getAttributeManager();
      const { categorySize } = extension.opts;
      if (this.state.filterModel) {
        const filterNeedsUpdate = (
          // attributeManager must be defined for filterModel to be set
          attributeManager.attributes.filterValues?.needsUpdate() || attributeManager.attributes.filterCategoryValues?.needsUpdate() || props.filterEnabled !== oldProps.filterEnabled || props.filterRange !== oldProps.filterRange || props.filterSoftRange !== oldProps.filterSoftRange || props.filterCategories !== oldProps.filterCategories
        );
        if (filterNeedsUpdate) {
          this.setState({ filterNeedsUpdate });
        }
      }
      if (attributeManager?.attributes.filterCategoryValues) {
        const categoryBitMaskNeedsUpdate = attributeManager.attributes.filterCategoryValues.needsUpdate() || !deepEqual2(props.filterCategories, oldProps.filterCategories, 2);
        if (categoryBitMaskNeedsUpdate) {
          this.setState({ categoryBitMask: null });
        }
        const resetCategories = changeFlags.dataChanged;
        if (resetCategories) {
          this.setState({
            categoryMap: Array(categorySize).fill(0).map(() => ({}))
          });
          attributeManager.attributes.filterCategoryValues.setNeedsUpdate("categoryMap");
        }
      }
    }
    // eslint-disable-next-line max-statements
    draw(params, extension) {
      const filterFBO = this.state.filterFBO;
      const filterModel = this.state.filterModel;
      const filterNeedsUpdate = this.state.filterNeedsUpdate;
      if (!this.state.categoryBitMask) {
        extension._updateCategoryBitMask.call(this, params, extension);
      }
      const {
        onFilteredItemsChange,
        extensions,
        filterEnabled,
        filterRange,
        filterSoftRange,
        filterTransformSize,
        filterTransformColor,
        filterCategories
      } = this.props;
      const dataFilterProps = {
        extensions,
        filterEnabled,
        filterRange,
        filterSoftRange,
        filterTransformSize,
        filterTransformColor,
        filterCategories
      };
      if (this.state.categoryBitMask) {
        dataFilterProps.categoryBitMask = this.state.categoryBitMask;
      }
      this.setShaderModuleProps({ dataFilter: dataFilterProps });
      if (filterNeedsUpdate && onFilteredItemsChange && filterModel) {
        const attributeManager = this.getAttributeManager();
        const {
          attributes: { filterValues, filterCategoryValues, filterVertexIndices }
        } = attributeManager;
        filterModel.setVertexCount(this.getNumInstances());
        const attributes = {
          ...filterValues?.getValue(),
          ...filterCategoryValues?.getValue(),
          ...filterVertexIndices?.getValue()
        };
        filterModel.setAttributes(attributes);
        filterModel.shaderInputs.setProps({
          dataFilter: dataFilterProps
        });
        const viewport = [0, 0, filterFBO.width, filterFBO.height];
        const renderPass = filterModel.device.beginRenderPass({
          id: "data-filter-aggregation",
          framebuffer: filterFBO,
          parameters: { viewport },
          clearColor: [0, 0, 0, 0]
        });
        filterModel.setParameters(parameters);
        filterModel.draw(renderPass);
        renderPass.end();
        const color = filterModel.device.readPixelsToArrayWebGL(filterFBO);
        let count3 = 0;
        for (let i7 = 0; i7 < color.length; i7++) {
          count3 += color[i7];
        }
        onFilteredItemsChange({ id: this.id, count: count3 });
        this.state.filterNeedsUpdate = false;
      }
    }
    finalizeState() {
      const filterFBO = this.state.filterFBO;
      const filterModel = this.state.filterModel;
      filterFBO?.destroy();
      filterModel?.destroy();
    }
    /**
     * Updates the bitmask used on the GPU to perform the filter based on the
     * `filterCategories` prop. The mapping between categories and bit in the bitmask
     * is performed by `_getCategoryKey()`
     */
    _updateCategoryBitMask(params, extension) {
      const { categorySize } = extension.opts;
      if (!categorySize)
        return;
      const { filterCategories } = this.props;
      const categoryBitMask = new Uint32Array([0, 0, 0, 0]);
      const categoryFilters = categorySize === 1 ? [filterCategories] : filterCategories;
      const maxCategories = categorySize === 1 ? 128 : categorySize === 2 ? 64 : 32;
      for (let c5 = 0; c5 < categoryFilters.length; c5++) {
        const categoryFilter = categoryFilters[c5];
        for (const category of categoryFilter) {
          const key = extension._getCategoryKey.call(this, category, c5);
          if (key < maxCategories) {
            const channel = c5 * (maxCategories / 32) + Math.floor(key / 32);
            categoryBitMask[channel] += Math.pow(2, key % 32);
          } else {
            log_default.warn(`Exceeded maximum number of categories (${maxCategories})`)();
          }
        }
      }
      this.state.categoryBitMask = categoryBitMask;
    }
    /**
     * Returns an index of bit in the bitmask for a given category. If the category has
     * not yet been assigned a bit, a new one is assigned.
     */
    _getCategoryKey(category, channel) {
      const categoryMap = this.state.categoryMap[channel];
      if (!(category in categoryMap)) {
        categoryMap[category] = Object.keys(categoryMap).length;
      }
      return categoryMap[category];
    }
  };
  DataFilterExtension.defaultProps = defaultProps34;
  DataFilterExtension.extensionName = "DataFilterExtension";

  // ../extensions/src/fp64/project64.glsl.ts
  var project64_glsl_default = `
const vec2 WORLD_SCALE_FP64 = vec2(81.4873275756836, 0.0000032873668232014097);

uniform project64Uniforms {
  vec2 scale;
  mat4 viewProjectionMatrix;
  mat4 viewProjectionMatrix64Low;
} project64;

// longitude: lnglat_fp64.xy; latitude: lnglat_fp64.zw
void mercatorProject_fp64(vec4 lnglat_fp64, out vec2 out_val[2]) {

#if defined(NVIDIA_FP64_WORKAROUND)
  out_val[0] = sum_fp64(radians_fp64(lnglat_fp64.xy), PI_FP64 * ONE);
#else
  out_val[0] = sum_fp64(radians_fp64(lnglat_fp64.xy), PI_FP64);
#endif
  out_val[1] = sum_fp64(PI_FP64,
    log_fp64(tan_fp64(sum_fp64(PI_4_FP64, radians_fp64(lnglat_fp64.zw) / 2.0))));
  return;
}

void project_position_fp64(vec4 position_fp64, out vec2 out_val[2]) {
  vec2 pos_fp64[2];
  mercatorProject_fp64(position_fp64, pos_fp64);
  out_val[0] = mul_fp64(pos_fp64[0], WORLD_SCALE_FP64);
  out_val[1] = mul_fp64(pos_fp64[1], WORLD_SCALE_FP64);

  return;
}

void project_position_fp64(vec2 position, vec2 position64xyLow, out vec2 out_val[2]) {
  vec4 position64xy = vec4(
    position.x, position64xyLow.x,
    position.y, position64xyLow.y);

  project_position_fp64(position64xy, out_val);
}

vec4 project_common_position_to_clipspace_fp64(vec2 vertex_pos_modelspace[4]) {
  vec2 vertex_pos_clipspace[4];
  vec2 viewProjectionMatrixFP64[16];
  for (int i = 0; i < 4; i++) {
    for (int j = 0; j < 4; j++) {
      viewProjectionMatrixFP64[4 * i + j] = vec2(
        project64.viewProjectionMatrix[j][i],
        project64.viewProjectionMatrix64Low[j][i]
      );
    }   
  }
  mat4_vec4_mul_fp64(viewProjectionMatrixFP64, vertex_pos_modelspace,
    vertex_pos_clipspace);
  return vec4(
    vertex_pos_clipspace[0].x,
    vertex_pos_clipspace[1].x,
    vertex_pos_clipspace[2].x,
    vertex_pos_clipspace[3].x
    );
}

vec4 project_position_to_clipspace(
  vec3 position, vec3 position64xyLow, vec3 offset, out vec4 commonPosition
) {
  // This is the local offset to the instance position
  vec2 offset64[4];
  vec4_fp64(vec4(offset, 0.0), offset64);

  float z = project_size(position.z);

  // Apply web mercator projection (depends on coordinate system imn use)
  vec2 projectedPosition64xy[2];
  project_position_fp64(position.xy, position64xyLow.xy, projectedPosition64xy);

  vec2 commonPosition64[4];
  commonPosition64[0] = sum_fp64(offset64[0], projectedPosition64xy[0]);
  commonPosition64[1] = sum_fp64(offset64[1], projectedPosition64xy[1]);
  commonPosition64[2] = sum_fp64(offset64[2], vec2(z, 0.0));
  commonPosition64[3] = vec2(1.0, 0.0);

  commonPosition = vec4(projectedPosition64xy[0].x, projectedPosition64xy[1].x, z, 1.0);

  return project_common_position_to_clipspace_fp64(commonPosition64);
}

vec4 project_position_to_clipspace(
  vec3 position, vec3 position64xyLow, vec3 offset
) {
  vec4 commonPosition;
  return project_position_to_clipspace(
    position, position64xyLow, offset, commonPosition
  );
}
`;

  // ../extensions/src/fp64/project64.ts
  var { fp64ify: fp64ify2, fp64ifyMatrix4: fp64ifyMatrix42 } = fp64;
  var project64_default = {
    name: "project64",
    dependencies: [project_default, fp64],
    vs: project64_glsl_default,
    getUniforms: getUniforms5,
    uniformTypes: {
      scale: "vec2<f32>",
      // Cannot pass as vec2[16], so instead split into 2 mat4x4
      viewProjectionMatrix: "mat4x4<f32>",
      viewProjectionMatrix64Low: "mat4x4<f32>"
    }
  };
  var getMemoizedUniforms = memoize(calculateUniforms);
  function getUniforms5(opts) {
    if (opts && "viewport" in opts) {
      const { viewProjectionMatrix, scale: scale24 } = opts.viewport;
      return getMemoizedUniforms({ viewProjectionMatrix, scale: scale24 });
    }
    return {};
  }
  function calculateUniforms({
    viewProjectionMatrix,
    scale: scale24
  }) {
    const glViewProjectionMatrixFP64 = fp64ifyMatrix42(viewProjectionMatrix);
    const viewProjectionMatrix64High = new Float32Array(16);
    const viewProjectionMatrix64Low = new Float32Array(16);
    for (let i7 = 0; i7 < 4; i7++) {
      for (let j4 = 0; j4 < 4; j4++) {
        const from = 4 * i7 + j4;
        const to = 4 * j4 + i7;
        viewProjectionMatrix64High[to] = glViewProjectionMatrixFP64[2 * from];
        viewProjectionMatrix64Low[to] = glViewProjectionMatrixFP64[2 * from + 1];
      }
    }
    return {
      scale: fp64ify2(scale24),
      viewProjectionMatrix: [...viewProjectionMatrix64High],
      viewProjectionMatrix64Low: [...viewProjectionMatrix64Low]
    };
  }

  // ../extensions/src/fp64/fp64-extension.ts
  var Fp64Extension = class extends LayerExtension {
    getShaders() {
      const { coordinateSystem } = this.props;
      if (coordinateSystem !== COORDINATE_SYSTEM.LNGLAT && coordinateSystem !== COORDINATE_SYSTEM.DEFAULT) {
        throw new Error("fp64: coordinateSystem must be LNGLAT");
      }
      return {
        modules: [project64_default]
      };
    }
    draw(params, extension) {
      const { viewport } = params.context;
      this.setShaderModuleProps({ project64: { viewport } });
    }
  };
  Fp64Extension.extensionName = "Fp64Extension";

  // ../extensions/src/path-style/shaders.glsl.ts
  var dashShaders = {
    inject: {
      "vs:#decl": `
in vec2 instanceDashArrays;
in float instanceDashOffsets;
out vec2 vDashArray;
out float vDashOffset;
`,
      "vs:#main-end": `
vDashArray = instanceDashArrays;
vDashOffset = instanceDashOffsets / width.x;
`,
      "fs:#decl": `
uniform pathStyleUniforms {
  float dashAlignMode;
  bool dashGapPickable;
} pathStyle;

in vec2 vDashArray;
in float vDashOffset;
`,
      // if given position is in the gap part of the dashed line
      // dashArray.x: solid stroke length, relative to width
      // dashArray.y: gap length, relative to width
      // alignMode:
      // 0 - no adjustment
      // o----     ----     ----     ---- o----     -o----     ----     o
      // 1 - stretch to fit, draw half dash at each end for nicer joints
      // o--    ----    ----    ----    --o--      --o--     ----     --o
      "fs:#main-start": `
  float solidLength = vDashArray.x;
  float gapLength = vDashArray.y;
  float unitLength = solidLength + gapLength;

  float offset;

  if (unitLength > 0.0) {
    if (pathStyle.dashAlignMode == 0.0) {
      offset = vDashOffset;
    } else {
      unitLength = vPathLength / round(vPathLength / unitLength);
      offset = solidLength / 2.0;
    }

    float unitOffset = mod(vPathPosition.y + offset, unitLength);

    if (gapLength > 0.0 && unitOffset > solidLength) {
      if (path.capType <= 0.5) {
        if (!(pathStyle.dashGapPickable && bool(picking.isActive))) {
          discard;
        }
      } else {
        // caps are rounded, test the distance to solid ends
        float distToEnd = length(vec2(
          min(unitOffset - solidLength, unitLength - unitOffset),
          vPathPosition.x
        ));
        if (distToEnd > 1.0) {
          if (!(pathStyle.dashGapPickable && bool(picking.isActive))) {
            discard;
          }
        }
      }
    }
  }
`
    }
  };
  var offsetShaders = {
    inject: {
      "vs:#decl": `
in float instanceOffsets;
`,
      "vs:DECKGL_FILTER_SIZE": `
  float offsetWidth = abs(instanceOffsets * 2.0) + 1.0;
  size *= offsetWidth;
`,
      "vs:#main-end": `
  float offsetWidth = abs(instanceOffsets * 2.0) + 1.0;
  float offsetDir = sign(instanceOffsets);
  vPathPosition.x = (vPathPosition.x + offsetDir) * offsetWidth - offsetDir;
  vPathPosition.y *= offsetWidth;
  vPathLength *= offsetWidth;
`,
      "fs:#main-start": `
  float isInside;
  isInside = step(-1.0, vPathPosition.x) * step(vPathPosition.x, 1.0);
  if (isInside == 0.0) {
    discard;
  }
`
    }
  };

  // ../extensions/src/path-style/path-style-extension.ts
  var defaultProps35 = {
    getDashArray: { type: "accessor", value: [0, 0] },
    getOffset: { type: "accessor", value: 0 },
    dashJustified: false,
    dashGapPickable: false
  };
  var PathStyleExtension = class extends LayerExtension {
    constructor({
      dash = false,
      offset = false,
      highPrecisionDash = false
    } = {}) {
      super({ dash: dash || highPrecisionDash, offset, highPrecisionDash });
    }
    isEnabled(layer) {
      return "pathTesselator" in layer.state;
    }
    getShaders(extension) {
      if (!extension.isEnabled(this)) {
        return null;
      }
      let result = {};
      if (extension.opts.dash) {
        result = mergeShaders(result, dashShaders);
      }
      if (extension.opts.offset) {
        result = mergeShaders(result, offsetShaders);
      }
      const { inject: inject6 } = result;
      const pathStyle = {
        name: "pathStyle",
        inject: inject6,
        uniformTypes: {
          dashAlignMode: "f32",
          dashGapPickable: "i32"
        }
      };
      return {
        modules: [pathStyle]
      };
    }
    initializeState(context, extension) {
      const attributeManager = this.getAttributeManager();
      if (!attributeManager || !extension.isEnabled(this)) {
        return;
      }
      if (extension.opts.dash) {
        attributeManager.addInstanced({
          instanceDashArrays: { size: 2, accessor: "getDashArray" },
          instanceDashOffsets: extension.opts.highPrecisionDash ? {
            size: 1,
            accessor: "getPath",
            transform: extension.getDashOffsets.bind(this)
          } : {
            size: 1,
            update: (attribute) => {
              attribute.constant = true;
              attribute.value = [0];
            }
          }
        });
      }
      if (extension.opts.offset) {
        attributeManager.addInstanced({
          instanceOffsets: { size: 1, accessor: "getOffset" }
        });
      }
    }
    updateState(params, extension) {
      if (!extension.isEnabled(this)) {
        return;
      }
      if (extension.opts.dash) {
        const pathStyleProps = {
          dashAlignMode: this.props.dashJustified ? 1 : 0,
          dashGapPickable: Boolean(this.props.dashGapPickable)
        };
        this.setShaderModuleProps({ pathStyle: pathStyleProps });
      }
    }
    getDashOffsets(path) {
      const result = [0];
      const positionSize = this.props.positionFormat === "XY" ? 2 : 3;
      const isNested2 = Array.isArray(path[0]);
      const geometrySize = isNested2 ? path.length : path.length / positionSize;
      let p5;
      let prevP;
      for (let i7 = 0; i7 < geometrySize - 1; i7++) {
        p5 = isNested2 ? path[i7] : path.slice(i7 * positionSize, i7 * positionSize + positionSize);
        p5 = this.projectPosition(p5);
        if (i7 > 0) {
          result[i7] = result[i7 - 1] + vec3_exports.dist(prevP, p5);
        }
        prevP = p5;
      }
      result[geometrySize - 1] = 0;
      return result;
    }
  };
  PathStyleExtension.defaultProps = defaultProps35;
  PathStyleExtension.extensionName = "PathStyleExtension";

  // ../extensions/src/fill-style/shader-module.ts
  var uniformBlock21 = (
    /* glsl */
    `uniform fillUniforms {
  vec2 patternTextureSize;
  bool patternEnabled;
  bool patternMask;
  vec2 uvCoordinateOrigin;
  vec2 uvCoordinateOrigin64Low;
} fill;
`
  );
  var patternVs = (
    /* glsl */
    `
in vec4 fillPatternFrames;
in float fillPatternScales;
in vec2 fillPatternOffsets;

out vec2 fill_uv;
out vec4 fill_patternBounds;
out vec4 fill_patternPlacement;
`
  );
  var vs11 = `
${uniformBlock21}
${patternVs}
`;
  var patternFs = (
    /* glsl */
    `
uniform sampler2D fill_patternTexture;

in vec4 fill_patternBounds;
in vec4 fill_patternPlacement;
in vec2 fill_uv;

const float FILL_UV_SCALE = 512.0 / 40000000.0;
`
  );
  var fs9 = `
${uniformBlock21}
${patternFs}
`;
  var inject3 = {
    "vs:DECKGL_FILTER_GL_POSITION": (
      /* glsl */
      `
    fill_uv = geometry.position.xy;
  `
    ),
    "vs:DECKGL_FILTER_COLOR": (
      /* glsl */
      `
    if (fill.patternEnabled) {
      fill_patternBounds = fillPatternFrames / vec4(fill.patternTextureSize, fill.patternTextureSize);
      fill_patternPlacement.xy = fillPatternOffsets;
      fill_patternPlacement.zw = fillPatternScales * fillPatternFrames.zw;
    }
  `
    ),
    "fs:DECKGL_FILTER_COLOR": (
      /* glsl */
      `
    if (fill.patternEnabled) {
      vec2 scale = FILL_UV_SCALE * fill_patternPlacement.zw;
      vec2 patternUV = mod(mod(fill.uvCoordinateOrigin, scale) + fill.uvCoordinateOrigin64Low + fill_uv, scale) / scale;
      patternUV = mod(fill_patternPlacement.xy + patternUV, 1.0);

      vec2 texCoords = fill_patternBounds.xy + fill_patternBounds.zw * patternUV;

      vec4 patternColor = texture(fill_patternTexture, texCoords);
      color.a *= patternColor.a;
      if (!fill.patternMask) {
        color.rgb = patternColor.rgb;
      }
    }
  `
    )
  };
  function getPatternUniforms(opts) {
    if (!opts) {
      return {};
    }
    const uniforms = {};
    if ("fillPatternTexture" in opts) {
      const { fillPatternTexture } = opts;
      uniforms.fill_patternTexture = fillPatternTexture;
      uniforms.patternTextureSize = [fillPatternTexture.width, fillPatternTexture.height];
    }
    if ("project" in opts) {
      const { fillPatternMask = true, fillPatternEnabled = true } = opts;
      const projectUniforms = project_default.getUniforms(opts.project);
      const { commonOrigin: coordinateOriginCommon } = projectUniforms;
      const coordinateOriginCommon64Low = [
        fp64LowPart2(coordinateOriginCommon[0]),
        fp64LowPart2(coordinateOriginCommon[1])
      ];
      uniforms.uvCoordinateOrigin = coordinateOriginCommon.slice(0, 2);
      uniforms.uvCoordinateOrigin64Low = coordinateOriginCommon64Low;
      uniforms.patternMask = fillPatternMask;
      uniforms.patternEnabled = fillPatternEnabled;
    }
    return uniforms;
  }
  var patternShaders = {
    name: "fill",
    vs: vs11,
    fs: fs9,
    inject: inject3,
    dependencies: [project_default],
    getUniforms: getPatternUniforms,
    uniformTypes: {
      patternTextureSize: "vec2<f32>",
      patternEnabled: "i32",
      patternMask: "i32",
      uvCoordinateOrigin: "vec2<f32>",
      uvCoordinateOrigin64Low: "vec2<f32>"
    }
  };

  // ../extensions/src/fill-style/fill-style-extension.ts
  var defaultProps36 = {
    fillPatternEnabled: true,
    fillPatternAtlas: {
      type: "image",
      value: null,
      async: true,
      parameters: { lodMaxClamp: 0 }
    },
    fillPatternMapping: { type: "object", value: {}, async: true },
    fillPatternMask: true,
    getFillPattern: { type: "accessor", value: (d5) => d5.pattern },
    getFillPatternScale: { type: "accessor", value: 1 },
    getFillPatternOffset: { type: "accessor", value: [0, 0] }
  };
  var FillStyleExtension = class extends LayerExtension {
    constructor({ pattern = false } = {}) {
      super({ pattern });
    }
    isEnabled(layer) {
      return layer.getAttributeManager() !== null && !("pathTesselator" in layer.state);
    }
    getShaders(extension) {
      if (!extension.isEnabled(this)) {
        return null;
      }
      return {
        modules: [extension.opts.pattern && patternShaders].filter(Boolean)
      };
    }
    initializeState(context, extension) {
      if (!extension.isEnabled(this)) {
        return;
      }
      const attributeManager = this.getAttributeManager();
      if (extension.opts.pattern) {
        attributeManager.add({
          fillPatternFrames: {
            size: 4,
            stepMode: "dynamic",
            accessor: "getFillPattern",
            transform: extension.getPatternFrame.bind(this)
          },
          fillPatternScales: {
            size: 1,
            stepMode: "dynamic",
            accessor: "getFillPatternScale",
            defaultValue: 1
          },
          fillPatternOffsets: {
            size: 2,
            stepMode: "dynamic",
            accessor: "getFillPatternOffset"
          }
        });
      }
      this.setState({
        emptyTexture: this.context.device.createTexture({
          data: new Uint8Array(4),
          width: 1,
          height: 1
        })
      });
    }
    updateState({ props, oldProps }, extension) {
      if (!extension.isEnabled(this)) {
        return;
      }
      if (props.fillPatternMapping && props.fillPatternMapping !== oldProps.fillPatternMapping) {
        this.getAttributeManager().invalidate("getFillPattern");
      }
    }
    draw(params, extension) {
      if (!extension.isEnabled(this)) {
        return;
      }
      const { fillPatternAtlas, fillPatternEnabled, fillPatternMask } = this.props;
      const fillProps = {
        project: params.shaderModuleProps.project,
        fillPatternEnabled,
        fillPatternMask,
        fillPatternTexture: fillPatternAtlas || this.state.emptyTexture
      };
      this.setShaderModuleProps({ fill: fillProps });
    }
    finalizeState() {
      const emptyTexture = this.state.emptyTexture;
      emptyTexture?.delete();
    }
    getPatternFrame(name13) {
      const { fillPatternMapping } = this.getCurrentLayer().props;
      const def = fillPatternMapping && fillPatternMapping[name13];
      return def ? [def.x, def.y, def.width, def.height] : [0, 0, 0, 0];
    }
  };
  FillStyleExtension.defaultProps = defaultProps36;
  FillStyleExtension.extensionName = "FillStyleExtension";

  // ../extensions/src/clip/clip-extension.ts
  var defaultProps37 = {
    clipBounds: [0, 0, 1, 1],
    clipByInstance: void 0
  };
  var shaderFunction = (
    /* glsl */
    `
uniform clipUniforms {
  vec4 bounds;
} clip;

bool clip_isInBounds(vec2 position) {
  return position.x >= clip.bounds[0] && position.y >= clip.bounds[1] && position.x < clip.bounds[2] && position.y < clip.bounds[3];
}
`
  );
  var shaderModuleVs = {
    name: "clip",
    vs: shaderFunction,
    uniformTypes: {
      bounds: "vec4<f32>"
    }
  };
  var injectionVs = {
    "vs:#decl": (
      /* glsl */
      `
out float clip_isVisible;
`
    ),
    "vs:DECKGL_FILTER_GL_POSITION": (
      /* glsl */
      `
  clip_isVisible = float(clip_isInBounds(geometry.worldPosition.xy));
`
    ),
    "fs:#decl": (
      /* glsl */
      `
in float clip_isVisible;
`
    ),
    "fs:DECKGL_FILTER_COLOR": (
      /* glsl */
      `
  if (clip_isVisible < 0.5) discard;
`
    )
  };
  var shaderModuleFs = {
    name: "clip",
    fs: shaderFunction,
    uniformTypes: {
      bounds: "vec4<f32>"
    }
  };
  var injectionFs = {
    "vs:#decl": (
      /* glsl */
      `
out vec2 clip_commonPosition;
`
    ),
    "vs:DECKGL_FILTER_GL_POSITION": (
      /* glsl */
      `
  clip_commonPosition = geometry.position.xy;
`
    ),
    "fs:#decl": (
      /* glsl */
      `
in vec2 clip_commonPosition;
`
    ),
    "fs:DECKGL_FILTER_COLOR": (
      /* glsl */
      `
  if (!clip_isInBounds(clip_commonPosition)) discard;
`
    )
  };
  var ClipExtension = class extends LayerExtension {
    getShaders() {
      let clipByInstance = "instancePositions" in this.getAttributeManager().attributes;
      if (this.props.clipByInstance !== void 0) {
        clipByInstance = Boolean(this.props.clipByInstance);
      }
      this.state.clipByInstance = clipByInstance;
      return clipByInstance ? {
        modules: [shaderModuleVs],
        inject: injectionVs
      } : {
        modules: [shaderModuleFs],
        inject: injectionFs
      };
    }
    /* eslint-disable camelcase */
    draw() {
      const { clipBounds } = this.props;
      const clipProps = {};
      if (this.state.clipByInstance) {
        clipProps.bounds = clipBounds;
      } else {
        const corner0 = this.projectPosition([clipBounds[0], clipBounds[1], 0]);
        const corner1 = this.projectPosition([clipBounds[2], clipBounds[3], 0]);
        clipProps.bounds = [
          Math.min(corner0[0], corner1[0]),
          Math.min(corner0[1], corner1[1]),
          Math.max(corner0[0], corner1[0]),
          Math.max(corner0[1], corner1[1])
        ];
      }
      this.setShaderModuleProps({ clip: clipProps });
    }
  };
  ClipExtension.defaultProps = defaultProps37;
  ClipExtension.extensionName = "ClipExtension";

  // ../extensions/src/collision-filter/shader-module.ts
  var vs12 = (
    /* glsl */
    `
in float collisionPriorities;

uniform sampler2D collision_texture;

uniform collisionUniforms {
  bool sort;
  bool enabled;
} collision;

vec2 collision_getCoords(vec4 position) {
  vec4 collision_clipspace = project_common_position_to_clipspace(position);
  return (1.0 + collision_clipspace.xy / collision_clipspace.w) / 2.0;
}

float collision_match(vec2 tex, vec3 pickingColor) {
  vec4 collision_pickingColor = texture(collision_texture, tex);
  float delta = dot(abs(collision_pickingColor.rgb - pickingColor), vec3(1.0));
  float e = 0.001;
  return step(delta, e);
}

float collision_isVisible(vec2 texCoords, vec3 pickingColor) {
  if (!collision.enabled) {
    return 1.0;
  }

  // Visibility test, sample area of 5x5 pixels in order to fade in/out.
  // Due to the locality, the lookups will be cached
  // This reduces the flicker present when objects are shown/hidden
  const int N = 2;
  float accumulator = 0.0;
  vec2 step = vec2(1.0 / project.viewportSize);

  const float floatN = float(N);
  vec2 delta = -floatN * step;
  for(int i = -N; i <= N; i++) {
    delta.x = -step.x * floatN;
    for(int j = -N; j <= N; j++) {
      accumulator += collision_match(texCoords + delta, pickingColor);
      delta.x += step.x;
    }
    delta.y += step.y;
  }

  float W = 2.0 * floatN + 1.0;
  return pow(accumulator / (W * W), 2.2);
}
`
  );
  var inject4 = {
    "vs:#decl": (
      /* glsl */
      `
  float collision_fade = 1.0;
`
    ),
    "vs:DECKGL_FILTER_GL_POSITION": (
      /* glsl */
      `
  if (collision.sort) {
    float collisionPriority = collisionPriorities;
    position.z = -0.001 * collisionPriority * position.w; // Support range -1000 -> 1000
  }

  if (collision.enabled) {
    vec4 collision_common_position = project_position(vec4(geometry.worldPosition, 1.0));
    vec2 collision_texCoords = collision_getCoords(collision_common_position);
    collision_fade = collision_isVisible(collision_texCoords, geometry.pickingColor / 255.0);
    if (collision_fade < 0.0001) {
      // Position outside clip space bounds to discard
      position = vec4(0.0, 0.0, 2.0, 1.0);
    }
  }
  `
    ),
    "vs:DECKGL_FILTER_COLOR": (
      /* glsl */
      `
  color.a *= collision_fade;
  `
    )
  };
  var getCollisionUniforms = (opts) => {
    if (!opts || !("dummyCollisionMap" in opts)) {
      return {};
    }
    const { enabled, collisionFBO, drawToCollisionMap, dummyCollisionMap } = opts;
    return {
      enabled: enabled && !drawToCollisionMap,
      sort: Boolean(drawToCollisionMap),
      collision_texture: !drawToCollisionMap && collisionFBO ? collisionFBO.colorAttachments[0] : dummyCollisionMap
    };
  };
  var shader_module_default2 = {
    name: "collision",
    dependencies: [project_default],
    vs: vs12,
    inject: inject4,
    getUniforms: getCollisionUniforms,
    uniformTypes: {
      sort: "i32",
      enabled: "i32"
    }
  };

  // ../extensions/src/collision-filter/collision-filter-pass.ts
  var CollisionFilterPass = class extends LayersPass {
    renderCollisionMap(target2, options) {
      const padding = 1;
      const clearColor = [0, 0, 0, 0];
      const scissorRect = [padding, padding, target2.width - 2 * padding, target2.height - 2 * padding];
      this.render({ ...options, clearColor, scissorRect, target: target2, pass: "collision" });
    }
    getLayerParameters(layer, layerIndex, viewport) {
      return {
        ...layer.props.parameters,
        blend: false,
        depthWriteEnabled: true,
        depthCompare: "less-equal"
      };
    }
    getShaderModuleProps() {
      return {
        collision: {
          drawToCollisionMap: true
        },
        picking: {
          isActive: 1,
          isAttribute: false
        },
        lighting: { enabled: false }
      };
    }
  };

  // ../extensions/src/collision-filter/collision-filter-effect.ts
  var DOWNSCALE = 2;
  var CollisionFilterEffect = class {
    constructor() {
      this.id = "collision-filter-effect";
      this.props = null;
      this.useInPicking = true;
      this.order = 1;
      this.channels = {};
      this.collisionFBOs = {};
    }
    setup(context) {
      this.context = context;
      const { device } = context;
      this.dummyCollisionMap = device.createTexture({ width: 1, height: 1 });
      this.collisionFilterPass = new CollisionFilterPass(device, { id: "default-collision-filter" });
    }
    preRender({
      effects: allEffects,
      layers,
      layerFilter,
      viewports,
      onViewportActive,
      views,
      isPicking,
      preRenderStats = {}
    }) {
      const { device } = this.context;
      if (isPicking) {
        return;
      }
      const collisionLayers = layers.filter(
        // @ts-ignore
        ({ props: { visible, collisionEnabled } }) => visible && collisionEnabled
      );
      if (collisionLayers.length === 0) {
        this.channels = {};
        return;
      }
      const effects = allEffects?.filter((e6) => e6.useInPicking && preRenderStats[e6.id]);
      const maskEffectRendered = preRenderStats["mask-effect"]?.didRender;
      const channels = this._groupByCollisionGroup(device, collisionLayers);
      const viewport = viewports[0];
      const viewportChanged = !this.lastViewport || !this.lastViewport.equals(viewport) || maskEffectRendered;
      for (const collisionGroup in channels) {
        const collisionFBO = this.collisionFBOs[collisionGroup];
        const renderInfo = channels[collisionGroup];
        const [width, height] = device.canvasContext.getPixelSize();
        collisionFBO.resize({
          width: width / DOWNSCALE,
          height: height / DOWNSCALE
        });
        this._render(renderInfo, {
          effects,
          layerFilter,
          onViewportActive,
          views,
          viewport,
          viewportChanged
        });
      }
    }
    _render(renderInfo, {
      effects,
      layerFilter,
      onViewportActive,
      views,
      viewport,
      viewportChanged
    }) {
      const { collisionGroup } = renderInfo;
      const oldRenderInfo = this.channels[collisionGroup];
      if (!oldRenderInfo) {
        return;
      }
      const needsRender = viewportChanged || // If render info is new
      renderInfo === oldRenderInfo || // If sublayers have changed
      !deepEqual2(oldRenderInfo.layers, renderInfo.layers, 1) || // If a sublayer's bounds have been updated
      renderInfo.layerBounds.some((b4, i7) => !equals(b4, oldRenderInfo.layerBounds[i7])) || // If a sublayer's isLoaded state has been updated
      renderInfo.allLayersLoaded !== oldRenderInfo.allLayersLoaded || // Some prop is in transition
      renderInfo.layers.some((layer) => layer.props.transitions);
      this.channels[collisionGroup] = renderInfo;
      if (needsRender) {
        this.lastViewport = viewport;
        const collisionFBO = this.collisionFBOs[collisionGroup];
        this.collisionFilterPass.renderCollisionMap(collisionFBO, {
          pass: "collision-filter",
          isPicking: true,
          layers: renderInfo.layers,
          effects,
          layerFilter,
          viewports: viewport ? [viewport] : [],
          onViewportActive,
          views,
          shaderModuleProps: {
            collision: {
              enabled: true,
              // To avoid feedback loop forming between Framebuffer and active Texture.
              dummyCollisionMap: this.dummyCollisionMap
            },
            project: {
              // @ts-expect-error TODO - assuming WebGL context
              devicePixelRatio: collisionFBO.device.canvasContext.getDevicePixelRatio() / DOWNSCALE
            }
          }
        });
      }
    }
    /**
     * Group layers by collisionGroup
     * Returns a map from collisionGroup to render info
     */
    _groupByCollisionGroup(device, collisionLayers) {
      const channelMap = {};
      for (const layer of collisionLayers) {
        const collisionGroup = layer.props.collisionGroup;
        let channelInfo = channelMap[collisionGroup];
        if (!channelInfo) {
          channelInfo = { collisionGroup, layers: [], layerBounds: [], allLayersLoaded: true };
          channelMap[collisionGroup] = channelInfo;
        }
        channelInfo.layers.push(layer);
        channelInfo.layerBounds.push(layer.getBounds());
        if (!layer.isLoaded) {
          channelInfo.allLayersLoaded = false;
        }
      }
      for (const collisionGroup of Object.keys(channelMap)) {
        if (!this.collisionFBOs[collisionGroup]) {
          this.createFBO(device, collisionGroup);
        }
        if (!this.channels[collisionGroup]) {
          this.channels[collisionGroup] = channelMap[collisionGroup];
        }
      }
      for (const collisionGroup of Object.keys(this.collisionFBOs)) {
        if (!channelMap[collisionGroup]) {
          this.destroyFBO(collisionGroup);
        }
      }
      return channelMap;
    }
    getShaderModuleProps(layer) {
      const { collisionGroup, collisionEnabled } = layer.props;
      const { collisionFBOs, dummyCollisionMap } = this;
      const collisionFBO = collisionFBOs[collisionGroup];
      const enabled = collisionEnabled && Boolean(collisionFBO);
      return {
        collision: {
          enabled,
          collisionFBO,
          dummyCollisionMap
        }
      };
    }
    cleanup() {
      if (this.dummyCollisionMap) {
        this.dummyCollisionMap.delete();
        this.dummyCollisionMap = void 0;
      }
      this.channels = {};
      for (const collisionGroup of Object.keys(this.collisionFBOs)) {
        this.destroyFBO(collisionGroup);
      }
      this.collisionFBOs = {};
      this.lastViewport = void 0;
    }
    createFBO(device, collisionGroup) {
      const { width, height } = device.getDefaultCanvasContext().canvas;
      const collisionMap = device.createTexture({
        format: "rgba8unorm",
        width,
        height,
        sampler: {
          minFilter: "nearest",
          magFilter: "nearest",
          addressModeU: "clamp-to-edge",
          addressModeV: "clamp-to-edge"
        }
      });
      const depthStencilAttachment = device.createTexture({
        format: "depth16unorm",
        width,
        height
      });
      this.collisionFBOs[collisionGroup] = device.createFramebuffer({
        id: `collision-${collisionGroup}`,
        width,
        height,
        colorAttachments: [collisionMap],
        depthStencilAttachment
      });
    }
    destroyFBO(collisionGroup) {
      const fbo = this.collisionFBOs[collisionGroup];
      fbo.colorAttachments[0]?.destroy();
      fbo.depthStencilAttachment?.destroy();
      fbo.destroy();
      delete this.collisionFBOs[collisionGroup];
    }
  };

  // ../extensions/src/collision-filter/collision-filter-extension.ts
  var defaultProps38 = {
    getCollisionPriority: { type: "accessor", value: 0 },
    collisionEnabled: true,
    collisionGroup: { type: "string", value: "default" },
    collisionTestProps: {}
  };
  var CollisionFilterExtension = class extends LayerExtension {
    getShaders() {
      return { modules: [shader_module_default2] };
    }
    /* eslint-disable camelcase */
    draw({ shaderModuleProps }) {
      if (shaderModuleProps.collision?.drawToCollisionMap) {
        this.props = this.clone(this.props.collisionTestProps).props;
      }
    }
    initializeState(context, extension) {
      if (this.getAttributeManager() === null) {
        return;
      }
      this.context.deck?._addDefaultEffect(new CollisionFilterEffect());
      const attributeManager = this.getAttributeManager();
      attributeManager.add({
        collisionPriorities: {
          size: 1,
          stepMode: "dynamic",
          accessor: "getCollisionPriority"
        }
      });
    }
    getNeedsPickingBuffer() {
      return this.props.collisionEnabled;
    }
  };
  CollisionFilterExtension.defaultProps = defaultProps38;
  CollisionFilterExtension.extensionName = "CollisionFilterExtension";

  // ../extensions/src/mask/shader-module.ts
  var uniformBlock22 = (
    /* glsl */
    `uniform maskUniforms {
  vec4 bounds;
  highp int channel;
  bool enabled;
  bool inverted;
  bool maskByInstance;
} mask;
`
  );
  var vertex4 = (
    /* glsl */
    `
vec2 mask_getCoords(vec4 position) {
  return (position.xy - mask.bounds.xy) / (mask.bounds.zw - mask.bounds.xy);
}
`
  );
  var vs13 = `
${uniformBlock22}
${vertex4}
`;
  var fragment4 = (
    /* glsl */
    `
uniform sampler2D mask_texture;

bool mask_isInBounds(vec2 texCoords) {
  if (!mask.enabled) {
    return true;
  }
  vec4 maskColor = texture(mask_texture, texCoords);
  float maskValue = 1.0;
  if (mask.channel == 0) {
    maskValue = maskColor.r;
  } else if (mask.channel == 1) {
    maskValue = maskColor.g;
  } else if (mask.channel == 2) {
    maskValue = maskColor.b;
  } else if (mask.channel == 3) {
    maskValue = maskColor.a;
  }

  if (mask.inverted) {
    return maskValue >= 0.5;
  } else {
    return maskValue < 0.5;
  }
}
`
  );
  var fs10 = `
${uniformBlock22}
${fragment4}
`;
  var inject5 = {
    "vs:#decl": (
      /* glsl */
      `
out vec2 mask_texCoords;
`
    ),
    "vs:#main-end": (
      /* glsl */
      `
   vec4 mask_common_position;
   if (mask.maskByInstance) {
     mask_common_position = project_position(vec4(geometry.worldPosition, 1.0));
   } else {
     mask_common_position = geometry.position;
   }
   mask_texCoords = mask_getCoords(mask_common_position);
`
    ),
    "fs:#decl": (
      /* glsl */
      `
in vec2 mask_texCoords;
`
    ),
    "fs:#main-start": (
      /* glsl */
      `
  if (mask.enabled) {
    bool mask = mask_isInBounds(mask_texCoords);

    // Debug: show extent of render target
    // fragColor = vec4(mask_texCoords, 0.0, 1.0);
    // fragColor = texture(mask_texture, mask_texCoords);

    if (!mask) discard;
  }
`
    )
  };
  var getMaskUniforms = (opts) => {
    if (opts && "maskMap" in opts) {
      return {
        mask_texture: opts.maskMap
      };
    }
    return opts || {};
  };
  var shader_module_default3 = {
    name: "mask",
    dependencies: [project_default],
    vs: vs13,
    fs: fs10,
    inject: inject5,
    getUniforms: getMaskUniforms,
    uniformTypes: {
      bounds: "vec4<f32>",
      channel: "i32",
      enabled: "i32",
      inverted: "i32",
      maskByInstance: "i32"
    }
  };

  // ../extensions/src/mask/mask-pass.ts
  var MASK_BLENDING = {
    blendColorOperation: "subtract",
    blendColorSrcFactor: "zero",
    blendColorDstFactor: "one",
    blendAlphaOperation: "subtract",
    blendAlphaSrcFactor: "zero",
    blendAlphaDstFactor: "one"
  };
  var MaskPass = class extends LayersPass {
    constructor(device, props) {
      super(device, props);
      const { mapSize = 2048 } = props;
      this.maskMap = device.createTexture({
        format: "rgba8unorm",
        width: mapSize,
        height: mapSize,
        sampler: {
          minFilter: "linear",
          magFilter: "linear",
          addressModeU: "clamp-to-edge",
          addressModeV: "clamp-to-edge"
        }
      });
      this.fbo = device.createFramebuffer({
        id: "maskmap",
        width: mapSize,
        height: mapSize,
        colorAttachments: [this.maskMap]
      });
    }
    render(options) {
      const colorMask = 2 ** options.channel;
      const clearColor = [255, 255, 255, 255];
      super.render({ ...options, clearColor, colorMask, target: this.fbo, pass: "mask" });
    }
    getLayerParameters(layer, layerIndex, viewport) {
      return {
        ...layer.props.parameters,
        blend: true,
        depthCompare: "always",
        ...MASK_BLENDING
      };
    }
    shouldDrawLayer(layer) {
      return layer.props.operation.includes("mask");
    }
    delete() {
      this.fbo.delete();
      this.maskMap.delete();
    }
  };

  // ../extensions/src/utils/projection-utils.ts
  function joinLayerBounds(layers, viewport) {
    const bounds = [Infinity, Infinity, -Infinity, -Infinity];
    for (const layer of layers) {
      const layerBounds = layer.getBounds();
      if (layerBounds) {
        const bottomLeftCommon = layer.projectPosition(layerBounds[0], { viewport, autoOffset: false });
        const topRightCommon = layer.projectPosition(layerBounds[1], { viewport, autoOffset: false });
        bounds[0] = Math.min(bounds[0], bottomLeftCommon[0]);
        bounds[1] = Math.min(bounds[1], bottomLeftCommon[1]);
        bounds[2] = Math.max(bounds[2], topRightCommon[0]);
        bounds[3] = Math.max(bounds[3], topRightCommon[1]);
      }
    }
    if (Number.isFinite(bounds[0])) {
      return bounds;
    }
    return null;
  }
  var MAX_VIEWPORT_SIZE = 2048;
  function makeViewport(opts) {
    const { bounds, viewport, border = 0 } = opts;
    const { isGeospatial } = viewport;
    if (bounds[2] <= bounds[0] || bounds[3] <= bounds[1]) {
      return null;
    }
    const centerWorld = viewport.unprojectPosition([
      (bounds[0] + bounds[2]) / 2,
      (bounds[1] + bounds[3]) / 2,
      0
    ]);
    let { width, height, zoom } = opts;
    if (zoom === void 0) {
      width = width - border * 2;
      height = height - border * 2;
      const scale24 = Math.min(width / (bounds[2] - bounds[0]), height / (bounds[3] - bounds[1]));
      zoom = Math.min(Math.log2(scale24), 20);
    } else if (!width || !height) {
      const scale24 = 2 ** zoom;
      width = Math.round(Math.abs(bounds[2] - bounds[0]) * scale24);
      height = Math.round(Math.abs(bounds[3] - bounds[1]) * scale24);
      const maxSize = MAX_VIEWPORT_SIZE - border * 2;
      if (width > maxSize || height > maxSize) {
        const r5 = maxSize / Math.max(width, height);
        width = Math.round(width * r5);
        height = Math.round(height * r5);
        zoom += Math.log2(r5);
      }
    }
    return isGeospatial ? new WebMercatorViewport2({
      id: viewport.id,
      x: border,
      y: border,
      width,
      height,
      longitude: centerWorld[0],
      latitude: centerWorld[1],
      zoom,
      orthographic: true
    }) : new OrthographicViewport({
      id: viewport.id,
      x: border,
      y: border,
      width,
      height,
      target: centerWorld,
      zoom,
      flipY: false
    });
  }
  function getViewportBounds(viewport, zRange) {
    let viewportBoundsWorld;
    if (zRange && zRange.length === 2) {
      const [minZ, maxZ] = zRange;
      const bounds0 = viewport.getBounds({ z: minZ });
      const bounds1 = viewport.getBounds({ z: maxZ });
      viewportBoundsWorld = [
        Math.min(bounds0[0], bounds1[0]),
        Math.min(bounds0[1], bounds1[1]),
        Math.max(bounds0[2], bounds1[2]),
        Math.max(bounds0[3], bounds1[3])
      ];
    } else {
      viewportBoundsWorld = viewport.getBounds();
    }
    const viewportBottomLeftCommon = viewport.projectPosition(viewportBoundsWorld.slice(0, 2));
    const viewportTopRightCommon = viewport.projectPosition(viewportBoundsWorld.slice(2, 4));
    return [
      viewportBottomLeftCommon[0],
      viewportBottomLeftCommon[1],
      viewportTopRightCommon[0],
      viewportTopRightCommon[1]
    ];
  }
  function getRenderBounds(layerBounds, viewport, zRange) {
    if (!layerBounds) {
      return [0, 0, 1, 1];
    }
    const viewportBounds = getViewportBounds(viewport, zRange);
    const paddedBounds = doubleBounds(viewportBounds);
    if (layerBounds[2] - layerBounds[0] <= paddedBounds[2] - paddedBounds[0] && layerBounds[3] - layerBounds[1] <= paddedBounds[3] - paddedBounds[1]) {
      return layerBounds;
    }
    return [
      Math.max(layerBounds[0], paddedBounds[0]),
      Math.max(layerBounds[1], paddedBounds[1]),
      Math.min(layerBounds[2], paddedBounds[2]),
      Math.min(layerBounds[3], paddedBounds[3])
    ];
  }
  function doubleBounds(bounds) {
    const dx = bounds[2] - bounds[0];
    const dy = bounds[3] - bounds[1];
    const centerX = (bounds[0] + bounds[2]) / 2;
    const centerY = (bounds[1] + bounds[3]) / 2;
    return [centerX - dx, centerY - dy, centerX + dx, centerY + dy];
  }

  // ../extensions/src/mask/mask-effect.ts
  var MaskEffect = class {
    constructor() {
      this.id = "mask-effect";
      this.props = null;
      this.useInPicking = true;
      this.order = 0;
      this.channels = [];
      this.masks = null;
    }
    setup({ device }) {
      this.dummyMaskMap = device.createTexture({
        width: 1,
        height: 1
      });
      this.maskPass = new MaskPass(device, { id: "default-mask" });
      this.maskMap = this.maskPass.maskMap;
    }
    preRender({
      layers,
      layerFilter,
      viewports,
      onViewportActive,
      views,
      isPicking
    }) {
      let didRender = false;
      if (isPicking) {
        return { didRender };
      }
      const maskLayers = layers.filter((l5) => l5.props.visible && l5.props.operation.includes("mask"));
      if (maskLayers.length === 0) {
        this.masks = null;
        this.channels.length = 0;
        return { didRender };
      }
      this.masks = {};
      const channelMap = this._sortMaskChannels(maskLayers);
      const viewport = viewports[0];
      const viewportChanged = !this.lastViewport || !this.lastViewport.equals(viewport);
      if (viewport.resolution !== void 0) {
        log_default.warn("MaskExtension is not supported in GlobeView")();
        return { didRender };
      }
      for (const maskId in channelMap) {
        const result = this._renderChannel(channelMap[maskId], {
          layerFilter,
          onViewportActive,
          views,
          viewport,
          viewportChanged
        });
        didRender ||= result;
      }
      return { didRender };
    }
    /* eslint-disable-next-line complexity */
    _renderChannel(channelInfo, {
      layerFilter,
      onViewportActive,
      views,
      viewport,
      viewportChanged
    }) {
      let didRender = false;
      const oldChannelInfo = this.channels[channelInfo.index];
      if (!oldChannelInfo) {
        return didRender;
      }
      const maskChanged = (
        // If a channel is new
        channelInfo === oldChannelInfo || // If sublayers have changed
        channelInfo.layers.length !== oldChannelInfo.layers.length || channelInfo.layers.some(
          (layer, i7) => (
            // Layer instance is updated
            // Layer props might have changed
            // Undetermined props could have an effect on the output geometry of a mask layer,
            // for example getRadius+updateTriggers, radiusScale, modelMatrix
            layer !== oldChannelInfo.layers[i7] || // Some prop is in transition
            layer.props.transitions
          )
        ) || // If a sublayer's positions have been updated, the cached bounds will change shallowly
        channelInfo.layerBounds.some((b4, i7) => b4 !== oldChannelInfo.layerBounds[i7])
      );
      channelInfo.bounds = oldChannelInfo.bounds;
      channelInfo.maskBounds = oldChannelInfo.maskBounds;
      this.channels[channelInfo.index] = channelInfo;
      if (maskChanged || viewportChanged) {
        this.lastViewport = viewport;
        const layerBounds = joinLayerBounds(channelInfo.layers, viewport);
        channelInfo.bounds = layerBounds && getRenderBounds(layerBounds, viewport);
        if (maskChanged || !equals(channelInfo.bounds, oldChannelInfo.bounds)) {
          const { maskPass, maskMap } = this;
          const maskViewport = layerBounds && makeViewport({
            bounds: channelInfo.bounds,
            viewport,
            width: maskMap.width,
            height: maskMap.height,
            border: 1
          });
          channelInfo.maskBounds = maskViewport ? maskViewport.getBounds() : [0, 0, 1, 1];
          maskPass.render({
            pass: "mask",
            channel: channelInfo.index,
            layers: channelInfo.layers,
            layerFilter,
            viewports: maskViewport ? [maskViewport] : [],
            onViewportActive,
            views,
            shaderModuleProps: {
              project: {
                devicePixelRatio: 1
              }
            }
          });
          didRender = true;
        }
      }
      this.masks[channelInfo.id] = {
        index: channelInfo.index,
        bounds: channelInfo.maskBounds,
        coordinateOrigin: channelInfo.coordinateOrigin,
        coordinateSystem: channelInfo.coordinateSystem
      };
      return didRender;
    }
    /**
     * Find a channel to render each mask into
     * If a maskId already exists, diff and update the existing channel
     * Otherwise replace a removed mask
     * Otherwise create a new channel
     * Returns a map from mask layer id to channel info
     */
    _sortMaskChannels(maskLayers) {
      const channelMap = {};
      let channelCount = 0;
      for (const layer of maskLayers) {
        const { id } = layer.root;
        let channelInfo = channelMap[id];
        if (!channelInfo) {
          if (++channelCount > 4) {
            log_default.warn("Too many mask layers. The max supported is 4")();
            continue;
          }
          channelInfo = {
            id,
            index: this.channels.findIndex((c5) => c5?.id === id),
            layers: [],
            layerBounds: [],
            coordinateOrigin: layer.root.props.coordinateOrigin,
            coordinateSystem: layer.root.props.coordinateSystem
          };
          channelMap[id] = channelInfo;
        }
        channelInfo.layers.push(layer);
        channelInfo.layerBounds.push(layer.getBounds());
      }
      for (let i7 = 0; i7 < 4; i7++) {
        const channelInfo = this.channels[i7];
        if (!channelInfo || !(channelInfo.id in channelMap)) {
          this.channels[i7] = null;
        }
      }
      for (const maskId in channelMap) {
        const channelInfo = channelMap[maskId];
        if (channelInfo.index < 0) {
          channelInfo.index = this.channels.findIndex((c5) => !c5);
          this.channels[channelInfo.index] = channelInfo;
        }
      }
      return channelMap;
    }
    getShaderModuleProps() {
      return {
        mask: {
          maskMap: this.masks ? this.maskMap : this.dummyMaskMap,
          maskChannels: this.masks
        }
      };
    }
    cleanup() {
      if (this.dummyMaskMap) {
        this.dummyMaskMap.delete();
        this.dummyMaskMap = void 0;
      }
      if (this.maskPass) {
        this.maskPass.delete();
        this.maskPass = void 0;
        this.maskMap = void 0;
      }
      this.lastViewport = void 0;
      this.masks = null;
      this.channels.length = 0;
    }
  };

  // ../extensions/src/mask/mask-extension.ts
  var defaultProps39 = {
    maskId: "",
    maskByInstance: void 0,
    maskInverted: false
  };
  var MaskExtension = class extends LayerExtension {
    initializeState() {
      this.context.deck?._addDefaultEffect(new MaskEffect());
    }
    getShaders() {
      let maskByInstance = "instancePositions" in this.getAttributeManager().attributes;
      if (this.props.maskByInstance !== void 0) {
        maskByInstance = Boolean(this.props.maskByInstance);
      }
      this.state.maskByInstance = maskByInstance;
      return {
        modules: [shader_module_default3]
      };
    }
    /* eslint-disable camelcase */
    draw({ context, shaderModuleProps }) {
      const maskProps = {};
      maskProps.maskByInstance = Boolean(this.state.maskByInstance);
      const { maskId, maskInverted } = this.props;
      const { maskChannels } = shaderModuleProps.mask || {};
      const { viewport } = context;
      if (maskChannels && maskChannels[maskId]) {
        const { index, bounds, coordinateOrigin: fromCoordinateOrigin } = maskChannels[maskId];
        let { coordinateSystem: fromCoordinateSystem } = maskChannels[maskId];
        maskProps.enabled = true;
        maskProps.channel = index;
        maskProps.inverted = maskInverted;
        if (fromCoordinateSystem === COORDINATE_SYSTEM.DEFAULT) {
          fromCoordinateSystem = viewport.isGeospatial ? COORDINATE_SYSTEM.LNGLAT : COORDINATE_SYSTEM.CARTESIAN;
        }
        const opts = { modelMatrix: null, fromCoordinateOrigin, fromCoordinateSystem };
        const bl = this.projectPosition([bounds[0], bounds[1], 0], opts);
        const tr = this.projectPosition([bounds[2], bounds[3], 0], opts);
        maskProps.bounds = [bl[0], bl[1], tr[0], tr[1]];
      } else {
        if (maskId) {
          log_default.warn(`Could not find a mask layer with id: ${maskId}`)();
        }
        maskProps.enabled = false;
      }
      this.setShaderModuleProps({ mask: maskProps });
    }
  };
  MaskExtension.defaultProps = defaultProps39;
  MaskExtension.extensionName = "MaskExtension";

  // ../extensions/src/terrain/shader-module.ts
  var TERRAIN_MODE = {
    NONE: 0,
    /** A terrain layer rendering encoded ground elevation into the height map */
    WRITE_HEIGHT_MAP: 1,
    /** An offset layer reading encoded ground elevation from the height map */
    USE_HEIGHT_MAP: 2,
    /** A terrain layer rendering to screen, using the cover fbo overlaid with its own texture */
    USE_COVER: 3,
    /** A terrain layer rendering to screen, using the cover fbo as texture */
    USE_COVER_ONLY: 4,
    /** Draped layer is rendered into a texture, and never to screen */
    SKIP: 5
  };
  var TERRAIN_MODE_CONSTANTS = Object.keys(TERRAIN_MODE).map((key) => `const float TERRAIN_MODE_${key} = ${TERRAIN_MODE[key]}.0;`).join("\n");
  var uniformBlock23 = (
    // eslint-disable-next-line prefer-template
    TERRAIN_MODE_CONSTANTS + /* glsl */
    `
uniform terrainUniforms {
  float mode;
  vec4 bounds;
} terrain;

uniform sampler2D terrain_map;
`
  );
  var terrainModule = {
    name: "terrain",
    dependencies: [project_default],
    // eslint-disable-next-line prefer-template
    vs: uniformBlock23 + /* glsl */
    "out vec3 commonPos;",
    // eslint-disable-next-line prefer-template
    fs: uniformBlock23 + /* glsl */
    "in vec3 commonPos;",
    inject: {
      "vs:#main-start": (
        /* glsl */
        `
if (terrain.mode == TERRAIN_MODE_SKIP) {
  gl_Position = vec4(0.0);
  return;
}
`
      ),
      "vs:DECKGL_FILTER_GL_POSITION": (
        /* glsl */
        `
commonPos = geometry.position.xyz;
if (terrain.mode == TERRAIN_MODE_WRITE_HEIGHT_MAP) {
  vec2 texCoords = (commonPos.xy - terrain.bounds.xy) / terrain.bounds.zw;
  position = vec4(texCoords * 2.0 - 1.0, 0.0, 1.0);
  commonPos.z += project.commonOrigin.z;
}
if (terrain.mode == TERRAIN_MODE_USE_HEIGHT_MAP) {
  vec3 anchor = geometry.worldPosition;
  anchor.z = 0.0;
  vec3 anchorCommon = project_position(anchor);
  vec2 texCoords = (anchorCommon.xy - terrain.bounds.xy) / terrain.bounds.zw;
  if (texCoords.x >= 0.0 && texCoords.y >= 0.0 && texCoords.x <= 1.0 && texCoords.y <= 1.0) {
    float terrainZ = texture(terrain_map, texCoords).r;
    geometry.position.z += terrainZ;
    position = project_common_position_to_clipspace(geometry.position);
  }
}
    `
      ),
      "fs:#main-start": (
        /* glsl */
        `
if (terrain.mode == TERRAIN_MODE_WRITE_HEIGHT_MAP) {
  fragColor = vec4(commonPos.z, 0.0, 0.0, 1.0);
  return;
}
    `
      ),
      "fs:DECKGL_FILTER_COLOR": (
        /* glsl */
        `
if ((terrain.mode == TERRAIN_MODE_USE_COVER) || (terrain.mode == TERRAIN_MODE_USE_COVER_ONLY)) {
  vec2 texCoords = (commonPos.xy - terrain.bounds.xy) / terrain.bounds.zw;
  vec4 pixel = texture(terrain_map, texCoords);
  if (terrain.mode == TERRAIN_MODE_USE_COVER_ONLY) {
    color = pixel;
  } else {
    // pixel is premultiplied
    color = pixel + color * (1.0 - pixel.a);
  }
  return;
}
    `
      )
    },
    // eslint-disable-next-line complexity
    getUniforms: (opts = {}) => {
      if ("dummyHeightMap" in opts) {
        const {
          drawToTerrainHeightMap,
          heightMap,
          heightMapBounds,
          dummyHeightMap,
          terrainCover,
          useTerrainHeightMap,
          terrainSkipRender
        } = opts;
        const projectUniforms = project_default.getUniforms(opts.project);
        const { commonOrigin } = projectUniforms;
        let mode = terrainSkipRender ? TERRAIN_MODE.SKIP : TERRAIN_MODE.NONE;
        let sampler = dummyHeightMap;
        let bounds = null;
        if (drawToTerrainHeightMap) {
          mode = TERRAIN_MODE.WRITE_HEIGHT_MAP;
          bounds = heightMapBounds;
        } else if (useTerrainHeightMap && heightMap) {
          mode = TERRAIN_MODE.USE_HEIGHT_MAP;
          sampler = heightMap;
          bounds = heightMapBounds;
        } else if (terrainCover) {
          const fbo = opts.isPicking ? terrainCover.getPickingFramebuffer() : terrainCover.getRenderFramebuffer();
          sampler = fbo?.colorAttachments[0].texture;
          if (opts.isPicking) {
            mode = TERRAIN_MODE.SKIP;
          }
          if (sampler) {
            mode = mode === TERRAIN_MODE.SKIP ? TERRAIN_MODE.USE_COVER_ONLY : TERRAIN_MODE.USE_COVER;
            bounds = terrainCover.bounds;
          } else {
            sampler = dummyHeightMap;
          }
        }
        return {
          mode,
          terrain_map: sampler,
          // Convert bounds to the common space, as [minX, minY, width, height]
          bounds: bounds ? [
            bounds[0] - commonOrigin[0],
            bounds[1] - commonOrigin[1],
            bounds[2] - bounds[0],
            bounds[3] - bounds[1]
          ] : [0, 0, 0, 0]
        };
      }
      return {};
    },
    uniformTypes: {
      mode: "f32",
      bounds: "vec4<f32>"
    }
  };

  // ../extensions/src/terrain/utils.ts
  init_dist5();
  function createRenderTarget(device, opts) {
    return device.createFramebuffer({
      id: opts.id,
      colorAttachments: [
        device.createTexture({
          id: opts.id,
          ...opts.float && {
            format: "rgba32float",
            type: GLEnum.FLOAT
          },
          dimension: "2d",
          width: 1,
          height: 1,
          sampler: opts.interpolate === false ? {
            minFilter: "nearest",
            magFilter: "nearest"
          } : {
            minFilter: "linear",
            magFilter: "linear"
          }
        })
      ]
    });
  }

  // ../extensions/src/terrain/terrain-cover.ts
  var TerrainCover = class {
    constructor(targetLayer) {
      this.isDirty = true;
      /** Viewport used to draw into the texture */
      this.renderViewport = null;
      /** Bounds of the terrain cover texture, in cartesian space */
      this.bounds = null;
      this.layers = [];
      /** Cached version of targetLayer.getBounds() */
      this.targetBounds = null;
      /** targetBounds in cartesian space */
      this.targetBoundsCommon = null;
      this.targetLayer = targetLayer;
      this.tile = getTile(targetLayer);
    }
    get id() {
      return this.targetLayer.id;
    }
    /** returns true if the target layer is still in use (i.e. not finalized) */
    get isActive() {
      return Boolean(this.targetLayer.getCurrentLayer());
    }
    shouldUpdate({
      targetLayer,
      viewport,
      layers,
      layerNeedsRedraw
    }) {
      if (targetLayer) {
        this.targetLayer = targetLayer;
      }
      const sizeChanged = viewport ? this._updateViewport(viewport) : false;
      let layersChanged = layers ? this._updateLayers(layers) : false;
      if (layerNeedsRedraw) {
        for (const id of this.layers) {
          if (layerNeedsRedraw[id]) {
            layersChanged = true;
            break;
          }
        }
      }
      return layersChanged || sizeChanged;
    }
    /** Compare layers with the last version. Only rerender if necessary. */
    _updateLayers(layers) {
      let needsRedraw = false;
      layers = this.tile ? getIntersectingLayers(this.tile, layers) : layers;
      if (layers.length !== this.layers.length) {
        needsRedraw = true;
      } else {
        for (let i7 = 0; i7 < layers.length; i7++) {
          const id = layers[i7].id;
          if (id !== this.layers[i7]) {
            needsRedraw = true;
            break;
          }
        }
      }
      if (needsRedraw) {
        this.layers = layers.map((layer) => layer.id);
      }
      return needsRedraw;
    }
    /** Compare viewport and terrain bounds with the last version. Only rerender if necesary. */
    // eslint-disable-next-line max-statements
    _updateViewport(viewport) {
      const targetLayer = this.targetLayer;
      let shouldRedraw = false;
      if (this.tile && "boundingBox" in this.tile) {
        if (!this.targetBounds) {
          shouldRedraw = true;
          this.targetBounds = this.tile.boundingBox;
          const bottomLeftCommon = viewport.projectPosition(this.targetBounds[0]);
          const topRightCommon = viewport.projectPosition(this.targetBounds[1]);
          this.targetBoundsCommon = [
            bottomLeftCommon[0],
            bottomLeftCommon[1],
            topRightCommon[0],
            topRightCommon[1]
          ];
        }
      } else if (this.targetBounds !== targetLayer.getBounds()) {
        shouldRedraw = true;
        this.targetBounds = targetLayer.getBounds();
        this.targetBoundsCommon = joinLayerBounds([targetLayer], viewport);
      }
      if (!this.targetBoundsCommon) {
        return false;
      }
      const newZoom = Math.ceil(viewport.zoom + 0.5);
      if (this.tile) {
        this.bounds = this.targetBoundsCommon;
      } else {
        const oldZoom = this.renderViewport?.zoom;
        shouldRedraw = shouldRedraw || newZoom !== oldZoom;
        const newBounds = getRenderBounds(this.targetBoundsCommon, viewport);
        const oldBounds = this.bounds;
        shouldRedraw = shouldRedraw || !oldBounds || newBounds.some((x4, i7) => x4 !== oldBounds[i7]);
        this.bounds = newBounds;
      }
      if (shouldRedraw) {
        this.renderViewport = makeViewport({
          bounds: this.bounds,
          zoom: newZoom,
          viewport
        });
      }
      return shouldRedraw;
    }
    getRenderFramebuffer() {
      if (!this.renderViewport || this.layers.length === 0) {
        return null;
      }
      if (!this.fbo) {
        this.fbo = createRenderTarget(this.targetLayer.context.device, { id: this.id });
      }
      return this.fbo;
    }
    getPickingFramebuffer() {
      if (!this.renderViewport || this.layers.length === 0 && !this.targetLayer.props.pickable) {
        return null;
      }
      if (!this.pickingFbo) {
        this.pickingFbo = createRenderTarget(this.targetLayer.context.device, {
          id: `${this.id}-picking`,
          interpolate: false
        });
      }
      return this.pickingFbo;
    }
    filterLayers(layers) {
      return layers.filter(({ id }) => this.layers.includes(id));
    }
    delete() {
      const { fbo, pickingFbo } = this;
      if (fbo) {
        fbo.colorAttachments[0].destroy();
        fbo.destroy();
      }
      if (pickingFbo) {
        pickingFbo.colorAttachments[0].destroy();
        pickingFbo.destroy();
      }
    }
  };
  function getIntersectingLayers(sourceTile, layers) {
    return layers.filter((layer) => {
      const tile = getTile(layer);
      if (tile) {
        return intersect2(sourceTile.boundingBox, tile.boundingBox);
      }
      return true;
    });
  }
  function getTile(layer) {
    while (layer) {
      const { tile } = layer.props;
      if (tile) {
        return tile;
      }
      layer = layer.parent;
    }
    return null;
  }
  function intersect2(b1, b22) {
    if (b1 && b22) {
      return b1[0][0] < b22[1][0] && b22[0][0] < b1[1][0] && b1[0][1] < b22[1][1] && b22[0][1] < b1[1][1];
    }
    return false;
  }

  // ../extensions/src/terrain/terrain-pass.ts
  var TERRAIN_BLENDING = {
    blendColorOperation: "max",
    blendColorSrcFactor: "one",
    blendColorDstFactor: "one",
    blendAlphaOperation: "max",
    blendAlphaSrcFactor: "one",
    blendAlphaDstFactor: "one"
  };
  var TerrainPass = class extends LayersPass {
    getRenderableLayers(viewport, opts) {
      const { layers } = opts;
      const result = [];
      const drawParamsByIndex = this._getDrawLayerParams(viewport, opts, true);
      for (let i7 = 0; i7 < layers.length; i7++) {
        const layer = layers[i7];
        if (!layer.isComposite && drawParamsByIndex[i7].shouldDrawLayer) {
          result.push(layer);
        }
      }
      return result;
    }
    renderHeightMap(heightMap, opts) {
      const target2 = heightMap.getRenderFramebuffer();
      const viewport = heightMap.renderViewport;
      if (!target2 || !viewport) {
        return;
      }
      target2.resize(viewport);
      this.render({
        ...opts,
        target: target2,
        pass: "terrain-height-map",
        layers: opts.layers,
        viewports: [viewport],
        effects: [],
        clearColor: [0, 0, 0, 0]
      });
    }
    renderTerrainCover(terrainCover, opts) {
      const target2 = terrainCover.getRenderFramebuffer();
      const viewport = terrainCover.renderViewport;
      if (!target2 || !viewport) {
        return;
      }
      const layers = terrainCover.filterLayers(opts.layers);
      target2.resize(viewport);
      this.render({
        ...opts,
        target: target2,
        pass: `terrain-cover-${terrainCover.id}`,
        layers,
        effects: [],
        viewports: [viewport],
        clearColor: [0, 0, 0, 0]
      });
    }
    getLayerParameters(layer, layerIndex, viewport) {
      return {
        ...layer.props.parameters,
        blend: true,
        depthCompare: "always",
        ...layer.props.operation.includes("terrain") && TERRAIN_BLENDING
      };
    }
    getShaderModuleProps(layer, effects, otherShaderModuleProps) {
      return {
        terrain: {
          project: otherShaderModuleProps.project
        }
      };
    }
  };

  // ../extensions/src/terrain/terrain-picking-pass.ts
  var TerrainPickingPass = class extends PickLayersPass {
    constructor() {
      super(...arguments);
      /** Save layer index for use when drawing to terrain cover.
       * When a terrain cover's picking buffer is rendered,
       * we need to make sure each layer receives a consistent index (encoded in the alpha channel)
       * so that a picked color can be decoded back to the correct layer.
       * Updated in getRenderableLayers which is called in TerrainEffect.preRender
       */
      this.drawParameters = {};
    }
    getRenderableLayers(viewport, opts) {
      const { layers } = opts;
      const result = [];
      this.drawParameters = {};
      this._resetColorEncoder(opts.pickZ);
      const drawParamsByIndex = this._getDrawLayerParams(viewport, opts);
      for (let i7 = 0; i7 < layers.length; i7++) {
        const layer = layers[i7];
        if (!layer.isComposite && drawParamsByIndex[i7].shouldDrawLayer) {
          result.push(layer);
          this.drawParameters[layer.id] = drawParamsByIndex[i7].layerParameters;
        }
      }
      return result;
    }
    renderTerrainCover(terrainCover, opts) {
      const target2 = terrainCover.getPickingFramebuffer();
      const viewport = terrainCover.renderViewport;
      if (!target2 || !viewport) {
        return;
      }
      const layers = terrainCover.filterLayers(opts.layers);
      const terrainLayer = terrainCover.targetLayer;
      if (terrainLayer.props.pickable) {
        layers.unshift(terrainLayer);
      }
      target2.resize(viewport);
      this.render({
        ...opts,
        pickingFBO: target2,
        pass: `terrain-cover-picking-${terrainCover.id}`,
        layers,
        effects: [],
        viewports: [viewport],
        // Disable the default culling because TileLayer would cull sublayers based on the screen viewport,
        // not the viewport of the terrain cover. Culling is already done by `terrainCover.filterLayers`
        cullRect: void 0,
        deviceRect: viewport,
        pickZ: false
      });
    }
    getLayerParameters(layer, layerIndex, viewport) {
      let parameters2;
      if (this.drawParameters[layer.id]) {
        parameters2 = this.drawParameters[layer.id];
      } else {
        parameters2 = super.getLayerParameters(layer, layerIndex, viewport);
        parameters2.blend = true;
      }
      return { ...parameters2, depthCompare: "always" };
    }
    getShaderModuleProps(layer, effects, otherShaderModuleProps) {
      const base = super.getShaderModuleProps(layer, effects, otherShaderModuleProps);
      return {
        ...base,
        terrain: {
          project: otherShaderModuleProps.project
        }
      };
    }
  };

  // ../extensions/src/terrain/height-map-builder.ts
  var MAP_MAX_SIZE = 2048;
  var HeightMapBuilder = class {
    constructor(device) {
      /** Viewport used to draw into the texture */
      this.renderViewport = null;
      /** Bounds of the height map texture, in cartesian space */
      this.bounds = null;
      /** Last rendered layers */
      this.layers = [];
      /** Last layer.getBounds() */
      this.layersBounds = [];
      /** The union of layersBounds in cartesian space */
      this.layersBoundsCommon = null;
      this.lastViewport = null;
      this.device = device;
    }
    static isSupported(device) {
      return device.isTextureFormatRenderable("rgba32float");
    }
    /** Returns the height map framebuffer for read/write access.
     * Returns null when the texture is invalid.
     */
    getRenderFramebuffer() {
      if (!this.renderViewport) {
        return null;
      }
      if (!this.fbo) {
        this.fbo = createRenderTarget(this.device, { id: "height-map", float: true });
      }
      return this.fbo;
    }
    /** Called every render cycle to check if the framebuffer needs update */
    shouldUpdate({ layers, viewport }) {
      const layersChanged = layers.length !== this.layers.length || layers.some(
        (layer, i7) => (
          // Layer instance is updated
          // Layer props might have changed
          // Undetermined props could have an effect on the output geometry of a terrain source,
          // for example getElevation+updateTriggers, elevationScale, modelMatrix
          layer !== this.layers[i7] || // Some prop is in transition
          layer.props.transitions || // Layer's geometry bounds have changed
          layer.getBounds() !== this.layersBounds[i7]
        )
      );
      if (layersChanged) {
        this.layers = layers;
        this.layersBounds = layers.map((layer) => layer.getBounds());
        this.layersBoundsCommon = joinLayerBounds(layers, viewport);
      }
      const viewportChanged = !this.lastViewport || !viewport.equals(this.lastViewport);
      if (!this.layersBoundsCommon) {
        this.renderViewport = null;
      } else if (layersChanged || viewportChanged) {
        const bounds = getRenderBounds(this.layersBoundsCommon, viewport);
        if (bounds[2] <= bounds[0] || bounds[3] <= bounds[1]) {
          this.renderViewport = null;
          return false;
        }
        this.bounds = bounds;
        this.lastViewport = viewport;
        const scale24 = viewport.scale;
        const pixelWidth = (bounds[2] - bounds[0]) * scale24;
        const pixelHeight = (bounds[3] - bounds[1]) * scale24;
        this.renderViewport = pixelWidth > 0 || pixelHeight > 0 ? makeViewport({
          // It's not important whether the geometry is visible in this viewport, because
          // vertices will not use the standard project_to_clipspace in the DRAW_TO_HEIGHT_MAP shader
          // However the viewport must have the same center and zoom as the screen viewport
          // So that projection uniforms used for calculating z are the same
          bounds: [
            viewport.center[0] - 1,
            viewport.center[1] - 1,
            viewport.center[0] + 1,
            viewport.center[1] + 1
          ],
          zoom: viewport.zoom,
          width: Math.min(pixelWidth, MAP_MAX_SIZE),
          height: Math.min(pixelHeight, MAP_MAX_SIZE),
          viewport
        }) : null;
        return true;
      }
      return false;
    }
    delete() {
      if (this.fbo) {
        this.fbo.colorAttachments[0].delete();
        this.fbo.delete();
      }
    }
  };

  // ../extensions/src/terrain/terrain-effect.ts
  var TerrainEffect = class {
    constructor() {
      this.id = "terrain-effect";
      this.props = null;
      this.useInPicking = true;
      /** true if picking in the current pass */
      this.isPicking = false;
      /** true if should use in the current pass */
      this.isDrapingEnabled = false;
      /** One texture for each primitive terrain layer, into which the draped layers render */
      this.terrainCovers = /* @__PURE__ */ new Map();
    }
    setup({ device, deck }) {
      this.dummyHeightMap = device.createTexture({
        width: 1,
        height: 1,
        data: new Uint8Array([0, 0, 0, 0])
      });
      this.terrainPass = new TerrainPass(device, { id: "terrain" });
      this.terrainPickingPass = new TerrainPickingPass(device, { id: "terrain-picking" });
      if (HeightMapBuilder.isSupported(device)) {
        this.heightMap = new HeightMapBuilder(device);
      } else {
        log_default.warn("Terrain offset mode is not supported by this browser")();
      }
      deck._addDefaultShaderModule(terrainModule);
    }
    preRender(opts) {
      if (opts.pickZ) {
        this.isDrapingEnabled = false;
        return;
      }
      const { viewports } = opts;
      const isPicking = opts.pass.startsWith("picking");
      this.isPicking = isPicking;
      this.isDrapingEnabled = true;
      const viewport = viewports[0];
      const layers = (isPicking ? this.terrainPickingPass : this.terrainPass).getRenderableLayers(
        viewport,
        opts
      );
      const terrainLayers = layers.filter((l5) => l5.props.operation.includes("terrain"));
      if (terrainLayers.length === 0) {
        return;
      }
      if (!isPicking) {
        const offsetLayers = layers.filter((l5) => l5.state.terrainDrawMode === "offset");
        if (offsetLayers.length > 0) {
          this._updateHeightMap(terrainLayers, viewport, opts);
        }
      }
      const drapeLayers = layers.filter((l5) => l5.state.terrainDrawMode === "drape");
      this._updateTerrainCovers(terrainLayers, drapeLayers, viewport, opts);
    }
    getShaderModuleProps(layer, otherShaderModuleProps) {
      const { terrainDrawMode } = layer.state;
      return {
        terrain: {
          project: otherShaderModuleProps.project,
          isPicking: this.isPicking,
          heightMap: this.heightMap?.getRenderFramebuffer()?.colorAttachments[0].texture || null,
          heightMapBounds: this.heightMap?.bounds,
          dummyHeightMap: this.dummyHeightMap,
          terrainCover: this.isDrapingEnabled ? this.terrainCovers.get(layer.id) : null,
          useTerrainHeightMap: terrainDrawMode === "offset",
          terrainSkipRender: terrainDrawMode === "drape" || !layer.props.operation.includes("draw")
        }
      };
    }
    cleanup({ deck }) {
      if (this.dummyHeightMap) {
        this.dummyHeightMap.delete();
        this.dummyHeightMap = void 0;
      }
      if (this.heightMap) {
        this.heightMap.delete();
        this.heightMap = void 0;
      }
      for (const terrainCover of this.terrainCovers.values()) {
        terrainCover.delete();
      }
      this.terrainCovers.clear();
      deck._removeDefaultShaderModule(terrainModule);
    }
    _updateHeightMap(terrainLayers, viewport, opts) {
      if (!this.heightMap) {
        return;
      }
      const shouldUpdate = this.heightMap.shouldUpdate({ layers: terrainLayers, viewport });
      if (!shouldUpdate) {
        return;
      }
      this.terrainPass.renderHeightMap(this.heightMap, {
        ...opts,
        layers: terrainLayers,
        shaderModuleProps: {
          terrain: {
            heightMapBounds: this.heightMap.bounds,
            dummyHeightMap: this.dummyHeightMap,
            drawToTerrainHeightMap: true
          },
          project: {
            devicePixelRatio: 1
          }
        }
      });
    }
    _updateTerrainCovers(terrainLayers, drapeLayers, viewport, opts) {
      const layerNeedsRedraw = {};
      for (const layer of drapeLayers) {
        if (layer.state.terrainCoverNeedsRedraw) {
          layerNeedsRedraw[layer.id] = true;
          layer.state.terrainCoverNeedsRedraw = false;
        }
      }
      for (const terrainCover of this.terrainCovers.values()) {
        terrainCover.isDirty = terrainCover.isDirty || terrainCover.shouldUpdate({ layerNeedsRedraw });
      }
      for (const layer of terrainLayers) {
        this._updateTerrainCover(layer, drapeLayers, viewport, opts);
      }
      if (!this.isPicking) {
        this._pruneTerrainCovers();
      }
    }
    _updateTerrainCover(terrainLayer, drapeLayers, viewport, opts) {
      const renderPass = this.isPicking ? this.terrainPickingPass : this.terrainPass;
      let terrainCover = this.terrainCovers.get(terrainLayer.id);
      if (!terrainCover) {
        terrainCover = new TerrainCover(terrainLayer);
        this.terrainCovers.set(terrainLayer.id, terrainCover);
      }
      try {
        const isDirty = terrainCover.shouldUpdate({
          targetLayer: terrainLayer,
          viewport,
          layers: drapeLayers
        });
        if (this.isPicking || terrainCover.isDirty || isDirty) {
          renderPass.renderTerrainCover(terrainCover, {
            ...opts,
            layers: drapeLayers,
            shaderModuleProps: {
              terrain: {
                dummyHeightMap: this.dummyHeightMap,
                terrainSkipRender: false
              },
              project: {
                devicePixelRatio: 1
              }
            }
          });
          if (!this.isPicking) {
            terrainCover.isDirty = false;
          }
        }
      } catch (err) {
        terrainLayer.raiseError(err, `Error rendering terrain cover ${terrainCover.id}`);
      }
    }
    _pruneTerrainCovers() {
      const idsToRemove = [];
      for (const [id, terrainCover] of this.terrainCovers) {
        if (!terrainCover.isActive) {
          idsToRemove.push(id);
        }
      }
      for (const id of idsToRemove) {
        this.terrainCovers.delete(id);
      }
    }
  };

  // ../extensions/src/terrain/terrain-extension.ts
  var defaultProps40 = {
    terrainDrawMode: void 0
  };
  var TerrainExtension = class extends LayerExtension {
    getShaders() {
      return {
        modules: [terrainModule]
      };
    }
    initializeState() {
      this.context.deck?._addDefaultEffect(new TerrainEffect());
    }
    updateState(params) {
      const { props, oldProps } = params;
      if (this.state.terrainDrawMode && props.terrainDrawMode === oldProps.terrainDrawMode && // @ts-ignore `extruded` may not exist in props
      props.extruded === oldProps.extruded) {
        return;
      }
      let { terrainDrawMode } = props;
      if (!terrainDrawMode) {
        const is3d = this.props.extruded;
        const attributes = this.getAttributeManager()?.attributes;
        const hasAnchor = attributes && "instancePositions" in attributes;
        terrainDrawMode = is3d || hasAnchor ? "offset" : "drape";
      }
      this.setState({ terrainDrawMode });
    }
    onNeedsRedraw() {
      const state = this.state;
      if (state.terrainDrawMode === "drape") {
        state.terrainCoverNeedsRedraw = true;
      }
    }
  };
  TerrainExtension.defaultProps = defaultProps40;
  TerrainExtension.extensionName = "TerrainExtension";

  // ../../node_modules/@math.gl/polygon/dist/polygon-utils.js
  var DimIndex2 = {
    x: 0,
    y: 1,
    z: 2
  };
  function getPolygonSignedArea2(points, options = {}) {
    const { start = 0, end = points.length, plane = "xy" } = options;
    const dim = options.size || 2;
    let area2 = 0;
    const i0 = DimIndex2[plane[0]];
    const i1 = DimIndex2[plane[1]];
    for (let i7 = start, j4 = end - dim; i7 < end; i7 += dim) {
      area2 += (points[i7 + i0] - points[j4 + i0]) * (points[i7 + i1] + points[j4 + i1]);
      j4 = i7;
    }
    return area2 / 2;
  }

  // ../../node_modules/@math.gl/polygon/dist/earcut.js
  function earcut3(positions, holeIndices, dim = 2, areas, plane = "xy") {
    const hasHoles = holeIndices && holeIndices.length;
    const outerLen = hasHoles ? holeIndices[0] * dim : positions.length;
    let outerNode = linkedList(positions, 0, outerLen, dim, true, areas && areas[0], plane);
    const triangles = [];
    if (!outerNode || outerNode.next === outerNode.prev)
      return triangles;
    let invSize;
    let maxX;
    let maxY;
    let minX;
    let minY;
    let x4;
    let y5;
    if (hasHoles)
      outerNode = eliminateHoles(positions, holeIndices, outerNode, dim, areas, plane);
    if (positions.length > 80 * dim) {
      minX = maxX = positions[0];
      minY = maxY = positions[1];
      for (let i7 = dim; i7 < outerLen; i7 += dim) {
        x4 = positions[i7];
        y5 = positions[i7 + 1];
        if (x4 < minX)
          minX = x4;
        if (y5 < minY)
          minY = y5;
        if (x4 > maxX)
          maxX = x4;
        if (y5 > maxY)
          maxY = y5;
      }
      invSize = Math.max(maxX - minX, maxY - minY);
      invSize = invSize !== 0 ? 32767 / invSize : 0;
    }
    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);
    return triangles;
  }
  function linkedList(data, start, end, dim, clockwise, area2, plane) {
    let i7;
    let last;
    if (area2 === void 0) {
      area2 = getPolygonSignedArea2(data, { start, end, size: dim, plane });
    }
    let i0 = DimIndex2[plane[0]];
    let i1 = DimIndex2[plane[1]];
    if (clockwise === area2 < 0) {
      for (i7 = start; i7 < end; i7 += dim)
        last = insertNode(i7, data[i7 + i0], data[i7 + i1], last);
    } else {
      for (i7 = end - dim; i7 >= start; i7 -= dim)
        last = insertNode(i7, data[i7 + i0], data[i7 + i1], last);
    }
    if (last && equals16(last, last.next)) {
      removeNode(last);
      last = last.next;
    }
    return last;
  }
  function filterPoints(start, end) {
    if (!start)
      return start;
    if (!end)
      end = start;
    let p5 = start;
    let again;
    do {
      again = false;
      if (!p5.steiner && (equals16(p5, p5.next) || area(p5.prev, p5, p5.next) === 0)) {
        removeNode(p5);
        p5 = end = p5.prev;
        if (p5 === p5.next)
          break;
        again = true;
      } else {
        p5 = p5.next;
      }
    } while (again || p5 !== end);
    return end;
  }
  function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear)
      return;
    if (!pass && invSize)
      indexCurve(ear, minX, minY, invSize);
    let stop = ear;
    let prev;
    let next;
    while (ear.prev !== ear.next) {
      prev = ear.prev;
      next = ear.next;
      if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
        triangles.push(prev.i / dim | 0);
        triangles.push(ear.i / dim | 0);
        triangles.push(next.i / dim | 0);
        removeNode(ear);
        ear = next.next;
        stop = next.next;
        continue;
      }
      ear = next;
      if (ear === stop) {
        if (!pass) {
          earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
        } else if (pass === 1) {
          ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
          earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
        } else if (pass === 2) {
          splitEarcut(ear, triangles, dim, minX, minY, invSize);
        }
        break;
      }
    }
  }
  function isEar(ear) {
    const a6 = ear.prev;
    const b4 = ear;
    const c5 = ear.next;
    if (area(a6, b4, c5) >= 0)
      return false;
    const ax = a6.x;
    const bx = b4.x;
    const cx = c5.x;
    const ay = a6.y;
    const by = b4.y;
    const cy = c5.y;
    const x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx;
    const y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy;
    const x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx;
    const y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
    let p5 = c5.next;
    while (p5 !== a6) {
      if (p5.x >= x0 && p5.x <= x1 && p5.y >= y0 && p5.y <= y1 && pointInTriangle(ax, ay, bx, by, cx, cy, p5.x, p5.y) && area(p5.prev, p5, p5.next) >= 0)
        return false;
      p5 = p5.next;
    }
    return true;
  }
  function isEarHashed(ear, minX, minY, invSize) {
    const a6 = ear.prev;
    const b4 = ear;
    const c5 = ear.next;
    if (area(a6, b4, c5) >= 0)
      return false;
    const ax = a6.x;
    const bx = b4.x;
    const cx = c5.x;
    const ay = a6.y;
    const by = b4.y;
    const cy = c5.y;
    const x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx;
    const y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy;
    const x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx;
    const y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
    const minZ = zOrder(x0, y0, minX, minY, invSize);
    const maxZ = zOrder(x1, y1, minX, minY, invSize);
    let p5 = ear.prevZ;
    let n4 = ear.nextZ;
    while (p5 && p5.z >= minZ && n4 && n4.z <= maxZ) {
      if (p5.x >= x0 && p5.x <= x1 && p5.y >= y0 && p5.y <= y1 && p5 !== a6 && p5 !== c5 && pointInTriangle(ax, ay, bx, by, cx, cy, p5.x, p5.y) && area(p5.prev, p5, p5.next) >= 0)
        return false;
      p5 = p5.prevZ;
      if (n4.x >= x0 && n4.x <= x1 && n4.y >= y0 && n4.y <= y1 && n4 !== a6 && n4 !== c5 && pointInTriangle(ax, ay, bx, by, cx, cy, n4.x, n4.y) && area(n4.prev, n4, n4.next) >= 0)
        return false;
      n4 = n4.nextZ;
    }
    while (p5 && p5.z >= minZ) {
      if (p5.x >= x0 && p5.x <= x1 && p5.y >= y0 && p5.y <= y1 && p5 !== a6 && p5 !== c5 && pointInTriangle(ax, ay, bx, by, cx, cy, p5.x, p5.y) && area(p5.prev, p5, p5.next) >= 0)
        return false;
      p5 = p5.prevZ;
    }
    while (n4 && n4.z <= maxZ) {
      if (n4.x >= x0 && n4.x <= x1 && n4.y >= y0 && n4.y <= y1 && n4 !== a6 && n4 !== c5 && pointInTriangle(ax, ay, bx, by, cx, cy, n4.x, n4.y) && area(n4.prev, n4, n4.next) >= 0)
        return false;
      n4 = n4.nextZ;
    }
    return true;
  }
  function cureLocalIntersections(start, triangles, dim) {
    let p5 = start;
    do {
      const a6 = p5.prev;
      const b4 = p5.next.next;
      if (!equals16(a6, b4) && intersects(a6, p5, p5.next, b4) && locallyInside(a6, b4) && locallyInside(b4, a6)) {
        triangles.push(a6.i / dim | 0);
        triangles.push(p5.i / dim | 0);
        triangles.push(b4.i / dim | 0);
        removeNode(p5);
        removeNode(p5.next);
        p5 = start = b4;
      }
      p5 = p5.next;
    } while (p5 !== start);
    return filterPoints(p5);
  }
  function splitEarcut(start, triangles, dim, minX, minY, invSize) {
    let a6 = start;
    do {
      let b4 = a6.next.next;
      while (b4 !== a6.prev) {
        if (a6.i !== b4.i && isValidDiagonal(a6, b4)) {
          let c5 = splitPolygon(a6, b4);
          a6 = filterPoints(a6, a6.next);
          c5 = filterPoints(c5, c5.next);
          earcutLinked(a6, triangles, dim, minX, minY, invSize, 0);
          earcutLinked(c5, triangles, dim, minX, minY, invSize, 0);
          return;
        }
        b4 = b4.next;
      }
      a6 = a6.next;
    } while (a6 !== start);
  }
  function eliminateHoles(data, holeIndices, outerNode, dim, areas, plane) {
    const queue = [];
    let i7;
    let len9;
    let start;
    let end;
    let list;
    for (i7 = 0, len9 = holeIndices.length; i7 < len9; i7++) {
      start = holeIndices[i7] * dim;
      end = i7 < len9 - 1 ? holeIndices[i7 + 1] * dim : data.length;
      list = linkedList(data, start, end, dim, false, areas && areas[i7 + 1], plane);
      if (list === list.next)
        list.steiner = true;
      queue.push(getLeftmost(list));
    }
    queue.sort(compareX);
    for (i7 = 0; i7 < queue.length; i7++) {
      outerNode = eliminateHole(queue[i7], outerNode);
    }
    return outerNode;
  }
  function compareX(a6, b4) {
    return a6.x - b4.x;
  }
  function eliminateHole(hole, outerNode) {
    const bridge = findHoleBridge(hole, outerNode);
    if (!bridge) {
      return outerNode;
    }
    const bridgeReverse = splitPolygon(bridge, hole);
    filterPoints(bridgeReverse, bridgeReverse.next);
    return filterPoints(bridge, bridge.next);
  }
  function findHoleBridge(hole, outerNode) {
    let p5 = outerNode;
    const hx = hole.x;
    const hy = hole.y;
    let qx = -Infinity;
    let m3;
    do {
      if (hy <= p5.y && hy >= p5.next.y && p5.next.y !== p5.y) {
        const x4 = p5.x + (hy - p5.y) * (p5.next.x - p5.x) / (p5.next.y - p5.y);
        if (x4 <= hx && x4 > qx) {
          qx = x4;
          m3 = p5.x < p5.next.x ? p5 : p5.next;
          if (x4 === hx)
            return m3;
        }
      }
      p5 = p5.next;
    } while (p5 !== outerNode);
    if (!m3)
      return null;
    const stop = m3;
    const mx = m3.x;
    const my = m3.y;
    let tanMin = Infinity;
    let tan6;
    p5 = m3;
    do {
      if (hx >= p5.x && p5.x >= mx && hx !== p5.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p5.x, p5.y)) {
        tan6 = Math.abs(hy - p5.y) / (hx - p5.x);
        if (locallyInside(p5, hole) && (tan6 < tanMin || tan6 === tanMin && (p5.x > m3.x || p5.x === m3.x && sectorContainsSector(m3, p5)))) {
          m3 = p5;
          tanMin = tan6;
        }
      }
      p5 = p5.next;
    } while (p5 !== stop);
    return m3;
  }
  function sectorContainsSector(m3, p5) {
    return area(m3.prev, m3, p5.prev) < 0 && area(p5.next, m3, m3.next) < 0;
  }
  function indexCurve(start, minX, minY, invSize) {
    let p5 = start;
    do {
      if (p5.z === 0)
        p5.z = zOrder(p5.x, p5.y, minX, minY, invSize);
      p5.prevZ = p5.prev;
      p5.nextZ = p5.next;
      p5 = p5.next;
    } while (p5 !== start);
    p5.prevZ.nextZ = null;
    p5.prevZ = null;
    sortLinked(p5);
  }
  function sortLinked(list) {
    let e6;
    let i7;
    let inSize = 1;
    let numMerges;
    let p5;
    let pSize;
    let q3;
    let qSize;
    let tail;
    do {
      p5 = list;
      list = null;
      tail = null;
      numMerges = 0;
      while (p5) {
        numMerges++;
        q3 = p5;
        pSize = 0;
        for (i7 = 0; i7 < inSize; i7++) {
          pSize++;
          q3 = q3.nextZ;
          if (!q3)
            break;
        }
        qSize = inSize;
        while (pSize > 0 || qSize > 0 && q3) {
          if (pSize !== 0 && (qSize === 0 || !q3 || p5.z <= q3.z)) {
            e6 = p5;
            p5 = p5.nextZ;
            pSize--;
          } else {
            e6 = q3;
            q3 = q3.nextZ;
            qSize--;
          }
          if (tail)
            tail.nextZ = e6;
          else
            list = e6;
          e6.prevZ = tail;
          tail = e6;
        }
        p5 = q3;
      }
      tail.nextZ = null;
      inSize *= 2;
    } while (numMerges > 1);
    return list;
  }
  function zOrder(x4, y5, minX, minY, invSize) {
    x4 = (x4 - minX) * invSize | 0;
    y5 = (y5 - minY) * invSize | 0;
    x4 = (x4 | x4 << 8) & 16711935;
    x4 = (x4 | x4 << 4) & 252645135;
    x4 = (x4 | x4 << 2) & 858993459;
    x4 = (x4 | x4 << 1) & 1431655765;
    y5 = (y5 | y5 << 8) & 16711935;
    y5 = (y5 | y5 << 4) & 252645135;
    y5 = (y5 | y5 << 2) & 858993459;
    y5 = (y5 | y5 << 1) & 1431655765;
    return x4 | y5 << 1;
  }
  function getLeftmost(start) {
    let p5 = start;
    let leftmost = start;
    do {
      if (p5.x < leftmost.x || p5.x === leftmost.x && p5.y < leftmost.y)
        leftmost = p5;
      p5 = p5.next;
    } while (p5 !== start);
    return leftmost;
  }
  function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) && (ax - px) * (by - py) >= (bx - px) * (ay - py) && (bx - px) * (cy - py) >= (cx - px) * (by - py);
  }
  function isValidDiagonal(a6, b4) {
    return a6.next.i !== b4.i && a6.prev.i !== b4.i && !intersectsPolygon(a6, b4) && // dones't intersect other edges
    (locallyInside(a6, b4) && locallyInside(b4, a6) && middleInside(a6, b4) && // locally visible
    (area(a6.prev, a6, b4.prev) || area(a6, b4.prev, b4)) || // does not create opposite-facing sectors
    equals16(a6, b4) && area(a6.prev, a6, a6.next) > 0 && area(b4.prev, b4, b4.next) > 0);
  }
  function area(p5, q3, r5) {
    return (q3.y - p5.y) * (r5.x - q3.x) - (q3.x - p5.x) * (r5.y - q3.y);
  }
  function equals16(p1, p22) {
    return p1.x === p22.x && p1.y === p22.y;
  }
  function intersects(p1, q1, p22, q22) {
    const o1 = sign(area(p1, q1, p22));
    const o22 = sign(area(p1, q1, q22));
    const o32 = sign(area(p22, q22, p1));
    const o42 = sign(area(p22, q22, q1));
    if (o1 !== o22 && o32 !== o42)
      return true;
    if (o1 === 0 && onSegment(p1, p22, q1))
      return true;
    if (o22 === 0 && onSegment(p1, q22, q1))
      return true;
    if (o32 === 0 && onSegment(p22, p1, q22))
      return true;
    if (o42 === 0 && onSegment(p22, q1, q22))
      return true;
    return false;
  }
  function onSegment(p5, q3, r5) {
    return q3.x <= Math.max(p5.x, r5.x) && q3.x >= Math.min(p5.x, r5.x) && q3.y <= Math.max(p5.y, r5.y) && q3.y >= Math.min(p5.y, r5.y);
  }
  function sign(num) {
    return num > 0 ? 1 : num < 0 ? -1 : 0;
  }
  function intersectsPolygon(a6, b4) {
    let p5 = a6;
    do {
      if (p5.i !== a6.i && p5.next.i !== a6.i && p5.i !== b4.i && p5.next.i !== b4.i && intersects(p5, p5.next, a6, b4))
        return true;
      p5 = p5.next;
    } while (p5 !== a6);
    return false;
  }
  function locallyInside(a6, b4) {
    return area(a6.prev, a6, a6.next) < 0 ? area(a6, b4, a6.next) >= 0 && area(a6, a6.prev, b4) >= 0 : area(a6, b4, a6.prev) < 0 || area(a6, a6.next, b4) < 0;
  }
  function middleInside(a6, b4) {
    let p5 = a6;
    let inside = false;
    const px = (a6.x + b4.x) / 2;
    const py = (a6.y + b4.y) / 2;
    do {
      if (p5.y > py !== p5.next.y > py && p5.next.y !== p5.y && px < (p5.next.x - p5.x) * (py - p5.y) / (p5.next.y - p5.y) + p5.x)
        inside = !inside;
      p5 = p5.next;
    } while (p5 !== a6);
    return inside;
  }
  function splitPolygon(a6, b4) {
    const a22 = new Vertex(a6.i, a6.x, a6.y);
    const b22 = new Vertex(b4.i, b4.x, b4.y);
    const an = a6.next;
    const bp = b4.prev;
    a6.next = b4;
    b4.prev = a6;
    a22.next = an;
    an.prev = a22;
    b22.next = a22;
    a22.prev = b22;
    bp.next = b22;
    b22.prev = bp;
    return b22;
  }
  function insertNode(i7, x4, y5, last) {
    const p5 = new Vertex(i7, x4, y5);
    if (!last) {
      p5.prev = p5;
      p5.next = p5;
    } else {
      p5.next = last.next;
      p5.prev = last;
      last.next.prev = p5;
      last.next = p5;
    }
    return p5;
  }
  function removeNode(p5) {
    p5.next.prev = p5.prev;
    p5.prev.next = p5.next;
    if (p5.prevZ)
      p5.prevZ.nextZ = p5.nextZ;
    if (p5.nextZ)
      p5.nextZ.prevZ = p5.prevZ;
  }
  var Vertex = class {
    constructor(i7, x4, y5) {
      this.prev = null;
      this.next = null;
      this.z = 0;
      this.prevZ = null;
      this.nextZ = null;
      this.steiner = false;
      this.i = i7;
      this.x = x4;
      this.y = y5;
    }
  };

  // ../../node_modules/@loaders.gl/gis/dist/lib/binary-features/flat-geojson-to-binary.js
  function flatGeojsonToBinary(features, geometryInfo, options) {
    const propArrayTypes = extractNumericPropTypes(features);
    const numericPropKeys = Object.keys(propArrayTypes).filter((k4) => propArrayTypes[k4] !== Array);
    return fillArrays(features, {
      propArrayTypes,
      ...geometryInfo
    }, {
      numericPropKeys: options && options.numericPropKeys || numericPropKeys,
      PositionDataType: options ? options.PositionDataType : Float32Array,
      triangulate: options ? options.triangulate : true
    });
  }
  function extractNumericPropTypes(features) {
    const propArrayTypes = {};
    for (const feature of features) {
      if (feature.properties) {
        for (const key in feature.properties) {
          const val2 = feature.properties[key];
          propArrayTypes[key] = deduceArrayType(val2, propArrayTypes[key]);
        }
      }
    }
    return propArrayTypes;
  }
  function fillArrays(features, geometryInfo, options) {
    const { pointPositionsCount, pointFeaturesCount, linePositionsCount, linePathsCount, lineFeaturesCount, polygonPositionsCount, polygonObjectsCount, polygonRingsCount, polygonFeaturesCount, propArrayTypes, coordLength } = geometryInfo;
    const { numericPropKeys = [], PositionDataType = Float32Array, triangulate = true } = options;
    const hasGlobalId = features[0] && "id" in features[0];
    const GlobalFeatureIdsDataType = features.length > 65535 ? Uint32Array : Uint16Array;
    const points = {
      type: "Point",
      positions: new PositionDataType(pointPositionsCount * coordLength),
      globalFeatureIds: new GlobalFeatureIdsDataType(pointPositionsCount),
      featureIds: pointFeaturesCount > 65535 ? new Uint32Array(pointPositionsCount) : new Uint16Array(pointPositionsCount),
      numericProps: {},
      properties: [],
      fields: []
    };
    const lines = {
      type: "LineString",
      pathIndices: linePositionsCount > 65535 ? new Uint32Array(linePathsCount + 1) : new Uint16Array(linePathsCount + 1),
      positions: new PositionDataType(linePositionsCount * coordLength),
      globalFeatureIds: new GlobalFeatureIdsDataType(linePositionsCount),
      featureIds: lineFeaturesCount > 65535 ? new Uint32Array(linePositionsCount) : new Uint16Array(linePositionsCount),
      numericProps: {},
      properties: [],
      fields: []
    };
    const polygons = {
      type: "Polygon",
      polygonIndices: polygonPositionsCount > 65535 ? new Uint32Array(polygonObjectsCount + 1) : new Uint16Array(polygonObjectsCount + 1),
      primitivePolygonIndices: polygonPositionsCount > 65535 ? new Uint32Array(polygonRingsCount + 1) : new Uint16Array(polygonRingsCount + 1),
      positions: new PositionDataType(polygonPositionsCount * coordLength),
      globalFeatureIds: new GlobalFeatureIdsDataType(polygonPositionsCount),
      featureIds: polygonFeaturesCount > 65535 ? new Uint32Array(polygonPositionsCount) : new Uint16Array(polygonPositionsCount),
      numericProps: {},
      properties: [],
      fields: []
    };
    if (triangulate) {
      polygons.triangles = [];
    }
    for (const object of [points, lines, polygons]) {
      for (const propName of numericPropKeys) {
        const T4 = propArrayTypes[propName];
        object.numericProps[propName] = new T4(object.positions.length / coordLength);
      }
    }
    lines.pathIndices[linePathsCount] = linePositionsCount;
    polygons.polygonIndices[polygonObjectsCount] = polygonPositionsCount;
    polygons.primitivePolygonIndices[polygonRingsCount] = polygonPositionsCount;
    const indexMap = {
      pointPosition: 0,
      pointFeature: 0,
      linePosition: 0,
      linePath: 0,
      lineFeature: 0,
      polygonPosition: 0,
      polygonObject: 0,
      polygonRing: 0,
      polygonFeature: 0,
      feature: 0
    };
    for (const feature of features) {
      const geometry = feature.geometry;
      const properties = feature.properties || {};
      switch (geometry.type) {
        case "Point":
          handlePoint(geometry, points, indexMap, coordLength, properties);
          points.properties.push(keepStringProperties(properties, numericPropKeys));
          if (hasGlobalId) {
            points.fields.push({ id: feature.id });
          }
          indexMap.pointFeature++;
          break;
        case "LineString":
          handleLineString(geometry, lines, indexMap, coordLength, properties);
          lines.properties.push(keepStringProperties(properties, numericPropKeys));
          if (hasGlobalId) {
            lines.fields.push({ id: feature.id });
          }
          indexMap.lineFeature++;
          break;
        case "Polygon":
          handlePolygon(geometry, polygons, indexMap, coordLength, properties);
          polygons.properties.push(keepStringProperties(properties, numericPropKeys));
          if (hasGlobalId) {
            polygons.fields.push({ id: feature.id });
          }
          indexMap.polygonFeature++;
          break;
        default:
          throw new Error("Invalid geometry type");
      }
      indexMap.feature++;
    }
    return makeAccessorObjects(points, lines, polygons, coordLength);
  }
  function handlePoint(geometry, points, indexMap, coordLength, properties) {
    points.positions.set(geometry.data, indexMap.pointPosition * coordLength);
    const nPositions = geometry.data.length / coordLength;
    fillNumericProperties(points, properties, indexMap.pointPosition, nPositions);
    points.globalFeatureIds.fill(indexMap.feature, indexMap.pointPosition, indexMap.pointPosition + nPositions);
    points.featureIds.fill(indexMap.pointFeature, indexMap.pointPosition, indexMap.pointPosition + nPositions);
    indexMap.pointPosition += nPositions;
  }
  function handleLineString(geometry, lines, indexMap, coordLength, properties) {
    lines.positions.set(geometry.data, indexMap.linePosition * coordLength);
    const nPositions = geometry.data.length / coordLength;
    fillNumericProperties(lines, properties, indexMap.linePosition, nPositions);
    lines.globalFeatureIds.fill(indexMap.feature, indexMap.linePosition, indexMap.linePosition + nPositions);
    lines.featureIds.fill(indexMap.lineFeature, indexMap.linePosition, indexMap.linePosition + nPositions);
    for (let i7 = 0, il = geometry.indices.length; i7 < il; ++i7) {
      const start = geometry.indices[i7];
      const end = i7 === il - 1 ? geometry.data.length : geometry.indices[i7 + 1];
      lines.pathIndices[indexMap.linePath++] = indexMap.linePosition;
      indexMap.linePosition += (end - start) / coordLength;
    }
  }
  function handlePolygon(geometry, polygons, indexMap, coordLength, properties) {
    polygons.positions.set(geometry.data, indexMap.polygonPosition * coordLength);
    const nPositions = geometry.data.length / coordLength;
    fillNumericProperties(polygons, properties, indexMap.polygonPosition, nPositions);
    polygons.globalFeatureIds.fill(indexMap.feature, indexMap.polygonPosition, indexMap.polygonPosition + nPositions);
    polygons.featureIds.fill(indexMap.polygonFeature, indexMap.polygonPosition, indexMap.polygonPosition + nPositions);
    for (let l5 = 0, ll = geometry.indices.length; l5 < ll; ++l5) {
      const startPosition = indexMap.polygonPosition;
      polygons.polygonIndices[indexMap.polygonObject++] = startPosition;
      const areas = geometry.areas[l5];
      const indices = geometry.indices[l5];
      const nextIndices = geometry.indices[l5 + 1];
      for (let i7 = 0, il = indices.length; i7 < il; ++i7) {
        const start = indices[i7];
        const end = i7 === il - 1 ? (
          // last line, so either read to:
          nextIndices === void 0 ? geometry.data.length : nextIndices[0]
        ) : indices[i7 + 1];
        polygons.primitivePolygonIndices[indexMap.polygonRing++] = indexMap.polygonPosition;
        indexMap.polygonPosition += (end - start) / coordLength;
      }
      const endPosition = indexMap.polygonPosition;
      triangulatePolygon(polygons, areas, indices, { startPosition, endPosition, coordLength });
    }
  }
  function triangulatePolygon(polygons, areas, indices, { startPosition, endPosition, coordLength }) {
    if (!polygons.triangles) {
      return;
    }
    const start = startPosition * coordLength;
    const end = endPosition * coordLength;
    const polygonPositions = polygons.positions.subarray(start, end);
    const offset = indices[0];
    const holes = indices.slice(1).map((n4) => (n4 - offset) / coordLength);
    const triangles = earcut3(polygonPositions, holes, coordLength, areas);
    for (let t5 = 0, tl = triangles.length; t5 < tl; ++t5) {
      polygons.triangles.push(startPosition + triangles[t5]);
    }
  }
  function wrapProps(obj, size) {
    const returnObj = {};
    for (const key in obj) {
      returnObj[key] = { value: obj[key], size };
    }
    return returnObj;
  }
  function makeAccessorObjects(points, lines, polygons, coordLength) {
    const binaryFeatures = {
      shape: "binary-feature-collection",
      points: {
        ...points,
        positions: { value: points.positions, size: coordLength },
        globalFeatureIds: { value: points.globalFeatureIds, size: 1 },
        featureIds: { value: points.featureIds, size: 1 },
        numericProps: wrapProps(points.numericProps, 1)
      },
      lines: {
        ...lines,
        positions: { value: lines.positions, size: coordLength },
        pathIndices: { value: lines.pathIndices, size: 1 },
        globalFeatureIds: { value: lines.globalFeatureIds, size: 1 },
        featureIds: { value: lines.featureIds, size: 1 },
        numericProps: wrapProps(lines.numericProps, 1)
      },
      polygons: {
        ...polygons,
        positions: { value: polygons.positions, size: coordLength },
        polygonIndices: { value: polygons.polygonIndices, size: 1 },
        primitivePolygonIndices: { value: polygons.primitivePolygonIndices, size: 1 },
        globalFeatureIds: { value: polygons.globalFeatureIds, size: 1 },
        featureIds: { value: polygons.featureIds, size: 1 },
        numericProps: wrapProps(polygons.numericProps, 1)
      }
      // triangles not expected
    };
    if (binaryFeatures.polygons && polygons.triangles) {
      binaryFeatures.polygons.triangles = { value: new Uint32Array(polygons.triangles), size: 1 };
    }
    return binaryFeatures;
  }
  function fillNumericProperties(object, properties, index, length17) {
    for (const numericPropName in object.numericProps) {
      if (numericPropName in properties) {
        const value = properties[numericPropName];
        object.numericProps[numericPropName].fill(value, index, index + length17);
      }
    }
  }
  function keepStringProperties(properties, numericKeys) {
    const props = {};
    for (const key in properties) {
      if (!numericKeys.includes(key)) {
        props[key] = properties[key];
      }
    }
    return props;
  }
  function deduceArrayType(x4, constructor) {
    if (constructor === Array || !Number.isFinite(x4)) {
      return Array;
    }
    return constructor === Float64Array || Math.fround(x4) !== x4 ? Float64Array : Float32Array;
  }

  // ../../node_modules/@loaders.gl/gis/dist/lib/binary-features/binary-to-geojson.js
  function binaryToGeojson(data, options) {
    const globalFeatureId = options?.globalFeatureId;
    if (globalFeatureId !== void 0) {
      return getSingleFeature(data, globalFeatureId);
    }
    return parseFeatures(data, options?.type);
  }
  function getSingleFeature(data, globalFeatureId) {
    const dataArray = normalizeInput(data);
    for (const data2 of dataArray) {
      let lastIndex = 0;
      let lastValue = data2.featureIds.value[0];
      for (let i7 = 0; i7 < data2.featureIds.value.length; i7++) {
        const currValue = data2.featureIds.value[i7];
        if (currValue === lastValue) {
          continue;
        }
        if (globalFeatureId === data2.globalFeatureIds.value[lastIndex]) {
          return parseFeature(data2, lastIndex, i7);
        }
        lastIndex = i7;
        lastValue = currValue;
      }
      if (globalFeatureId === data2.globalFeatureIds.value[lastIndex]) {
        return parseFeature(data2, lastIndex, data2.featureIds.value.length);
      }
    }
    throw new Error(`featureId:${globalFeatureId} not found`);
  }
  function parseFeatures(data, type) {
    const dataArray = normalizeInput(data, type);
    return parseFeatureCollection(dataArray);
  }
  function binaryToGeometry(data, startIndex, endIndex) {
    switch (data.type) {
      case "Point":
        return pointToGeoJson(data, startIndex, endIndex);
      case "LineString":
        return lineStringToGeoJson(data, startIndex, endIndex);
      case "Polygon":
        return polygonToGeoJson(data, startIndex, endIndex);
      default:
        const unexpectedInput = data;
        throw new Error(`Unsupported geometry type: ${unexpectedInput?.type}`);
    }
  }
  function normalizeInput(data, type) {
    const features = [];
    if (data.points) {
      data.points.type = "Point";
      features.push(data.points);
    }
    if (data.lines) {
      data.lines.type = "LineString";
      features.push(data.lines);
    }
    if (data.polygons) {
      data.polygons.type = "Polygon";
      features.push(data.polygons);
    }
    return features;
  }
  function parseFeatureCollection(dataArray) {
    const features = [];
    for (const data of dataArray) {
      if (data.featureIds.value.length === 0) {
        continue;
      }
      let lastIndex = 0;
      let lastValue = data.featureIds.value[0];
      for (let i7 = 0; i7 < data.featureIds.value.length; i7++) {
        const currValue = data.featureIds.value[i7];
        if (currValue === lastValue) {
          continue;
        }
        features.push(parseFeature(data, lastIndex, i7));
        lastIndex = i7;
        lastValue = currValue;
      }
      features.push(parseFeature(data, lastIndex, data.featureIds.value.length));
    }
    return features;
  }
  function parseFeature(data, startIndex, endIndex) {
    const geometry = binaryToGeometry(data, startIndex, endIndex);
    const properties = parseProperties(data, startIndex, endIndex);
    const fields = parseFields(data, startIndex, endIndex);
    return { type: "Feature", geometry, properties, ...fields };
  }
  function parseFields(data, startIndex = 0, endIndex) {
    return data.fields && data.fields[data.featureIds.value[startIndex]];
  }
  function parseProperties(data, startIndex = 0, endIndex) {
    const properties = Object.assign({}, data.properties[data.featureIds.value[startIndex]]);
    for (const key in data.numericProps) {
      properties[key] = data.numericProps[key].value[startIndex];
    }
    return properties;
  }
  function polygonToGeoJson(data, startIndex = -Infinity, endIndex = Infinity) {
    const { positions } = data;
    const polygonIndices = data.polygonIndices.value.filter((x4) => x4 >= startIndex && x4 <= endIndex);
    const primitivePolygonIndices = data.primitivePolygonIndices.value.filter((x4) => x4 >= startIndex && x4 <= endIndex);
    const multi = polygonIndices.length > 2;
    if (!multi) {
      const coordinates2 = [];
      for (let i7 = 0; i7 < primitivePolygonIndices.length - 1; i7++) {
        const startRingIndex = primitivePolygonIndices[i7];
        const endRingIndex = primitivePolygonIndices[i7 + 1];
        const ringCoordinates = ringToGeoJson(positions, startRingIndex, endRingIndex);
        coordinates2.push(ringCoordinates);
      }
      return { type: "Polygon", coordinates: coordinates2 };
    }
    const coordinates = [];
    for (let i7 = 0; i7 < polygonIndices.length - 1; i7++) {
      const startPolygonIndex = polygonIndices[i7];
      const endPolygonIndex = polygonIndices[i7 + 1];
      const polygonCoordinates = polygonToGeoJson(data, startPolygonIndex, endPolygonIndex).coordinates;
      coordinates.push(polygonCoordinates);
    }
    return { type: "MultiPolygon", coordinates };
  }
  function lineStringToGeoJson(data, startIndex = -Infinity, endIndex = Infinity) {
    const { positions } = data;
    const pathIndices = data.pathIndices.value.filter((x4) => x4 >= startIndex && x4 <= endIndex);
    const multi = pathIndices.length > 2;
    if (!multi) {
      const coordinates2 = ringToGeoJson(positions, pathIndices[0], pathIndices[1]);
      return { type: "LineString", coordinates: coordinates2 };
    }
    const coordinates = [];
    for (let i7 = 0; i7 < pathIndices.length - 1; i7++) {
      const ringCoordinates = ringToGeoJson(positions, pathIndices[i7], pathIndices[i7 + 1]);
      coordinates.push(ringCoordinates);
    }
    return { type: "MultiLineString", coordinates };
  }
  function pointToGeoJson(data, startIndex, endIndex) {
    const { positions } = data;
    const coordinates = ringToGeoJson(positions, startIndex, endIndex);
    const multi = coordinates.length > 1;
    if (multi) {
      return { type: "MultiPoint", coordinates };
    }
    return { type: "Point", coordinates: coordinates[0] };
  }
  function ringToGeoJson(positions, startIndex, endIndex) {
    startIndex = startIndex || 0;
    endIndex = endIndex || positions.value.length / positions.size;
    const ringCoordinates = [];
    for (let j4 = startIndex; j4 < endIndex; j4++) {
      const coord = Array();
      for (let k4 = j4 * positions.size; k4 < (j4 + 1) * positions.size; k4++) {
        coord.push(Number(positions.value[k4]));
      }
      ringCoordinates.push(coord);
    }
    return ringCoordinates;
  }

  // ../../node_modules/@loaders.gl/mvt/dist/lib/parse-mvt.js
  var import_pbf = __toESM(require_pbf(), 1);

  // ../../node_modules/@loaders.gl/mvt/dist/helpers/mapbox-util-functions.js
  function classifyRings(rings) {
    const len9 = rings.length;
    if (len9 <= 1)
      return [rings];
    const polygons = [];
    let polygon;
    let ccw;
    for (let i7 = 0; i7 < len9; i7++) {
      const area2 = signedArea(rings[i7]);
      if (area2 === 0)
        continue;
      if (ccw === void 0)
        ccw = area2 < 0;
      if (ccw === area2 < 0) {
        if (polygon)
          polygons.push(polygon);
        polygon = [rings[i7]];
      } else if (polygon)
        polygon.push(rings[i7]);
    }
    if (polygon)
      polygons.push(polygon);
    return polygons;
  }
  function signedArea(ring) {
    let sum2 = 0;
    for (let i7 = 0, j4 = ring.length - 1, p1, p22; i7 < ring.length; j4 = i7++) {
      p1 = ring[i7];
      p22 = ring[j4];
      sum2 += (p22[0] - p1[0]) * (p1[1] + p22[1]);
    }
    return sum2;
  }
  function readFeature(tag, feature, pbf) {
    if (feature && pbf) {
      if (tag === 1)
        feature.id = pbf.readVarint();
      else if (tag === 2)
        readTag(pbf, feature);
      else if (tag === 3)
        feature.type = pbf.readVarint();
      else if (tag === 4)
        feature._geometry = pbf.pos;
    }
  }
  function readTag(pbf, feature) {
    const end = pbf.readVarint() + pbf.pos;
    while (pbf.pos < end) {
      const key = feature._keys[pbf.readVarint()];
      const value = feature._values[pbf.readVarint()];
      feature.properties[key] = value;
    }
  }

  // ../../node_modules/@loaders.gl/mvt/dist/lib/mapbox-vector-tile/vector-tile-feature.js
  var VectorTileFeature = class {
    properties;
    extent;
    type;
    id;
    _pbf;
    _geometry;
    _keys;
    _values;
    static get types() {
      return ["Unknown", "Point", "LineString", "Polygon"];
    }
    constructor(pbf, end, extent, keys, values) {
      this.properties = {};
      this.extent = extent;
      this.type = 0;
      this.id = null;
      this._pbf = pbf;
      this._geometry = -1;
      this._keys = keys;
      this._values = values;
      pbf.readFields(readFeature, this, end);
    }
    // eslint-disable-next-line complexity, max-statements
    loadGeometry() {
      const pbf = this._pbf;
      pbf.pos = this._geometry;
      const end = pbf.readVarint() + pbf.pos;
      let cmd2 = 1;
      let length17 = 0;
      let x4 = 0;
      let y5 = 0;
      const lines = [];
      let line;
      while (pbf.pos < end) {
        if (length17 <= 0) {
          const cmdLen2 = pbf.readVarint();
          cmd2 = cmdLen2 & 7;
          length17 = cmdLen2 >> 3;
        }
        length17--;
        if (cmd2 === 1 || cmd2 === 2) {
          x4 += pbf.readSVarint();
          y5 += pbf.readSVarint();
          if (cmd2 === 1) {
            if (line)
              lines.push(line);
            line = [];
          }
          if (line)
            line.push([x4, y5]);
        } else if (cmd2 === 7) {
          if (line) {
            line.push(line[0].slice());
          }
        } else {
          throw new Error(`unknown command ${cmd2}`);
        }
      }
      if (line)
        lines.push(line);
      return lines;
    }
    // eslint-disable-next-line max-statements
    bbox() {
      const pbf = this._pbf;
      pbf.pos = this._geometry;
      const end = pbf.readVarint() + pbf.pos;
      let cmd2 = 1;
      let length17 = 0;
      let x4 = 0;
      let y5 = 0;
      let x1 = Infinity;
      let x22 = -Infinity;
      let y1 = Infinity;
      let y22 = -Infinity;
      while (pbf.pos < end) {
        if (length17 <= 0) {
          const cmdLen2 = pbf.readVarint();
          cmd2 = cmdLen2 & 7;
          length17 = cmdLen2 >> 3;
        }
        length17--;
        if (cmd2 === 1 || cmd2 === 2) {
          x4 += pbf.readSVarint();
          y5 += pbf.readSVarint();
          if (x4 < x1)
            x1 = x4;
          if (x4 > x22)
            x22 = x4;
          if (y5 < y1)
            y1 = y5;
          if (y5 > y22)
            y22 = y5;
        } else if (cmd2 !== 7) {
          throw new Error(`unknown command ${cmd2}`);
        }
      }
      return [x1, y1, x22, y22];
    }
    _toGeoJSON(transform2) {
      let coords = this.loadGeometry();
      let type = VectorTileFeature.types[this.type];
      let i7;
      let j4;
      switch (this.type) {
        case 1:
          const points = [];
          for (i7 = 0; i7 < coords.length; i7++) {
            points[i7] = coords[i7][0];
          }
          coords = points;
          transform2(coords, this);
          break;
        case 2:
          for (i7 = 0; i7 < coords.length; i7++) {
            transform2(coords[i7], this);
          }
          break;
        case 3:
          coords = classifyRings(coords);
          for (i7 = 0; i7 < coords.length; i7++) {
            for (j4 = 0; j4 < coords[i7].length; j4++) {
              transform2(coords[i7][j4], this);
            }
          }
          break;
      }
      if (coords.length === 1) {
        coords = coords[0];
      } else {
        type = `Multi${type}`;
      }
      const result = {
        type: "Feature",
        geometry: {
          type,
          coordinates: coords
        },
        properties: this.properties
      };
      if (this.id !== null) {
        result.id = this.id;
      }
      return result;
    }
    toGeoJSON(options) {
      if (typeof options === "function") {
        return this._toGeoJSON(options);
      }
      const { x: x4, y: y5, z: z4 } = options;
      const size = this.extent * Math.pow(2, z4);
      const x0 = this.extent * x4;
      const y0 = this.extent * y5;
      function project2(line) {
        for (let j4 = 0; j4 < line.length; j4++) {
          const p5 = line[j4];
          p5[0] = (p5[0] + x0) * 360 / size - 180;
          const y22 = 180 - (p5[1] + y0) * 360 / size;
          p5[1] = 360 / Math.PI * Math.atan(Math.exp(y22 * Math.PI / 180)) - 90;
        }
      }
      return this._toGeoJSON(project2);
    }
  };

  // ../../node_modules/@loaders.gl/mvt/dist/lib/mapbox-vector-tile/vector-tile-layer.js
  var VectorTileLayer = class {
    version;
    name;
    extent;
    length;
    _pbf;
    _keys;
    _values;
    _features;
    constructor(pbf, end) {
      this.version = 1;
      this.name = "";
      this.extent = 4096;
      this.length = 0;
      this._pbf = pbf;
      this._keys = [];
      this._values = [];
      this._features = [];
      pbf.readFields(readLayer, this, end);
      this.length = this._features.length;
    }
    /**
     * return feature `i` from this layer as a `VectorTileFeature`
     * @param index
     * @returns feature
     */
    feature(i7) {
      if (i7 < 0 || i7 >= this._features.length) {
        throw new Error("feature index out of bounds");
      }
      this._pbf.pos = this._features[i7];
      const end = this._pbf.readVarint() + this._pbf.pos;
      return new VectorTileFeature(this._pbf, end, this.extent, this._keys, this._values);
    }
  };
  function readLayer(tag, layer, pbf) {
    if (layer && pbf) {
      if (tag === 15)
        layer.version = pbf.readVarint();
      else if (tag === 1)
        layer.name = pbf.readString();
      else if (tag === 5)
        layer.extent = pbf.readVarint();
      else if (tag === 2)
        layer._features.push(pbf.pos);
      else if (tag === 3)
        layer._keys.push(pbf.readString());
      else if (tag === 4)
        layer._values.push(readValueMessage(pbf));
    }
  }
  function readValueMessage(pbf) {
    let value = null;
    const end = pbf.readVarint() + pbf.pos;
    while (pbf.pos < end) {
      const tag = pbf.readVarint() >> 3;
      value = tag === 1 ? pbf.readString() : tag === 2 ? pbf.readFloat() : tag === 3 ? pbf.readDouble() : tag === 4 ? pbf.readVarint64() : tag === 5 ? pbf.readVarint() : tag === 6 ? pbf.readSVarint() : tag === 7 ? pbf.readBoolean() : null;
    }
    return value;
  }

  // ../../node_modules/@loaders.gl/mvt/dist/lib/mapbox-vector-tile/vector-tile.js
  var VectorTile = class {
    layers;
    constructor(pbf, end) {
      this.layers = pbf.readFields(readTile, {}, end);
    }
  };
  function readTile(tag, layers, pbf) {
    if (tag === 3) {
      if (pbf) {
        const layer = new VectorTileLayer(pbf, pbf.readVarint() + pbf.pos);
        if (layer.length && layers) {
          layers[layer.name] = layer;
        }
      }
    }
  }

  // ../../node_modules/@loaders.gl/mvt/dist/helpers/binary-util-functions.js
  function classifyRings2(geom) {
    const len9 = geom.indices.length;
    const type = "Polygon";
    if (len9 <= 1) {
      return {
        type,
        data: geom.data,
        areas: [[getPolygonSignedArea2(geom.data)]],
        indices: [geom.indices]
      };
    }
    const areas = [];
    const polygons = [];
    let ringAreas = [];
    let polygon = [];
    let ccw;
    let offset = 0;
    for (let endIndex, i7 = 0, startIndex; i7 < len9; i7++) {
      startIndex = geom.indices[i7] - offset;
      endIndex = geom.indices[i7 + 1] - offset || geom.data.length;
      const shape = geom.data.slice(startIndex, endIndex);
      const area2 = getPolygonSignedArea2(shape);
      if (area2 === 0) {
        const before = geom.data.slice(0, startIndex);
        const after = geom.data.slice(endIndex);
        geom.data = before.concat(after);
        offset += endIndex - startIndex;
        continue;
      }
      if (ccw === void 0)
        ccw = area2 < 0;
      if (ccw === area2 < 0) {
        if (polygon.length) {
          areas.push(ringAreas);
          polygons.push(polygon);
        }
        polygon = [startIndex];
        ringAreas = [area2];
      } else {
        ringAreas.push(area2);
        polygon.push(startIndex);
      }
    }
    if (ringAreas)
      areas.push(ringAreas);
    if (polygon.length)
      polygons.push(polygon);
    return { type, areas, indices: polygons, data: geom.data };
  }
  function project(data, x0, y0, size) {
    for (let j4 = 0, jl = data.length; j4 < jl; j4 += 2) {
      data[j4] = (data[j4] + x0) * 360 / size - 180;
      const y22 = 180 - (data[j4 + 1] + y0) * 360 / size;
      data[j4 + 1] = 360 / Math.PI * Math.atan(Math.exp(y22 * Math.PI / 180)) - 90;
    }
  }
  function readFeature2(tag, feature, pbf) {
    if (feature && pbf) {
      if (tag === 1)
        feature.id = pbf.readVarint();
      else if (tag === 2)
        readTag2(pbf, feature);
      else if (tag === 3)
        feature.type = pbf.readVarint();
      else if (tag === 4)
        feature._geometry = pbf.pos;
    }
  }
  function readTag2(pbf, feature) {
    const end = pbf.readVarint() + pbf.pos;
    while (pbf.pos < end) {
      const key = feature._keys[pbf.readVarint()];
      const value = feature._values[pbf.readVarint()];
      feature.properties[key] = value;
    }
  }

  // ../../node_modules/@loaders.gl/mvt/dist/lib/binary-vector-tile/vector-tile-feature.js
  var endPos;
  var cmd;
  var cmdLen;
  var length16;
  var x2;
  var y2;
  var i3;
  var BinaryVectorTileFeature = class {
    properties;
    extent;
    type;
    id;
    _pbf;
    _geometry;
    _keys;
    _values;
    _geometryInfo;
    // eslint-disable-next-line max-params
    constructor(pbf, end, extent, keys, values, geometryInfo) {
      this.properties = {};
      this.extent = extent;
      this.type = 0;
      this.id = null;
      this._pbf = pbf;
      this._geometry = -1;
      this._keys = keys;
      this._values = values;
      this._geometryInfo = geometryInfo;
      pbf.readFields(readFeature2, this, end);
    }
    // eslint-disable-next-line complexity, max-statements
    loadGeometry() {
      const pbf = this._pbf;
      pbf.pos = this._geometry;
      endPos = pbf.readVarint() + pbf.pos;
      cmd = 1;
      length16 = 0;
      x2 = 0;
      y2 = 0;
      i3 = 0;
      const indices = [];
      const data = [];
      while (pbf.pos < endPos) {
        if (length16 <= 0) {
          cmdLen = pbf.readVarint();
          cmd = cmdLen & 7;
          length16 = cmdLen >> 3;
        }
        length16--;
        if (cmd === 1 || cmd === 2) {
          x2 += pbf.readSVarint();
          y2 += pbf.readSVarint();
          if (cmd === 1) {
            indices.push(i3);
          }
          data.push(x2, y2);
          i3 += 2;
        } else if (cmd === 7) {
          if (i3 > 0) {
            const start = indices[indices.length - 1];
            data.push(data[start], data[start + 1]);
            i3 += 2;
          }
        } else {
          throw new Error(`unknown command ${cmd}`);
        }
      }
      return { data, indices };
    }
    /**
     *
     * @param transform
     * @returns result
     */
    _toBinaryCoordinates(transform2) {
      const geom = this.loadGeometry();
      let geometry;
      transform2(geom.data, this);
      const coordLength = 2;
      switch (this.type) {
        case 1:
          this._geometryInfo.pointFeaturesCount++;
          this._geometryInfo.pointPositionsCount += geom.indices.length;
          geometry = { type: "Point", ...geom };
          break;
        case 2:
          this._geometryInfo.lineFeaturesCount++;
          this._geometryInfo.linePathsCount += geom.indices.length;
          this._geometryInfo.linePositionsCount += geom.data.length / coordLength;
          geometry = { type: "LineString", ...geom };
          break;
        case 3:
          geometry = classifyRings2(geom);
          this._geometryInfo.polygonFeaturesCount++;
          this._geometryInfo.polygonObjectsCount += geometry.indices.length;
          for (const indices of geometry.indices) {
            this._geometryInfo.polygonRingsCount += indices.length;
          }
          this._geometryInfo.polygonPositionsCount += geometry.data.length / coordLength;
          break;
        default:
          throw new Error(`Invalid geometry type: ${this.type}`);
      }
      const result = { type: "Feature", geometry, properties: this.properties };
      if (this.id !== null) {
        result.id = this.id;
      }
      return result;
    }
    toBinaryCoordinates(options) {
      if (typeof options === "function") {
        return this._toBinaryCoordinates(options);
      }
      const { x: x4, y: y5, z: z4 } = options;
      const size = this.extent * Math.pow(2, z4);
      const x0 = this.extent * x4;
      const y0 = this.extent * y5;
      return this._toBinaryCoordinates((data) => project(data, x0, y0, size));
    }
  };

  // ../../node_modules/@loaders.gl/mvt/dist/lib/binary-vector-tile/vector-tile-layer.js
  var BinaryVectorTileLayer = class {
    version;
    name;
    extent;
    length;
    _pbf;
    _keys;
    _values;
    _features;
    constructor(pbf, end) {
      this.version = 1;
      this.name = "";
      this.extent = 4096;
      this.length = 0;
      this._pbf = pbf;
      this._keys = [];
      this._values = [];
      this._features = [];
      pbf.readFields(readLayer2, this, end);
      this.length = this._features.length;
    }
    /**
     * return feature `i` from this layer as a `BinaryVectorTileFeature`
     *
     * @param index
     * @param geometryInfo
     * @returns {BinaryVectorTileFeature}
     */
    feature(i7, geometryInfo) {
      if (i7 < 0 || i7 >= this._features.length) {
        throw new Error("feature index out of bounds");
      }
      this._pbf.pos = this._features[i7];
      const end = this._pbf.readVarint() + this._pbf.pos;
      return new BinaryVectorTileFeature(this._pbf, end, this.extent, this._keys, this._values, geometryInfo);
    }
  };
  function readLayer2(tag, layer, pbf) {
    if (layer && pbf) {
      if (tag === 15)
        layer.version = pbf.readVarint();
      else if (tag === 1)
        layer.name = pbf.readString();
      else if (tag === 5)
        layer.extent = pbf.readVarint();
      else if (tag === 2)
        layer._features.push(pbf.pos);
      else if (tag === 3)
        layer._keys.push(pbf.readString());
      else if (tag === 4)
        layer._values.push(readValueMessage2(pbf));
    }
  }
  function readValueMessage2(pbf) {
    let value = null;
    const end = pbf.readVarint() + pbf.pos;
    while (pbf.pos < end) {
      const tag = pbf.readVarint() >> 3;
      value = tag === 1 ? pbf.readString() : tag === 2 ? pbf.readFloat() : tag === 3 ? pbf.readDouble() : tag === 4 ? pbf.readVarint64() : tag === 5 ? pbf.readVarint() : tag === 6 ? pbf.readSVarint() : tag === 7 ? pbf.readBoolean() : null;
    }
    return value;
  }

  // ../../node_modules/@loaders.gl/mvt/dist/lib/binary-vector-tile/vector-tile.js
  var BinaryVectorTile = class {
    layers;
    constructor(pbf, end) {
      this.layers = pbf.readFields(readTile2, {}, end);
    }
  };
  function readTile2(tag, layers, pbf) {
    if (tag === 3) {
      if (pbf) {
        const layer = new BinaryVectorTileLayer(pbf, pbf.readVarint() + pbf.pos);
        if (layer.length && layers) {
          layers[layer.name] = layer;
        }
      }
    }
  }

  // ../../node_modules/@loaders.gl/mvt/dist/lib/parse-mvt.js
  function parseMVT(arrayBuffer2, options) {
    const mvtOptions = normalizeOptions2(options);
    const shape = options?.gis?.format || options?.mvt?.shape || options?.shape;
    switch (shape) {
      case "columnar-table":
        return { shape: "columnar-table", data: parseToBinary(arrayBuffer2, mvtOptions) };
      case "geojson-table": {
        const table = {
          shape: "geojson-table",
          type: "FeatureCollection",
          features: parseToGeojsonFeatures(arrayBuffer2, mvtOptions)
        };
        return table;
      }
      case "geojson":
        return parseToGeojsonFeatures(arrayBuffer2, mvtOptions);
      case "binary-geometry":
        return parseToBinary(arrayBuffer2, mvtOptions);
      case "binary":
        return parseToBinary(arrayBuffer2, mvtOptions);
      default:
        throw new Error(shape || "undefined shape");
    }
  }
  function parseToBinary(arrayBuffer2, options) {
    const [flatGeoJsonFeatures, geometryInfo] = parseToFlatGeoJson(arrayBuffer2, options);
    const binaryData = flatGeojsonToBinary(flatGeoJsonFeatures, geometryInfo);
    binaryData.byteLength = arrayBuffer2.byteLength;
    return binaryData;
  }
  function parseToFlatGeoJson(arrayBuffer2, options) {
    const features = [];
    const geometryInfo = {
      coordLength: 2,
      pointPositionsCount: 0,
      pointFeaturesCount: 0,
      linePositionsCount: 0,
      linePathsCount: 0,
      lineFeaturesCount: 0,
      polygonPositionsCount: 0,
      polygonObjectsCount: 0,
      polygonRingsCount: 0,
      polygonFeaturesCount: 0
    };
    if (arrayBuffer2.byteLength <= 0) {
      return [features, geometryInfo];
    }
    const tile = new BinaryVectorTile(new import_pbf.default(arrayBuffer2));
    const selectedLayers = options && Array.isArray(options.layers) ? options.layers : Object.keys(tile.layers);
    selectedLayers.forEach((layerName) => {
      const vectorTileLayer = tile.layers[layerName];
      if (!vectorTileLayer) {
        return;
      }
      for (let i7 = 0; i7 < vectorTileLayer.length; i7++) {
        const vectorTileFeature = vectorTileLayer.feature(i7, geometryInfo);
        const decodedFeature = getDecodedFeatureBinary(vectorTileFeature, options, layerName);
        features.push(decodedFeature);
      }
    });
    return [features, geometryInfo];
  }
  function parseToGeojsonFeatures(arrayBuffer2, options) {
    if (arrayBuffer2.byteLength <= 0) {
      return [];
    }
    const features = [];
    const tile = new VectorTile(new import_pbf.default(arrayBuffer2));
    const selectedLayers = Array.isArray(options.layers) ? options.layers : Object.keys(tile.layers);
    selectedLayers.forEach((layerName) => {
      const vectorTileLayer = tile.layers[layerName];
      if (!vectorTileLayer) {
        return;
      }
      for (let i7 = 0; i7 < vectorTileLayer.length; i7++) {
        const vectorTileFeature = vectorTileLayer.feature(i7);
        const decodedFeature = getDecodedFeature(vectorTileFeature, options, layerName);
        features.push(decodedFeature);
      }
    });
    return features;
  }
  function normalizeOptions2(options) {
    if (!options?.mvt) {
      throw new Error("mvt options required");
    }
    const wgs84Coordinates = options.mvt?.coordinates === "wgs84";
    const { tileIndex } = options.mvt;
    const hasTileIndex = tileIndex && Number.isFinite(tileIndex.x) && Number.isFinite(tileIndex.y) && Number.isFinite(tileIndex.z);
    if (wgs84Coordinates && !hasTileIndex) {
      throw new Error("MVT Loader: WGS84 coordinates need tileIndex property");
    }
    return options.mvt;
  }
  function getDecodedFeature(feature, options, layerName) {
    const decodedFeature = feature.toGeoJSON(
      // @ts-expect-error What is going on here?
      options.coordinates === "wgs84" ? options.tileIndex : transformToLocalCoordinates
    );
    if (options.layerProperty) {
      decodedFeature.properties[options.layerProperty] = layerName;
    }
    return decodedFeature;
  }
  function getDecodedFeatureBinary(feature, options, layerName) {
    const decodedFeature = feature.toBinaryCoordinates(
      // @ts-expect-error
      options.coordinates === "wgs84" ? options.tileIndex : transformToLocalCoordinatesBinary
    );
    if (options.layerProperty && decodedFeature.properties) {
      decodedFeature.properties[options.layerProperty] = layerName;
    }
    return decodedFeature;
  }
  function transformToLocalCoordinates(line, feature) {
    const { extent } = feature;
    for (let i7 = 0; i7 < line.length; i7++) {
      const p5 = line[i7];
      p5[0] /= extent;
      p5[1] /= extent;
    }
  }
  function transformToLocalCoordinatesBinary(data, feature) {
    const { extent } = feature;
    for (let i7 = 0, il = data.length; i7 < il; ++i7) {
      data[i7] /= extent;
    }
  }

  // ../../node_modules/@loaders.gl/mvt/dist/mvt-loader.js
  var VERSION13 = true ? "4.2.1" : "latest";
  var MVTWorkerLoader = {
    dataType: null,
    batchType: null,
    name: "Mapbox Vector Tile",
    id: "mvt",
    module: "mvt",
    version: VERSION13,
    // Note: ArcGIS uses '.pbf' extension and 'application/octet-stream'
    extensions: ["mvt", "pbf"],
    mimeTypes: [
      // https://www.iana.org/assignments/media-types/application/vnd.mapbox-vector-tile
      "application/vnd.mapbox-vector-tile",
      "application/x-protobuf"
      // 'application/octet-stream'
    ],
    worker: true,
    category: "geometry",
    options: {
      mvt: {
        shape: "geojson",
        coordinates: "local",
        layerProperty: "layerName",
        layers: void 0,
        tileIndex: null
      }
    }
  };
  var MVTLoader = {
    ...MVTWorkerLoader,
    parse: async (arrayBuffer2, options) => parseMVT(arrayBuffer2, options),
    parseSync: parseMVT,
    binary: true
  };

  // ../geo-layers/src/mvt-layer/coordinate-transform.ts
  var availableTransformations = {
    Point,
    MultiPoint,
    LineString,
    MultiLineString,
    Polygon: Polygon3,
    MultiPolygon
  };
  function Point([pointX, pointY], [nw, se2], viewport) {
    const x4 = lerp(nw[0], se2[0], pointX);
    const y5 = lerp(nw[1], se2[1], pointY);
    return viewport.unprojectFlat([x4, y5]);
  }
  function getPoints(geometry, bbox, viewport) {
    return geometry.map((g3) => Point(g3, bbox, viewport));
  }
  function MultiPoint(multiPoint, bbox, viewport) {
    return getPoints(multiPoint, bbox, viewport);
  }
  function LineString(line, bbox, viewport) {
    return getPoints(line, bbox, viewport);
  }
  function MultiLineString(multiLineString, bbox, viewport) {
    return multiLineString.map((lineString) => LineString(lineString, bbox, viewport));
  }
  function Polygon3(polygon, bbox, viewport) {
    return polygon.map((polygonRing) => getPoints(polygonRing, bbox, viewport));
  }
  function MultiPolygon(multiPolygon, bbox, viewport) {
    return multiPolygon.map((polygon) => Polygon3(polygon, bbox, viewport));
  }
  function transform(geometry, bbox, viewport) {
    const nw = viewport.projectFlat([bbox.west, bbox.north]);
    const se2 = viewport.projectFlat([bbox.east, bbox.south]);
    const projectedBbox = [nw, se2];
    return {
      ...geometry,
      coordinates: availableTransformations[geometry.type](
        geometry.coordinates,
        projectedBbox,
        viewport
      )
    };
  }

  // ../geo-layers/src/mvt-layer/find-index-binary.ts
  var GEOM_TYPES = ["points", "lines", "polygons"];
  function findIndexBinary(data, uniqueIdProperty, featureId, layerName) {
    for (const gt of GEOM_TYPES) {
      const index = data[gt] && findIndexByType(data[gt], uniqueIdProperty, featureId, layerName);
      if (index >= 0) {
        return index;
      }
    }
    return -1;
  }
  function findIndexByType(geomData, uniqueIdProperty, featureId, layerName) {
    const featureIds = geomData.featureIds.value;
    if (!featureIds.length) {
      return -1;
    }
    let startFeatureIndex = 0;
    let endFeatureIndex = featureIds[featureIds.length - 1] + 1;
    if (layerName) {
      const layerRange = getLayerRange(geomData, layerName);
      if (layerRange) {
        startFeatureIndex = layerRange[0];
        endFeatureIndex = layerRange[1] + 1;
      } else {
        return -1;
      }
    }
    let featureIndex = -1;
    if (uniqueIdProperty in geomData.numericProps) {
      const vertexIndex = geomData.numericProps[uniqueIdProperty].value.findIndex(
        (x4, i7) => x4 === featureId && featureIds[i7] >= startFeatureIndex && featureIds[i7] < endFeatureIndex
      );
      return vertexIndex >= 0 ? geomData.globalFeatureIds.value[vertexIndex] : -1;
    } else if (uniqueIdProperty) {
      featureIndex = findIndex(
        geomData.properties,
        (elem) => elem[uniqueIdProperty] === featureId,
        startFeatureIndex,
        endFeatureIndex
      );
    } else if (geomData.fields) {
      featureIndex = findIndex(
        geomData.fields,
        (elem) => elem.id === featureId,
        startFeatureIndex,
        endFeatureIndex
      );
    }
    return featureIndex >= 0 ? getGlobalFeatureId(geomData, featureIndex) : -1;
  }
  function getLayerRange(geomData, layerName) {
    if (!geomData.__layers) {
      const layerNames = {};
      const { properties } = geomData;
      for (let i7 = 0; i7 < properties.length; i7++) {
        const { layerName: key } = properties[i7];
        if (!key) {
        } else if (layerNames[key]) {
          layerNames[key][1] = i7;
        } else {
          layerNames[key] = [i7, i7];
        }
      }
      geomData.__layers = layerNames;
    }
    return geomData.__layers[layerName];
  }
  function getGlobalFeatureId(geomData, featureIndex) {
    if (!geomData.__ids) {
      const result = [];
      const featureIds = geomData.featureIds.value;
      const globalFeatureIds = geomData.globalFeatureIds.value;
      for (let i7 = 0; i7 < featureIds.length; i7++) {
        result[featureIds[i7]] = globalFeatureIds[i7];
      }
      geomData.__ids = result;
    }
    return geomData.__ids[featureIndex];
  }
  function findIndex(array, predicate, startIndex, endIndex) {
    for (let i7 = startIndex; i7 < endIndex; i7++) {
      if (predicate(array[i7], i7)) {
        return i7;
      }
    }
    return -1;
  }

  // ../geo-layers/src/mvt-layer/mvt-layer.ts
  var WORLD_SIZE = 512;
  var defaultProps41 = {
    ...GeoJsonLayer.defaultProps,
    data: urlType,
    onDataLoad: { type: "function", value: null, optional: true, compare: false },
    uniqueIdProperty: "",
    highlightedFeatureId: null,
    loaders: [MVTWorkerLoader],
    binary: true
  };
  var MVTLayer = class extends TileLayer {
    initializeState() {
      super.initializeState();
      const binary = this.context.viewport.resolution !== void 0 ? false : this.props.binary;
      this.setState({
        binary,
        data: null,
        tileJSON: null,
        hoveredFeatureId: null,
        hoveredFeatureLayerName: null
      });
    }
    get isLoaded() {
      return Boolean(this.state?.data && super.isLoaded);
    }
    updateState({ props, oldProps, context, changeFlags }) {
      if (changeFlags.dataChanged) {
        this._updateTileData();
      }
      if (this.state?.data) {
        super.updateState({ props, oldProps, context, changeFlags });
        this._setWGS84PropertyForTiles();
      }
      const { highlightColor } = props;
      if (highlightColor !== oldProps.highlightColor && Array.isArray(highlightColor)) {
        this.setState({ highlightColor });
      }
    }
    /* eslint-disable complexity */
    async _updateTileData() {
      let data = this.props.data;
      let tileJSON = null;
      if (typeof data === "string" && !isURLTemplate(data)) {
        const { onDataLoad, fetch: fetch2 } = this.props;
        this.setState({ data: null, tileJSON: null });
        try {
          tileJSON = await fetch2(data, { propName: "data", layer: this, loaders: [] });
        } catch (error) {
          this.raiseError(error, "loading TileJSON");
          data = null;
        }
        if (onDataLoad) {
          onDataLoad(tileJSON, { propName: "data", layer: this });
        }
      } else if (data && typeof data === "object" && "tilejson" in data) {
        tileJSON = data;
      }
      if (tileJSON) {
        data = tileJSON.tiles;
      }
      this.setState({ data, tileJSON });
    }
    _getTilesetOptions() {
      const opts = super._getTilesetOptions();
      const tileJSON = this.state.tileJSON;
      const { minZoom, maxZoom } = this.props;
      if (tileJSON) {
        if (Number.isFinite(tileJSON.minzoom) && tileJSON.minzoom > minZoom) {
          opts.minZoom = tileJSON.minzoom;
        }
        if (Number.isFinite(tileJSON.maxzoom) && (!Number.isFinite(maxZoom) || tileJSON.maxzoom < maxZoom)) {
          opts.maxZoom = tileJSON.maxzoom;
        }
      }
      return opts;
    }
    /* eslint-disable complexity */
    renderLayers() {
      if (!this.state?.data)
        return null;
      return super.renderLayers();
    }
    getTileData(loadProps) {
      const { data, binary } = this.state;
      const { index, signal } = loadProps;
      const url = getURLFromTemplate(data, loadProps);
      if (!url) {
        return Promise.reject("Invalid URL");
      }
      let loadOptions = this.getLoadOptions();
      const { fetch: fetch2 } = this.props;
      loadOptions = {
        ...loadOptions,
        mimeType: "application/x-protobuf",
        mvt: {
          ...loadOptions?.mvt,
          coordinates: this.context.viewport.resolution ? "wgs84" : "local",
          tileIndex: index
          // Local worker debug
          // workerUrl: `modules/mvt/dist/mvt-loader.worker.js`
          // Set worker to null to skip web workers
          // workerUrl: null
        },
        gis: binary ? { format: "binary" } : {}
      };
      return fetch2(url, { propName: "data", layer: this, loadOptions, signal });
    }
    renderSubLayers(props) {
      const { x: x4, y: y5, z: z4 } = props.tile.index;
      const worldScale = Math.pow(2, z4);
      const xScale = WORLD_SIZE / worldScale;
      const yScale = -xScale;
      const xOffset = WORLD_SIZE * x4 / worldScale;
      const yOffset = WORLD_SIZE * (1 - y5 / worldScale);
      const modelMatrix2 = new Matrix4().scale([xScale, yScale, 1]);
      props.autoHighlight = false;
      if (!this.context.viewport.resolution) {
        props.modelMatrix = modelMatrix2;
        props.coordinateOrigin = [xOffset, yOffset, 0];
        props.coordinateSystem = COORDINATE_SYSTEM.CARTESIAN;
        props.extensions = [...props.extensions || [], new ClipExtension()];
      }
      const subLayers = super.renderSubLayers(props);
      if (this.state.binary && !(subLayers instanceof GeoJsonLayer)) {
        log_default.warn("renderSubLayers() must return GeoJsonLayer when using binary:true")();
      }
      return subLayers;
    }
    _updateAutoHighlight(info) {
      const { uniqueIdProperty } = this.props;
      const { hoveredFeatureId, hoveredFeatureLayerName } = this.state;
      const hoveredFeature = info.object;
      let newHoveredFeatureId = null;
      let newHoveredFeatureLayerName = null;
      if (hoveredFeature) {
        newHoveredFeatureId = getFeatureUniqueId(hoveredFeature, uniqueIdProperty);
        newHoveredFeatureLayerName = getFeatureLayerName(hoveredFeature);
      }
      let { highlightColor } = this.props;
      if (typeof highlightColor === "function") {
        highlightColor = highlightColor(info);
      }
      if (hoveredFeatureId !== newHoveredFeatureId || hoveredFeatureLayerName !== newHoveredFeatureLayerName) {
        this.setState({
          highlightColor,
          hoveredFeatureId: newHoveredFeatureId,
          hoveredFeatureLayerName: newHoveredFeatureLayerName
        });
      }
    }
    _isWGS84() {
      return Boolean(this.context.viewport.resolution);
    }
    getPickingInfo(params) {
      const info = super.getPickingInfo(params);
      if (this.state.binary && info.index !== -1) {
        const { data } = params.sourceLayer.props;
        info.object = binaryToGeojson(data, {
          globalFeatureId: info.index
        });
      }
      if (info.object && !this._isWGS84()) {
        info.object = transformTileCoordsToWGS84(
          info.object,
          info.tile.bbox,
          // eslint-disable-line
          this.context.viewport
        );
      }
      return info;
    }
    getSubLayerPropsByTile(tile) {
      return {
        highlightedObjectIndex: this.getHighlightedObjectIndex(tile),
        highlightColor: this.state.highlightColor
      };
    }
    getHighlightedObjectIndex(tile) {
      const { hoveredFeatureId, hoveredFeatureLayerName, binary } = this.state;
      const { uniqueIdProperty, highlightedFeatureId } = this.props;
      const data = tile.content;
      const isHighlighted = isFeatureIdDefined(highlightedFeatureId);
      const isFeatureIdPresent = isFeatureIdDefined(hoveredFeatureId) || isHighlighted;
      if (!isFeatureIdPresent) {
        return -1;
      }
      const featureIdToHighlight = isHighlighted ? highlightedFeatureId : hoveredFeatureId;
      if (Array.isArray(data)) {
        return data.findIndex((feature) => {
          const isMatchingId = getFeatureUniqueId(feature, uniqueIdProperty) === featureIdToHighlight;
          const isMatchingLayer = isHighlighted || getFeatureLayerName(feature) === hoveredFeatureLayerName;
          return isMatchingId && isMatchingLayer;
        });
      } else if (data && binary) {
        return findIndexBinary(
          data,
          uniqueIdProperty,
          featureIdToHighlight,
          isHighlighted ? "" : hoveredFeatureLayerName
        );
      }
      return -1;
    }
    _pickObjects(maxObjects) {
      const { deck, viewport } = this.context;
      const width = viewport.width;
      const height = viewport.height;
      const x4 = viewport.x;
      const y5 = viewport.y;
      const layerIds = [this.id];
      return deck.pickObjects({ x: x4, y: y5, width, height, layerIds, maxObjects });
    }
    /** Get the rendered features in the current viewport. */
    getRenderedFeatures(maxFeatures = null) {
      const features = this._pickObjects(maxFeatures);
      const featureCache = /* @__PURE__ */ new Set();
      const renderedFeatures = [];
      for (const f6 of features) {
        const featureId = getFeatureUniqueId(f6.object, this.props.uniqueIdProperty);
        if (featureId === void 0) {
          renderedFeatures.push(f6.object);
        } else if (!featureCache.has(featureId)) {
          featureCache.add(featureId);
          renderedFeatures.push(f6.object);
        }
      }
      return renderedFeatures;
    }
    _setWGS84PropertyForTiles() {
      const propName = "dataInWGS84";
      const tileset = this.state.tileset;
      tileset.selectedTiles.forEach((tile) => {
        if (!tile.hasOwnProperty(propName)) {
          Object.defineProperty(tile, propName, {
            get: () => {
              if (!tile.content) {
                return null;
              }
              if (this.state.binary && Array.isArray(tile.content) && !tile.content.length) {
                return [];
              }
              const { bbox } = tile;
              if (tile._contentWGS84 === void 0 && isGeoBoundingBox(bbox)) {
                const content = this.state.binary ? binaryToGeojson(tile.content) : tile.content;
                tile._contentWGS84 = content.map(
                  (feature) => transformTileCoordsToWGS84(feature, bbox, this.context.viewport)
                );
              }
              return tile._contentWGS84;
            }
          });
        }
      });
    }
  };
  MVTLayer.layerName = "MVTLayer";
  MVTLayer.defaultProps = defaultProps41;
  function getFeatureUniqueId(feature, uniqueIdProperty) {
    if (feature.properties && uniqueIdProperty) {
      return feature.properties[uniqueIdProperty];
    }
    if ("id" in feature) {
      return feature.id;
    }
    return void 0;
  }
  function getFeatureLayerName(feature) {
    return feature.properties?.layerName || null;
  }
  function isFeatureIdDefined(value) {
    return value !== void 0 && value !== null && value !== "";
  }
  function transformTileCoordsToWGS84(object, bbox, viewport) {
    const feature = {
      ...object,
      geometry: {
        type: object.geometry.type
      }
    };
    Object.defineProperty(feature.geometry, "coordinates", {
      get: () => {
        const wgs84Geom = transform(object.geometry, bbox, viewport);
        return wgs84Geom.coordinates;
      }
    });
    return feature;
  }

  // ../geo-layers/src/geohash-layer/geohash-utils.ts
  var BASE32_CODES = "0123456789bcdefghjkmnpqrstuvwxyz";
  var BASE32_CODES_DICT = {};
  for (let i7 = 0; i7 < BASE32_CODES.length; i7++) {
    BASE32_CODES_DICT[BASE32_CODES.charAt(i7)] = i7;
  }
  var MIN_LAT = -90;
  var MAX_LAT = 90;
  var MIN_LON = -180;
  var MAX_LON = 180;
  function getGeohashBounds(geohash) {
    let isLon = true;
    let maxLat = MAX_LAT;
    let minLat = MIN_LAT;
    let maxLon = MAX_LON;
    let minLon = MIN_LON;
    let mid;
    let hashValue = 0;
    for (let i7 = 0, l5 = geohash.length; i7 < l5; i7++) {
      const code = geohash[i7].toLowerCase();
      hashValue = BASE32_CODES_DICT[code];
      for (let bits = 4; bits >= 0; bits--) {
        const bit = hashValue >> bits & 1;
        if (isLon) {
          mid = (maxLon + minLon) / 2;
          if (bit === 1) {
            minLon = mid;
          } else {
            maxLon = mid;
          }
        } else {
          mid = (maxLat + minLat) / 2;
          if (bit === 1) {
            minLat = mid;
          } else {
            maxLat = mid;
          }
        }
        isLon = !isLon;
      }
    }
    return [minLat, minLon, maxLat, maxLon];
  }
  function getGeohashPolygon(geohash) {
    const [s5, w5, n4, e6] = getGeohashBounds(geohash);
    return [e6, n4, e6, s5, w5, s5, w5, n4, e6, n4];
  }

  // ../geo-layers/src/geohash-layer/geohash-layer.ts
  var defaultProps42 = {
    getGeohash: { type: "accessor", value: (d5) => d5.geohash }
  };
  var GeohashLayer = class extends GeoCellLayer {
    indexToBounds() {
      const { data, getGeohash } = this.props;
      return {
        data,
        _normalize: false,
        positionFormat: "XY",
        getPolygon: (x4, objectInfo) => getGeohashPolygon(getGeohash(x4, objectInfo))
      };
    }
  };
  GeohashLayer.layerName = "GeohashLayer";
  GeohashLayer.defaultProps = defaultProps42;

  // ../core/src/scripting/lumagl.ts
  var lumagl_exports = {};
  __export(lumagl_exports, {
    Buffer: () => Buffer2,
    BufferTransform: () => BufferTransform,
    CubeGeometry: () => CubeGeometry,
    Device: () => Device,
    Framebuffer: () => Framebuffer,
    Geometry: () => Geometry,
    GroupNode: () => GroupNode,
    Model: () => Model,
    ModelNode: () => ModelNode,
    ScenegraphNode: () => ScenegraphNode,
    SphereGeometry: () => SphereGeometry,
    Texture: () => Texture,
    TextureTransform: () => TextureTransform,
    attachDevice: () => attachDevice,
    createDevice: () => createDevice,
    enforceWebGL2: () => enforceWebGL22,
    getSupportedAdapters: () => getSupportedAdapters,
    setDefaultDeviceProps: () => setDefaultDeviceProps,
    stats: () => stats
  });
  init_dist4();
  init_dist4();
  var {
    stats,
    getSupportedAdapters,
    setDefaultDeviceProps,
    attachDevice,
    createDevice,
    enforceWebGL2: enforceWebGL22
  } = luma;

  // ../core/src/scripting/loadersgl.ts
  var loadersgl_exports = {};
  __export(loadersgl_exports, {
    fetchFile: () => fetchFile,
    load: () => load,
    parse: () => parse,
    registerLoaders: () => registerLoaders
  });

  // ../core/src/scripting/map-wrapper.ts
  var MapWrapper = class {
    constructor(props) {
      this.map = null;
      this.width = 0;
      this.height = 0;
      this.props = { ...props };
      this._initialize(this.props);
    }
    finalize() {
      this.map?.remove();
      this.map = null;
    }
    setProps(props) {
      const oldProps = this.props;
      const newProps = { ...this.props, ...props };
      this.props = newProps;
      if (!this.map) {
        return;
      }
      const needsRedraw = this._update(oldProps, newProps);
      if (needsRedraw) {
        this.redraw();
      }
    }
    // Force redraw the map now. Typically resize() and jumpTo() is reflected in the next
    // render cycle, which is managed by Mapbox's animation loop.
    // This removes the synchronization issue caused by requestAnimationFrame.
    redraw() {
      const map6 = this.map;
      if (map6.style) {
        if (map6._frame) {
          map6._frame.cancel();
          map6._frame = null;
        }
        map6._render();
      }
    }
    // External apps can access map this way
    getMap() {
      return this.map;
    }
    _initialize(props) {
      const { mapLib, container } = props;
      mapLib.accessToken = props.mapboxApiAccessToken || "";
      this.map = new props.mapLib.Map({
        container,
        maxZoom: 24,
        ...props.mapOptions,
        ...viewStateToMapboxProps(props.viewState),
        style: props.mapStyle,
        interactive: false,
        trackResize: false
      });
      Object.defineProperty(container, "offsetWidth", { get: () => this.width });
      Object.defineProperty(container, "clientWidth", { get: () => this.width });
      Object.defineProperty(container, "offsetHeight", {
        get: () => this.height
      });
      Object.defineProperty(container, "clientHeight", {
        get: () => this.height
      });
      this.map.resize();
    }
    _update(oldProps, newProps) {
      const styleChanged = oldProps.mapStyle !== newProps.mapStyle;
      if (styleChanged) {
        this.map.setStyle(newProps.mapStyle);
      }
      const sizeChanged = oldProps.width !== newProps.width || oldProps.height !== newProps.height;
      if (sizeChanged) {
        this.width = newProps.width;
        this.height = newProps.height;
        this.map.resize();
      }
      const oldViewState = oldProps.viewState;
      const newViewState = newProps.viewState;
      const viewportChanged = newViewState.latitude !== oldViewState.latitude || newViewState.longitude !== oldViewState.longitude || newViewState.zoom !== oldViewState.zoom || newViewState.pitch !== oldViewState.pitch || newViewState.bearing !== oldViewState.bearing;
      if (viewportChanged) {
        this.map.jumpTo(viewStateToMapboxProps(newViewState));
      }
      return sizeChanged || viewportChanged;
    }
  };
  function viewStateToMapboxProps(viewState) {
    return {
      center: [viewState.longitude, viewState.latitude],
      zoom: viewState.zoom,
      bearing: viewState.bearing ?? 0,
      pitch: viewState.pitch ?? 0
    };
  }

  // ../core/src/scripting/deckgl.ts
  var CANVAS_STYLE = {
    position: "absolute",
    left: 0,
    top: 0,
    width: "100%",
    height: "100%"
  };
  function createCanvas(props) {
    let { container = document.body } = props;
    if (typeof container === "string") {
      container = document.getElementById(container);
    }
    if (!container) {
      throw Error("Deck: container not found");
    }
    const containerStyle = window.getComputedStyle(container);
    if (containerStyle.position === "static") {
      container.style.position = "relative";
    }
    const mapCanvas = document.createElement("div");
    container.appendChild(mapCanvas);
    Object.assign(mapCanvas.style, CANVAS_STYLE);
    const deckCanvas = document.createElement("canvas");
    container.appendChild(deckCanvas);
    Object.assign(deckCanvas.style, CANVAS_STYLE);
    return { container, mapCanvas, deckCanvas };
  }
  var DeckGL = class extends Deck {
    constructor(props) {
      if (typeof document === "undefined") {
        throw Error("Deck can only be used in the browser");
      }
      const { mapCanvas, deckCanvas } = createCanvas(props);
      const viewState = props.viewState || props.initialViewState;
      const isMap = Number.isFinite(viewState && viewState.latitude);
      const { map: map6 = globalThis.mapboxgl || globalThis.maplibregl } = props;
      super({ canvas: deckCanvas, ...props });
      if (map6 && map6.Map) {
        this._map = isMap && new MapWrapper({
          ...props,
          width: 0,
          height: 0,
          viewState,
          container: mapCanvas,
          mapLib: map6
        });
      } else {
        this._map = map6;
      }
    }
    getMapboxMap() {
      return this._map && this._map.getMap();
    }
    finalize() {
      if (this._map) {
        this._map.finalize();
      }
      super.finalize();
    }
    setProps(props) {
      if ("mapStyle" in props && this._map) {
        this._map.setProps({ mapStyle: props.mapStyle });
      }
      super.setProps(props);
    }
    _drawLayers(redrawReason, options) {
      if (this._map) {
        const viewport = this.getViewports()[0];
        if (viewport) {
          this._map.setProps({
            width: viewport.width,
            height: viewport.height,
            viewState: viewport
          });
        }
      }
      super._drawLayers(redrawReason, options);
    }
  };

  // ../core/bundle/index.ts
  globalThis.luma = globalThis.luma || {};
  globalThis.loaders = globalThis.loaders || {};
  Object.assign(globalThis.luma, lumagl_exports);
  Object.assign(globalThis.loaders, loadersgl_exports);

  // ../aggregation-layers/src/common/aggregator/cpu-aggregator/sort-bins.ts
  function sortBins({
    pointCount,
    getBinId
  }) {
    const binsById = /* @__PURE__ */ new Map();
    for (let i7 = 0; i7 < pointCount; i7++) {
      const id = getBinId(i7);
      if (id === null) {
        continue;
      }
      let bin = binsById.get(String(id));
      if (bin) {
        bin.points.push(i7);
      } else {
        bin = {
          id,
          index: binsById.size,
          points: [i7]
        };
        binsById.set(String(id), bin);
      }
    }
    return Array.from(binsById.values());
  }
  function packBinIds({
    bins,
    dimensions,
    target: target2
  }) {
    const targetLength = bins.length * dimensions;
    if (!target2 || target2.length < targetLength) {
      target2 = new Float32Array(targetLength);
    }
    for (let i7 = 0; i7 < bins.length; i7++) {
      const { id } = bins[i7];
      if (Array.isArray(id)) {
        target2.set(id, i7 * dimensions);
      } else {
        target2[i7] = id;
      }
    }
    return target2;
  }

  // ../aggregation-layers/src/common/aggregator/cpu-aggregator/aggregate.ts
  var count2 = (pointIndices) => {
    return pointIndices.length;
  };
  var sum = (pointIndices, getValue2) => {
    let result = 0;
    for (const i7 of pointIndices) {
      result += getValue2(i7);
    }
    return result;
  };
  var mean = (pointIndices, getValue2) => {
    if (pointIndices.length === 0) {
      return NaN;
    }
    return sum(pointIndices, getValue2) / pointIndices.length;
  };
  var min6 = (pointIndices, getValue2) => {
    let result = Infinity;
    for (const i7 of pointIndices) {
      const value = getValue2(i7);
      if (value < result) {
        result = value;
      }
    }
    return result;
  };
  var max6 = (pointIndices, getValue2) => {
    let result = -Infinity;
    for (const i7 of pointIndices) {
      const value = getValue2(i7);
      if (value > result) {
        result = value;
      }
    }
    return result;
  };
  var BUILT_IN_OPERATIONS = {
    COUNT: count2,
    SUM: sum,
    MEAN: mean,
    MIN: min6,
    MAX: max6
  };
  function aggregate({
    bins,
    getValue: getValue2,
    operation,
    target: target2
  }) {
    if (!target2 || target2.length < bins.length) {
      target2 = new Float32Array(bins.length);
    }
    let min7 = Infinity;
    let max7 = -Infinity;
    for (let j4 = 0; j4 < bins.length; j4++) {
      const { points } = bins[j4];
      target2[j4] = operation(points, getValue2);
      if (target2[j4] < min7)
        min7 = target2[j4];
      if (target2[j4] > max7)
        max7 = target2[j4];
    }
    return { value: target2, domain: [min7, max7] };
  }

  // ../aggregation-layers/src/common/aggregator/cpu-aggregator/vertex-accessor.ts
  function evaluateVertexAccessor(accessor, attributes, options) {
    const vertexReaders = {};
    for (const id of accessor.sources || []) {
      const attribute = attributes[id];
      if (attribute) {
        vertexReaders[id] = getVertexReader(attribute);
      } else {
        throw new Error(`Cannot find attribute ${id}`);
      }
    }
    const data = {};
    return (vertexIndex) => {
      for (const id in vertexReaders) {
        data[id] = vertexReaders[id](vertexIndex);
      }
      return accessor.getValue(data, vertexIndex, options);
    };
  }
  function getVertexReader(attribute) {
    const value = attribute.value;
    const { offset = 0, stride, size } = attribute.getAccessor();
    const bytesPerElement = value.BYTES_PER_ELEMENT;
    const elementOffset = offset / bytesPerElement;
    const elementStride = stride ? stride / bytesPerElement : size;
    if (size === 1) {
      if (attribute.isConstant) {
        return () => value[0];
      }
      return (vertexIndex) => {
        const i7 = elementOffset + elementStride * vertexIndex;
        return value[i7];
      };
    }
    let result;
    if (attribute.isConstant) {
      result = Array.from(value);
      return () => result;
    }
    result = new Array(size);
    return (vertexIndex) => {
      const i7 = elementOffset + elementStride * vertexIndex;
      for (let j4 = 0; j4 < size; j4++) {
        result[j4] = value[i7 + j4];
      }
      return result;
    };
  }

  // ../aggregation-layers/src/common/aggregator/cpu-aggregator/cpu-aggregator.ts
  var CPUAggregator = class {
    constructor(props) {
      this.bins = [];
      this.binIds = null;
      this.results = [];
      this.dimensions = props.dimensions;
      this.channelCount = props.getValue.length;
      this.props = {
        ...props,
        binOptions: {},
        pointCount: 0,
        operations: [],
        customOperations: [],
        attributes: {}
      };
      this.needsUpdate = true;
      this.setProps(props);
    }
    destroy() {
    }
    get binCount() {
      return this.bins.length;
    }
    /** Update aggregation props */
    // eslint-disable-next-line complexity
    setProps(props) {
      const oldProps = this.props;
      if (props.binOptions) {
        if (!deepEqual2(props.binOptions, oldProps.binOptions, 2)) {
          this.setNeedsUpdate();
        }
      }
      if (props.operations) {
        for (let channel = 0; channel < this.channelCount; channel++) {
          if (props.operations[channel] !== oldProps.operations[channel]) {
            this.setNeedsUpdate(channel);
          }
        }
      }
      if (props.customOperations) {
        for (let channel = 0; channel < this.channelCount; channel++) {
          if (Boolean(props.customOperations[channel]) !== Boolean(oldProps.customOperations[channel])) {
            this.setNeedsUpdate(channel);
          }
        }
      }
      if (props.pointCount !== void 0 && props.pointCount !== oldProps.pointCount) {
        this.setNeedsUpdate();
      }
      if (props.attributes) {
        props.attributes = { ...oldProps.attributes, ...props.attributes };
      }
      Object.assign(this.props, props);
    }
    /** Flags a channel to need update
     * This is called internally by setProps() if certain props change
     * Users of this class still need to manually set the dirty flag sometimes, because even if no props changed
     * the underlying buffers could have been updated and require rerunning the aggregation
     * @param {number} channel - mark the given channel as dirty. If not provided, all channels will be updated.
     */
    setNeedsUpdate(channel) {
      if (channel === void 0) {
        this.needsUpdate = true;
      } else if (this.needsUpdate !== true) {
        this.needsUpdate = this.needsUpdate || [];
        this.needsUpdate[channel] = true;
      }
    }
    /** Run aggregation */
    update() {
      if (this.needsUpdate === true) {
        this.bins = sortBins({
          pointCount: this.props.pointCount,
          getBinId: evaluateVertexAccessor(
            this.props.getBin,
            this.props.attributes,
            this.props.binOptions
          )
        });
        const value = packBinIds({
          bins: this.bins,
          dimensions: this.dimensions,
          // Reuse allocated typed array
          target: this.binIds?.value
        });
        this.binIds = { value, type: "float32", size: this.dimensions };
      }
      for (let channel = 0; channel < this.channelCount; channel++) {
        if (this.needsUpdate === true || this.needsUpdate[channel]) {
          const operation = this.props.customOperations[channel] || BUILT_IN_OPERATIONS[this.props.operations[channel]];
          const { value, domain } = aggregate({
            bins: this.bins,
            getValue: evaluateVertexAccessor(
              this.props.getValue[channel],
              this.props.attributes,
              void 0
            ),
            operation,
            // Reuse allocated typed array
            target: this.results[channel]?.value
          });
          this.results[channel] = { value, domain, type: "float32", size: 1 };
          this.props.onUpdate?.({ channel });
        }
      }
      this.needsUpdate = false;
    }
    preDraw() {
    }
    /** Returns an accessor to the bins. */
    getBins() {
      return this.binIds;
    }
    /** Returns an accessor to the output for a given channel. */
    getResult(channel) {
      return this.results[channel];
    }
    /** Returns the [min, max] of aggregated values for a given channel. */
    getResultDomain(channel) {
      return this.results[channel]?.domain ?? [Infinity, -Infinity];
    }
    /** Returns the information for a given bin. */
    getBin(index) {
      const bin = this.bins[index];
      if (!bin) {
        return null;
      }
      const value = new Array(this.channelCount);
      for (let i7 = 0; i7 < value.length; i7++) {
        const result = this.results[i7];
        value[i7] = result?.value[index];
      }
      return {
        id: bin.id,
        value,
        count: bin.points.length,
        pointIndices: bin.points
      };
    }
  };

  // ../aggregation-layers/src/common/aggregator/gpu-aggregator/utils.ts
  function createRenderTarget2(device, width, height) {
    return device.createFramebuffer({
      width,
      height,
      colorAttachments: [
        device.createTexture({
          width,
          height,
          format: "rgba32float",
          sampler: {
            minFilter: "nearest",
            magFilter: "nearest"
          }
        })
      ]
    });
  }

  // ../aggregation-layers/src/common/aggregator/gpu-aggregator/bin-sorter-uniforms.ts
  var uniformBlock24 = (
    /* glsl */
    `uniform binSorterUniforms {
  ivec4 binIdRange;
  ivec2 targetSize;
} binSorter;
`
  );
  var binSorterUniforms = {
    name: "binSorter",
    vs: uniformBlock24,
    uniformTypes: {
      binIdRange: "vec4<i32>",
      targetSize: "vec2<i32>"
    }
  };

  // ../aggregation-layers/src/common/aggregator/gpu-aggregator/webgl-bin-sorter.ts
  var COLOR_CHANNELS2 = [1, 2, 4, 8];
  var MAX_FLOAT32 = 3e38;
  var EMPTY_MASKS = { SUM: 0, MEAN: 0, MIN: 0, MAX: 0, COUNT: 0 };
  var TEXTURE_WIDTH = 1024;
  var WebGLBinSorter = class {
    constructor(device, props) {
      /**
       * A packed texture in which each pixel represents a bin.
       * The index of the pixel in the memory layout is the bin index.
       * Alpha value is the count of data points that fall into this bin
       * R,G,B values are the aggregated values of each channel:
       *   - Sum of all data points if operation is 'SUM', or 'MEAN'
       *   - Min of all data points if operation is 'MIN'
       *   - Max of all data points if operation is 'MAX'
       */
      this.binsFBO = null;
      this.device = device;
      this.model = createModel(device, props);
    }
    get texture() {
      return this.binsFBO ? this.binsFBO.colorAttachments[0].texture : null;
    }
    destroy() {
      this.model.destroy();
      this.binsFBO?.colorAttachments[0].texture.destroy();
      this.binsFBO?.destroy();
    }
    getBinValues(index) {
      if (!this.binsFBO) {
        return null;
      }
      const x4 = index % TEXTURE_WIDTH;
      const y5 = Math.floor(index / TEXTURE_WIDTH);
      const buffer = this.device.readPixelsToArrayWebGL(this.binsFBO, {
        sourceX: x4,
        sourceY: y5,
        sourceWidth: 1,
        sourceHeight: 1
      }).buffer;
      return new Float32Array(buffer);
    }
    setDimensions(binCount, binIdRange) {
      const width = TEXTURE_WIDTH;
      const height = Math.ceil(binCount / width);
      if (!this.binsFBO) {
        this.binsFBO = createRenderTarget2(this.device, width, height);
      } else if (this.binsFBO.height < height) {
        this.binsFBO.resize({ width, height });
      }
      const binSorterProps = {
        binIdRange: [
          binIdRange[0][0],
          binIdRange[0][1],
          binIdRange[1]?.[0] || 0,
          binIdRange[1]?.[1] || 0
        ],
        targetSize: [this.binsFBO.width, this.binsFBO.height]
      };
      this.model.shaderInputs.setProps({ binSorter: binSorterProps });
    }
    setModelProps(props) {
      const model = this.model;
      if (props.attributes) {
        model.setAttributes(props.attributes);
      }
      if (props.constantAttributes) {
        model.setConstantAttributes(props.constantAttributes);
      }
      if (props.vertexCount !== void 0) {
        model.setVertexCount(props.vertexCount);
      }
      if (props.shaderModuleProps) {
        model.shaderInputs.setProps(props.shaderModuleProps);
      }
    }
    /** Update aggregation */
    update(operations) {
      if (!this.binsFBO) {
        return;
      }
      const masks = getMaskByOperation(operations);
      this._updateBins("SUM", masks.SUM + masks.MEAN);
      this._updateBins("MIN", masks.MIN);
      this._updateBins("MAX", masks.MAX);
    }
    /** Recalculate aggregation on the given channels using the given operation */
    _updateBins(operation, colorMask) {
      if (colorMask === 0) {
        return;
      }
      colorMask |= COLOR_CHANNELS2[3];
      const model = this.model;
      const target2 = this.binsFBO;
      const initialValue = operation === "MAX" ? -MAX_FLOAT32 : operation === "MIN" ? MAX_FLOAT32 : 0;
      const renderPass = this.device.beginRenderPass({
        id: `gpu-aggregation-${operation}`,
        framebuffer: target2,
        parameters: {
          viewport: [0, 0, target2.width, target2.height],
          colorMask
        },
        clearColor: [initialValue, initialValue, initialValue, 0],
        clearDepth: false,
        clearStencil: false
      });
      model.setParameters({
        blend: true,
        blendColorSrcFactor: "one",
        blendColorDstFactor: "one",
        blendAlphaSrcFactor: "one",
        blendAlphaDstFactor: "one",
        blendColorOperation: operation === "MAX" ? "max" : operation === "MIN" ? "min" : "add",
        blendAlphaOperation: "add"
      });
      model.draw(renderPass);
      renderPass.end();
    }
  };
  function getMaskByOperation(operations) {
    const result = { ...EMPTY_MASKS };
    for (let channel = 0; channel < operations.length; channel++) {
      const op = operations[channel];
      if (op) {
        result[op] += COLOR_CHANNELS2[channel];
      }
    }
    return result;
  }
  function createModel(device, props) {
    let userVs = props.vs;
    if (props.dimensions === 2) {
      userVs += /* glsl */
      `
void getBin(out int binId) {
  ivec2 binId2;
  getBin(binId2);
  if (binId2.x < binSorter.binIdRange.x || binId2.x >= binSorter.binIdRange.y) {
    binId = -1;
  } else {
    binId = (binId2.y - binSorter.binIdRange.z) * (binSorter.binIdRange.y - binSorter.binIdRange.x) + binId2.x;
  }
}
`;
    }
    const vs14 = `#version 300 es
#define SHADER_NAME gpu-aggregation-sort-bins-vertex

${userVs}

out vec3 v_Value;

void main() {
  int binIndex;
  getBin(binIndex);
  binIndex = binIndex - binSorter.binIdRange.x;
  if (binIndex < 0) {
    gl_Position = vec4(0.);
    return;
  }
  int row = binIndex / binSorter.targetSize.x;
  int col = binIndex - row * binSorter.targetSize.x;
  vec2 position = (vec2(col, row) + 0.5) / vec2(binSorter.targetSize) * 2.0 - 1.0;
  gl_Position = vec4(position, 0.0, 1.0);
  gl_PointSize = 1.0;

#if NUM_CHANNELS == 3
  getValue(v_Value);
#elif NUM_CHANNELS == 2
  getValue(v_Value.xy);
#else
  getValue(v_Value.x);
#endif
}
`;
    const fs11 = (
      /* glsl */
      `#version 300 es
#define SHADER_NAME gpu-aggregation-sort-bins-fragment

precision highp float;

in vec3 v_Value;
out vec4 fragColor;

void main() {
  fragColor.xyz = v_Value;

  #ifdef MODULE_GEOMETRY
  geometry.uv = vec2(0.);
  DECKGL_FILTER_COLOR(fragColor, geometry);
  #endif

  fragColor.w = 1.0;
}
`
    );
    const model = new Model(device, {
      bufferLayout: props.bufferLayout,
      modules: [...props.modules || [], binSorterUniforms],
      // @ts-expect-error TODO fix luma type
      defines: { ...props.defines, NON_INSTANCED_MODEL: 1, NUM_CHANNELS: props.channelCount },
      isInstanced: false,
      vs: vs14,
      fs: fs11,
      topology: "point-list",
      disableWarnings: true
    });
    return model;
  }

  // ../aggregation-layers/src/common/aggregator/gpu-aggregator/aggregation-transform-uniforms.ts
  var uniformBlock25 = (
    /* glsl */
    `uniform aggregatorTransformUniforms {
  ivec4 binIdRange;
  bvec3 isCount;
  bvec3 isMean;
  float naN;
} aggregatorTransform;
`
  );
  var aggregatorTransformUniforms = {
    name: "aggregatorTransform",
    vs: uniformBlock25,
    uniformTypes: {
      binIdRange: "vec4<i32>",
      isCount: "vec3<f32>",
      isMean: "vec3<f32>"
    }
  };

  // ../aggregation-layers/src/common/aggregator/gpu-aggregator/webgl-aggregation-transform.ts
  var MAX_FLOAT322 = 3e38;
  var WebGLAggregationTransform = class {
    constructor(device, props) {
      /** Packed from bin ids */
      this.binBuffer = null;
      /** Packed values from each channel of each bin
       * Stride is number of channels * 4 bytes (float32)
       */
      this.valueBuffer = null;
      /** Aggregated [min, max] for each channel */
      this._domains = null;
      this.device = device;
      this.channelCount = props.channelCount;
      this.transform = createTransform(device, props);
      this.domainFBO = createRenderTarget2(device, 2, 1);
    }
    destroy() {
      this.transform.destroy();
      this.binBuffer?.destroy();
      this.valueBuffer?.destroy();
      this.domainFBO.colorAttachments[0].texture.destroy();
      this.domainFBO.destroy();
    }
    get domains() {
      if (!this._domains) {
        const buffer = this.device.readPixelsToArrayWebGL(this.domainFBO).buffer;
        const domain = new Float32Array(buffer);
        this._domains = [
          [-domain[4], domain[0]],
          [-domain[5], domain[1]],
          [-domain[6], domain[2]]
        ].slice(0, this.channelCount);
      }
      return this._domains;
    }
    setDimensions(binCount, binIdRange) {
      const { model, transformFeedback } = this.transform;
      model.setVertexCount(binCount);
      const aggregatorTransformProps = {
        binIdRange: [
          binIdRange[0][0],
          binIdRange[0][1],
          binIdRange[1]?.[0] || 0,
          binIdRange[1]?.[1] || 0
        ]
      };
      model.shaderInputs.setProps({ aggregatorTransform: aggregatorTransformProps });
      const binBufferByteLength = binCount * binIdRange.length * 4;
      if (!this.binBuffer || this.binBuffer.byteLength < binBufferByteLength) {
        this.binBuffer?.destroy();
        this.binBuffer = this.device.createBuffer({ byteLength: binBufferByteLength });
        transformFeedback.setBuffer("binIds", this.binBuffer);
      }
      const valueBufferByteLength = binCount * this.channelCount * 4;
      if (!this.valueBuffer || this.valueBuffer.byteLength < valueBufferByteLength) {
        this.valueBuffer?.destroy();
        this.valueBuffer = this.device.createBuffer({ byteLength: valueBufferByteLength });
        transformFeedback.setBuffer("values", this.valueBuffer);
      }
    }
    update(bins, operations) {
      if (!bins) {
        return;
      }
      const transform2 = this.transform;
      const target2 = this.domainFBO;
      const isCount = [0, 1, 2].map((i7) => operations[i7] === "COUNT" ? 1 : 0);
      const isMean = [0, 1, 2].map((i7) => operations[i7] === "MEAN" ? 1 : 0);
      const aggregatorTransformProps = {
        isCount,
        isMean,
        bins
      };
      transform2.model.shaderInputs.setProps({ aggregatorTransform: aggregatorTransformProps });
      transform2.run({
        id: "gpu-aggregation-domain",
        framebuffer: target2,
        parameters: {
          viewport: [0, 0, 2, 1]
        },
        clearColor: [-MAX_FLOAT322, -MAX_FLOAT322, -MAX_FLOAT322, 0],
        clearDepth: false,
        clearStencil: false
      });
      this._domains = null;
    }
  };
  function createTransform(device, props) {
    const vs14 = (
      /* glsl */
      `#version 300 es
#define SHADER_NAME gpu-aggregation-domain-vertex

uniform sampler2D bins;

#if NUM_DIMS == 1
out float binIds;
#else
out vec2 binIds;
#endif

#if NUM_CHANNELS == 1
flat out float values;
#elif NUM_CHANNELS == 2
flat out vec2 values;
#else
flat out vec3 values;
#endif

const float NAN = intBitsToFloat(-1);

void main() {
  int row = gl_VertexID / SAMPLER_WIDTH;
  int col = gl_VertexID - row * SAMPLER_WIDTH;
  vec4 weights = texelFetch(bins, ivec2(col, row), 0);
  vec3 value3 = mix(
    mix(weights.rgb, vec3(weights.a), aggregatorTransform.isCount),
    weights.rgb / max(weights.a, 1.0),
    aggregatorTransform.isMean
  );
  if (weights.a == 0.0) {
    value3 = vec3(NAN);
  }

#if NUM_DIMS == 1
  binIds = float(gl_VertexID + aggregatorTransform.binIdRange.x);
#else
  int y = gl_VertexID / (aggregatorTransform.binIdRange.y - aggregatorTransform.binIdRange.x);
  int x = gl_VertexID - y * (aggregatorTransform.binIdRange.y - aggregatorTransform.binIdRange.x);
  binIds.y = float(y + aggregatorTransform.binIdRange.z);
  binIds.x = float(x + aggregatorTransform.binIdRange.x);
#endif

#if NUM_CHANNELS == 3
  values = value3;
#elif NUM_CHANNELS == 2
  values = value3.xy;
#else
  values = value3.x;
#endif

  gl_Position = vec4(0., 0., 0., 1.);
  // This model renders into a 2x1 texture to obtain min and max simultaneously.
  // See comments in fragment shader
  gl_PointSize = 2.0;
}
`
    );
    const fs11 = (
      /* glsl */
      `#version 300 es
#define SHADER_NAME gpu-aggregation-domain-fragment

precision highp float;

#if NUM_CHANNELS == 1
flat in float values;
#elif NUM_CHANNELS == 2
flat in vec2 values;
#else
flat in vec3 values;
#endif

out vec4 fragColor;

void main() {
  vec3 value3;
#if NUM_CHANNELS == 3
  value3 = values;
#elif NUM_CHANNELS == 2
  value3.xy = values;
#else
  value3.x = values;
#endif
  if (isnan(value3.x)) discard;
  // This shader renders into a 2x1 texture with blending=max
  // The left pixel yields the max value of each channel
  // The right pixel yields the min value of each channel
  if (gl_FragCoord.x < 1.0) {
    fragColor = vec4(value3, 1.0);
  } else {
    fragColor = vec4(-value3, 1.0);
  }
}
`
    );
    return new BufferTransform(device, {
      vs: vs14,
      fs: fs11,
      topology: "point-list",
      modules: [aggregatorTransformUniforms],
      parameters: {
        blend: true,
        blendColorSrcFactor: "one",
        blendColorDstFactor: "one",
        blendColorOperation: "max",
        blendAlphaSrcFactor: "one",
        blendAlphaDstFactor: "one",
        blendAlphaOperation: "max"
      },
      defines: {
        // @ts-expect-error TODO fix luma type
        NUM_DIMS: props.dimensions,
        // @ts-expect-error TODO fix luma type
        NUM_CHANNELS: props.channelCount,
        // @ts-expect-error TODO fix luma type
        SAMPLER_WIDTH: TEXTURE_WIDTH
      },
      varyings: ["binIds", "values"],
      disableWarnings: true
    });
  }

  // ../aggregation-layers/src/common/aggregator/gpu-aggregator/webgl-aggregator.ts
  var WebGLAggregator = class {
    constructor(device, props) {
      this.binCount = 0;
      /** Cached outputs */
      this.binIds = null;
      this.results = [];
      this.device = device;
      this.dimensions = props.dimensions;
      this.channelCount = props.channelCount;
      this.props = {
        ...props,
        pointCount: 0,
        binIdRange: [[0, 0]],
        operations: [],
        attributes: {},
        binOptions: {}
      };
      this.needsUpdate = new Array(this.channelCount).fill(true);
      this.binSorter = new WebGLBinSorter(device, props);
      this.aggregationTransform = new WebGLAggregationTransform(device, props);
      this.setProps(props);
    }
    /** Checks if the current device supports GPU aggregation */
    static isSupported(device) {
      return device.features.has("float32-renderable-webgl") && device.features.has("texture-blend-float-webgl");
    }
    getBins() {
      const buffer = this.aggregationTransform.binBuffer;
      if (!buffer) {
        return null;
      }
      if (this.binIds?.buffer !== buffer) {
        this.binIds = { buffer, type: "float32", size: this.dimensions };
      }
      return this.binIds;
    }
    /** Returns an accessor to the output for a given channel. */
    getResult(channel) {
      const buffer = this.aggregationTransform.valueBuffer;
      if (!buffer || channel >= this.channelCount) {
        return null;
      }
      if (this.results[channel]?.buffer !== buffer) {
        this.results[channel] = {
          buffer,
          type: "float32",
          size: 1,
          stride: this.channelCount * 4,
          offset: channel * 4
        };
      }
      return this.results[channel];
    }
    /** Returns the [min, max] of aggregated values for a given channel. */
    getResultDomain(channel) {
      return this.aggregationTransform.domains[channel];
    }
    /** Returns the information for a given bin. */
    getBin(index) {
      if (index < 0 || index >= this.binCount) {
        return null;
      }
      const { binIdRange } = this.props;
      let id;
      if (this.dimensions === 1) {
        id = [index + binIdRange[0][0]];
      } else {
        const [[x0, x1], [y0]] = binIdRange;
        const width = x1 - x0;
        id = [index % width + x0, Math.floor(index / width) + y0];
      }
      const pixel = this.binSorter.getBinValues(index);
      if (!pixel) {
        return null;
      }
      const count3 = pixel[3];
      const value = [];
      for (let channel = 0; channel < this.channelCount; channel++) {
        const operation = this.props.operations[channel];
        if (operation === "COUNT") {
          value[channel] = count3;
        } else if (count3 === 0) {
          value[channel] = NaN;
        } else {
          value[channel] = operation === "MEAN" ? pixel[channel] / count3 : pixel[channel];
        }
      }
      return { id, value, count: count3 };
    }
    /** Release GPU resources */
    destroy() {
      this.binSorter.destroy();
      this.aggregationTransform.destroy();
    }
    /** Update aggregation props. Normalize prop values and set change flags. */
    // eslint-disable-next-line complexity, max-statements
    setProps(props) {
      const oldProps = this.props;
      if ("binIdRange" in props && !deepEqual2(props.binIdRange, oldProps.binIdRange, 2)) {
        const binIdRange = props.binIdRange;
        log_default.assert(binIdRange.length === this.dimensions);
        if (this.dimensions === 1) {
          const [[x0, x1]] = binIdRange;
          this.binCount = x1 - x0;
        } else {
          const [[x0, x1], [y0, y1]] = binIdRange;
          this.binCount = (x1 - x0) * (y1 - y0);
        }
        this.binSorter.setDimensions(this.binCount, binIdRange);
        this.aggregationTransform.setDimensions(this.binCount, binIdRange);
        this.setNeedsUpdate();
      }
      if (props.operations) {
        for (let channel = 0; channel < this.channelCount; channel++) {
          if (props.operations[channel] !== oldProps.operations[channel]) {
            this.setNeedsUpdate(channel);
          }
        }
      }
      if (props.pointCount !== void 0 && props.pointCount !== oldProps.pointCount) {
        this.binSorter.setModelProps({ vertexCount: props.pointCount });
        this.setNeedsUpdate();
      }
      if (props.binOptions) {
        if (!deepEqual2(props.binOptions, oldProps.binOptions, 2)) {
          this.setNeedsUpdate();
        }
        this.binSorter.model.shaderInputs.setProps({ binOptions: props.binOptions });
      }
      if (props.attributes) {
        const attributeBuffers = {};
        const constantAttributes = {};
        for (const attribute of Object.values(props.attributes)) {
          for (const [attributeName, value] of Object.entries(attribute.getValue())) {
            if (ArrayBuffer.isView(value)) {
              constantAttributes[attributeName] = value;
            } else if (value) {
              attributeBuffers[attributeName] = value;
            }
          }
        }
        this.binSorter.setModelProps({ attributes: attributeBuffers, constantAttributes });
      }
      if (props.shaderModuleProps) {
        this.binSorter.setModelProps({ shaderModuleProps: props.shaderModuleProps });
      }
      Object.assign(this.props, props);
    }
    /** Flags a channel to need update.
     * This is called internally by setProps() if certain props change
     * Users of this class still need to manually set the dirty flag sometimes, because even if no props changed
     * the underlying buffers could have been updated and require rerunning the aggregation
     * @param {number} channel - mark the given channel as dirty. If not provided, all channels will be updated.
     */
    setNeedsUpdate(channel) {
      if (channel === void 0) {
        this.needsUpdate.fill(true);
      } else {
        this.needsUpdate[channel] = true;
      }
    }
    update() {
    }
    /** Run aggregation */
    preDraw() {
      if (!this.needsUpdate.some(Boolean)) {
        return;
      }
      const { operations } = this.props;
      const operationsToUpdate = this.needsUpdate.map(
        (needsUpdate, i7) => needsUpdate ? operations[i7] : null
      );
      this.binSorter.update(operationsToUpdate);
      this.aggregationTransform.update(this.binSorter.texture, operations);
      for (let i7 = 0; i7 < this.channelCount; i7++) {
        if (this.needsUpdate[i7]) {
          this.needsUpdate[i7] = false;
          this.props.onUpdate?.({ channel: i7 });
        }
      }
    }
  };

  // ../aggregation-layers/src/common/aggregation-layer.ts
  var AggregationLayer = class extends CompositeLayer {
    /** Allow this layer to participates in the draw cycle */
    get isDrawable() {
      return true;
    }
    initializeState() {
      this.getAttributeManager().remove(["instancePickingColors"]);
    }
    // Extend Layer.updateState to update the Aggregator instance
    // returns true if aggregator is changed
    updateState(params) {
      super.updateState(params);
      const aggregatorType = this.getAggregatorType();
      if (params.changeFlags.extensionsChanged || this.state.aggregatorType !== aggregatorType) {
        this.state.aggregator?.destroy();
        const aggregator = this.createAggregator(aggregatorType);
        aggregator.setProps({
          attributes: this.getAttributeManager()?.attributes
        });
        this.setState({ aggregator, aggregatorType });
        return true;
      }
      return false;
    }
    // Override Layer.finalizeState to dispose the Aggregator instance
    finalizeState(context) {
      super.finalizeState(context);
      this.state.aggregator.destroy();
    }
    // Override Layer.updateAttributes to update the aggregator
    updateAttributes(changedAttributes) {
      const { aggregator } = this.state;
      aggregator.setProps({
        attributes: changedAttributes
      });
      for (const id in changedAttributes) {
        this.onAttributeChange(id);
      }
      aggregator.update();
    }
    draw({ shaderModuleProps }) {
      const { aggregator } = this.state;
      aggregator.setProps({ shaderModuleProps });
      aggregator.preDraw();
    }
    // override CompositeLayer._getAttributeManager to create AttributeManager instance
    _getAttributeManager() {
      return new AttributeManager(this.context.device, {
        id: this.props.id,
        stats: this.context.stats
      });
    }
  };
  AggregationLayer.layerName = "AggregationLayer";

  // ../aggregation-layers/src/common/utils/color-utils.ts
  var defaultColorRange = [
    [255, 255, 178],
    [254, 217, 118],
    [254, 178, 76],
    [253, 141, 60],
    [240, 59, 32],
    [189, 0, 38]
  ];
  function colorRangeToFlatArray(colorRange, normalize17 = false, ArrayType = Float32Array) {
    let flatArray;
    if (Number.isFinite(colorRange[0])) {
      flatArray = new ArrayType(colorRange);
    } else {
      flatArray = new ArrayType(colorRange.length * 4);
      let index = 0;
      for (let i7 = 0; i7 < colorRange.length; i7++) {
        const color = colorRange[i7];
        flatArray[index++] = color[0];
        flatArray[index++] = color[1];
        flatArray[index++] = color[2];
        flatArray[index++] = Number.isFinite(color[3]) ? color[3] : 255;
      }
    }
    if (normalize17) {
      for (let i7 = 0; i7 < flatArray.length; i7++) {
        flatArray[i7] /= 255;
      }
    }
    return flatArray;
  }
  var COLOR_RANGE_FILTER = {
    linear: "linear",
    quantile: "nearest",
    quantize: "nearest",
    ordinal: "nearest"
  };
  function updateColorRangeTexture(texture, type) {
    texture.setSampler({
      minFilter: COLOR_RANGE_FILTER[type],
      magFilter: COLOR_RANGE_FILTER[type]
    });
  }
  function createColorRangeTexture(device, colorRange, type = "linear") {
    const colors = colorRangeToFlatArray(colorRange, false, Uint8Array);
    return device.createTexture({
      format: "rgba8unorm",
      sampler: {
        minFilter: COLOR_RANGE_FILTER[type],
        magFilter: COLOR_RANGE_FILTER[type],
        addressModeU: "clamp-to-edge",
        addressModeV: "clamp-to-edge"
      },
      data: colors,
      width: colors.length / 4,
      height: 1
    });
  }

  // ../aggregation-layers/src/screen-grid-layer/screen-grid-layer-vertex.glsl.ts
  var screen_grid_layer_vertex_glsl_default = (
    /* glsl */
    `#version 300 es
#define SHADER_NAME screen-grid-layer-vertex-shader
#define RANGE_COUNT 6

in vec2 positions;
in vec2 instancePositions;
in float instanceWeights;
in vec3 instancePickingColors;

uniform sampler2D colorRange;

out vec4 vColor;

vec4 interp(float value, vec2 domain, sampler2D range) {
  float r = (value - domain.x) / (domain.y - domain.x);
  return texture(range, vec2(r, 0.5));
}

void main(void) {
  if (isnan(instanceWeights)) {
    gl_Position = vec4(0.);
    return;
  }

  vec2 pos = instancePositions * screenGrid.gridSizeClipspace + positions * screenGrid.cellSizeClipspace;
  pos.x = pos.x - 1.0;
  pos.y = 1.0 - pos.y;

  gl_Position = vec4(pos, 0., 1.);

  vColor = interp(instanceWeights, screenGrid.colorDomain, colorRange);
  vColor.a *= layer.opacity;

  // Set color to be rendered to picking fbo (also used to check for selection highlight).
  picking_setPickingColor(instancePickingColors);
}
`
  );

  // ../aggregation-layers/src/screen-grid-layer/screen-grid-layer-fragment.glsl.ts
  var screen_grid_layer_fragment_glsl_default = (
    /* glsl */
    `#version 300 es
#define SHADER_NAME screen-grid-layer-fragment-shader

precision highp float;

in vec4 vColor;

out vec4 fragColor;

void main(void) {
  fragColor = vColor;

  DECKGL_FILTER_COLOR(fragColor, geometry);
}
`
  );

  // ../aggregation-layers/src/screen-grid-layer/screen-grid-layer-uniforms.ts
  var uniformBlock26 = (
    /* glsl */
    `uniform screenGridUniforms {
  vec2 cellSizeClipspace;
  vec2 gridSizeClipspace;
  vec2 colorDomain;
} screenGrid;
`
  );
  var screenGridUniforms = {
    name: "screenGrid",
    vs: uniformBlock26,
    uniformTypes: {
      cellSizeClipspace: "vec2<f32>",
      gridSizeClipspace: "vec2<f32>",
      colorDomain: "vec2<f32>"
    }
  };

  // ../aggregation-layers/src/screen-grid-layer/screen-grid-cell-layer.ts
  var ScreenGridCellLayer = class extends Layer {
    getShaders() {
      return super.getShaders({ vs: screen_grid_layer_vertex_glsl_default, fs: screen_grid_layer_fragment_glsl_default, modules: [picking_default, screenGridUniforms] });
    }
    initializeState() {
      this.getAttributeManager().addInstanced({
        instancePositions: {
          size: 2,
          type: "float32",
          accessor: "getBin"
        },
        instanceWeights: {
          size: 1,
          type: "float32",
          accessor: "getWeight"
        }
      });
      this.state.model = this._getModel();
    }
    updateState(params) {
      super.updateState(params);
      const { props, oldProps, changeFlags } = params;
      const model = this.state.model;
      if (oldProps.colorRange !== props.colorRange) {
        this.state.colorTexture?.destroy();
        this.state.colorTexture = createColorRangeTexture(
          this.context.device,
          props.colorRange,
          props.colorScaleType
        );
        const screenGridProps = { colorRange: this.state.colorTexture };
        model.shaderInputs.setProps({ screenGrid: screenGridProps });
      } else if (oldProps.colorScaleType !== props.colorScaleType) {
        updateColorRangeTexture(this.state.colorTexture, props.colorScaleType);
      }
      if (oldProps.cellMarginPixels !== props.cellMarginPixels || oldProps.cellSizePixels !== props.cellSizePixels || changeFlags.viewportChanged) {
        const { width, height } = this.context.viewport;
        const { cellSizePixels: gridSize, cellMarginPixels } = this.props;
        const cellSize = Math.max(gridSize - cellMarginPixels, 0);
        const screenGridProps = {
          gridSizeClipspace: [gridSize / width * 2, gridSize / height * 2],
          cellSizeClipspace: [cellSize / width * 2, cellSize / height * 2]
        };
        model.shaderInputs.setProps({ screenGrid: screenGridProps });
      }
    }
    finalizeState(context) {
      super.finalizeState(context);
      this.state.colorTexture?.destroy();
    }
    draw({ uniforms }) {
      const colorDomain = this.props.colorDomain();
      const model = this.state.model;
      const screenGridProps = { colorDomain };
      model.shaderInputs.setProps({ screenGrid: screenGridProps });
      model.draw(this.context.renderPass);
    }
    // Private Methods
    _getModel() {
      return new Model(this.context.device, {
        ...this.getShaders(),
        id: this.props.id,
        bufferLayout: this.getAttributeManager().getBufferLayouts(),
        geometry: new Geometry({
          topology: "triangle-strip",
          attributes: {
            positions: {
              value: new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]),
              size: 2
            }
          }
        }),
        isInstanced: true
      });
    }
  };
  ScreenGridCellLayer.layerName = "ScreenGridCellLayer";

  // ../aggregation-layers/src/screen-grid-layer/bin-options-uniforms.ts
  var uniformBlock27 = (
    /* glsl */
    `uniform binOptionsUniforms {
  float cellSizePixels;
} binOptions;
`
  );
  var binOptionsUniforms = {
    name: "binOptions",
    vs: uniformBlock27,
    uniformTypes: {
      cellSizePixels: "f32"
    }
  };

  // ../aggregation-layers/src/screen-grid-layer/screen-grid-layer.ts
  var defaultProps43 = {
    cellSizePixels: { type: "number", value: 100, min: 1 },
    cellMarginPixels: { type: "number", value: 2, min: 0 },
    colorRange: defaultColorRange,
    colorScaleType: "linear",
    getPosition: { type: "accessor", value: (d5) => d5.position },
    getWeight: { type: "accessor", value: 1 },
    gpuAggregation: true,
    aggregation: "SUM"
  };
  var ScreenGridLayer = class extends AggregationLayer {
    getAggregatorType() {
      return this.props.gpuAggregation && WebGLAggregator.isSupported(this.context.device) ? "gpu" : "cpu";
    }
    createAggregator(type) {
      if (type === "cpu" || !WebGLAggregator.isSupported(this.context.device)) {
        return new CPUAggregator({
          dimensions: 2,
          getBin: {
            sources: ["positions"],
            getValue: ({ positions }, index, opts) => {
              const viewport = this.context.viewport;
              const p5 = viewport.project(positions);
              const cellSizePixels = opts.cellSizePixels;
              if (p5[0] < 0 || p5[0] >= viewport.width || p5[1] < 0 || p5[1] >= viewport.height) {
                return null;
              }
              return [Math.floor(p5[0] / cellSizePixels), Math.floor(p5[1] / cellSizePixels)];
            }
          },
          getValue: [{ sources: ["counts"], getValue: ({ counts }) => counts }]
        });
      }
      return new WebGLAggregator(this.context.device, {
        dimensions: 2,
        channelCount: 1,
        bufferLayout: this.getAttributeManager().getBufferLayouts({ isInstanced: false }),
        ...super.getShaders({
          modules: [project32_default, binOptionsUniforms],
          vs: `
  in vec3 positions;
  in vec3 positions64Low;
  in float counts;
  
  void getBin(out ivec2 binId) {
    vec4 pos = project_position_to_clipspace(positions, positions64Low, vec3(0.0));
    vec2 screenCoords = vec2(pos.x / pos.w + 1.0, 1.0 - pos.y / pos.w) / 2.0 * project.viewportSize / project.devicePixelRatio;
    vec2 gridCoords = floor(screenCoords / binOptions.cellSizePixels);
    binId = ivec2(gridCoords);
  }
  void getValue(out float weight) {
    weight = counts;
  }
  `
        })
      });
    }
    initializeState() {
      super.initializeState();
      const attributeManager = this.getAttributeManager();
      attributeManager.add({
        positions: {
          size: 3,
          accessor: "getPosition",
          type: "float64",
          fp64: this.use64bitPositions()
        },
        // this attribute is used in gpu aggregation path only
        counts: { size: 1, accessor: "getWeight" }
      });
    }
    shouldUpdateState({ changeFlags }) {
      return changeFlags.somethingChanged;
    }
    updateState(params) {
      const aggregatorChanged = super.updateState(params);
      const { props, oldProps, changeFlags } = params;
      const { cellSizePixels, aggregation } = props;
      if (aggregatorChanged || changeFlags.dataChanged || changeFlags.updateTriggersChanged || changeFlags.viewportChanged || aggregation !== oldProps.aggregation || cellSizePixels !== oldProps.cellSizePixels) {
        const { width, height } = this.context.viewport;
        const { aggregator } = this.state;
        if (aggregator instanceof WebGLAggregator) {
          aggregator.setProps({
            binIdRange: [
              [0, Math.ceil(width / cellSizePixels)],
              [0, Math.ceil(height / cellSizePixels)]
            ]
          });
        }
        aggregator.setProps({
          pointCount: this.getNumInstances(),
          operations: [aggregation],
          binOptions: {
            cellSizePixels
          }
        });
      }
      if (changeFlags.viewportChanged) {
        this.state.aggregator.setNeedsUpdate();
      }
      return aggregatorChanged;
    }
    onAttributeChange(id) {
      const { aggregator } = this.state;
      switch (id) {
        case "positions":
          aggregator.setNeedsUpdate();
          break;
        case "counts":
          aggregator.setNeedsUpdate(0);
          break;
        default:
      }
    }
    renderLayers() {
      const { aggregator } = this.state;
      const CellLayerClass = this.getSubLayerClass("cells", ScreenGridCellLayer);
      const binAttribute = aggregator.getBins();
      const weightAttribute = aggregator.getResult(0);
      return new CellLayerClass(
        this.props,
        this.getSubLayerProps({
          id: "cell-layer"
        }),
        {
          data: {
            length: aggregator.binCount,
            attributes: {
              getBin: binAttribute,
              getWeight: weightAttribute
            }
          },
          // Data has changed shallowly, but we likely don't need to update the attributes
          dataComparator: (data, oldData) => data.length === oldData.length,
          updateTriggers: {
            getBin: [binAttribute],
            getWeight: [weightAttribute]
          },
          parameters: {
            depthWriteEnabled: false,
            ...this.props.parameters
          },
          // Evaluate domain at draw() time
          colorDomain: () => this.props.colorDomain || aggregator.getResultDomain(0),
          // Extensions are already handled by the GPUAggregator, do not pass it down
          extensions: []
        }
      );
    }
    getPickingInfo(params) {
      const info = params.info;
      const { index } = info;
      if (index >= 0) {
        const bin = this.state.aggregator.getBin(index);
        let object;
        if (bin) {
          object = {
            col: bin.id[0],
            row: bin.id[1],
            value: bin.value[0],
            count: bin.count
          };
          if (bin.pointIndices) {
            object.pointIndices = bin.pointIndices;
            object.points = Array.isArray(this.props.data) ? bin.pointIndices.map((i7) => this.props.data[i7]) : [];
          }
        }
        info.object = object;
      }
      return info;
    }
  };
  ScreenGridLayer.layerName = "ScreenGridLayer";
  ScreenGridLayer.defaultProps = defaultProps43;

  // ../aggregation-layers/src/common/utils/scale-utils.ts
  var AttributeWithScale = class {
    constructor(input, inputLength) {
      this.props = {
        scaleType: "linear",
        lowerPercentile: 0,
        upperPercentile: 100
      };
      /** [min, max] of attribute values, or null if unknown */
      this.domain = null;
      /** Valid domain if lower/upper percentile are defined */
      this.cutoff = null;
      this.input = input;
      this.inputLength = inputLength;
      this.attribute = input;
    }
    getScalePercentile() {
      if (!this._percentile) {
        const value = getAttributeValue(this.input, this.inputLength);
        this._percentile = applyScaleQuantile(value);
      }
      return this._percentile;
    }
    getScaleOrdinal() {
      if (!this._ordinal) {
        const value = getAttributeValue(this.input, this.inputLength);
        this._ordinal = applyScaleOrdinal(value);
      }
      return this._ordinal;
    }
    /** Returns the [lowerCutoff, upperCutoff] of scaled values, or null if not applicable */
    getCutoff({
      scaleType,
      lowerPercentile,
      upperPercentile
    }) {
      if (scaleType === "quantile") {
        return [lowerPercentile, upperPercentile - 1];
      }
      if (lowerPercentile > 0 || upperPercentile < 100) {
        const { domain: thresholds } = this.getScalePercentile();
        let lowValue = thresholds[Math.floor(lowerPercentile) - 1] ?? -Infinity;
        let highValue = thresholds[Math.floor(upperPercentile) - 1] ?? Infinity;
        if (scaleType === "ordinal") {
          const { domain: sortedUniqueValues } = this.getScaleOrdinal();
          lowValue = sortedUniqueValues.findIndex((x4) => x4 >= lowValue);
          highValue = sortedUniqueValues.findIndex((x4) => x4 > highValue) - 1;
          if (highValue === -2) {
            highValue = sortedUniqueValues.length - 1;
          }
        }
        return [lowValue, highValue];
      }
      return null;
    }
    update(props) {
      const oldProps = this.props;
      if (props.scaleType !== oldProps.scaleType) {
        switch (props.scaleType) {
          case "quantile": {
            const { attribute } = this.getScalePercentile();
            this.attribute = attribute;
            this.domain = [0, 99];
            break;
          }
          case "ordinal": {
            const { attribute, domain } = this.getScaleOrdinal();
            this.attribute = attribute;
            this.domain = [0, domain.length - 1];
            break;
          }
          default:
            this.attribute = this.input;
            this.domain = null;
        }
      }
      if (props.scaleType !== oldProps.scaleType || props.lowerPercentile !== oldProps.lowerPercentile || props.upperPercentile !== oldProps.upperPercentile) {
        this.cutoff = this.getCutoff(props);
      }
      this.props = props;
      return this;
    }
  };
  function applyScaleOrdinal(values) {
    const uniqueValues = /* @__PURE__ */ new Set();
    for (const x4 of values) {
      if (Number.isFinite(x4)) {
        uniqueValues.add(x4);
      }
    }
    const sortedUniqueValues = Array.from(uniqueValues).sort();
    const domainMap = /* @__PURE__ */ new Map();
    for (let i7 = 0; i7 < sortedUniqueValues.length; i7++) {
      domainMap.set(sortedUniqueValues[i7], i7);
    }
    return {
      attribute: {
        value: values.map((x4) => Number.isFinite(x4) ? domainMap.get(x4) : NaN),
        type: "float32",
        size: 1
      },
      domain: sortedUniqueValues
    };
  }
  function applyScaleQuantile(values, rangeLength = 100) {
    const sortedValues = Array.from(values).filter(Number.isFinite).sort(ascending);
    let i7 = 0;
    const n4 = Math.max(1, rangeLength);
    const thresholds = new Array(n4 - 1);
    while (++i7 < n4) {
      thresholds[i7 - 1] = threshold(sortedValues, i7 / n4);
    }
    return {
      attribute: {
        value: values.map((x4) => Number.isFinite(x4) ? bisectRight(thresholds, x4) : NaN),
        type: "float32",
        size: 1
      },
      domain: thresholds
    };
  }
  function getAttributeValue(attribute, length17) {
    const elementStride = (attribute.stride ?? 4) / 4;
    const elementOffset = (attribute.offset ?? 0) / 4;
    let value = attribute.value;
    if (!value) {
      const bytes = attribute.buffer?.readSyncWebGL(0, elementStride * 4 * length17);
      if (bytes) {
        value = new Float32Array(bytes.buffer);
        attribute.value = value;
      }
    }
    if (elementStride === 1) {
      return value.subarray(0, length17);
    }
    const result = new Float32Array(length17);
    for (let i7 = 0; i7 < length17; i7++) {
      result[i7] = value[i7 * elementStride + elementOffset];
    }
    return result;
  }
  function ascending(a6, b4) {
    return a6 - b4;
  }
  function threshold(domain, fraction) {
    const domainLength = domain.length;
    if (fraction <= 0 || domainLength < 2) {
      return domain[0];
    }
    if (fraction >= 1) {
      return domain[domainLength - 1];
    }
    const domainFraction = (domainLength - 1) * fraction;
    const lowIndex = Math.floor(domainFraction);
    const low = domain[lowIndex];
    const high = domain[lowIndex + 1];
    return low + (high - low) * (domainFraction - lowIndex);
  }
  function bisectRight(a6, x4) {
    let lo = 0;
    let hi = a6.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (a6[mid] > x4) {
        hi = mid;
      } else {
        lo = mid + 1;
      }
    }
    return lo;
  }

  // ../aggregation-layers/src/common/utils/bounds-utils.ts
  function getBinIdRange({
    dataBounds,
    getBinId,
    padding = 0
  }) {
    const corners = [
      dataBounds[0],
      dataBounds[1],
      [dataBounds[0][0], dataBounds[1][1]],
      [dataBounds[1][0], dataBounds[0][1]]
    ].map((p5) => getBinId(p5));
    const minX = Math.min(...corners.map((p5) => p5[0])) - padding;
    const minY = Math.min(...corners.map((p5) => p5[1])) - padding;
    const maxX = Math.max(...corners.map((p5) => p5[0])) + padding + 1;
    const maxY = Math.max(...corners.map((p5) => p5[1])) + padding + 1;
    return [
      [minX, maxX],
      [minY, maxY]
    ];
  }

  // ../aggregation-layers/src/hexagon-layer/hexbin.ts
  var THIRD_PI = Math.PI / 3;
  var DIST_X = 2 * Math.sin(THIRD_PI);
  var DIST_Y = 1.5;
  var HexbinVertices = Array.from({ length: 6 }, (_3, i7) => {
    const angle10 = i7 * THIRD_PI;
    return [Math.sin(angle10), -Math.cos(angle10)];
  });
  function pointToHexbin([px, py], radius) {
    let pj = Math.round(py = py / radius / DIST_Y);
    let pi = Math.round(px = px / radius / DIST_X - (pj & 1) / 2);
    const py1 = py - pj;
    if (Math.abs(py1) * 3 > 1) {
      const px1 = px - pi;
      const pi2 = pi + (px < pi ? -1 : 1) / 2;
      const pj2 = pj + (py < pj ? -1 : 1);
      const px2 = px - pi2;
      const py2 = py - pj2;
      if (px1 * px1 + py1 * py1 > px2 * px2 + py2 * py2) {
        pi = pi2 + (pj & 1 ? 1 : -1) / 2;
        pj = pj2;
      }
    }
    return [pi, pj];
  }
  var pointToHexbinGLSL = (
    /* glsl */
    `
const vec2 DIST = vec2(${DIST_X}, ${DIST_Y});

ivec2 pointToHexbin(vec2 p, float radius) {
  p /= radius * DIST;
  float pj = round(p.y);
  float pjm2 = mod(pj, 2.0);
  p.x -= pjm2 * 0.5;
  float pi = round(p.x);
  vec2 d1 = p - vec2(pi, pj);

  if (abs(d1.y) * 3. > 1.) {
    vec2 v2 = step(0.0, d1) - 0.5;
    v2.y *= 2.0;
    vec2 d2 = d1 - v2;
    if (dot(d1, d1) > dot(d2, d2)) {
      pi += v2.x + pjm2 - 0.5;
      pj += v2.y;
    }
  }
  return ivec2(pi, pj);
}
`
  );
  function getHexbinCentroid([i7, j4], radius) {
    return [(i7 + (j4 & 1) / 2) * radius * DIST_X, j4 * radius * DIST_Y];
  }
  var getHexbinCentroidGLSL = `
const vec2 DIST = vec2(${DIST_X}, ${DIST_Y});

vec2 hexbinCentroid(vec2 binId, float radius) {
  binId.x += fract(binId.y * 0.5);
  return binId * DIST * radius;
}
`;

  // ../aggregation-layers/src/hexagon-layer/hexagon-cell-layer-vertex.glsl.ts
  var hexagon_cell_layer_vertex_glsl_default = (
    /* glsl */
    `#version 300 es
#define SHADER_NAME hexagon-cell-layer-vertex-shader

in vec3 positions;
in vec3 normals;

in vec2 instancePositions;
in float instanceElevationValues;
in float instanceColorValues;
in vec3 instancePickingColors;

uniform sampler2D colorRange;

// Result
out vec4 vColor;

${getHexbinCentroidGLSL}

float interp(float value, vec2 domain, vec2 range) {
  float r = min(max((value - domain.x) / (domain.y - domain.x), 0.), 1.);
  return mix(range.x, range.y, r);
}

vec4 interp(float value, vec2 domain, sampler2D range) {
  float r = (value - domain.x) / (domain.y - domain.x);
  return texture(range, vec2(r, 0.5));
}

void main(void) {
  geometry.pickingColor = instancePickingColors;

  if (isnan(instanceColorValues) ||
    instanceColorValues < hexagon.colorDomain.z ||
    instanceColorValues > hexagon.colorDomain.w ||
    instanceElevationValues < hexagon.elevationDomain.z ||
    instanceElevationValues > hexagon.elevationDomain.w
  ) {
    gl_Position = vec4(0.);
    return;
  }
  
  vec2 commonPosition = hexbinCentroid(instancePositions, column.radius) + (hexagon.originCommon - project.commonOrigin.xy);
  commonPosition += positions.xy * column.radius * column.coverage;
  geometry.position = vec4(commonPosition, 0.0, 1.0);
  geometry.normal = project_normal(normals);

  // calculate z, if 3d not enabled set to 0
  float elevation = 0.0;
  if (column.extruded) {
    elevation = interp(instanceElevationValues, hexagon.elevationDomain.xy, hexagon.elevationRange);
    elevation = project_size(elevation);
    // cylindar gemoetry height are between -1.0 to 1.0, transform it to between 0, 1
    geometry.position.z = (positions.z + 1.0) / 2.0 * elevation;
  }

  gl_Position = project_common_position_to_clipspace(geometry.position);
  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);

  vColor = interp(instanceColorValues, hexagon.colorDomain.xy, colorRange);
  vColor.a *= layer.opacity;
  if (column.extruded) {
    vColor.rgb = lighting_getLightColor(vColor.rgb, project.cameraPosition, geometry.position.xyz, geometry.normal);
  }
  DECKGL_FILTER_COLOR(vColor, geometry);
}
`
  );

  // ../aggregation-layers/src/hexagon-layer/hexagon-layer-uniforms.ts
  var uniformBlock28 = (
    /* glsl */
    `uniform hexagonUniforms {
  vec4 colorDomain;
  vec4 elevationDomain;
  vec2 elevationRange;
  vec2 originCommon;
} hexagon;
`
  );
  var hexagonUniforms = {
    name: "hexagon",
    vs: uniformBlock28,
    uniformTypes: {
      colorDomain: "vec4<f32>",
      elevationDomain: "vec4<f32>",
      elevationRange: "vec2<f32>",
      originCommon: "vec2<f32>"
    }
  };

  // ../aggregation-layers/src/hexagon-layer/hexagon-cell-layer.ts
  var HexagonCellLayer = class extends ColumnLayer {
    getShaders() {
      const shaders = super.getShaders();
      shaders.modules.push(hexagonUniforms);
      return { ...shaders, vs: hexagon_cell_layer_vertex_glsl_default };
    }
    initializeState() {
      super.initializeState();
      const attributeManager = this.getAttributeManager();
      attributeManager.remove([
        "instanceElevations",
        "instanceFillColors",
        "instanceLineColors",
        "instanceStrokeWidths"
      ]);
      attributeManager.addInstanced({
        instancePositions: {
          size: 2,
          type: "float32",
          accessor: "getBin"
        },
        instanceColorValues: {
          size: 1,
          type: "float32",
          accessor: "getColorValue"
        },
        instanceElevationValues: {
          size: 1,
          type: "float32",
          accessor: "getElevationValue"
        }
      });
    }
    updateState(params) {
      super.updateState(params);
      const { props, oldProps } = params;
      const model = this.state.fillModel;
      if (oldProps.colorRange !== props.colorRange) {
        this.state.colorTexture?.destroy();
        this.state.colorTexture = createColorRangeTexture(
          this.context.device,
          props.colorRange,
          props.colorScaleType
        );
        const hexagonProps = { colorRange: this.state.colorTexture };
        model.shaderInputs.setProps({ hexagon: hexagonProps });
      } else if (oldProps.colorScaleType !== props.colorScaleType) {
        updateColorRangeTexture(this.state.colorTexture, props.colorScaleType);
      }
    }
    finalizeState(context) {
      super.finalizeState(context);
      this.state.colorTexture?.destroy();
    }
    draw({ uniforms }) {
      const {
        radius,
        hexOriginCommon,
        elevationRange,
        elevationScale,
        extruded,
        coverage,
        colorDomain,
        elevationDomain
      } = this.props;
      const colorCutoff = this.props.colorCutoff || [-Infinity, Infinity];
      const elevationCutoff = this.props.elevationCutoff || [-Infinity, Infinity];
      const fillModel = this.state.fillModel;
      if (fillModel.vertexArray.indexBuffer) {
        fillModel.setIndexBuffer(null);
      }
      fillModel.setVertexCount(this.state.fillVertexCount);
      const hexagonProps = {
        colorDomain: [
          Math.max(colorDomain[0], colorCutoff[0]),
          // instanceColorValue that maps to colorRange[0]
          Math.min(colorDomain[1], colorCutoff[1]),
          // instanceColorValue that maps to colorRange[colorRange.length - 1]
          Math.max(colorDomain[0] - 1, colorCutoff[0]),
          // hide cell if instanceColorValue is less than this
          Math.min(colorDomain[1] + 1, colorCutoff[1])
          // hide cell if instanceColorValue is greater than this
        ],
        elevationDomain: [
          Math.max(elevationDomain[0], elevationCutoff[0]),
          // instanceElevationValue that maps to elevationRange[0]
          Math.min(elevationDomain[1], elevationCutoff[1]),
          // instanceElevationValue that maps to elevationRange[elevationRange.length - 1]
          Math.max(elevationDomain[0] - 1, elevationCutoff[0]),
          // hide cell if instanceElevationValue is less than this
          Math.min(elevationDomain[1] + 1, elevationCutoff[1])
          // hide cell if instanceElevationValue is greater than this
        ],
        elevationRange: [elevationRange[0] * elevationScale, elevationRange[1] * elevationScale],
        originCommon: hexOriginCommon
      };
      fillModel.shaderInputs.setProps({
        column: { extruded, coverage, radius },
        hexagon: hexagonProps
      });
      fillModel.draw(this.context.renderPass);
    }
  };
  HexagonCellLayer.layerName = "HexagonCellLayer";

  // ../aggregation-layers/src/hexagon-layer/bin-options-uniforms.ts
  var uniformBlock29 = (
    /* glsl */
    `uniform binOptionsUniforms {
  vec2 hexOriginCommon;
  float radiusCommon;
} binOptions;
`
  );
  var binOptionsUniforms2 = {
    name: "binOptions",
    vs: uniformBlock29,
    uniformTypes: {
      hexOriginCommon: "vec2<f32>",
      radiusCommon: "f32"
    }
  };

  // ../aggregation-layers/src/hexagon-layer/hexagon-layer.ts
  function noop5() {
  }
  var defaultProps44 = {
    gpuAggregation: true,
    // color
    colorDomain: null,
    colorRange: defaultColorRange,
    getColorValue: { type: "accessor", value: null },
    // default value is calculated from `getColorWeight` and `colorAggregation`
    getColorWeight: { type: "accessor", value: 1 },
    colorAggregation: "SUM",
    lowerPercentile: { type: "number", min: 0, max: 100, value: 0 },
    upperPercentile: { type: "number", min: 0, max: 100, value: 100 },
    colorScaleType: "quantize",
    onSetColorDomain: noop5,
    // elevation
    elevationDomain: null,
    elevationRange: [0, 1e3],
    getElevationValue: { type: "accessor", value: null },
    // default value is calculated from `getElevationWeight` and `elevationAggregation`
    getElevationWeight: { type: "accessor", value: 1 },
    elevationAggregation: "SUM",
    elevationScale: { type: "number", min: 0, value: 1 },
    elevationLowerPercentile: { type: "number", min: 0, max: 100, value: 0 },
    elevationUpperPercentile: { type: "number", min: 0, max: 100, value: 100 },
    elevationScaleType: "linear",
    onSetElevationDomain: noop5,
    // hexbin
    radius: { type: "number", min: 1, value: 1e3 },
    coverage: { type: "number", min: 0, max: 1, value: 1 },
    getPosition: { type: "accessor", value: (x4) => x4.position },
    hexagonAggregator: { type: "function", optional: true, value: null },
    extruded: false,
    // Optional material for 'lighting' shader module
    material: true
  };
  var HexagonLayer = class extends AggregationLayer {
    getAggregatorType() {
      const { gpuAggregation, hexagonAggregator, getColorValue, getElevationValue } = this.props;
      if (gpuAggregation && (hexagonAggregator || getColorValue || getElevationValue)) {
        log_default.warn("Features not supported by GPU aggregation, falling back to CPU")();
        return "cpu";
      }
      if (
        // GPU aggregation is requested
        gpuAggregation && // GPU aggregation is supported by the device
        WebGLAggregator.isSupported(this.context.device)
      ) {
        return "gpu";
      }
      return "cpu";
    }
    createAggregator(type) {
      if (type === "cpu") {
        const { hexagonAggregator, radius } = this.props;
        return new CPUAggregator({
          dimensions: 2,
          getBin: {
            sources: ["positions"],
            getValue: ({ positions }, index, opts) => {
              if (hexagonAggregator) {
                return hexagonAggregator(positions, radius);
              }
              const viewport = this.state.aggregatorViewport;
              const p5 = viewport.projectPosition(positions);
              const { radiusCommon, hexOriginCommon } = opts;
              return pointToHexbin(
                [p5[0] - hexOriginCommon[0], p5[1] - hexOriginCommon[1]],
                radiusCommon
              );
            }
          },
          getValue: [
            { sources: ["colorWeights"], getValue: ({ colorWeights }) => colorWeights },
            { sources: ["elevationWeights"], getValue: ({ elevationWeights }) => elevationWeights }
          ]
        });
      }
      return new WebGLAggregator(this.context.device, {
        dimensions: 2,
        channelCount: 2,
        bufferLayout: this.getAttributeManager().getBufferLayouts({ isInstanced: false }),
        ...super.getShaders({
          modules: [project32_default, binOptionsUniforms2],
          vs: (
            /* glsl */
            `
  in vec3 positions;
  in vec3 positions64Low;
  in float colorWeights;
  in float elevationWeights;
  
  ${pointToHexbinGLSL}

  void getBin(out ivec2 binId) {
    vec3 positionCommon = project_position(positions, positions64Low);
    binId = pointToHexbin(positionCommon.xy, binOptions.radiusCommon);
  }
  void getValue(out vec2 value) {
    value = vec2(colorWeights, elevationWeights);
  }
  `
          )
        })
      });
    }
    initializeState() {
      super.initializeState();
      const attributeManager = this.getAttributeManager();
      attributeManager.add({
        positions: {
          size: 3,
          accessor: "getPosition",
          type: "float64",
          fp64: this.use64bitPositions()
        },
        colorWeights: { size: 1, accessor: "getColorWeight" },
        elevationWeights: { size: 1, accessor: "getElevationWeight" }
      });
    }
    // eslint-disable-next-line complexity
    updateState(params) {
      const aggregatorChanged = super.updateState(params);
      const { props, oldProps, changeFlags } = params;
      const { aggregator } = this.state;
      if ((changeFlags.dataChanged || !this.state.dataAsArray) && (props.getColorValue || props.getElevationValue)) {
        this.state.dataAsArray = Array.from(createIterable(props.data).iterable);
      }
      if (aggregatorChanged || changeFlags.dataChanged || props.radius !== oldProps.radius || props.getColorValue !== oldProps.getColorValue || props.getElevationValue !== oldProps.getElevationValue || props.colorAggregation !== oldProps.colorAggregation || props.elevationAggregation !== oldProps.elevationAggregation) {
        this._updateBinOptions();
        const { radiusCommon, hexOriginCommon, binIdRange, dataAsArray } = this.state;
        aggregator.setProps({
          // @ts-expect-error only used by GPUAggregator
          binIdRange,
          pointCount: this.getNumInstances(),
          operations: [props.colorAggregation, props.elevationAggregation],
          binOptions: {
            radiusCommon,
            hexOriginCommon
          },
          onUpdate: this._onAggregationUpdate.bind(this)
        });
        if (dataAsArray) {
          const { getColorValue, getElevationValue } = this.props;
          aggregator.setProps({
            // @ts-expect-error only used by CPUAggregator
            customOperations: [
              getColorValue && ((indices) => getColorValue(
                indices.map((i7) => dataAsArray[i7]),
                { indices, data: props.data }
              )),
              getElevationValue && ((indices) => getElevationValue(
                indices.map((i7) => dataAsArray[i7]),
                { indices, data: props.data }
              ))
            ]
          });
        }
      }
      if (changeFlags.updateTriggersChanged && changeFlags.updateTriggersChanged.getColorValue) {
        aggregator.setNeedsUpdate(0);
      }
      if (changeFlags.updateTriggersChanged && changeFlags.updateTriggersChanged.getElevationValue) {
        aggregator.setNeedsUpdate(1);
      }
      return aggregatorChanged;
    }
    _updateBinOptions() {
      const bounds = this.getBounds();
      let radiusCommon = 1;
      let hexOriginCommon = [0, 0];
      let binIdRange = [
        [0, 1],
        [0, 1]
      ];
      let viewport = this.context.viewport;
      if (bounds && Number.isFinite(bounds[0][0])) {
        let centroid = [(bounds[0][0] + bounds[1][0]) / 2, (bounds[0][1] + bounds[1][1]) / 2];
        const { radius } = this.props;
        const { unitsPerMeter: unitsPerMeter2 } = viewport.getDistanceScales(centroid);
        radiusCommon = unitsPerMeter2[0] * radius;
        const centerHex = pointToHexbin(viewport.projectFlat(centroid), radiusCommon);
        centroid = viewport.unprojectFlat(getHexbinCentroid(centerHex, radiusCommon));
        const ViewportType = viewport.constructor;
        viewport = viewport.isGeospatial ? new ViewportType({ longitude: centroid[0], latitude: centroid[1], zoom: 12 }) : new Viewport({ position: [centroid[0], centroid[1], 0], zoom: 12 });
        hexOriginCommon = [Math.fround(viewport.center[0]), Math.fround(viewport.center[1])];
        binIdRange = getBinIdRange({
          dataBounds: bounds,
          getBinId: (p5) => {
            const positionCommon = viewport.projectFlat(p5);
            positionCommon[0] -= hexOriginCommon[0];
            positionCommon[1] -= hexOriginCommon[1];
            return pointToHexbin(positionCommon, radiusCommon);
          },
          padding: 1
        });
      }
      this.setState({ radiusCommon, hexOriginCommon, binIdRange, aggregatorViewport: viewport });
    }
    draw(opts) {
      if (opts.shaderModuleProps.project) {
        opts.shaderModuleProps.project.viewport = this.state.aggregatorViewport;
      }
      super.draw(opts);
    }
    _onAggregationUpdate({ channel }) {
      const props = this.getCurrentLayer().props;
      const { aggregator } = this.state;
      if (channel === 0) {
        const result = aggregator.getResult(0);
        this.setState({
          colors: new AttributeWithScale(result, aggregator.binCount)
        });
        props.onSetColorDomain(aggregator.getResultDomain(0));
      } else if (channel === 1) {
        const result = aggregator.getResult(1);
        this.setState({
          elevations: new AttributeWithScale(result, aggregator.binCount)
        });
        props.onSetElevationDomain(aggregator.getResultDomain(1));
      }
    }
    onAttributeChange(id) {
      const { aggregator } = this.state;
      switch (id) {
        case "positions":
          aggregator.setNeedsUpdate();
          this._updateBinOptions();
          const { radiusCommon, hexOriginCommon, binIdRange } = this.state;
          aggregator.setProps({
            // @ts-expect-error only used by GPUAggregator
            binIdRange,
            binOptions: {
              radiusCommon,
              hexOriginCommon
            }
          });
          break;
        case "colorWeights":
          aggregator.setNeedsUpdate(0);
          break;
        case "elevationWeights":
          aggregator.setNeedsUpdate(1);
          break;
        default:
      }
    }
    renderLayers() {
      const { aggregator, radiusCommon, hexOriginCommon } = this.state;
      const {
        elevationScale,
        colorRange,
        elevationRange,
        extruded,
        coverage,
        material,
        transitions,
        colorScaleType,
        lowerPercentile,
        upperPercentile,
        colorDomain,
        elevationScaleType,
        elevationLowerPercentile,
        elevationUpperPercentile,
        elevationDomain
      } = this.props;
      const CellLayerClass = this.getSubLayerClass("cells", HexagonCellLayer);
      const binAttribute = aggregator.getBins();
      const colors = this.state.colors?.update({
        scaleType: colorScaleType,
        lowerPercentile,
        upperPercentile
      });
      const elevations = this.state.elevations?.update({
        scaleType: elevationScaleType,
        lowerPercentile: elevationLowerPercentile,
        upperPercentile: elevationUpperPercentile
      });
      if (!colors || !elevations) {
        return null;
      }
      return new CellLayerClass(
        this.getSubLayerProps({
          id: "cells"
        }),
        {
          data: {
            length: aggregator.binCount,
            attributes: {
              getBin: binAttribute,
              getColorValue: colors.attribute,
              getElevationValue: elevations.attribute
            }
          },
          // Data has changed shallowly, but we likely don't need to update the attributes
          dataComparator: (data, oldData) => data.length === oldData.length,
          updateTriggers: {
            getBin: [binAttribute],
            getColorValue: [colors.attribute],
            getElevationValue: [elevations.attribute]
          },
          diskResolution: 6,
          vertices: HexbinVertices,
          radius: radiusCommon,
          hexOriginCommon,
          elevationScale,
          colorRange,
          colorScaleType,
          elevationRange,
          extruded,
          coverage,
          material,
          colorDomain: colors.domain || colorDomain || aggregator.getResultDomain(0),
          elevationDomain: elevations.domain || elevationDomain || aggregator.getResultDomain(1),
          colorCutoff: colors.cutoff,
          elevationCutoff: elevations.cutoff,
          transitions: transitions && {
            getFillColor: transitions.getColorValue || transitions.getColorWeight,
            getElevation: transitions.getElevationValue || transitions.getElevationWeight
          },
          // Extensions are already handled by the GPUAggregator, do not pass it down
          extensions: []
        }
      );
    }
    getPickingInfo(params) {
      const info = params.info;
      const { index } = info;
      if (index >= 0) {
        const bin = this.state.aggregator.getBin(index);
        let object;
        if (bin) {
          const centroidCommon = getHexbinCentroid(
            bin.id,
            this.state.radiusCommon
          );
          const centroid = this.context.viewport.unprojectFlat(centroidCommon);
          object = {
            col: bin.id[0],
            row: bin.id[1],
            position: centroid,
            colorValue: bin.value[0],
            elevationValue: bin.value[1],
            count: bin.count
          };
          if (bin.pointIndices) {
            object.pointIndices = bin.pointIndices;
            object.points = Array.isArray(this.props.data) ? bin.pointIndices.map((i7) => this.props.data[i7]) : [];
          }
        }
        info.object = object;
      }
      return info;
    }
  };
  HexagonLayer.layerName = "HexagonLayer";
  HexagonLayer.defaultProps = defaultProps44;

  // ../aggregation-layers/src/contour-layer/marching-squares-codes.ts
  var HALF = 0.5;
  var ONE6TH = 1 / 6;
  var OFFSET = {
    N: [0, HALF],
    // NORTH
    E: [HALF, 0],
    // EAST
    S: [0, -HALF],
    // SOUTH
    W: [-HALF, 0],
    // WEST
    // CORNERS
    NE: [HALF, HALF],
    NW: [-HALF, HALF],
    SE: [HALF, -HALF],
    SW: [-HALF, -HALF]
  };
  var SW_TRIANGLE = [OFFSET.W, OFFSET.SW, OFFSET.S];
  var SE_TRIANGLE = [OFFSET.S, OFFSET.SE, OFFSET.E];
  var NE_TRIANGLE = [OFFSET.E, OFFSET.NE, OFFSET.N];
  var NW_TRIANGLE = [OFFSET.NW, OFFSET.W, OFFSET.N];
  var SW_TRAPEZOID = [
    [-HALF, ONE6TH],
    [-HALF, -ONE6TH],
    [-ONE6TH, -HALF],
    [ONE6TH, -HALF]
  ];
  var SE_TRAPEZOID = [
    [-ONE6TH, -HALF],
    [ONE6TH, -HALF],
    [HALF, -ONE6TH],
    [HALF, ONE6TH]
  ];
  var NE_TRAPEZOID = [
    [HALF, -ONE6TH],
    [HALF, ONE6TH],
    [ONE6TH, HALF],
    [-ONE6TH, HALF]
  ];
  var NW_TRAPEZOID = [
    [-HALF, ONE6TH],
    [-HALF, -ONE6TH],
    [ONE6TH, HALF],
    [-ONE6TH, HALF]
  ];
  var S_RECTANGLE = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.E];
  var E_RECTANGLE = [OFFSET.S, OFFSET.SE, OFFSET.NE, OFFSET.N];
  var N_RECTANGLE = [OFFSET.NW, OFFSET.W, OFFSET.E, OFFSET.NE];
  var W_RECTANGLE = [OFFSET.NW, OFFSET.SW, OFFSET.S, OFFSET.N];
  var EW_RECTANGEL = [
    [-HALF, ONE6TH],
    [-HALF, -ONE6TH],
    [HALF, -ONE6TH],
    [HALF, ONE6TH]
  ];
  var SN_RECTANGEL = [
    [-ONE6TH, -HALF],
    [ONE6TH, -HALF],
    [ONE6TH, HALF],
    [-ONE6TH, HALF]
  ];
  var SQUARE = [OFFSET.NW, OFFSET.SW, OFFSET.SE, OFFSET.NE];
  var SW_PENTAGON = [OFFSET.NW, OFFSET.SW, OFFSET.SE, OFFSET.E, OFFSET.N];
  var SE_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.NE, OFFSET.N];
  var NE_PENTAGON = [OFFSET.NW, OFFSET.W, OFFSET.S, OFFSET.SE, OFFSET.NE];
  var NW_PENTAGON = [OFFSET.NW, OFFSET.SW, OFFSET.S, OFFSET.E, OFFSET.NE];
  var NW_N_PENTAGON = [OFFSET.NW, OFFSET.W, [HALF, -ONE6TH], [HALF, ONE6TH], OFFSET.N];
  var NE_E_PENTAGON = [[-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.E, OFFSET.NE, OFFSET.N];
  var SE_S_PENTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.S, OFFSET.SE, OFFSET.E];
  var SW_W_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, [ONE6TH, HALF], [-ONE6TH, HALF]];
  var NW_W_PENTAGON = [OFFSET.NW, OFFSET.W, [-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.N];
  var NE_N_PENTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.E, OFFSET.NE, OFFSET.N];
  var SE_E_PENTAGON = [OFFSET.S, OFFSET.SE, OFFSET.E, [ONE6TH, HALF], [-ONE6TH, HALF]];
  var SW_S_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, [HALF, -ONE6TH], [HALF, ONE6TH]];
  var S_HEXAGON = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.E, [ONE6TH, HALF], [-ONE6TH, HALF]];
  var E_HEXAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.S, OFFSET.SE, OFFSET.NE, OFFSET.N];
  var N_HEXAGON = [OFFSET.NW, OFFSET.W, [-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.E, OFFSET.NE];
  var W_HEXAGON = [OFFSET.NW, OFFSET.SW, OFFSET.S, [HALF, -ONE6TH], [HALF, ONE6TH], OFFSET.N];
  var SW_NE_HEXAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, OFFSET.E, OFFSET.NE, OFFSET.N];
  var NW_SE_HEXAGON = [OFFSET.NW, OFFSET.W, OFFSET.S, OFFSET.SE, OFFSET.E, OFFSET.N];
  var NE_HEPTAGON = [
    [-HALF, ONE6TH],
    [-HALF, -ONE6TH],
    [-ONE6TH, -HALF],
    [ONE6TH, -HALF],
    OFFSET.E,
    OFFSET.NE,
    OFFSET.N
  ];
  var SW_HEPTAGON = [
    OFFSET.W,
    OFFSET.SW,
    OFFSET.S,
    [HALF, -ONE6TH],
    [HALF, ONE6TH],
    [ONE6TH, HALF],
    [-ONE6TH, HALF]
  ];
  var NW_HEPTAGON = [
    OFFSET.NW,
    OFFSET.W,
    [-ONE6TH, -HALF],
    [ONE6TH, -HALF],
    [HALF, -ONE6TH],
    [HALF, ONE6TH],
    OFFSET.N
  ];
  var SE_HEPTAGON = [
    [-HALF, ONE6TH],
    [-HALF, -ONE6TH],
    OFFSET.S,
    OFFSET.SE,
    OFFSET.E,
    [ONE6TH, HALF],
    [-ONE6TH, HALF]
  ];
  var OCTAGON = [
    [-HALF, ONE6TH],
    [-HALF, -ONE6TH],
    [-ONE6TH, -HALF],
    [ONE6TH, -HALF],
    [HALF, -ONE6TH],
    [HALF, ONE6TH],
    [ONE6TH, HALF],
    [-ONE6TH, HALF]
  ];
  var ISOLINES_CODE_OFFSET_MAP = {
    // key is equal to the code of 4 vertices (invert the code specified in wiki)
    // value can be an array or an Object
    // Array : [line] or [line, line], where each line is [start-point, end-point], and each point is [x, y]
    // Object : to handle saddle cases, whos output depends on mean value of all 4 corners
    //  key: code of mean value (0 or 1)
    //  value: Array , as above defines one or two line segments
    0: [],
    1: [[OFFSET.W, OFFSET.S]],
    2: [[OFFSET.S, OFFSET.E]],
    3: [[OFFSET.W, OFFSET.E]],
    4: [[OFFSET.N, OFFSET.E]],
    5: {
      0: [
        [OFFSET.W, OFFSET.S],
        [OFFSET.N, OFFSET.E]
      ],
      1: [
        [OFFSET.W, OFFSET.N],
        [OFFSET.S, OFFSET.E]
      ]
    },
    6: [[OFFSET.N, OFFSET.S]],
    7: [[OFFSET.W, OFFSET.N]],
    8: [[OFFSET.W, OFFSET.N]],
    9: [[OFFSET.N, OFFSET.S]],
    10: {
      0: [
        [OFFSET.W, OFFSET.N],
        [OFFSET.S, OFFSET.E]
      ],
      1: [
        [OFFSET.W, OFFSET.S],
        [OFFSET.N, OFFSET.E]
      ]
    },
    11: [[OFFSET.N, OFFSET.E]],
    12: [[OFFSET.W, OFFSET.E]],
    13: [[OFFSET.S, OFFSET.E]],
    14: [[OFFSET.W, OFFSET.S]],
    15: []
  };
  function ternaryToIndex(ternary) {
    return parseInt(ternary, 4);
  }
  var ISOBANDS_CODE_OFFSET_MAP = {
    // Below list of cases, follow the same order as in above mentioned wiki page.
    // Each case has its code on first commented line // T,TR,R,C
    // where T: Top, TR: Top-right, R: Right and C: current, each will be either 0, 1 or 2
    // final code is binary representation of above code , where takes 2 digits
    // for example:  code 2-2-2-1 => 10-10-10-01 => 10101001 => 169
    // no contours
    [ternaryToIndex("0000")]: [],
    [ternaryToIndex("2222")]: [],
    // single triangle
    [ternaryToIndex("2221")]: [SW_TRIANGLE],
    [ternaryToIndex("2212")]: [SE_TRIANGLE],
    [ternaryToIndex("2122")]: [NE_TRIANGLE],
    [ternaryToIndex("1222")]: [NW_TRIANGLE],
    [ternaryToIndex("0001")]: [SW_TRIANGLE],
    [ternaryToIndex("0010")]: [SE_TRIANGLE],
    [ternaryToIndex("0100")]: [NE_TRIANGLE],
    [ternaryToIndex("1000")]: [NW_TRIANGLE],
    // single trapezoid
    [ternaryToIndex("2220")]: [SW_TRAPEZOID],
    [ternaryToIndex("2202")]: [SE_TRAPEZOID],
    [ternaryToIndex("2022")]: [NE_TRAPEZOID],
    [ternaryToIndex("0222")]: [NW_TRAPEZOID],
    [ternaryToIndex("0002")]: [SW_TRAPEZOID],
    [ternaryToIndex("0020")]: [SE_TRAPEZOID],
    [ternaryToIndex("0200")]: [NE_TRAPEZOID],
    [ternaryToIndex("2000")]: [NW_TRAPEZOID],
    // single rectangle
    [ternaryToIndex("0011")]: [S_RECTANGLE],
    [ternaryToIndex("0110")]: [E_RECTANGLE],
    [ternaryToIndex("1100")]: [N_RECTANGLE],
    [ternaryToIndex("1001")]: [W_RECTANGLE],
    [ternaryToIndex("2211")]: [S_RECTANGLE],
    [ternaryToIndex("2112")]: [E_RECTANGLE],
    [ternaryToIndex("1122")]: [N_RECTANGLE],
    [ternaryToIndex("1221")]: [W_RECTANGLE],
    [ternaryToIndex("2200")]: [EW_RECTANGEL],
    [ternaryToIndex("2002")]: [SN_RECTANGEL],
    [ternaryToIndex("0022")]: [EW_RECTANGEL],
    [ternaryToIndex("0220")]: [SN_RECTANGEL],
    // single square
    // 1111
    [ternaryToIndex("1111")]: [SQUARE],
    // single pentagon
    [ternaryToIndex("1211")]: [SW_PENTAGON],
    [ternaryToIndex("2111")]: [SE_PENTAGON],
    [ternaryToIndex("1112")]: [NE_PENTAGON],
    [ternaryToIndex("1121")]: [NW_PENTAGON],
    [ternaryToIndex("1011")]: [SW_PENTAGON],
    [ternaryToIndex("0111")]: [SE_PENTAGON],
    [ternaryToIndex("1110")]: [NE_PENTAGON],
    [ternaryToIndex("1101")]: [NW_PENTAGON],
    [ternaryToIndex("1200")]: [NW_N_PENTAGON],
    [ternaryToIndex("0120")]: [NE_E_PENTAGON],
    [ternaryToIndex("0012")]: [SE_S_PENTAGON],
    [ternaryToIndex("2001")]: [SW_W_PENTAGON],
    [ternaryToIndex("1022")]: [NW_N_PENTAGON],
    [ternaryToIndex("2102")]: [NE_E_PENTAGON],
    [ternaryToIndex("2210")]: [SE_S_PENTAGON],
    [ternaryToIndex("0221")]: [SW_W_PENTAGON],
    [ternaryToIndex("1002")]: [NW_W_PENTAGON],
    [ternaryToIndex("2100")]: [NE_N_PENTAGON],
    [ternaryToIndex("0210")]: [SE_E_PENTAGON],
    [ternaryToIndex("0021")]: [SW_S_PENTAGON],
    [ternaryToIndex("1220")]: [NW_W_PENTAGON],
    [ternaryToIndex("0122")]: [NE_N_PENTAGON],
    [ternaryToIndex("2012")]: [SE_E_PENTAGON],
    [ternaryToIndex("2201")]: [SW_S_PENTAGON],
    // single hexagon
    [ternaryToIndex("0211")]: [S_HEXAGON],
    [ternaryToIndex("2110")]: [E_HEXAGON],
    [ternaryToIndex("1102")]: [N_HEXAGON],
    [ternaryToIndex("1021")]: [W_HEXAGON],
    [ternaryToIndex("2011")]: [S_HEXAGON],
    [ternaryToIndex("0112")]: [E_HEXAGON],
    [ternaryToIndex("1120")]: [N_HEXAGON],
    [ternaryToIndex("1201")]: [W_HEXAGON],
    [ternaryToIndex("2101")]: [SW_NE_HEXAGON],
    [ternaryToIndex("0121")]: [SW_NE_HEXAGON],
    [ternaryToIndex("1012")]: [NW_SE_HEXAGON],
    [ternaryToIndex("1210")]: [NW_SE_HEXAGON],
    // 6-sided polygons based on mean weight
    // NOTE: merges mean value codes for extreme changes (as per above Wiki doc)
    [ternaryToIndex("0101")]: {
      0: [SW_TRIANGLE, NE_TRIANGLE],
      1: [SW_NE_HEXAGON],
      2: [SW_NE_HEXAGON]
    },
    [ternaryToIndex("1010")]: {
      0: [NW_TRIANGLE, SE_TRIANGLE],
      1: [NW_SE_HEXAGON],
      2: [NW_SE_HEXAGON]
    },
    [ternaryToIndex("2121")]: {
      0: [SW_NE_HEXAGON],
      1: [SW_NE_HEXAGON],
      2: [SW_TRIANGLE, NE_TRIANGLE]
    },
    [ternaryToIndex("1212")]: {
      0: [NW_SE_HEXAGON],
      1: [NW_SE_HEXAGON],
      2: [NW_TRIANGLE, SE_TRIANGLE]
    },
    // 7-sided polygons based on mean weight
    [ternaryToIndex("2120")]: {
      0: [NE_HEPTAGON],
      1: [NE_HEPTAGON],
      2: [SW_TRAPEZOID, NE_TRIANGLE]
    },
    [ternaryToIndex("2021")]: {
      0: [SW_HEPTAGON],
      1: [SW_HEPTAGON],
      2: [SW_TRIANGLE, NE_TRAPEZOID]
    },
    [ternaryToIndex("1202")]: {
      0: [NW_HEPTAGON],
      1: [NW_HEPTAGON],
      2: [NW_TRIANGLE, SE_TRAPEZOID]
    },
    [ternaryToIndex("0212")]: {
      0: [SE_HEPTAGON],
      1: [SE_HEPTAGON],
      2: [SE_TRIANGLE, NW_TRAPEZOID]
    },
    [ternaryToIndex("0102")]: {
      0: [SW_TRAPEZOID, NE_TRIANGLE],
      1: [NE_HEPTAGON],
      2: [NE_HEPTAGON]
    },
    [ternaryToIndex("0201")]: {
      0: [SW_TRIANGLE, NE_TRAPEZOID],
      1: [SW_HEPTAGON],
      2: [SW_HEPTAGON]
    },
    [ternaryToIndex("1020")]: {
      0: [NW_TRIANGLE, SE_TRAPEZOID],
      1: [NW_HEPTAGON],
      2: [NW_HEPTAGON]
    },
    [ternaryToIndex("2010")]: {
      0: [SE_TRIANGLE, NW_TRAPEZOID],
      1: [SE_HEPTAGON],
      2: [SE_HEPTAGON]
    },
    // 8-sided polygons based on mean weight
    [ternaryToIndex("2020")]: {
      0: [NW_TRAPEZOID, SE_TRAPEZOID],
      1: [OCTAGON],
      2: [SW_TRAPEZOID, NE_TRAPEZOID]
    },
    [ternaryToIndex("0202")]: {
      0: [NE_TRAPEZOID, SW_TRAPEZOID],
      1: [OCTAGON],
      2: [NW_TRAPEZOID, SE_TRAPEZOID]
    }
  };

  // ../aggregation-layers/src/contour-layer/marching-squares.ts
  function getVertexCode(weight, threshold2) {
    if (Number.isNaN(weight)) {
      return 0;
    }
    if (Array.isArray(threshold2)) {
      if (weight < threshold2[0]) {
        return 0;
      }
      return weight < threshold2[1] ? 1 : 2;
    }
    return weight >= threshold2 ? 1 : 0;
  }
  function getCode(opts) {
    const { x: x4, y: y5, xRange, yRange, getValue: getValue2, threshold: threshold2 } = opts;
    const isLeftBoundary = x4 < xRange[0];
    const isRightBoundary = x4 >= xRange[1] - 1;
    const isBottomBoundary = y5 < yRange[0];
    const isTopBoundary = y5 >= yRange[1] - 1;
    const isBoundary = isLeftBoundary || isRightBoundary || isBottomBoundary || isTopBoundary;
    let weights = 0;
    let current;
    let right;
    let top;
    let topRight;
    if (isLeftBoundary || isTopBoundary) {
      top = 0;
    } else {
      const w5 = getValue2(x4, y5 + 1);
      top = getVertexCode(w5, threshold2);
      weights += w5;
    }
    if (isRightBoundary || isTopBoundary) {
      topRight = 0;
    } else {
      const w5 = getValue2(x4 + 1, y5 + 1);
      topRight = getVertexCode(w5, threshold2);
      weights += w5;
    }
    if (isRightBoundary || isBottomBoundary) {
      right = 0;
    } else {
      const w5 = getValue2(x4 + 1, y5);
      right = getVertexCode(w5, threshold2);
      weights += w5;
    }
    if (isLeftBoundary || isBottomBoundary) {
      current = 0;
    } else {
      const w5 = getValue2(x4, y5);
      current = getVertexCode(w5, threshold2);
      weights += w5;
    }
    let code = -1;
    if (Number.isFinite(threshold2)) {
      code = top << 3 | topRight << 2 | right << 1 | current;
    }
    if (Array.isArray(threshold2)) {
      code = top << 6 | topRight << 4 | right << 2 | current;
    }
    let meanCode = 0;
    if (!isBoundary) {
      meanCode = getVertexCode(weights / 4, threshold2);
    }
    return { code, meanCode };
  }
  function getPolygons(opts) {
    const { x: x4, y: y5, z: z4, code, meanCode } = opts;
    let offsets = ISOBANDS_CODE_OFFSET_MAP[code];
    if (!Array.isArray(offsets)) {
      offsets = offsets[meanCode];
    }
    const rX = x4 + 1;
    const rY = y5 + 1;
    const polygons = [];
    offsets.forEach((polygonOffsets) => {
      const polygon = [];
      polygonOffsets.forEach((xyOffset) => {
        const vX = rX + xyOffset[0];
        const vY = rY + xyOffset[1];
        polygon.push([vX, vY, z4]);
      });
      polygons.push(polygon);
    });
    return polygons;
  }
  function getLines(opts) {
    const { x: x4, y: y5, z: z4, code, meanCode } = opts;
    let offsets = ISOLINES_CODE_OFFSET_MAP[code];
    if (!Array.isArray(offsets)) {
      offsets = offsets[meanCode];
    }
    const rX = x4 + 1;
    const rY = y5 + 1;
    const lines = [];
    offsets.forEach((xyOffsets) => {
      xyOffsets.forEach((offset) => {
        const vX = rX + offset[0];
        const vY = rY + offset[1];
        lines.push([vX, vY, z4]);
      });
    });
    return lines;
  }

  // ../aggregation-layers/src/contour-layer/contour-utils.ts
  function generateContours({
    contours,
    getValue: getValue2,
    xRange,
    yRange
  }) {
    const contourLines = [];
    const contourPolygons = [];
    let segmentIndex = 0;
    let polygonIndex = 0;
    for (let i7 = 0; i7 < contours.length; i7++) {
      const contour = contours[i7];
      const z4 = contour.zIndex ?? i7;
      const { threshold: threshold2 } = contour;
      for (let x4 = xRange[0] - 1; x4 < xRange[1]; x4++) {
        for (let y5 = yRange[0] - 1; y5 < yRange[1]; y5++) {
          const { code, meanCode } = getCode({
            getValue: getValue2,
            threshold: threshold2,
            x: x4,
            y: y5,
            xRange,
            yRange
          });
          const opts = {
            x: x4,
            y: y5,
            z: z4,
            code,
            meanCode
          };
          if (Array.isArray(threshold2)) {
            const polygons = getPolygons(opts);
            for (const polygon of polygons) {
              contourPolygons[polygonIndex++] = {
                vertices: polygon,
                contour
              };
            }
          } else {
            const path = getLines(opts);
            if (path.length > 0) {
              contourLines[segmentIndex++] = {
                vertices: path,
                contour
              };
            }
          }
        }
      }
    }
    return { lines: contourLines, polygons: contourPolygons };
  }

  // ../aggregation-layers/src/contour-layer/value-reader.ts
  function getAggregatorValueReader(opts) {
    const { aggregator, binIdRange, channel } = opts;
    if (aggregator instanceof WebGLAggregator) {
      const buffer = aggregator.getResult(channel)?.buffer;
      if (buffer) {
        const values = new Float32Array(buffer.readSyncWebGL().buffer);
        return getWebGLAggregatorValueReader(values, binIdRange);
      }
    }
    if (aggregator instanceof CPUAggregator) {
      const values = aggregator.getResult(channel)?.value;
      const ids = aggregator.getBins()?.value;
      if (ids && values) {
        return getCPUAggregatorValueReader(values, ids, aggregator.binCount);
      }
    }
    return null;
  }
  function getWebGLAggregatorValueReader(values, binIdRange) {
    const [[minX, maxX], [minY, maxY]] = binIdRange;
    const width = maxX - minX;
    const height = maxY - minY;
    return (x4, y5) => {
      x4 -= minX;
      y5 -= minY;
      if (x4 < 0 || x4 >= width || y5 < 0 || y5 >= height) {
        return NaN;
      }
      return values[y5 * width + x4];
    };
  }
  function getCPUAggregatorValueReader(values, ids, count3) {
    const idMap = {};
    for (let i7 = 0; i7 < count3; i7++) {
      const x4 = ids[i7 * 2];
      const y5 = ids[i7 * 2 + 1];
      idMap[x4] = idMap[x4] || {};
      idMap[x4][y5] = values[i7];
    }
    return (x4, y5) => idMap[x4]?.[y5] ?? NaN;
  }

  // ../aggregation-layers/src/contour-layer/bin-options-uniforms.ts
  var uniformBlock30 = (
    /* glsl */
    `uniform binOptionsUniforms {
  vec2 cellOriginCommon;
  vec2 cellSizeCommon;
} binOptions;
`
  );
  var binOptionsUniforms3 = {
    name: "binOptions",
    vs: uniformBlock30,
    uniformTypes: {
      cellOriginCommon: "vec2<f32>",
      cellSizeCommon: "vec2<f32>"
    }
  };

  // ../aggregation-layers/src/contour-layer/contour-layer.ts
  var DEFAULT_COLOR12 = [255, 255, 255, 255];
  var DEFAULT_STROKE_WIDTH = 1;
  var defaultProps45 = {
    // grid aggregation
    cellSize: { type: "number", min: 1, value: 1e3 },
    gridOrigin: { type: "array", compare: true, value: [0, 0] },
    getPosition: { type: "accessor", value: (x4) => x4.position },
    getWeight: { type: "accessor", value: 1 },
    gpuAggregation: true,
    aggregation: "SUM",
    // contour lines
    contours: {
      type: "object",
      value: [{ threshold: 1 }],
      optional: true,
      compare: 3
    },
    zOffset: 5e-3
  };
  var GridLayer = class extends AggregationLayer {
    getAggregatorType() {
      return this.props.gpuAggregation && WebGLAggregator.isSupported(this.context.device) ? "gpu" : "cpu";
    }
    createAggregator(type) {
      if (type === "cpu") {
        return new CPUAggregator({
          dimensions: 2,
          getBin: {
            sources: ["positions"],
            getValue: ({ positions }, index, opts) => {
              const viewport = this.state.aggregatorViewport;
              const p5 = viewport.projectPosition(positions);
              const { cellSizeCommon, cellOriginCommon } = opts;
              return [
                Math.floor((p5[0] - cellOriginCommon[0]) / cellSizeCommon[0]),
                Math.floor((p5[1] - cellOriginCommon[1]) / cellSizeCommon[1])
              ];
            }
          },
          getValue: [{ sources: ["counts"], getValue: ({ counts }) => counts }],
          onUpdate: this._onAggregationUpdate.bind(this)
        });
      }
      return new WebGLAggregator(this.context.device, {
        dimensions: 2,
        channelCount: 1,
        bufferLayout: this.getAttributeManager().getBufferLayouts({ isInstanced: false }),
        ...super.getShaders({
          modules: [project32_default, binOptionsUniforms3],
          vs: (
            /* glsl */
            `
  in vec3 positions;
  in vec3 positions64Low;
  in float counts;

  void getBin(out ivec2 binId) {
    vec3 positionCommon = project_position(positions, positions64Low);
    vec2 gridCoords = floor(positionCommon.xy / binOptions.cellSizeCommon);
    binId = ivec2(gridCoords);
  }
  void getValue(out float value) {
    value = counts;
  }
  `
          )
        }),
        onUpdate: this._onAggregationUpdate.bind(this)
      });
    }
    initializeState() {
      super.initializeState();
      const attributeManager = this.getAttributeManager();
      attributeManager.add({
        positions: {
          size: 3,
          accessor: "getPosition",
          type: "float64",
          fp64: this.use64bitPositions()
        },
        counts: { size: 1, accessor: "getWeight" }
      });
    }
    updateState(params) {
      const aggregatorChanged = super.updateState(params);
      const { props, oldProps, changeFlags } = params;
      const { aggregator } = this.state;
      if (aggregatorChanged || changeFlags.dataChanged || props.cellSize !== oldProps.cellSize || !deepEqual2(props.gridOrigin, oldProps.gridOrigin, 1) || props.aggregation !== oldProps.aggregation) {
        this._updateBinOptions();
        const { cellSizeCommon, cellOriginCommon, binIdRange } = this.state;
        aggregator.setProps({
          // @ts-expect-error only used by GPUAggregator
          binIdRange,
          pointCount: this.getNumInstances(),
          operations: [props.aggregation],
          binOptions: {
            cellSizeCommon,
            cellOriginCommon
          }
        });
      }
      if (!deepEqual2(oldProps.contours, props.contours, 2)) {
        this.setState({ contourData: null });
      }
      return aggregatorChanged;
    }
    _updateBinOptions() {
      const bounds = this.getBounds();
      const cellSizeCommon = [1, 1];
      let cellOriginCommon = [0, 0];
      let binIdRange = [
        [0, 1],
        [0, 1]
      ];
      let viewport = this.context.viewport;
      if (bounds && Number.isFinite(bounds[0][0])) {
        let centroid = [(bounds[0][0] + bounds[1][0]) / 2, (bounds[0][1] + bounds[1][1]) / 2];
        const { cellSize, gridOrigin } = this.props;
        const { unitsPerMeter: unitsPerMeter2 } = viewport.getDistanceScales(centroid);
        cellSizeCommon[0] = unitsPerMeter2[0] * cellSize;
        cellSizeCommon[1] = unitsPerMeter2[1] * cellSize;
        const centroidCommon = viewport.projectFlat(centroid);
        cellOriginCommon = [
          Math.floor((centroidCommon[0] - gridOrigin[0]) / cellSizeCommon[0]) * cellSizeCommon[0] + gridOrigin[0],
          Math.floor((centroidCommon[1] - gridOrigin[1]) / cellSizeCommon[1]) * cellSizeCommon[1] + gridOrigin[1]
        ];
        centroid = viewport.unprojectFlat(cellOriginCommon);
        const ViewportType = viewport.constructor;
        viewport = viewport.isGeospatial ? new ViewportType({ longitude: centroid[0], latitude: centroid[1], zoom: 12 }) : new Viewport({ position: [centroid[0], centroid[1], 0], zoom: 12 });
        cellOriginCommon = [Math.fround(viewport.center[0]), Math.fround(viewport.center[1])];
        binIdRange = getBinIdRange({
          dataBounds: bounds,
          getBinId: (p5) => {
            const positionCommon = viewport.projectFlat(p5);
            return [
              Math.floor((positionCommon[0] - cellOriginCommon[0]) / cellSizeCommon[0]),
              Math.floor((positionCommon[1] - cellOriginCommon[1]) / cellSizeCommon[1])
            ];
          }
        });
      }
      this.setState({ cellSizeCommon, cellOriginCommon, binIdRange, aggregatorViewport: viewport });
    }
    draw(opts) {
      if (opts.shaderModuleProps.project) {
        opts.shaderModuleProps.project.viewport = this.state.aggregatorViewport;
      }
      super.draw(opts);
    }
    _onAggregationUpdate() {
      const { aggregator, binIdRange } = this.state;
      this.setState({
        aggregatedValueReader: getAggregatorValueReader({ aggregator, binIdRange, channel: 0 }),
        contourData: null
      });
    }
    _getContours() {
      const { aggregatedValueReader } = this.state;
      if (!aggregatedValueReader) {
        return null;
      }
      if (!this.state.contourData) {
        const { binIdRange } = this.state;
        const { contours } = this.props;
        const contourData = generateContours({
          contours,
          getValue: aggregatedValueReader,
          xRange: binIdRange[0],
          yRange: binIdRange[1]
        });
        this.state.contourData = contourData;
      }
      return this.state.contourData;
    }
    onAttributeChange(id) {
      const { aggregator } = this.state;
      switch (id) {
        case "positions":
          aggregator.setNeedsUpdate();
          this._updateBinOptions();
          const { cellSizeCommon, cellOriginCommon, binIdRange } = this.state;
          aggregator.setProps({
            // @ts-expect-error only used by GPUAggregator
            binIdRange,
            binOptions: {
              cellSizeCommon,
              cellOriginCommon
            }
          });
          break;
        case "counts":
          aggregator.setNeedsUpdate(0);
          break;
        default:
      }
    }
    renderLayers() {
      const contourData = this._getContours();
      if (!contourData) {
        return null;
      }
      const { lines, polygons } = contourData;
      const { zOffset } = this.props;
      const { cellOriginCommon, cellSizeCommon } = this.state;
      const LinesSubLayerClass = this.getSubLayerClass("lines", PathLayer);
      const BandsSubLayerClass = this.getSubLayerClass("bands", SolidPolygonLayer);
      const modelMatrix2 = new Matrix4().translate([cellOriginCommon[0], cellOriginCommon[1], 0]).scale([cellSizeCommon[0], cellSizeCommon[1], zOffset]);
      const lineLayer = lines && lines.length > 0 && new LinesSubLayerClass(
        this.getSubLayerProps({
          id: "lines"
        }),
        {
          data: lines,
          coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,
          modelMatrix: modelMatrix2,
          getPath: (d5) => d5.vertices,
          getColor: (d5) => d5.contour.color ?? DEFAULT_COLOR12,
          getWidth: (d5) => d5.contour.strokeWidth ?? DEFAULT_STROKE_WIDTH,
          widthUnits: "pixels"
        }
      );
      const bandsLayer = polygons && polygons.length > 0 && new BandsSubLayerClass(
        this.getSubLayerProps({
          id: "bands"
        }),
        {
          data: polygons,
          coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,
          modelMatrix: modelMatrix2,
          getPolygon: (d5) => d5.vertices,
          getFillColor: (d5) => d5.contour.color ?? DEFAULT_COLOR12
        }
      );
      return [lineLayer, bandsLayer];
    }
    getPickingInfo(params) {
      const info = params.info;
      const { object } = info;
      if (object) {
        info.object = {
          contour: object.contour
        };
      }
      return info;
    }
  };
  GridLayer.layerName = "ContourLayer";
  GridLayer.defaultProps = defaultProps45;

  // ../aggregation-layers/src/grid-layer/grid-cell-layer-vertex.glsl.ts
  var grid_cell_layer_vertex_glsl_default = (
    /* glsl */
    `#version 300 es

#define SHADER_NAME grid-cell-layer-vertex-shader

in vec3 positions;
in vec3 normals;

in vec2 instancePositions;
in float instanceElevationValues;
in float instanceColorValues;
in vec3 instancePickingColors;

uniform sampler2D colorRange;

// Result
out vec4 vColor;

float interp(float value, vec2 domain, vec2 range) {
  float r = min(max((value - domain.x) / (domain.y - domain.x), 0.), 1.);
  return mix(range.x, range.y, r);
}

vec4 interp(float value, vec2 domain, sampler2D range) {
  float r = (value - domain.x) / (domain.y - domain.x);
  return texture(range, vec2(r, 0.5));
}

void main(void) {
  geometry.pickingColor = instancePickingColors;

  if (isnan(instanceColorValues) ||
    instanceColorValues < grid.colorDomain.z ||
    instanceColorValues > grid.colorDomain.w ||
    instanceElevationValues < grid.elevationDomain.z ||
    instanceElevationValues > grid.elevationDomain.w
  ) {
    gl_Position = vec4(0.);
    return;
  }
  
  vec2 commonPosition = (instancePositions + (positions.xy + 1.0) / 2.0 * column.coverage) * grid.sizeCommon + grid.originCommon - project.commonOrigin.xy;
  geometry.position = vec4(commonPosition, 0.0, 1.0);
  geometry.normal = project_normal(normals);

  // calculate z, if 3d not enabled set to 0
  float elevation = 0.0;
  if (column.extruded) {
    elevation = interp(instanceElevationValues, grid.elevationDomain.xy, grid.elevationRange);
    elevation = project_size(elevation);
    // cylindar gemoetry height are between -1.0 to 1.0, transform it to between 0, 1
    geometry.position.z = (positions.z + 1.0) / 2.0 * elevation;
  }

  gl_Position = project_common_position_to_clipspace(geometry.position);
  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);

  vColor = interp(instanceColorValues, grid.colorDomain.xy, colorRange);
  vColor.a *= layer.opacity;
  if (column.extruded) {
    vColor.rgb = lighting_getLightColor(vColor.rgb, project.cameraPosition, geometry.position.xyz, geometry.normal);
  }
  DECKGL_FILTER_COLOR(vColor, geometry);
}
`
  );

  // ../aggregation-layers/src/grid-layer/grid-layer-uniforms.ts
  var uniformBlock31 = (
    /* glsl */
    `uniform gridUniforms {
  vec4 colorDomain;
  vec4 elevationDomain;
  vec2 elevationRange;
  vec2 originCommon;
  vec2 sizeCommon;
} grid;
`
  );
  var gridUniforms = {
    name: "grid",
    vs: uniformBlock31,
    uniformTypes: {
      colorDomain: "vec4<f32>",
      elevationDomain: "vec4<f32>",
      elevationRange: "vec2<f32>",
      originCommon: "vec2<f32>",
      sizeCommon: "vec2<f32>"
    }
  };

  // ../aggregation-layers/src/grid-layer/grid-cell-layer.ts
  var GridCellLayer2 = class extends ColumnLayer {
    getShaders() {
      const shaders = super.getShaders();
      shaders.modules.push(gridUniforms);
      return { ...shaders, vs: grid_cell_layer_vertex_glsl_default };
    }
    initializeState() {
      super.initializeState();
      const attributeManager = this.getAttributeManager();
      attributeManager.remove([
        "instanceElevations",
        "instanceFillColors",
        "instanceLineColors",
        "instanceStrokeWidths"
      ]);
      attributeManager.addInstanced({
        instancePositions: {
          size: 2,
          type: "float32",
          accessor: "getBin"
        },
        instanceColorValues: {
          size: 1,
          type: "float32",
          accessor: "getColorValue"
        },
        instanceElevationValues: {
          size: 1,
          type: "float32",
          accessor: "getElevationValue"
        }
      });
    }
    updateState(params) {
      super.updateState(params);
      const { props, oldProps } = params;
      const model = this.state.fillModel;
      if (oldProps.colorRange !== props.colorRange) {
        this.state.colorTexture?.destroy();
        this.state.colorTexture = createColorRangeTexture(
          this.context.device,
          props.colorRange,
          props.colorScaleType
        );
        const gridProps = { colorRange: this.state.colorTexture };
        model.shaderInputs.setProps({ grid: gridProps });
      } else if (oldProps.colorScaleType !== props.colorScaleType) {
        updateColorRangeTexture(this.state.colorTexture, props.colorScaleType);
      }
    }
    finalizeState(context) {
      super.finalizeState(context);
      this.state.colorTexture?.destroy();
    }
    _updateGeometry() {
      const geometry = new CubeGeometry();
      this.state.fillModel.setGeometry(geometry);
    }
    draw({ uniforms }) {
      const {
        cellOriginCommon,
        cellSizeCommon,
        elevationRange,
        elevationScale,
        extruded,
        coverage,
        colorDomain,
        elevationDomain
      } = this.props;
      const colorCutoff = this.props.colorCutoff || [-Infinity, Infinity];
      const elevationCutoff = this.props.elevationCutoff || [-Infinity, Infinity];
      const fillModel = this.state.fillModel;
      const gridProps = {
        colorDomain: [
          Math.max(colorDomain[0], colorCutoff[0]),
          // instanceColorValue that maps to colorRange[0]
          Math.min(colorDomain[1], colorCutoff[1]),
          // instanceColorValue that maps to colorRange[colorRange.length - 1]
          Math.max(colorDomain[0] - 1, colorCutoff[0]),
          // hide cell if instanceColorValue is less than this
          Math.min(colorDomain[1] + 1, colorCutoff[1])
          // hide cell if instanceColorValue is greater than this
        ],
        elevationDomain: [
          Math.max(elevationDomain[0], elevationCutoff[0]),
          // instanceElevationValue that maps to elevationRange[0]
          Math.min(elevationDomain[1], elevationCutoff[1]),
          // instanceElevationValue that maps to elevationRange[elevationRange.length - 1]
          Math.max(elevationDomain[0] - 1, elevationCutoff[0]),
          // hide cell if instanceElevationValue is less than this
          Math.min(elevationDomain[1] + 1, elevationCutoff[1])
          // hide cell if instanceElevationValue is greater than this
        ],
        elevationRange: [elevationRange[0] * elevationScale, elevationRange[1] * elevationScale],
        originCommon: cellOriginCommon,
        sizeCommon: cellSizeCommon
      };
      fillModel.shaderInputs.setProps({
        column: { extruded, coverage },
        grid: gridProps
      });
      fillModel.draw(this.context.renderPass);
    }
  };
  GridCellLayer2.layerName = "GridCellLayer";

  // ../aggregation-layers/src/grid-layer/bin-options-uniforms.ts
  var uniformBlock32 = (
    /* glsl */
    `uniform binOptionsUniforms {
  vec2 cellOriginCommon;
  vec2 cellSizeCommon;
} binOptions;
`
  );
  var binOptionsUniforms4 = {
    name: "binOptions",
    vs: uniformBlock32,
    uniformTypes: {
      cellOriginCommon: "vec2<f32>",
      cellSizeCommon: "vec2<f32>"
    }
  };

  // ../aggregation-layers/src/grid-layer/grid-layer.ts
  function noop6() {
  }
  var defaultProps46 = {
    gpuAggregation: true,
    // color
    colorDomain: null,
    colorRange: defaultColorRange,
    getColorValue: { type: "accessor", value: null },
    // default value is calculated from `getColorWeight` and `colorAggregation`
    getColorWeight: { type: "accessor", value: 1 },
    colorAggregation: "SUM",
    lowerPercentile: { type: "number", min: 0, max: 100, value: 0 },
    upperPercentile: { type: "number", min: 0, max: 100, value: 100 },
    colorScaleType: "quantize",
    onSetColorDomain: noop6,
    // elevation
    elevationDomain: null,
    elevationRange: [0, 1e3],
    getElevationValue: { type: "accessor", value: null },
    // default value is calculated from `getElevationWeight` and `elevationAggregation`
    getElevationWeight: { type: "accessor", value: 1 },
    elevationAggregation: "SUM",
    elevationScale: { type: "number", min: 0, value: 1 },
    elevationLowerPercentile: { type: "number", min: 0, max: 100, value: 0 },
    elevationUpperPercentile: { type: "number", min: 0, max: 100, value: 100 },
    elevationScaleType: "linear",
    onSetElevationDomain: noop6,
    // grid
    cellSize: { type: "number", min: 0, value: 1e3 },
    coverage: { type: "number", min: 0, max: 1, value: 1 },
    getPosition: { type: "accessor", value: (x4) => x4.position },
    gridAggregator: { type: "function", optional: true, value: null },
    extruded: false,
    // Optional material for 'lighting' shader module
    material: true
  };
  var GridLayer2 = class extends AggregationLayer {
    getAggregatorType() {
      const { gpuAggregation, gridAggregator, getColorValue, getElevationValue } = this.props;
      if (gpuAggregation && (gridAggregator || getColorValue || getElevationValue)) {
        log_default.warn("Features not supported by GPU aggregation, falling back to CPU")();
        return "cpu";
      }
      if (
        // GPU aggregation is requested
        gpuAggregation && // GPU aggregation is supported by the device
        WebGLAggregator.isSupported(this.context.device)
      ) {
        return "gpu";
      }
      return "cpu";
    }
    createAggregator(type) {
      if (type === "cpu") {
        const { gridAggregator, cellSize } = this.props;
        return new CPUAggregator({
          dimensions: 2,
          getBin: {
            sources: ["positions"],
            getValue: ({ positions }, index, opts) => {
              if (gridAggregator) {
                return gridAggregator(positions, cellSize);
              }
              const viewport = this.state.aggregatorViewport;
              const p5 = viewport.projectPosition(positions);
              const { cellSizeCommon, cellOriginCommon } = opts;
              return [
                Math.floor((p5[0] - cellOriginCommon[0]) / cellSizeCommon[0]),
                Math.floor((p5[1] - cellOriginCommon[1]) / cellSizeCommon[1])
              ];
            }
          },
          getValue: [
            { sources: ["colorWeights"], getValue: ({ colorWeights }) => colorWeights },
            { sources: ["elevationWeights"], getValue: ({ elevationWeights }) => elevationWeights }
          ]
        });
      }
      return new WebGLAggregator(this.context.device, {
        dimensions: 2,
        channelCount: 2,
        bufferLayout: this.getAttributeManager().getBufferLayouts({ isInstanced: false }),
        ...super.getShaders({
          modules: [project32_default, binOptionsUniforms4],
          vs: (
            /* glsl */
            `
  in vec3 positions;
  in vec3 positions64Low;
  in float colorWeights;
  in float elevationWeights;

  void getBin(out ivec2 binId) {
    vec3 positionCommon = project_position(positions, positions64Low);
    vec2 gridCoords = floor(positionCommon.xy / binOptions.cellSizeCommon);
    binId = ivec2(gridCoords);
  }
  void getValue(out vec2 value) {
    value = vec2(colorWeights, elevationWeights);
  }
  `
          )
        })
      });
    }
    initializeState() {
      super.initializeState();
      const attributeManager = this.getAttributeManager();
      attributeManager.add({
        positions: {
          size: 3,
          accessor: "getPosition",
          type: "float64",
          fp64: this.use64bitPositions()
        },
        colorWeights: { size: 1, accessor: "getColorWeight" },
        elevationWeights: { size: 1, accessor: "getElevationWeight" }
      });
    }
    // eslint-disable-next-line complexity
    updateState(params) {
      const aggregatorChanged = super.updateState(params);
      const { props, oldProps, changeFlags } = params;
      const { aggregator } = this.state;
      if ((changeFlags.dataChanged || !this.state.dataAsArray) && (props.getColorValue || props.getElevationValue)) {
        this.state.dataAsArray = Array.from(createIterable(props.data).iterable);
      }
      if (aggregatorChanged || changeFlags.dataChanged || props.cellSize !== oldProps.cellSize || props.getColorValue !== oldProps.getColorValue || props.getElevationValue !== oldProps.getElevationValue || props.colorAggregation !== oldProps.colorAggregation || props.elevationAggregation !== oldProps.elevationAggregation) {
        this._updateBinOptions();
        const { cellSizeCommon, cellOriginCommon, binIdRange, dataAsArray } = this.state;
        aggregator.setProps({
          // @ts-expect-error only used by GPUAggregator
          binIdRange,
          pointCount: this.getNumInstances(),
          operations: [props.colorAggregation, props.elevationAggregation],
          binOptions: {
            cellSizeCommon,
            cellOriginCommon
          },
          onUpdate: this._onAggregationUpdate.bind(this)
        });
        if (dataAsArray) {
          const { getColorValue, getElevationValue } = this.props;
          aggregator.setProps({
            // @ts-expect-error only used by CPUAggregator
            customOperations: [
              getColorValue && ((indices) => getColorValue(
                indices.map((i7) => dataAsArray[i7]),
                { indices, data: props.data }
              )),
              getElevationValue && ((indices) => getElevationValue(
                indices.map((i7) => dataAsArray[i7]),
                { indices, data: props.data }
              ))
            ]
          });
        }
      }
      if (changeFlags.updateTriggersChanged && changeFlags.updateTriggersChanged.getColorValue) {
        aggregator.setNeedsUpdate(0);
      }
      if (changeFlags.updateTriggersChanged && changeFlags.updateTriggersChanged.getElevationValue) {
        aggregator.setNeedsUpdate(1);
      }
      return aggregatorChanged;
    }
    _updateBinOptions() {
      const bounds = this.getBounds();
      const cellSizeCommon = [1, 1];
      let cellOriginCommon = [0, 0];
      let binIdRange = [
        [0, 1],
        [0, 1]
      ];
      let viewport = this.context.viewport;
      if (bounds && Number.isFinite(bounds[0][0])) {
        let centroid = [(bounds[0][0] + bounds[1][0]) / 2, (bounds[0][1] + bounds[1][1]) / 2];
        const { cellSize } = this.props;
        const { unitsPerMeter: unitsPerMeter2 } = viewport.getDistanceScales(centroid);
        cellSizeCommon[0] = unitsPerMeter2[0] * cellSize;
        cellSizeCommon[1] = unitsPerMeter2[1] * cellSize;
        const centroidCommon = viewport.projectFlat(centroid);
        cellOriginCommon = [
          Math.floor(centroidCommon[0] / cellSizeCommon[0]) * cellSizeCommon[0],
          Math.floor(centroidCommon[1] / cellSizeCommon[1]) * cellSizeCommon[1]
        ];
        centroid = viewport.unprojectFlat(cellOriginCommon);
        const ViewportType = viewport.constructor;
        viewport = viewport.isGeospatial ? new ViewportType({ longitude: centroid[0], latitude: centroid[1], zoom: 12 }) : new Viewport({ position: [centroid[0], centroid[1], 0], zoom: 12 });
        cellOriginCommon = [Math.fround(viewport.center[0]), Math.fround(viewport.center[1])];
        binIdRange = getBinIdRange({
          dataBounds: bounds,
          getBinId: (p5) => {
            const positionCommon = viewport.projectFlat(p5);
            return [
              Math.floor((positionCommon[0] - cellOriginCommon[0]) / cellSizeCommon[0]),
              Math.floor((positionCommon[1] - cellOriginCommon[1]) / cellSizeCommon[1])
            ];
          }
        });
      }
      this.setState({ cellSizeCommon, cellOriginCommon, binIdRange, aggregatorViewport: viewport });
    }
    draw(opts) {
      if (opts.shaderModuleProps.project) {
        opts.shaderModuleProps.project.viewport = this.state.aggregatorViewport;
      }
      super.draw(opts);
    }
    _onAggregationUpdate({ channel }) {
      const props = this.getCurrentLayer().props;
      const { aggregator } = this.state;
      if (channel === 0) {
        const result = aggregator.getResult(0);
        this.setState({
          colors: new AttributeWithScale(result, aggregator.binCount)
        });
        props.onSetColorDomain(aggregator.getResultDomain(0));
      } else if (channel === 1) {
        const result = aggregator.getResult(1);
        this.setState({
          elevations: new AttributeWithScale(result, aggregator.binCount)
        });
        props.onSetElevationDomain(aggregator.getResultDomain(1));
      }
    }
    onAttributeChange(id) {
      const { aggregator } = this.state;
      switch (id) {
        case "positions":
          aggregator.setNeedsUpdate();
          this._updateBinOptions();
          const { cellSizeCommon, cellOriginCommon, binIdRange } = this.state;
          aggregator.setProps({
            // @ts-expect-error only used by GPUAggregator
            binIdRange,
            binOptions: {
              cellSizeCommon,
              cellOriginCommon
            }
          });
          break;
        case "colorWeights":
          aggregator.setNeedsUpdate(0);
          break;
        case "elevationWeights":
          aggregator.setNeedsUpdate(1);
          break;
        default:
      }
    }
    renderLayers() {
      const { aggregator, cellOriginCommon, cellSizeCommon } = this.state;
      const {
        elevationScale,
        colorRange,
        elevationRange,
        extruded,
        coverage,
        material,
        transitions,
        colorScaleType,
        lowerPercentile,
        upperPercentile,
        colorDomain,
        elevationScaleType,
        elevationLowerPercentile,
        elevationUpperPercentile,
        elevationDomain
      } = this.props;
      const CellLayerClass = this.getSubLayerClass("cells", GridCellLayer2);
      const binAttribute = aggregator.getBins();
      const colors = this.state.colors?.update({
        scaleType: colorScaleType,
        lowerPercentile,
        upperPercentile
      });
      const elevations = this.state.elevations?.update({
        scaleType: elevationScaleType,
        lowerPercentile: elevationLowerPercentile,
        upperPercentile: elevationUpperPercentile
      });
      if (!colors || !elevations) {
        return null;
      }
      return new CellLayerClass(
        this.getSubLayerProps({
          id: "cells"
        }),
        {
          data: {
            length: aggregator.binCount,
            attributes: {
              getBin: binAttribute,
              getColorValue: colors.attribute,
              getElevationValue: elevations.attribute
            }
          },
          // Data has changed shallowly, but we likely don't need to update the attributes
          dataComparator: (data, oldData) => data.length === oldData.length,
          updateTriggers: {
            getBin: [binAttribute],
            getColorValue: [colors.attribute],
            getElevationValue: [elevations.attribute]
          },
          cellOriginCommon,
          cellSizeCommon,
          elevationScale,
          colorRange,
          colorScaleType,
          elevationRange,
          extruded,
          coverage,
          material,
          colorDomain: colors.domain || colorDomain || aggregator.getResultDomain(0),
          elevationDomain: elevations.domain || elevationDomain || aggregator.getResultDomain(1),
          colorCutoff: colors.cutoff,
          elevationCutoff: elevations.cutoff,
          transitions: transitions && {
            getFillColor: transitions.getColorValue || transitions.getColorWeight,
            getElevation: transitions.getElevationValue || transitions.getElevationWeight
          },
          // Extensions are already handled by the GPUAggregator, do not pass it down
          extensions: []
        }
      );
    }
    getPickingInfo(params) {
      const info = params.info;
      const { index } = info;
      if (index >= 0) {
        const bin = this.state.aggregator.getBin(index);
        let object;
        if (bin) {
          object = {
            col: bin.id[0],
            row: bin.id[1],
            colorValue: bin.value[0],
            elevationValue: bin.value[1],
            count: bin.count
          };
          if (bin.pointIndices) {
            object.pointIndices = bin.pointIndices;
            object.points = Array.isArray(this.props.data) ? bin.pointIndices.map((i7) => this.props.data[i7]) : [];
          }
        }
        info.object = object;
      }
      return info;
    }
  };
  GridLayer2.layerName = "GridLayer";
  GridLayer2.defaultProps = defaultProps46;

  // ../aggregation-layers/src/heatmap-layer/heatmap-layer-utils.ts
  function getBounds2(points) {
    const x4 = points.map((p5) => p5[0]);
    const y5 = points.map((p5) => p5[1]);
    const xMin = Math.min.apply(null, x4);
    const xMax = Math.max.apply(null, x4);
    const yMin = Math.min.apply(null, y5);
    const yMax = Math.max.apply(null, y5);
    return [xMin, yMin, xMax, yMax];
  }
  function boundsContain(currentBounds, targetBounds) {
    if (targetBounds[0] >= currentBounds[0] && targetBounds[2] <= currentBounds[2] && targetBounds[1] >= currentBounds[1] && targetBounds[3] <= currentBounds[3]) {
      return true;
    }
    return false;
  }
  var scratchArray2 = new Float32Array(12);
  function packVertices(points, dimensions = 2) {
    let index = 0;
    for (const point of points) {
      for (let i7 = 0; i7 < dimensions; i7++) {
        scratchArray2[index++] = point[i7] || 0;
      }
    }
    return scratchArray2;
  }
  function scaleToAspectRatio(boundingBox, width, height) {
    const [xMin, yMin, xMax, yMax] = boundingBox;
    const currentWidth = xMax - xMin;
    const currentHeight = yMax - yMin;
    let newWidth = currentWidth;
    let newHeight = currentHeight;
    if (currentWidth / currentHeight < width / height) {
      newWidth = width / height * currentHeight;
    } else {
      newHeight = height / width * currentWidth;
    }
    if (newWidth < width) {
      newWidth = width;
      newHeight = height;
    }
    const xCenter = (xMax + xMin) / 2;
    const yCenter = (yMax + yMin) / 2;
    return [
      xCenter - newWidth / 2,
      yCenter - newHeight / 2,
      xCenter + newWidth / 2,
      yCenter + newHeight / 2
    ];
  }
  function getTextureCoordinates(point, bounds) {
    const [xMin, yMin, xMax, yMax] = bounds;
    return [(point[0] - xMin) / (xMax - xMin), (point[1] - yMin) / (yMax - yMin)];
  }

  // ../aggregation-layers/src/heatmap-layer/triangle-layer-vertex.glsl.ts
  var triangle_layer_vertex_glsl_default = `#version 300 es
#define SHADER_NAME heatp-map-layer-vertex-shader

uniform sampler2D maxTexture;

in vec3 positions;
in vec2 texCoords;

out vec2 vTexCoords;
out float vIntensityMin;
out float vIntensityMax;

void main(void) {
  gl_Position = project_position_to_clipspace(positions, vec3(0.0), vec3(0.0));
  vTexCoords = texCoords;
  vec4 maxTexture = texture(maxTexture, vec2(0.5));
  float maxValue = triangle.aggregationMode < 0.5 ? maxTexture.r : maxTexture.g;
  float minValue = maxValue * triangle.threshold;
  if (triangle.colorDomain[1] > 0.) {
    // if user specified custom domain use it.
    maxValue = triangle.colorDomain[1];
    minValue = triangle.colorDomain[0];
  }
  vIntensityMax = triangle.intensity / maxValue;
  vIntensityMin = triangle.intensity / minValue;
}
`;

  // ../aggregation-layers/src/heatmap-layer/triangle-layer-fragment.glsl.ts
  var triangle_layer_fragment_glsl_default = `#version 300 es
#define SHADER_NAME triangle-layer-fragment-shader

precision highp float;

uniform sampler2D weightsTexture;
uniform sampler2D colorTexture;

in vec2 vTexCoords;
in float vIntensityMin;
in float vIntensityMax;

out vec4 fragColor;

vec4 getLinearColor(float value) {
  float factor = clamp(value * vIntensityMax, 0., 1.);
  vec4 color = texture(colorTexture, vec2(factor, 0.5));
  color.a *= min(value * vIntensityMin, 1.0);
  return color;
}

void main(void) {
  vec4 weights = texture(weightsTexture, vTexCoords);
  float weight = weights.r;

  if (triangle.aggregationMode > 0.5) {
    weight /= max(1.0, weights.a);
  }

  // discard pixels with 0 weight.
  if (weight <= 0.) {
     discard;
  }

  vec4 linearColor = getLinearColor(weight);
  linearColor.a *= layer.opacity;
  fragColor = linearColor;
}
`;

  // ../aggregation-layers/src/heatmap-layer/triangle-layer-uniforms.ts
  var uniformBlock33 = `uniform triangleUniforms {
  float aggregationMode;
  vec2 colorDomain;
  float intensity;
  float threshold;
} triangle;
`;
  var triangleUniforms = {
    name: "triangle",
    vs: uniformBlock33,
    fs: uniformBlock33,
    uniformTypes: {
      aggregationMode: "f32",
      colorDomain: "vec2<f32>",
      intensity: "f32",
      threshold: "f32"
    }
  };

  // ../aggregation-layers/src/heatmap-layer/triangle-layer.ts
  var TriangleLayer = class extends Layer {
    getShaders() {
      return super.getShaders({ vs: triangle_layer_vertex_glsl_default, fs: triangle_layer_fragment_glsl_default, modules: [project32_default, triangleUniforms] });
    }
    initializeState({ device }) {
      this.setState({ model: this._getModel(device) });
    }
    _getModel(device) {
      const { vertexCount, data } = this.props;
      return new Model(device, {
        ...this.getShaders(),
        id: this.props.id,
        attributes: data.attributes,
        bufferLayout: [
          { name: "positions", format: "float32x3" },
          { name: "texCoords", format: "float32x2" }
        ],
        topology: "triangle-strip",
        vertexCount
      });
    }
    draw() {
      const { model } = this.state;
      const {
        aggregationMode,
        colorDomain,
        intensity,
        threshold: threshold2,
        colorTexture,
        maxTexture,
        weightsTexture
      } = this.props;
      const triangleProps = {
        aggregationMode,
        colorDomain,
        intensity,
        threshold: threshold2,
        colorTexture,
        maxTexture,
        weightsTexture
      };
      model.shaderInputs.setProps({ triangle: triangleProps });
      model.draw(this.context.renderPass);
    }
  };
  TriangleLayer.layerName = "TriangleLayer";

  // ../aggregation-layers/src/common/utils/prop-utils.ts
  function filterProps(props, filterKeys) {
    const filteredProps = {};
    for (const key in props) {
      if (!filterKeys.includes(key)) {
        filteredProps[key] = props[key];
      }
    }
    return filteredProps;
  }

  // ../aggregation-layers/src/heatmap-layer/aggregation-layer.ts
  var AggregationLayer2 = class extends CompositeLayer {
    initializeAggregationLayer(dimensions) {
      super.initializeState(this.context);
      this.setState({
        // Layer props , when changed doesn't require updating aggregation
        ignoreProps: filterProps(this.constructor._propTypes, dimensions.data.props),
        dimensions
      });
    }
    updateState(opts) {
      super.updateState(opts);
      const { changeFlags } = opts;
      if (changeFlags.extensionsChanged) {
        const shaders = this.getShaders({});
        if (shaders && shaders.defines) {
          shaders.defines.NON_INSTANCED_MODEL = 1;
        }
        this.updateShaders(shaders);
      }
      this._updateAttributes();
    }
    updateAttributes(changedAttributes) {
      this.setState({ changedAttributes });
    }
    getAttributes() {
      return this.getAttributeManager().getAttributes();
    }
    getModuleSettings() {
      const { viewport, mousePosition, device } = this.context;
      const moduleSettings = Object.assign(Object.create(this.props), {
        viewport,
        mousePosition,
        picking: {
          isActive: 0
        },
        // @ts-expect-error TODO - assuming WebGL context
        devicePixelRatio: device.canvasContext.cssToDeviceRatio()
      });
      return moduleSettings;
    }
    updateShaders(shaders) {
    }
    /**
     * Checks if aggregation is dirty
     * @param {Object} updateOpts - object {props, oldProps, changeFlags}
     * @param {Object} params - object {dimension, compareAll}
     * @param {Object} params.dimension - {props, accessors} array of props and/or accessors
     * @param {Boolean} params.compareAll - when `true` it will include non layer props for comparision
     * @returns {Boolean} - returns true if dimensions' prop or accessor is changed
     **/
    isAggregationDirty(updateOpts, params = {}) {
      const { props, oldProps, changeFlags } = updateOpts;
      const { compareAll = false, dimension } = params;
      const { ignoreProps } = this.state;
      const { props: dataProps, accessors = [] } = dimension;
      const { updateTriggersChanged } = changeFlags;
      if (changeFlags.dataChanged) {
        return true;
      }
      if (updateTriggersChanged) {
        if (updateTriggersChanged.all) {
          return true;
        }
        for (const accessor of accessors) {
          if (updateTriggersChanged[accessor]) {
            return true;
          }
        }
      }
      if (compareAll) {
        if (changeFlags.extensionsChanged) {
          return true;
        }
        return compareProps({
          oldProps,
          newProps: props,
          ignoreProps,
          propTypes: this.constructor._propTypes
        });
      }
      for (const name13 of dataProps) {
        if (props[name13] !== oldProps[name13]) {
          return true;
        }
      }
      return false;
    }
    /**
     * Checks if an attribute is changed
     * @param {String} name - name of the attribute
     * @returns {Boolean} - `true` if attribute `name` is changed, `false` otherwise,
     *                       If `name` is not passed or `undefiend`, `true` if any attribute is changed, `false` otherwise
     **/
    isAttributeChanged(name13) {
      const { changedAttributes } = this.state;
      if (!name13) {
        return !isObjectEmpty5(changedAttributes);
      }
      return changedAttributes && changedAttributes[name13] !== void 0;
    }
    // Private
    // override Composite layer private method to create AttributeManager instance
    _getAttributeManager() {
      return new AttributeManager(this.context.device, {
        id: this.props.id,
        stats: this.context.stats
      });
    }
  };
  AggregationLayer2.layerName = "AggregationLayer";
  function isObjectEmpty5(obj) {
    let isEmpty = true;
    for (const key in obj) {
      isEmpty = false;
      break;
    }
    return isEmpty;
  }

  // ../aggregation-layers/src/heatmap-layer/weights-vs.glsl.ts
  var weights_vs_glsl_default = `#version 300 es
in vec3 positions;
in vec3 positions64Low;
in float weights;
out vec4 weightsTexture;

void main()
{
  weightsTexture = vec4(weights * weight.weightsScale, 0., 0., 1.);

  float radiusTexels = project_pixel_size(weight.radiusPixels) * weight.textureWidth / (weight.commonBounds.z - weight.commonBounds.x);
  gl_PointSize = radiusTexels * 2.;

  vec3 commonPosition = project_position(positions, positions64Low);

  // // map xy from commonBounds to [-1, 1]
  gl_Position.xy = (commonPosition.xy - weight.commonBounds.xy) / (weight.commonBounds.zw - weight.commonBounds.xy) ;
  gl_Position.xy = (gl_Position.xy * 2.) - (1.);
  gl_Position.w = 1.0;
}
`;

  // ../aggregation-layers/src/heatmap-layer/weights-fs.glsl.ts
  var weights_fs_glsl_default = `#version 300 es
in vec4 weightsTexture;
out vec4 fragColor;
// Epanechnikov function, keeping for reference
// float epanechnikovKDE(float u) {
//   return 0.75 * (1.0 - u * u);
// }
float gaussianKDE(float u){
  return pow(2.71828, -u*u/0.05555)/(1.77245385*0.166666);
}
void main()
{
  float dist = length(gl_PointCoord - vec2(0.5, 0.5));
  if (dist > 0.5) {
    discard;
  }
  fragColor = weightsTexture * gaussianKDE(2. * dist);
  DECKGL_FILTER_COLOR(fragColor, geometry);
}
`;

  // ../aggregation-layers/src/heatmap-layer/max-vs.glsl.ts
  var max_vs_glsl_default = `#version 300 es
uniform sampler2D inTexture;
out vec4 outTexture;

void main()
{
  // Sample every pixel in texture
  int yIndex = gl_VertexID / int(maxWeight.textureSize);
  int xIndex = gl_VertexID - (yIndex * int(maxWeight.textureSize));
  vec2 uv = (0.5 + vec2(float(xIndex), float(yIndex))) / maxWeight.textureSize;
  outTexture = texture(inTexture, uv);

  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);
  // Enforce default value for ANGLE issue (https://bugs.chromium.org/p/angleproject/issues/detail?id=3941)
  gl_PointSize = 1.0;
}
`;

  // ../aggregation-layers/src/heatmap-layer/max-fs.glsl.ts
  var max_fs_glsl_default = `#version 300 es
in vec4 outTexture;
out vec4 fragColor;
void main() {
  fragColor = outTexture;
  fragColor.g = outTexture.r / max(1.0, outTexture.a);
}
`;

  // ../aggregation-layers/src/heatmap-layer/heatmap-layer-uniforms.ts
  var uniformBlock34 = `uniform weightUniforms {
  vec4 commonBounds;
  float radiusPixels;
  float textureWidth;
  float weightsScale;
} weight;
`;
  var weightUniforms = {
    name: "weight",
    vs: uniformBlock34,
    uniformTypes: {
      commonBounds: "vec4<f32>",
      radiusPixels: "f32",
      textureWidth: "f32",
      weightsScale: "f32"
    }
  };
  var maxWeightUniforms = {
    name: "maxWeight",
    vs: `uniform maxWeightUniforms {
  float textureSize;
} maxWeight;
`,
    uniformTypes: {
      textureSize: "f32"
    }
  };

  // ../aggregation-layers/src/heatmap-layer/heatmap-layer.ts
  var RESOLUTION = 2;
  var TEXTURE_PROPS = {
    format: "rgba8unorm",
    dimension: "2d",
    width: 1,
    height: 1,
    sampler: {
      minFilter: "linear",
      magFilter: "linear",
      addressModeU: "clamp-to-edge",
      addressModeV: "clamp-to-edge"
    }
  };
  var DEFAULT_COLOR_DOMAIN = [0, 0];
  var AGGREGATION_MODE = {
    SUM: 0,
    MEAN: 1
  };
  var defaultProps47 = {
    getPosition: { type: "accessor", value: (x4) => x4.position },
    getWeight: { type: "accessor", value: 1 },
    intensity: { type: "number", min: 0, value: 1 },
    radiusPixels: { type: "number", min: 1, max: 100, value: 50 },
    colorRange: defaultColorRange,
    threshold: { type: "number", min: 0, max: 1, value: 0.05 },
    colorDomain: { type: "array", value: null, optional: true },
    // 'SUM' or 'MEAN'
    aggregation: "SUM",
    weightsTextureSize: { type: "number", min: 128, max: 2048, value: 2048 },
    debounceTimeout: { type: "number", min: 0, max: 1e3, value: 500 }
  };
  var FLOAT_TARGET_FEATURES2 = [
    "float32-renderable-webgl",
    // ability to render to float texture
    "texture-blend-float-webgl"
    // ability to blend when rendering to float texture
  ];
  var DIMENSIONS = {
    data: {
      props: ["radiusPixels"]
    }
  };
  var HeatmapLayer = class extends AggregationLayer2 {
    getShaders(shaders) {
      let modules = [project32_default];
      if (shaders.modules) {
        modules = [...modules, ...shaders.modules];
      }
      return super.getShaders({ ...shaders, modules });
    }
    initializeState() {
      super.initializeAggregationLayer(DIMENSIONS);
      this.setState({ colorDomain: DEFAULT_COLOR_DOMAIN });
      this._setupTextureParams();
      this._setupAttributes();
      this._setupResources();
    }
    shouldUpdateState({ changeFlags }) {
      return changeFlags.somethingChanged;
    }
    /* eslint-disable max-statements,complexity */
    updateState(opts) {
      super.updateState(opts);
      this._updateHeatmapState(opts);
    }
    _updateHeatmapState(opts) {
      const { props, oldProps } = opts;
      const changeFlags = this._getChangeFlags(opts);
      if (changeFlags.dataChanged || changeFlags.viewportChanged) {
        changeFlags.boundsChanged = this._updateBounds(changeFlags.dataChanged);
        this._updateTextureRenderingBounds();
      }
      if (changeFlags.dataChanged || changeFlags.boundsChanged) {
        clearTimeout(this.state.updateTimer);
        this.setState({ isWeightMapDirty: true });
        if (changeFlags.dataChanged) {
          const weightsTransformShaders = this.getShaders({ vs: weights_vs_glsl_default, fs: weights_fs_glsl_default });
          this._createWeightsTransform(weightsTransformShaders);
        }
      } else if (changeFlags.viewportZoomChanged) {
        this._debouncedUpdateWeightmap();
      }
      if (props.colorRange !== oldProps.colorRange) {
        this._updateColorTexture(opts);
      }
      if (this.state.isWeightMapDirty) {
        this._updateWeightmap();
      }
      this.setState({ zoom: opts.context.viewport.zoom });
    }
    renderLayers() {
      const {
        weightsTexture,
        triPositionBuffer,
        triTexCoordBuffer,
        maxWeightsTexture,
        colorTexture,
        colorDomain
      } = this.state;
      const { updateTriggers, intensity, threshold: threshold2, aggregation } = this.props;
      const TriangleLayerClass = this.getSubLayerClass("triangle", TriangleLayer);
      return new TriangleLayerClass(
        this.getSubLayerProps({
          id: "triangle-layer",
          updateTriggers
        }),
        {
          // position buffer is filled with world coordinates generated from viewport.unproject
          // i.e. LNGLAT if geospatial, CARTESIAN otherwise
          coordinateSystem: COORDINATE_SYSTEM.DEFAULT,
          data: {
            attributes: {
              positions: triPositionBuffer,
              texCoords: triTexCoordBuffer
            }
          },
          vertexCount: 4,
          maxTexture: maxWeightsTexture,
          colorTexture,
          aggregationMode: AGGREGATION_MODE[aggregation] || 0,
          weightsTexture,
          intensity,
          threshold: threshold2,
          colorDomain
        }
      );
    }
    finalizeState(context) {
      super.finalizeState(context);
      const {
        weightsTransform,
        weightsTexture,
        maxWeightTransform,
        maxWeightsTexture,
        triPositionBuffer,
        triTexCoordBuffer,
        colorTexture,
        updateTimer
      } = this.state;
      weightsTransform?.destroy();
      weightsTexture?.destroy();
      maxWeightTransform?.destroy();
      maxWeightsTexture?.destroy();
      triPositionBuffer?.destroy();
      triTexCoordBuffer?.destroy();
      colorTexture?.destroy();
      if (updateTimer) {
        clearTimeout(updateTimer);
      }
    }
    // PRIVATE
    // override Composite layer private method to create AttributeManager instance
    _getAttributeManager() {
      return new AttributeManager(this.context.device, {
        id: this.props.id,
        stats: this.context.stats
      });
    }
    _getChangeFlags(opts) {
      const changeFlags = {};
      const { dimensions } = this.state;
      changeFlags.dataChanged = this.isAttributeChanged() && "attribute changed" || // if any attribute is changed
      this.isAggregationDirty(opts, {
        compareAll: true,
        dimension: dimensions.data
      }) && "aggregation is dirty";
      changeFlags.viewportChanged = opts.changeFlags.viewportChanged;
      const { zoom } = this.state;
      if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {
        changeFlags.viewportZoomChanged = true;
      }
      return changeFlags;
    }
    _createTextures() {
      const { textureSize, format } = this.state;
      this.setState({
        weightsTexture: this.context.device.createTexture({
          ...TEXTURE_PROPS,
          width: textureSize,
          height: textureSize,
          format
        }),
        maxWeightsTexture: this.context.device.createTexture({
          ...TEXTURE_PROPS,
          width: 1,
          height: 1,
          format
        })
      });
    }
    _setupAttributes() {
      const attributeManager = this.getAttributeManager();
      attributeManager.add({
        positions: { size: 3, type: "float64", accessor: "getPosition" },
        weights: { size: 1, accessor: "getWeight" }
      });
      this.setState({ positionAttributeName: "positions" });
    }
    _setupTextureParams() {
      const { device } = this.context;
      const { weightsTextureSize } = this.props;
      const textureSize = Math.min(weightsTextureSize, device.limits.maxTextureDimension2D);
      const floatTargetSupport = FLOAT_TARGET_FEATURES2.every((feature) => device.features.has(feature));
      const format = floatTargetSupport ? "rgba32float" : "rgba8unorm";
      const weightsScale = floatTargetSupport ? 1 : 1 / 255;
      this.setState({ textureSize, format, weightsScale });
      if (!floatTargetSupport) {
        log_default.warn(
          `HeatmapLayer: ${this.id} rendering to float texture not supported, falling back to low precision format`
        )();
      }
    }
    _createWeightsTransform(shaders) {
      let { weightsTransform } = this.state;
      const { weightsTexture } = this.state;
      const attributeManager = this.getAttributeManager();
      weightsTransform?.destroy();
      weightsTransform = new TextureTransform(this.context.device, {
        id: `${this.id}-weights-transform`,
        bufferLayout: attributeManager.getBufferLayouts(),
        vertexCount: 1,
        targetTexture: weightsTexture,
        parameters: {
          depthWriteEnabled: false,
          blendColorOperation: "add",
          blendColorSrcFactor: "one",
          blendColorDstFactor: "one",
          blendAlphaSrcFactor: "one",
          blendAlphaDstFactor: "one"
        },
        topology: "point-list",
        ...shaders,
        modules: [...shaders.modules, weightUniforms]
      });
      this.setState({ weightsTransform });
    }
    _setupResources() {
      this._createTextures();
      const { device } = this.context;
      const { textureSize, weightsTexture, maxWeightsTexture } = this.state;
      const weightsTransformShaders = this.getShaders({
        vs: weights_vs_glsl_default,
        fs: weights_fs_glsl_default
      });
      this._createWeightsTransform(weightsTransformShaders);
      const maxWeightsTransformShaders = this.getShaders({
        vs: max_vs_glsl_default,
        fs: max_fs_glsl_default,
        modules: [maxWeightUniforms]
      });
      const maxWeightTransform = new TextureTransform(device, {
        id: `${this.id}-max-weights-transform`,
        targetTexture: maxWeightsTexture,
        ...maxWeightsTransformShaders,
        vertexCount: textureSize * textureSize,
        topology: "point-list",
        parameters: {
          depthWriteEnabled: false,
          blendColorOperation: "max",
          blendAlphaOperation: "max",
          blendColorSrcFactor: "one",
          blendColorDstFactor: "one",
          blendAlphaSrcFactor: "one",
          blendAlphaDstFactor: "one"
        }
      });
      const maxWeightProps = { inTexture: weightsTexture, textureSize };
      maxWeightTransform.model.shaderInputs.setProps({
        maxWeight: maxWeightProps
      });
      this.setState({
        weightsTexture,
        maxWeightsTexture,
        maxWeightTransform,
        zoom: null,
        triPositionBuffer: device.createBuffer({ byteLength: 48 }),
        triTexCoordBuffer: device.createBuffer({ byteLength: 48 })
      });
    }
    // overwrite super class method to update transform model
    updateShaders(shaderOptions) {
      this._createWeightsTransform({
        vs: weights_vs_glsl_default,
        fs: weights_fs_glsl_default,
        ...shaderOptions
      });
    }
    _updateMaxWeightValue() {
      const { maxWeightTransform } = this.state;
      maxWeightTransform.run({
        parameters: { viewport: [0, 0, 1, 1] },
        clearColor: [0, 0, 0, 0]
      });
    }
    // Computes world bounds area that needs to be processed for generate heatmap
    _updateBounds(forceUpdate = false) {
      const { viewport } = this.context;
      const viewportCorners = [
        viewport.unproject([0, 0]),
        viewport.unproject([viewport.width, 0]),
        viewport.unproject([0, viewport.height]),
        viewport.unproject([viewport.width, viewport.height])
      ].map((p5) => p5.map(Math.fround));
      const visibleWorldBounds = getBounds2(viewportCorners);
      const newState = { visibleWorldBounds, viewportCorners };
      let boundsChanged = false;
      if (forceUpdate || !this.state.worldBounds || !boundsContain(this.state.worldBounds, visibleWorldBounds)) {
        const scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);
        const worldBounds = this._commonToWorldBounds(scaledCommonBounds);
        if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {
          worldBounds[1] = Math.max(worldBounds[1], -85.051129);
          worldBounds[3] = Math.min(worldBounds[3], 85.051129);
          worldBounds[0] = Math.max(worldBounds[0], -360);
          worldBounds[2] = Math.min(worldBounds[2], 360);
        }
        const normalizedCommonBounds = this._worldToCommonBounds(worldBounds);
        newState.worldBounds = worldBounds;
        newState.normalizedCommonBounds = normalizedCommonBounds;
        boundsChanged = true;
      }
      this.setState(newState);
      return boundsChanged;
    }
    _updateTextureRenderingBounds() {
      const { triPositionBuffer, triTexCoordBuffer, normalizedCommonBounds, viewportCorners } = this.state;
      const { viewport } = this.context;
      triPositionBuffer.write(packVertices(viewportCorners, 3));
      const textureBounds = viewportCorners.map(
        (p5) => getTextureCoordinates(viewport.projectPosition(p5), normalizedCommonBounds)
      );
      triTexCoordBuffer.write(packVertices(textureBounds, 2));
    }
    _updateColorTexture(opts) {
      const { colorRange } = opts.props;
      let { colorTexture } = this.state;
      const colors = colorRangeToFlatArray(colorRange, false, Uint8Array);
      colorTexture?.destroy();
      colorTexture = this.context.device.createTexture({
        ...TEXTURE_PROPS,
        data: colors,
        width: colorRange.length,
        height: 1
      });
      this.setState({ colorTexture });
    }
    _updateWeightmap() {
      const { radiusPixels, colorDomain, aggregation } = this.props;
      const { worldBounds, textureSize, weightsScale, weightsTexture } = this.state;
      const weightsTransform = this.state.weightsTransform;
      this.state.isWeightMapDirty = false;
      const commonBounds = this._worldToCommonBounds(worldBounds, {
        useLayerCoordinateSystem: true
      });
      if (colorDomain && aggregation === "SUM") {
        const { viewport: viewport2 } = this.context;
        const metersPerPixel = viewport2.distanceScales.metersPerUnit[2] * (commonBounds[2] - commonBounds[0]) / textureSize;
        this.state.colorDomain = colorDomain.map((x4) => x4 * metersPerPixel * weightsScale);
      } else {
        this.state.colorDomain = colorDomain || DEFAULT_COLOR_DOMAIN;
      }
      const attributeManager = this.getAttributeManager();
      const attributes = attributeManager.getAttributes();
      const moduleSettings = this.getModuleSettings();
      this._setModelAttributes(weightsTransform.model, attributes);
      weightsTransform.model.setVertexCount(this.getNumInstances());
      const weightProps = {
        radiusPixels,
        commonBounds,
        textureWidth: textureSize,
        weightsScale,
        weightsTexture
      };
      const { viewport, devicePixelRatio: devicePixelRatio2, coordinateSystem, coordinateOrigin } = moduleSettings;
      const { modelMatrix: modelMatrix2 } = this.props;
      weightsTransform.model.shaderInputs.setProps({
        project: { viewport, devicePixelRatio: devicePixelRatio2, modelMatrix: modelMatrix2, coordinateSystem, coordinateOrigin },
        weight: weightProps
      });
      weightsTransform.run({
        parameters: { viewport: [0, 0, textureSize, textureSize] },
        clearColor: [0, 0, 0, 0]
      });
      this._updateMaxWeightValue();
    }
    _debouncedUpdateWeightmap(fromTimer = false) {
      let { updateTimer } = this.state;
      const { debounceTimeout } = this.props;
      if (fromTimer) {
        updateTimer = null;
        this._updateBounds(true);
        this._updateTextureRenderingBounds();
        this.setState({ isWeightMapDirty: true });
      } else {
        this.setState({ isWeightMapDirty: false });
        clearTimeout(updateTimer);
        updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), debounceTimeout);
      }
      this.setState({ updateTimer });
    }
    // input: worldBounds: [minLong, minLat, maxLong, maxLat]
    // input: opts.useLayerCoordinateSystem : layers coordiante system is used
    // optput: commonBounds: [minX, minY, maxX, maxY] scaled to fit the current texture
    _worldToCommonBounds(worldBounds, opts = {}) {
      const { useLayerCoordinateSystem = false } = opts;
      const [minLong, minLat, maxLong, maxLat] = worldBounds;
      const { viewport } = this.context;
      const { textureSize } = this.state;
      const { coordinateSystem } = this.props;
      const offsetMode = useLayerCoordinateSystem && (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS || coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS);
      const offsetOriginCommon = offsetMode ? viewport.projectPosition(this.props.coordinateOrigin) : [0, 0];
      const size = textureSize * RESOLUTION / viewport.scale;
      let bottomLeftCommon;
      let topRightCommon;
      if (useLayerCoordinateSystem && !offsetMode) {
        bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);
        topRightCommon = this.projectPosition([maxLong, maxLat, 0]);
      } else {
        bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);
        topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);
      }
      return scaleToAspectRatio(
        [
          bottomLeftCommon[0] - offsetOriginCommon[0],
          bottomLeftCommon[1] - offsetOriginCommon[1],
          topRightCommon[0] - offsetOriginCommon[0],
          topRightCommon[1] - offsetOriginCommon[1]
        ],
        size,
        size
      );
    }
    // input commonBounds: [xMin, yMin, xMax, yMax]
    // output worldBounds: [minLong, minLat, maxLong, maxLat]
    _commonToWorldBounds(commonBounds) {
      const [xMin, yMin, xMax, yMax] = commonBounds;
      const { viewport } = this.context;
      const bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);
      const topRightWorld = viewport.unprojectPosition([xMax, yMax]);
      return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));
    }
  };
  HeatmapLayer.layerName = "HeatmapLayer";
  HeatmapLayer.defaultProps = defaultProps47;

  // ../google-maps/src/google-maps-overlay.ts
  init_dist5();
  init_dist6();

  // ../google-maps/src/utils.ts
  var MAX_LATITUDE2 = 85.05113;
  function createDeckInstance(map6, overlay, deck, props) {
    if (deck) {
      if (deck.userData._googleMap === map6) {
        return deck;
      }
      destroyDeckInstance(deck);
    }
    const eventListeners = {
      click: null,
      rightclick: null,
      dblclick: null,
      mousemove: null,
      mouseout: null
    };
    const newDeck = new Deck({
      ...props,
      useDevicePixels: props.interleaved ? true : props.useDevicePixels,
      style: props.interleaved ? null : { pointerEvents: "none" },
      parent: getContainer2(overlay, props.style),
      views: new MapView({ repeat: true }),
      initialViewState: {
        longitude: 0,
        latitude: 0,
        zoom: 1
      },
      controller: false
    });
    for (const eventType in eventListeners) {
      eventListeners[eventType] = map6.addListener(
        eventType,
        (evt) => handleMouseEvent(newDeck, eventType, evt)
      );
    }
    newDeck.userData._googleMap = map6;
    newDeck.userData._eventListeners = eventListeners;
    return newDeck;
  }
  function getContainer2(overlay, style) {
    const container = document.createElement("div");
    container.style.position = "absolute";
    Object.assign(container.style, style);
    if ("getPanes" in overlay) {
      overlay.getPanes()?.overlayLayer.appendChild(container);
    } else {
      overlay.getMap()?.getDiv().appendChild(container);
    }
    return container;
  }
  function destroyDeckInstance(deck) {
    const { _eventListeners: eventListeners } = deck.userData;
    for (const eventType in eventListeners) {
      if (eventListeners[eventType]) {
        eventListeners[eventType].remove();
      }
    }
    deck.finalize();
  }
  function getViewPropsFromOverlay(map6, overlay) {
    const { width, height } = getMapSize(map6);
    const projection = overlay.getProjection();
    const bounds = map6.getBounds();
    if (!bounds) {
      return { width, height, left: 0, top: 0 };
    }
    const ne2 = bounds.getNorthEast();
    const sw = bounds.getSouthWest();
    const topRight = projection.fromLatLngToDivPixel(ne2);
    const bottomLeft = projection.fromLatLngToDivPixel(sw);
    const centerLngLat = pixelToLngLat(projection, width / 2, height / 2);
    const centerH = new google.maps.LatLng(0, centerLngLat[0]);
    const centerContainerPx = projection.fromLatLngToContainerPixel(centerH);
    const centerDivPx = projection.fromLatLngToDivPixel(centerH);
    if (!topRight || !bottomLeft || !centerDivPx || !centerContainerPx) {
      return { width, height, left: 0, top: 0 };
    }
    const leftOffset = Math.round(centerDivPx.x - centerContainerPx.x);
    let topOffset = centerDivPx.y - centerContainerPx.y;
    const topLngLat = pixelToLngLat(projection, width / 2, 0);
    const bottomLngLat = pixelToLngLat(projection, width / 2, height);
    let latitude = centerLngLat[1];
    const longitude = centerLngLat[0];
    if (Math.abs(latitude) > MAX_LATITUDE2) {
      latitude = latitude > 0 ? MAX_LATITUDE2 : -MAX_LATITUDE2;
      const center2 = new google.maps.LatLng(latitude, longitude);
      const centerPx = projection.fromLatLngToContainerPixel(center2);
      topOffset += centerPx.y - height / 2;
    }
    topOffset = Math.round(topOffset);
    const delta = new Vector2(topLngLat).sub(bottomLngLat);
    let bearing = 180 * delta.verticalAngle() / Math.PI;
    if (bearing < 0)
      bearing += 360;
    const heading = map6.getHeading() || 0;
    let zoom = map6.getZoom() - 1;
    let scale24;
    if (bearing === 0) {
      scale24 = height ? (bottomLeft.y - topRight.y) / height : 1;
    } else if (bearing === heading) {
      const viewDiagonal = new Vector2([topRight.x, topRight.y]).sub([bottomLeft.x, bottomLeft.y]).len();
      const mapDiagonal = new Vector2([width, -height]).len();
      scale24 = mapDiagonal ? viewDiagonal / mapDiagonal : 1;
    }
    zoom += Math.log2(scale24 || 1);
    return {
      width,
      height,
      left: leftOffset,
      top: topOffset,
      zoom,
      bearing,
      pitch: map6.getTilt(),
      latitude,
      longitude
    };
  }
  function getViewPropsFromCoordinateTransformer(map6, transformer) {
    const { width, height } = getMapSize(map6);
    const { center: center2, heading: bearing, tilt: pitch, zoom } = transformer.getCameraParams();
    const fovy = 25;
    const aspect = height ? width / height : 1;
    const near = 0.75;
    const far = 3e14;
    const projectionMatrix = new Matrix4().perspective({
      fovy: fovy * Math.PI / 180,
      aspect,
      near,
      far
    });
    const focalDistance = 0.5 * projectionMatrix[5];
    return {
      width,
      height,
      viewState: {
        altitude: focalDistance,
        bearing,
        latitude: center2.lat(),
        longitude: center2.lng(),
        pitch,
        projectionMatrix,
        repeat: true,
        zoom: zoom - 1
      }
    };
  }
  function getMapSize(map6) {
    const container = map6.getDiv().firstChild;
    return {
      // @ts-ignore (TS2531) Object is possibly 'null'
      width: container.offsetWidth,
      // @ts-ignore (TS2531) Object is possibly 'null'
      height: container.offsetHeight
    };
  }
  function pixelToLngLat(projection, x4, y5) {
    const point = new google.maps.Point(x4, y5);
    const latLng = projection.fromContainerPixelToLatLng(point);
    return [latLng.lng(), latLng.lat()];
  }
  function getEventPixel(event, deck) {
    if (event.pixel) {
      return event.pixel;
    }
    const point = deck.getViewports()[0].project([event.latLng.lng(), event.latLng.lat()]);
    return {
      x: point[0],
      y: point[1]
    };
  }
  function handleMouseEvent(deck, type, event) {
    if (!deck.isInitialized) {
      return;
    }
    const mockEvent = {
      type,
      offsetCenter: getEventPixel(event, deck),
      srcEvent: event
    };
    switch (type) {
      case "click":
      case "rightclick":
        mockEvent.type = "click";
        mockEvent.tapCount = 1;
        deck._onPointerDown(mockEvent);
        deck._onEvent(mockEvent);
        break;
      case "dblclick":
        mockEvent.type = "click";
        mockEvent.tapCount = 2;
        deck._onEvent(mockEvent);
        break;
      case "mousemove":
        mockEvent.type = "pointermove";
        deck._onPointerMove(mockEvent);
        break;
      case "mouseout":
        mockEvent.type = "pointerleave";
        deck._onPointerMove(mockEvent);
        break;
      default:
        return;
    }
  }

  // ../google-maps/src/google-maps-overlay.ts
  var HIDE_ALL_LAYERS = () => false;
  var GL_STATE = {
    depthMask: true,
    depthTest: true,
    blend: true,
    blendFunc: [GLEnum.SRC_ALPHA, GLEnum.ONE_MINUS_SRC_ALPHA, GLEnum.ONE, GLEnum.ONE_MINUS_SRC_ALPHA],
    blendEquation: GLEnum.FUNC_ADD
  };
  function noop7() {
  }
  var defaultProps48 = {
    interleaved: true
  };
  var GoogleMapsOverlay = class {
    constructor(props) {
      this.props = {};
      this._map = null;
      this._deck = null;
      this._overlay = null;
      this.setProps({ ...defaultProps48, ...props });
    }
    /* Public API */
    /** Add/remove the overlay from a map. */
    setMap(map6) {
      if (map6 === this._map) {
        return;
      }
      const { VECTOR, UNINITIALIZED } = google.maps.RenderingType;
      if (this._map) {
        if (!map6 && this._map.getRenderingType() === VECTOR && this.props.interleaved) {
          this._overlay.requestRedraw();
        }
        this._overlay?.setMap(null);
        this._map = null;
      }
      if (map6) {
        this._map = map6;
        const renderingType = map6.getRenderingType();
        if (renderingType !== UNINITIALIZED) {
          this._createOverlay(map6);
        } else {
          map6.addListener("renderingtype_changed", () => {
            this._createOverlay(map6);
          });
        }
      }
    }
    /**
     * Update (partial) props.
     */
    setProps(props) {
      Object.assign(this.props, props);
      if (this._deck) {
        const canvas2 = this._deck.getCanvas();
        if (props.style && canvas2?.parentElement) {
          const parentStyle = canvas2.parentElement.style;
          Object.assign(parentStyle, props.style);
          props.style = null;
        }
        this._deck.setProps(props);
      }
    }
    /** Equivalent of `deck.pickObject`. */
    pickObject(params) {
      return this._deck && this._deck.pickObject(params);
    }
    /** Equivalent of `deck.pickObjects`.  */
    pickMultipleObjects(params) {
      return this._deck && this._deck.pickMultipleObjects(params);
    }
    /** Equivalent of `deck.pickMultipleObjects`. */
    pickObjects(params) {
      return this._deck && this._deck.pickObjects(params);
    }
    /** Remove the overlay and release all underlying resources. */
    finalize() {
      this.setMap(null);
      if (this._deck) {
        destroyDeckInstance(this._deck);
        this._deck = null;
      }
    }
    /* Private API */
    _createOverlay(map6) {
      const { interleaved } = this.props;
      const { VECTOR, UNINITIALIZED } = google.maps.RenderingType;
      const renderingType = map6.getRenderingType();
      if (renderingType === UNINITIALIZED) {
        return;
      }
      const isVectorMap = renderingType === VECTOR && google.maps.WebGLOverlayView;
      const OverlayView = isVectorMap ? google.maps.WebGLOverlayView : google.maps.OverlayView;
      const overlay = new OverlayView();
      if (overlay instanceof google.maps.WebGLOverlayView) {
        if (interleaved) {
          overlay.onAdd = noop7;
          overlay.onContextRestored = this._onContextRestored.bind(this);
          overlay.onDraw = this._onDrawVectorInterleaved.bind(this);
        } else {
          overlay.onAdd = this._onAdd.bind(this);
          overlay.onContextRestored = noop7;
          overlay.onDraw = this._onDrawVectorOverlay.bind(this);
        }
        overlay.onContextLost = this._onContextLost.bind(this);
      } else {
        overlay.onAdd = this._onAdd.bind(this);
        overlay.draw = this._onDrawRaster.bind(this);
      }
      overlay.onRemove = this._onRemove.bind(this);
      this._overlay = overlay;
      this._overlay.setMap(map6);
    }
    _onAdd() {
      this._deck = createDeckInstance(this._map, this._overlay, this._deck, this.props);
    }
    _onContextRestored({ gl }) {
      if (!this._map || !this._overlay) {
        return;
      }
      const _customRender = () => {
        if (this._overlay) {
          this._overlay.requestRedraw();
        }
      };
      const deck = createDeckInstance(this._map, this._overlay, this._deck, {
        gl,
        _customRender,
        ...this.props
      });
      this._deck = deck;
      const animationLoop = deck.animationLoop;
      animationLoop._renderFrame = () => {
        const ab = gl.getParameter(gl.ARRAY_BUFFER_BINDING);
        const device = deck.device;
        device.withParametersWebGL({}, () => {
          animationLoop.props.onRender(animationLoop.animationProps);
        });
        gl.bindBuffer(gl.ARRAY_BUFFER, ab);
      };
    }
    _onContextLost() {
      if (this._deck) {
        destroyDeckInstance(this._deck);
        this._deck = null;
      }
    }
    _onRemove() {
      this._deck?.setProps({ layerFilter: HIDE_ALL_LAYERS });
    }
    _onDrawRaster() {
      if (!this._deck || !this._map) {
        return;
      }
      const deck = this._deck;
      const { width, height, left, top, ...rest } = getViewPropsFromOverlay(
        this._map,
        this._overlay
      );
      const canvas2 = deck.getCanvas();
      const parent = canvas2?.parentElement || deck.props.parent;
      if (parent) {
        const parentStyle = parent.style;
        parentStyle.left = `${left}px`;
        parentStyle.top = `${top}px`;
      }
      const altitude = 1e4;
      deck.setProps({
        width,
        height,
        // @ts-expect-error altitude is accepted by WebMercatorViewport but not exposed by type
        viewState: { altitude, ...rest }
      });
      deck.redraw();
    }
    // Vector code path
    _onDrawVectorInterleaved({ gl, transformer }) {
      if (!this._deck || !this._map) {
        return;
      }
      const deck = this._deck;
      deck.setProps({
        ...getViewPropsFromCoordinateTransformer(this._map, transformer),
        // Using external gl context - do not set css size
        width: null,
        height: null
      });
      if (deck.isInitialized) {
        const device = deck.device;
        if (device instanceof WebGLDevice) {
          const _framebuffer = device.getParametersWebGL(GLEnum.FRAMEBUFFER_BINDING);
          deck.setProps({ _framebuffer });
        }
        deck.needsRedraw({ clearRedrawFlags: true });
        if (device instanceof WebGLDevice) {
          device.setParametersWebGL({
            viewport: [0, 0, gl.canvas.width, gl.canvas.height],
            scissor: [0, 0, gl.canvas.width, gl.canvas.height],
            stencilFunc: [gl.ALWAYS, 0, 255, gl.ALWAYS, 0, 255]
          });
          device.withParametersWebGL(GL_STATE, () => {
            deck._drawLayers("google-vector", {
              clearCanvas: false
            });
          });
        }
      }
    }
    _onDrawVectorOverlay({ transformer }) {
      if (!this._deck || !this._map) {
        return;
      }
      const deck = this._deck;
      deck.setProps({
        ...getViewPropsFromCoordinateTransformer(this._map, transformer)
      });
      deck.redraw();
    }
  };

  // ../mapbox/src/deck-utils.ts
  var MAPBOX_VIEW_ID = "mapbox";
  var TILE_SIZE6 = 512;
  var DEGREES_TO_RADIANS14 = Math.PI / 180;
  function getDeckInstance({
    map: map6,
    gl,
    deck
  }) {
    if (map6.__deck) {
      return map6.__deck;
    }
    const customRender = deck?.props._customRender;
    const onLoad = deck?.props.onLoad;
    const deckProps = {
      ...deck?.props,
      _customRender: () => {
        map6.triggerRepaint();
        customRender?.("");
      }
    };
    deckProps.parameters = { ...getDefaultParameters(map6, true), ...deckProps.parameters };
    deckProps.views ||= getDefaultView(map6);
    let deckInstance;
    if (!deck || deck.props.gl === gl) {
      Object.assign(deckProps, {
        gl,
        width: null,
        height: null,
        touchAction: "unset",
        viewState: getViewState(map6)
      });
      if (deck?.isInitialized) {
        watchMapMove(deck, map6);
      } else {
        deckProps.onLoad = () => {
          onLoad?.();
          watchMapMove(deckInstance, map6);
        };
      }
    }
    if (deck) {
      deckInstance = deck;
      deck.setProps(deckProps);
      deck.userData.isExternal = true;
    } else {
      deckInstance = new Deck(deckProps);
      map6.on("remove", () => {
        removeDeckInstance(map6);
      });
    }
    deckInstance.userData.mapboxLayers = /* @__PURE__ */ new Set();
    map6.__deck = deckInstance;
    map6.on("render", () => {
      if (deckInstance.isInitialized)
        afterRender(deckInstance, map6);
    });
    return deckInstance;
  }
  function watchMapMove(deck, map6) {
    const _handleMapMove = () => {
      if (deck.isInitialized) {
        onMapMove(deck, map6);
      } else {
        map6.off("move", _handleMapMove);
      }
    };
    map6.on("move", _handleMapMove);
  }
  function removeDeckInstance(map6) {
    map6.__deck?.finalize();
    map6.__deck = null;
  }
  function getDefaultParameters(map6, interleaved) {
    const result = interleaved ? {
      depthWriteEnabled: true,
      depthCompare: "less-equal",
      depthBias: 0,
      blend: true,
      blendColorSrcFactor: "src-alpha",
      blendColorDstFactor: "one-minus-src-alpha",
      blendAlphaSrcFactor: "one",
      blendAlphaDstFactor: "one-minus-src-alpha",
      blendColorOperation: "add",
      blendAlphaOperation: "add"
    } : {};
    if (getProjection(map6) === "globe") {
      result.cullMode = "back";
    }
    return result;
  }
  function addLayer(deck, layer) {
    deck.userData.mapboxLayers.add(layer);
    updateLayers(deck);
  }
  function removeLayer(deck, layer) {
    deck.userData.mapboxLayers.delete(layer);
    updateLayers(deck);
  }
  function updateLayer(deck, layer) {
    updateLayers(deck);
  }
  function drawLayer(deck, map6, layer, renderParameters) {
    let { currentViewport } = deck.userData;
    let clearStack = false;
    if (!currentViewport) {
      currentViewport = getViewport(deck, map6, renderParameters);
      deck.userData.currentViewport = currentViewport;
      clearStack = true;
    }
    if (!deck.isInitialized) {
      return;
    }
    deck._drawLayers("mapbox-repaint", {
      viewports: [currentViewport],
      layerFilter: (params) => (!deck.props.layerFilter || deck.props.layerFilter(params)) && (layer.id === params.layer.id || params.layer.props.operation.includes("terrain")),
      clearStack,
      clearCanvas: false
    });
  }
  function getProjection(map6) {
    const projection = map6.getProjection?.();
    const type = (
      // maplibre projection spec
      projection?.type || // mapbox projection spec
      projection?.name
    );
    if (type === "globe") {
      return "globe";
    }
    if (type && type !== "mercator") {
      throw new Error("Unsupported projection");
    }
    return "mercator";
  }
  function getDefaultView(map6) {
    if (getProjection(map6) === "globe") {
      return new GlobeView({ id: MAPBOX_VIEW_ID });
    }
    return new MapView({ id: MAPBOX_VIEW_ID });
  }
  function getViewState(map6) {
    const { lng, lat } = map6.getCenter();
    const viewState = {
      // Longitude returned by getCenter can be outside of [-180, 180] when zooming near the anti meridian
      // https://github.com/visgl/deck.gl/issues/6894
      longitude: (lng + 540) % 360 - 180,
      latitude: lat,
      zoom: map6.getZoom(),
      bearing: map6.getBearing(),
      pitch: map6.getPitch(),
      padding: map6.getPadding(),
      repeat: map6.getRenderWorldCopies()
    };
    if (map6.getTerrain?.()) {
      centerCameraOnTerrain(map6, viewState);
    }
    return viewState;
  }
  function centerCameraOnTerrain(map6, viewState) {
    if (map6.getFreeCameraOptions) {
      const { position } = map6.getFreeCameraOptions();
      if (!position || position.z === void 0) {
        return;
      }
      const height = map6.transform.height;
      const { longitude, latitude, pitch } = viewState;
      const cameraX = position.x * TILE_SIZE6;
      const cameraY = (1 - position.y) * TILE_SIZE6;
      const cameraZ = position.z * TILE_SIZE6;
      const center2 = lngLatToWorld([longitude, latitude]);
      const dx = cameraX - center2[0];
      const dy = cameraY - center2[1];
      const cameraToCenterDistanceGround = Math.sqrt(dx * dx + dy * dy);
      const pitchRadians = pitch * DEGREES_TO_RADIANS14;
      const altitudePixels = 1.5 * height;
      const scale24 = pitchRadians < 1e-3 ? (
        // Pitch angle too small to deduce the look at point, assume elevation is 0
        altitudePixels * Math.cos(pitchRadians) / cameraZ
      ) : altitudePixels * Math.sin(pitchRadians) / cameraToCenterDistanceGround;
      viewState.zoom = Math.log2(scale24);
      const cameraZFromSurface = altitudePixels * Math.cos(pitchRadians) / scale24;
      const surfaceElevation = cameraZ - cameraZFromSurface;
      viewState.position = [0, 0, surfaceElevation / unitsPerMeter(latitude)];
    } else if (typeof map6.transform.elevation === "number") {
      viewState.position = [0, 0, map6.transform.elevation];
    }
  }
  function getViewport(deck, map6, renderParameters) {
    const viewState = getViewState(map6);
    const { views } = deck.props;
    const view = views && flatten(views).find((v5) => v5.id === MAPBOX_VIEW_ID) || getDefaultView(map6);
    if (renderParameters) {
      view.props.nearZMultiplier = 0.2;
    }
    const nearZ = renderParameters?.nearZ ?? map6.transform._nearZ;
    const farZ = renderParameters?.farZ ?? map6.transform._farZ;
    if (Number.isFinite(nearZ)) {
      viewState.nearZ = nearZ / map6.transform.height;
      viewState.farZ = farZ / map6.transform.height;
    }
    return view.makeViewport({
      width: deck.width,
      height: deck.height,
      viewState
    });
  }
  function afterRender(deck, map6) {
    const { mapboxLayers, isExternal } = deck.userData;
    if (isExternal) {
      const mapboxLayerIds = Array.from(mapboxLayers, (layer) => layer.id);
      const deckLayers = flatten(deck.props.layers, Boolean);
      const hasNonMapboxLayers = deckLayers.some(
        (layer) => layer && !mapboxLayerIds.includes(layer.id)
      );
      let viewports = deck.getViewports();
      const mapboxViewportIdx = viewports.findIndex((vp) => vp.id === MAPBOX_VIEW_ID);
      const hasNonMapboxViews = viewports.length > 1 || mapboxViewportIdx < 0;
      if (hasNonMapboxLayers || hasNonMapboxViews) {
        if (mapboxViewportIdx >= 0) {
          viewports = viewports.slice();
          viewports[mapboxViewportIdx] = getViewport(deck, map6);
        }
        deck._drawLayers("mapbox-repaint", {
          viewports,
          layerFilter: (params) => (!deck.props.layerFilter || deck.props.layerFilter(params)) && (params.viewport.id !== MAPBOX_VIEW_ID || !mapboxLayerIds.includes(params.layer.id)),
          clearCanvas: false
        });
      }
    }
    deck.userData.currentViewport = null;
  }
  function onMapMove(deck, map6) {
    deck.setProps({
      viewState: getViewState(map6)
    });
    deck.needsRedraw({ clearRedrawFlags: true });
  }
  function updateLayers(deck) {
    if (deck.userData.isExternal) {
      return;
    }
    const layers = [];
    deck.userData.mapboxLayers.forEach((deckLayer) => {
      const LayerType = deckLayer.props.type;
      const layer = new LayerType(deckLayer.props);
      layers.push(layer);
    });
    deck.setProps({ layers });
  }

  // ../mapbox/src/mapbox-layer.ts
  var MapboxLayer = class {
    /* eslint-disable no-this-before-super */
    constructor(props) {
      if (!props.id) {
        throw new Error("Layer must have an unique id");
      }
      this.id = props.id;
      this.type = "custom";
      this.renderingMode = props.renderingMode || "3d";
      this.slot = props.slot;
      this.map = null;
      this.deck = null;
      this.props = props;
    }
    /* Mapbox custom layer methods */
    onAdd(map6, gl) {
      this.map = map6;
      this.deck = getDeckInstance({ map: map6, gl, deck: this.props.deck });
      addLayer(this.deck, this);
    }
    onRemove() {
      if (this.deck) {
        removeLayer(this.deck, this);
      }
    }
    setProps(props) {
      Object.assign(this.props, props, { id: this.id });
      if (this.deck) {
        updateLayer(this.deck, this);
      }
    }
    render(gl, renderParameters) {
      drawLayer(this.deck, this.map, this, renderParameters);
    }
  };

  // ../mapbox/src/resolve-layers.ts
  var UNDEFINED_BEFORE_ID = "__UNDEFINED__";
  function resolveLayers(map6, deck, oldLayers, newLayers) {
    if (!map6 || !deck || !map6.style || !map6.style._loaded) {
      return;
    }
    const layers = flatten(newLayers, Boolean);
    if (oldLayers !== newLayers) {
      const prevLayers = flatten(oldLayers, Boolean);
      const prevLayerIds = new Set(prevLayers.map((l5) => l5.id));
      for (const layer of layers) {
        prevLayerIds.delete(layer.id);
      }
      for (const id of prevLayerIds) {
        if (map6.getLayer(id)) {
          map6.removeLayer(id);
        }
      }
    }
    for (const layer of layers) {
      const mapboxLayer = map6.getLayer(layer.id);
      if (mapboxLayer) {
        const layerInstance = mapboxLayer.implementation || mapboxLayer;
        layerInstance.setProps(layer.props);
      } else {
        map6.addLayer(
          new MapboxLayer({
            id: layer.id,
            deck,
            // @ts-expect-error slot is not defined in LayerProps
            slot: layer.props.slot
          }),
          // @ts-expect-error beforeId is not defined in LayerProps
          layer.props.beforeId
        );
      }
    }
    const mapLayers = map6.style._order;
    const layerGroups = {};
    for (const layer of layers) {
      let { beforeId } = layer.props;
      if (!beforeId || !mapLayers.includes(beforeId)) {
        beforeId = UNDEFINED_BEFORE_ID;
      }
      layerGroups[beforeId] = layerGroups[beforeId] || [];
      layerGroups[beforeId].push(layer.id);
    }
    for (const beforeId in layerGroups) {
      const layerGroup = layerGroups[beforeId];
      let lastLayerIndex = beforeId === UNDEFINED_BEFORE_ID ? mapLayers.length : mapLayers.indexOf(beforeId);
      let lastLayerId = beforeId === UNDEFINED_BEFORE_ID ? void 0 : beforeId;
      for (let i7 = layerGroup.length - 1; i7 >= 0; i7--) {
        const layerId = layerGroup[i7];
        const layerIndex = mapLayers.indexOf(layerId);
        if (layerIndex !== lastLayerIndex - 1) {
          map6.moveLayer(layerId, lastLayerId);
          if (layerIndex > lastLayerIndex) {
            lastLayerIndex++;
          }
        }
        lastLayerIndex--;
        lastLayerId = layerId;
      }
    }
  }

  // ../mapbox/src/mapbox-overlay.ts
  var MapboxOverlay = class {
    constructor(props) {
      this._handleStyleChange = () => {
        resolveLayers(this._map, this._deck, this._props.layers, this._props.layers);
        if (!this._map)
          return;
        const projection = getProjection(this._map);
        if (projection && !this._props.views) {
          this._deck?.setProps({ views: getDefaultView(this._map) });
        }
      };
      this._updateContainerSize = () => {
        if (this._map && this._container) {
          const { clientWidth, clientHeight } = this._map.getContainer();
          Object.assign(this._container.style, {
            width: `${clientWidth}px`,
            height: `${clientHeight}px`
          });
        }
      };
      this._updateViewState = () => {
        const deck = this._deck;
        const map6 = this._map;
        if (deck && map6) {
          deck.setProps({
            views: this._props.views || getDefaultView(map6),
            viewState: getViewState(map6)
          });
          if (deck.isInitialized) {
            deck.redraw();
          }
        }
      };
      // eslint-disable-next-line complexity
      this._handleMouseEvent = (event) => {
        const deck = this._deck;
        if (!deck || !deck.isInitialized) {
          return;
        }
        const mockEvent = {
          type: event.type,
          offsetCenter: event.point,
          srcEvent: event
        };
        const lastDown = this._lastMouseDownPoint;
        if (!event.point && lastDown) {
          mockEvent.deltaX = event.originalEvent.clientX - lastDown.clientX;
          mockEvent.deltaY = event.originalEvent.clientY - lastDown.clientY;
          mockEvent.offsetCenter = {
            x: lastDown.x + mockEvent.deltaX,
            y: lastDown.y + mockEvent.deltaY
          };
        }
        switch (mockEvent.type) {
          case "mousedown":
            deck._onPointerDown(mockEvent);
            this._lastMouseDownPoint = {
              ...event.point,
              clientX: event.originalEvent.clientX,
              clientY: event.originalEvent.clientY
            };
            break;
          case "dragstart":
            mockEvent.type = "panstart";
            deck._onEvent(mockEvent);
            break;
          case "drag":
            mockEvent.type = "panmove";
            deck._onEvent(mockEvent);
            break;
          case "dragend":
            mockEvent.type = "panend";
            deck._onEvent(mockEvent);
            break;
          case "click":
            mockEvent.tapCount = 1;
            deck._onEvent(mockEvent);
            break;
          case "dblclick":
            mockEvent.type = "click";
            mockEvent.tapCount = 2;
            deck._onEvent(mockEvent);
            break;
          case "mousemove":
            mockEvent.type = "pointermove";
            deck._onPointerMove(mockEvent);
            break;
          case "mouseout":
            mockEvent.type = "pointerleave";
            deck._onPointerMove(mockEvent);
            break;
          default:
            return;
        }
      };
      const { interleaved = false } = props;
      this._interleaved = interleaved;
      this._props = this.filterProps(props);
    }
    /** Filter out props to pass to Deck **/
    filterProps(props) {
      const { interleaved = false, useDevicePixels, ...deckProps } = props;
      if (!interleaved && useDevicePixels !== void 0) {
        deckProps.useDevicePixels = useDevicePixels;
      }
      return deckProps;
    }
    /** Update (partial) props of the underlying Deck instance. */
    setProps(props) {
      if (this._interleaved && props.layers) {
        resolveLayers(this._map, this._deck, this._props.layers, props.layers);
      }
      Object.assign(this._props, this.filterProps(props));
      if (this._deck && this._map) {
        this._deck.setProps({
          ...this._props,
          parameters: {
            ...getDefaultParameters(this._map, this._interleaved),
            ...this._props.parameters
          }
        });
      }
    }
    // The local Map type is for internal typecheck only. It does not necesarily satisefy mapbox/maplibre types at runtime.
    // Do not restrict the argument type here to avoid type conflict.
    /** Called when the control is added to a map */
    onAdd(map6) {
      this._map = map6;
      return this._interleaved ? this._onAddInterleaved(map6) : this._onAddOverlaid(map6);
    }
    _onAddOverlaid(map6) {
      const container = document.createElement("div");
      Object.assign(container.style, {
        position: "absolute",
        left: 0,
        top: 0,
        textAlign: "initial",
        pointerEvents: "none"
      });
      this._container = container;
      this._deck = new Deck({
        ...this._props,
        parent: container,
        parameters: { ...getDefaultParameters(map6, false), ...this._props.parameters },
        views: this._props.views || getDefaultView(map6),
        viewState: getViewState(map6)
      });
      map6.on("resize", this._updateContainerSize);
      map6.on("render", this._updateViewState);
      map6.on("mousedown", this._handleMouseEvent);
      map6.on("dragstart", this._handleMouseEvent);
      map6.on("drag", this._handleMouseEvent);
      map6.on("dragend", this._handleMouseEvent);
      map6.on("mousemove", this._handleMouseEvent);
      map6.on("mouseout", this._handleMouseEvent);
      map6.on("click", this._handleMouseEvent);
      map6.on("dblclick", this._handleMouseEvent);
      this._updateContainerSize();
      return container;
    }
    _onAddInterleaved(map6) {
      const gl = map6.painter.context.gl;
      if (gl instanceof WebGLRenderingContext) {
        log_default.warn(
          "Incompatible basemap library. See: https://deck.gl/docs/api-reference/mapbox/overview#compatibility"
        )();
      }
      this._deck = getDeckInstance({
        map: map6,
        gl,
        deck: new Deck({
          ...this._props,
          gl,
          parameters: { ...getDefaultParameters(map6, false), ...this._props.parameters },
          deviceProps: {
            createCanvasContext: { autoResize: true }
          }
        })
      });
      map6.on("styledata", this._handleStyleChange);
      resolveLayers(map6, this._deck, [], this._props.layers);
      return document.createElement("div");
    }
    /** Called when the control is removed from a map */
    onRemove() {
      const map6 = this._map;
      if (map6) {
        if (this._interleaved) {
          this._onRemoveInterleaved(map6);
        } else {
          this._onRemoveOverlaid(map6);
        }
      }
      this._deck = void 0;
      this._map = void 0;
      this._container = void 0;
    }
    _onRemoveOverlaid(map6) {
      map6.off("resize", this._updateContainerSize);
      map6.off("render", this._updateViewState);
      map6.off("mousedown", this._handleMouseEvent);
      map6.off("dragstart", this._handleMouseEvent);
      map6.off("drag", this._handleMouseEvent);
      map6.off("dragend", this._handleMouseEvent);
      map6.off("mousemove", this._handleMouseEvent);
      map6.off("mouseout", this._handleMouseEvent);
      map6.off("click", this._handleMouseEvent);
      map6.off("dblclick", this._handleMouseEvent);
      this._deck?.finalize();
    }
    _onRemoveInterleaved(map6) {
      map6.off("styledata", this._handleStyleChange);
      resolveLayers(map6, this._deck, this._props.layers, []);
      removeDeckInstance(map6);
    }
    getDefaultPosition() {
      return "top-left";
    }
    /** Forwards the Deck.pickObject method */
    pickObject(params) {
      assert8(this._deck);
      return this._deck.pickObject(params);
    }
    /** Forwards the Deck.pickMultipleObjects method */
    pickMultipleObjects(params) {
      assert8(this._deck);
      return this._deck.pickMultipleObjects(params);
    }
    /** Forwards the Deck.pickObjects method */
    pickObjects(params) {
      assert8(this._deck);
      return this._deck.pickObjects(params);
    }
    /** Remove from map and releases all resources */
    finalize() {
      if (this._map) {
        this._map.removeControl(this);
      }
    }
    /** If interleaved: true, returns base map's canvas, otherwise forwards the Deck.getCanvas method. */
    getCanvas() {
      if (!this._map) {
        return null;
      }
      return this._interleaved ? this._map.getCanvas() : this._deck.getCanvas();
    }
  };

  // ../../node_modules/preact/dist/preact.module.js
  var n3;
  var l3;
  var u3;
  var t3;
  var i4;
  var o3;
  var r3;
  var f3;
  var e4;
  var c3;
  var s3;
  var a4;
  var h2 = {};
  var p3 = [];
  var v3 = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
  var y3 = Array.isArray;
  function d3(n4, l5) {
    for (var u6 in l5)
      n4[u6] = l5[u6];
    return n4;
  }
  function w3(n4) {
    var l5 = n4.parentNode;
    l5 && l5.removeChild(n4);
  }
  function _2(l5, u6, t5) {
    var i7, o5, r5, f6 = {};
    for (r5 in u6)
      "key" == r5 ? i7 = u6[r5] : "ref" == r5 ? o5 = u6[r5] : f6[r5] = u6[r5];
    if (arguments.length > 2 && (f6.children = arguments.length > 3 ? n3.call(arguments, 2) : t5), "function" == typeof l5 && null != l5.defaultProps)
      for (r5 in l5.defaultProps)
        void 0 === f6[r5] && (f6[r5] = l5.defaultProps[r5]);
    return g2(l5, f6, i7, o5, null);
  }
  function g2(n4, t5, i7, o5, r5) {
    var f6 = { type: n4, props: t5, key: i7, ref: o5, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, constructor: void 0, __v: null == r5 ? ++u3 : r5, __i: -1, __u: 0 };
    return null == r5 && null != l3.vnode && l3.vnode(f6), f6;
  }
  function k2(n4) {
    return n4.children;
  }
  function b3(n4, l5) {
    this.props = n4, this.context = l5;
  }
  function x3(n4, l5) {
    if (null == l5)
      return n4.__ ? x3(n4.__, n4.__i + 1) : null;
    for (var u6; l5 < n4.__k.length; l5++)
      if (null != (u6 = n4.__k[l5]) && null != u6.__e)
        return u6.__e;
    return "function" == typeof n4.type ? x3(n4) : null;
  }
  function C3(n4) {
    var l5, u6;
    if (null != (n4 = n4.__) && null != n4.__c) {
      for (n4.__e = n4.__c.base = null, l5 = 0; l5 < n4.__k.length; l5++)
        if (null != (u6 = n4.__k[l5]) && null != u6.__e) {
          n4.__e = n4.__c.base = u6.__e;
          break;
        }
      return C3(n4);
    }
  }
  function M2(n4) {
    (!n4.__d && (n4.__d = true) && i4.push(n4) && !P2.__r++ || o3 !== l3.debounceRendering) && ((o3 = l3.debounceRendering) || r3)(P2);
  }
  function P2() {
    var n4, u6, t5, o5, r5, e6, c5, s5;
    for (i4.sort(f3); n4 = i4.shift(); )
      n4.__d && (u6 = i4.length, o5 = void 0, e6 = (r5 = (t5 = n4).__v).__e, c5 = [], s5 = [], t5.__P && ((o5 = d3({}, r5)).__v = r5.__v + 1, l3.vnode && l3.vnode(o5), O2(t5.__P, o5, r5, t5.__n, t5.__P.namespaceURI, 32 & r5.__u ? [e6] : null, c5, null == e6 ? x3(r5) : e6, !!(32 & r5.__u), s5), o5.__v = r5.__v, o5.__.__k[o5.__i] = o5, j2(c5, o5, s5), o5.__e != e6 && C3(o5)), i4.length > u6 && i4.sort(f3));
    P2.__r = 0;
  }
  function S2(n4, l5, u6, t5, i7, o5, r5, f6, e6, c5, s5) {
    var a6, v5, y5, d5, w5, _3 = t5 && t5.__k || p3, g3 = l5.length;
    for (u6.__d = e6, $2(u6, l5, _3), e6 = u6.__d, a6 = 0; a6 < g3; a6++)
      null != (y5 = u6.__k[a6]) && "boolean" != typeof y5 && "function" != typeof y5 && (v5 = -1 === y5.__i ? h2 : _3[y5.__i] || h2, y5.__i = a6, O2(n4, y5, v5, i7, o5, r5, f6, e6, c5, s5), d5 = y5.__e, y5.ref && v5.ref != y5.ref && (v5.ref && N2(v5.ref, null, y5), s5.push(y5.ref, y5.__c || d5, y5)), null == w5 && null != d5 && (w5 = d5), 65536 & y5.__u || v5.__k === y5.__k ? e6 = I2(y5, e6, n4) : "function" == typeof y5.type && void 0 !== y5.__d ? e6 = y5.__d : d5 && (e6 = d5.nextSibling), y5.__d = void 0, y5.__u &= -196609);
    u6.__d = e6, u6.__e = w5;
  }
  function $2(n4, l5, u6) {
    var t5, i7, o5, r5, f6, e6 = l5.length, c5 = u6.length, s5 = c5, a6 = 0;
    for (n4.__k = [], t5 = 0; t5 < e6; t5++)
      r5 = t5 + a6, null != (i7 = n4.__k[t5] = null == (i7 = l5[t5]) || "boolean" == typeof i7 || "function" == typeof i7 ? null : "string" == typeof i7 || "number" == typeof i7 || "bigint" == typeof i7 || i7.constructor == String ? g2(null, i7, null, null, null) : y3(i7) ? g2(k2, { children: i7 }, null, null, null) : void 0 === i7.constructor && i7.__b > 0 ? g2(i7.type, i7.props, i7.key, i7.ref ? i7.ref : null, i7.__v) : i7) ? (i7.__ = n4, i7.__b = n4.__b + 1, f6 = L3(i7, u6, r5, s5), i7.__i = f6, o5 = null, -1 !== f6 && (s5--, (o5 = u6[f6]) && (o5.__u |= 131072)), null == o5 || null === o5.__v ? (-1 == f6 && a6--, "function" != typeof i7.type && (i7.__u |= 65536)) : f6 !== r5 && (f6 == r5 - 1 ? a6-- : f6 == r5 + 1 ? a6++ : f6 > r5 ? s5 > e6 - r5 ? a6 += f6 - r5 : a6-- : f6 < r5 && (f6 == r5 - a6 ? a6 -= f6 - r5 : a6++), f6 !== t5 + a6 && (i7.__u |= 65536))) : (o5 = u6[r5]) && null == o5.key && o5.__e && 0 == (131072 & o5.__u) && (o5.__e == n4.__d && (n4.__d = x3(o5)), V3(o5, o5, false), u6[r5] = null, s5--);
    if (s5)
      for (t5 = 0; t5 < c5; t5++)
        null != (o5 = u6[t5]) && 0 == (131072 & o5.__u) && (o5.__e == n4.__d && (n4.__d = x3(o5)), V3(o5, o5));
  }
  function I2(n4, l5, u6) {
    var t5, i7;
    if ("function" == typeof n4.type) {
      for (t5 = n4.__k, i7 = 0; t5 && i7 < t5.length; i7++)
        t5[i7] && (t5[i7].__ = n4, l5 = I2(t5[i7], l5, u6));
      return l5;
    }
    n4.__e != l5 && (l5 && n4.type && !u6.contains(l5) && (l5 = x3(n4)), u6.insertBefore(n4.__e, l5 || null), l5 = n4.__e);
    do {
      l5 = l5 && l5.nextSibling;
    } while (null != l5 && 8 === l5.nodeType);
    return l5;
  }
  function L3(n4, l5, u6, t5) {
    var i7 = n4.key, o5 = n4.type, r5 = u6 - 1, f6 = u6 + 1, e6 = l5[u6];
    if (null === e6 || e6 && i7 == e6.key && o5 === e6.type && 0 == (131072 & e6.__u))
      return u6;
    if (t5 > (null != e6 && 0 == (131072 & e6.__u) ? 1 : 0))
      for (; r5 >= 0 || f6 < l5.length; ) {
        if (r5 >= 0) {
          if ((e6 = l5[r5]) && 0 == (131072 & e6.__u) && i7 == e6.key && o5 === e6.type)
            return r5;
          r5--;
        }
        if (f6 < l5.length) {
          if ((e6 = l5[f6]) && 0 == (131072 & e6.__u) && i7 == e6.key && o5 === e6.type)
            return f6;
          f6++;
        }
      }
    return -1;
  }
  function T2(n4, l5, u6) {
    "-" === l5[0] ? n4.setProperty(l5, null == u6 ? "" : u6) : n4[l5] = null == u6 ? "" : "number" != typeof u6 || v3.test(l5) ? u6 : u6 + "px";
  }
  function A3(n4, l5, u6, t5, i7) {
    var o5;
    n:
      if ("style" === l5)
        if ("string" == typeof u6)
          n4.style.cssText = u6;
        else {
          if ("string" == typeof t5 && (n4.style.cssText = t5 = ""), t5)
            for (l5 in t5)
              u6 && l5 in u6 || T2(n4.style, l5, "");
          if (u6)
            for (l5 in u6)
              t5 && u6[l5] === t5[l5] || T2(n4.style, l5, u6[l5]);
        }
      else if ("o" === l5[0] && "n" === l5[1])
        o5 = l5 !== (l5 = l5.replace(/(PointerCapture)$|Capture$/i, "$1")), l5 = l5.toLowerCase() in n4 || "onFocusOut" === l5 || "onFocusIn" === l5 ? l5.toLowerCase().slice(2) : l5.slice(2), n4.l || (n4.l = {}), n4.l[l5 + o5] = u6, u6 ? t5 ? u6.u = t5.u : (u6.u = e4, n4.addEventListener(l5, o5 ? s3 : c3, o5)) : n4.removeEventListener(l5, o5 ? s3 : c3, o5);
      else {
        if ("http://www.w3.org/2000/svg" == i7)
          l5 = l5.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
        else if ("width" != l5 && "height" != l5 && "href" != l5 && "list" != l5 && "form" != l5 && "tabIndex" != l5 && "download" != l5 && "rowSpan" != l5 && "colSpan" != l5 && "role" != l5 && "popover" != l5 && l5 in n4)
          try {
            n4[l5] = null == u6 ? "" : u6;
            break n;
          } catch (n5) {
          }
        "function" == typeof u6 || (null == u6 || false === u6 && "-" !== l5[4] ? n4.removeAttribute(l5) : n4.setAttribute(l5, "popover" == l5 && 1 == u6 ? "" : u6));
      }
  }
  function F3(n4) {
    return function(u6) {
      if (this.l) {
        var t5 = this.l[u6.type + n4];
        if (null == u6.t)
          u6.t = e4++;
        else if (u6.t < t5.u)
          return;
        return t5(l3.event ? l3.event(u6) : u6);
      }
    };
  }
  function O2(n4, u6, t5, i7, o5, r5, f6, e6, c5, s5) {
    var a6, h5, p5, v5, w5, _3, g3, m3, x4, C5, M3, P3, $3, I3, H2, L4, T4 = u6.type;
    if (void 0 !== u6.constructor)
      return null;
    128 & t5.__u && (c5 = !!(32 & t5.__u), r5 = [e6 = u6.__e = t5.__e]), (a6 = l3.__b) && a6(u6);
    n:
      if ("function" == typeof T4)
        try {
          if (m3 = u6.props, x4 = "prototype" in T4 && T4.prototype.render, C5 = (a6 = T4.contextType) && i7[a6.__c], M3 = a6 ? C5 ? C5.props.value : a6.__ : i7, t5.__c ? g3 = (h5 = u6.__c = t5.__c).__ = h5.__E : (x4 ? u6.__c = h5 = new T4(m3, M3) : (u6.__c = h5 = new b3(m3, M3), h5.constructor = T4, h5.render = q2), C5 && C5.sub(h5), h5.props = m3, h5.state || (h5.state = {}), h5.context = M3, h5.__n = i7, p5 = h5.__d = true, h5.__h = [], h5._sb = []), x4 && null == h5.__s && (h5.__s = h5.state), x4 && null != T4.getDerivedStateFromProps && (h5.__s == h5.state && (h5.__s = d3({}, h5.__s)), d3(h5.__s, T4.getDerivedStateFromProps(m3, h5.__s))), v5 = h5.props, w5 = h5.state, h5.__v = u6, p5)
            x4 && null == T4.getDerivedStateFromProps && null != h5.componentWillMount && h5.componentWillMount(), x4 && null != h5.componentDidMount && h5.__h.push(h5.componentDidMount);
          else {
            if (x4 && null == T4.getDerivedStateFromProps && m3 !== v5 && null != h5.componentWillReceiveProps && h5.componentWillReceiveProps(m3, M3), !h5.__e && (null != h5.shouldComponentUpdate && false === h5.shouldComponentUpdate(m3, h5.__s, M3) || u6.__v === t5.__v)) {
              for (u6.__v !== t5.__v && (h5.props = m3, h5.state = h5.__s, h5.__d = false), u6.__e = t5.__e, u6.__k = t5.__k, u6.__k.forEach(function(n5) {
                n5 && (n5.__ = u6);
              }), P3 = 0; P3 < h5._sb.length; P3++)
                h5.__h.push(h5._sb[P3]);
              h5._sb = [], h5.__h.length && f6.push(h5);
              break n;
            }
            null != h5.componentWillUpdate && h5.componentWillUpdate(m3, h5.__s, M3), x4 && null != h5.componentDidUpdate && h5.__h.push(function() {
              h5.componentDidUpdate(v5, w5, _3);
            });
          }
          if (h5.context = M3, h5.props = m3, h5.__P = n4, h5.__e = false, $3 = l3.__r, I3 = 0, x4) {
            for (h5.state = h5.__s, h5.__d = false, $3 && $3(u6), a6 = h5.render(h5.props, h5.state, h5.context), H2 = 0; H2 < h5._sb.length; H2++)
              h5.__h.push(h5._sb[H2]);
            h5._sb = [];
          } else
            do {
              h5.__d = false, $3 && $3(u6), a6 = h5.render(h5.props, h5.state, h5.context), h5.state = h5.__s;
            } while (h5.__d && ++I3 < 25);
          h5.state = h5.__s, null != h5.getChildContext && (i7 = d3(d3({}, i7), h5.getChildContext())), x4 && !p5 && null != h5.getSnapshotBeforeUpdate && (_3 = h5.getSnapshotBeforeUpdate(v5, w5)), S2(n4, y3(L4 = null != a6 && a6.type === k2 && null == a6.key ? a6.props.children : a6) ? L4 : [L4], u6, t5, i7, o5, r5, f6, e6, c5, s5), h5.base = u6.__e, u6.__u &= -161, h5.__h.length && f6.push(h5), g3 && (h5.__E = h5.__ = null);
        } catch (n5) {
          if (u6.__v = null, c5 || null != r5) {
            for (u6.__u |= c5 ? 160 : 32; e6 && 8 === e6.nodeType && e6.nextSibling; )
              e6 = e6.nextSibling;
            r5[r5.indexOf(e6)] = null, u6.__e = e6;
          } else
            u6.__e = t5.__e, u6.__k = t5.__k;
          l3.__e(n5, u6, t5);
        }
      else
        null == r5 && u6.__v === t5.__v ? (u6.__k = t5.__k, u6.__e = t5.__e) : u6.__e = z2(t5.__e, u6, t5, i7, o5, r5, f6, c5, s5);
    (a6 = l3.diffed) && a6(u6);
  }
  function j2(n4, u6, t5) {
    u6.__d = void 0;
    for (var i7 = 0; i7 < t5.length; i7++)
      N2(t5[i7], t5[++i7], t5[++i7]);
    l3.__c && l3.__c(u6, n4), n4.some(function(u7) {
      try {
        n4 = u7.__h, u7.__h = [], n4.some(function(n5) {
          n5.call(u7);
        });
      } catch (n5) {
        l3.__e(n5, u7.__v);
      }
    });
  }
  function z2(l5, u6, t5, i7, o5, r5, f6, e6, c5) {
    var s5, a6, p5, v5, d5, _3, g3, m3 = t5.props, k4 = u6.props, b4 = u6.type;
    if ("svg" === b4 ? o5 = "http://www.w3.org/2000/svg" : "math" === b4 ? o5 = "http://www.w3.org/1998/Math/MathML" : o5 || (o5 = "http://www.w3.org/1999/xhtml"), null != r5) {
      for (s5 = 0; s5 < r5.length; s5++)
        if ((d5 = r5[s5]) && "setAttribute" in d5 == !!b4 && (b4 ? d5.localName === b4 : 3 === d5.nodeType)) {
          l5 = d5, r5[s5] = null;
          break;
        }
    }
    if (null == l5) {
      if (null === b4)
        return document.createTextNode(k4);
      l5 = document.createElementNS(o5, b4, k4.is && k4), r5 = null, e6 = false;
    }
    if (null === b4)
      m3 === k4 || e6 && l5.data === k4 || (l5.data = k4);
    else {
      if (r5 = r5 && n3.call(l5.childNodes), m3 = t5.props || h2, !e6 && null != r5)
        for (m3 = {}, s5 = 0; s5 < l5.attributes.length; s5++)
          m3[(d5 = l5.attributes[s5]).name] = d5.value;
      for (s5 in m3)
        if (d5 = m3[s5], "children" == s5)
          ;
        else if ("dangerouslySetInnerHTML" == s5)
          p5 = d5;
        else if ("key" !== s5 && !(s5 in k4)) {
          if ("value" == s5 && "defaultValue" in k4 || "checked" == s5 && "defaultChecked" in k4)
            continue;
          A3(l5, s5, null, d5, o5);
        }
      for (s5 in k4)
        d5 = k4[s5], "children" == s5 ? v5 = d5 : "dangerouslySetInnerHTML" == s5 ? a6 = d5 : "value" == s5 ? _3 = d5 : "checked" == s5 ? g3 = d5 : "key" === s5 || e6 && "function" != typeof d5 || m3[s5] === d5 || A3(l5, s5, d5, m3[s5], o5);
      if (a6)
        e6 || p5 && (a6.__html === p5.__html || a6.__html === l5.innerHTML) || (l5.innerHTML = a6.__html), u6.__k = [];
      else if (p5 && (l5.innerHTML = ""), S2(l5, y3(v5) ? v5 : [v5], u6, t5, i7, "foreignObject" === b4 ? "http://www.w3.org/1999/xhtml" : o5, r5, f6, r5 ? r5[0] : t5.__k && x3(t5, 0), e6, c5), null != r5)
        for (s5 = r5.length; s5--; )
          null != r5[s5] && w3(r5[s5]);
      e6 || (s5 = "value", void 0 !== _3 && (_3 !== l5[s5] || "progress" === b4 && !_3 || "option" === b4 && _3 !== m3[s5]) && A3(l5, s5, _3, m3[s5], o5), s5 = "checked", void 0 !== g3 && g3 !== l5[s5] && A3(l5, s5, g3, m3[s5], o5));
    }
    return l5;
  }
  function N2(n4, u6, t5) {
    try {
      if ("function" == typeof n4) {
        var i7 = "function" == typeof n4.__u;
        i7 && n4.__u(), i7 && null == u6 || (n4.__u = n4(u6));
      } else
        n4.current = u6;
    } catch (n5) {
      l3.__e(n5, t5);
    }
  }
  function V3(n4, u6, t5) {
    var i7, o5;
    if (l3.unmount && l3.unmount(n4), (i7 = n4.ref) && (i7.current && i7.current !== n4.__e || N2(i7, null, u6)), null != (i7 = n4.__c)) {
      if (i7.componentWillUnmount)
        try {
          i7.componentWillUnmount();
        } catch (n5) {
          l3.__e(n5, u6);
        }
      i7.base = i7.__P = null;
    }
    if (i7 = n4.__k)
      for (o5 = 0; o5 < i7.length; o5++)
        i7[o5] && V3(i7[o5], u6, t5 || "function" != typeof n4.type);
    t5 || null == n4.__e || w3(n4.__e), n4.__c = n4.__ = n4.__e = n4.__d = void 0;
  }
  function q2(n4, l5, u6) {
    return this.constructor(n4, u6);
  }
  function B3(u6, t5, i7) {
    var o5, r5, f6, e6;
    l3.__ && l3.__(u6, t5), r5 = (o5 = "function" == typeof i7) ? null : i7 && i7.__k || t5.__k, f6 = [], e6 = [], O2(t5, u6 = (!o5 && i7 || t5).__k = _2(k2, null, [u6]), r5 || h2, h2, t5.namespaceURI, !o5 && i7 ? [i7] : r5 ? null : t5.firstChild ? n3.call(t5.childNodes) : null, f6, !o5 && i7 ? i7 : r5 ? r5.__e : t5.firstChild, o5, e6), j2(f6, u6, e6);
  }
  n3 = p3.slice, l3 = { __e: function(n4, l5, u6, t5) {
    for (var i7, o5, r5; l5 = l5.__; )
      if ((i7 = l5.__c) && !i7.__)
        try {
          if ((o5 = i7.constructor) && null != o5.getDerivedStateFromError && (i7.setState(o5.getDerivedStateFromError(n4)), r5 = i7.__d), null != i7.componentDidCatch && (i7.componentDidCatch(n4, t5 || {}), r5 = i7.__d), r5)
            return i7.__E = i7;
        } catch (l6) {
          n4 = l6;
        }
    throw n4;
  } }, u3 = 0, t3 = function(n4) {
    return null != n4 && null == n4.constructor;
  }, b3.prototype.setState = function(n4, l5) {
    var u6;
    u6 = null != this.__s && this.__s !== this.state ? this.__s : this.__s = d3({}, this.state), "function" == typeof n4 && (n4 = n4(d3({}, u6), this.props)), n4 && d3(u6, n4), null != n4 && this.__v && (l5 && this._sb.push(l5), M2(this));
  }, b3.prototype.forceUpdate = function(n4) {
    this.__v && (this.__e = true, n4 && this.__h.push(n4), M2(this));
  }, b3.prototype.render = k2, i4 = [], r3 = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, f3 = function(n4, l5) {
    return n4.__v.__b - l5.__v.__b;
  }, P2.__r = 0, e4 = 0, c3 = F3(false), s3 = F3(true), a4 = 0;

  // ../../node_modules/preact/jsx-runtime/dist/jsxRuntime.module.js
  var f4 = 0;
  var i5 = Array.isArray;
  function u4(e6, t5, n4, o5, i7, u6) {
    t5 || (t5 = {});
    var a6, c5, p5 = t5;
    if ("ref" in p5)
      for (c5 in p5 = {}, t5)
        "ref" == c5 ? a6 = t5[c5] : p5[c5] = t5[c5];
    var l5 = { type: e6, props: p5, key: n4, ref: a6, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, constructor: void 0, __v: --f4, __i: -1, __u: 0, __source: i7, __self: u6 };
    if ("function" == typeof e6 && (a6 = e6.defaultProps))
      for (c5 in a6)
        void 0 === p5[c5] && (p5[c5] = a6[c5]);
    return l3.vnode && l3.vnode(l5), l5;
  }

  // ../widgets/src/lib/components/button-group.tsx
  var ButtonGroup = (props) => {
    const { children, orientation = "horizontal" } = props;
    return /* @__PURE__ */ u4("div", { className: `deck-widget-button-group ${orientation}`, children });
  };

  // ../widgets/src/lib/components/grouped-icon-button.tsx
  var GroupedIconButton = (props) => {
    const { className = "", label, onClick, children } = props;
    return /* @__PURE__ */ u4(
      "button",
      {
        className: `deck-widget-icon-button ${className}`,
        type: "button",
        onClick,
        title: label,
        children: children ? children : /* @__PURE__ */ u4("div", { className: "deck-widget-icon" })
      }
    );
  };

  // ../widgets/src/zoom-widget.tsx
  var ZoomWidget = class extends Widget {
    constructor(props = {}) {
      super(props);
      this.className = "deck-widget-zoom";
      this.placement = "top-left";
      this.viewports = {};
      this.setProps(this.props);
    }
    setProps(props) {
      this.placement = props.placement ?? this.placement;
      this.viewId = props.viewId ?? this.viewId;
      super.setProps(props);
    }
    onRenderHTML(rootElement) {
      const ui = /* @__PURE__ */ u4(ButtonGroup, { orientation: this.props.orientation, children: [
        /* @__PURE__ */ u4(
          GroupedIconButton,
          {
            onClick: () => this.handleZoomIn(),
            label: this.props.zoomInLabel,
            className: "deck-widget-zoom-in"
          }
        ),
        /* @__PURE__ */ u4(
          GroupedIconButton,
          {
            onClick: () => this.handleZoomOut(),
            label: this.props.zoomOutLabel,
            className: "deck-widget-zoom-out"
          }
        )
      ] });
      B3(ui, rootElement);
    }
    onViewportChange(viewport) {
      this.viewports[viewport.id] = viewport;
    }
    handleZoom(viewport, nextZoom) {
      const viewId = this.viewId || viewport?.id || "default-view";
      const nextViewState = {
        ...viewport,
        zoom: nextZoom
      };
      if (this.props.transitionDuration > 0) {
        nextViewState.transitionDuration = this.props.transitionDuration;
        nextViewState.transitionInterpolator = "latitude" in nextViewState ? new FlyToInterpolator() : new LinearInterpolator({
          transitionProps: ["zoom"]
        });
      }
      this.setViewState(viewId, nextViewState);
    }
    handleZoomIn() {
      for (const viewport of Object.values(this.viewports)) {
        this.handleZoom(viewport, viewport.zoom + 1);
      }
    }
    handleZoomOut() {
      for (const viewport of Object.values(this.viewports)) {
        this.handleZoom(viewport, viewport.zoom - 1);
      }
    }
    /** @todo - move to deck or widget manager */
    setViewState(viewId, viewState) {
      this.deck._onViewStateChange({ viewId, viewState, interactionState: {} });
    }
  };
  ZoomWidget.defaultProps = {
    ...Widget.defaultProps,
    id: "zoom",
    placement: "top-left",
    orientation: "vertical",
    transitionDuration: 200,
    zoomInLabel: "Zoom In",
    zoomOutLabel: "Zoom Out",
    viewId: null
  };

  // ../widgets/src/lib/components/icon-button.tsx
  var IconButton = (props) => {
    const { className = "", label, onClick, children } = props;
    return /* @__PURE__ */ u4("div", { className: "deck-widget-button", children: /* @__PURE__ */ u4(
      "button",
      {
        className: `deck-widget-icon-button ${className}`,
        type: "button",
        onClick,
        title: label,
        children: children ? children : /* @__PURE__ */ u4("div", { className: "deck-widget-icon" })
      }
    ) });
  };

  // ../widgets/src/reset-view-widget.tsx
  var ResetViewWidget = class extends Widget {
    constructor(props = {}) {
      super(props);
      this.className = "deck-widget-reset-view";
      this.placement = "top-left";
      this.setProps(this.props);
    }
    setProps(props) {
      this.placement = props.placement ?? this.placement;
      this.viewId = props.viewId ?? this.viewId;
      super.setProps(props);
    }
    onRenderHTML(rootElement) {
      B3(
        /* @__PURE__ */ u4(
          IconButton,
          {
            className: "deck-widget-reset-focus",
            label: this.props.label,
            onClick: this.handleClick.bind(this)
          }
        ),
        rootElement
      );
    }
    handleClick() {
      const initialViewState = this.props.initialViewState || this.deck?.props.initialViewState;
      this.setViewState(initialViewState);
    }
    setViewState(viewState) {
      const viewId = this.props.viewId || "default-view";
      const nextViewState = {
        ...viewId !== "default-view" ? viewState?.[viewId] : viewState
        // only works for geospatial?
        // transitionDuration: this.props.transitionDuration,
        // transitionInterpolator: new FlyToInterpolator()
      };
      this.deck._onViewStateChange({ viewId, viewState: nextViewState, interactionState: {} });
    }
  };
  ResetViewWidget.defaultProps = {
    ...Widget.defaultProps,
    id: "reset-view",
    placement: "top-left",
    label: "Reset View",
    initialViewState: void 0,
    viewId: null
  };

  // ../widgets/src/gimbal-widget.tsx
  var GimbalWidget = class extends Widget {
    constructor(props = {}) {
      super(props);
      this.className = "deck-widget-gimbal";
      this.placement = "top-left";
      this.viewports = {};
      this.setProps(this.props);
    }
    setProps(props) {
      this.placement = props.placement ?? this.placement;
      this.viewId = props.viewId ?? this.viewId;
      super.setProps(props);
    }
    onRenderHTML(rootElement) {
      const viewId = this.viewId || Object.values(this.viewports)[0]?.id || "default-view";
      const widgetViewport = this.viewports[viewId];
      const { rotationOrbit, rotationX } = this.getNormalizedRotation(widgetViewport);
      const ui = /* @__PURE__ */ u4("div", { className: "deck-widget-button", style: { perspective: 100, pointerEvents: "auto" }, children: /* @__PURE__ */ u4(
        "button",
        {
          type: "button",
          onClick: () => {
            for (const viewport of Object.values(this.viewports)) {
              this.resetOrbitView(viewport);
            }
          },
          title: this.props.label,
          style: { position: "relative", width: 26, height: 26 },
          children: [
            /* @__PURE__ */ u4(
              "svg",
              {
                className: "gimbal-outer-ring",
                width: "100%",
                height: "100%",
                viewBox: "0 0 26 26",
                style: {
                  position: "absolute",
                  top: 0,
                  left: 0,
                  transform: `rotateY(${rotationOrbit}deg)`
                },
                children: /* @__PURE__ */ u4(
                  "circle",
                  {
                    cx: "13",
                    cy: "13",
                    r: "10",
                    stroke: "var(--icon-gimbal-outer-color, rgb(68, 92, 204))",
                    strokeWidth: this.props.strokeWidth,
                    fill: "none"
                  }
                )
              }
            ),
            /* @__PURE__ */ u4(
              "svg",
              {
                className: "gimbal-inner-ring",
                width: "100%",
                height: "100%",
                viewBox: "0 0 26 26",
                style: {
                  position: "absolute",
                  top: 0,
                  left: 0,
                  transform: `rotateX(${rotationX}deg)`
                },
                children: /* @__PURE__ */ u4(
                  "circle",
                  {
                    cx: "13",
                    cy: "13",
                    r: "7",
                    stroke: "var(--icon-gimbal-inner-color, rgb(240, 92, 68))",
                    strokeWidth: this.props.strokeWidth,
                    fill: "none"
                  }
                )
              }
            )
          ]
        }
      ) });
      B3(ui, rootElement);
    }
    onViewportChange(viewport) {
      this.viewports[viewport.id] = viewport;
      this.updateHTML();
    }
    resetOrbitView(viewport) {
      const viewId = this.getViewId(viewport);
      const viewState = this.getViewState(viewId);
      if ("rotationOrbit" in viewState || "rotationX" in viewState) {
        const nextViewState = {
          ...viewState,
          rotationOrbit: 0,
          rotationX: 0,
          transitionDuration: this.props.transitionDuration,
          transitionInterpolator: new LinearInterpolator({
            transitionProps: ["rotationOrbit", "rotationX"]
          })
        };
        this.deck._onViewStateChange({ viewId, viewState: nextViewState, interactionState: {} });
      }
    }
    getNormalizedRotation(viewport) {
      const viewState = this.getViewState(this.getViewId(viewport));
      const [rz, rx] = this.getRotation(viewState);
      const rotationOrbit = normalizeAndClampAngle(rz);
      const rotationX = normalizeAndClampAngle(rx);
      return { rotationOrbit, rotationX };
    }
    getRotation(viewState) {
      if (viewState && ("rotationOrbit" in viewState || "rotationX" in viewState)) {
        return [-(viewState.rotationOrbit || 0), viewState.rotationX || 0];
      }
      return [0, 0];
    }
    // Move to Widget/WidgetManager?
    getViewId(viewport) {
      const viewId = this.viewId || viewport?.id || "OrbitView";
      return viewId;
    }
    getViewState(viewId) {
      const viewManager = this.getViewManager();
      const viewState = viewId && viewManager.getViewState(viewId) || viewManager.viewState;
      return viewState;
    }
    getViewManager() {
      const viewManager = this.deck?.viewManager;
      if (!viewManager) {
        throw new Error("wigdet must be added to a deck instance");
      }
      return viewManager;
    }
  };
  GimbalWidget.defaultProps = {
    ...Widget.defaultProps,
    id: "gimbal",
    placement: "top-left",
    viewId: null,
    label: "Gimbal",
    strokeWidth: 1.5,
    transitionDuration: 200
  };
  function normalizeAndClampAngle(angle10) {
    let normalized = ((angle10 + 180) % 360 + 360) % 360 - 180;
    const AVOID_ANGLE_DELTA = 10;
    const distanceFrom90 = normalized - 90;
    if (Math.abs(distanceFrom90) < AVOID_ANGLE_DELTA) {
      if (distanceFrom90 < AVOID_ANGLE_DELTA) {
        normalized = 90 + AVOID_ANGLE_DELTA;
      } else if (distanceFrom90 > -AVOID_ANGLE_DELTA) {
        normalized = 90 - AVOID_ANGLE_DELTA;
      }
    }
    return normalized;
  }

  // ../widgets/src/compass-widget.tsx
  var CompassWidget = class extends Widget {
    constructor(props = {}) {
      super(props);
      this.className = "deck-widget-compass";
      this.placement = "top-left";
      this.viewports = {};
      this.setProps(this.props);
    }
    setProps(props) {
      this.placement = props.placement ?? this.placement;
      this.viewId = props.viewId ?? this.viewId;
      super.setProps(props);
    }
    onRenderHTML(rootElement) {
      const viewId = this.viewId || Object.values(this.viewports)[0]?.id || "default-view";
      const widgetViewport = this.viewports[viewId];
      const [rz, rx] = this.getRotation(widgetViewport);
      const ui = /* @__PURE__ */ u4("div", { className: "deck-widget-button", style: { perspective: 100 }, children: /* @__PURE__ */ u4(
        "button",
        {
          type: "button",
          onClick: () => {
            for (const viewport of Object.values(this.viewports)) {
              this.handleCompassReset(viewport);
            }
          },
          title: this.props.label,
          style: { transform: `rotateX(${rx}deg)` },
          children: /* @__PURE__ */ u4("svg", { fill: "none", width: "100%", height: "100%", viewBox: "0 0 26 26", children: /* @__PURE__ */ u4("g", { transform: `rotate(${rz},13,13)`, children: [
            /* @__PURE__ */ u4(
              "path",
              {
                d: "M10 13.0001L12.9999 5L15.9997 13.0001H10Z",
                fill: "var(--icon-compass-north-color, rgb(240, 92, 68))"
              }
            ),
            /* @__PURE__ */ u4(
              "path",
              {
                d: "M16.0002 12.9999L13.0004 21L10.0005 12.9999H16.0002Z",
                fill: "var(--icon-compass-south-color, rgb(204, 204, 204))"
              }
            )
          ] }) })
        }
      ) });
      B3(ui, rootElement);
    }
    onViewportChange(viewport) {
      if (!viewport.equals(this.viewports[viewport.id])) {
        this.viewports[viewport.id] = viewport;
        this.updateHTML();
      }
    }
    getRotation(viewport) {
      if (viewport instanceof WebMercatorViewport2) {
        return [-viewport.bearing, viewport.pitch];
      } else if (viewport instanceof GlobeViewport) {
        return [0, Math.max(-80, Math.min(80, viewport.latitude))];
      }
      return [0, 0];
    }
    handleCompassReset(viewport) {
      const viewId = this.viewId || viewport.id || "default-view";
      if (viewport instanceof WebMercatorViewport2) {
        const nextViewState = {
          ...viewport,
          bearing: 0,
          ...this.getRotation(viewport)[0] === 0 ? { pitch: 0 } : {},
          transitionDuration: this.props.transitionDuration,
          transitionInterpolator: new FlyToInterpolator()
        };
        this.deck._onViewStateChange({ viewId, viewState: nextViewState, interactionState: {} });
      }
    }
  };
  CompassWidget.defaultProps = {
    ...Widget.defaultProps,
    id: "compass",
    placement: "top-left",
    viewId: null,
    label: "Reset Compass",
    transitionDuration: 200
  };

  // ../widgets/src/scale-widget.tsx
  var ScaleWidget = class extends Widget {
    constructor(props = {}) {
      super(props);
      this.className = "deck-widget-scale";
      this.placement = "bottom-left";
      // The pixel width of the scale line (computed from a candidate distance)
      this.scaleWidth = 10;
      // The candidate distance (in meters) corresponding to the scale line length.
      this.scaleValue = 0;
      // The formatted distance label (e.g. "200 m" or "1.0 km")
      this.scaleText = "";
      this.setProps(this.props);
    }
    setProps(props) {
      this.placement = props.placement ?? this.placement;
      this.viewId = props.viewId ?? this.viewId;
      super.setProps(props);
    }
    onRenderHTML(rootElement) {
      const lineOffsetX = 50;
      const svgWidth = lineOffsetX + this.scaleWidth;
      const tickHeight = 10;
      B3(
        /* @__PURE__ */ u4(
          "svg",
          {
            className: "deck-widget-scale",
            width: svgWidth,
            height: 30,
            style: { overflow: "visible", background: "transparent" },
            onClick: this.handleClick.bind(this),
            children: [
              /* @__PURE__ */ u4(
                "text",
                {
                  x: lineOffsetX + 5,
                  y: "10",
                  textAnchor: "end",
                  alignmentBaseline: "middle",
                  style: { fontSize: "16px", fill: "black", fontWeight: "bold", fontFamily: "sans-serif" },
                  children: this.scaleText
                }
              ),
              /* @__PURE__ */ u4(
                "line",
                {
                  x1: lineOffsetX,
                  y1: "15",
                  x2: lineOffsetX + this.scaleWidth,
                  y2: "15",
                  stroke: "black",
                  strokeWidth: "6"
                }
              ),
              /* @__PURE__ */ u4(
                "line",
                {
                  x1: lineOffsetX,
                  y1: "15",
                  x2: lineOffsetX,
                  y2: 15 - tickHeight,
                  stroke: "black",
                  strokeWidth: "6"
                }
              ),
              /* @__PURE__ */ u4(
                "line",
                {
                  x1: lineOffsetX + this.scaleWidth,
                  y1: "15",
                  x2: lineOffsetX + this.scaleWidth,
                  y2: 15 - tickHeight,
                  stroke: "black",
                  strokeWidth: "6"
                }
              )
            ]
          }
        ),
        rootElement
      );
    }
    onViewportChange(viewport) {
      if (!("latitude" in viewport))
        return;
      const { latitude, zoom } = viewport;
      const metersPerPixel = getMetersPerPixel(latitude, zoom);
      const { candidate, candidatePixels } = computeScaleCandidate(metersPerPixel);
      this.scaleValue = candidate;
      this.scaleWidth = candidatePixels;
      if (candidate >= 1e3) {
        this.scaleText = `${(candidate / 1e3).toFixed(1)} km`;
      } else {
        this.scaleText = `${candidate} m`;
      }
      this.updateHTML();
    }
    handleClick() {
    }
  };
  ScaleWidget.defaultProps = {
    ...Widget.defaultProps,
    id: "scale",
    placement: "bottom-left",
    label: "Scale",
    viewId: null
  };
  function getMetersPerPixel(latitude, zoom) {
    const earthCircumference = 40075016686e-3;
    return earthCircumference * Math.cos(latitude * Math.PI / 180) / Math.pow(2, zoom + 8);
  }
  function computeScaleCandidate(metersPerPixel) {
    const minPixels = 100;
    const maxPixels = 200;
    const targetPixels = (minPixels + maxPixels) / 2;
    const targetDistance = targetPixels * metersPerPixel;
    const exponent = Math.floor(Math.log10(targetDistance));
    const base = Math.pow(10, exponent);
    const multipliers = [1, 2, 5];
    let candidate = multipliers[0] * base;
    let candidatePixels = candidate / metersPerPixel;
    for (let i7 = 0; i7 < multipliers.length; i7++) {
      const currentCandidate = multipliers[i7] * base;
      const currentPixels = currentCandidate / metersPerPixel;
      if (currentPixels >= minPixels && currentPixels <= maxPixels) {
        candidate = currentCandidate;
        candidatePixels = currentPixels;
        break;
      }
      if (currentPixels > maxPixels) {
        candidate = i7 > 0 ? multipliers[i7 - 1] * base : currentCandidate;
        candidatePixels = candidate / metersPerPixel;
        break;
      }
      if (i7 === multipliers.length - 1 && currentPixels < minPixels) {
        candidate = multipliers[0] * base * 10;
        candidatePixels = candidate / metersPerPixel;
      }
    }
    return { candidate, candidatePixels };
  }

  // ../../node_modules/preact/hooks/dist/hooks.module.js
  var t4;
  var r4;
  var u5;
  var i6;
  var o4 = 0;
  var f5 = [];
  var c4 = l3;
  var e5 = c4.__b;
  var a5 = c4.__r;
  var v4 = c4.diffed;
  var l4 = c4.__c;
  var m2 = c4.unmount;
  var s4 = c4.__;
  function d4(n4, t5) {
    c4.__h && c4.__h(r4, n4, o4 || t5), o4 = 0;
    var u6 = r4.__H || (r4.__H = { __: [], __h: [] });
    return n4 >= u6.__.length && u6.__.push({}), u6.__[n4];
  }
  function h3(n4) {
    return o4 = 1, p4(D3, n4);
  }
  function p4(n4, u6, i7) {
    var o5 = d4(t4++, 2);
    if (o5.t = n4, !o5.__c && (o5.__ = [i7 ? i7(u6) : D3(void 0, u6), function(n5) {
      var t5 = o5.__N ? o5.__N[0] : o5.__[0], r5 = o5.t(t5, n5);
      t5 !== r5 && (o5.__N = [r5, o5.__[1]], o5.__c.setState({}));
    }], o5.__c = r4, !r4.u)) {
      var f6 = function(n5, t5, r5) {
        if (!o5.__c.__H)
          return true;
        var u7 = o5.__c.__H.__.filter(function(n6) {
          return !!n6.__c;
        });
        if (u7.every(function(n6) {
          return !n6.__N;
        }))
          return !c5 || c5.call(this, n5, t5, r5);
        var i8 = false;
        return u7.forEach(function(n6) {
          if (n6.__N) {
            var t6 = n6.__[0];
            n6.__ = n6.__N, n6.__N = void 0, t6 !== n6.__[0] && (i8 = true);
          }
        }), !(!i8 && o5.__c.props === n5) && (!c5 || c5.call(this, n5, t5, r5));
      };
      r4.u = true;
      var c5 = r4.shouldComponentUpdate, e6 = r4.componentWillUpdate;
      r4.componentWillUpdate = function(n5, t5, r5) {
        if (this.__e) {
          var u7 = c5;
          c5 = void 0, f6(n5, t5, r5), c5 = u7;
        }
        e6 && e6.call(this, n5, t5, r5);
      }, r4.shouldComponentUpdate = f6;
    }
    return o5.__N || o5.__;
  }
  function y4(n4, u6) {
    var i7 = d4(t4++, 3);
    !c4.__s && C4(i7.__H, u6) && (i7.__ = n4, i7.i = u6, r4.__H.__h.push(i7));
  }
  function A4(n4) {
    return o4 = 5, T3(function() {
      return { current: n4 };
    }, []);
  }
  function T3(n4, r5) {
    var u6 = d4(t4++, 7);
    return C4(u6.__H, r5) && (u6.__ = n4(), u6.__H = r5, u6.__h = n4), u6.__;
  }
  function j3() {
    for (var n4; n4 = f5.shift(); )
      if (n4.__P && n4.__H)
        try {
          n4.__H.__h.forEach(z3), n4.__H.__h.forEach(B4), n4.__H.__h = [];
        } catch (t5) {
          n4.__H.__h = [], c4.__e(t5, n4.__v);
        }
  }
  c4.__b = function(n4) {
    r4 = null, e5 && e5(n4);
  }, c4.__ = function(n4, t5) {
    n4 && t5.__k && t5.__k.__m && (n4.__m = t5.__k.__m), s4 && s4(n4, t5);
  }, c4.__r = function(n4) {
    a5 && a5(n4), t4 = 0;
    var i7 = (r4 = n4.__c).__H;
    i7 && (u5 === r4 ? (i7.__h = [], r4.__h = [], i7.__.forEach(function(n5) {
      n5.__N && (n5.__ = n5.__N), n5.i = n5.__N = void 0;
    })) : (i7.__h.forEach(z3), i7.__h.forEach(B4), i7.__h = [], t4 = 0)), u5 = r4;
  }, c4.diffed = function(n4) {
    v4 && v4(n4);
    var t5 = n4.__c;
    t5 && t5.__H && (t5.__H.__h.length && (1 !== f5.push(t5) && i6 === c4.requestAnimationFrame || ((i6 = c4.requestAnimationFrame) || w4)(j3)), t5.__H.__.forEach(function(n5) {
      n5.i && (n5.__H = n5.i), n5.i = void 0;
    })), u5 = r4 = null;
  }, c4.__c = function(n4, t5) {
    t5.some(function(n5) {
      try {
        n5.__h.forEach(z3), n5.__h = n5.__h.filter(function(n6) {
          return !n6.__ || B4(n6);
        });
      } catch (r5) {
        t5.some(function(n6) {
          n6.__h && (n6.__h = []);
        }), t5 = [], c4.__e(r5, n5.__v);
      }
    }), l4 && l4(n4, t5);
  }, c4.unmount = function(n4) {
    m2 && m2(n4);
    var t5, r5 = n4.__c;
    r5 && r5.__H && (r5.__H.__.forEach(function(n5) {
      try {
        z3(n5);
      } catch (n6) {
        t5 = n6;
      }
    }), r5.__H = void 0, t5 && c4.__e(t5, r5.__v));
  };
  var k3 = "function" == typeof requestAnimationFrame;
  function w4(n4) {
    var t5, r5 = function() {
      clearTimeout(u6), k3 && cancelAnimationFrame(t5), setTimeout(n4);
    }, u6 = setTimeout(r5, 100);
    k3 && (t5 = requestAnimationFrame(r5));
  }
  function z3(n4) {
    var t5 = r4, u6 = n4.__c;
    "function" == typeof u6 && (n4.__c = void 0, u6()), r4 = t5;
  }
  function B4(n4) {
    var t5 = r4;
    n4.__c = n4.__(), r4 = t5;
  }
  function C4(n4, t5) {
    return !n4 || n4.length !== t5.length || t5.some(function(t6, r5) {
      return t6 !== n4[r5];
    });
  }
  function D3(n4, t5) {
    return "function" == typeof t5 ? t5(n4) : t5;
  }

  // ../widgets/src/lib/components/dropdown-menu.tsx
  var DropdownMenu = (props) => {
    const [isOpen, setIsOpen] = h3(false);
    const dropdownRef = A4(null);
    const toggleDropdown = () => setIsOpen(!isOpen);
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };
    y4(() => {
      document.addEventListener("mousedown", handleClickOutside);
      return () => {
        document.removeEventListener("mousedown", handleClickOutside);
      };
    }, []);
    const handleSelect = (value) => {
      props.onSelect(value);
      setIsOpen(false);
    };
    return /* @__PURE__ */ u4(
      "div",
      {
        className: "dropdown-container",
        ref: dropdownRef,
        style: {
          position: "relative",
          display: "inline-block",
          ...props.style
        },
        children: [
          /* @__PURE__ */ u4(
            "button",
            {
              onClick: toggleDropdown,
              style: {
                width: "30px",
                height: "30px",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                border: "1px solid #ccc",
                borderRadius: "4px",
                background: "#fff",
                cursor: "pointer",
                padding: 0
              },
              children: "\u25BC"
            }
          ),
          isOpen && /* @__PURE__ */ u4(
            "ul",
            {
              style: {
                position: "absolute",
                top: "100%",
                right: "100%",
                background: "#fff",
                border: "1px solid #ccc",
                borderRadius: "4px",
                listStyle: "none",
                padding: "4px 0",
                margin: 0,
                zIndex: 1e3,
                minWidth: "200px"
              },
              children: props.menuItems.map((item) => /* @__PURE__ */ u4(
                "li",
                {
                  onClick: () => handleSelect(item),
                  style: {
                    padding: "4px 8px",
                    cursor: "pointer",
                    whiteSpace: "nowrap"
                  },
                  children: item
                },
                item
              ))
            }
          )
        ]
      }
    );
  };

  // ../widgets/src/lib/geocode/geocoder-history.ts
  var CURRENT_LOCATION = "current";
  var LOCAL_STORAGE_KEY = "deck-geocoder-history";
  var GeocoderHistory = class {
    constructor(props) {
      this.addressText = "";
      this.errorText = "";
      this.addressHistory = [];
      this.props = { maxEntries: 5, ...props };
      this.addressHistory = this.loadPreviousAddresses();
    }
    /** PErform geocoding */
    async geocode(geocoder, address, apiKey) {
      this.errorText = "";
      this.addressText = address;
      try {
        const coordinates = await geocoder.geocode(address, apiKey);
        if (coordinates) {
          this.storeAddress(this.addressText);
          return coordinates;
        }
        this.errorText = "Invalid address";
      } catch (error) {
        this.errorText = `${error.message}`;
      }
      return null;
    }
    loadPreviousAddresses() {
      try {
        const stored = window.localStorage.getItem(LOCAL_STORAGE_KEY);
        const list = stored && JSON.parse(stored);
        const addresses = Array.isArray(list) ? list.filter((v5) => typeof v5 === "string") : [];
        return addresses;
      } catch {
      }
      return [];
    }
    storeAddress(address) {
      const cleaned = address.trim();
      if (!cleaned || cleaned === CURRENT_LOCATION) {
        return;
      }
      const deduped = [cleaned, ...this.addressHistory.filter((a6) => a6 !== cleaned)];
      this.addressHistory = deduped.slice(0, this.props.maxEntries);
      try {
        window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(this.addressHistory));
      } catch {
      }
    }
  };

  // ../widgets/src/lib/geocode/geocoders.ts
  var GOOGLE_URL = "https://maps.googleapis.com/maps/api/geocode/json";
  var MAPBOX_URL = "https://api.mapbox.com/geocoding/v5/mapbox.places";
  var OPENCAGE_API_URL = "https://api.opencagedata.com/geocode/v1/json";
  var GoogleGeocoder = {
    name: "google",
    requiresApiKey: true,
    async geocode(address, apiKey) {
      const encodedAddress = encodeURIComponent(address);
      const json = await fetchJson(`${GOOGLE_URL}?address=${encodedAddress}&key=${apiKey}`);
      switch (json.status) {
        case "OK":
          const loc = json.results.length > 0 && json.results[0].geometry.location;
          return loc ? { longitude: loc.lng, latitude: loc.lat } : null;
        default:
          throw new Error(`Google Geocoder failed: ${json.status}`);
      }
    }
  };
  var MapboxGeocoder = {
    name: "google",
    requiresApiKey: true,
    async geocode(address, apiKey) {
      const encodedAddress = encodeURIComponent(address);
      const json = await fetchJson(`${MAPBOX_URL}/${encodedAddress}.json?access_token=${apiKey}`);
      if (Array.isArray(json.features) && json.features.length > 0) {
        const center2 = json.features[0].center;
        if (Array.isArray(center2) && center2.length >= 2) {
          return { longitude: center2[0], latitude: center2[1] };
        }
      }
      return null;
    }
  };
  var OpenCageGeocoder = {
    name: "opencage",
    requiresApiKey: true,
    async geocode(address, key) {
      const encodedAddress = encodeURIComponent(address);
      const data = await fetchJson(`${OPENCAGE_API_URL}?q=${encodedAddress}&key=${key}`);
      if (Array.isArray(data.results) && data.results.length > 0) {
        const geometry = data.results[0].geometry;
        return { longitude: geometry.lng, latitude: geometry.lat };
      }
      return null;
    }
  };
  var CurrentLocationGeocoder = {
    name: "current",
    requiresApiKey: false,
    /** Attempt to call browsers geolocation API */
    async geocode() {
      if (!navigator.geolocation) {
        throw new Error("Geolocation not supported");
      }
      return new Promise((resolve2, reject) => {
        navigator.geolocation.getCurrentPosition(
          /** @see https://developer.mozilla.org/docs/Web/API/GeolocationPosition */
          (position) => {
            const { longitude, latitude } = position.coords;
            resolve2({ longitude, latitude });
          },
          /** @see https://developer.mozilla.org/docs/Web/API/GeolocationPositionError */
          (error) => reject(new Error(error.message))
        );
      });
    }
  };
  async function fetchJson(url) {
    let response;
    try {
      response = await fetch(url);
    } catch (error) {
      throw new Error(`CORS error? ${error}. ${url}: `);
    }
    if (!response.ok) {
      throw new Error(`${response.statusText}. ${url}: `);
    }
    const data = await response.json();
    if (!data) {
      throw new Error(`No data returned. ${url}`);
    }
    return data;
  }
  var CoordinatesGeocoder = {
    name: "coordinates",
    requiresApiKey: false,
    placeholderLocation: `-122.45, 37.8 or 37\xB048'N, 122\xB027'W`,
    async geocode(address) {
      return parseCoordinates(address) || null;
    }
  };
  function parseCoordinates(input) {
    input = input.trim();
    const parts = input.split(/[,;]/).map((p5) => p5.trim());
    if (parts.length < 2)
      return null;
    const first = parseCoordinatePart(parts[0]);
    const second = parseCoordinatePart(parts[1]);
    if (first === null || second === null)
      return null;
    if (Math.abs(first) > 90 && Math.abs(second) <= 90) {
      return { longitude: first, latitude: second };
    } else if (Math.abs(second) > 90 && Math.abs(first) <= 90) {
      return { longitude: second, latitude: first };
    }
    return { latitude: first, longitude: second };
  }
  function parseCoordinatePart(s5) {
    s5 = s5.trim();
    if (s5.includes("\xB0") || s5.includes("'") || s5.includes('"')) {
      const value2 = dmsToDecimal(s5);
      return isNaN(value2) ? null : value2;
    }
    let sign2 = 1;
    if (/[SW]/i.test(s5))
      sign2 = -1;
    s5 = s5.replace(/[NSEW]/gi, "");
    const value = parseFloat(s5);
    return isNaN(value) ? null : sign2 * value;
  }
  function dmsToDecimal(s5) {
    const regex = /(\d+)[°d]\s*(\d+)?['′m]?\s*(\d+(?:\.\d+)?)?[\"″s]?\s*([NSEW])?/i;
    const match = s5.match(regex);
    if (!match)
      return NaN;
    const degrees6 = parseFloat(match[1]) || 0;
    const minutes = parseFloat(match[2]) || 0;
    const seconds = parseFloat(match[3]) || 0;
    const direction = match[4] || "";
    let dec = degrees6 + minutes / 60 + seconds / 3600;
    if (/[SW]/i.test(direction)) {
      dec = -dec;
    }
    return dec;
  }

  // ../widgets/src/geocoder-widget.tsx
  var CURRENT_LOCATION2 = "current";
  var GeocoderWidget = class extends Widget {
    constructor(props = {}) {
      super(props);
      this.className = "deck-widget-geocoder";
      this.placement = "top-left";
      this.geocodeHistory = new GeocoderHistory({});
      this.addressText = "";
      this.geocoder = CoordinatesGeocoder;
      this.setInput = (text) => {
        this.addressText = text;
      };
      this.handleKeyPress = (e6) => {
        if (e6.key === "Enter") {
          this.handleSubmit();
        }
      };
      this.handleSelect = (address) => {
        this.setInput(address);
        this.handleSubmit();
      };
      /** Sync wrapper for async geocode() */
      this.handleSubmit = () => {
        this.geocode(this.addressText);
      };
      /** Perform geocoding */
      this.geocode = async (address) => {
        const useGeolocation = this.props._geolocation && address === CURRENT_LOCATION2;
        const geocoder = useGeolocation ? CurrentLocationGeocoder : this.geocoder;
        const coordinates = await this.geocodeHistory.geocode(
          geocoder,
          this.addressText,
          this.props.apiKey
        );
        if (coordinates) {
          this.setViewState(coordinates);
        }
      };
      this.viewports = {};
      this.setProps(this.props);
    }
    setProps(props) {
      this.placement = props.placement ?? this.placement;
      this.viewId = props.viewId ?? this.viewId;
      this.geocoder = getGeocoder(this.props);
      if (this.geocoder.requiresApiKey && !this.props.apiKey) {
        throw new Error(`API key is required for the ${this.geocoder.name} geocoder`);
      }
      super.setProps(props);
    }
    onRenderHTML(rootElement) {
      const menuItems = this.props._geolocation ? [CURRENT_LOCATION2, ...this.geocodeHistory.addressHistory] : [...this.geocodeHistory.addressHistory];
      B3(
        /* @__PURE__ */ u4(
          "div",
          {
            className: "deck-widget-geocoder",
            style: {
              pointerEvents: "auto",
              display: "flex",
              alignItems: "center",
              flexWrap: "wrap"
              // Allows wrapping on smaller screens
            },
            children: [
              /* @__PURE__ */ u4(
                "input",
                {
                  type: "text",
                  placeholder: this.geocoder.placeholderLocation ?? "Enter address or location",
                  value: this.geocodeHistory.addressText,
                  onInput: (e6) => this.setInput(e6.target?.value || ""),
                  onKeyPress: this.handleKeyPress,
                  style: {
                    flex: "1 1 auto",
                    minWidth: "200px",
                    margin: 0,
                    padding: "8px",
                    boxSizing: "border-box"
                  }
                }
              ),
              /* @__PURE__ */ u4(
                DropdownMenu,
                {
                  menuItems,
                  onSelect: this.handleSelect,
                  style: {
                    margin: 2,
                    padding: "4px 2px",
                    boxSizing: "border-box"
                  }
                }
              ),
              this.geocodeHistory.errorText && /* @__PURE__ */ u4("div", { className: "error", children: this.geocodeHistory.errorText })
            ]
          }
        ),
        rootElement
      );
    }
    // TODO - MOVE TO WIDGETIMPL?
    setViewState(viewState) {
      const viewId = this.props.viewId || viewState?.id || "default-view";
      const viewport = this.viewports[viewId] || {};
      const nextViewState = {
        ...viewport,
        ...viewState
      };
      if (this.props.transitionDuration > 0) {
        nextViewState.transitionDuration = this.props.transitionDuration;
        nextViewState.transitionInterpolator = "latitude" in nextViewState ? new FlyToInterpolator() : new LinearInterpolator();
      }
      this.deck._onViewStateChange({ viewId, viewState: nextViewState, interactionState: {} });
    }
    onViewportChange(viewport) {
      this.viewports[viewport.id] = viewport;
    }
  };
  GeocoderWidget.defaultProps = {
    ...Widget.defaultProps,
    id: "geocoder",
    viewId: null,
    placement: "top-left",
    label: "Geocoder",
    transitionDuration: 200,
    geocoder: "coordinates",
    customGeocoder: CoordinatesGeocoder,
    apiKey: "",
    _geolocation: false
  };
  function getGeocoder(props) {
    switch (props.geocoder) {
      case "google":
        return GoogleGeocoder;
      case "mapbox":
        return MapboxGeocoder;
      case "opencage":
        return OpenCageGeocoder;
      case "coordinates":
        return CoordinatesGeocoder;
      case "custom":
        if (!props.customGeocoder) {
          throw new Error("Custom geocoder is not defined");
        }
        return props.customGeocoder;
      default:
        throw new Error(`Unknown geocoder: ${props.geocoder}`);
    }
  }

  // ../widgets/src/fullscreen-widget.tsx
  var FullscreenWidget = class extends Widget {
    constructor(props = {}) {
      super(props);
      this.className = "deck-widget-fullscreen";
      this.placement = "top-left";
      this.fullscreen = false;
      this.setProps(this.props);
    }
    onAdd() {
      document.addEventListener("fullscreenchange", this.onFullscreenChange.bind(this));
    }
    onRemove() {
      document.removeEventListener("fullscreenchange", this.onFullscreenChange.bind(this));
    }
    onRenderHTML(rootElement) {
      B3(
        /* @__PURE__ */ u4(
          IconButton,
          {
            onClick: () => {
              this.handleClick().catch((err) => log_default.error(err)());
            },
            label: this.fullscreen ? this.props.exitLabel : this.props.enterLabel,
            className: this.fullscreen ? "deck-widget-fullscreen-exit" : "deck-widget-fullscreen-enter"
          }
        ),
        rootElement
      );
    }
    setProps(props) {
      this.placement = props.placement ?? this.placement;
      this.viewId = props.viewId ?? this.viewId;
      super.setProps(props);
    }
    getContainer() {
      return this.props.container || this.deck?.getCanvas()?.parentElement;
    }
    onFullscreenChange() {
      const prevFullscreen = this.fullscreen;
      const fullscreen = document.fullscreenElement === this.getContainer();
      if (prevFullscreen !== fullscreen) {
        this.fullscreen = !this.fullscreen;
      }
      this.updateHTML();
    }
    async handleClick() {
      if (this.fullscreen) {
        await this.exitFullscreen();
      } else {
        await this.requestFullscreen();
      }
      this.updateHTML();
    }
    async requestFullscreen() {
      const container = this.getContainer();
      if (container?.requestFullscreen) {
        await container.requestFullscreen({ navigationUI: "hide" });
      } else {
        this.togglePseudoFullscreen();
      }
    }
    async exitFullscreen() {
      if (document.exitFullscreen) {
        await document.exitFullscreen();
      } else {
        this.togglePseudoFullscreen();
      }
    }
    togglePseudoFullscreen() {
      this.getContainer()?.classList.toggle("deck-pseudo-fullscreen");
    }
  };
  FullscreenWidget.defaultProps = {
    ...Widget.defaultProps,
    id: "fullscreen",
    placement: "top-left",
    viewId: null,
    enterLabel: "Enter Fullscreen",
    exitLabel: "Exit Fullscreen",
    container: void 0
  };

  // ../widgets/src/splitter-widget.tsx
  var SplitterWidget = class extends Widget {
    constructor(props) {
      super(props);
      this.className = "deck-widget-splitter";
      this.placement = "fill";
    }
    setProps(props) {
      super.setProps(props);
    }
    onRenderHTML(rootElement) {
      rootElement.style.position = "absolute";
      rootElement.style.top = "0";
      rootElement.style.left = "0";
      rootElement.style.width = "100%";
      rootElement.style.height = "100%";
      rootElement.style.margin = "0px";
      B3(
        /* @__PURE__ */ u4(
          Splitter,
          {
            orientation: this.props.orientation,
            initialSplit: this.props.initialSplit,
            onChange: this.props.onChange,
            onDragStart: this.props.onDragStart,
            onDragEnd: this.props.onDragEnd
          }
        ),
        rootElement
      );
    }
  };
  SplitterWidget.defaultProps = {
    ...Widget.defaultProps,
    id: "splitter-widget",
    viewId1: "",
    viewId2: "",
    orientation: "vertical",
    initialSplit: 0.5,
    onChange: () => {
    },
    onDragStart: () => {
    },
    onDragEnd: () => {
    }
  };
  function Splitter({
    orientation,
    initialSplit,
    onChange,
    onDragStart,
    onDragEnd
  }) {
    const [split, setSplit] = h3(initialSplit);
    const dragging = A4(false);
    const containerRef = A4(null);
    const handleDragStart = (event) => {
      dragging.current = true;
      onDragStart?.();
      document.addEventListener("mousemove", handleDragging);
      document.addEventListener("mouseup", handleDragEnd);
      event.preventDefault();
    };
    const handleDragging = (event) => {
      if (!dragging.current || !containerRef.current)
        return;
      const rect = containerRef.current.getBoundingClientRect();
      let newSplit;
      if (orientation === "vertical") {
        newSplit = (event.clientX - rect.left) / rect.width;
      } else {
        newSplit = (event.clientY - rect.top) / rect.height;
      }
      newSplit = Math.min(Math.max(newSplit, 0.05), 0.95);
      setSplit(newSplit);
      onChange?.(newSplit);
    };
    const handleDragEnd = (event) => {
      if (!dragging.current)
        return;
      dragging.current = false;
      onDragEnd?.();
      document.removeEventListener("mousemove", handleDragging);
      document.removeEventListener("mouseup", handleDragEnd);
    };
    const splitterStyle = orientation === "vertical" ? {
      position: "absolute",
      top: 0,
      bottom: 0,
      left: `${split * 100}%`,
      width: "4px",
      cursor: "col-resize",
      background: "#ccc",
      zIndex: 10,
      pointerEvents: "auto",
      boxShadow: "inset -1px 0 0 white, inset 1px 0 0 white"
    } : {
      position: "absolute",
      left: 0,
      right: 0,
      top: `${split * 100}%`,
      height: "4px",
      cursor: "row-resize",
      background: "#ccc",
      zIndex: 10,
      pointerEvents: "auto",
      boxShadow: "inset -1px 0 0 white, inset 1px 0 0 white"
    };
    const containerStyle = {
      position: "absolute",
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    };
    return /* @__PURE__ */ u4("div", { ref: containerRef, style: containerStyle, children: /* @__PURE__ */ u4(
      "div",
      {
        style: splitterStyle,
        onMouseDown: handleDragStart
      }
    ) });
  }

  // ../widgets/src/lib/components/icon-menu.tsx
  function IconMenu(props) {
    const [menuOpen, setMenuOpen] = h3(false);
    const containerRef = A4(null);
    const handleClickOutside = (event) => {
      if (containerRef.current && !containerRef.current.contains(event.target)) {
        setMenuOpen(false);
      }
    };
    y4(() => {
      document.addEventListener("mousedown", handleClickOutside);
      return () => {
        document.removeEventListener("mousedown", handleClickOutside);
      };
    }, [containerRef]);
    const [selectedItem, setSelectedItem] = h3(props.initialItem);
    const handleSelectItem = (item) => {
      setSelectedItem(item);
      setMenuOpen(false);
      props.onItemSelected(item);
    };
    const handleButtonClick = () => setMenuOpen(!menuOpen);
    const selectedMenuItem = props.menuItems.find((item) => item.value === selectedItem);
    const label = props.label || selectedMenuItem?.label || "";
    const icon = props.icon || selectedMenuItem?.icon;
    return /* @__PURE__ */ u4("div", { style: { position: "relative", display: "inline-block" }, ref: containerRef, children: [
      /* @__PURE__ */ u4(IconButton, { className: props.className, label, onClick: handleButtonClick, children: icon }),
      menuOpen && /* @__PURE__ */ u4("div", { className: "deck-widget-icon-menu", children: /* @__PURE__ */ u4(ButtonGroup, { orientation: "vertical", children: props.menuItems.map((item) => /* @__PURE__ */ u4(
        GroupedIconButton,
        {
          label: item.label,
          onClick: () => handleSelectItem(item.value),
          children: item.icon
        },
        item.value
      )) }) })
    ] });
  }

  // ../widgets/src/view-selector-widget.tsx
  var ViewSelectorWidget = class extends Widget {
    constructor(props = {}) {
      super(props);
      this.className = "deck-widget-view-selector";
      this.placement = "top-left";
      this.handleSelectMode = (viewMode) => {
        this.viewMode = viewMode;
        this.updateHTML();
        this.props.onViewModeChange(viewMode);
      };
      this.viewMode = this.props.initialViewMode;
      this.setProps(this.props);
    }
    setProps(props) {
      this.placement = props.placement ?? this.placement;
      this.viewId = props.viewId ?? this.viewId;
      super.setProps(props);
    }
    onRenderHTML(rootElement) {
      B3(
        /* @__PURE__ */ u4(
          IconMenu,
          {
            className: "deck-widget-view-selector",
            menuItems: MENU_ITEMS.map((item) => ({
              ...item,
              icon: item.icon()
            })),
            initialItem: this.props.initialViewMode,
            onItemSelected: this.handleSelectMode
          }
        ),
        rootElement
      );
    }
  };
  ViewSelectorWidget.defaultProps = {
    ...Widget.defaultProps,
    id: "view-selector",
    placement: "top-left",
    viewId: null,
    label: "Split View",
    initialViewMode: "single",
    onViewModeChange: () => {
    }
  };
  var ICON_STYLE = { width: "24px", height: "24px" };
  var ICONS = {
    single: () => /* @__PURE__ */ u4("svg", { width: "24", height: "24", style: ICON_STYLE, children: /* @__PURE__ */ u4(
      "rect",
      {
        x: "4",
        y: "4",
        width: "16",
        height: "16",
        stroke: "var(--button-icon-hover, rgb(24, 24, 26))",
        fill: "none",
        strokeWidth: "2"
      }
    ) }),
    "split-horizontal": () => /* @__PURE__ */ u4("svg", { width: "24", height: "24", style: ICON_STYLE, children: [
      /* @__PURE__ */ u4(
        "rect",
        {
          x: "4",
          y: "4",
          width: "16",
          height: "7",
          stroke: "var(--button-icon-hover, rgb(24, 24, 26))",
          fill: "none",
          strokeWidth: "2"
        }
      ),
      /* @__PURE__ */ u4(
        "rect",
        {
          x: "4",
          y: "13",
          width: "16",
          height: "7",
          stroke: "var(--button-icon-hover, rgb(24, 24, 26))",
          fill: "none",
          strokeWidth: "2"
        }
      )
    ] }),
    "split-vertical": () => /* @__PURE__ */ u4("svg", { width: "24", height: "24", style: ICON_STYLE, children: [
      /* @__PURE__ */ u4(
        "rect",
        {
          x: "4",
          y: "4",
          width: "7",
          height: "16",
          stroke: "var(--button-icon-hover, rgb(24, 24, 26))",
          fill: "none",
          strokeWidth: "2"
        }
      ),
      /* @__PURE__ */ u4(
        "rect",
        {
          x: "13",
          y: "4",
          width: "7",
          height: "16",
          stroke: "var(--button-icon-hover, rgb(24, 24, 26))",
          fill: "none",
          strokeWidth: "2"
        }
      )
    ] })
  };
  var MENU_ITEMS = [
    { value: "single", icon: ICONS.single, label: "Single View" },
    { value: "split-horizontal", icon: ICONS["split-horizontal"], label: "Split Horizontal" },
    { value: "split-vertical", icon: ICONS["split-vertical"], label: "Split Vertical" }
  ];

  // ../widgets/src/info-widget.tsx
  var InfoWidget = class extends Widget {
    constructor(props) {
      super(props);
      this.className = "deck-widget-info";
      this.placement = "fill";
      this.setProps(this.props);
    }
    setProps(props) {
      this.viewId = props.viewId ?? this.viewId;
      super.setProps(props);
    }
    onCreateRootElement() {
      const element = super.onCreateRootElement();
      const style = { margin: "0px", top: "0px", left: "0px", position: "absolute" };
      Object.entries(style).forEach(([key, value]) => element.style.setProperty(key, value));
      return element;
    }
    onViewportChange(viewport) {
      this.viewport = viewport;
      this.updateHTML();
    }
    onHover(info) {
      if (this.props.mode === "hover" && this.props.getTooltip) {
        const tooltip = this.props.getTooltip(info, this);
        this.setProps({
          visible: tooltip !== null,
          ...tooltip,
          style: { zIndex: "1", ...tooltip?.style }
        });
      }
    }
    onClick(info) {
      if (this.props.mode === "click" && this.props.getTooltip) {
        const tooltip = this.props.getTooltip(info, this);
        this.setProps({
          visible: tooltip !== null,
          ...tooltip
        });
        return tooltip !== null;
      }
      return this.props.onClick?.(this, info) || false;
    }
    onAdd({ deck, viewId }) {
      this.deck = deck;
      if (!viewId) {
        this.viewport = deck.getViewports()[0];
      } else {
        this.viewport = deck.getViewports().find((viewport) => viewport.id === viewId);
      }
    }
    onRenderHTML(rootElement) {
      if (!this.viewport) {
        return;
      }
      const [longitude, latitude] = this.props.position;
      const [x4, y5] = this.viewport.project([longitude, latitude]);
      const minOffset = this.props.minOffset || 0;
      const gap = 10;
      const arrowHeight = 8;
      const arrowWidth = 16;
      const isAbove = y5 > this.viewport.height / 2;
      const background = this.props.style && this.props.style.background || "rgba(255,255,255,0.9)";
      const ui = this.props.visible ? /* @__PURE__ */ u4("div", { className: "popup-container", style: { position: "absolute", left: 0, top: 0 }, children: [
        /* @__PURE__ */ u4(
          "div",
          {
            className: "popup-content",
            style: {
              background,
              padding: "10px",
              position: "relative",
              // Include any additional styles
              ...this.props.style
            },
            children: this.props.text
          }
        ),
        /* @__PURE__ */ u4("div", { className: "popup-arrow", style: { position: "absolute", width: "0px", height: "0px" } })
      ] }) : null;
      B3(ui, rootElement);
      requestAnimationFrame(() => {
        if (!this.props.visible || !rootElement.firstChild || !this.viewport)
          return;
        const container = rootElement.firstChild;
        const contentEl = container.querySelector(".popup-content");
        const arrowEl = container.querySelector(".popup-arrow");
        if (!contentEl || !arrowEl)
          return;
        const contentRect = contentEl.getBoundingClientRect();
        const popupWidth = contentRect.width;
        const popupHeight = contentRect.height;
        let computedLeft = x4 - popupWidth / 2;
        let computedTop;
        if (isAbove) {
          computedTop = y5 - gap - arrowHeight - popupHeight;
        } else {
          computedTop = y5 + gap + arrowHeight;
        }
        if (computedLeft < minOffset) {
          computedLeft = minOffset;
        }
        if (computedLeft + popupWidth > this.viewport.width - minOffset) {
          computedLeft = this.viewport.width - minOffset - popupWidth;
        }
        if (isAbove) {
          if (computedTop < minOffset) {
            computedTop = minOffset;
          }
        } else if (computedTop + popupHeight + arrowHeight > this.viewport.height - minOffset) {
          computedTop = this.viewport.height - minOffset - popupHeight - arrowHeight;
        }
        container.style.left = `${computedLeft}px`;
        container.style.top = `${computedTop}px`;
        container.style.transform = "";
        let arrowLeft = x4 - computedLeft - arrowWidth / 2;
        arrowLeft = Math.max(arrowLeft, 0);
        arrowLeft = Math.min(arrowLeft, popupWidth - arrowWidth);
        if (isAbove) {
          arrowEl.style.left = `${arrowLeft}px`;
          arrowEl.style.bottom = `-${arrowHeight}px`;
          arrowEl.style.top = "";
          arrowEl.style.borderLeft = `${arrowWidth / 2}px solid transparent`;
          arrowEl.style.borderRight = `${arrowWidth / 2}px solid transparent`;
          arrowEl.style.borderTop = `${arrowHeight}px solid ${background}`;
          arrowEl.style.borderBottom = "";
        } else {
          arrowEl.style.left = `${arrowLeft}px`;
          arrowEl.style.top = `-${arrowHeight}px`;
          arrowEl.style.bottom = "";
          arrowEl.style.borderLeft = `${arrowWidth / 2}px solid transparent`;
          arrowEl.style.borderRight = `${arrowWidth / 2}px solid transparent`;
          arrowEl.style.borderBottom = `${arrowHeight}px solid ${background}`;
          arrowEl.style.borderTop = "";
        }
      });
    }
  };
  InfoWidget.defaultProps = {
    ...Widget.defaultProps,
    id: "info",
    position: [0, 0],
    text: "",
    visible: false,
    minOffset: 0,
    viewId: null,
    mode: "hover",
    getTooltip: void 0,
    onClick: void 0
  };

  // ../widgets/src/lib/components/simple-menu.tsx
  var MENU_STYLE = {
    position: "absolute",
    top: "100%",
    left: 0,
    background: "white",
    border: "1px solid #ccc",
    borderRadius: "4px",
    marginTop: "var(--menu-gap, 4px)",
    zIndex: 100
  };
  var MENU_ITEM_STYLE = {
    background: "white",
    border: "none",
    padding: "4px",
    cursor: "pointer",
    pointerEvents: "auto"
  };
  var SimpleMenu = (props) => {
    const { menuItems, onItemSelected, position, style } = props;
    const styleOverride = {
      ...MENU_STYLE,
      ...style,
      left: `${position.x}px`,
      top: `${position.y}px`
    };
    return /* @__PURE__ */ u4("div", { style: styleOverride, children: menuItems.map(({ key, label }) => /* @__PURE__ */ u4(
      "button",
      {
        style: { ...MENU_ITEM_STYLE, display: "block" },
        onClick: (_3) => onItemSelected(key),
        children: label
      },
      key
    )) });
  };

  // ../widgets/src/context-menu-widget.tsx
  var MOUSE_BUTTON_RIGHT = 2;
  var MOUSE_WHICH_RIGHT = 3;
  var ContextMenuWidget = class extends Widget {
    constructor(props) {
      super(props);
      this.className = "deck-widget-context-menu";
      this.placement = "fill";
      this.pickInfo = null;
      this.pickInfo = null;
      this.setProps(this.props);
    }
    onAdd({ deck }) {
      const element = document.createElement("div");
      element.classList.add("deck-widget", "deck-widget-context-menu");
      const style = {
        margin: "0px",
        top: "0px",
        left: "0px",
        position: "absolute",
        pointerEvents: "auto"
      };
      Object.entries(style).forEach(([key, value]) => element.style.setProperty(key, value));
      deck.getCanvas()?.addEventListener("click", () => this.hide());
      deck.getCanvas()?.addEventListener("contextmenu", (event) => this.handleContextMenu(event));
      return element;
    }
    onRenderHTML(rootElement) {
      const { visible, position, menuItems } = this.props;
      const ui = visible && menuItems.length ? /* @__PURE__ */ u4(
        SimpleMenu,
        {
          menuItems,
          onItemSelected: (key) => this.props.onMenuItemSelected(key, this.pickInfo),
          position,
          style: { pointerEvents: "auto" }
        }
      ) : null;
      B3(ui, rootElement);
    }
    handleContextMenu(srcEvent) {
      if (srcEvent && (srcEvent.button === MOUSE_BUTTON_RIGHT || srcEvent.which === MOUSE_WHICH_RIGHT)) {
        this.pickInfo = this.deck?.pickObject({
          x: srcEvent.clientX,
          y: srcEvent.clientY
        }) || null;
        const menuItems = this.pickInfo && this.props.getMenuItems?.(this.pickInfo, this) || [];
        const visible = menuItems.length > 0;
        this.setProps({
          visible,
          position: { x: srcEvent.clientX, y: srcEvent.clientY },
          menuItems
        });
        this.updateHTML();
        srcEvent.preventDefault();
        return visible;
      }
      return false;
    }
    hide() {
      this.setProps({ visible: false });
    }
  };
  ContextMenuWidget.defaultProps = {
    ...Widget.defaultProps,
    id: "context",
    viewId: null,
    visible: false,
    position: { x: 0, y: 0 },
    getMenuItems: void 0,
    menuItems: [],
    // eslint-disable-next-line no-console
    onMenuItemSelected: (key, pickInfo) => console.log("Context menu item selected:", key, pickInfo)
  };

  // ../widgets/src/timeline-widget.tsx
  var TimelineWidget = class extends Widget {
    constructor(props = {}) {
      super(props);
      this.id = "timeline";
      this.className = "deck-widget-timeline";
      this.placement = "bottom-left";
      this.playing = false;
      this.timerId = null;
      this.handlePlayPause = () => {
        if (this.playing) {
          this.stop();
        } else {
          this.start();
        }
      };
      this.handleSliderChange = (e6) => {
        const input = e6.target;
        const val2 = Number(input.value);
        this.currentTime = val2;
        this.props.onTimeChange(val2);
        this.updateHTML();
      };
      this.tick = () => {
        const [min7, max7] = this.props.timeRange;
        let next = this.currentTime + this.props.step;
        if (next > max7) {
          next = min7;
        }
        this.currentTime = next;
        this.props.onTimeChange(next);
        this.updateHTML();
        if (this.playing) {
          this.timerId = window.setTimeout(this.tick, this.props.playInterval);
        }
      };
      this.currentTime = this.props.initialTime ?? this.props.timeRange[0];
      this.setProps(this.props);
    }
    setProps(props) {
      this.placement = props.placement ?? this.placement;
      this.viewId = props.viewId ?? this.viewId;
      super.setProps(props);
    }
    onAdd() {
      this.playing = false;
      this.timerId = null;
    }
    onRemove() {
      this.stop();
    }
    onRenderHTML(rootElement) {
      B3(
        /* @__PURE__ */ u4("div", { style: { display: "flex", alignItems: "center", pointerEvents: "auto" }, children: [
          /* @__PURE__ */ u4(IconButton, { label: this.playing ? "Pause" : "Play", onClick: this.handlePlayPause, children: /* @__PURE__ */ u4("div", { className: "text", children: this.playing ? "\u23F8" : "\u25B6" }) }),
          /* @__PURE__ */ u4(
            "input",
            {
              type: "range",
              className: "timeline-slider",
              min: this.props.timeRange[0],
              max: this.props.timeRange[1],
              step: this.props.step,
              value: this.currentTime,
              onInput: this.handleSliderChange
            }
          )
        ] }),
        rootElement
      );
    }
    start() {
      this.playing = true;
      this.updateHTML();
      this.tick();
    }
    stop() {
      this.playing = false;
      if (this.timerId !== null) {
        window.clearTimeout(this.timerId);
        this.timerId = null;
      }
      this.updateHTML();
    }
  };
  TimelineWidget.defaultProps = {
    ...Widget.defaultProps,
    id: "timeline",
    placement: "bottom-left",
    viewId: null,
    timeRange: [0, 100],
    step: 1,
    initialTime: void 0,
    onTimeChange: () => {
    },
    playInterval: 1e3
  };

  // ../widgets/src/screenshot-widget.tsx
  var ScreenshotWidget = class extends Widget {
    constructor(props = {}) {
      super(props);
      this.className = "deck-widget-screenshot";
      this.placement = "top-left";
      this.setProps(this.props);
    }
    setProps(props) {
      this.placement = props.placement ?? this.placement;
      this.viewId = props.viewId ?? this.viewId;
      super.setProps(props);
    }
    onRenderHTML(rootElement) {
      B3(
        /* @__PURE__ */ u4(
          IconButton,
          {
            className: "deck-widget-camera",
            label: this.props.label,
            onClick: this.handleClick.bind(this)
          }
        ),
        rootElement
      );
    }
    handleClick() {
      if (this.props.onCapture) {
        this.props.onCapture(this);
        return;
      }
      const dataURL = this.captureScreenToDataURL(this.props.imageFormat);
      if (dataURL) {
        this.downloadDataURL(dataURL, this.props.filename);
      }
    }
    /** @note only captures canvas contents, not HTML DOM or CSS styles */
    captureScreenToDataURL(imageFormat) {
      const canvas2 = this.deck?.getCanvas();
      return canvas2?.toDataURL(imageFormat);
    }
    /** Download a data URL */
    downloadDataURL(dataURL, filename2) {
      const link = document.createElement("a");
      link.href = dataURL;
      link.download = filename2;
      link.click();
    }
  };
  ScreenshotWidget.defaultProps = {
    ...Widget.defaultProps,
    id: "screenshot",
    placement: "top-left",
    viewId: null,
    label: "Screenshot",
    filename: "screenshot.png",
    imageFormat: "image/png",
    onCapture: void 0
  };

  // ../widgets/src/themes.ts
  var LightTheme = {
    "--widget-margin": "12px",
    "--button-size": "28px",
    "--button-corner-radius": "8px",
    "--button-background": "#fff",
    "--button-stroke": "rgba(255, 255, 255, 0.3)",
    "--button-inner-stroke": "unset",
    "--button-shadow": "0px 0px 8px 0px rgba(0, 0, 0, 0.25)",
    "--button-backdrop-filter": "unset",
    "--button-icon-idle": "rgba(97, 97, 102, 1)",
    "--button-icon-hover": "rgba(24, 24, 26, 1)",
    "--button-text": "rgb(24, 24, 26, 1)",
    "--icon-compass-north-color": "rgb(240, 92, 68)",
    "--icon-compass-south-color": "rgb(204, 204, 204)",
    "--menu-gap": "4px"
  };
  var DarkTheme = {
    "--widget-margin": "12px",
    "--button-size": "28px",
    "--button-corner-radius": "8px",
    "--button-background": "rgba(18, 18, 20, 1)",
    "--button-stroke": "rgba(18, 18, 20, 0.30)",
    "--button-inner-stroke": "unset",
    "--button-shadow": "0px 0px 8px 0px rgba(0, 0, 0, 0.25)",
    "--button-backdrop-filter": "unset",
    "--button-icon-idle": "rgba(158, 157, 168, 1)",
    "--button-icon-hover": "rgba(215, 214, 229, 1)",
    "--button-text": "rgb(215, 214, 229, 1)",
    "--icon-compass-north-color": "rgb(240, 92, 68)",
    "--icon-compass-south-color": "rgb(200, 199, 209)",
    "--menu-gap": "4px"
  };
  var LightGlassTheme = {
    "--widget-margin": "12px",
    "--button-size": "28px",
    "--button-corner-radius": "8px",
    "--button-background": "rgba(255, 255, 255, 0.6)",
    "--button-stroke": "rgba(255, 255, 255, 0.3)",
    "--button-inner-stroke": "1px solid rgba(255, 255, 255, 0.6)",
    "--button-shadow": "0px 0px 8px 0px rgba(0, 0, 0, 0.25), 0px 0px 8px 0px rgba(0, 0, 0, 0.1) inset",
    "--button-backdrop-filter": "blur(4px)",
    "--button-icon-idle": "rgba(97, 97, 102, 1)",
    "--button-icon-hover": "rgba(24, 24, 26, 1)",
    "--button-text": "rgb(24, 24, 26, 1)",
    "--icon-compass-north-color": "rgb(240, 92, 68)",
    "--icon-compass-south-color": "rgb(204, 204, 204)",
    "--menu-gap": "4px"
  };
  var DarkGlassTheme = {
    "--widget-margin": "12px",
    "--button-size": "28px",
    "--button-corner-radius": "8px",
    "--button-background": "rgba(18, 18, 20, 0.75)",
    "--button-stroke": "rgba(18, 18, 20, 0.30)",
    "--button-inner-stroke": "1px solid rgba(18, 18, 20, 0.75)",
    "--button-shadow": "0px 0px 8px 0px rgba(0, 0, 0, 0.25), 0px 0px 8px 0px rgba(0, 0, 0, 0.1) inset",
    "--button-backdrop-filter": "blur(4px)",
    "--button-icon-idle": "rgba(158, 157, 168, 1)",
    "--button-icon-hover": "rgba(215, 214, 229, 1)",
    "--button-text": "rgb(215, 214, 229, 1)",
    "--icon-compass-north-color": "rgb(240, 92, 68)",
    "--icon-compass-south-color": "rgb(200, 199, 209)",
    "--menu-gap": "4px"
  };

  // ../widgets/src/theme-widget.tsx
  var ThemeWidget = class extends Widget {
    constructor(props = {}) {
      super(props);
      this.className = "deck-widget-theme";
      this.placement = "top-left";
      this.themeMode = "dark";
      this.themeMode = this._getInitialThemeMode();
      this.setProps(this.props);
    }
    // eslint-disable-next-line complexity
    setProps(props) {
      const { lightModeTheme, darkModeTheme } = this.props;
      this.placement = props.placement ?? this.placement;
      this.viewId = props.viewId ?? this.viewId;
      super.setProps(props);
      switch (this.themeMode) {
        case "light":
          if (props.lightModeTheme && !deepEqual2(props.lightModeTheme, lightModeTheme, 1)) {
            this._setThemeMode("light");
          }
          break;
        case "dark":
          if (props.darkModeTheme && !deepEqual2(props.darkModeTheme, darkModeTheme, 1)) {
            this._setThemeMode("dark");
          }
          break;
        default:
          log_default.warn(`Invalid theme mode ${this.themeMode}`)();
      }
    }
    onRenderHTML(rootElement) {
      const { lightModeLabel, darkModeLabel } = this.props;
      B3(
        /* @__PURE__ */ u4(
          IconButton,
          {
            onClick: this._handleClick.bind(this),
            label: this.themeMode === "dark" ? darkModeLabel : lightModeLabel,
            className: this.themeMode === "dark" ? "deck-widget-moon" : "deck-widget-sun"
          }
        ),
        rootElement
      );
    }
    onAdd() {
      this._setThemeMode(this.themeMode);
    }
    _handleClick() {
      const newThemeMode = this.themeMode === "dark" ? "light" : "dark";
      this._setThemeMode(newThemeMode);
    }
    _setThemeMode(themeMode) {
      this.themeMode = themeMode;
      const container = this.rootElement?.closest(".deck-widget-container");
      if (container) {
        const themeStyle = themeMode === "dark" ? this.props.darkModeTheme : this.props.lightModeTheme;
        applyStyles(container, themeStyle);
        const label = this.themeMode === "dark" ? this.props.darkModeLabel : this.props.lightModeLabel;
        log_default.log(1, `Switched theme to ${label}`, themeStyle)();
        this.updateHTML();
      }
    }
    /** Read browser preference */
    _getInitialThemeMode() {
      const { initialThemeMode } = this.props;
      return initialThemeMode === "auto" ? window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light" : initialThemeMode;
    }
  };
  ThemeWidget.defaultProps = {
    ...Widget.defaultProps,
    id: "theme",
    placement: "top-left",
    viewId: null,
    lightModeLabel: "Light Mode",
    lightModeTheme: LightGlassTheme,
    darkModeLabel: "Dark Mode",
    darkModeTheme: DarkGlassTheme,
    initialThemeMode: "auto"
  };

  // ../widgets/src/loading-widget.tsx
  var LoadingWidget = class extends Widget {
    constructor(props = {}) {
      super(props);
      this.className = "deck-widget-loading";
      this.placement = "top-left";
      this.loading = true;
      this.setProps(this.props);
    }
    setProps(props) {
      this.placement = props.placement ?? this.placement;
      this.viewId = props.viewId ?? this.viewId;
      super.setProps(props);
    }
    onRenderHTML(rootElement) {
      B3(
        // TODO(ibgreen) - this should not be a button, but styling is so nested that it is easier to reuse this component.
        this.loading && /* @__PURE__ */ u4(
          IconButton,
          {
            className: "deck-widget-spinner",
            label: this.props.label,
            onClick: this.handleClick.bind(this)
          }
        ),
        rootElement
      );
    }
    onRedraw({ layers }) {
      const loading = layers.some((layer) => !layer.isLoaded);
      if (loading !== this.loading) {
        this.loading = loading;
        this.updateHTML();
      }
    }
    // TODO(ibgreen) - this should not be a button, see above.
    handleClick() {
    }
  };
  LoadingWidget.defaultProps = {
    ...Widget.defaultProps,
    id: "loading",
    placement: "top-left",
    viewId: null,
    label: "Loading layer data"
  };

  // ../widgets/src/fps-widget.tsx
  var FpsWidget = class extends Widget {
    constructor(props = {}) {
      super(props);
      this.className = "deck-widget-fps";
      this.placement = "top-left";
      this._lastFps = -1;
      this.setProps(this.props);
    }
    setProps(props) {
      this.placement = props.placement ?? this.placement;
      this.viewId = props.viewId ?? this.viewId;
      super.setProps(props);
    }
    onAdd({}) {
      this._lastFps = this._getFps();
      requestAnimationFrame(() => this._animate());
    }
    onRenderHTML(rootElement) {
      const fps = this._getFps();
      B3(
        /* @__PURE__ */ u4(IconButton, { children: /* @__PURE__ */ u4("div", { className: "text", children: [
          "FPS",
          /* @__PURE__ */ u4("br", {}),
          fps
        ] }) }),
        rootElement
      );
    }
    _animate() {
      const fps = this._getFps();
      if (this._lastFps !== fps) {
        this._lastFps = fps;
        this.updateHTML();
      }
      requestAnimationFrame(() => this._animate());
    }
    _getFps() {
      return Math.round(this.deck?.metrics.fps ?? 0);
    }
  };
  FpsWidget.defaultProps = {
    ...Widget.defaultProps,
    id: "fps",
    placement: "top-left",
    viewId: null
  };

  // ../widgets/src/stats-widget.tsx
  init_dist4();
  var RIGHT_ARROW = "\u25B6";
  var DOWN_ARROW = "\u2B07";
  var DEFAULT_COUNT_FORMATTER = (stat) => `${stat.name}: ${stat.count}`;
  function formatTime2(time) {
    return time < 1e3 ? `${time.toFixed(2)}ms` : `${(time / 1e3).toFixed(2)}s`;
  }
  function formatMemory(bytes) {
    const mb = bytes / 1e6;
    return `${mb.toFixed(1)} MB`;
  }
  var DEFAULT_FORMATTERS = {
    count: DEFAULT_COUNT_FORMATTER,
    averageTime: (stat) => `${stat.name}: ${formatTime2(stat.getAverageTime())}`,
    totalTime: (stat) => `${stat.name}: ${formatTime2(stat.time)}`,
    fps: (stat) => `${stat.name}: ${Math.round(stat.getHz())}fps`,
    memory: (stat) => `${stat.name}: ${formatMemory(stat.count)}`
  };
  var StatsWidget = class extends Widget {
    constructor(props = {}) {
      super(props);
      this.className = "deck-widget-stats";
      this.placement = "top-left";
      this._counter = 0;
      this.collapsed = true;
      this._toggleCollapsed = () => {
        this.collapsed = !this.collapsed;
        this.updateHTML();
      };
      this._formatters = { ...DEFAULT_FORMATTERS };
      this._resetOnUpdate = { ...this.props.resetOnUpdate };
      this._stats = this.props.stats;
      this.setProps(props);
    }
    setProps(props) {
      this.placement = props.placement ?? this.placement;
      this.viewId = props.viewId ?? this.viewId;
      this._stats = this._getStats();
      if (props.formatters) {
        for (const name13 in props.formatters) {
          const f6 = props.formatters[name13];
          this._formatters[name13] = typeof f6 === "string" ? DEFAULT_FORMATTERS[f6] || DEFAULT_COUNT_FORMATTER : f6;
        }
      }
      if (props.resetOnUpdate) {
        this._resetOnUpdate = { ...props.resetOnUpdate };
      }
      super.setProps(props);
    }
    onAdd() {
      this._stats = this._getStats();
      this.updateHTML();
    }
    onRenderHTML(rootElement) {
      const stats2 = this._stats;
      const collapsed = this.collapsed;
      const title = this.props.title || stats2?.id || "Stats";
      const items = [];
      if (!collapsed && stats2) {
        stats2.forEach((stat) => {
          const lines = this._getLines(stat);
          if (this._resetOnUpdate && this._resetOnUpdate[stat.name]) {
            stat.reset();
          }
          lines.forEach((line, i7) => {
            items.push(
              /* @__PURE__ */ u4("div", { style: { whiteSpace: "pre" }, children: line }, `${stat.name}-${i7}`)
            );
          });
        });
      }
      B3(
        /* @__PURE__ */ u4("div", { className: "deck-widget-stats-container", style: { cursor: "default" }, children: [
          /* @__PURE__ */ u4(
            "div",
            {
              className: "deck-widget-stats-header",
              style: { cursor: "pointer", pointerEvents: "auto" },
              onClick: this._toggleCollapsed,
              children: [
                collapsed ? RIGHT_ARROW : DOWN_ARROW,
                " ",
                title
              ]
            }
          ),
          !collapsed && /* @__PURE__ */ u4("div", { className: "deck-widget-stats-content", children: items })
        ] }),
        rootElement
      );
    }
    onRedraw() {
      const framesPerUpdate = Math.max(1, this.props.framesPerUpdate || 1);
      if (this._counter++ % framesPerUpdate === 0) {
        this._stats = this._getStats();
        this.updateHTML();
      }
    }
    _getStats() {
      switch (this.props.type) {
        case "deck":
          return this.deck?.stats;
        case "luma":
          return Array.from(luma.stats.stats.values())[0];
        case "device":
          const device = this.deck?.device;
          const stats2 = device?.statsManager.stats.values();
          return stats2 ? Array.from(stats2)[0] : void 0;
        case "custom":
          return this.props.stats;
        default:
          throw new Error(`Unknown stats type: ${this.props.type}`);
      }
    }
    _getLines(stat) {
      const formatter = this._formatters[stat.name] || this._formatters[stat.type || ""] || DEFAULT_COUNT_FORMATTER;
      return formatter(stat).split("\n");
    }
  };
  StatsWidget.defaultProps = {
    ...Widget.defaultProps,
    type: "deck",
    placement: "top-left",
    viewId: null,
    stats: void 0,
    title: "Stats",
    framesPerUpdate: 1,
    formatters: {},
    resetOnUpdate: {},
    id: "stats"
  };

  // bundle.ts
  var h32 = __toESM(require_h3_js(), 1);
  H3HexagonLayer._checkH3Lib = () => {
    const installHelp = 'include the <script src="https://unpkg.com/h3-js@^4.0.0"><\/script> tag before the deck.gl script tag. https://deck.gl/docs/api-reference/geo-layers/h3-hexagon-layer';
    if (!h32) {
      throw new Error(`To use H3 functionality, ${installHelp}`);
    } else if (h32.polyfill && !h32.polygonToCells) {
      throw new Error(`Incompatible h3-js version. ${installHelp}`);
    }
  };
  return __toCommonJS(bundle_exports);
})();
/*! Bundled license information:

long/dist/long.js:
  (**
   * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
   * Released under the Apache License, Version 2.0
   * see: https://github.com/dcodeIO/long.js for details
   *)

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

long/index.js:
  (**
   * @license
   * Copyright 2009 The Closure Library Authors
   * Copyright 2020 Daniel Wirtz / The long.js Authors.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   * SPDX-License-Identifier: Apache-2.0
   *)
*/
      return __exports__;
      });
