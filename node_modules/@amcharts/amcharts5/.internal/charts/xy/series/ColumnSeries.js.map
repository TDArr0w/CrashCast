{"version":3,"file":"ColumnSeries.js","sourceRoot":"","sources":["../../../../../../src/.internal/charts/xy/series/ColumnSeries.ts"],"names":[],"mappings":"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","sourcesContent":["import type { DataItem } from \"../../../core/render/Component\";\r\nimport type { Color } from \"../../../core/util/Color\";\r\n\r\nimport { BaseColumnSeries, IBaseColumnSeriesPrivate, IBaseColumnSeriesSettings, IBaseColumnSeriesDataItem, IBaseColumnSeriesAxisRange } from \"./BaseColumnSeries\";\r\nimport { Template } from \"../../../core/util/Template\";\r\nimport { ListTemplate } from \"../../../core/util/List\";\r\nimport { RoundedRectangle } from \"../../../core/render/RoundedRectangle\";\r\nimport { Graphics } from \"../../../core/render/Graphics\";\r\n\r\nimport * as $utils from \"../../../core/util/Utils\";\r\nimport * as $array from \"../../../core/util/Array\";\r\n\r\nexport interface IColumnSeriesDataItem extends IBaseColumnSeriesDataItem { }\r\n\r\nexport interface IColumnSeriesSettings extends IBaseColumnSeriesSettings {\r\n\r\n\t/**\r\n\t * Enables \"turbo mode\" of rendering.\r\n\t * \r\n\t * If enabled, the columsn will be drawn directly on canvas, rather than\r\n\t * each individually, significantly speeding up the rendering. Especially\r\n\t * on column-heavy charts.\r\n\t *\r\n\t * NOTE: this is an experimental feature and may not work in all setups. Some\r\n\t * features might be disabled, too, e.g. pointer events and rounded corners.\r\n\t *\r\n\t * @since 5.14.0\r\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/column-series/#Turbo_mode} for more info\r\n\t */\r\n\tturboMode?: boolean;\r\n\r\n}\r\n\r\nexport interface IColumnSeriesPrivate extends IBaseColumnSeriesPrivate { }\r\n\r\nexport interface IColumnSeriesAxisRange extends IBaseColumnSeriesAxisRange {\r\n\t/**\r\n\t * A list of actual columns in a range.\r\n\t */\r\n\tcolumns: ListTemplate<RoundedRectangle>\r\n}\r\n\r\nexport class ColumnSeries extends BaseColumnSeries {\r\n\r\n\tdeclare public _settings: IColumnSeriesSettings;\r\n\tdeclare public _privateSettings: IColumnSeriesPrivate;\r\n\tdeclare public _dataItemSettings: IColumnSeriesDataItem;\r\n\tdeclare public _axisRangeType: IColumnSeriesAxisRange;\r\n\r\n\tpublic allColumns: Graphics = this.children.push(Graphics.new(this._root, {}));\r\n\tpublic allColumnsData: Array<{ width: number, height: number, x: number, y: number, lowX0?: number, lowY0?: number, lowX1?: number, lowY1?: number, highX0?: number, highY0?: number, highX1?: number, highY1?: number, stroke?: Color, fill?: Color, strokeWidth: number, strokeOpacity: number, fillOpacity: number }> = [];\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic makeColumn(dataItem: DataItem<this[\"_dataItemSettings\"]>, listTemplate: ListTemplate<RoundedRectangle>): RoundedRectangle {\r\n\t\tconst column = listTemplate.make();\r\n\t\tif (!this.get(\"turboMode\")) {\r\n\t\t\tthis.mainContainer.children.push(column);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcolumn.virtualParent = this.chart;\r\n\t\t}\r\n\r\n\t\tcolumn._setDataItem(dataItem);\r\n\t\tlistTemplate.push(column);\r\n\t\treturn column;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[TemplateList]] of all columns in series.\r\n\t *\r\n\t * `columns.template` can be used to set default settings for all columns,\r\n\t * or to change on existing ones.\r\n\t */\r\n\tpublic readonly columns: ListTemplate<RoundedRectangle> = this.addDisposer(new ListTemplate(\r\n\t\tTemplate.new({}),\r\n\t\t() => RoundedRectangle._new(this._root, {\r\n\t\t\tposition: \"absolute\",\r\n\t\t\tthemeTags: $utils.mergeTags(this.columns.template.get(\"themeTags\", []), [\"series\", \"column\"])\r\n\t\t}, [this.columns.template])\r\n\t));\r\n\r\n\tpublic static className: string = \"ColumnSeries\";\r\n\tpublic static classNames: Array<string> = BaseColumnSeries.classNames.concat([ColumnSeries.className]);\r\n\r\n\r\n\tprotected _processAxisRange(axisRange: this[\"_axisRangeType\"]) {\r\n\t\tsuper._processAxisRange(axisRange);\r\n\t\taxisRange.columns = new ListTemplate(\r\n\t\t\tTemplate.new({}),\r\n\t\t\t() => RoundedRectangle._new(this._root, {\r\n\t\t\t\tposition: \"absolute\",\r\n\t\t\t\tthemeTags: $utils.mergeTags(axisRange.columns.template.get(\"themeTags\", []), [\"series\", \"column\"]),\r\n\t\t\t}, [this.columns.template, axisRange.columns.template])\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _beforeColumnsDraw() {\r\n\t\tthis.allColumnsData = [];\r\n\t}\r\n\r\n\tprotected _afterColumnsDraw() {\r\n\t\tif (this.get(\"turboMode\")) {\r\n\r\n\t\t\tthis.allColumns.set(\"draw\", (display) => {\r\n\t\t\t\tdisplay.clear();\r\n\r\n\t\t\t\t$array.each(this.allColumnsData, (column) => {\r\n\t\t\t\t\tconst w = column.width;\r\n\t\t\t\t\tconst h = column.height;\r\n\t\t\t\t\tconst x = column.x;\r\n\t\t\t\t\tconst y = column.y;\r\n\t\t\t\t\tconst stroke = column.stroke;\r\n\t\t\t\t\tconst fill = column.fill;\r\n\t\t\t\t\tconst strokeWidth = column.strokeWidth;\r\n\t\t\t\t\tconst strokeOpacity = column.strokeOpacity;\r\n\t\t\t\t\tconst fillOpacity = column.fillOpacity;\r\n\r\n\t\t\t\t\tdisplay.beginFill(fill, fillOpacity);\r\n\t\t\t\t\tdisplay.beginPath();\r\n\t\t\t\t\tdisplay.lineStyle(strokeWidth, stroke, strokeOpacity);\r\n\t\t\t\t\tdisplay.drawRect(x, y, w, h);\r\n\t\t\t\t\tdisplay.endStroke();\r\n\t\t\t\t\tdisplay.endFill();\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected _updateSeriesGraphics(dataItem: DataItem<this[\"_dataItemSettings\"]>, graphics: Graphics, l: number, r: number, t: number, b: number, fitW: boolean, fitH: boolean) {\r\n\t\tif (this.get(\"turboMode\")) {\r\n\t\t\tconst stroke = graphics.get(\"stroke\");\r\n\t\t\tconst fillOpacity = graphics.get(\"fillOpacity\", 1);\r\n\t\t\tconst strokeOpacity = graphics.get(\"strokeOpacity\", 1);\r\n\t\t\tconst strokWidth = graphics.get(\"strokeWidth\", 1);\r\n\t\t\tconst fill = graphics.get(\"fill\");\r\n\r\n\t\t\tconst ptl = this.getPoint(l, t);\r\n\t\t\tconst pbr = this.getPoint(r, b);\r\n\r\n\t\t\tconst tooltipPoint = dataItem.get(\"point\");\r\n\r\n\t\t\tif (tooltipPoint) {\r\n\t\t\t\tconst point = this.getPoint(tooltipPoint.x, tooltipPoint.y);\r\n\t\t\t\ttooltipPoint.x = point.x + this._x;\r\n\t\t\t\ttooltipPoint.y = point.y + this._y;\r\n\t\t\t}\r\n\r\n\t\t\tl = ptl.x;\r\n\t\t\tr = pbr.x;\r\n\r\n\t\t\tt = ptl.y;\r\n\t\t\tb = pbr.y;\r\n\r\n\t\t\tdataItem.setRaw(\"left\", l);\r\n\t\t\tdataItem.setRaw(\"right\", r);\r\n\t\t\tdataItem.setRaw(\"top\", t);\r\n\t\t\tdataItem.setRaw(\"bottom\", b);\r\n\r\n\t\t\tthis.allColumnsData.push({ width: r - l, height: b - t, x: l, y: t, stroke: stroke, fill: fill, strokeWidth: strokWidth, strokeOpacity: strokeOpacity, fillOpacity: fillOpacity });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsuper._updateSeriesGraphics(dataItem, graphics, l, r, t, b, fitW, fitH);\r\n\t\t}\r\n\t}\r\n}\r\n"]}