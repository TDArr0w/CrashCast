import { Layer } from '@deck.gl/core';
import { FetchMapOptions as _FetchMapOptions, FetchMapResult as _FetchMapResult, LayerDescriptor } from '@carto/api-client';
export type FetchMapResult = Omit<_FetchMapResult, 'layers'> & {
    layers: Layer[];
};
export type FetchMapOptions = Omit<_FetchMapOptions, 'onNewData'> & {
    onNewData?: (result: FetchMapResult) => void;
};
export declare function LayerFactory(descriptor: LayerDescriptor): Layer;
/**
 * fetchMap is a wrapper around the @carto/api-client fetchMap function, with additions for convenience and backward-compatibility.
 * Where @carto/api-client fetchMap returns layer props, @deck.gl/carto fetchMap returns Layer instances ready for use.
 * For greater control, use the @carto/api-client fetchMap function directly and use LayerFactory to create layers manually.
 */
export declare function fetchMap(options: FetchMapOptions): Promise<FetchMapResult>;
//# sourceMappingURL=fetch-map.d.ts.map