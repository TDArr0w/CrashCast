/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{equals as n}from"../../core/arrayUtils.js";import{getInfo as t}from"./spatialReferenceUtils.js";function r(n){if(!n)return null;if(Array.isArray(n))return n;const t=n.hasZ,r=n.hasM;if("point"===n.type)return r&&t?[n.x,n.y,n.z,n.m]:t?[n.x,n.y,n.z]:r?[n.x,n.y,n.m]:[n.x,n.y];if("polygon"===n.type)return n.rings.slice();if("polyline"===n.type)return n.paths.slice();if("multipoint"===n.type)return n.points.map(n=>[n]);if("extent"===n.type){const t=n.clone().normalize();if(!t)return null;let r=!1,e=!1;return t.forEach(n=>{n.hasZ&&(r=!0),n.hasM&&(e=!0)}),t.map(n=>{const t=[[n.xmin,n.ymin],[n.xmin,n.ymax],[n.xmax,n.ymax],[n.xmax,n.ymin],[n.xmin,n.ymin]];if(r&&n.hasZ){const r=.5*(n.zmax-n.zmin);for(let n=0;n<t.length;n++)t[n].push(r)}if(e&&n.hasM){const r=.5*(n.mmax-n.mmin);for(let n=0;n<t.length;n++)t[n].push(r)}return t})}return null}function e(n,t){const r=t[0]-n[0],e=t[1]-n[1];if(n.length>2&&t.length>2){const i=n[2]-t[2];return Math.sqrt(r*r+e*e+i*i)}return Math.sqrt(r*r+e*e)}function i(n,t,r){const e=n[0]+r*(t[0]-n[0]),i=n[1]+r*(t[1]-n[1]);return n.length>2&&t.length>2?[e,i,n[2]+r*(t[2]-n[2])]:[e,i]}function o(n,t,r,e){return s(n,t,r[e],r[e+1])}function s(n,t,r,e){const[i,o]=t,[s,f]=r,[u,l]=e,c=u-s,a=l-f,h=c*c+a*a,p=(i-s)*c+(o-f)*a,y=Math.min(1,Math.max(0,p/h));return n[0]=s+c*y,n[1]=f+a*y,n}function f(n,t,r){let e,i,o,s,f=!1,l=1/0;for(r.reset();r.nextPath();)if(r.nextPoint())for(e=r.x,i=r.y;r.nextPoint();)o=r.x,s=r.y,i>t!=s>t&&n<(o-e)*(t-i)/(s-i)+e&&(f=!f),l=Math.min(l,u(n,t,e,i,o,s)),e=o,i=s;return 0===l?0:(f?1:-1)*Math.sqrt(l)}function u(n,t,r,e,i,o){let s=r,f=e,u=i-s,l=o-f;if(0!==u||0!==l){const r=((n-s)*u+(t-f)*l)/(u*u+l*l);r>1?(s=i,f=o):r>0&&(s+=u*r,f+=l*r)}return u=n-s,l=t-f,u*u+l*l}function l(n,t){return i(n,t,.5)}function c(n){const t=n.length;let r=0;for(let i=0;i<t-1;++i)r+=e(n[i],n[i+1]);return r}function a(n,t){if(t<=0)return n[0];const r=n.length;let o=0;for(let s=0;s<r-1;++s){const r=e(n[s],n[s+1]);if(t-o<r){const e=(t-o)/r;return i(n[s],n[s+1],e)}o+=r}return n[r-1]}function h(n,t=0,r=1){let e=0;const i=n.length;let o=n[0];for(let s=1;s<i;s++){const i=n[s];e+=(i[t]-o[t])*(i[r]+o[r]),o=i}if(p(n)){const i=n[0];e+=(i[t]-o[t])*(i[r]+o[r])}return e>=0}function p(t){const r=t.length;return r>0&&!n(t[0],t[r-1])}function y(n){"rings"in n&&(m(n),g(n))}function m(n){if("rings"in n)for(const t of n.rings)p(t)&&t.push(t[0].slice())}function g(n){if(!("rings"in n))return!1;if(0===n.rings.length||h(n.rings[0]))return!1;for(const t of n.rings)t.reverse();return!0}function x(n){if("polygon"!==n.type&&"polyline"!==n.type)return n;return M("polygon"===n.type?n.rings:n.paths,n.spatialReference),n}function M(n,r){const e=t(r);if(!e)return;const i=e.valid[0],o=e.valid[1],s=o-i;for(const t of n){let n=1/0,r=-1/0;for(const s of t){const t=z(s[0],i,o);n=Math.min(n,t),r=Math.max(r,t),s[0]=t}const e=r-n;s-e<e&&t.forEach(n=>{n[0]<0&&(n[0]+=s)})}}function z(n,t,r){const e=r-t;return n<t?r-(t-n)%e:n>r?t+(n-t)%e:n}function v(n,t){if(n===t)return!0;if(n.type!==t.type)return!1;if("point"===n.type||"mesh"===n.type||"extent"===n.type)return!0;if("multipoint"===n.type)return n.points.length===t.points.length;const[r,e]="polyline"===n.type?[n.paths,t.paths]:[n.rings,t.rings];return r.length===e.length&&r.every((n,t)=>n.length===e[t].length)}export{m as closeRings,y as closeRingsAndFixWinding,f as distanceFromPointToPolygon,u as distanceToSegmentSquared,r as geometryToCoordinates,e as getLength,l as getMidpoint,c as getPathLength,a as getPointOnPath,v as hasCompatibleTopology,h as isClockwise,o as projectPointOnLine,s as projectPointOnLineSeg,x as unnormalizeGeometryOnDatelineCrossing,M as unnormalizeVerticesOnDatelineCrossing,z as unnormalizedCoordinate};
