/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{throwIfAborted as t}from"../../../../../core/promiseUtils.js";import{Asset as e}from"./asset.js";import{GLB as r}from"./glb.js";import{GLTF as o}from"./gltf.js";import{isArrayBufferPNG as n,encodeBase64DataUri as i}from"./imageutils.js";import{Node as s}from"./node.js";import{Scene as a}from"./scene.js";const f="model.gltf",u="model.glb";async function c(e,s){const a=new o(e,s).gltf,c=a.extras.promises;let m=1,l=1,p=null;await Promise.allSettled(c),t(s.signal);const g=s.jsonSpacing??4,d=new Map,w=JSON.stringify(a,(t,e)=>{if("extras"!==t){if(e instanceof ArrayBuffer){if(n(e))switch(s.output?.image){case 1:case 2:break;default:{const t=`img${l}.png`;return l++,d.set(t,e),t}}switch(s.output?.buffer){case 1:return i(e);case 2:if(p)throw new Error("Already encountered an ArrayBuffer, there should only be one in the GLB format.");return void(p=e);default:{const t=`data${m}.bin`;return m++,d.set(t,e),t}}}return e}},g);return 2===s.output?.buffer||2===s.output?.image?d.set(u,new r(w,p).buffer):d.set(f,w),d}async function m(t,e){const r=(await c(t,{output:{buffer:2,image:2},jsonSpacing:0,...e})).get(u);if(!(r&&r instanceof ArrayBuffer))throw new Error("failed to export to glb");return r}async function l(t,r){const o=new e,n=new a;return o.addScene(n),n.addNode(new s(t)),await m(o,{origin:t.origin,...r})}export{c as exportGLTF,u as modelNameGlb,f as modelNameGltf,l as toBinaryGLTF};
