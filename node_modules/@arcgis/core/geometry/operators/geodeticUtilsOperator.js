/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{convertUnit as e}from"../../core/unitUtils.js";import t from"../Point.js";import{load as r,isLoaded as i,calculateDistanceAndAzimuth as n,movePointsByDistance as o}from"./gx/geodeticUtils.js";import{geodeticCurveType as s}from"./support/geodeticCurveType.js";let a,c,u;function m(){return!!a&&i()}async function p(){if(!m()){const[e]=await Promise.all([import("./support/apiConverter.js"),r()]);a=e.fromPoint,c=e.fromSpatialReference,u=e.getSpatialReference}}function f(t,r,i={}){const{curveType:o="geodesic",unit:m}=i,p=u(t),f=[0],l=[0];let g=n(c(p),a(t).getXY(),a(r).getXY(),s[o],f,l);g&&m&&(g=e(g,"meters",m));const y=t=>d(e(t,"radians","degrees"));return{distance:g,azimuth12:y(f[0]),azimuth21:y(l[0])}}function l(r,i,n,m={}){const{curveType:p="geodesic",unit:f}=m;f&&(i=e(i,f,"meters"));const l=u(r),d=[a(r).getXY()];o(c(l),d,1,i,e(n,"degrees","radians"),s[p]);const g=d[0];return g.isNAN()?null:new t({x:g.x,y:g.y,spatialReference:l})}function d(e){return e<0?e+360:e}export{f as calculateDistanceAndAzimuth,m as isLoaded,p as load,l as pointFromDistance,d as shiftDegreesTo360};
