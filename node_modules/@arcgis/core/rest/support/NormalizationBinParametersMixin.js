/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{__decorate as o}from"tslib";import{strict as t}from"../../core/jsonMap.js";import r from"../../core/Logger.js";import{property as a}from"../../core/accessorSupport/decorators/property.js";import"../../core/has.js";import"../../core/RandomLCG.js";import{enumeration as e}from"../../core/accessorSupport/decorators/enumeration.js";import{subclass as i}from"../../core/accessorSupport/decorators/subclass.js";const n=t()({naturalLog:"natural-log",squareRoot:"square-root",percentOfTotal:"percent-of-total",log:"log",field:"field"}),l="percent-of-total",s="field",m=t=>{const m=t;let p=class extends m{constructor(){super(...arguments),this.normalizationField=null,this.normalizationMaxValue=null,this.normalizationMinValue=null,this.normalizationTotal=null}get normalizationType(){let o=this._get("normalizationType");const t=!!this.normalizationField,a=null!=this.normalizationTotal;return t||a?(o=t&&s||a&&l||null,t&&a&&r.getLogger(this).warn("warning: both normalizationField and normalizationTotal are set!")):o!==s&&o!==l||(o=null),o}set normalizationType(o){this._set("normalizationType",o)}};return o([a({type:String,json:{name:"parameters.normalizationField",write:!0}})],p.prototype,"normalizationField",void 0),o([a({type:Number,json:{name:"parameters.normalizationMaxValue",write:!0}})],p.prototype,"normalizationMaxValue",void 0),o([a({type:Number,json:{name:"parameters.normalizationMinValue",write:!0}})],p.prototype,"normalizationMinValue",void 0),o([a({type:Number,json:{name:"parameters.normalizationTotal",write:!0}})],p.prototype,"normalizationTotal",void 0),o([e(n,{name:"parameters.normalizationType"})],p.prototype,"normalizationType",null),p=o([i("esri.rest.support.NormalizationBinParametersMixin")],p),p};export{m as NormalizationBinParametersMixin,n as normalizationTypeJsonMap};
