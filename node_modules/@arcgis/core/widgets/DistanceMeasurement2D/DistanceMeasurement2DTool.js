/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{__decorate as e}from"tslib";import t from"../../Graphic.js";import"../../intl.js";import{getContrast as i,multiplyOpacity as r}from"../../core/colorUtils.js";import{handlesGroup as s}from"../../core/handleUtils.js";import{destroyMaybe as o}from"../../core/maybe.js";import{watch as n,initial as a}from"../../core/reactiveUtils.js";import{formatDecimal as l,formatImperialLength as p,formatMetricLength as m}from"../../core/unitFormatUtils.js";import{convertUnit as c}from"../../core/unitUtils.js";import{property as h}from"../../core/accessorSupport/decorators/property.js";import"../../core/has.js";import"../../core/Logger.js";import"../../core/RandomLCG.js";import{subclass as u}from"../../core/accessorSupport/decorators/subclass.js";import{UpdatingHandles as d}from"../../core/support/UpdatingHandles.js";import y from"../../geometry/Point.js";import v from"../../geometry/Polyline.js";import{e as g,l as _}from"../../chunks/geodeticDensifyOperator.js";import{e as f,l as w}from"../../chunks/geodeticLengthOperator.js";import{e as L}from"../../chunks/lengthOperator.js";import{isSupported as j,geodesicLengths as b,geodesicDensify as S}from"../../geometry/support/geodesicUtils.js";import M from"../../layers/GraphicsLayer.js";import x from"../../symbols/CIMSymbol.js";import C from"../../symbols/Font.js";import A from"../../symbols/SimpleMarkerSymbol.js";import D from"../../symbols/TextSymbol.js";import{SnappingVisualizer2D as G}from"../../views/2d/interactive/SnappingVisualizer2D.js";import k from"../../views/draw/Draw.js";import{createCoordinateHelper as T}from"../../views/interactive/coordinateHelper.js";import{createManipulatorDragEventPipeline as O,screenToMap as H,dragManipulatedObject as P}from"../../views/interactive/dragEventPipeline.js";import{GraphicManipulator as R}from"../../views/interactive/GraphicManipulator.js";import{InteractiveToolBase as U}from"../../views/interactive/InteractiveToolBase.js";import{EditGeometry as E}from"../../views/interactive/editGeometry/EditGeometry.js";import{EditGeometryOperations as I}from"../../views/interactive/editGeometry/EditGeometryOperations.js";import{SnappingContext as z}from"../../views/interactive/snapping/SnappingContext.js";import{createSnapDragEventPipelineStep as B}from"../../views/interactive/snapping/SnappingDragPipelineStep.js";import{setupSnappingToggleHandles as F}from"../../views/interactive/snapping/snappingUtils.js";import{fetchMessageBundle as V}from"../../intl/messages.js";import{onLocaleChange as W}from"../../intl/locale.js";const N=1e5;let q=class extends U{constructor(e){super(e),this._measurementLayer=new M({internal:!0,listMode:"hide",visible:!1,title:"DistanceMeasurement2DTool measurement layer"}),this._manipulatorLayer=new M({internal:!0,listMode:"hide",visible:!1,title:"DistanceMeasurement2DTool manipulator layer"}),this._snappingLayer=new M({internal:!0,listMode:"hide",visible:!1,title:"DistanceMeasurement2DTool snapping layer"}),this._updatingHandles=new d,this._vertices=[],this._drawActive=!1,this.measurement=null,this.measurementLabel=null}initialize(){V("esri/core/t9n/Units").then(e=>{this.messages=e});const e=this.view;this._draw=new k({view:e}),e.map.addMany([this._measurementLayer,this._manipulatorLayer,this._snappingLayer]),e.focus(),this.addHandles([W(async()=>{this.messages=await V("esri/core/t9n/Units")}),n(()=>[this.unit,this.messages],()=>{this._updatePolylines()},a),n(()=>[this.view.effectiveTheme.accentColor,this.view.effectiveTheme.textColor],()=>{if(!this._vertices.length)return;const e=this._vertices.map(({coord:e})=>e);for(const{handle:t}of this._vertices)t.remove();this._vertices=[],this._measurementLayer.removeAll(),this._manipulatorLayer.removeAll(),this._snappingLayer.removeAll(),this.manipulators.removeAll(),this._updateSketch(e)})]),F(this)}destroy(){const{map:e}=this.view;this._draw.view=null,this._draw=o(this._draw),e.removeMany([this._measurementLayer,this._manipulatorLayer,this._snappingLayer]),this._measurementLayer.removeAll(),this._manipulatorLayer.removeAll(),this._snappingLayer.removeAll(),this._set("measurement",null),this._set("measurementLabel",null),this._measurementLayer=o(this._measurementLayer),this._manipulatorLayer=o(this._manipulatorLayer),this._snappingLayer=o(this._snappingLayer),this._updatingHandles=o(this._updatingHandles),this._resetVertices()}get cursor(){return this._drawActive?"crosshair":null}set editable(e){this._set("editable",e),e||this._draw.reset()}get snappingOptions(){return this.snappingManager.options}get updating(){return this._updatingHandles.updating||this.snappingManager.updating}onActivate(){this._drawActive||0!==this._vertices.length||this._startSketch()}onShow(){this._measurementLayer.visible=!0,this._manipulatorLayer.visible=!0,this._snappingLayer.visible=!0}onHide(){this._measurementLayer.visible=!1,this._manipulatorLayer.visible=!1,this._snappingLayer.visible=!1}_getSnappingContext(e){return new z({elevationInfo:{mode:"on-the-ground",offset:0},pointer:e,editGeometryOperations:new I(new E("point",T(!1,!1,this.view.spatialReference)),2),visualizer:new G(this._snappingLayer)})}_resetVertices(){for(const{handle:e}of this._vertices)e.remove();this._vertices=[]}_startSketch(){this._drawActive=!0;const{snappingManager:e}=this;this._draw.create("polyline",{mode:"click",snappingManager:e}).on(["draw-complete","vertex-add","vertex-update","vertex-remove","cursor-update","undo","redo"],e=>{this._updateSketch(e.vertices),"draw-complete"===e.type&&this._stopSketch()})}_stopSketch(){this.manipulators.forEach(({manipulator:e})=>{e.interactive=!0}),this._drawActive=!1,this.finishToolCreation()}_updateSketch(e){const{spatialReference:t}=this.view;for(;this._vertices.length>e.length;){const{handle:e,manipulator:t}=this._vertices.pop();e.remove(),this.manipulators.remove(t)}for(let l=this._vertices.length;l<e.length;l++){const[i,r]=e[l],o=new y({x:i,y:r,spatialReference:t}),n=J(o,this.view,this._manipulatorLayer);this.manipulators.add(n);const a=I.fromGeometry(o,2),p=[a.on("vertex-update",e=>{const t=e.vertices.at(0);t&&(this._vertices[l].coord=[t.pos[0],t.pos[1]],this._updatePolylines())}),O(n,(e,t,i,r)=>{const s=this._getSnappingContext(r),{snappingManager:o}=this,n=this._updatingHandles,{snappingStep:l}=B({snappingContext:s,snappingManager:o,updatingHandles:n});t.next(H(this.view)).next(t=>{if("start"===t.action){const i=new y(t.mapStart);e.graphic.geometry=i,a.trySetGeometry(i)}return t}).next(...l).next(P({operations:a})).next(()=>{e.graphic.geometry=a.data.geometry})})];this._vertices.push({manipulator:n,coord:[i,r],handle:s(p)})}const i=this._vertices.length-1,r=this._vertices[i],[o,n]=e[i];r.coord[0]===o&&r.coord[1]===n||(r.coord=[o,n],r.manipulator.graphic.geometry=new y({x:o,y:n,spatialReference:t}));const a=this._drawActive?this._vertices[i].manipulator:null;this.manipulators.forEach(({manipulator:e})=>{e.interactive=null==a||e!==a}),this._updatePolylines()}_updatePolylines(){if(this._vertices.length<2)return void this._measurementLayer.removeAll();const e=K(this._vertices.map(({coord:e})=>e),this.view.spatialReference);if(!e)return;const{measurement:s,drawing:o,original:n}=e;this._set("measurement",s);const a=Y(this.messages,s,this.unit);let l,p;this._set("measurementLabel",a);const{graphics:m}=this._measurementLayer,c=2===m.length,{effectiveTheme:h}=this.view;c?(l=m.at(0),p=m.at(1)):(l=new t({symbol:new x({data:{type:"CIMSymbolReference",symbol:{type:"CIMLineSymbol",symbolLayers:[{type:"CIMSolidStroke",effects:[{type:"CIMGeometricEffectDashes",dashTemplate:[14,12],lineDashEnding:"FullGap",controlPointEnding:"NoConstraint"}],enable:!0,capStyle:"Butt",joinStyle:"Round",width:3.5,color:i(h.accentColor).toArray()},{type:"CIMSolidStroke",enable:!0,capStyle:"Butt",joinStyle:"Round",width:5,color:h.accentColor.toArray()}]}}})}),p=new t({symbol:new D({color:h.textColor,haloColor:r(i(h.textColor,160),.5),haloSize:2,font:new C({size:14,family:"sans-serif"})})}),m.removeAll(),m.addMany([l,p])),l.geometry=o,p.geometry=n.extent?.center,p.symbol.text=a}};function J(e,i,s){const o=r(i.effectiveTheme.accentColor,.5),n={type:"simple-line",width:0},a=8,l=new A({style:"circle",color:o,size:a,outline:n}),p=new A({style:"circle",color:o,size:1.5*a,outline:n}),m=new t({geometry:e,symbol:l});return new R({view:i,layer:s,graphic:m,focusedSymbol:p})}function K(e,t){const i=new v({paths:[e],spatialReference:t});let r,s;return t.isGeographic?j(t)?(r=b([i],"meters")[0],s=S(i,N)):(r=f(i,{unit:"meters"}),s=g(i,N,{unit:"meters"})):t.isWebMercator?(r=f(i,{unit:"meters"}),s=g(i,N,{unit:"meters"})):(r=L(i,{unit:"meters"}),s=i),{measurement:{geometry:s,length:r},original:i,drawing:s}}function Q(e){return null!=e}async function X(e){(e?.isGeographic&&!j(e)||e?.isWebMercator)&&await Promise.all([_(),w()])}function Y(e,t,i){if(!t||!e)return"";switch(i){case"metric":return m(e,t.length,"meters");case"imperial":return p(e,t.length,"meters");default:return l(e,c(t.length,"meters",i),i)}}e([h()],q.prototype,"_drawActive",void 0),e([h({readOnly:!0})],q.prototype,"cursor",null),e([h({value:!0})],q.prototype,"editable",null),e([h({readOnly:!0})],q.prototype,"measurement",void 0),e([h({readOnly:!0})],q.prototype,"measurementLabel",void 0),e([h()],q.prototype,"messages",void 0),e([h({constructOnly:!0})],q.prototype,"snappingManager",void 0),e([h()],q.prototype,"unit",void 0),e([h()],q.prototype,"updating",null),e([h({constructOnly:!0})],q.prototype,"view",void 0),q=e([u("esri.widgets.DistanceMeasurement2D.DistanceMeasurement2DTool")],q);export{q as DistanceMeasurement2DTool,K as createDistanceMeasurementInfo2D,Y as createDistanceMeasurementLabel,Q as isSupported,X as loadGeometryOperators};
