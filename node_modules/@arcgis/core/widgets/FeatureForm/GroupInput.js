/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{__decorate as t}from"tslib";import{watch as i}from"../../core/reactiveUtils.js";import{generateUID as e}from"../../core/uid.js";import{property as s}from"../../core/accessorSupport/decorators/property.js";import"../../core/has.js";import"../../core/Logger.js";import"../../core/RandomLCG.js";import{subclass as r}from"../../core/accessorSupport/decorators/subclass.js";import{isFieldInput as o}from"./featureFormUtils.js";import p from"./InputBase.js";let n=class extends p{constructor(t){super(t),this._expressionTrackingHandles=new Map,this.id=e().toString(),this.type="group"}initialize(){this.addHandles([i(()=>[this.visible,this.inputs],([t])=>{const{inputs:i}=this,e=!!t&&void 0;for(const s of i)o(s)&&(s.required=e)},{initial:!0,equals:(t,i)=>i[0]===t[0]&&i[1]===t[1]})])}destroy(){for(const t of this._expressionTrackingHandles.values())t.remove()}get initialState(){return this.element.initialState||"expanded"}get inputs(){return this._get("inputs")}set inputs(t){this.removeAllHandles(),t&&this.addHandles(t.map(t=>i(()=>t.visible,()=>this._dirtyEvaluatedVisibilityExpression()))),this._set("inputs",t)}get label(){return super.label}get open(){return"expanded"===this.initialState}set open(t){this._override("open",t)}get visible(){return!1!==this.evaluatedVisibilityExpression&&this.inputs&&this.inputs.some(t=>t.visible)}_dirtyEvaluatedVisibilityExpression(){const{element:t}=this;t.visibilityExpression&&this.notifyChange("evaluatedVisibilityExpression")}};t([s()],n.prototype,"id",void 0),t([s()],n.prototype,"initialState",null),t([s()],n.prototype,"inputs",null),t([s()],n.prototype,"open",null),t([s()],n.prototype,"type",void 0),t([s()],n.prototype,"visible",null),n=t([r("esri.widgets.FeatureForm.GroupInput")],n);const a=n;export{a as default};
