/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{__decorate as e}from"tslib";import t from"../../core/Accessor.js";import{deprecateUnnecessaryViewModel as r}from"../../core/deprecate.js";import o from"../../core/Logger.js";import{watch as n,syncAndInitial as i}from"../../core/reactiveUtils.js";import{property as s}from"../../core/accessorSupport/decorators/property.js";import{subclass as a}from"../../core/accessorSupport/decorators/subclass.js";import l from"../../views/3d/environment/CloudyWeather.js";import h from"../../views/3d/environment/FoggyWeather.js";import p from"../../views/3d/environment/RainyWeather.js";import y from"../../views/3d/environment/SnowyWeather.js";import m from"../../views/3d/environment/SunnyWeather.js";import{validateWeatherType as u}from"../../views/3d/environment/weather.js";let w=class extends t{constructor(e){super(e),this.view=null,this._weatherByType={sunny:new m,cloudy:new l,rainy:new p,snowy:new y,foggy:new h},this._settingWeather=!1,e?.isDefaultViewModel||r(o.getLogger(this),"Weather","arcgis-weather",{version:"4.33"})}normalizeCtorArgs(e={}){const{isDefaultViewModel:t,...r}=e;return r}initialize(){this.addHandles([n(()=>this.current,e=>{this._settingWeather||null==e||(this._weatherByType={...this._weatherByType,[e.type]:e})},i)])}get state(){const e=this.view;return null!=e&&e.ready?null!=this.error?"not-visible"===this.error?"ready":"error":"ready":"disabled"}get weatherByType(){return this._weatherByType}get error(){const e=this.view;return null!=e&&e.ready?"3d"!==e.type?"unsupported-view":"local"===e.viewingMode?"local-scene":e.environment.atmosphereEnabled?e.environment.weatherAvailable?null:"not-visible":"no-atmosphere":null}get current(){return this._environment?.weather??this._weatherByType.sunny}set current(e){const t=this._environment;t&&(t.weather=e)}get _environment(){const e=this.view;return null!=e&&"3d"===e.type?e.environment:null}setWeatherByType(e){if(!u(e,o.getLogger(this)))return;const t=this._environment;null!=t&&(this._settingWeather=!0,t.weather=this._weatherByType[e],this._settingWeather=!1)}setSnowCoverEnabled(e){const t=this.current;"snowCover"in t&&(t.snowCover=e?"enabled":"disabled")}};e([s()],w.prototype,"view",void 0),e([s()],w.prototype,"state",null),e([s()],w.prototype,"_weatherByType",void 0),e([s()],w.prototype,"weatherByType",null),e([s()],w.prototype,"error",null),e([s()],w.prototype,"current",null),e([s()],w.prototype,"_environment",null),w=e([a("esri.widgets.Weather.WeatherViewModel")],w);const c=w;export{c as default};
