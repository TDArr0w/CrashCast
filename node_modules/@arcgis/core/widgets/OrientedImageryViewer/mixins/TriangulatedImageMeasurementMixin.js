/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{__decorate as e}from"tslib";import"../../../intl.js";import{formatLength as t,formatAngle as r}from"../../../core/quantityFormatUtils.js";import{createLength as a,createAngle as n}from"../../../core/quantityUtils.js";import"../../../core/Logger.js";import"../../../core/has.js";import"../../../core/RandomLCG.js";import"../../../core/Error.js";import{subclass as s}from"../../../core/accessorSupport/decorators/subclass.js";import{getMetersPerUnitOfSR as i}from"../../../layers/orientedImagery/core/utils.js";import{copyToClipboard as c,getConvertedArea as u}from"../imageMeasurementUtils.js";import{ImageMeasurementMixin as o}from"./ImageMeasurementMixin.js";import{substitute as g}from"../../../intl/substitute.js";const m=m=>{const l=o(m);let d=class extends l{copyActiveMeasurementResults(e,t){t?this.copyTriangularMeasurementResult(e):this.copyGroundMeasurementResult(e)}copyGroundMeasurementResult(e){let t,r;switch(e){case"area":t={measurement:this.getConvertedAreaString("measurement"),accuracy:this.getConvertedAreaString("accuracy")},r="{measurement} ± {accuracy}";break;case"distance":t={measurement:this.getConvertedDistanceString("measurement"),accuracy:this.getConvertedDistanceString("accuracy")},r="{measurement} ± {accuracy}";break;case"height":t={measurement:this.getConvertedHeightString("measurement"),accuracy:this.getConvertedHeightString("accuracy")},r="{measurement} ± {accuracy}"}const a=g(r,t);c(a)}copyTriangularMeasurementResult(e){let t=null;switch(e){case"area":t=this.copyTriangularAreaMeasurements();break;case"distance":t=this.copyTriangularDistanceMeasurements()}t&&c(t)}copyTriangularAreaMeasurements(){const e={measurement:this.getConvertedTriangularAreaString("measurement"),accuracy:this.getConvertedTriangularAreaString("accuracy")};return g("{measurement} ± {accuracy}",e)}copyTriangularDistanceMeasurements(){const{oiViewModel:e}=this,{triangulatedDistanceMeasurement:t,triangulatedDistanceAccuracy:r}=e;if(!t)return;const{distance:a,horizontalDistance:n,verticalDistance:s,slope:i,aspect:c}=t,{distanceAccuracy:u=0,angleAccuracy:o=0}=r??{},m={distance:this.getConvertedTriangularDistanceMeasurementString(a),distanceAccuracy:this.getConvertedTriangularDistanceMeasurementString(u,!0),horizontal:this.getConvertedTriangularDistanceMeasurementString(n),vertical:this.getConvertedTriangularDistanceMeasurementString(s),slope:this.getConvertedTriangularDistanceAngularResultsString(i),angleAccuracy:this.getConvertedTriangularDistanceAngularResultsString(o),aspect:this.getConvertedTriangularDistanceAngularResultsString(c)};return g(" Distance : {distance} ± {distanceAccuracy} , Horizontal : {horizontal} ± {distanceAccuracy}, Vertical : {vertical} ± {distanceAccuracy}, Slope : {slope} ± {angleAccuracy}, Aspect : {aspect} ± {angleAccuracy}",m)}getConvertedTriangularDistanceMeasurementString(e,r=!1){const{measurementUnitMessages:n,pixelMeasurementUnit:s,oiViewModel:{currentBestFeature:c}}=this;if(!c)return;const u=r?e:e*i(c.attributes.location.spatialReference);return t(n,a(u,"meters"),s,3)||null}getConvertedTriangularDistanceAngularResultsString(e){return r(n(e,"degrees"),"arithmetic",3)||null}getConvertedTriangularAreaString(e){const{oiViewModel:t,measurementUnitMessages:r,pixelAreaMeasurementUnit:a,messages:n}=this,{triangulatedAreaAccuracy:s,triangulatedAreaMeasurement:i}=t;return u(e,i,s,r,a)??n.startMeasurement}};return d=e([s("esri.widgets.OrientedImageryViewer.mixins.TriangulatedImageMeasurementMixin")],d),d};export{m as TriangulatedImageMeasurementMixin};
