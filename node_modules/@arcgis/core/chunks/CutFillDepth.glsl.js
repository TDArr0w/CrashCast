/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{ScreenSpacePass as e}from"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js";import{ReadDepth as t}from"../views/3d/webgl-engine/core/shaderLibrary/output/ReadDepth.glsl.js";import{glsl as r}from"../views/3d/webgl-engine/core/shaderModules/glsl.js";import{Texture2DPassUniform as a}from"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js";import{NoParameters as o}from"../views/webgl/NoParameters.js";import{ShaderBuilder as l}from"../views/webgl/ShaderBuilder.js";class i extends o{}function s(){const o=new l;return o.include(e),o.fragment.include(t),o.fragment.uniforms.add(new a("cutFillReferenceDepthTexture",e=>e.referenceDepthTexture),new a("cutFillTargetDepthTexture",e=>e.targetDepthTexture)),o.fragment.code.add(r`bool outsideFar(float depth) {
return depth >= 1.0;
}`),o.fragment.main.add(r`float referenceDepth = depthFromTexture(cutFillReferenceDepthTexture, uv);
float targetDepth = depthFromTexture(cutFillTargetDepthTexture, uv);
if (outsideFar(targetDepth)) {
discard;
}
float depth = referenceDepth - targetDepth;
float cut = min(0.0, depth);
float fill = max(0.0, depth);
fragColor = vec4(cut, fill, 0.0, 0.0);`),o}const d=Object.freeze(Object.defineProperty({__proto__:null,CutFillDepthParameters:i,build:s},Symbol.toStringTag,{value:"Module"}));export{i as C,d as a,s as b};
