/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{deg2rad as e}from"../core/mathUtils.js";import{set as i}from"../core/libs/gl-matrix-2/math/vec2.js";import{create as t}from"../core/libs/gl-matrix-2/factories/vec2f64.js";import{t as n,e as a,n as o,b as r,k as l,d as s,i as c,g as d}from"./vec32.js";import{create as f}from"../core/libs/gl-matrix-2/factories/vec3f64.js";import{t as p}from"./vec42.js";import{create as g}from"../core/libs/gl-matrix-2/factories/vec4f64.js";import{pointAt as h}from"../geometry/support/lineSegment.js";import{fromPositionAndNormal as m,create as u}from"../geometry/support/plane.js";import{y as w,e as x,c as b}from"./sphere.js";import{Laserline as v}from"../views/3d/webgl-engine/core/shaderLibrary/Laserline.glsl.js";import{ScreenSpacePass as P}from"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js";import{Float2PassUniform as D}from"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js";import{Float3BindUniform as M}from"../views/3d/webgl-engine/core/shaderModules/Float3BindUniform.js";import{Float3PassUniform as S}from"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js";import{Float4PassUniform as C}from"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js";import{FloatBindUniform as L}from"../views/3d/webgl-engine/core/shaderModules/FloatBindUniform.js";import{FloatPassUniform as A}from"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js";import{glsl as j}from"../views/3d/webgl-engine/core/shaderModules/glsl.js";import{ShaderBuilder as V}from"../views/webgl/ShaderBuilder.js";const y=e(6);function O(e){const i=new V;i.include(P),i.include(v,e);const t=i.fragment;if(e.lineVerticalPlaneEnabled||e.heightManifoldEnabled)if(t.uniforms.add(new A("maxPixelDistance",(i,t)=>e.heightManifoldEnabled?2*t.camera.computeScreenPixelSizeAt(i.heightManifoldTarget):2*t.camera.computeScreenPixelSizeAt(i.lineVerticalPlaneSegment.origin))),t.code.add(j`float planeDistancePixels(vec4 plane, vec3 pos) {
float dist = dot(plane.xyz, pos) + plane.w;
float width = fwidth(dist);
dist /= min(width, maxPixelDistance);
return abs(dist);
}`),e.spherical){const e=(e,i,t)=>n(e,i.heightManifoldTarget,t.camera.viewMatrix),i=(e,i)=>n(e,[0,0,0],i.camera.viewMatrix);t.uniforms.add(new C("heightManifoldOrigin",(t,n)=>(e(G,t,n),i(_,n),a(_,_,G),o(W,_),W[3]=r(_),W)),new M("globalOrigin",e=>i(G,e)),new A("cosSphericalAngleThreshold",(e,i)=>1-Math.max(2,l(i.camera.eye,e.heightManifoldTarget)*i.camera.perRenderPixelRatio)/r(e.heightManifoldTarget))),t.code.add(j`float globeDistancePixels(float posInGlobalOriginLength) {
float dist = abs(posInGlobalOriginLength - heightManifoldOrigin.w);
float width = fwidth(dist);
dist /= min(width, maxPixelDistance);
return abs(dist);
}
float heightManifoldDistancePixels(vec4 heightPlane, vec3 pos) {
vec3 posInGlobalOriginNorm = normalize(globalOrigin - pos);
float cosAngle = dot(posInGlobalOriginNorm, heightManifoldOrigin.xyz);
vec3 posInGlobalOrigin = globalOrigin - pos;
float posInGlobalOriginLength = length(posInGlobalOrigin);
float sphericalDistance = globeDistancePixels(posInGlobalOriginLength);
float planarDistance = planeDistancePixels(heightPlane, pos);
return cosAngle < cosSphericalAngleThreshold ? sphericalDistance : planarDistance;
}`)}else t.code.add(j`float heightManifoldDistancePixels(vec4 heightPlane, vec3 pos) {
return planeDistancePixels(heightPlane, pos);
}`);if(e.pointDistanceEnabled&&(t.uniforms.add(new A("maxPixelDistance",(e,i)=>2*i.camera.computeScreenPixelSizeAt(e.pointDistanceTarget))),t.code.add(j`float sphereDistancePixels(vec4 sphere, vec3 pos) {
float dist = distance(sphere.xyz, pos) - sphere.w;
float width = fwidth(dist);
dist /= min(width, maxPixelDistance);
return abs(dist);
}`)),e.intersectsLineEnabled&&t.uniforms.add(new L("perScreenPixelRatio",e=>e.camera.perScreenPixelRatio)).code.add(j`float lineDistancePixels(vec3 start, vec3 dir, float radius, vec3 pos) {
float dist = length(cross(dir, pos - start)) / (length(pos) * perScreenPixelRatio);
return abs(dist) - radius;
}`),(e.lineVerticalPlaneEnabled||e.intersectsLineEnabled)&&t.code.add(j`bool pointIsWithinLine(vec3 pos, vec3 start, vec3 end) {
vec3 dir = end - start;
float t2 = dot(dir, pos - start);
float l2 = dot(dir, dir);
return t2 >= 0.0 && t2 <= l2;
}`),t.main.add(j`vec3 pos;
vec3 normal;
float angleCutoffAdjust;
float depthDiscontinuityAlpha;
if (!laserlineReconstructFromDepth(pos, normal, angleCutoffAdjust, depthDiscontinuityAlpha)) {
fragColor = vec4(0.0);
return;
}
vec4 color = vec4(0.0);`),e.heightManifoldEnabled){t.uniforms.add(new D("angleCutoff",e=>E(e)),new C("heightPlane",(e,i)=>U(e.heightManifoldTarget,e.renderCoordsHelper.worldUpAtPosition(e.heightManifoldTarget,G),i.camera.viewMatrix)));const i=e.spherical?j`normalize(globalOrigin - pos)`:j`heightPlane.xyz`;t.main.add(j`
      vec2 angleCutoffAdjusted = angleCutoff - angleCutoffAdjust;
      // Fade out laserlines on flat surfaces
      float heightManifoldAlpha = 1.0 - smoothstep(angleCutoffAdjusted.x, angleCutoffAdjusted.y, abs(dot(normal, ${i})));
      vec4 heightManifoldColor = laserlineProfile(heightManifoldDistancePixels(heightPlane, pos));
      color = max(color, heightManifoldColor * heightManifoldAlpha);`)}return e.pointDistanceEnabled&&(t.uniforms.add(new D("angleCutoff",e=>E(e)),new C("pointDistanceSphere",(e,i)=>w(z(e,i)))),t.main.add(j`float pointDistanceSphereDistance = sphereDistancePixels(pointDistanceSphere, pos);
vec4 pointDistanceSphereColor = laserlineProfile(pointDistanceSphereDistance);
float pointDistanceSphereAlpha = 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, abs(dot(normal, normalize(pos - pointDistanceSphere.xyz))));
color = max(color, pointDistanceSphereColor * pointDistanceSphereAlpha);`)),e.lineVerticalPlaneEnabled&&(t.uniforms.add(new D("angleCutoff",e=>E(e)),new C("lineVerticalPlane",(e,i)=>I(e,i)),new S("lineVerticalStart",(e,i)=>T(e,i)),new S("lineVerticalEnd",(e,i)=>R(e,i))),t.main.add(j`if (pointIsWithinLine(pos, lineVerticalStart, lineVerticalEnd)) {
float lineVerticalDistance = planeDistancePixels(lineVerticalPlane, pos);
vec4 lineVerticalColor = laserlineProfile(lineVerticalDistance);
float lineVerticalAlpha = 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, abs(dot(normal, lineVerticalPlane.xyz)));
color = max(color, lineVerticalColor * lineVerticalAlpha);
}`)),e.intersectsLineEnabled&&(t.uniforms.add(new D("angleCutoff",e=>E(e)),new S("intersectsLineStart",(e,i)=>n(G,e.lineStartWorld,i.camera.viewMatrix)),new S("intersectsLineEnd",(e,i)=>n(G,e.lineEndWorld,i.camera.viewMatrix)),new S("intersectsLineDirection",(e,i)=>(s(W,e.intersectsLineSegment.vector),W[3]=0,o(G,p(W,W,i.camera.viewMatrix)))),new A("intersectsLineRadius",e=>e.intersectsLineRadius)),t.main.add(j`if (pointIsWithinLine(pos, intersectsLineStart, intersectsLineEnd)) {
float intersectsLineDistance = lineDistancePixels(intersectsLineStart, intersectsLineDirection, intersectsLineRadius, pos);
vec4 intersectsLineColor = laserlineProfile(intersectsLineDistance);
float intersectsLineAlpha = 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, 1.0 - abs(dot(normal, intersectsLineDirection)));
color = max(color, intersectsLineColor * intersectsLineAlpha);
}`)),t.main.add(j`fragColor = laserlineOutput(color * depthDiscontinuityAlpha);`),i}function E(t){return i(F,Math.cos(t.angleCutoff),Math.cos(Math.max(0,t.angleCutoff-e(2))))}function z(e,i){const t=n(k,e.pointDistanceOrigin,i.camera.viewMatrix),a=l(e.pointDistanceOrigin,e.pointDistanceTarget);return x($,t,a)}function I(e,i){const t=h(e.lineVerticalPlaneSegment,.5,G),n=e.renderCoordsHelper.worldUpAtPosition(t,H),a=o(_,e.lineVerticalPlaneSegment.vector),r=c(G,n,a);return o(r,r),U(e.lineVerticalPlaneSegment.origin,r,i.camera.viewMatrix)}function T(e,i){const t=s(G,e.lineVerticalPlaneSegment.origin);return e.renderCoordsHelper.setAltitude(t,0),n(t,t,i.camera.viewMatrix)}function R(e,i){const t=d(G,e.lineVerticalPlaneSegment.origin,e.lineVerticalPlaneSegment.vector);return e.renderCoordsHelper.setAltitude(t,0),n(t,t,i.camera.viewMatrix)}function U(e,i,t){return n(B,e,t),s(W,i),W[3]=0,p(W,W,t),m(B,W,N)}const F=t(),G=f(),W=g(),H=f(),_=f(),B=f(),N=u(),k=f(),$=b(),q=Object.freeze(Object.defineProperty({__proto__:null,build:O,defaultAngleCutoff:y},Symbol.toStringTag,{value:"Module"}));export{q as L,O as b,y as d};
