/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{__decorate as e}from"tslib";import r from"../PopupTemplate.js";import{ClonableMixin as t}from"../core/Clonable.js";import o from"../core/Error.js";import{MultiOriginJSONMixin as s}from"../core/MultiOriginJSONSupport.js";import{debounce as i,throwIfAbortError as n}from"../core/promiseUtils.js";import{watch as a}from"../core/reactiveUtils.js";import{property as p}from"../core/accessorSupport/decorators/property.js";import"../core/has.js";import"../core/Logger.js";import"../core/RandomLCG.js";import{subclass as l}from"../core/accessorSupport/decorators/subclass.js";import m from"../graphic/WCSGraphicOrigin.js";import d from"./Layer.js";import{BlendLayer as c}from"./mixins/BlendLayer.js";import{CustomParametersMixin as u}from"./mixins/CustomParametersMixin.js";import{ImageryTileMixin as h}from"./mixins/ImageryTileMixin.js";import{OperationalLayer as f}from"./mixins/OperationalLayer.js";import{PortalLayer as y}from"./mixins/PortalLayer.js";import{RasterJobHandlerMixin as v}from"./mixins/RasterJobHandlerMixin.js";import{RefreshableLayer as g}from"./mixins/RefreshableLayer.js";import{ScaleRangeLayer as j}from"./mixins/ScaleRangeLayer.js";import{TemporalLayer as I}from"./mixins/TemporalLayer.js";import{legendEnabled as w,popupEnabled as O}from"./support/commonProperties.js";import b from"./support/Field.js";import{getServicePixelValueField as S,getMultidimensionalFields as x}from"./support/rasterFieldUtils.js";import P from"./support/rasterDatasets/WCSRaster.js";import{createPopupTemplate as R}from"../support/popupUtils.js";const C=new Set(["milliseconds","seconds","minutes","hours","days","weeks","months","years","decades","centuries"]);let T=class extends(c(j(f(y(u(h(v(I(g(s(t(d)))))))))))){constructor(...e){super(...e),this.coverageId=null,this.version=null,this.isReference=null,this.graphicOrigin=new m(this),this.legendEnabled=!0,this.noData=0,this.operationalLayerType="WCS",this.type="wcs",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this._debouncedSaveOperations=i(async(e,r,t)=>{const{save:o,saveAs:s}=await import("./save/imageryUtils.js");switch(e){case 0:return o(this,r);case 1:return s(this,t,r)}})}normalizeCtorArgs(e,r){return"string"==typeof e?{url:e,...r}:e}load(e){const r=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["WCS"]},e).catch(n).then(()=>this._openRaster(r))),Promise.resolve(this)}get renderer(){return super.renderer}set renderer(e){super.renderer=e}get coverageInfo(){return this.raster.coverageInfo}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){const e=[S("Pixel Value")],r=this.raster?.rasterInfo??this.serviceRasterInfo,t=r?.multidimensionalInfo;if(t){const r=x(t);e.push(...r)}return e}createPopupTemplate(e){return R({fields:this.rasterFields,title:this.title},e)}async save(e){return this._debouncedSaveOperations(0,e)}async saveAs(e,r){return this._debouncedSaveOperations(1,r,e)}async _openRaster(e){const r=new P({url:this.url,version:this.version,coverageId:this.coverageId,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters}});if(await r.open({signal:e}),!r.rasterInfo)throw r.destroy(),new o("wcs-layer:load","cannot load resources on "+this.url);const{rasterInfo:t}=r;null==t.noDataValue&&(t.noDataValue=this.noData),this._set("serviceRasterInfo",t),this._set("spatialReference",t.spatialReference),null==this.title&&this.setAtOrigin("title",r.datasetName,"service"),null==this.coverageId&&this.setAtOrigin("coverageId",r.coverageInfo.id,"service"),null==this.version&&r.version&&this.setAtOrigin("version",r.version,"service"),this.setAtOrigin("tileInfo",r.rasterInfo.storageInfo.tileInfo,"service");const{multidimensionalInfo:s}=t;if(null!=s){const e=s.variables[0].dimensions.find(({name:e})=>"StdTime"===e);if(e){let r=e.extent?.[0]??e.values[0];Array.isArray(r)&&(r=r[0]);let t=e.extent?.[1]??e.values[e.values.length-1];Array.isArray(t)&&(t=t[1]);const o=C.has(e.intervalUnit?.toLowerCase())?e.intervalUnit?.toLowerCase():null;this.set("timeInfo",{startField:"StdTime",fullTimeExtent:{start:r,end:t},timeZone:null,interval:o?{value:e.interval,unit:o}:null})}}this.raster=r,this._configDefaultSettings(),this.addHandles(a(()=>this.customParameters,e=>this.raster.ioConfig.customFetchParameters=e))}};e([p({type:String,nonNullable:!0,json:{name:"wcsInfo.coverageId",write:{isRequired:!0,ignoreOrigin:!0}}})],T.prototype,"coverageId",void 0),e([p()],T.prototype,"coverageInfo",null),e([p({type:["1.0.0","1.1.0","1.1.1","1.1.2","2.0.1"],nonNullable:!0,json:{name:"wcsInfo.version",write:{isRequired:!0,ignoreOrigin:!0}}})],T.prototype,"version",void 0),e([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],T.prototype,"isReference",void 0),e([p({json:{read:!0,write:!0}})],T.prototype,"blendMode",void 0),e([p({readOnly:!0,clonable:!1})],T.prototype,"graphicOrigin",void 0),e([p(w)],T.prototype,"legendEnabled",void 0),e([p({type:["show","hide"]})],T.prototype,"listMode",void 0),e([p()],T.prototype,"noData",void 0),e([p({type:["WCS"]})],T.prototype,"operationalLayerType",void 0),e([p()],T.prototype,"raster",void 0),e([p({readOnly:!0})],T.prototype,"type",void 0),e([p(O)],T.prototype,"popupEnabled",void 0),e([p({type:r,json:{name:"popupInfo",write:!0}})],T.prototype,"popupTemplate",void 0),e([p({readOnly:!0})],T.prototype,"defaultPopupTemplate",null),e([p({readOnly:!0,type:[b]})],T.prototype,"fields",void 0),e([p({readOnly:!0,type:[b]})],T.prototype,"rasterFields",null),T=e([l("esri.layers.WCSLayer")],T);const L=T;export{L as default};
