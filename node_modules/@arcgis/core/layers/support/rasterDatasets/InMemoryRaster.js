/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{__decorate as t}from"tslib";import e from"../../../core/Error.js";import{eachAlways as s}from"../../../core/promiseUtils.js";import{property as i}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/has.js";import"../../../core/Logger.js";import"../../../core/RandomLCG.js";import{subclass as r}from"../../../core/accessorSupport/decorators/subclass.js";import o from"../../../geometry/Extent.js";import a from"../../../geometry/SpatialReference.js";import l from"../DimensionalDefinition.js";import n from"../RasterInfo.js";import m from"./BaseRaster.js";import{getSliceIndex as p}from"./multidimensionalUtils.js";import{clipTile as c,split as u}from"../rasterFunctions/pixelUtils.js";import{estimateStatisticsHistograms as h,computeStatisticsHistograms as d}from"../rasterFunctions/stretchUtils.js";let f=class extends m{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.source=null}get url(){return""}fetchRawTile(t,e,s,i={}){if(!this._pixelBlockTiles){const{rasterInfo:r}=this,[o,a]=r.storageInfo.tileInfo.size,{sliceId:l}=i,{pixelBlocks:n}=this.source,m={pixelBlock:null==l?n[0]:n[l],useBilinear:"thematic"!==r.dataType,tileSize:{width:o,height:a},level:t,row:e,col:s},p=this.rasterJobHandler?this.rasterJobHandler.clipTile(m,i):c(m);return Promise.resolve(p)}const r=this._pixelBlockTiles.get(`${t}/${e}/${s}`);return Promise.resolve(r)}async _open(t){const e=this.source,{pixelBlocks:s,attributeTable:i,statistics:r,histograms:l,name:m,nativeExtent:p,transform:c,colormap:u}=e,h=s[0],{width:d,height:f,pixelType:g}=h,x=e.extent??new o({xmin:-.5,ymin:.5,xmax:d-.5,ymax:f-.5,spatialReference:new a({wkid:3857})}),y=e.isPseudoSpatialReference??!e.extent,b={x:x.width/d,y:x.height/f},I={...e.keyProperties};e.dataType&&(I.DataType=e.dataType),e.bandInfos&&(I.BandProperties=e.bandInfos.map(t=>t.toJSON())),i&&(I.DataType="Thematic");const v=new n({width:d,height:f,pixelType:g,extent:x,nativeExtent:p,attributeTable:i,colormap:u,transform:c,pixelSize:b,spatialReference:x.spatialReference,bandCount:h.pixels.length,keyProperties:I,multidimensionalInfo:e.multidimensionalInfo,statistics:r,isPseudoSpatialReference:y,histograms:l});this.ioConfig.skipMapInfo&&this.updateImageSpaceRasterInfo(v),this.createRemoteDatasetStorageInfo(v,512,512),this._set("rasterInfo",v),this.updateTileInfo(),v.multidimensionalInfo?await this._buildMDimStats(e.pixelBlocks,v.multidimensionalInfo):await this._buildInMemoryRaster(h,{width:512,height:512},t),v.multidimensionalInfo||(this.source=null),this.datasetName=m}async _buildInMemoryRaster(t,i,r){const{rasterInfo:o}=this,a=o.storageInfo.maximumPyramidLevel??0,l="thematic"!==o.dataType,n=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:t,tileSize:i,maximumPyramidLevel:a,useBilinear:l},r):Promise.resolve(u(t,i,a,l)),m=null!=o.statistics,p=null!=o.histograms,c=this.ioConfig.skipStatistics||m?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:t},r):Promise.resolve(h(t)),d=await s([n,c]);if(!d[0].value&&d[1].value)throw new e("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=d[0].value,m||(o.statistics=d[1].value?.statistics),p||(o.histograms=d[1].value?.histograms)}async _buildMDimStats(t,e,s){for(let i=0;i<e.variables.length;i++){const r=e.variables[i];if(r.statistics)continue;const o=r.dimensions.map(t=>new l({variableName:r.name,dimensionName:t.name,values:[t.values?.[0]??t.extent?.[0]],isSlice:!0})),a=p(o,e),n=null==a?null:t[a];if(null==n)continue;const m=this.rasterJobHandler?await this.rasterJobHandler.computeStatisticsHistograms({pixelBlock:n},s):d(n);r.statistics=m.statistics,r.histograms||(r.histograms=m.histograms)}}};t([i({type:String,json:{write:!0}})],f.prototype,"datasetFormat",void 0),t([i()],f.prototype,"source",void 0),t([i()],f.prototype,"url",null),f=t([r("esri.layers.support.rasterDatasets.InMemoryRaster")],f);const g=f;export{g as default};
