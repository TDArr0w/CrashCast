/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{idToReadableName as e,idToWritableName as r,writableNameToId as t}from"../../core/accessorSupport/PropertyOrigin.js";import{isFeatureServiceLayer as i}from"./layerUtils.js";const p=e=>"feature"===e.type&&!e.isTable,o={feature:{predicate:i,propertyGroups:[{id:"attribute-table-template",properties:["attributeTableTemplate"]},{id:"blend-mode",properties:["blendMode"],predicate:p},{id:"charts",properties:["charts"]},{id:"custom-parameters",properties:["customParameters"]},{id:"definition-expression",properties:["definitionExpression"]},{id:"display-filter",properties:["displayFilterInfo","displayFilterEnabled"],predicate:p},{id:"effect",properties:["effect","featureEffect"],predicate:p},{id:"feature-reduction",properties:["featureReduction"],predicate:p},{id:"floor-info",properties:["floorInfo"],predicate:p},{id:"form-template",properties:["formTemplate"]},{id:"labels",properties:["labelingInfo","labelsVisible"],predicate:p},{id:"legend-enabled",properties:["legendEnabled"],predicate:p},{id:"opacity",properties:["opacity"],predicate:p},{id:"order-by",properties:["orderBy"],predicate:p},{id:"popup",properties:["popupTemplate","popupEnabled"]},{id:"refresh-interval",properties:["refreshInterval"]},{id:"renderer",properties:["renderer"],predicate:p},{id:"scale-range",properties:["minScale","maxScale"],predicate:p},{id:"use-view-time",properties:["useViewTime"]}]}};function n(e){const r=o[e.type];return r?.propertyGroups.filter(r=>!r.predicate||r.predicate(e))??[]}function s(e){const r=n(e),t=[];for(const i of r)t.push(...i.properties);return t}function d(e,r,t){return e.originIdOf(r)<t?"source":"overridden"}function a(e,r,i){const p=t(i),{id:o,properties:n}=r,s=n.map(r=>d(e,r,p)).reduce((e,r)=>e===r?e:"overridden");return{id:o,properties:[...n],status:s}}function c(r,i,p){const o=t(p);r.revert(i,e(o-1))}function f(e,i,p){const o=t(p),n=e,s=n.originIdOf(i);s<o&&1!==s&&n.updateOrigin(i,r(o))}function u(e){const r=o[e.type];return!(!r||r.predicate&&!r.predicate(e))}function l(e,r){if(!u(e))return;const t=n(e).map(t=>a(e,t,r));return{propertyGroupOriginInfos:t,status:t.map(e=>e.status).reduce((e,r)=>e===r?e:"mixed")}}function m(e,r){if(!u(e))return;const t=s(e);for(const i of t)c(e,i,r)}function b(e,r){if(!u(e))return;const t=s(e);for(const i of t)f(e,i,r)}export{m as clearOverrides,b as disconnectFromSource,l as getLayerOriginInfo,u as isSupportedLayer};
