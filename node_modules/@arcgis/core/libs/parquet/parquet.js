/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import e from"../../request.js";import t from"../../core/Error.js";import"../../core/has.js";import{QueueProcessor as r}from"../../core/QueueProcessor.js";import{isBlobProtocol as n}from"../../core/urlUtils.js";import{loadParquetModule as o}from"./loadParquetModule.js";import{MultiscaleGeometryField as a,GeometryInfo as s,GeometryType as i,PrimaryGeometryField as u}from"../../chunks/bundle.js";const c=new r({concurrency:8,process:async t=>{const{data:r}=await e(t.url,t.options);return r}}),l=e=>async function(t,r,n,o){const a=e?.(),s=a??{};return await c.push({url:t,options:{responseType:"array-buffer",query:s,headers:{range:`bytes=${r}-${n}`}}})},m=t=>async function(r){if(n(r)){const{data:t}=await e(r,{responseType:"blob"});return t.size}const{data:o}=await e(r,{responseType:"native",method:"head",query:t?.()}),a=o.headers.get("Content-Length");if(null==a)throw new Error("Unable to parse content length");return parseInt(a,10)};function p(e){switch(e){case"esriGeometryPoint":return i.Point;case"esriGeometryPolygon":return i.Polygon;case"esriGeometryPolyline":return i.Polyline;case"esriGeometryMultipoint":return i.Multipoint;default:throw new t("parquet",`Found unexpected GeometryType: ${e}`)}}function f(e){switch(e.encoding.type){case"wkb":return u.fromWkb(e.encoding.primaryFieldName);case"location":{const{latitudeFieldName:t,longitudeFieldName:r}=e.encoding;return u.fromLocation(t,r)}}}function y(e,r){const n=e.spatialReference.wkid,o=r.wkid;if(!n||!o)throw new t("parquet","Unable to create ParquetFile, in and out wkid must be specified");const i=p(e.geometryType),u=f(e),c=[];if("xz"===e.displayOptimization?.mode){const t=e.displayOptimization.multiscale;for(const e of t.levels??[]){const[t,r]=e.transform.translate,[n,o]=e.transform.scale,s=new Float64Array([t,r]),i=new Float64Array([n,o]);c.push(a.new(e.level,e.column,s,i))}}return s.new(i,n,o,u,c)}async function d(e,t={}){const{ParquetFile:r}=await o(),n=l(t.getCustomParameters),a=m(t.getCustomParameters),s=t.geometryInfo?y(t.geometryInfo,t.outSpatialReference??t.geometryInfo.spatialReference):null;return r.fromUrl(e,n,a,s)}function w(e){const t=e.keyValueMetadata("geo");return null!=t?JSON.parse(t):null}function g(e){const t=e.keyValueMetadata("esri");return null!=t?JSON.parse(t):null}export{d as createParquetFile,g as readEsriMetadata,w as readGeoMetadata};
