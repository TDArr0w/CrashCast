/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{__decorate as e}from"tslib";import{lerp as t,clamp as r,smoothstep as s}from"../../../../../core/mathUtils.js";import{disposeMaybe as i}from"../../../../../core/maybe.js";import{watch as o,syncAndInitial as a}from"../../../../../core/reactiveUtils.js";import"../../../../../core/Logger.js";import"../../../../../core/has.js";import"../../../../../core/RandomLCG.js";import"../../../../../core/Error.js";import{subclass as n}from"../../../../../core/accessorSupport/decorators/subclass.js";import{set as m}from"../../../../../core/libs/gl-matrix-2/math/vec2.js";import{b as h,m as p}from"../../../../../chunks/vec32.js";import{s as c}from"../../../../../chunks/vec42.js";import{earth as d}from"../../../../../geometry/support/Ellipsoid.js";import{InternalRenderCategory as u}from"../../../webgl.js";import{TransparentEnvironment as f}from"../TransparentEnvironment.js";import{H as l}from"../../../../../chunks/HazeCompositing.glsl.js";import{HazeCompositingTechnique as _}from"./HazeCompositingTechnique.js";import{HazePassParameters as g,HazeTechnique as b}from"./HazeTechnique.js";import{HazeTechniqueConfiguration as w}from"./HazeTechniqueConfiguration.js";import{createQuadVAO as P}from"../../lib/glUtil3D.js";import{applyTextureResizeModulo as j}from"../../lib/textureUtils.js";import{DepthStencilAttachment as v,PrimitiveType as A}from"../../../../webgl/enums.js";let C=class extends f{constructor(e){super(e),this._compositingPassParameters=new l,this._passParameters=new g,this._hazeConfiguration=new w,this.requireGeometryDepth=!0,this._oldAmount=1,this._newAmount=1,this._amount=this._newAmount;const t=e.view.stage.renderView.techniques;t.precompile(b,new w);const r=new w;r.reduced=!0,t.precompile(b,r),t.precompile(_)}initialize(){this.addHandles([o(()=>this.view.environment.atmosphereEnabled,e=>e?this._enable():this._disable(),a),o(()=>this.view.stage?.renderer.renderContext.bind.clouds.fadeFactor??1,e=>this._fade(e),a),o(()=>this.view.environment.weather.type,e=>this._newAmount="rainy"===e?0:1,a),o(()=>this.view.stage.renderer?.fullResolutionAtmosphere,e=>this._hazeConfiguration.reduced=!e,a)])}_fade(e){e>=1?(this._amount=this._newAmount,this._oldAmount=this._newAmount):this._amount=e<=0?this._oldAmount:t(this._oldAmount,this._newAmount,e)}destroy(){this._vao=i(this._vao)}render(e){const r=e.find(({name:e})=>e===u.TRANSPARENT_ENVIRONMENT);if(!this.bindParameters.mainDepth)return r;const s=this.renderingContext,i=this.techniques.get(b,this._hazeConfiguration);if(!i.compiled)return r;const o=r.getAttachment(v);if(this._update(),!this._hazeConfiguration.reduced)return r.detachDepth(),s.bindFramebuffer(r.fbo),s.bindTechnique(i,this.bindParameters,this._passParameters),this._renderCommon(s),r.attachDepth(o),r;const a=this.techniques.get(_);if(!a.compiled)return r;const n=s.getViewport(),m=this.camera,p=h(m.eye)-d.radius;let c;const f=d.atmosphereHeight;if(p<f){const e=Math.min(1,Math.max(0,p/f));c=t(.4,.5,e)}else{const e=Math.min(1,Math.max(0,(p-f)/(15*f)));c=t(.5,1,e)}const l=this.renderingContext.parameters.maxTextureSize,g=j(Math.round(c*m.fullViewport[2]),l),w=j(Math.round(c*m.fullViewport[3]),l);s.setViewport(0,0,g,w);const P=this.fboCache.acquire(g,w,"haze",5);return s.bindFramebuffer(P.fbo),s.clearFramebuffer([0,0,0,1],!0,!0),s.bindTechnique(i,this.bindParameters,this._passParameters),this._renderCommon(s),s.setViewport(n.x,n.y,n.width,n.height),this._compositingPassParameters.color=P.getTexture(),r.detachDepth(),s.bindFramebuffer(r.fbo),s.bindTechnique(a,this.bindParameters,this._compositingPassParameters),s.screen.draw(),r.attachDepth(o),P.release(),r}_renderCommon(e){this._vao??=P(e,1),e.bindVAO(this._vao),e.drawArrays(A.TRIANGLE_STRIP,0,4)}_update(){const e=this.bindParameters.camera,i=p(e.eye),o=Math.sqrt(i),a=i-this._passParameters.radii[1]*this._passParameters.radii[1],n=r((o-this._passParameters.radii[0])/d.atmosphereHeight,0,1);c(this._passParameters.heightParameters,o,i,a,n);const h=this.view.basemapTerrain?.getLowerBoundRadius()??0;m(this._passParameters.radii,h,h+d.atmosphereHeight),this._passParameters.hazeStrength=t(t(.6,1,s(9500,10500,o-d.radius)),1,this._amount)}};C=e([n("esri.views.3d.webgl-engine.effects.haze.Haze")],C);export{C as Haze};
