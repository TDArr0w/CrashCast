/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{ProceduralTextureRepository as t}from"./ProceduralTextureRepository.js";import{PixelType as e,SizedPixelFormat as r}from"../../../webgl/enums.js";import{Texture as o}from"../../../webgl/Texture.js";import{TextureDescriptor as n}from"../../../webgl/TextureDescriptor.js";function i(i,u){return new t(t=>{const{data:u,textureSize:l}=a(t),p=new n(l,1);return p.dataType=e.FLOAT,p.pixelFormat=6403,p.internalFormat=r.R16F,p.wrapMode=10497,new o(i,p,u)},t=>`${t.pattern.join(",")}-r${t.pixelRatio}`,u)}function a(t){const e=u(t),r=1/t.pixelRatio,o=l(t),n=[];let i=1;for(const u of e){for(let t=0;t<u;t++){const e=i*(Math.min(t,u-1-t)+.5)*r;n.push(e)}i=-i}const a=Math.round(e[0]/2);return{data:new Float32Array([...n.slice(a),...n.slice(0,a)]),textureSize:o}}function u(t){return t.pattern.map(e=>Math.round(e*t.pixelRatio))}function l(t){if(null==t)return 1;const e=u(t);return Math.floor(e.reduce((t,e)=>t+e))}export{l as computeTextureSize,i as createStippleTextureRepository};
