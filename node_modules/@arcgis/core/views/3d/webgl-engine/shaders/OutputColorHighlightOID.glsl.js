/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{isColorOrColorEmission as o,isColorEmission as r}from"../core/shaderLibrary/ShaderOutput.js";import{Emissions as l}from"../core/shaderLibrary/output/Emissions.glsl.js";import{OutputHighlight as i}from"../core/shaderLibrary/output/OutputHighlight.glsl.js";import{ColorConversion as s}from"../core/shaderLibrary/util/ColorConversion.glsl.js";import{If as a,glsl as t}from"../core/shaderModules/glsl.js";import{alphaCutoff as e}from"../../../../webscene/support/AlphaCutoff.js";function n(n,u){n.include(i,u),n.include(l,u),n.fragment.include(s);const{output:f,oitPass:d,discardInvisibleFragments:m,snowCover:p}=u,c=10===f,g=r(f),C=o(f)&&1===d,h=o(f)&&1!==d;let v=0;(h||g||C)&&n.outputs.add("fragColor","vec4",v++),g&&n.outputs.add("fragEmission","vec4",v++),C&&n.outputs.add("fragAlpha","float",v++),n.fragment.code.add(t`
    void outputColorHighlightOID(vec4 finalColor, const in vec3 vWorldPosition, vec3 emissiveSymbolColor ${a(p,", float snow")}) {
      ${a(c,"finalColor.a = 1.0;")}

      ${a(m,`if (finalColor.a < ${t.float(e)}) { discard; }`)}

      finalColor = applySlice(finalColor, vWorldPosition);
      ${a(C,t`fragColor = premultiplyAlpha(finalColor);
             fragAlpha = finalColor.a;`)}
      ${a(h,"fragColor = finalColor;")}
      ${a(g,`fragEmission = ${a(p,"mix(finalColor.a * getEmissions(emissiveSymbolColor), vec4(0.0), snow);","finalColor.a * getEmissions(emissiveSymbolColor);")}`)}
      calculateOcclusionAndOutputHighlight();
      ${a(c,"outputObjectAndLayerIdColor();")}
    }
  `)}export{n as outputColorHighlightOID};
