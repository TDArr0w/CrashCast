/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import t from"../../../../core/ObjectPool.js";import e from"../../../../core/PooledArray.js";import{l as n,s as o,h as i,g as s}from"../../../../chunks/vec32.js";import{create as r,fromValues as h}from"../../../../core/libs/gl-matrix-2/factories/vec3f64.js";import{intersectsSphere as a}from"../../../../geometry/support/frustum.js";import{wrap as l}from"../../../../geometry/support/ray.js";import{m as d,g as u,n as c,w as f,c as m,x as _,o as p,a as b}from"../../../../chunks/sphere.js";import{rayBoxTest as g}from"./Util.js";class S{get bounds(){return this._root.bounds}get halfSize(){return this._root.halfSize}get root(){return this._root.node}get maximumObjectsPerNode(){return this._maximumObjectsPerNode}get maximumDepth(){return this._maximumDepth}get objectCount(){return this._objectCount}constructor(t,e){this.objectToBoundingSphere=t,this._maximumObjectsPerNode=10,this._maximumDepth=20,this._degenerateObjects=new Set,this._root=new j,this._objectCount=0,e&&(void 0!==e.maximumObjectsPerNode&&(this._maximumObjectsPerNode=e.maximumObjectsPerNode),void 0!==e.maximumDepth&&(this._maximumDepth=e.maximumDepth))}destroy(){this._degenerateObjects.clear(),j.clearPool(),C[0]=null,V.prune(),Y.prune()}add(t){const e=Array.from(t);this._grow(e);const n=j.acquire();for(const o of e)++this._objectCount,this._isDegenerate(o)?this._degenerateObjects.add(o):(n.init(this._root),this._add(o,n));j.release(n)}remove(t,e=null){this._objectCount-=t.length;const n=j.acquire();for(const o of t){const t=e??d(this.objectToBoundingSphere(o),G);F(t[3])?(n.init(this._root),z(o,t,n)):this._degenerateObjects.delete(o)}j.release(n),this._shrink()}update(t,e){if(!F(e[3])&&this._isDegenerate(t))return;const n=I(t);this.remove(n,e),this.add(n)}forEachAlongRay(t,e,n){const o=l(t,e);x(this._root,t=>{if(!N(o,t))return!1;const e=t.node;return e.terminals.forAll(t=>{this._intersectsObject(o,t)&&n(t)}),null!==e.residents&&e.residents.forAll(t=>{this._intersectsObject(o,t)&&n(t)}),!0})}forEachAlongRayWithVerticalOffset(t,e,n,o){const i=l(t,e);x(this._root,t=>{if(!T(i,t,o))return!1;const e=t.node;return e.terminals.forAll(t=>{this._intersectsObjectWithOffset(i,t,o)&&n(t)}),null!==e.residents&&e.residents.forAll(t=>{this._intersectsObjectWithOffset(i,t,o)&&n(t)}),!0})}forEach(t){x(this._root,e=>{const n=e.node;return n.terminals.forAll(t),null!==n.residents&&n.residents.forAll(t),!0}),this._degenerateObjects.forEach(t)}forEachDegenerateObject(t){this._degenerateObjects.forEach(t)}findClosest(t,e,n,o=()=>!0,r=1/0){let h=1/0,l=1/0,d=null;const u=P(t,e),c=i=>{if(--r,!o(i))return;const s=this.objectToBoundingSphere(i);if(!a(n,s))return;const u=R(t,e,b(s)),c=u-s[3],f=u+s[3];c<h&&(h=c,l=f,d=i)};return O(this._root,o=>{if(r<=0||!a(n,o.bounds))return!1;i(H,u,o.halfSize),s(H,H,b(o.bounds));if(R(t,e,H)>l)return!1;const h=o.node;return h.terminals.forAll(t=>c(t)),null!==h.residents&&h.residents.forAll(t=>c(t)),!0},t,e),d}forEachInDepthRange(t,e,n,o,r,h,l){let d=-1/0,u=1/0;const c={setRange:t=>{1===n?(d=Math.max(d,t.near),u=Math.min(u,t.far)):(d=Math.max(d,-t.far),u=Math.min(u,-t.near))}};c.setRange(o);const f=R(e,n,t),m=P(e,n),_=P(e,-n),p=t=>{if(!l(t))return;const o=this.objectToBoundingSphere(t),i=R(e,n,b(o))-f,s=i-o[3],m=i+o[3];s>u||m<d||!a(h,o)||r(t,c)};O(this._root,t=>{if(!a(h,t.bounds))return!1;i(H,m,t.halfSize),s(H,H,b(t.bounds));if(R(e,n,H)-f>u)return!1;i(H,_,t.halfSize),s(H,H,b(t.bounds));if(R(e,n,H)-f<d)return!1;const o=t.node;return o.terminals.forAll(t=>p(t)),null!==o.residents&&o.residents.forAll(t=>p(t)),!0},e,n)}forEachNode(t){x(this._root,e=>t(e.node,e.bounds,e.halfSize,e.depth))}forEachNeighbor(t,e){const n=u(e),i=c(e,r()),s=e=>{const s=this.objectToBoundingSphere(e),r=u(s),h=n+r;return!(o(b(s),i)-h*h<=0)||t(e)};let h=!0;const a=t=>{h&&(h=s(t))};x(this._root,t=>{const e=u(t.bounds),s=n+e;if(o(b(t.bounds),i)-s*s>0)return!1;const r=t.node;return r.terminals.forAll(a),h&&null!==r.residents&&r.residents.forAll(a),h}),h&&this.forEachDegenerateObject(a)}_intersectsObject(t,e){const n=this.objectToBoundingSphere(e);return!(n[3]>0)||f(n,t)}_intersectsObjectWithOffset(t,e,n){const o=this.objectToBoundingSphere(e);return!(o[3]>0)||f(n.applyToBoundingSphere(o),t)}_add(t,e){e.advanceTo(this.objectToBoundingSphere(t))?e.node.terminals.push(t):(e.node.residents.push(t),e.node.residents.length>this._maximumObjectsPerNode&&e.depth<this._maximumDepth&&this._split(e))}_split(t){const e=t.node.residents;t.node.residents=null;for(let n=0;n<e.length;n++){const o=j.acquire().init(t);this._add(e.at(n),o),j.release(o)}}_grow(t){if(w(t,t=>this.objectToBoundingSphere(t),U),F(U[3])&&!this._fitsInsideTree(U))if(D(this._root.node))d(U,this._root.bounds),this._root.halfSize=1.25*this._root.bounds[3],this._root.updateBoundsRadiusFromHalfSize();else{const t=this._rootBoundsForRootAsSubNode(U);this._placingRootViolatesMaxDepth(t)?this._rebuildTree(U,t):this._growRootAsSubNode(t),j.release(t)}}_rebuildTree(t,e){_(K,e.bounds),K[3]=e.halfSize,w([t,K],t=>t,Q);const n=j.acquire().init(this._root);this._root.initFrom(null,Q,Q[3]),this._root.increaseHalfSize(1.25),x(n,t=>(this.add(t.node.terminals.data),null!==t.node.residents&&this.add(t.node.residents.data),!0)),j.release(n)}_placingRootViolatesMaxDepth(t){const e=Math.log(t.halfSize/this._root.halfSize)*Math.LOG2E;let n=0;return x(this._root,t=>(n=Math.max(n,t.depth),n+e<=this._maximumDepth)),n+e>this._maximumDepth}_rootBoundsForRootAsSubNode(t){const e=t[3],n=t;let o=-1/0;const i=this._root.bounds,s=this._root.halfSize;for(let h=0;h<3;h++){const t=i[h]-s-(n[h]-e),r=n[h]+e-(i[h]+s),a=Math.max(0,Math.ceil(t/(2*s))),l=Math.max(0,Math.ceil(r/(2*s)))+1,d=2**Math.ceil(Math.log(a+l)*Math.LOG2E);o=Math.max(o,d),X[h].min=a,X[h].max=l}for(let h=0;h<3;h++){let t=X[h].min,e=X[h].max;const n=(o-(t+e))/2;t+=Math.ceil(n),e+=Math.floor(n);const r=i[h]-s-t*s*2;L[h]=r+(e+t)*s}const r=o*s;return L[3]=r*k,j.acquire().initFrom(null,L,r,0)}_growRootAsSubNode(t){const e=this._root.node;_(U,this._root.bounds),U[3]=this._root.halfSize,this._root.init(t),t.advanceTo(U,null,!0),t.node.children=e.children,t.node.residents=e.residents,t.node.terminals=e.terminals}_shrink(){for(;;){const t=this._findShrinkIndex();if(-1===t)break;this._root.advance(t),this._root.depth=0}}_findShrinkIndex(){if(0!==this._root.node.terminals.length||this._root.isLeaf())return-1;let t=null;const e=this._root.node.children;let n=0,o=0;for(;o<e.length&&null==t;)n=o++,t=e[n];for(;o<e.length;)if(e[o++])return-1;return n}_isDegenerate(t){return!F(this.objectToBoundingSphere(t)[3])}_fitsInsideTree(t){const e=this._root.bounds,n=this._root.halfSize;return t[3]<=n&&t[0]>=e[0]-n&&t[0]<=e[0]+n&&t[1]>=e[1]-n&&t[1]<=e[1]+n&&t[2]>=e[2]-n&&t[2]<=e[2]+n}toJSON(){const{maximumDepth:t,maximumObjectsPerNode:e,_objectCount:n}=this,o=this._nodeToJSON(this._root.node);return{maximumDepth:t,maximumObjectsPerNode:e,objectCount:n,root:{bounds:this._root.bounds,halfSize:this._root.halfSize,depth:this._root.depth,node:o}}}_nodeToJSON(t){const e=t.children.map(t=>t?this._nodeToJSON(t):null),n=t.residents?.map(t=>this.objectToBoundingSphere(t)),o=t.terminals?.map(t=>this.objectToBoundingSphere(t));return{children:e,residents:n,terminals:o}}static fromJSON(t){const e=new S(t=>t,{maximumDepth:t.maximumDepth,maximumObjectsPerNode:t.maximumObjectsPerNode});return e._objectCount=t.objectCount,e._root.initFrom(t.root.node,t.root.bounds,t.root.halfSize,t.root.depth),e}}class j{constructor(){this.bounds=m(),this.halfSize=0,this.initFrom(null,null,0,0)}init(t){return this.initFrom(t.node,t.bounds,t.halfSize,t.depth)}initFrom(t,e,n,o=this.depth){return this.node=null!=t?t:j.createEmptyNode(),e&&d(e,this.bounds),this.halfSize=n,this.depth=o,this}increaseHalfSize(t){this.halfSize*=t,this.updateBoundsRadiusFromHalfSize()}updateBoundsRadiusFromHalfSize(){this.bounds[3]=this.halfSize*k}advance(t){let e=this.node.children[t];e||(e=j.createEmptyNode(),this.node.children[t]=e),this.node=e,this.halfSize/=2,this.depth++;const n=y[t];return this.bounds[0]+=n[0]*this.halfSize,this.bounds[1]+=n[1]*this.halfSize,this.bounds[2]+=n[2]*this.halfSize,this.updateBoundsRadiusFromHalfSize(),this}advanceTo(t,e,n=!1){for(;;){if(this.isTerminalFor(t))return e?.(this,-1),!0;if(this.isLeaf()){if(!n)return e?.(this,-1),!1;this.node.residents=null}const o=this._childIndex(t);e?.(this,o),this.advance(o)}}isLeaf(){return null!=this.node.residents}isTerminalFor(t){return t[3]>this.halfSize/2}_childIndex(t){const e=this.bounds;return(e[0]<t[0]?1:0)+(e[1]<t[1]?2:0)+(e[2]<t[2]?4:0)}static createEmptyNode(){return{children:[null,null,null,null,null,null,null,null],terminals:new e({shrink:!0}),residents:new e({shrink:!0})}}static{this._pool=new t(()=>new j)}static acquire(){return j._pool.acquire()}static release(t){j._pool.release(t)}static clearPool(){j._pool.prune()}}function x(t,e){let n=j.acquire().init(t);const o=[n];for(;0!==o.length;){if(n=o.pop(),e(n)&&!n.isLeaf())for(let t=0;t<n.node.children.length;t++){n.node.children[t]&&o.push(j.acquire().init(n).advance(t))}j.release(n)}}function O(t,e,n,o=1){let i=j.acquire().init(t);const s=[i];for(E(n,o,Z);0!==s.length;){if(i=s.pop(),e(i)&&!i.isLeaf())for(let t=7;t>=0;--t){const e=Z[t];i.node.children[e]&&s.push(j.acquire().init(i).advance(e))}j.release(i)}}function z(t,e,n){V.clear();const o=n.advanceTo(e,(t,e)=>{V.push(t.node),V.push(e)})?n.node.terminals:n.node.residents;if(o.removeUnordered(t),0===o.length)for(let i=V.length-2;i>=0;i-=2){if(!M(V.data[i],V.data[i+1]))break}}function M(t,n){return n>=0&&(t.children[n]=null),!!D(t)&&(null===t.residents&&(t.residents=new e({shrink:!0})),!0)}function N(t,e){return v(b(e.bounds),2*-e.halfSize,J),v(b(e.bounds),2*e.halfSize,W),g(t.origin,t.direction,J,W)}function T(t,e,n){return v(b(e.bounds),2*-e.halfSize,J),v(b(e.bounds),2*e.halfSize,W),n.applyToMinMax(J,W),g(t.origin,t.direction,J,W)}function D(t){if(0!==t.terminals.length)return!1;if(null!==t.residents)return 0===t.residents.length;for(let e=0;e<t.children.length;e++)if(t.children[e])return!1;return!0}function A(t,e){t[0]=Math.min(t[0],e[0]-e[3]),t[1]=Math.min(t[1],e[1]-e[3]),t[2]=Math.min(t[2],e[2]-e[3])}function B(t,e){t[0]=Math.max(t[0],e[0]+e[3]),t[1]=Math.max(t[1],e[1]+e[3]),t[2]=Math.max(t[2],e[2]+e[3])}function v(t,e,n){n[0]=t[0]+e,n[1]=t[1]+e,n[2]=t[2]+e}function w(t,e,o){J[0]=1/0,J[1]=1/0,J[2]=1/0,W[0]=-1/0,W[1]=-1/0,W[2]=-1/0;for(const n of t){const t=e(n);F(t[3])&&(A(J,t),B(W,t))}p(o,n($,J,W,.5)),o[3]=Math.max(W[0]-J[0],W[1]-J[1],W[2]-J[2])/2}function E(t,e,n){if(!Y.length)for(let o=0;o<8;++o)Y.push({index:0,distance:0});for(let o=0;o<8;++o){const n=y[o];Y.data[o].index=o,Y.data[o].distance=R(t,e,n)}Y.sort((t,e)=>t.distance-e.distance);for(let o=0;o<8;++o)n[o]=Y.data[o].index}function P(t,e){let n,o=1/0;for(let i=0;i<8;++i){const s=R(t,e,q[i]);s<o&&(o=s,n=q[i])}return n}function R(t,e,n){return e*(t[0]*n[0]+t[1]*n[1]+t[2]*n[2])}function F(t){return!isNaN(t)&&t!==-1/0&&t!==1/0&&t>0}const y=[h(-1,-1,-1),h(1,-1,-1),h(-1,1,-1),h(1,1,-1),h(-1,-1,1),h(1,-1,1),h(-1,1,1),h(1,1,1)],q=[h(-1,-1,-1),h(-1,-1,1),h(-1,1,-1),h(-1,1,1),h(1,-1,-1),h(1,-1,1),h(1,1,-1),h(1,1,1)],k=Math.sqrt(3),C=[null];function I(t){return C[0]=t,C}const L=m(),H=r(),J=r(),W=r(),V=new e,G=m(),U=m(),K=m(),Q=m(),X=[{min:0,max:0},{min:0,max:0},{min:0,max:0}],Y=new e,Z=[0,0,0,0,0,0,0,0],$=r();export{S as Octree};
