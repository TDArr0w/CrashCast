/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import e from"../../../../../core/Logger.js";import{disposeMaybe as r}from"../../../../../core/maybe.js";import{isDepthOrShadowLikeOutput as i}from"../shaderLibrary/ShaderOutput.js";import{Program as t}from"../../lib/Program.js";import{PrimitiveType as o,DrawBufferNone as s}from"../../../../webgl/enums.js";import{makePipelineState as n,defaultColorWrite as a,premultipliedAlpha as p}from"../../../../webgl/renderState.js";const l=()=>e.getLogger("esri.views.3d.webgl.ShaderTechnique");class m{constructor(e,i,s,n){this.primitiveType=o.TRIANGLES,this.key=i.key,this._program=new t(e.rctx,s.get().build(i),n),this._pipeline=this.initializePipeline(i),this.reload=async o=>{o&&await s.reload(),this.key.equals(i.key)||l().warn("Configuration was changed after construction, cannot reload shader.",s),r(this._program),this._program=new t(e.rctx,s.get().build(i),n),this._pipeline=this.initializePipeline(i)}}destroy(){this._program=r(this._program),this._pipeline=null}get program(){return this._program}get compiled(){return this.program.compiled}ensureAttributeLocations(e){this.program.assertCompatibleVertexAttributeLocations(e)}getPipeline(e,r){return this._pipeline}initializePipeline(e){return n({blending:p,colorWrite:a})}}function g(e,r){return i(e)?{buffers:[s]}:r??null}export{m as ShaderTechnique,g as depthOnlyOutputBuffersOr};
