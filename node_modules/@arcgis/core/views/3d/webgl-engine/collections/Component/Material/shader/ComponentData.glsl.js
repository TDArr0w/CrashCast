/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{neverReached as o}from"../../../../../../../core/compilerUtils.js";import{packFloatRGBA as e,packFloatRGB as t}from"../../../../../../../core/floatRGBA.js";import{DecodeSymbolColor as r}from"./DecodeSymbolColor.glsl.js";import{RgbaFloatEncoding as n}from"../../../../core/shaderLibrary/util/RgbaFloatEncoding.glsl.js";import{Float4DrawUniform as d}from"../../../../core/shaderModules/Float4DrawUniform.js";import{FloatDrawUniform as a}from"../../../../core/shaderModules/FloatDrawUniform.js";import{glsl as l,If as i}from"../../../../core/shaderModules/glsl.js";import{IntegerDrawUniform as c}from"../../../../core/shaderModules/IntegerDrawUniform.js";import{Texture2DDrawUniform as s}from"../../../../core/shaderModules/Texture2DDrawUniform.js";import{olidEnabled as m}from"../../../../effects/geometry/olidUtils.js";const x=429496.7296;function C(o,t){e(o/x*.5+.5,t)}const u=1e6;function v(o,e){t(o/u*.5+.5,e)}function f(){return 3+(m()?1:0)}function p(e,t){switch(t.componentData){case 1:return g(e,t);case 0:return M(e,t);case 2:return;default:o(t.componentData)}}function g(o,e){const{vertex:t,fragment:d}=o;t.include(n),t.uniforms.add(new s("componentColorTex",o=>o.componentParameters.texture.texture)),o.attributes.add("componentIndex","float"),o.varyings.add("vExternalColorMixMode","mediump float"),o.varyings.add("vExternalColor","vec4");const{output:a}=e,c=10===a;c&&o.varyings.add("vObjectAndLayerIdColor","vec4");const m=1===a;m&&(o.varyings.add("emissiveStrength","float"),o.varyings.add("emissiveSource","int")),o.include(r),t.constants.add("stride","float",f()),t.code.add(l`vec2 getComponentTextureCoordinates(float componentIndex, float typeOffset) {
float index = componentIndex * stride + typeOffset;
float texSize = float(textureSize(componentColorTex, 0).x);
float coordX = mod(index, texSize);
float coordY = floor(index / texSize);
return vec2(coordX, coordY) + 0.5;
}`),t.code.add(l`
  vec4 _readComponentColor() {
    vec2 textureCoordinates = getComponentTextureCoordinates(componentIndex, 0.0);
    return texelFetch(componentColorTex, ivec2(textureCoordinates), 0);
   }

  float readElevationOffset() {
    vec2 textureCoordinates = getComponentTextureCoordinates(componentIndex, 1.0);
    vec4 encodedElevation = texelFetch(componentColorTex, ivec2(textureCoordinates), 0);
    return uninterpolatedRGBAToFloat(encodedElevation) * ${l.float(x)};
  }

  void forwardEmissiveStrength() {
    ${i(m,l`vec2 textureCoordinates = getComponentTextureCoordinates(componentIndex, 2.0);
           vec4 encodedEmissive = texelFetch(componentColorTex, ivec2(textureCoordinates), 0);
           emissiveStrength = uninterpolatedRGBToFloat(encodedEmissive.rgb) * ${l.float(u)};
           emissiveSource = encodedEmissive.a == 0.0 ? 0 : 1;`)}
  }

  void forwardObjectAndLayerIdColor() {
    ${i(c,l`vec2 textureCoordinates = getComponentTextureCoordinates(componentIndex, 3.0);
           vObjectAndLayerIdColor = texelFetch(componentColorTex, ivec2(textureCoordinates), 0);`)}
  }

  vec4 forwardExternalColor(out bool castShadows) {
    vec4 componentColor = _readComponentColor() * 255.0;

    float shadowFlag = mod(componentColor.b * 255.0, 2.0);
    componentColor.b -= shadowFlag;
    castShadows = shadowFlag >= 1.0;

    int decodedColorMixMode;
    vExternalColor = decodeSymbolColor(componentColor, decodedColorMixMode) * 0.003921568627451; // = 1/255;
    vExternalColorMixMode = float(decodedColorMixMode) + 0.5; // add 0.5 to avoid interpolation artifacts

    return vExternalColor;
  }
`),d.code.add(l`
  void readExternalColor(out vec4 externalColor, out int externalColorMixMode) {
    externalColor = vExternalColor;
    externalColorMixMode = int(vExternalColorMixMode);
  }

  void outputObjectAndLayerIdColor() {
     ${c?l`fragColor = vObjectAndLayerIdColor;`:""}
  }
`)}function M(o,e){const{vertex:t,fragment:r}=o;o.varyings.add("vExternalColor","vec4"),r.uniforms.add(new a("emissiveStrength",o=>o.componentParameters.emissiveStrength)),t.uniforms.add(new d("externalColor",o=>o.componentParameters.externalColor)).code.add(l`float readElevationOffset() {
return 0.0;
}
void forwardObjectAndLayerIdColor() {}
void forwardEmissiveStrength() {}
vec4 forwardExternalColor(out bool castShadows) {
vExternalColor = externalColor;
castShadows = true;
return externalColor;
}`);const n=10===e.output;r.uniforms.add(new c("externalColorMixMode",o=>o.componentParameters.externalColorMixMode)).code.add(l`
    void readExternalColor(out vec4 color, out int colorMixMode) {
      color = vExternalColor;
      colorMixMode = externalColorMixMode;
    }

    void outputObjectAndLayerIdColor() {
      ${i(n,"fragColor = vec4(0, 0, 0, 0);")}
    }
  `)}export{p as ComponentData,C as encodeElevationOffset,v as encodeEmissiveStrength,f as getComponentFieldCount,x as maxElevationOffset,u as maxPackedRGBEmission};
