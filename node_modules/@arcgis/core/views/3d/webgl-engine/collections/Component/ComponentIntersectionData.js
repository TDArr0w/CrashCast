/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{clamp as t}from"../../../../../core/mathUtils.js";import{create as i}from"../../../../../core/libs/gl-matrix-2/factories/vec3f64.js";import{fromValues as e}from"../../../../../geometry/support/aaBoundingBox.js";import{MeshIntersectionOptions as n,intersectRayTriangles as s}from"../../lib/RayIntersections.js";const r=200,a=40,o=.8,c=10,h=1e-6;function l(t,i,e){const n=i,s=e;let r=0,a=1/0;for(let o=0;o<3;++o){{const i=t[o];if(n[o]<i){if(s[o]<=h)return!1;const t=(i-n[o])/s[o];r=Math.max(r,t)}else if(s[o]<=-h){const t=(i-n[o])/s[o];a=Math.min(a,t)}if(r>a)return!1}{const i=t[o+3];if(n[o]>i){if(s[o]>=-h)return!1;const t=(i-n[o])/s[o];r=Math.max(r,t)}else if(s[o]>=h){const t=(i-n[o])/s[o];a=Math.min(a,t)}if(r>a)return!1}}return!0}class d{constructor(t,i,e,n,s){this.aabb=t,this.axis=i,this.d=e,this.midStartIndex=n,this.rightStartIndex=s}}class f{constructor(e,n,s,r){this.globalTriangleVertexIndices=e,this.firstTriangleIndex=n,this.positions=r,this._rayDirection=i(),this._callback=R,this._intersectionOptions=I,this.bspNodeTree=new Array;const h=s-n,l=new(h<N?Uint8Array:h<b?Uint16Array:Uint32Array)(h);this.triangleIndexMap=l;for(let t=0;t<h;++t)l[t]=t;{const i=p(e,n,s,r.data,r.stride),f=t(Math.log2(h/a),2,c),m=(t,e,n)=>{const s=x(l,i,t,e),r=e-t;if(r<=a){const i=new d(s,void 0,0,t,e);return this.bspNodeTree.push(i),i}const{axis:c,midValue:h}=y(s),u=g(l,i,t,e,c,h),p=(t,i)=>{if(n>f)return;const e=i-t;return e<a||e>=o*r?void 0:m(t,i,n+1)},N=new d(s,c,h,u.next,u.mid);return this.bspNodeTree.push(N),N.leftNode=p(t,u.next),N.rightNode=p(u.mid,e),N};m(0,h,0)}}intersectRayTriangleRange(t,i){if(t>=i)return;const e=this.positions;s(this._rayFrom,this._rayDirection,t,i,this.globalTriangleVertexIndices,e.data,e.stride,this._intersectionOptions.normalRequired,this._callback,this.triangleIndexMap,this.firstTriangleIndex),f.numFacesTested+=i-t}intersectRay(t,i,e,n){f.numFacesTested=0;const s=t,r=i,a=r[0]-s[0],o=r[1]-s[1],c=r[2]-s[2];if(a*a+o*o+c*c<h)return;this._rayFrom=s;const l=this._rayDirection;l[0]=a,l[1]=o,l[2]=c;const d=this.triangleIndexMap.length;this._callback=n,this._intersectionOptions=e,this.intersectRayBSP(this.bspNodeTree[0],0,d),this._callback=R,this._intersectionOptions=I}intersectRayBSP(t,i,e){const n=this._rayFrom,s=this._rayDirection;if(!l(t.aabb,n,s))return;const r=t.axis,a=t.d;if(n[r]<a||s[r]<0){const e=i,n=t.midStartIndex;if(e<n){const i=t.leftNode;void 0!==i?this.intersectRayBSP(i,e,n):this.intersectRayTriangleRange(e,n)}}if(this.intersectRayTriangleRange(t.midStartIndex,t.rightStartIndex),n[r]>a||s[r]>0){const i=t.rightStartIndex,n=e;if(i<n){const e=t.rightNode;void 0!==e?this.intersectRayBSP(e,i,n):this.intersectRayTriangleRange(i,n)}}}static{this.numFacesTested=0}get estimatedMemoryUsage(){return this.triangleIndexMap.byteLength}}const m=[1/0,1/0,1/0],u=[-1/0,-1/0,-1/0];function g(t,i,e,n,s,r){let a=e,o=n;for(;a<o;){const e=t[a];i[6*e+s+3]<=r?++a:(--o,t[a]=t[o],t[o]=e)}let c=a;for(o=n;c<o;){const e=t[o-1];i[6*e+s]>=r?--o:(t[o-1]=t[c],t[c]=e,++c)}return{next:a,mid:c}}function x(t,i,n,s){if(s<=n)return e(NaN,NaN,NaN,NaN,NaN,NaN);{const e=6*t[n];for(let t=0;t<3;++t)m[t]=i[e+0+t],u[t]=i[e+3+t]}for(let e=n+1;e<s;++e){const n=6*t[e];for(let t=0;t<3;++t)m[t]=Math.min(m[t],i[n+0+t]),u[t]=Math.max(u[t],i[n+3+t])}return e(m[0],m[1],m[2],u[0],u[1],u[2])}function y(t){const i=t[3]-t[0],e=t[4]-t[1],n=t[5]-t[2],s=i>e?i>n?0:e>n?1:2:e>n?1:n>i?2:0;return{axis:s,midValue:(t[s]+t[s+3])/2}}function p(t,i,e,n,s){const r=e-i,a=new Float32Array(6*r);for(let o=0;o<r;++o){const e=3*(o+i),r=t[e]*s,c=t[e+1]*s,h=t[e+2]*s;for(let t=0;t<3;++t){const i=n[r+t],e=n[c+t],s=n[h+t];a[6*o+t]=Math.min(i,e,s),a[6*o+3+t]=Math.max(i,e,s)}}return a}const N=255,b=65535,I=new n,R=()=>{};export{f as ComponentIntersectionData,r as componentMinimalSizeForIntersectionData};
