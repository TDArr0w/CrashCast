/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{__decorate as e}from"tslib";import{dedupeResult as t}from"../../../../core/dedupeResult.js";import{isIterable as r}from"../../../../core/iteratorUtils.js";import{equalsShallow as o}from"../../../../core/lang.js";import{equalsMaybe as i}from"../../../../core/maybe.js";import{watch as s,sync as n}from"../../../../core/reactiveUtils.js";import{getMetersPerVerticalUnitForSR as l}from"../../../../core/unitUtils.js";import{property as a}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/has.js";import"../../../../core/Logger.js";import{subclass as c}from"../../../../core/accessorSupport/decorators/subclass.js";import{j as p}from"../../../../chunks/vec32.js";import{create as u}from"../../../../core/libs/gl-matrix-2/factories/vec3f64.js";import{getReferenceEllipsoid as m}from"../../../../geometry/ellipsoidUtils.js";import{create as d,fromPoints as f}from"../../../../geometry/support/ray.js";import{GeometryDescriptor as y}from"../../../../layers/support/GeometryDescriptor.js";import{externalToInternalIntersectOptions as h,testGraphicUidFilter as v}from"../../support/hitTest.js";import{Intersector as _}from"../../webgl-engine/lib/Intersector.js";import{toGraphic as g}from"../../webgl-engine/lib/intersectorUtilsConversions.js";import{getVisibleLayerIds as w}from"../../../analysis/ElevationProfile/elevationProfileLayerUtils.js";import{ElevationProfileLineComputation as j}from"../../../analysis/ElevationProfile/ElevationProfileLineComputation.js";const b=2e5;let I=class extends j{constructor(){super(...arguments),this.type="scene",this.numSamplesForPreview=50,this.numSamplesPerChunk=25,this._getStableElevationDependencies=t(()=>{const e=this._view;return e?{view:e,stationary:e.stationary,geometry:this.controller?.analysis.geometry,visibleLayerIds:this._getStableLayerIds(),maxIntersectionDistance:this._maxIntersectionDistance,intersectOptions:this._intersectOptions,spatialReference:this._getStableSpatialReference()}:null},o),this._getStableSpatialReference=t(()=>this._view?.spatialReference,i),this._getStableLayerIds=t(()=>w(this._view),o),this._getStablePointCloudLayers=t(()=>{const e=this._view;return e?e.allLayerViews.toArray().filter(e=>"point-cloud"===e.layer?.type).map(e=>e.layer):[]},o),this._vecA=u(),this._vecB=u(),this._ray=d()}get minDemResolution(){const e=this._view;if(!e)return null;const t=e.pointsOfInterest?.focus?.worldUnitsPerContentPixel;return null==t?null:t*l(e.spatialReference)}initialize(){const e=()=>this.onInvalidate(this);return this.addHandles([s(()=>this._queryElevationDependencies,e,n),this.controller.onElevationChange(e)])}async queryElevation(e,{noDataValue:t,signal:r}){const o=this._queryElevationDependencies;if(null==o)throw new Error(`${this.declaredClass}: no dependencies`);const i=this._intersector;if(null==i)throw new Error(`${this.declaredClass}: no view`);const{intersectOptions:s,view:n,spatialReference:l}=o,a=n.renderCoordsHelper,c=n.sceneIntersectionHelper,u=this._vecA,m=this._vecA,d=this._vecB,h=this._ray;if(!l)return{geometry:e,noDataValue:t};const v=await y.fromGeometry(e).project(l,r);if(!v)return{geometry:e,noDataValue:t};const _=v.coordinates,g=_.length;for(let y=0;y<g;++y){const e=_[y];p(d,e.x,e.y,e.z??0),a.toRenderCoords(d,l,d),a.setAltitude(u,b,d);const r=f(u,d,h);c.computeIntersection(r,i,!0,s);const n=D(o,i.results.all);n?(n.getIntersectionPoint(m),a.fromRenderCoords(m,m,l),e.z=m[2]):e.z=t}return{geometry:v.export(),noDataValue:t}}get _queryElevationDependencies(){return this._getStableElevationDependencies()}get _intersectOptions(){const e=this._view;if(!e||e.destroyed)return{};const{include:t,exclude:o}=this.profile;return h(e,{include:t,exclude:[...this._pointCloudLayers,...r(o)?o:o?[o]:[]]})}get _pointCloudLayers(){return this._getStablePointCloudLayers()}get _view(){const e=this.controller.view;return"3d"===e.type?e:null}get _maxIntersectionDistance(){const e=this._view;return e?.renderCoordsHelper?m(e.spatialReference).radius/e.renderCoordsHelper.unitInMeters:Number.POSITIVE_INFINITY}get _intersector(){const e=this._view;if(!e)return null;const t=new _(e.state.viewingMode),r=t.options;return r.hud=!1,r.invisibleTerrain=!1,r.backfacesTerrain=!1,r.selectionMode=!1,r.store=2,t}};function D({intersectOptions:e,maxIntersectionDistance:t,view:r},o){const i=e.graphics,s=!(!i?.include&&!i?.exclude);for(const n of o)if(n.withinDistance(t)){if(s){const e=g(n,r);if(null!=e&&!v(i,e))continue}return n}return null}e([a({readOnly:!0})],I.prototype,"minDemResolution",null),e([a()],I.prototype,"_queryElevationDependencies",null),e([a()],I.prototype,"_intersectOptions",null),e([a()],I.prototype,"_pointCloudLayers",null),e([a()],I.prototype,"_view",null),e([a()],I.prototype,"_maxIntersectionDistance",null),e([a()],I.prototype,"_intersector",null),I=e([c("esri.views.3d.analysis.ElevationProfile.ElevationProfileLineSceneComputation")],I);export{I as ElevationProfileLineSceneComputation};
