/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{__decorate as e}from"tslib";import t from"../../../../core/Accessor.js";import{screenPointObjectToArray as r}from"../../../../core/screenUtils.js";import{property as o}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/has.js";import"../../../../core/Logger.js";import"../../../../core/RandomLCG.js";import{subclass as n}from"../../../../core/accessorSupport/decorators/subclass.js";import{d as i,n as s,h as a,g as c}from"../../../../chunks/vec32.js";import{create as l,clone as m}from"../../../../core/libs/gl-matrix-2/factories/vec3f64.js";import p from"../../../../geometry/Point.js";import{create as u,copy as d,fromPoints as f}from"../../../../geometry/support/ray.js";import{sv2d as g}from"../../../../geometry/support/vectorStacks.js";import{LineOfSightIntersectionResult as y,lineOfSightIntersectionContextGround as w,LineOfSightIntersectionContextGraphic as h}from"./LineOfSightIntersectionResult.js";import{fromScreen as j}from"../../support/geometryUtils/ray.js";import{isTerrainIntersectorResult as v,isIntegratedMeshIntersectorResult as I}from"../../terrain/Intersector.js";import{Intersector as P}from"../../webgl-engine/lib/Intersector.js";import{toGraphic as b}from"../../webgl-engine/lib/intersectorUtilsConversions.js";let x=class extends t{constructor(e){super(e),this._terrainIntersectionOptionsLayerUids=new Set(["terrain"])}initialize(){this.intersector=new P(this.view.state.viewingMode),this.intersector.options.hud=!1,this.intersector.options.store=0}getScreenPointIntersection(e){const t=r(e,g.get()),o=j(this.view.state.camera,t,O);return this._getRayIntersection(o)}_getRayIntersection(e,t){const{view:r,intersector:o}=this;if(null==e||null==r.sceneIntersectionHelper)return null;o.options.store=0,r.sceneIntersectionHelper.intersectToolIntersectorRay(e,o,t);const n=o.results.min;if(null==n.target)return null;const i=l();if(!n.getIntersectionPoint(i))return null;if(null!=t?.maxDistance&&!n.withinDistance(t.maxDistance))return null;const s=r.renderCoordsHelper.fromRenderCoords(i,new p({spatialReference:r.spatialReference})),a=m(n.normal);if(v(n))return new y({context:w,id:n.target.lij.slice(),mapPoint:s,renderPoint:i,normal:a,ray:d(e)});if(I(r,n))return new y({context:w,id:`${n.target.layerViewUid}`,mapPoint:s,renderPoint:i,normal:a,ray:d(e)});const c=b(n,r);if(null!=c){const{layer:t}=c,r=c.getObjectId()??c.uid;return new y({context:new h(c),id:`${t?.uid}/${r}`,mapPoint:s,renderPoint:i,normal:a,ray:d(e)})}const u="layerViewUid"in n.target?`${n.target.layerViewUid}`:"";return new y({context:null,id:u,mapPoint:s,renderPoint:i,normal:a,ray:d(e)})}updateFromGroundIntersection(e,t,r){const o=R,n=U,l=S,p=L;i(n,e),this.view.renderCoordsHelper.worldUpAtPosition(n,l),s(l,l);const u=this.view.basemapTerrain.visibleElevationBounds,d=(t>=0?1:-1)*((u?Math.abs(u.max-u.min):100)+Math.abs(t));a(p,l,d),c(o,n,p),f(o,n,O);const g=this._getRayIntersection(O,{include:this._terrainIntersectionOptionsLayerUids,maxDistance:d});if(null!=g){const e=L;return a(e,l,t),c(r,g.renderPoint,e),m(g.normal)}return i(r,e),null}};e([o()],x.prototype,"view",void 0),e([o()],x.prototype,"intersector",void 0),x=e([n("esri.views.3d.analysis.LineOfSight.LineOfSightRayIntersector")],x);const R=l(),U=l(),S=l(),L=l(),O=u();export{x as LineOfSightRayIntersector};
