/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{__decorate as e}from"tslib";import t from"../../../core/Accessor.js";import{makeHandle as r}from"../../../core/handleUtils.js";import"../../../core/has.js";import{removeMaybe as s,destroyMaybe as o}from"../../../core/maybe.js";import{watch as i}from"../../../core/reactiveUtils.js";import{addFrameTask as a}from"../../../core/scheduling.js";import{signal as m}from"../../../core/signal.js";import{secondsFromMilliseconds as l}from"../../../core/time.js";import{property as d}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/Logger.js";import"../../../core/RandomLCG.js";import{subclass as n}from"../../../core/accessorSupport/decorators/subclass.js";import{maxDownloadSlots as h,downloadSlotsPerClient as p}from"./downloadSlots.js";import{newMemoryController as u}from"./MemoryController.js";import{StreamDataLoader as c}from"./StreamDataLoader.js";import{StreamDataRequesterImpl as _}from"./StreamDataRequester.js";import{ImmediateTask as g,newScheduler as v,TaskPriority as y}from"../../support/Scheduler.js";let f=class extends t{constructor(){super(...arguments),this.updating=!1}};function j(e){return new T({view:e})}e([d({readOnly:!0})],f.prototype,"updating",void 0),f=e([n("esri.views.3d.support.ResourceController.ResourceControllerMain")],f);let T=class extends f{constructor(){super(...arguments),this._immediateTask=g,this._normalTask=g,this._updatingObjects=m([]),this._frameTask=null}get immediate(){return this._immediateTask}get normal(){return this._normalTask}initialize(){this._scheduler=v(),this._memoryController=u(this.view),this._streamDataLoader=new c,this._streamDataLoader.setup(h,p,this._scheduler),this.addHandles([i(()=>this.view.stationary,()=>this._stationaryChangedHandler())]),this._frameTask=a({update:e=>this._frame(e)}),this._immediateTask=this._scheduler.registerTask(y.RESOURCE_CONTROLLER_IMMEDIATE),this._normalTask=this._scheduler.registerTask(y.RESOURCE_CONTROLLER)}destroy(){this._immediateTask.remove(),this._normalTask.remove(),this._frameTask=s(this._frameTask),this._streamDataLoader=o(this._streamDataLoader),this._memoryController=o(this._memoryController),this._scheduler=o(this._scheduler),this.view=null}get updating(){return!!(this._memoryController?.updating||this._streamDataLoader?.updating||this._immediateTask?.updating)||this._updatingObjects?.value.some(e=>e.updating)}get scheduler(){return this._scheduler}get memoryController(){return this._memoryController}createStreamDataRequester(e){return new _(this._streamDataLoader,e)}addUpdatingObject(e){const t=this._updatingObjects;return t.value=[...t.value,e],r(()=>{t.value=t.value.filter(t=>t!==e)})}_frame(e){this.view.suspended||this.view.stateManager&&(this.view.stateManager.step(l(e.deltaTime)),!this._scheduler)||(this._memoryController.update(),this.view.state&&(this._scheduler.state=this.view.state.fading?1:this.view.state.mode,this.view.state.fading=!1),this._scheduler.frame(e))}_stationaryChangedHandler(){this.memoryController.resetStableQuality()}get test(){}};e([d()],T.prototype,"view",void 0),e([d()],T.prototype,"_scheduler",void 0),e([d()],T.prototype,"_memoryController",void 0),e([d()],T.prototype,"_streamDataLoader",void 0),e([d()],T.prototype,"_immediateTask",void 0),e([d()],T.prototype,"_normalTask",void 0),e([d({readOnly:!0})],T.prototype,"updating",null),T=e([n("esri.views.3d.support.ResourceController")],T);export{j as newResourceController};
