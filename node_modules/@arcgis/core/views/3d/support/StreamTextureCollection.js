/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{throwIfAborted as e,whenOrAbort as t}from"../../../core/promiseUtils.js";import{isSVG as r}from"../../../core/urlUtils.js";import{TextureCollection as s,TextureRequest as i,TextureHandle as n}from"./TextureCollection.js";import{Texture as o}from"../webgl-engine/lib/Texture.js";class l extends s{constructor(e,t,r){super(t,r),this._streamDataRequester=e}async fromUrl(r,s,o){e(o);const l=o?.signal,h=this.makeUid(r,s);let a=this._textureRequests.get(h);if(!a){const e=new AbortController,t=this._streamDataRequester.request(r,2,{uid:h,signal:e.signal});a=new i,a.abortController=e;const o=a;this._textureRequests.set(h,a),a.textureAsync=t.then(async e=>{const t=this._createTexture(r,e,s);return o.texture=t,o.abortController=null,await t.load(this._stage.renderView.renderingContext),this._stage.addTexture(t),new n(h,t,()=>this._release(h))},e=>{throw o.abortController=null,e})}a.referenceCount++;try{return await t(a.textureAsync,l)}catch(u){throw this._release(h),u}}_createTexture(e,t,s){const i={width:t.width,height:t.height,wrap:{s:33071,t:33071},preMultiplyAlpha:!0,reloadable:!0};if(r(e)){if(s||0===t.width&&0===t.height){const e=t.width?t.height/t.width:1;s=s||64,e>1?(t.width=Math.round(s/e),t.height=s):(t.width=s,t.height=Math.round(s*e))}this._stage.renderView?.renderingContext.driverTest.svgPremultipliesAlpha.result&&(i.preMultiplyAlpha=!1)}return new o(t,i)}}export{l as StreamTextureCollection};
