/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{__decorate as e}from"tslib";import{watch as t,sync as s}from"../../../../core/reactiveUtils.js";import{throttle as i}from"../../../../core/throttle.js";import{property as r}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/has.js";import"../../../../core/Logger.js";import"../../../../core/RandomLCG.js";import{subclass as a}from"../../../../core/accessorSupport/decorators/subclass.js";import{clone as l}from"../../../../geometry/support/aaBoundingRect.js";import{toFlowData as o}from"../../../2d/engine/flow/dataUtils.js";import n from"../../layers/FlowSubView3D.js";import{tilesWaitingTime as d}from"./constants.js";import{tileToKey as u,FlowDataTile as h}from"./loadUtils.js";import{isRasterTile as p}from"../../terrain/TerrainData.js";const c={type:"delete"},g={type:"waiting"},f={type:"on-worker",upsampled:!1},_={type:"on-worker",upsampled:!0};let T=class extends n{constructor(e){super(e),this._resetTileData=!0,this._throttledTriggerLoad=null,this._throttling=!1}initialize(){this.addHandles([this.surface.on("tile-data-changed",({tile:e,layerIndex:t,layerClass:s})=>{null!=this.renderedTiles&&(this.loadByTileTreesAllowed||this._tileIsUpsampled(e))&&t===this._layerIndex&&1===s&&this._updateFlowDataTile(e)}),t(()=>this.renderedTiles,e=>{const t=this.frameTask.scheduleGenerator(t=>this._updateFlowDataTiles(e,t));this.updatingHandles.addPromise(t)},s),t(()=>this._pixelSize,()=>{this.invalidateTileData(),this._resetTileData=!0},s)]),this._throttledTriggerLoad=i(()=>{super.triggerLoad(),this._throttling=!1},()=>this._throttling=!0,d,this),this.addHandles(this._throttledTriggerLoad)}async*_updateFlowDataTiles(e,t){const s=m();for(const i of e??[]){const e=this._flowDataTiles?.get(u(i)),r=null==e||"delete"===e.type||"waiting"===e.type?this._getLoadedState(i):e;null!=r&&s.set(u(i),r),t.madeProgress(),t.done&&(t=yield)}this._flowDataTiles=s,this._resetTileData=!0,this.triggerLoad()}abort(){super.abort(),this._throttling=!1}get _layerIndex(){return this.surface.getLayerIndexByUID(1,this.layerView.uid)}get loadByTileTreesAllowed(){return super.loadByTileTreesAllowed||!this._allTilesLoaded}get _pixelSize(){return this.surface.tilingScheme.pixelSize}doRefresh(){this.invalidateTileData(),super.doRefresh()}triggerLoad(){const{_throttledTriggerLoad:e}=this;this._allTilesLoaded?(e.hasPendingUpdates()||e(),e.forceUpdate()):e()}async fetchDataAndGenerateStreamlines(e,t){const{_flowDataTiles:s,needsMagnitude:i,workerHandle:r}=this,a=this.getSimulationSettings(e);if(null==a||null==r||null==s)return;const l=this._resetTileData;this._resetTileData=!1;const o=m();s.forEach((e,t)=>{"delete"===e.type?(o.set(t,c),s.delete(t)):(l||"on-worker"!==e.type&&"waiting"!==e.type)&&(o.set(t,e),s.set(t,"waiting"!==e.type&&e.upsampled?_:f))});const n={simulationSettings:a,flowExtentInfo:e.flowExtentInfo,flowDataTiles:o,reset:l,needsMagnitude:i,startPositions:this.startPositions(e)},{streamlines:d}=await r.generateTiledStreamlines(n,t);return d}getUpdating(){return super.getUpdating()||this._throttling}_getLoadedState(e){const{_layerIndex:t}=this,s=null==e.surface;if(null==t||s)return c;const i=e.getLayerInfo(t,1);if(null==i)return c;if(!e.visible&&null==i.requestAbort)return i.requestAbort=new AbortController,this.surface.requestTileData(e,t,1,i.requestAbort),c;const r=this._getRasterTile(i,e,t);return null==r?this._upsampleFlowData(t,i.upsampleInfo,e.lij,e.extent):{type:"loaded",data:this._createFlowDataTile(r,e.lij,e.extent,this._pixelSize),upsampled:!1}}_upsampleFlowData(e,t,s,i){if(null==t)return c;const r=t.tile;if(null==r)return c;const a=r.getLayerInfo(e,1);if(null==a)return c;const l=this._getRasterTile(a,r,e);if(null==l)return c;const{scale:o,offset:n}=t,d=Math.max(Math.floor(this._pixelSize*o),1),u=l.source,h=Math.floor(n[0]*u.width),p=Math.floor((1-n[1]-o)*u.height);return{type:"loaded",data:this._createFlowDataTile(l,s,i,d,h,p),upsampled:!0}}_getRasterTile(e,t,s){const{data:i}=e;return!e.dataMissing&&t.hasLayerData(s,1)&&p(i)?i:null}_createFlowDataTile(e,t,s,i,r,a){const n=o(this.layer.serviceRasterInfo.dataType,e.source,i,i,r,a),d=n.mask.slice();return new h(n.data,d,n.width,n.height,t,l(s))}_updateFlowDataTile(e){const{renderedTiles:t,_layerIndex:s}=this;if(null==t||null==s)return;if(t.has(e)){const t=this._getLoadedState(e);return void(this._setTileData(e,t)&&this.triggerLoad())}let i=this._setTileData(e,c);for(const r of t.values()){const t=r.getLayerInfo(s,1);if(null==t)continue;if(null!=this._getRasterTile(t,r,s))continue;const a=t.upsampleInfo?.tile;if(a!==e)continue;const l=this._getLoadedState(r),o=this._setTileData(r,l);i||=o}i&&this.triggerLoad()}_setTileData(e,t){const{_flowDataTiles:s}=this;if(null==s)return!1;const i=u(e);return(null!=s.get(i)||"delete"!==t.type)&&(s.set(i,t),!0)}get _allTilesLoaded(){let e=0;for(const t of this._flowDataTiles?.values()??[])"delete"!==t.type&&"waiting"!==t.type&&e++;return e===this.renderedTiles?.size}invalidateTileData(){const{_flowDataTiles:e}=this;e?.forEach((t,s)=>{e.set(s,g)})}_tileIsUpsampled(e){const t=this._flowDataTiles?.get(u(e));return null!=t&&("loaded"===t.type||"on-worker"===t.type)&&t.upsampled}get usedMemory(){const e=9*this._pixelSize**2,t=(this._flowDataTiles?.size??0)*e;return super.usedMemory+t}get test(){return{...super.test,loadedTiles:this._flowDataTiles??m()}}};function m(){return new Map}e([r()],T.prototype,"_throttling",void 0),T=e([a("esri.views.3d.support.flow.FlowSubViewTiles3D")],T);export{T as default};
