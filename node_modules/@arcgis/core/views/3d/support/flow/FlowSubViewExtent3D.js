/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{__decorate as e}from"tslib";import{makeHandle as t}from"../../../../core/handleUtils.js";import"../../../../core/Logger.js";import"../../../../core/has.js";import"../../../../core/RandomLCG.js";import"../../../../core/Error.js";import{subclass as r}from"../../../../core/accessorSupport/decorators/subclass.js";import{loadImagery as s}from"../../../2d/engine/flow/dataUtils.js";import o from"../../layers/FlowSubView3D.js";let i=class extends o{constructor(e){super(e)}initialize(){this.updatingHandles.add(()=>this.renderedTiles,()=>this.triggerLoad()),this.updatingHandles.add(()=>this.elevationInfo.mode,e=>this._updatePopupDrapeSource(e),{initial:!0})}_updatePopupDrapeSource(e){if("on-the-ground"===e)return void this.removeHandles(a);if(this.hasHandles(a))return;const r={destroyed:!1,drapeSourceType:2,updatePolicy:0,layer:this.layer},s=this.layerView.view.overlayManager;s.registerGeometryDrapeSource(r),this.addHandles(t(()=>s.unregisterDrapeSource(r)),a)}async fetchDataAndGenerateStreamlines(e,t){const{needsMagnitude:r,workerHandle:o}=this,i=this.getSimulationSettings(e),{size:a,extent:n,timeExtent:l}=e;if(null==i||null==o)return;const d=await s(this.layer,n,a[0],a[1],l,t);if(null==d)return null;const u={simulationSettings:i,flowExtentInfo:e.flowExtentInfo,flowData:d,needsMagnitude:r,startPositions:this.startPositions(e)},{streamlines:p}=await o.generateStreamlines(u,t);return p}};i=e([r("esri.views.3d.support.flow.FlowSubViewExtent3D")],i);const a=Symbol("popupDrapeSource");export{i as default};
