/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{create as t}from"../../../../core/libs/gl-matrix-2/factories/mat4f64.js";import{create as o}from"../../../../core/libs/gl-matrix-2/factories/vec3f64.js";import{getReferenceEllipsoid as r}from"../../../../geometry/ellipsoidUtils.js";import{computeTranslationToOriginAndRotation as a}from"../../../../geometry/projection/computeTranslationToOriginAndRotation.js";import{a as s}from"../../../../chunks/sphere.js";function i(o,r,i,n,e){const h="east-north-up"===i?s(o):c(o,r,n),m=t();return a(n,h,m,e),m}const n=1,e=5-n;function c(t,a,s){const i=o(),c=t[3],h=2**(Math.ceil(Math.log(c)*Math.LOG2E/e)*e+n);if(s.isGeographic){const o=h/r(s).radius*180/Math.PI,a=Math.round(t[1]/o),n=Math.max(-90,Math.min(90,a*o)),e=o/Math.cos((Math.abs(n)-o/2)/180*Math.PI),c=Math.round(t[0]/e)*e;i[0]=c,i[1]=n}else{const o=Math.round(t[0]/h),r=Math.round(t[1]/h);i[0]=o*h,i[1]=r*h}const m=t[2]+a,M=Math.round(m/h);return i[2]=M*h,i}export{i as computeGlobalTransformation,c as getLocalOrigin};
