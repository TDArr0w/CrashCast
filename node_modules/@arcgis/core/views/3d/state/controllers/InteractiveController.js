/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{__decorate as t}from"tslib";import{clock as r}from"../../../../core/clock.js";import{Seconds as e}from"../../../../core/time.js";import{property as o}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/has.js";import"../../../../core/Logger.js";import"../../../../core/RandomLCG.js";import{subclass as i}from"../../../../core/accessorSupport/decorators/subclass.js";import{interactingTimeout as s}from"../ViewStateManager.js";import{CameraController as a}from"./CameraController.js";import m from"../../webgl/RenderCamera.js";let n=class extends a{constructor(){super(...arguments),this.startCamera=new m,this.currentCamera=new m,this._isInteractive=!1,this._interactingTimeoutHandle=void 0}get isInteractive(){return this._isInteractive}stepController(t,r){r.copyViewFrom(this.currentCamera),this.currentCamera.copyFrom(r)}onControllerStart(t){this.state=2,this.startCamera.copyFrom(t),this.currentCamera.copyFrom(t)}onControllerEnd(t){t.copyViewFrom(this.currentCamera)}commitCamera(){this._isInteractive=!0,this._interactingTimeoutHandle?.remove(),this._interactingTimeoutHandle=r.setTimeout(()=>{this._isInteractive=!1,this._interactingTimeoutHandle=void 0},s),this.view.state.updateCamera(t=>this.stepController(e(0),t))}};t([o({readOnly:!0})],n.prototype,"isInteractive",null),t([o()],n.prototype,"_isInteractive",void 0),n=t([i("esri.views.3d.state.controllers.InteractiveController")],n);export{n as InteractiveController};
