/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{__decorate as e}from"tslib";import t from"../../../core/Accessor.js";import{deg2rad as a,lerp as r,clamp as s}from"../../../core/mathUtils.js";import{watch as i,syncAndInitial as l}from"../../../core/reactiveUtils.js";import{property as c}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/has.js";import"../../../core/Logger.js";import"../../../core/RandomLCG.js";import{subclass as n}from"../../../core/accessorSupport/decorators/subclass.js";import{c as o}from"../../../chunks/boundedPlane.js";import{c as u,b as m,d as p}from"../../../chunks/sphere.js";import{ScreenSizePerspectiveParameters as f}from"../webgl-engine/lib/screenSizePerspectiveUtils.js";let d=class extends t{get parameters(){return this._parameters}get labelParameters(){return this._labelParameters}get _calculations(){return this.view.state.isGlobal?new h(this.view.renderCoordsHelper?.referenceEllipsoid.radius??0):new v}constructor(e){super(e),this._parameters=new f,this._labelParameters=new f}initialize(){this.addHandles([i(()=>({distance:this.view.pointsOfInterest?.centerOnSurfaceInfrequent?.distance??0,fovY:this.view.state.camera.fovY}),e=>this._update(e),l)])}_update(e){const t=this._updateParameters(this._parameters,g,e),a=this._updateParameters(this._labelParameters,P,e);return t||a}_updateParameters(e,t,a){if(e&&e.camera.fovY===a.fovY&&e.camera.distance===a.distance)return!1;const{scaleStart:r,scaleFallOffRange:s}=t,{fovY:i,distance:l}=a;this._calculations.calculateCurvatureDependentParameters(_,t,a);const c=this._calculations.surfaceCoverageCompensation(a,_),{tiltAngle:n,scaleFallOffFactor:o}=_,u=Math.sin(n)*l,m=.5*Math.PI-n-i*(.5-r*c),p=u/Math.cos(m),f=m+i*s*c,d=(p-o*(u/Math.cos(f)))/(1-o);return e.camera.fovY=a.fovY,e.camera.distance=a.distance,e.offset=d,e.divisor=p-d,e.minPixelSize=t.minPixelSize,!0}};e([c({constructOnly:!0})],d.prototype,"view",void 0),e([c()],d.prototype,"_calculations",null),d=e([n("esri.views.3d.state.ScreenSizePerspective")],d);class v{surfaceCoverageCompensation(e,t){return o(t.tiltAngle,e.fovY)}calculateCurvatureDependentParameters(e,t){e.tiltAngle=t.curvatureDependent.min.tiltAngle,e.scaleFallOffFactor=t.curvatureDependent.min.scaleFallOffFactor}}class h{constructor(e){this._ellipsoidRadius=e}surfaceCoverageCompensation(e,t){return m(O,this._ellipsoidRadius),p(O,t.tiltAngle,e.distance,e.fovY)}calculateCurvatureDependentParameters(e,t,a){const i=t.curvatureDependent,l=1+a.distance/this._ellipsoidRadius,c=Math.sqrt(l*l-1),[n,o]=[i.min.curvature,i.max.curvature],u=s((c-n)/(o-n),0,1),[m,p]=[i.min,i.max];e.tiltAngle=r(m.tiltAngle,p.tiltAngle,u),e.scaleFallOffFactor=r(m.scaleFallOffFactor,p.scaleFallOffFactor,u)}}class F{constructor(){this.tiltAngle=0,this.scaleFallOffFactor=0}}const g={curvatureDependent:{min:{curvature:a(10),tiltAngle:a(12),scaleFallOffFactor:.5},max:{curvature:a(70),tiltAngle:a(40),scaleFallOffFactor:.8}},scaleStart:.3,scaleFallOffRange:.65,minPixelSize:0},P={...g,curvatureDependent:{min:{...g.curvatureDependent.min,scaleFallOffFactor:.7},max:{...g.curvatureDependent.max,scaleFallOffFactor:.95}},minPixelSize:14},_=new F,O=u();export{d as ScreenSizePerspective};
