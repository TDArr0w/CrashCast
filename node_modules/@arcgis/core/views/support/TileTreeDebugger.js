/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{__decorate as e}from"tslib";import o from"../../Color.js";import s from"../../Graphic.js";import t from"../../core/Accessor.js";import l from"../../core/Collection.js";import{lerp as r}from"../../core/mathUtils.js";import{property as i}from"../../core/accessorSupport/decorators/property.js";import"../../core/has.js";import"../../core/Logger.js";import"../../core/RandomLCG.js";import{subclass as n}from"../../core/accessorSupport/decorators/subclass.js";import a from"../../symbols/PointSymbol3D.js";import m from"../../symbols/SimpleFillSymbol.js";import h from"../../symbols/TextSymbol.js";import p from"../../symbols/TextSymbol3DLayer.js";import c from"../../symbols/callouts/LineCallout3D.js";import y from"../../symbols/callouts/LineCallout3DBorder.js";import b from"../../symbols/support/Symbol3DVerticalOffset.js";const u=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];let d=class extends t{constructor(e){super(e),this.updating=!1,this.enablePolygons=!0,this.enableLabels=!0,this._polygons=new Map,this._labels=new Map,this._symbols=u.map(e=>new m({color:[e[0],e[1],e[2],.6],outline:{color:"black",width:1}})),this._enabled=!0}initialize(){this.update()}destroy(){this._enabled=!1,this.clear()}get enabled(){return this._enabled}set enabled(e){this._enabled!==e&&(this._enabled=e,this.update())}update(){if(!this._enabled)return void this.clear();const e=e=>{if(null!=e.label)return e.label;let o=e.lij.toString();return null!=e.loadPriority&&(o+=` (${e.loadPriority})`),e.measures&&(o+=`[${e.measures.lodLevel}]`),o},t=this.getTiles(),i=new Array,n=new Set(this._labels.size>0?this._labels.keys():this._polygons.keys());t.forEach((m,u)=>{const d=m.lij.toString();n.delete(d);const g=m.measures?.lodLevel??m.level,f=m.geometry;if(this.enablePolygons&&!this._polygons.has(d)){const e=m.polygonSymbol??this._symbols[g%this._symbols.length],o=new s({geometry:f,symbol:e});this._polygons.set(d,o),i.push(o)}if(this.enableLabels){const n=e(m),g=u/(t.length-1),w=r(0,200,g),_=r(20,6,g)/.75,j=null!=m.loadPriority&&m.loadPriority>=t.length,v=new o([w,j?0:w,j?0:w]),S="3d"===this.view.type?()=>new a({verticalOffset:new b({screenLength:40/.75}),callout:new c({color:new o("white"),border:new y({color:new o("black")})}),symbolLayers:new l([new p({text:n,halo:{color:"white",size:1/.75},material:{color:v},size:_})])}):()=>new h({text:n,haloColor:"white",haloSize:1/.75,color:v,size:_}),L=this._labels.get(d);if(L){const e=S();null!=L.symbol&&JSON.stringify(e)===JSON.stringify(L.symbol)||(L.symbol=e)}else{const e=new s({geometry:f.extent.center,symbol:S()});this._labels.set(d,e),i.push(e)}}});const m=new Array;n.forEach(e=>{const o=this._polygons.get(e);null!=o&&(m.push(o),this._polygons.delete(e));const s=this._labels.get(e);null!=s&&(m.push(s),this._labels.delete(e))}),this.view.graphics.removeMany(m),this.view.graphics.addMany(i)}clear(){this.view.graphics.removeMany(Array.from(this._polygons.values())),this.view.graphics.removeMany(Array.from(this._labels.values())),this._polygons.clear(),this._labels.clear()}};e([i({constructOnly:!0})],d.prototype,"view",void 0),e([i({readOnly:!0})],d.prototype,"updating",void 0),e([i()],d.prototype,"enabled",null),d=e([n("esri.views.support.TileTreeDebugger")],d);export{d as TileTreeDebugger};
