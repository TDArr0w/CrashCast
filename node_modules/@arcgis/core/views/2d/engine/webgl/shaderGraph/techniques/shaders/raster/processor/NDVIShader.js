/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{__decorate as t}from"tslib";import{uniform as r,define as s,UniformGroup as o}from"../../../../GraphShaderModule.js";import{Vec4 as e,floor as i,Mat3 as a}from"../../../../graph/glsl.js";import{BaseRasterProcessorShader as d}from"./BaseRasterProcessorShader.js";import{invertValue as p}from"./math.js";class n extends o{}t([r(a)],n.prototype,"bandIndexMat3",void 0);class l extends d{constructor(){super(...arguments),this.type="NDVIShader",this.scaled=!0}_process(t){const r=this._getPixel(t),{r:s,g:o}=this.ndviConfig.bandIndexMat3.multiply(r.rgb),a=s.subtract(o),d=s.add(o),n=a.multiply(p(d));if(!this.scaled)return new e(n,n,n,r.a);const l=i(n.multiply(100).add(100.5));return new e(l,l,l,r.a)}}t([s],l.prototype,"scaled",void 0),t([r(n)],l.prototype,"ndviConfig",void 0);export{l as NDVIShader};
