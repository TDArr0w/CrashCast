/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{__decorate as o,__param as t}from"tslib";import{FragmentOutput as i,uniform as r,input as e,define as l,UniformGroup as s}from"../../GraphShaderModule.js";import{Vec4 as p,texture2D as u,clamp as n,Float as m,mix as y,Vec3 as d,dot as a,smoothstep as h,Sampler2D as g,FixedArray as c}from"../../graph/glsl.js";import{PostProcessingShader as f,PostProcessingFragmentInput as v}from"./PostProcessingShader.js";class b extends s{}o([r(g)],b.prototype,"luminosityTexture",void 0),o([r(d)],b.prototype,"defaultColor",void 0),o([r(m)],b.prototype,"defaultOpacity",void 0),o([r(m)],b.prototype,"luminosityThreshold",void 0),o([r(m)],b.prototype,"smoothWidth",void 0);class x extends f{constructor(){super(...arguments),this.type="LuminosityHighPassShader"}fragment(o){const t=new i,r=u(this.luminosityHighPassConfig.luminosityTexture,o.uv),e=new d(.299,.587,.114),l=a(r.xyz,e),s=new p(this.luminosityHighPassConfig.defaultColor.rgb,this.luminosityHighPassConfig.defaultOpacity),n=h(this.luminosityHighPassConfig.luminosityThreshold,this.luminosityHighPassConfig.luminosityThreshold.add(this.luminosityHighPassConfig.smoothWidth),l);return t.fragColor=y(s,r,n),t}}o([r(b)],x.prototype,"luminosityHighPassConfig",void 0),o([t(0,e(v))],x.prototype,"fragment",null);class T extends s{}o([r(g)],T.prototype,"blurTexture1",void 0),o([r(g)],T.prototype,"blurTexture2",void 0),o([r(g)],T.prototype,"blurTexture3",void 0),o([r(g)],T.prototype,"blurTexture4",void 0),o([r(g)],T.prototype,"blurTexture5",void 0),o([r(m)],T.prototype,"bloomStrength",void 0),o([r(m)],T.prototype,"bloomRadius",void 0),o([r(c.ofType(m,5))],T.prototype,"bloomFactors",void 0),o([r(d)],T.prototype,"bloomTintColor",void 0);class C extends f{constructor(){super(...arguments),this.type="CompositeShader"}fragment(o){const t=new i,{blurTexture1:r,blurTexture2:e,blurTexture3:l,blurTexture4:s,blurTexture5:y,bloomStrength:d,bloomFactors:a,bloomTintColor:h}=this.compositeConfig,g=this._lerpBloomFactor(a[0]).multiply(new p(h,1).multiply(u(r,o.uv))),c=this._lerpBloomFactor(a[1]).multiply(new p(h,1).multiply(u(e,o.uv))),f=this._lerpBloomFactor(a[2]).multiply(new p(h,1).multiply(u(l,o.uv))),v=this._lerpBloomFactor(a[3]).multiply(new p(h,1).multiply(u(s,o.uv))),b=this._lerpBloomFactor(a[4]).multiply(new p(h,1).multiply(u(y,o.uv))),x=d.multiply(g.add(c.add(f.add(v.add(b)))));return t.fragColor=n(x,new m(0),new m(1)),t}_lerpBloomFactor(o){const t=new m(1.2).subtract(o);return y(o,t,this.compositeConfig.bloomRadius)}}o([l],C.prototype,"numMips",void 0),o([r(T)],C.prototype,"compositeConfig",void 0),o([t(0,e(v))],C.prototype,"fragment",null);export{C as BloomCompositeShader,x as LuminosityHighPassShader};
