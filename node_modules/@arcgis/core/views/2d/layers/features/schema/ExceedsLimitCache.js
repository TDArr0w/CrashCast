/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import"../../../../../core/has.js";import{executeQuery as t,executeQueryForCount as e}from"../../../../../rest/query/operations/query.js";import r from"../../../../../rest/support/StatisticDefinition.js";import{FeatureSourceQueryInfo as a}from"../sources/FeatureSourceQueryInfo.js";import{FeatureMetadata as o}from"../support/FeatureMetadata.js";class s{constructor(){this._cache=new Map}async executeExceedsLimitQuery(t,e,r){const s=o.createFeature(t.metadata),i=a.create(t,e,s).createQuery();i.inner.orderByFields=[],i.inner.returnGeometry=!1,i.inner.cacheHint=!0;const c="esriGeometryPoint"!==t.metadata.geometryType,u=JSON.stringify({source:t.source,query:i.inner.toJSON(),customParameters:i.customParameters,snapshotInfo:r,isPoints:c});let m=this._cache.get(u);return null==m&&(m=await n(t.source,c,i,r),this._cache.set(u,m)),m}}async function n(e,a,o,s){if(!s.supportsExceedsLimit)return i(e,a,o,s);try{const a=o.inner.clone(),n=new r;n.statisticType="exceedslimit",n.maxPointCount=s.maxFeatureCount,n.maxRecordCount=s.maxFeatureCount,n.outStatisticFieldName="exceedslimit",s.maxVertexCount&&(n.maxVertexCount=s.maxVertexCount),a.outStatistics=[n];const i=await t(e,a,void 0,{query:o.customParameters}),c=i.data.features[0]?.attributes.exceedslimit;return!(0===c)}catch(n){return i(e,a,o,s)}}async function i(t,r,a,o){if(r)return!0;const s=a.inner.clone();try{return(await e(t,s,{query:a.customParameters})).data.count>o.maxFeatureCount}catch(n){return!0}}export{s as ExceedsLimitCache};
