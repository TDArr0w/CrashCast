/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.34/esri/copyright.txt for details.
*/
import{__decorate as t}from"tslib";import r from"../../../../core/Accessor.js";import has from"../../../../core/has.js";import{destroyMaybe as e}from"../../../../core/maybe.js";import o from"../../../../core/ReactiveMap.js";import{watch as s}from"../../../../core/reactiveUtils.js";import{property as i}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/Logger.js";import"../../../../core/RandomLCG.js";import{subclass as a}from"../../../../core/accessorSupport/decorators/subclass.js";import{UpdatingHandles as d}from"../../../../core/support/UpdatingHandles.js";let n=class extends r{constructor(t){super(t),this.debugName="",this._updatingHandles=new d,this._idToUpdatingState=new o}destroy(){this._updatingHandles=e(this._updatingHandles),this._idToUpdatingState.clear()}get updating(){const t=!this.destroyed&&(this._updatingHandles?.updating||Array.from(this._idToUpdatingState.values()).some(t=>t));if(has("esri-2d-log-updating")){const r=Array.from(this._idToUpdatingState.entries()).map(([t,r])=>`-> ${t}: ${r}`).join("\n");console.log(`${this.debugName}: Updating: ${t}\n-> Handles: ${this._updatingHandles.updating}\n${r}`)}return t}addUpdateTracking(t,r){const e=s(()=>r.updating,r=>this._idToUpdatingState.set(t,r),{sync:!0});this.addHandles(e)}addPromise(t){return this._updatingHandles.addPromise(t)}};t([i({constructOnly:!0})],n.prototype,"debugName",void 0),t([i({readOnly:!0})],n.prototype,"updating",null),n=t([a("esri.views.2d.layers.support.UpdateTracking2D")],n);export{n as UpdateTracking2D};
