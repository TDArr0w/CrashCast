"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined") return require.apply(this, arguments);
    throw Error('Dynamic require of "' + x + '" is not supported');
  });
  var __commonJS = (cb, mod2) => function __require2() {
    return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
    mod2
  ));
  var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

  // node_modules/thenby/thenBy.module.js
  var require_thenBy_module = __commonJS({
    "node_modules/thenby/thenBy.module.js"(exports, module) {
      "use strict";
      module.exports = function() {
        function identity(v2) {
          return v2;
        }
        function ignoreCase(v2) {
          return typeof v2 === "string" ? v2.toLowerCase() : v2;
        }
        function makeCompareFunction(f, opt) {
          opt = typeof opt === "object" ? opt : { direction: opt };
          if (typeof f != "function") {
            var prop = f;
            f = function(v1) {
              return !!v1[prop] ? v1[prop] : "";
            };
          }
          if (f.length === 1) {
            var uf = f;
            var preprocess = opt.ignoreCase ? ignoreCase : identity;
            var cmp = opt.cmp || function(v1, v2) {
              return v1 < v2 ? -1 : v1 > v2 ? 1 : 0;
            };
            f = function(v1, v2) {
              return cmp(preprocess(uf(v1)), preprocess(uf(v2)));
            };
          }
          const descTokens = { "-1": "", desc: "" };
          if (opt.direction in descTokens) return function(v1, v2) {
            return -f(v1, v2);
          };
          return f;
        }
        function tb(func, opt) {
          var x = typeof this == "function" && !this.firstBy ? this : false;
          var y = makeCompareFunction(func, opt);
          var f = x ? function(a, b) {
            return x(a, b) || y(a, b);
          } : y;
          f.thenBy = tb;
          return f;
        }
        tb.firstBy = tb;
        return tb;
      }();
    }
  });

  // src/constants.ts
  var FilterType = /* @__PURE__ */ ((FilterType2) => {
    FilterType2["IN"] = "in";
    FilterType2["BETWEEN"] = "between";
    FilterType2["CLOSED_OPEN"] = "closed_open";
    FilterType2["TIME"] = "time";
    FilterType2["STRING_SEARCH"] = "stringSearch";
    return FilterType2;
  })(FilterType || {});
  var DEFAULT_API_BASE_URL = "https://gcp-us-east1.api.carto.com";
  var SpatialIndexColumn = Object.freeze({
    ["h3" /* H3 */]: ["h3", "hex", "h3id", "hex_id", "h3hex"],
    ["quadbin" /* QUADBIN */]: ["quadbin"]
  });
  var AggregationTypes = {
    Count: "count",
    Avg: "avg",
    Min: "min",
    Max: "max",
    Sum: "sum",
    Custom: "custom"
  };

  // src/utils.ts
  var FILTER_TYPES = new Set(Object.values(FilterType));
  function assert(condition, message) {
    if (!condition) {
      throw new Error(message);
    }
  }
  var _InvalidColumnError = class _InvalidColumnError extends Error {
    constructor(message) {
      super(`${_InvalidColumnError.NAME}: ${message}`);
      this.name = _InvalidColumnError.NAME;
    }
    static is(error) {
      return error instanceof _InvalidColumnError || error.message?.includes(_InvalidColumnError.NAME);
    }
  };
  __publicField(_InvalidColumnError, "NAME", "InvalidColumnError");
  var InvalidColumnError = _InvalidColumnError;
  function assignOptional(target, ...sources) {
    for (const source2 of sources) {
      for (const key in source2) {
        if (source2[key] !== void 0) {
          target[key] = source2[key];
        }
      }
    }
    return target;
  }

  // src/utils/makeIntervalComplete.ts
  function makeIntervalComplete(intervals) {
    return intervals.map((val) => {
      if (val[0] === void 0 || val[0] === null) {
        return [Number.MIN_SAFE_INTEGER, val[1]];
      }
      if (val[1] === void 0 || val[1] === null) {
        return [val[0], Number.MAX_SAFE_INTEGER];
      }
      return val;
    });
  }

  // src/filters/FilterTypes.ts
  var filterFunctions = {
    ["in" /* IN */]: filterIn,
    ["between" /* BETWEEN */]: filterBetween,
    ["time" /* TIME */]: filterTime,
    ["closed_open" /* CLOSED_OPEN */]: filterClosedOpen,
    ["stringSearch" /* STRING_SEARCH */]: filterStringSearch
  };
  function filterIn(filterValues, featureValue) {
    return filterValues.includes(featureValue);
  }
  function filterBetween(filterValues, featureValue) {
    const checkRange = (range) => {
      const [lowerBound, upperBound] = range;
      return featureValue >= lowerBound && featureValue <= upperBound;
    };
    return makeIntervalComplete(filterValues).some(
      checkRange
    );
  }
  function filterTime(filterValues, featureValue) {
    const featureValueAsTimestamp = new Date(featureValue).getTime();
    if (isFinite(featureValueAsTimestamp)) {
      return filterBetween(filterValues, featureValueAsTimestamp);
    } else {
      throw new Error(`Column used to filter by time isn't well formatted.`);
    }
  }
  function filterClosedOpen(filterValues, featureValue) {
    const checkRange = (range) => {
      const [lowerBound, upperBound] = range;
      return featureValue >= lowerBound && featureValue < upperBound;
    };
    return makeIntervalComplete(filterValues).some(
      checkRange
    );
  }
  function filterStringSearch(filterValues, featureValue, params = {}) {
    const normalizedFeatureValue = normalize(featureValue, params);
    const stringRegExp = params.useRegExp ? filterValues : filterValues.map((filterValue) => {
      let stringRegExp2 = escapeRegExp(normalize(filterValue, params));
      if (params.mustStart) stringRegExp2 = `^${stringRegExp2}`;
      if (params.mustEnd) stringRegExp2 = `${stringRegExp2}$`;
      return stringRegExp2;
    });
    const regex = new RegExp(
      stringRegExp.join("|"),
      params.caseSensitive ? "g" : "gi"
    );
    return !!normalizedFeatureValue.match(regex);
  }
  var specialCharRegExp = /[.*+?^${}()|[\]\\]/g;
  var normalizeRegExp = /\p{Diacritic}/gu;
  function escapeRegExp(value) {
    return value.replace(specialCharRegExp, "\\$&");
  }
  function normalize(data, params) {
    let normalizedData = String(data);
    if (!params.keepSpecialCharacters)
      normalizedData = normalizedData.normalize("NFD").replace(normalizeRegExp, "");
    return normalizedData;
  }

  // src/filters/Filter.ts
  var LOGICAL_OPERATOR_METHODS = {
    and: "every",
    or: "some"
  };
  function passesFilter(columns, filters, feature2, filtersLogicalOperator) {
    const method = LOGICAL_OPERATOR_METHODS[filtersLogicalOperator];
    return columns[method]((column) => {
      const columnFilters = filters[column];
      const columnFilterTypes = Object.keys(columnFilters);
      if (!feature2 || feature2[column] === null || feature2[column] === void 0) {
        return false;
      }
      return columnFilterTypes.every((filter) => {
        const filterFunction = filterFunctions[filter];
        if (!filterFunction) {
          throw new Error(`"${filter}" filter is not implemented.`);
        }
        return filterFunction(
          columnFilters[filter].values,
          feature2[column],
          columnFilters[filter].params
        );
      });
    });
  }
  function _buildFeatureFilter({
    filters = {},
    type = "boolean",
    filtersLogicalOperator = "and"
  }) {
    const columns = Object.keys(filters);
    if (!columns.length) {
      return () => type === "number" ? 1 : true;
    }
    return (feature2) => {
      const f = feature2.properties || feature2;
      const featurePassesFilter = passesFilter(
        columns,
        filters,
        f,
        filtersLogicalOperator
      );
      return type === "number" ? Number(featurePassesFilter) : featurePassesFilter;
    };
  }
  function applyFilters(features, filters, filtersLogicalOperator) {
    return Object.keys(filters).length ? features.filter(_buildFeatureFilter({ filters, filtersLogicalOperator })) : features;
  }

  // node_modules/robust-predicates/esm/util.js
  var epsilon = 11102230246251565e-32;
  var splitter = 134217729;
  var resulterrbound = (3 + 8 * epsilon) * epsilon;
  function sum(elen, e, flen, f, h) {
    let Q, Qnew, hh, bvirt;
    let enow = e[0];
    let fnow = f[0];
    let eindex = 0;
    let findex = 0;
    if (fnow > enow === fnow > -enow) {
      Q = enow;
      enow = e[++eindex];
    } else {
      Q = fnow;
      fnow = f[++findex];
    }
    let hindex = 0;
    if (eindex < elen && findex < flen) {
      if (fnow > enow === fnow > -enow) {
        Qnew = enow + Q;
        hh = Q - (Qnew - enow);
        enow = e[++eindex];
      } else {
        Qnew = fnow + Q;
        hh = Q - (Qnew - fnow);
        fnow = f[++findex];
      }
      Q = Qnew;
      if (hh !== 0) {
        h[hindex++] = hh;
      }
      while (eindex < elen && findex < flen) {
        if (fnow > enow === fnow > -enow) {
          Qnew = Q + enow;
          bvirt = Qnew - Q;
          hh = Q - (Qnew - bvirt) + (enow - bvirt);
          enow = e[++eindex];
        } else {
          Qnew = Q + fnow;
          bvirt = Qnew - Q;
          hh = Q - (Qnew - bvirt) + (fnow - bvirt);
          fnow = f[++findex];
        }
        Q = Qnew;
        if (hh !== 0) {
          h[hindex++] = hh;
        }
      }
    }
    while (eindex < elen) {
      Qnew = Q + enow;
      bvirt = Qnew - Q;
      hh = Q - (Qnew - bvirt) + (enow - bvirt);
      enow = e[++eindex];
      Q = Qnew;
      if (hh !== 0) {
        h[hindex++] = hh;
      }
    }
    while (findex < flen) {
      Qnew = Q + fnow;
      bvirt = Qnew - Q;
      hh = Q - (Qnew - bvirt) + (fnow - bvirt);
      fnow = f[++findex];
      Q = Qnew;
      if (hh !== 0) {
        h[hindex++] = hh;
      }
    }
    if (Q !== 0 || hindex === 0) {
      h[hindex++] = Q;
    }
    return hindex;
  }
  function estimate(elen, e) {
    let Q = e[0];
    for (let i = 1; i < elen; i++) Q += e[i];
    return Q;
  }
  function vec(n) {
    return new Float64Array(n);
  }

  // node_modules/robust-predicates/esm/orient2d.js
  var ccwerrboundA = (3 + 16 * epsilon) * epsilon;
  var ccwerrboundB = (2 + 12 * epsilon) * epsilon;
  var ccwerrboundC = (9 + 64 * epsilon) * epsilon * epsilon;
  var B = vec(4);
  var C1 = vec(8);
  var C2 = vec(12);
  var D = vec(16);
  var u = vec(4);
  function orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {
    let acxtail, acytail, bcxtail, bcytail;
    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u32;
    const acx = ax - cx;
    const bcx = bx - cx;
    const acy = ay - cy;
    const bcy = by - cy;
    s1 = acx * bcy;
    c = splitter * acx;
    ahi = c - (c - acx);
    alo = acx - ahi;
    c = splitter * bcy;
    bhi = c - (c - bcy);
    blo = bcy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = acy * bcx;
    c = splitter * acy;
    ahi = c - (c - acy);
    alo = acy - ahi;
    c = splitter * bcx;
    bhi = c - (c - bcx);
    blo = bcx - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    B[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    B[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u32 = _j + _i;
    bvirt = u32 - _j;
    B[2] = _j - (u32 - bvirt) + (_i - bvirt);
    B[3] = u32;
    let det = estimate(4, B);
    let errbound = ccwerrboundB * detsum;
    if (det >= errbound || -det >= errbound) {
      return det;
    }
    bvirt = ax - acx;
    acxtail = ax - (acx + bvirt) + (bvirt - cx);
    bvirt = bx - bcx;
    bcxtail = bx - (bcx + bvirt) + (bvirt - cx);
    bvirt = ay - acy;
    acytail = ay - (acy + bvirt) + (bvirt - cy);
    bvirt = by - bcy;
    bcytail = by - (bcy + bvirt) + (bvirt - cy);
    if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {
      return det;
    }
    errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);
    det += acx * bcytail + bcy * acxtail - (acy * bcxtail + bcx * acytail);
    if (det >= errbound || -det >= errbound) return det;
    s1 = acxtail * bcy;
    c = splitter * acxtail;
    ahi = c - (c - acxtail);
    alo = acxtail - ahi;
    c = splitter * bcy;
    bhi = c - (c - bcy);
    blo = bcy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = acytail * bcx;
    c = splitter * acytail;
    ahi = c - (c - acytail);
    alo = acytail - ahi;
    c = splitter * bcx;
    bhi = c - (c - bcx);
    blo = bcx - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    u[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    u[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u32 = _j + _i;
    bvirt = u32 - _j;
    u[2] = _j - (u32 - bvirt) + (_i - bvirt);
    u[3] = u32;
    const C1len = sum(4, B, 4, u, C1);
    s1 = acx * bcytail;
    c = splitter * acx;
    ahi = c - (c - acx);
    alo = acx - ahi;
    c = splitter * bcytail;
    bhi = c - (c - bcytail);
    blo = bcytail - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = acy * bcxtail;
    c = splitter * acy;
    ahi = c - (c - acy);
    alo = acy - ahi;
    c = splitter * bcxtail;
    bhi = c - (c - bcxtail);
    blo = bcxtail - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    u[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    u[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u32 = _j + _i;
    bvirt = u32 - _j;
    u[2] = _j - (u32 - bvirt) + (_i - bvirt);
    u[3] = u32;
    const C2len = sum(C1len, C1, 4, u, C2);
    s1 = acxtail * bcytail;
    c = splitter * acxtail;
    ahi = c - (c - acxtail);
    alo = acxtail - ahi;
    c = splitter * bcytail;
    bhi = c - (c - bcytail);
    blo = bcytail - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = acytail * bcxtail;
    c = splitter * acytail;
    ahi = c - (c - acytail);
    alo = acytail - ahi;
    c = splitter * bcxtail;
    bhi = c - (c - bcxtail);
    blo = bcxtail - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    u[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    u[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u32 = _j + _i;
    bvirt = u32 - _j;
    u[2] = _j - (u32 - bvirt) + (_i - bvirt);
    u[3] = u32;
    const Dlen = sum(C2len, C2, 4, u, D);
    return D[Dlen - 1];
  }
  function orient2d(ax, ay, bx, by, cx, cy) {
    const detleft = (ay - cy) * (bx - cx);
    const detright = (ax - cx) * (by - cy);
    const det = detleft - detright;
    const detsum = Math.abs(detleft + detright);
    if (Math.abs(det) >= ccwerrboundA * detsum) return det;
    return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);
  }

  // node_modules/robust-predicates/esm/orient3d.js
  var o3derrboundA = (7 + 56 * epsilon) * epsilon;
  var o3derrboundB = (3 + 28 * epsilon) * epsilon;
  var o3derrboundC = (26 + 288 * epsilon) * epsilon * epsilon;
  var bc = vec(4);
  var ca = vec(4);
  var ab = vec(4);
  var at_b = vec(4);
  var at_c = vec(4);
  var bt_c = vec(4);
  var bt_a = vec(4);
  var ct_a = vec(4);
  var ct_b = vec(4);
  var bct = vec(8);
  var cat = vec(8);
  var abt = vec(8);
  var u2 = vec(4);
  var _8 = vec(8);
  var _8b = vec(8);
  var _16 = vec(8);
  var _12 = vec(12);
  var fin = vec(192);
  var fin2 = vec(192);

  // node_modules/robust-predicates/esm/incircle.js
  var iccerrboundA = (10 + 96 * epsilon) * epsilon;
  var iccerrboundB = (4 + 48 * epsilon) * epsilon;
  var iccerrboundC = (44 + 576 * epsilon) * epsilon * epsilon;
  var bc2 = vec(4);
  var ca2 = vec(4);
  var ab2 = vec(4);
  var aa = vec(4);
  var bb = vec(4);
  var cc = vec(4);
  var u3 = vec(4);
  var v = vec(4);
  var axtbc = vec(8);
  var aytbc = vec(8);
  var bxtca = vec(8);
  var bytca = vec(8);
  var cxtab = vec(8);
  var cytab = vec(8);
  var abt2 = vec(8);
  var bct2 = vec(8);
  var cat2 = vec(8);
  var abtt = vec(4);
  var bctt = vec(4);
  var catt = vec(4);
  var _82 = vec(8);
  var _162 = vec(16);
  var _16b = vec(16);
  var _16c = vec(16);
  var _32 = vec(32);
  var _32b = vec(32);
  var _48 = vec(48);
  var _64 = vec(64);
  var fin3 = vec(1152);
  var fin22 = vec(1152);

  // node_modules/robust-predicates/esm/insphere.js
  var isperrboundA = (16 + 224 * epsilon) * epsilon;
  var isperrboundB = (5 + 72 * epsilon) * epsilon;
  var isperrboundC = (71 + 1408 * epsilon) * epsilon * epsilon;
  var ab3 = vec(4);
  var bc3 = vec(4);
  var cd = vec(4);
  var de = vec(4);
  var ea = vec(4);
  var ac = vec(4);
  var bd = vec(4);
  var ce = vec(4);
  var da = vec(4);
  var eb = vec(4);
  var abc = vec(24);
  var bcd = vec(24);
  var cde = vec(24);
  var dea = vec(24);
  var eab = vec(24);
  var abd = vec(24);
  var bce = vec(24);
  var cda = vec(24);
  var deb = vec(24);
  var eac = vec(24);
  var adet = vec(1152);
  var bdet = vec(1152);
  var cdet = vec(1152);
  var ddet = vec(1152);
  var edet = vec(1152);
  var abdet = vec(2304);
  var cddet = vec(2304);
  var cdedet = vec(3456);
  var deter = vec(5760);
  var _83 = vec(8);
  var _8b2 = vec(8);
  var _8c = vec(8);
  var _163 = vec(16);
  var _24 = vec(24);
  var _482 = vec(48);
  var _48b = vec(48);
  var _96 = vec(96);
  var _192 = vec(192);
  var _384x = vec(384);
  var _384y = vec(384);
  var _384z = vec(384);
  var _768 = vec(768);
  var xdet = vec(96);
  var ydet = vec(96);
  var zdet = vec(96);
  var fin4 = vec(1152);

  // node_modules/point-in-polygon-hao/dist/esm/index.js
  function pointInPolygon(p, polygon2) {
    var i;
    var ii;
    var k = 0;
    var f;
    var u1;
    var v1;
    var u22;
    var v2;
    var currentP;
    var nextP;
    var x = p[0];
    var y = p[1];
    var numContours = polygon2.length;
    for (i = 0; i < numContours; i++) {
      ii = 0;
      var contour = polygon2[i];
      var contourLen = contour.length - 1;
      currentP = contour[0];
      if (currentP[0] !== contour[contourLen][0] && currentP[1] !== contour[contourLen][1]) {
        throw new Error("First and last coordinates in a ring must be the same");
      }
      u1 = currentP[0] - x;
      v1 = currentP[1] - y;
      for (ii; ii < contourLen; ii++) {
        nextP = contour[ii + 1];
        u22 = nextP[0] - x;
        v2 = nextP[1] - y;
        if (v1 === 0 && v2 === 0) {
          if (u22 <= 0 && u1 >= 0 || u1 <= 0 && u22 >= 0) {
            return 0;
          }
        } else if (v2 >= 0 && v1 <= 0 || v2 <= 0 && v1 >= 0) {
          f = orient2d(u1, u22, v1, v2, 0, 0);
          if (f === 0) {
            return 0;
          }
          if (f > 0 && v2 > 0 && v1 <= 0 || f < 0 && v2 <= 0 && v1 > 0) {
            k++;
          }
        }
        currentP = nextP;
        v1 = v2;
        u1 = u22;
      }
    }
    if (k % 2 === 0) {
      return false;
    }
    return true;
  }

  // node_modules/@turf/helpers/dist/esm/index.js
  var earthRadius = 63710088e-1;
  var factors = {
    centimeters: earthRadius * 100,
    centimetres: earthRadius * 100,
    degrees: 360 / (2 * Math.PI),
    feet: earthRadius * 3.28084,
    inches: earthRadius * 39.37,
    kilometers: earthRadius / 1e3,
    kilometres: earthRadius / 1e3,
    meters: earthRadius,
    metres: earthRadius,
    miles: earthRadius / 1609.344,
    millimeters: earthRadius * 1e3,
    millimetres: earthRadius * 1e3,
    nauticalmiles: earthRadius / 1852,
    radians: 1,
    yards: earthRadius * 1.0936
  };
  function feature(geom, properties, options = {}) {
    const feat = { type: "Feature" };
    if (options.id === 0 || options.id) {
      feat.id = options.id;
    }
    if (options.bbox) {
      feat.bbox = options.bbox;
    }
    feat.properties = properties || {};
    feat.geometry = geom;
    return feat;
  }
  function point(coordinates, properties, options = {}) {
    if (!coordinates) {
      throw new Error("coordinates is required");
    }
    if (!Array.isArray(coordinates)) {
      throw new Error("coordinates must be an Array");
    }
    if (coordinates.length < 2) {
      throw new Error("coordinates must be at least 2 numbers long");
    }
    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {
      throw new Error("coordinates must contain numbers");
    }
    const geom = {
      type: "Point",
      coordinates
    };
    return feature(geom, properties, options);
  }
  function polygon(coordinates, properties, options = {}) {
    for (const ring of coordinates) {
      if (ring.length < 4) {
        throw new Error(
          "Each LinearRing of a Polygon must have 4 or more Positions."
        );
      }
      if (ring[ring.length - 1].length !== ring[0].length) {
        throw new Error("First and last Position are not equivalent.");
      }
      for (let j = 0; j < ring[ring.length - 1].length; j++) {
        if (ring[ring.length - 1][j] !== ring[0][j]) {
          throw new Error("First and last Position are not equivalent.");
        }
      }
    }
    const geom = {
      type: "Polygon",
      coordinates
    };
    return feature(geom, properties, options);
  }
  function lineString(coordinates, properties, options = {}) {
    if (coordinates.length < 2) {
      throw new Error("coordinates must be an array of two or more positions");
    }
    const geom = {
      type: "LineString",
      coordinates
    };
    return feature(geom, properties, options);
  }
  function featureCollection(features, options = {}) {
    const fc = { type: "FeatureCollection" };
    if (options.id) {
      fc.id = options.id;
    }
    if (options.bbox) {
      fc.bbox = options.bbox;
    }
    fc.features = features;
    return fc;
  }
  function multiLineString(coordinates, properties, options = {}) {
    const geom = {
      type: "MultiLineString",
      coordinates
    };
    return feature(geom, properties, options);
  }
  function multiPolygon(coordinates, properties, options = {}) {
    const geom = {
      type: "MultiPolygon",
      coordinates
    };
    return feature(geom, properties, options);
  }
  function isNumber(num) {
    return !isNaN(num) && num !== null && !Array.isArray(num);
  }

  // node_modules/@turf/invariant/dist/esm/index.js
  function getCoord(coord) {
    if (!coord) {
      throw new Error("coord is required");
    }
    if (!Array.isArray(coord)) {
      if (coord.type === "Feature" && coord.geometry !== null && coord.geometry.type === "Point") {
        return [...coord.geometry.coordinates];
      }
      if (coord.type === "Point") {
        return [...coord.coordinates];
      }
    }
    if (Array.isArray(coord) && coord.length >= 2 && !Array.isArray(coord[0]) && !Array.isArray(coord[1])) {
      return [...coord];
    }
    throw new Error("coord must be GeoJSON Point or an Array of numbers");
  }
  function getCoords(coords) {
    if (Array.isArray(coords)) {
      return coords;
    }
    if (coords.type === "Feature") {
      if (coords.geometry !== null) {
        return coords.geometry.coordinates;
      }
    } else {
      if (coords.coordinates) {
        return coords.coordinates;
      }
    }
    throw new Error(
      "coords must be GeoJSON Feature, Geometry Object or an Array"
    );
  }
  function getGeom(geojson) {
    if (geojson.type === "Feature") {
      return geojson.geometry;
    }
    return geojson;
  }
  function getType(geojson, _name) {
    if (geojson.type === "FeatureCollection") {
      return "FeatureCollection";
    }
    if (geojson.type === "GeometryCollection") {
      return "GeometryCollection";
    }
    if (geojson.type === "Feature" && geojson.geometry !== null) {
      return geojson.geometry.type;
    }
    return geojson.type;
  }

  // node_modules/@turf/boolean-point-in-polygon/dist/esm/index.js
  function booleanPointInPolygon(point2, polygon2, options = {}) {
    if (!point2) {
      throw new Error("point is required");
    }
    if (!polygon2) {
      throw new Error("polygon is required");
    }
    const pt = getCoord(point2);
    const geom = getGeom(polygon2);
    const type = geom.type;
    const bbox2 = polygon2.bbox;
    let polys = geom.coordinates;
    if (bbox2 && inBBox(pt, bbox2) === false) {
      return false;
    }
    if (type === "Polygon") {
      polys = [polys];
    }
    let result = false;
    for (var i = 0; i < polys.length; ++i) {
      const polyResult = pointInPolygon(pt, polys[i]);
      if (polyResult === 0) return options.ignoreBoundary ? false : true;
      else if (polyResult) result = true;
    }
    return result;
  }
  function inBBox(pt, bbox2) {
    return bbox2[0] <= pt[0] && bbox2[1] <= pt[1] && bbox2[2] >= pt[0] && bbox2[3] >= pt[1];
  }

  // node_modules/sweepline-intersections/dist/sweeplineIntersections.esm.js
  var TinyQueue = class {
    constructor(data = [], compare2 = defaultCompare) {
      this.data = data;
      this.length = this.data.length;
      this.compare = compare2;
      if (this.length > 0) {
        for (let i = (this.length >> 1) - 1; i >= 0; i--) this._down(i);
      }
    }
    push(item) {
      this.data.push(item);
      this.length++;
      this._up(this.length - 1);
    }
    pop() {
      if (this.length === 0) return void 0;
      const top = this.data[0];
      const bottom = this.data.pop();
      this.length--;
      if (this.length > 0) {
        this.data[0] = bottom;
        this._down(0);
      }
      return top;
    }
    peek() {
      return this.data[0];
    }
    _up(pos) {
      const { data, compare: compare2 } = this;
      const item = data[pos];
      while (pos > 0) {
        const parent = pos - 1 >> 1;
        const current = data[parent];
        if (compare2(item, current) >= 0) break;
        data[pos] = current;
        pos = parent;
      }
      data[pos] = item;
    }
    _down(pos) {
      const { data, compare: compare2 } = this;
      const halfLength = this.length >> 1;
      const item = data[pos];
      while (pos < halfLength) {
        let left = (pos << 1) + 1;
        let best = data[left];
        const right = left + 1;
        if (right < this.length && compare2(data[right], best) < 0) {
          left = right;
          best = data[right];
        }
        if (compare2(best, item) >= 0) break;
        data[pos] = best;
        pos = left;
      }
      data[pos] = item;
    }
  };
  function defaultCompare(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }
  function checkWhichEventIsLeft(e1, e2) {
    if (e1.p.x > e2.p.x) return 1;
    if (e1.p.x < e2.p.x) return -1;
    if (e1.p.y !== e2.p.y) return e1.p.y > e2.p.y ? 1 : -1;
    return 1;
  }
  function checkWhichSegmentHasRightEndpointFirst(seg1, seg2) {
    if (seg1.rightSweepEvent.p.x > seg2.rightSweepEvent.p.x) return 1;
    if (seg1.rightSweepEvent.p.x < seg2.rightSweepEvent.p.x) return -1;
    if (seg1.rightSweepEvent.p.y !== seg2.rightSweepEvent.p.y) return seg1.rightSweepEvent.p.y < seg2.rightSweepEvent.p.y ? 1 : -1;
    return 1;
  }
  var Event = class {
    constructor(p, featureId2, ringId2, eventId2) {
      this.p = {
        x: p[0],
        y: p[1]
      };
      this.featureId = featureId2;
      this.ringId = ringId2;
      this.eventId = eventId2;
      this.otherEvent = null;
      this.isLeftEndpoint = null;
    }
    isSamePoint(eventToCheck) {
      return this.p.x === eventToCheck.p.x && this.p.y === eventToCheck.p.y;
    }
  };
  function fillEventQueue(geojson, eventQueue) {
    if (geojson.type === "FeatureCollection") {
      const features = geojson.features;
      for (let i = 0; i < features.length; i++) {
        processFeature(features[i], eventQueue);
      }
    } else {
      processFeature(geojson, eventQueue);
    }
  }
  var featureId = 0;
  var ringId = 0;
  var eventId = 0;
  function processFeature(featureOrGeometry, eventQueue) {
    const geom = featureOrGeometry.type === "Feature" ? featureOrGeometry.geometry : featureOrGeometry;
    let coords = geom.coordinates;
    if (geom.type === "Polygon" || geom.type === "MultiLineString") coords = [coords];
    if (geom.type === "LineString") coords = [[coords]];
    for (let i = 0; i < coords.length; i++) {
      for (let ii = 0; ii < coords[i].length; ii++) {
        let currentP = coords[i][ii][0];
        let nextP = null;
        ringId = ringId + 1;
        for (let iii = 0; iii < coords[i][ii].length - 1; iii++) {
          nextP = coords[i][ii][iii + 1];
          const e1 = new Event(currentP, featureId, ringId, eventId);
          const e2 = new Event(nextP, featureId, ringId, eventId + 1);
          e1.otherEvent = e2;
          e2.otherEvent = e1;
          if (checkWhichEventIsLeft(e1, e2) > 0) {
            e2.isLeftEndpoint = true;
            e1.isLeftEndpoint = false;
          } else {
            e1.isLeftEndpoint = true;
            e2.isLeftEndpoint = false;
          }
          eventQueue.push(e1);
          eventQueue.push(e2);
          currentP = nextP;
          eventId = eventId + 1;
        }
      }
    }
    featureId = featureId + 1;
  }
  var Segment = class {
    constructor(event) {
      this.leftSweepEvent = event;
      this.rightSweepEvent = event.otherEvent;
    }
  };
  function testSegmentIntersect(seg1, seg2) {
    if (seg1 === null || seg2 === null) return false;
    if (seg1.leftSweepEvent.ringId === seg2.leftSweepEvent.ringId && (seg1.rightSweepEvent.isSamePoint(seg2.leftSweepEvent) || seg1.rightSweepEvent.isSamePoint(seg2.leftSweepEvent) || seg1.rightSweepEvent.isSamePoint(seg2.rightSweepEvent) || seg1.leftSweepEvent.isSamePoint(seg2.leftSweepEvent) || seg1.leftSweepEvent.isSamePoint(seg2.rightSweepEvent))) return false;
    const x1 = seg1.leftSweepEvent.p.x;
    const y1 = seg1.leftSweepEvent.p.y;
    const x2 = seg1.rightSweepEvent.p.x;
    const y2 = seg1.rightSweepEvent.p.y;
    const x3 = seg2.leftSweepEvent.p.x;
    const y3 = seg2.leftSweepEvent.p.y;
    const x4 = seg2.rightSweepEvent.p.x;
    const y4 = seg2.rightSweepEvent.p.y;
    const denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    const numeA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
    const numeB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
    if (denom === 0) {
      if (numeA === 0 && numeB === 0) return false;
      return false;
    }
    const uA = numeA / denom;
    const uB = numeB / denom;
    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {
      const x = x1 + uA * (x2 - x1);
      const y = y1 + uA * (y2 - y1);
      return [x, y];
    }
    return false;
  }
  function runCheck(eventQueue, ignoreSelfIntersections) {
    ignoreSelfIntersections = ignoreSelfIntersections ? ignoreSelfIntersections : false;
    const intersectionPoints = [];
    const outQueue = new TinyQueue([], checkWhichSegmentHasRightEndpointFirst);
    while (eventQueue.length) {
      const event = eventQueue.pop();
      if (event.isLeftEndpoint) {
        const segment = new Segment(event);
        for (let i = 0; i < outQueue.data.length; i++) {
          const otherSeg = outQueue.data[i];
          if (ignoreSelfIntersections) {
            if (otherSeg.leftSweepEvent.featureId === event.featureId) continue;
          }
          const intersection3 = testSegmentIntersect(segment, otherSeg);
          if (intersection3 !== false) intersectionPoints.push(intersection3);
        }
        outQueue.push(segment);
      } else if (event.isLeftEndpoint === false) {
        outQueue.pop();
      }
    }
    return intersectionPoints;
  }
  function sweeplineIntersections(geojson, ignoreSelfIntersections) {
    const eventQueue = new TinyQueue([], checkWhichEventIsLeft);
    fillEventQueue(geojson, eventQueue);
    return runCheck(eventQueue, ignoreSelfIntersections);
  }
  var sweeplineIntersections_esm_default = sweeplineIntersections;

  // node_modules/@turf/line-intersect/dist/esm/index.js
  var sweeplineIntersections2 = sweeplineIntersections_esm_default;
  function lineIntersect(line1, line2, options = {}) {
    const { removeDuplicates = true, ignoreSelfIntersections = true } = options;
    let features = [];
    if (line1.type === "FeatureCollection")
      features = features.concat(line1.features);
    else if (line1.type === "Feature") features.push(line1);
    else if (line1.type === "LineString" || line1.type === "Polygon" || line1.type === "MultiLineString" || line1.type === "MultiPolygon") {
      features.push(feature(line1));
    }
    if (line2.type === "FeatureCollection")
      features = features.concat(line2.features);
    else if (line2.type === "Feature") features.push(line2);
    else if (line2.type === "LineString" || line2.type === "Polygon" || line2.type === "MultiLineString" || line2.type === "MultiPolygon") {
      features.push(feature(line2));
    }
    const intersections = sweeplineIntersections2(
      featureCollection(features),
      ignoreSelfIntersections
    );
    let results = [];
    if (removeDuplicates) {
      const unique = {};
      intersections.forEach((intersection3) => {
        const key = intersection3.join(",");
        if (!unique[key]) {
          unique[key] = true;
          results.push(intersection3);
        }
      });
    } else {
      results = intersections;
    }
    return featureCollection(results.map((r) => point(r)));
  }

  // node_modules/@turf/meta/dist/esm/index.js
  function coordEach(geojson, callback, excludeWrapCoord) {
    if (geojson === null) return;
    var j, k, l, geometry, stopG, coords, geometryMaybeCollection, wrapShrink = 0, coordIndex = 0, isGeometryCollection, type = geojson.type, isFeatureCollection = type === "FeatureCollection", isFeature = type === "Feature", stop = isFeatureCollection ? geojson.features.length : 1;
    for (var featureIndex = 0; featureIndex < stop; featureIndex++) {
      geometryMaybeCollection = isFeatureCollection ? geojson.features[featureIndex].geometry : isFeature ? geojson.geometry : geojson;
      isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === "GeometryCollection" : false;
      stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;
      for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {
        var multiFeatureIndex = 0;
        var geometryIndex = 0;
        geometry = isGeometryCollection ? geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection;
        if (geometry === null) continue;
        coords = geometry.coordinates;
        var geomType = geometry.type;
        wrapShrink = excludeWrapCoord && (geomType === "Polygon" || geomType === "MultiPolygon") ? 1 : 0;
        switch (geomType) {
          case null:
            break;
          case "Point":
            if (callback(
              coords,
              coordIndex,
              featureIndex,
              multiFeatureIndex,
              geometryIndex
            ) === false)
              return false;
            coordIndex++;
            multiFeatureIndex++;
            break;
          case "LineString":
          case "MultiPoint":
            for (j = 0; j < coords.length; j++) {
              if (callback(
                coords[j],
                coordIndex,
                featureIndex,
                multiFeatureIndex,
                geometryIndex
              ) === false)
                return false;
              coordIndex++;
              if (geomType === "MultiPoint") multiFeatureIndex++;
            }
            if (geomType === "LineString") multiFeatureIndex++;
            break;
          case "Polygon":
          case "MultiLineString":
            for (j = 0; j < coords.length; j++) {
              for (k = 0; k < coords[j].length - wrapShrink; k++) {
                if (callback(
                  coords[j][k],
                  coordIndex,
                  featureIndex,
                  multiFeatureIndex,
                  geometryIndex
                ) === false)
                  return false;
                coordIndex++;
              }
              if (geomType === "MultiLineString") multiFeatureIndex++;
              if (geomType === "Polygon") geometryIndex++;
            }
            if (geomType === "Polygon") multiFeatureIndex++;
            break;
          case "MultiPolygon":
            for (j = 0; j < coords.length; j++) {
              geometryIndex = 0;
              for (k = 0; k < coords[j].length; k++) {
                for (l = 0; l < coords[j][k].length - wrapShrink; l++) {
                  if (callback(
                    coords[j][k][l],
                    coordIndex,
                    featureIndex,
                    multiFeatureIndex,
                    geometryIndex
                  ) === false)
                    return false;
                  coordIndex++;
                }
                geometryIndex++;
              }
              multiFeatureIndex++;
            }
            break;
          case "GeometryCollection":
            for (j = 0; j < geometry.geometries.length; j++)
              if (coordEach(geometry.geometries[j], callback, excludeWrapCoord) === false)
                return false;
            break;
          default:
            throw new Error("Unknown Geometry Type");
        }
      }
    }
  }
  function geomEach(geojson, callback) {
    var i, j, g, geometry, stopG, geometryMaybeCollection, isGeometryCollection, featureProperties, featureBBox, featureId2, featureIndex = 0, isFeatureCollection = geojson.type === "FeatureCollection", isFeature = geojson.type === "Feature", stop = isFeatureCollection ? geojson.features.length : 1;
    for (i = 0; i < stop; i++) {
      geometryMaybeCollection = isFeatureCollection ? geojson.features[i].geometry : isFeature ? geojson.geometry : geojson;
      featureProperties = isFeatureCollection ? geojson.features[i].properties : isFeature ? geojson.properties : {};
      featureBBox = isFeatureCollection ? geojson.features[i].bbox : isFeature ? geojson.bbox : void 0;
      featureId2 = isFeatureCollection ? geojson.features[i].id : isFeature ? geojson.id : void 0;
      isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === "GeometryCollection" : false;
      stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;
      for (g = 0; g < stopG; g++) {
        geometry = isGeometryCollection ? geometryMaybeCollection.geometries[g] : geometryMaybeCollection;
        if (geometry === null) {
          if (callback(
            null,
            featureIndex,
            featureProperties,
            featureBBox,
            featureId2
          ) === false)
            return false;
          continue;
        }
        switch (geometry.type) {
          case "Point":
          case "LineString":
          case "MultiPoint":
          case "Polygon":
          case "MultiLineString":
          case "MultiPolygon": {
            if (callback(
              geometry,
              featureIndex,
              featureProperties,
              featureBBox,
              featureId2
            ) === false)
              return false;
            break;
          }
          case "GeometryCollection": {
            for (j = 0; j < geometry.geometries.length; j++) {
              if (callback(
                geometry.geometries[j],
                featureIndex,
                featureProperties,
                featureBBox,
                featureId2
              ) === false)
                return false;
            }
            break;
          }
          default:
            throw new Error("Unknown Geometry Type");
        }
      }
      featureIndex++;
    }
  }
  function flattenEach(geojson, callback) {
    geomEach(geojson, function(geometry, featureIndex, properties, bbox2, id) {
      var type = geometry === null ? null : geometry.type;
      switch (type) {
        case null:
        case "Point":
        case "LineString":
        case "Polygon":
          if (callback(
            feature(geometry, properties, { bbox: bbox2, id }),
            featureIndex,
            0
          ) === false)
            return false;
          return;
      }
      var geomType;
      switch (type) {
        case "MultiPoint":
          geomType = "Point";
          break;
        case "MultiLineString":
          geomType = "LineString";
          break;
        case "MultiPolygon":
          geomType = "Polygon";
          break;
      }
      for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {
        var coordinate = geometry.coordinates[multiFeatureIndex];
        var geom = {
          type: geomType,
          coordinates: coordinate
        };
        if (callback(feature(geom, properties), featureIndex, multiFeatureIndex) === false)
          return false;
      }
    });
  }

  // node_modules/@turf/polygon-to-line/dist/esm/index.js
  function polygonToLine(poly, options = {}) {
    const geom = getGeom(poly);
    if (!options.properties && poly.type === "Feature") {
      options.properties = poly.properties;
    }
    switch (geom.type) {
      case "Polygon":
        return singlePolygonToLine(geom, options);
      case "MultiPolygon":
        return multiPolygonToLine(geom, options);
      default:
        throw new Error("invalid poly");
    }
  }
  function singlePolygonToLine(poly, options = {}) {
    const geom = getGeom(poly);
    const coords = geom.coordinates;
    const properties = options.properties ? options.properties : poly.type === "Feature" ? poly.properties : {};
    return coordsToLine(coords, properties);
  }
  function multiPolygonToLine(multiPoly, options = {}) {
    const geom = getGeom(multiPoly);
    const coords = geom.coordinates;
    const properties = options.properties ? options.properties : multiPoly.type === "Feature" ? multiPoly.properties : {};
    const lines = [];
    coords.forEach((coord) => {
      lines.push(coordsToLine(coord, properties));
    });
    return featureCollection(lines);
  }
  function coordsToLine(coords, properties) {
    if (coords.length > 1) {
      return multiLineString(coords, properties);
    }
    return lineString(coords[0], properties);
  }

  // node_modules/@turf/boolean-disjoint/dist/esm/index.js
  function booleanDisjoint(feature1, feature2, {
    ignoreSelfIntersections = true
  } = { ignoreSelfIntersections: true }) {
    let bool = true;
    flattenEach(feature1, (flatten1) => {
      flattenEach(feature2, (flatten2) => {
        if (bool === false) {
          return false;
        }
        bool = disjoint(
          flatten1.geometry,
          flatten2.geometry,
          ignoreSelfIntersections
        );
      });
    });
    return bool;
  }
  function disjoint(geom1, geom2, ignoreSelfIntersections) {
    switch (geom1.type) {
      case "Point":
        switch (geom2.type) {
          case "Point":
            return !compareCoords(geom1.coordinates, geom2.coordinates);
          case "LineString":
            return !isPointOnLine(geom2, geom1);
          case "Polygon":
            return !booleanPointInPolygon(geom1, geom2);
        }
        break;
      case "LineString":
        switch (geom2.type) {
          case "Point":
            return !isPointOnLine(geom1, geom2);
          case "LineString":
            return !isLineOnLine(geom1, geom2, ignoreSelfIntersections);
          case "Polygon":
            return !isLineInPoly(geom2, geom1, ignoreSelfIntersections);
        }
        break;
      case "Polygon":
        switch (geom2.type) {
          case "Point":
            return !booleanPointInPolygon(geom2, geom1);
          case "LineString":
            return !isLineInPoly(geom1, geom2, ignoreSelfIntersections);
          case "Polygon":
            return !isPolyInPoly(geom2, geom1, ignoreSelfIntersections);
        }
    }
    return false;
  }
  function isPointOnLine(lineString2, pt) {
    for (let i = 0; i < lineString2.coordinates.length - 1; i++) {
      if (isPointOnLineSegment(
        lineString2.coordinates[i],
        lineString2.coordinates[i + 1],
        pt.coordinates
      )) {
        return true;
      }
    }
    return false;
  }
  function isLineOnLine(lineString1, lineString2, ignoreSelfIntersections) {
    const doLinesIntersect = lineIntersect(lineString1, lineString2, {
      ignoreSelfIntersections
    });
    if (doLinesIntersect.features.length > 0) {
      return true;
    }
    return false;
  }
  function isLineInPoly(polygon2, lineString2, ignoreSelfIntersections) {
    for (const coord of lineString2.coordinates) {
      if (booleanPointInPolygon(coord, polygon2)) {
        return true;
      }
    }
    const doLinesIntersect = lineIntersect(lineString2, polygonToLine(polygon2), {
      ignoreSelfIntersections
    });
    if (doLinesIntersect.features.length > 0) {
      return true;
    }
    return false;
  }
  function isPolyInPoly(feature1, feature2, ignoreSelfIntersections) {
    for (const coord1 of feature1.coordinates[0]) {
      if (booleanPointInPolygon(coord1, feature2)) {
        return true;
      }
    }
    for (const coord2 of feature2.coordinates[0]) {
      if (booleanPointInPolygon(coord2, feature1)) {
        return true;
      }
    }
    const doLinesIntersect = lineIntersect(
      polygonToLine(feature1),
      polygonToLine(feature2),
      { ignoreSelfIntersections }
    );
    if (doLinesIntersect.features.length > 0) {
      return true;
    }
    return false;
  }
  function isPointOnLineSegment(lineSegmentStart, lineSegmentEnd, pt) {
    const dxc = pt[0] - lineSegmentStart[0];
    const dyc = pt[1] - lineSegmentStart[1];
    const dxl = lineSegmentEnd[0] - lineSegmentStart[0];
    const dyl = lineSegmentEnd[1] - lineSegmentStart[1];
    const cross = dxc * dyl - dyc * dxl;
    if (cross !== 0) {
      return false;
    }
    if (Math.abs(dxl) >= Math.abs(dyl)) {
      if (dxl > 0) {
        return lineSegmentStart[0] <= pt[0] && pt[0] <= lineSegmentEnd[0];
      } else {
        return lineSegmentEnd[0] <= pt[0] && pt[0] <= lineSegmentStart[0];
      }
    } else if (dyl > 0) {
      return lineSegmentStart[1] <= pt[1] && pt[1] <= lineSegmentEnd[1];
    } else {
      return lineSegmentEnd[1] <= pt[1] && pt[1] <= lineSegmentStart[1];
    }
  }
  function compareCoords(pair1, pair2) {
    return pair1[0] === pair2[0] && pair1[1] === pair2[1];
  }

  // node_modules/@turf/boolean-intersects/dist/esm/index.js
  function booleanIntersects(feature1, feature2, {
    ignoreSelfIntersections = true
  } = {}) {
    let bool = false;
    flattenEach(feature1, (flatten1) => {
      flattenEach(feature2, (flatten2) => {
        if (bool === true) {
          return true;
        }
        bool = !booleanDisjoint(flatten1.geometry, flatten2.geometry, {
          ignoreSelfIntersections
        });
      });
    });
    return bool;
  }
  var turf_boolean_intersects_default = booleanIntersects;

  // src/filters/geosjonFeatures.ts
  function geojsonFeatures({
    geojson,
    spatialFilter,
    uniqueIdProperty
  }) {
    let uniqueIdx = 0;
    const map = /* @__PURE__ */ new Map();
    if (!spatialFilter) {
      return [];
    }
    for (const feature2 of geojson.features) {
      const uniqueId = uniqueIdProperty ? feature2.properties[uniqueIdProperty] : ++uniqueIdx;
      if (!map.has(uniqueId) && turf_boolean_intersects_default(spatialFilter, feature2)) {
        map.set(uniqueId, feature2.properties);
      }
    }
    return Array.from(map.values());
  }

  // node_modules/@math.gl/core/dist/lib/common.js
  var RADIANS_TO_DEGREES = 1 / Math.PI * 180;
  var DEGREES_TO_RADIANS = 1 / 180 * Math.PI;
  var DEFAULT_CONFIG = {
    EPSILON: 1e-12,
    debug: false,
    precision: 4,
    printTypes: false,
    printDegrees: false,
    printRowMajor: true,
    _cartographicRadians: false
  };
  globalThis.mathgl = globalThis.mathgl || { config: { ...DEFAULT_CONFIG } };
  var config = globalThis.mathgl.config;
  function isArray(value) {
    return Array.isArray(value) || ArrayBuffer.isView(value) && !(value instanceof DataView);
  }
  function lerp(a, b, t) {
    if (isArray(a)) {
      return a.map((ai, i) => lerp(ai, b[i], t));
    }
    return t * b + (1 - t) * a;
  }

  // node_modules/@math.gl/web-mercator/dist/assert.js
  function assert2(condition, message) {
    if (!condition) {
      throw new Error(message || "@math.gl/web-mercator: assertion failed.");
    }
  }

  // node_modules/@math.gl/web-mercator/dist/web-mercator-utils.js
  var PI = Math.PI;
  var PI_4 = PI / 4;
  var DEGREES_TO_RADIANS2 = PI / 180;
  var RADIANS_TO_DEGREES2 = 180 / PI;
  var TILE_SIZE = 512;
  function lngLatToWorld(lngLat) {
    const [lng, lat] = lngLat;
    assert2(Number.isFinite(lng));
    assert2(Number.isFinite(lat) && lat >= -90 && lat <= 90, "invalid latitude");
    const lambda2 = lng * DEGREES_TO_RADIANS2;
    const phi2 = lat * DEGREES_TO_RADIANS2;
    const x = TILE_SIZE * (lambda2 + PI) / (2 * PI);
    const y = TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5))) / (2 * PI);
    return [x, y];
  }
  function worldToLngLat(xy) {
    const [x, y] = xy;
    const lambda2 = x / TILE_SIZE * (2 * PI) - PI;
    const phi2 = 2 * (Math.atan(Math.exp(y / TILE_SIZE * (2 * PI) - PI)) - PI_4);
    return [lambda2 * RADIANS_TO_DEGREES2, phi2 * RADIANS_TO_DEGREES2];
  }

  // node_modules/@math.gl/web-mercator/dist/get-bounds.js
  var DEGREES_TO_RADIANS3 = Math.PI / 180;

  // src/utils/transformTileCoordsToWGS84.ts
  var TRANSFORM_FN = {
    Point: transformPoint,
    MultiPoint: transformMultiPoint,
    LineString: transformLineString,
    MultiLineString: transformMultiLineString,
    Polygon: transformPolygon,
    MultiPolygon: transformMultiPolygon
  };
  function transformTileCoordsToWGS84(geometry, bbox2) {
    const [west, south, east, north] = bbox2;
    const nw = lngLatToWorld([west, north]);
    const se = lngLatToWorld([east, south]);
    const projectedBbox = [nw, se];
    if (geometry.type === "GeometryCollection") {
      throw new Error("Unsupported geometry type GeometryCollection");
    }
    const transformFn = TRANSFORM_FN[geometry.type];
    const coordinates = transformFn(geometry.coordinates, projectedBbox);
    return { ...geometry, coordinates };
  }
  function transformPoint([pointX, pointY], [nw, se]) {
    const x = lerp(nw[0], se[0], pointX);
    const y = lerp(nw[1], se[1], pointY);
    return worldToLngLat([x, y]);
  }
  function getPoints(geometry, bbox2) {
    return geometry.map((g) => transformPoint(g, bbox2));
  }
  function transformMultiPoint(multiPoint, bbox2) {
    return getPoints(multiPoint, bbox2);
  }
  function transformLineString(line, bbox2) {
    return getPoints(line, bbox2);
  }
  function transformMultiLineString(multiLineString2, bbox2) {
    return multiLineString2.map(
      (lineString2) => transformLineString(lineString2, bbox2)
    );
  }
  function transformPolygon(polygon2, bbox2) {
    return polygon2.map((polygonRing) => getPoints(polygonRing, bbox2));
  }
  function transformMultiPolygon(multiPolygon2, bbox2) {
    return multiPolygon2.map((polygon2) => transformPolygon(polygon2, bbox2));
  }

  // node_modules/@turf/bbox-polygon/dist/esm/index.js
  function bboxPolygon(bbox2, options = {}) {
    const west = Number(bbox2[0]);
    const south = Number(bbox2[1]);
    const east = Number(bbox2[2]);
    const north = Number(bbox2[3]);
    if (bbox2.length === 6) {
      throw new Error(
        "@turf/bbox-polygon does not support BBox with 6 positions"
      );
    }
    const lowLeft = [west, south];
    const topLeft = [west, north];
    const topRight = [east, north];
    const lowRight = [east, south];
    return polygon(
      [[lowLeft, lowRight, topRight, topLeft, lowLeft]],
      options.properties,
      { bbox: bbox2, id: options.id }
    );
  }
  var turf_bbox_polygon_default = bboxPolygon;

  // node_modules/@turf/bbox/dist/esm/index.js
  function bbox(geojson, options = {}) {
    if (geojson.bbox != null && true !== options.recompute) {
      return geojson.bbox;
    }
    const result = [Infinity, Infinity, -Infinity, -Infinity];
    coordEach(geojson, (coord) => {
      if (result[0] > coord[0]) {
        result[0] = coord[0];
      }
      if (result[1] > coord[1]) {
        result[1] = coord[1];
      }
      if (result[2] < coord[0]) {
        result[2] = coord[0];
      }
      if (result[3] < coord[1]) {
        result[3] = coord[1];
      }
    });
    return result;
  }

  // node_modules/@turf/boolean-point-on-line/dist/esm/index.js
  function booleanPointOnLine(pt, line, options = {}) {
    const ptCoords = getCoord(pt);
    const lineCoords = getCoords(line);
    for (let i = 0; i < lineCoords.length - 1; i++) {
      let ignoreBoundary = false;
      if (options.ignoreEndVertices) {
        if (i === 0) {
          ignoreBoundary = "start";
        }
        if (i === lineCoords.length - 2) {
          ignoreBoundary = "end";
        }
        if (i === 0 && i + 1 === lineCoords.length - 1) {
          ignoreBoundary = "both";
        }
      }
      if (isPointOnLineSegment2(
        lineCoords[i],
        lineCoords[i + 1],
        ptCoords,
        ignoreBoundary,
        typeof options.epsilon === "undefined" ? null : options.epsilon
      )) {
        return true;
      }
    }
    return false;
  }
  function isPointOnLineSegment2(lineSegmentStart, lineSegmentEnd, pt, excludeBoundary, epsilon2) {
    const x = pt[0];
    const y = pt[1];
    const x1 = lineSegmentStart[0];
    const y1 = lineSegmentStart[1];
    const x2 = lineSegmentEnd[0];
    const y2 = lineSegmentEnd[1];
    const dxc = pt[0] - x1;
    const dyc = pt[1] - y1;
    const dxl = x2 - x1;
    const dyl = y2 - y1;
    const cross = dxc * dyl - dyc * dxl;
    if (epsilon2 !== null) {
      if (Math.abs(cross) > epsilon2) {
        return false;
      }
    } else if (cross !== 0) {
      return false;
    }
    if (Math.abs(dxl) === Math.abs(dyl) && Math.abs(dxl) === 0) {
      if (excludeBoundary) {
        return false;
      }
      if (pt[0] === lineSegmentStart[0] && pt[1] === lineSegmentStart[1]) {
        return true;
      } else {
        return false;
      }
    }
    if (!excludeBoundary) {
      if (Math.abs(dxl) >= Math.abs(dyl)) {
        return dxl > 0 ? x1 <= x && x <= x2 : x2 <= x && x <= x1;
      }
      return dyl > 0 ? y1 <= y && y <= y2 : y2 <= y && y <= y1;
    } else if (excludeBoundary === "start") {
      if (Math.abs(dxl) >= Math.abs(dyl)) {
        return dxl > 0 ? x1 < x && x <= x2 : x2 <= x && x < x1;
      }
      return dyl > 0 ? y1 < y && y <= y2 : y2 <= y && y < y1;
    } else if (excludeBoundary === "end") {
      if (Math.abs(dxl) >= Math.abs(dyl)) {
        return dxl > 0 ? x1 <= x && x < x2 : x2 < x && x <= x1;
      }
      return dyl > 0 ? y1 <= y && y < y2 : y2 < y && y <= y1;
    } else if (excludeBoundary === "both") {
      if (Math.abs(dxl) >= Math.abs(dyl)) {
        return dxl > 0 ? x1 < x && x < x2 : x2 < x && x < x1;
      }
      return dyl > 0 ? y1 < y && y < y2 : y2 < y && y < y1;
    }
    return false;
  }

  // node_modules/@turf/boolean-within/dist/esm/index.js
  function booleanWithin(feature1, feature2) {
    var geom1 = getGeom(feature1);
    var geom2 = getGeom(feature2);
    var type1 = geom1.type;
    var type2 = geom2.type;
    switch (type1) {
      case "Point":
        switch (type2) {
          case "MultiPoint":
            return isPointInMultiPoint(geom1, geom2);
          case "LineString":
            return booleanPointOnLine(geom1, geom2, { ignoreEndVertices: true });
          case "Polygon":
          case "MultiPolygon":
            return booleanPointInPolygon(geom1, geom2, { ignoreBoundary: true });
          default:
            throw new Error("feature2 " + type2 + " geometry not supported");
        }
      case "MultiPoint":
        switch (type2) {
          case "MultiPoint":
            return isMultiPointInMultiPoint(geom1, geom2);
          case "LineString":
            return isMultiPointOnLine(geom1, geom2);
          case "Polygon":
          case "MultiPolygon":
            return isMultiPointInPoly(geom1, geom2);
          default:
            throw new Error("feature2 " + type2 + " geometry not supported");
        }
      case "LineString":
        switch (type2) {
          case "LineString":
            return isLineOnLine2(geom1, geom2);
          case "Polygon":
          case "MultiPolygon":
            return isLineInPoly2(geom1, geom2);
          default:
            throw new Error("feature2 " + type2 + " geometry not supported");
        }
      case "Polygon":
        switch (type2) {
          case "Polygon":
          case "MultiPolygon":
            return isPolyInPoly2(geom1, geom2);
          default:
            throw new Error("feature2 " + type2 + " geometry not supported");
        }
      default:
        throw new Error("feature1 " + type1 + " geometry not supported");
    }
  }
  function isPointInMultiPoint(point2, multiPoint) {
    var i;
    var output = false;
    for (i = 0; i < multiPoint.coordinates.length; i++) {
      if (compareCoords2(multiPoint.coordinates[i], point2.coordinates)) {
        output = true;
        break;
      }
    }
    return output;
  }
  function isMultiPointInMultiPoint(multiPoint1, multiPoint2) {
    for (var i = 0; i < multiPoint1.coordinates.length; i++) {
      var anyMatch = false;
      for (var i2 = 0; i2 < multiPoint2.coordinates.length; i2++) {
        if (compareCoords2(multiPoint1.coordinates[i], multiPoint2.coordinates[i2])) {
          anyMatch = true;
        }
      }
      if (!anyMatch) {
        return false;
      }
    }
    return true;
  }
  function isMultiPointOnLine(multiPoint, lineString2) {
    var foundInsidePoint = false;
    for (var i = 0; i < multiPoint.coordinates.length; i++) {
      if (!booleanPointOnLine(multiPoint.coordinates[i], lineString2)) {
        return false;
      }
      if (!foundInsidePoint) {
        foundInsidePoint = booleanPointOnLine(
          multiPoint.coordinates[i],
          lineString2,
          { ignoreEndVertices: true }
        );
      }
    }
    return foundInsidePoint;
  }
  function isMultiPointInPoly(multiPoint, polygon2) {
    var output = true;
    var oneInside = false;
    var isInside = false;
    for (var i = 0; i < multiPoint.coordinates.length; i++) {
      isInside = booleanPointInPolygon(multiPoint.coordinates[i], polygon2);
      if (!isInside) {
        output = false;
        break;
      }
      if (!oneInside) {
        isInside = booleanPointInPolygon(multiPoint.coordinates[i], polygon2, {
          ignoreBoundary: true
        });
      }
    }
    return output && isInside;
  }
  function isLineOnLine2(lineString1, lineString2) {
    for (var i = 0; i < lineString1.coordinates.length; i++) {
      if (!booleanPointOnLine(lineString1.coordinates[i], lineString2)) {
        return false;
      }
    }
    return true;
  }
  function isLineInPoly2(linestring, polygon2) {
    var polyBbox = bbox(polygon2);
    var lineBbox = bbox(linestring);
    if (!doBBoxOverlap(polyBbox, lineBbox)) {
      return false;
    }
    var foundInsidePoint = false;
    for (var i = 0; i < linestring.coordinates.length; i++) {
      if (!booleanPointInPolygon(linestring.coordinates[i], polygon2)) {
        return false;
      }
      if (!foundInsidePoint) {
        foundInsidePoint = booleanPointInPolygon(
          linestring.coordinates[i],
          polygon2,
          { ignoreBoundary: true }
        );
      }
      if (!foundInsidePoint && i < linestring.coordinates.length - 1) {
        var midpoint = getMidpoint(
          linestring.coordinates[i],
          linestring.coordinates[i + 1]
        );
        foundInsidePoint = booleanPointInPolygon(midpoint, polygon2, {
          ignoreBoundary: true
        });
      }
    }
    return foundInsidePoint;
  }
  function isPolyInPoly2(geometry1, geometry2) {
    var poly1Bbox = bbox(geometry1);
    var poly2Bbox = bbox(geometry2);
    if (!doBBoxOverlap(poly2Bbox, poly1Bbox)) {
      return false;
    }
    for (var i = 0; i < geometry1.coordinates[0].length; i++) {
      if (!booleanPointInPolygon(geometry1.coordinates[0][i], geometry2)) {
        return false;
      }
    }
    return true;
  }
  function doBBoxOverlap(bbox1, bbox2) {
    if (bbox1[0] > bbox2[0]) return false;
    if (bbox1[2] < bbox2[2]) return false;
    if (bbox1[1] > bbox2[1]) return false;
    if (bbox1[3] < bbox2[3]) return false;
    return true;
  }
  function compareCoords2(pair1, pair2) {
    return pair1[0] === pair2[0] && pair1[1] === pair2[1];
  }
  function getMidpoint(pair1, pair2) {
    return [(pair1[0] + pair2[0]) / 2, (pair1[1] + pair2[1]) / 2];
  }
  var turf_boolean_within_default = booleanWithin;

  // node_modules/bignumber.js/bignumber.mjs
  var isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i;
  var mathceil = Math.ceil;
  var mathfloor = Math.floor;
  var bignumberError = "[BigNumber Error] ";
  var tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ";
  var BASE = 1e14;
  var LOG_BASE = 14;
  var MAX_SAFE_INTEGER = 9007199254740991;
  var POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13];
  var SQRT_BASE = 1e7;
  var MAX = 1e9;
  function clone2(configObject) {
    var div, convertBase, parseNumeric, P = BigNumber2.prototype = { constructor: BigNumber2, toString: null, valueOf: null }, ONE = new BigNumber2(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
      prefix: "",
      groupSize: 3,
      secondaryGroupSize: 0,
      groupSeparator: ",",
      decimalSeparator: ".",
      fractionGroupSize: 0,
      fractionGroupSeparator: "\xA0",
      // non-breaking space
      suffix: ""
    }, ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
    function BigNumber2(v2, b) {
      var alphabet, c, caseChanged, e, i, isNum, len, str, x = this;
      if (!(x instanceof BigNumber2)) return new BigNumber2(v2, b);
      if (b == null) {
        if (v2 && v2._isBigNumber === true) {
          x.s = v2.s;
          if (!v2.c || v2.e > MAX_EXP) {
            x.c = x.e = null;
          } else if (v2.e < MIN_EXP) {
            x.c = [x.e = 0];
          } else {
            x.e = v2.e;
            x.c = v2.c.slice();
          }
          return;
        }
        if ((isNum = typeof v2 == "number") && v2 * 0 == 0) {
          x.s = 1 / v2 < 0 ? (v2 = -v2, -1) : 1;
          if (v2 === ~~v2) {
            for (e = 0, i = v2; i >= 10; i /= 10, e++) ;
            if (e > MAX_EXP) {
              x.c = x.e = null;
            } else {
              x.e = e;
              x.c = [v2];
            }
            return;
          }
          str = String(v2);
        } else {
          if (!isNumeric.test(str = String(v2))) return parseNumeric(x, str, isNum);
          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
        }
        if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
        if ((i = str.search(/e/i)) > 0) {
          if (e < 0) e = i;
          e += +str.slice(i + 1);
          str = str.substring(0, i);
        } else if (e < 0) {
          e = str.length;
        }
      } else {
        intCheck(b, 2, ALPHABET.length, "Base");
        if (b == 10 && alphabetHasNormalDecimalDigits) {
          x = new BigNumber2(v2);
          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
        }
        str = String(v2);
        if (isNum = typeof v2 == "number") {
          if (v2 * 0 != 0) return parseNumeric(x, str, isNum, b);
          x.s = 1 / v2 < 0 ? (str = str.slice(1), -1) : 1;
          if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
            throw Error(tooManyDigits + v2);
          }
        } else {
          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
        }
        alphabet = ALPHABET.slice(0, b);
        e = i = 0;
        for (len = str.length; i < len; i++) {
          if (alphabet.indexOf(c = str.charAt(i)) < 0) {
            if (c == ".") {
              if (i > e) {
                e = len;
                continue;
              }
            } else if (!caseChanged) {
              if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                caseChanged = true;
                i = -1;
                e = 0;
                continue;
              }
            }
            return parseNumeric(x, String(v2), isNum, b);
          }
        }
        isNum = false;
        str = convertBase(str, b, 10, x.s);
        if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
        else e = str.length;
      }
      for (i = 0; str.charCodeAt(i) === 48; i++) ;
      for (len = str.length; str.charCodeAt(--len) === 48; ) ;
      if (str = str.slice(i, ++len)) {
        len -= i;
        if (isNum && BigNumber2.DEBUG && len > 15 && (v2 > MAX_SAFE_INTEGER || v2 !== mathfloor(v2))) {
          throw Error(tooManyDigits + x.s * v2);
        }
        if ((e = e - i - 1) > MAX_EXP) {
          x.c = x.e = null;
        } else if (e < MIN_EXP) {
          x.c = [x.e = 0];
        } else {
          x.e = e;
          x.c = [];
          i = (e + 1) % LOG_BASE;
          if (e < 0) i += LOG_BASE;
          if (i < len) {
            if (i) x.c.push(+str.slice(0, i));
            for (len -= LOG_BASE; i < len; ) {
              x.c.push(+str.slice(i, i += LOG_BASE));
            }
            i = LOG_BASE - (str = str.slice(i)).length;
          } else {
            i -= len;
          }
          for (; i--; str += "0") ;
          x.c.push(+str);
        }
      } else {
        x.c = [x.e = 0];
      }
    }
    BigNumber2.clone = clone2;
    BigNumber2.ROUND_UP = 0;
    BigNumber2.ROUND_DOWN = 1;
    BigNumber2.ROUND_CEIL = 2;
    BigNumber2.ROUND_FLOOR = 3;
    BigNumber2.ROUND_HALF_UP = 4;
    BigNumber2.ROUND_HALF_DOWN = 5;
    BigNumber2.ROUND_HALF_EVEN = 6;
    BigNumber2.ROUND_HALF_CEIL = 7;
    BigNumber2.ROUND_HALF_FLOOR = 8;
    BigNumber2.EUCLID = 9;
    BigNumber2.config = BigNumber2.set = function(obj) {
      var p, v2;
      if (obj != null) {
        if (typeof obj == "object") {
          if (obj.hasOwnProperty(p = "DECIMAL_PLACES")) {
            v2 = obj[p];
            intCheck(v2, 0, MAX, p);
            DECIMAL_PLACES = v2;
          }
          if (obj.hasOwnProperty(p = "ROUNDING_MODE")) {
            v2 = obj[p];
            intCheck(v2, 0, 8, p);
            ROUNDING_MODE = v2;
          }
          if (obj.hasOwnProperty(p = "EXPONENTIAL_AT")) {
            v2 = obj[p];
            if (v2 && v2.pop) {
              intCheck(v2[0], -MAX, 0, p);
              intCheck(v2[1], 0, MAX, p);
              TO_EXP_NEG = v2[0];
              TO_EXP_POS = v2[1];
            } else {
              intCheck(v2, -MAX, MAX, p);
              TO_EXP_NEG = -(TO_EXP_POS = v2 < 0 ? -v2 : v2);
            }
          }
          if (obj.hasOwnProperty(p = "RANGE")) {
            v2 = obj[p];
            if (v2 && v2.pop) {
              intCheck(v2[0], -MAX, -1, p);
              intCheck(v2[1], 1, MAX, p);
              MIN_EXP = v2[0];
              MAX_EXP = v2[1];
            } else {
              intCheck(v2, -MAX, MAX, p);
              if (v2) {
                MIN_EXP = -(MAX_EXP = v2 < 0 ? -v2 : v2);
              } else {
                throw Error(bignumberError + p + " cannot be zero: " + v2);
              }
            }
          }
          if (obj.hasOwnProperty(p = "CRYPTO")) {
            v2 = obj[p];
            if (v2 === !!v2) {
              if (v2) {
                if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                  CRYPTO = v2;
                } else {
                  CRYPTO = !v2;
                  throw Error(bignumberError + "crypto unavailable");
                }
              } else {
                CRYPTO = v2;
              }
            } else {
              throw Error(bignumberError + p + " not true or false: " + v2);
            }
          }
          if (obj.hasOwnProperty(p = "MODULO_MODE")) {
            v2 = obj[p];
            intCheck(v2, 0, 9, p);
            MODULO_MODE = v2;
          }
          if (obj.hasOwnProperty(p = "POW_PRECISION")) {
            v2 = obj[p];
            intCheck(v2, 0, MAX, p);
            POW_PRECISION = v2;
          }
          if (obj.hasOwnProperty(p = "FORMAT")) {
            v2 = obj[p];
            if (typeof v2 == "object") FORMAT = v2;
            else throw Error(bignumberError + p + " not an object: " + v2);
          }
          if (obj.hasOwnProperty(p = "ALPHABET")) {
            v2 = obj[p];
            if (typeof v2 == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v2)) {
              alphabetHasNormalDecimalDigits = v2.slice(0, 10) == "0123456789";
              ALPHABET = v2;
            } else {
              throw Error(bignumberError + p + " invalid: " + v2);
            }
          }
        } else {
          throw Error(bignumberError + "Object expected: " + obj);
        }
      }
      return {
        DECIMAL_PLACES,
        ROUNDING_MODE,
        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
        RANGE: [MIN_EXP, MAX_EXP],
        CRYPTO,
        MODULO_MODE,
        POW_PRECISION,
        FORMAT,
        ALPHABET
      };
    };
    BigNumber2.isBigNumber = function(v2) {
      if (!v2 || v2._isBigNumber !== true) return false;
      if (!BigNumber2.DEBUG) return true;
      var i, n, c = v2.c, e = v2.e, s = v2.s;
      out: if ({}.toString.call(c) == "[object Array]") {
        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
          if (c[0] === 0) {
            if (e === 0 && c.length === 1) return true;
            break out;
          }
          i = (e + 1) % LOG_BASE;
          if (i < 1) i += LOG_BASE;
          if (String(c[0]).length == i) {
            for (i = 0; i < c.length; i++) {
              n = c[i];
              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
            }
            if (n !== 0) return true;
          }
        }
      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
        return true;
      }
      throw Error(bignumberError + "Invalid BigNumber: " + v2);
    };
    BigNumber2.maximum = BigNumber2.max = function() {
      return maxOrMin(arguments, -1);
    };
    BigNumber2.minimum = BigNumber2.min = function() {
      return maxOrMin(arguments, 1);
    };
    BigNumber2.random = function() {
      var pow2_53 = 9007199254740992;
      var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
        return mathfloor(Math.random() * pow2_53);
      } : function() {
        return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
      };
      return function(dp) {
        var a, b, e, k, v2, i = 0, c = [], rand = new BigNumber2(ONE);
        if (dp == null) dp = DECIMAL_PLACES;
        else intCheck(dp, 0, MAX);
        k = mathceil(dp / LOG_BASE);
        if (CRYPTO) {
          if (crypto.getRandomValues) {
            a = crypto.getRandomValues(new Uint32Array(k *= 2));
            for (; i < k; ) {
              v2 = a[i] * 131072 + (a[i + 1] >>> 11);
              if (v2 >= 9e15) {
                b = crypto.getRandomValues(new Uint32Array(2));
                a[i] = b[0];
                a[i + 1] = b[1];
              } else {
                c.push(v2 % 1e14);
                i += 2;
              }
            }
            i = k / 2;
          } else if (crypto.randomBytes) {
            a = crypto.randomBytes(k *= 7);
            for (; i < k; ) {
              v2 = (a[i] & 31) * 281474976710656 + a[i + 1] * 1099511627776 + a[i + 2] * 4294967296 + a[i + 3] * 16777216 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
              if (v2 >= 9e15) {
                crypto.randomBytes(7).copy(a, i);
              } else {
                c.push(v2 % 1e14);
                i += 7;
              }
            }
            i = k / 7;
          } else {
            CRYPTO = false;
            throw Error(bignumberError + "crypto unavailable");
          }
        }
        if (!CRYPTO) {
          for (; i < k; ) {
            v2 = random53bitInt();
            if (v2 < 9e15) c[i++] = v2 % 1e14;
          }
        }
        k = c[--i];
        dp %= LOG_BASE;
        if (k && dp) {
          v2 = POWS_TEN[LOG_BASE - dp];
          c[i] = mathfloor(k / v2) * v2;
        }
        for (; c[i] === 0; c.pop(), i--) ;
        if (i < 0) {
          c = [e = 0];
        } else {
          for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE) ;
          for (i = 1, v2 = c[0]; v2 >= 10; v2 /= 10, i++) ;
          if (i < LOG_BASE) e -= LOG_BASE - i;
        }
        rand.e = e;
        rand.c = c;
        return rand;
      };
    }();
    BigNumber2.sum = function() {
      var i = 1, args = arguments, sum3 = new BigNumber2(args[0]);
      for (; i < args.length; ) sum3 = sum3.plus(args[i++]);
      return sum3;
    };
    convertBase = /* @__PURE__ */ function() {
      var decimal = "0123456789";
      function toBaseOut(str, baseIn, baseOut, alphabet) {
        var j, arr = [0], arrL, i = 0, len = str.length;
        for (; i < len; ) {
          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) ;
          arr[0] += alphabet.indexOf(str.charAt(i++));
          for (j = 0; j < arr.length; j++) {
            if (arr[j] > baseOut - 1) {
              if (arr[j + 1] == null) arr[j + 1] = 0;
              arr[j + 1] += arr[j] / baseOut | 0;
              arr[j] %= baseOut;
            }
          }
        }
        return arr.reverse();
      }
      return function(str, baseIn, baseOut, sign, callerIsToString) {
        var alphabet, d, e, k, r, x, xc, y, i = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
        if (i >= 0) {
          k = POW_PRECISION;
          POW_PRECISION = 0;
          str = str.replace(".", "");
          y = new BigNumber2(baseIn);
          x = y.pow(str.length - i);
          POW_PRECISION = k;
          y.c = toBaseOut(
            toFixedPoint(coeffToString(x.c), x.e, "0"),
            10,
            baseOut,
            decimal
          );
          y.e = y.c.length;
        }
        xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
        e = k = xc.length;
        for (; xc[--k] == 0; xc.pop()) ;
        if (!xc[0]) return alphabet.charAt(0);
        if (i < 0) {
          --e;
        } else {
          x.c = xc;
          x.e = e;
          x.s = sign;
          x = div(x, y, dp, rm, baseOut);
          xc = x.c;
          r = x.r;
          e = x.e;
        }
        d = e + dp + 1;
        i = xc[d];
        k = baseOut / 2;
        r = r || d < 0 || xc[d + 1] != null;
        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
        if (d < 1 || !xc[0]) {
          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
        } else {
          xc.length = d;
          if (r) {
            for (--baseOut; ++xc[--d] > baseOut; ) {
              xc[d] = 0;
              if (!d) {
                ++e;
                xc = [1].concat(xc);
              }
            }
          }
          for (k = xc.length; !xc[--k]; ) ;
          for (i = 0, str = ""; i <= k; str += alphabet.charAt(xc[i++])) ;
          str = toFixedPoint(str, e, alphabet.charAt(0));
        }
        return str;
      };
    }();
    div = /* @__PURE__ */ function() {
      function multiply(x, k, base) {
        var m, temp, xlo, xhi, carry = 0, i = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
        for (x = x.slice(); i--; ) {
          xlo = x[i] % SQRT_BASE;
          xhi = x[i] / SQRT_BASE | 0;
          m = khi * xlo + xhi * klo;
          temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
          x[i] = temp % base;
        }
        if (carry) x = [carry].concat(x);
        return x;
      }
      function compare2(a, b, aL, bL) {
        var i, cmp;
        if (aL != bL) {
          cmp = aL > bL ? 1 : -1;
        } else {
          for (i = cmp = 0; i < aL; i++) {
            if (a[i] != b[i]) {
              cmp = a[i] > b[i] ? 1 : -1;
              break;
            }
          }
        }
        return cmp;
      }
      function subtract(a, b, aL, base) {
        var i = 0;
        for (; aL--; ) {
          a[aL] -= i;
          i = a[aL] < b[aL] ? 1 : 0;
          a[aL] = i * base + a[aL] - b[aL];
        }
        for (; !a[0] && a.length > 1; a.splice(0, 1)) ;
      }
      return function(x, y, dp, rm, base) {
        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
        if (!xc || !xc[0] || !yc || !yc[0]) {
          return new BigNumber2(
            // Return NaN if either NaN, or both Infinity or 0.
            !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : (
              // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
              xc && xc[0] == 0 || !yc ? s * 0 : s / 0
            )
          );
        }
        q = new BigNumber2(s);
        qc = q.c = [];
        e = x.e - y.e;
        s = dp + e + 1;
        if (!base) {
          base = BASE;
          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
          s = s / LOG_BASE | 0;
        }
        for (i = 0; yc[i] == (xc[i] || 0); i++) ;
        if (yc[i] > (xc[i] || 0)) e--;
        if (s < 0) {
          qc.push(1);
          more = true;
        } else {
          xL = xc.length;
          yL = yc.length;
          i = 0;
          s += 2;
          n = mathfloor(base / (yc[0] + 1));
          if (n > 1) {
            yc = multiply(yc, n, base);
            xc = multiply(xc, n, base);
            yL = yc.length;
            xL = xc.length;
          }
          xi = yL;
          rem = xc.slice(0, yL);
          remL = rem.length;
          for (; remL < yL; rem[remL++] = 0) ;
          yz = yc.slice();
          yz = [0].concat(yz);
          yc0 = yc[0];
          if (yc[1] >= base / 2) yc0++;
          do {
            n = 0;
            cmp = compare2(yc, rem, yL, remL);
            if (cmp < 0) {
              rem0 = rem[0];
              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);
              n = mathfloor(rem0 / yc0);
              if (n > 1) {
                if (n >= base) n = base - 1;
                prod = multiply(yc, n, base);
                prodL = prod.length;
                remL = rem.length;
                while (compare2(prod, rem, prodL, remL) == 1) {
                  n--;
                  subtract(prod, yL < prodL ? yz : yc, prodL, base);
                  prodL = prod.length;
                  cmp = 1;
                }
              } else {
                if (n == 0) {
                  cmp = n = 1;
                }
                prod = yc.slice();
                prodL = prod.length;
              }
              if (prodL < remL) prod = [0].concat(prod);
              subtract(rem, prod, remL, base);
              remL = rem.length;
              if (cmp == -1) {
                while (compare2(yc, rem, yL, remL) < 1) {
                  n++;
                  subtract(rem, yL < remL ? yz : yc, remL, base);
                  remL = rem.length;
                }
              }
            } else if (cmp === 0) {
              n++;
              rem = [0];
            }
            qc[i++] = n;
            if (rem[0]) {
              rem[remL++] = xc[xi] || 0;
            } else {
              rem = [xc[xi]];
              remL = 1;
            }
          } while ((xi++ < xL || rem[0] != null) && s--);
          more = rem[0] != null;
          if (!qc[0]) qc.splice(0, 1);
        }
        if (base == BASE) {
          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++) ;
          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);
        } else {
          q.e = e;
          q.r = +more;
        }
        return q;
      };
    }();
    function format(n, i, rm, id) {
      var c0, e, ne, len, str;
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);
      if (!n.c) return n.toString();
      c0 = n.c[0];
      ne = n.e;
      if (i == null) {
        str = coeffToString(n.c);
        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
      } else {
        n = round(new BigNumber2(n), i, rm);
        e = n.e;
        str = coeffToString(n.c);
        len = str.length;
        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
          for (; len < i; str += "0", len++) ;
          str = toExponential(str, e);
        } else {
          i -= ne;
          str = toFixedPoint(str, e, "0");
          if (e + 1 > len) {
            if (--i > 0) for (str += "."; i--; str += "0") ;
          } else {
            i += e - len;
            if (i > 0) {
              if (e + 1 == len) str += ".";
              for (; i--; str += "0") ;
            }
          }
        }
      }
      return n.s < 0 && c0 ? "-" + str : str;
    }
    function maxOrMin(args, n) {
      var k, y, i = 1, x = new BigNumber2(args[0]);
      for (; i < args.length; i++) {
        y = new BigNumber2(args[i]);
        if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {
          x = y;
        }
      }
      return x;
    }
    function normalise(n, c, e) {
      var i = 1, j = c.length;
      for (; !c[--j]; c.pop()) ;
      for (j = c[0]; j >= 10; j /= 10, i++) ;
      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
        n.c = n.e = null;
      } else if (e < MIN_EXP) {
        n.c = [n.e = 0];
      } else {
        n.e = e;
        n.c = c;
      }
      return n;
    }
    parseNumeric = /* @__PURE__ */ function() {
      var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
      return function(x, str, isNum, b) {
        var base, s = isNum ? str : str.replace(whitespaceOrPlus, "");
        if (isInfinityOrNaN.test(s)) {
          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
        } else {
          if (!isNum) {
            s = s.replace(basePrefix, function(m, p1, p2) {
              base = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
              return !b || b == base ? p1 : m;
            });
            if (b) {
              base = b;
              s = s.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
            }
            if (str != s) return new BigNumber2(s, base);
          }
          if (BigNumber2.DEBUG) {
            throw Error(bignumberError + "Not a" + (b ? " base " + b : "") + " number: " + str);
          }
          x.s = null;
        }
        x.c = x.e = null;
      };
    }();
    function round(x, sd, rm, r) {
      var d, i, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
      if (xc) {
        out: {
          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++) ;
          i = sd - d;
          if (i < 0) {
            i += LOG_BASE;
            j = sd;
            n = xc[ni = 0];
            rd = mathfloor(n / pows10[d - j - 1] % 10);
          } else {
            ni = mathceil((i + 1) / LOG_BASE);
            if (ni >= xc.length) {
              if (r) {
                for (; xc.length <= ni; xc.push(0)) ;
                n = rd = 0;
                d = 1;
                i %= LOG_BASE;
                j = i - LOG_BASE + 1;
              } else {
                break out;
              }
            } else {
              n = k = xc[ni];
              for (d = 1; k >= 10; k /= 10, d++) ;
              i %= LOG_BASE;
              j = i - LOG_BASE + d;
              rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);
            }
          }
          r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
          xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
          r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
          (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
          if (sd < 1 || !xc[0]) {
            xc.length = 0;
            if (r) {
              sd -= x.e + 1;
              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
              x.e = -sd || 0;
            } else {
              xc[0] = x.e = 0;
            }
            return x;
          }
          if (i == 0) {
            xc.length = ni;
            k = 1;
            ni--;
          } else {
            xc.length = ni + 1;
            k = pows10[LOG_BASE - i];
            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
          }
          if (r) {
            for (; ; ) {
              if (ni == 0) {
                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++) ;
                j = xc[0] += k;
                for (k = 1; j >= 10; j /= 10, k++) ;
                if (i != k) {
                  x.e++;
                  if (xc[0] == BASE) xc[0] = 1;
                }
                break;
              } else {
                xc[ni] += k;
                if (xc[ni] != BASE) break;
                xc[ni--] = 0;
                k = 1;
              }
            }
          }
          for (i = xc.length; xc[--i] === 0; xc.pop()) ;
        }
        if (x.e > MAX_EXP) {
          x.c = x.e = null;
        } else if (x.e < MIN_EXP) {
          x.c = [x.e = 0];
        }
      }
      return x;
    }
    function valueOf(n) {
      var str, e = n.e;
      if (e === null) return n.toString();
      str = coeffToString(n.c);
      str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, "0");
      return n.s < 0 ? "-" + str : str;
    }
    P.absoluteValue = P.abs = function() {
      var x = new BigNumber2(this);
      if (x.s < 0) x.s = 1;
      return x;
    };
    P.comparedTo = function(y, b) {
      return compare(this, new BigNumber2(y, b));
    };
    P.decimalPlaces = P.dp = function(dp, rm) {
      var c, n, v2, x = this;
      if (dp != null) {
        intCheck(dp, 0, MAX);
        if (rm == null) rm = ROUNDING_MODE;
        else intCheck(rm, 0, 8);
        return round(new BigNumber2(x), dp + x.e + 1, rm);
      }
      if (!(c = x.c)) return null;
      n = ((v2 = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
      if (v2 = c[v2]) for (; v2 % 10 == 0; v2 /= 10, n--) ;
      if (n < 0) n = 0;
      return n;
    };
    P.dividedBy = P.div = function(y, b) {
      return div(this, new BigNumber2(y, b), DECIMAL_PLACES, ROUNDING_MODE);
    };
    P.dividedToIntegerBy = P.idiv = function(y, b) {
      return div(this, new BigNumber2(y, b), 0, 1);
    };
    P.exponentiatedBy = P.pow = function(n, m) {
      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
      n = new BigNumber2(n);
      if (n.c && !n.isInteger()) {
        throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
      }
      if (m != null) m = new BigNumber2(m);
      nIsBig = n.e > 14;
      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
        y = new BigNumber2(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
        return m ? y.mod(m) : y;
      }
      nIsNeg = n.s < 0;
      if (m) {
        if (m.c ? !m.c[0] : !m.s) return new BigNumber2(NaN);
        isModExp = !nIsNeg && x.isInteger() && m.isInteger();
        if (isModExp) x = x.mod(m);
      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
        k = x.s < 0 && isOdd(n) ? -0 : 0;
        if (x.e > -1) k = 1 / k;
        return new BigNumber2(nIsNeg ? 1 / k : k);
      } else if (POW_PRECISION) {
        k = mathceil(POW_PRECISION / LOG_BASE + 2);
      }
      if (nIsBig) {
        half = new BigNumber2(0.5);
        if (nIsNeg) n.s = 1;
        nIsOdd = isOdd(n);
      } else {
        i = Math.abs(+valueOf(n));
        nIsOdd = i % 2;
      }
      y = new BigNumber2(ONE);
      for (; ; ) {
        if (nIsOdd) {
          y = y.times(x);
          if (!y.c) break;
          if (k) {
            if (y.c.length > k) y.c.length = k;
          } else if (isModExp) {
            y = y.mod(m);
          }
        }
        if (i) {
          i = mathfloor(i / 2);
          if (i === 0) break;
          nIsOdd = i % 2;
        } else {
          n = n.times(half);
          round(n, n.e + 1, 1);
          if (n.e > 14) {
            nIsOdd = isOdd(n);
          } else {
            i = +valueOf(n);
            if (i === 0) break;
            nIsOdd = i % 2;
          }
        }
        x = x.times(x);
        if (k) {
          if (x.c && x.c.length > k) x.c.length = k;
        } else if (isModExp) {
          x = x.mod(m);
        }
      }
      if (isModExp) return y;
      if (nIsNeg) y = ONE.div(y);
      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
    };
    P.integerValue = function(rm) {
      var n = new BigNumber2(this);
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);
      return round(n, n.e + 1, rm);
    };
    P.isEqualTo = P.eq = function(y, b) {
      return compare(this, new BigNumber2(y, b)) === 0;
    };
    P.isFinite = function() {
      return !!this.c;
    };
    P.isGreaterThan = P.gt = function(y, b) {
      return compare(this, new BigNumber2(y, b)) > 0;
    };
    P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
      return (b = compare(this, new BigNumber2(y, b))) === 1 || b === 0;
    };
    P.isInteger = function() {
      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
    };
    P.isLessThan = P.lt = function(y, b) {
      return compare(this, new BigNumber2(y, b)) < 0;
    };
    P.isLessThanOrEqualTo = P.lte = function(y, b) {
      return (b = compare(this, new BigNumber2(y, b))) === -1 || b === 0;
    };
    P.isNaN = function() {
      return !this.s;
    };
    P.isNegative = function() {
      return this.s < 0;
    };
    P.isPositive = function() {
      return this.s > 0;
    };
    P.isZero = function() {
      return !!this.c && this.c[0] == 0;
    };
    P.minus = function(y, b) {
      var i, j, t, xLTy, x = this, a = x.s;
      y = new BigNumber2(y, b);
      b = y.s;
      if (!a || !b) return new BigNumber2(NaN);
      if (a != b) {
        y.s = -b;
        return x.plus(y);
      }
      var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
      if (!xe || !ye) {
        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber2(yc ? x : NaN);
        if (!xc[0] || !yc[0]) {
          return yc[0] ? (y.s = -b, y) : new BigNumber2(xc[0] ? x : (
            // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
            ROUNDING_MODE == 3 ? -0 : 0
          ));
        }
      }
      xe = bitFloor(xe);
      ye = bitFloor(ye);
      xc = xc.slice();
      if (a = xe - ye) {
        if (xLTy = a < 0) {
          a = -a;
          t = xc;
        } else {
          ye = xe;
          t = yc;
        }
        t.reverse();
        for (b = a; b--; t.push(0)) ;
        t.reverse();
      } else {
        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
        for (a = b = 0; b < j; b++) {
          if (xc[b] != yc[b]) {
            xLTy = xc[b] < yc[b];
            break;
          }
        }
      }
      if (xLTy) {
        t = xc;
        xc = yc;
        yc = t;
        y.s = -y.s;
      }
      b = (j = yc.length) - (i = xc.length);
      if (b > 0) for (; b--; xc[i++] = 0) ;
      b = BASE - 1;
      for (; j > a; ) {
        if (xc[--j] < yc[j]) {
          for (i = j; i && !xc[--i]; xc[i] = b) ;
          --xc[i];
          xc[j] += BASE;
        }
        xc[j] -= yc[j];
      }
      for (; xc[0] == 0; xc.splice(0, 1), --ye) ;
      if (!xc[0]) {
        y.s = ROUNDING_MODE == 3 ? -1 : 1;
        y.c = [y.e = 0];
        return y;
      }
      return normalise(y, xc, ye);
    };
    P.modulo = P.mod = function(y, b) {
      var q, s, x = this;
      y = new BigNumber2(y, b);
      if (!x.c || !y.s || y.c && !y.c[0]) {
        return new BigNumber2(NaN);
      } else if (!y.c || x.c && !x.c[0]) {
        return new BigNumber2(x);
      }
      if (MODULO_MODE == 9) {
        s = y.s;
        y.s = 1;
        q = div(x, y, 0, 3);
        y.s = s;
        q.s *= s;
      } else {
        q = div(x, y, 0, MODULO_MODE);
      }
      y = x.minus(q.times(y));
      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;
      return y;
    };
    P.multipliedBy = P.times = function(y, b) {
      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber2(y, b)).c;
      if (!xc || !yc || !xc[0] || !yc[0]) {
        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
          y.c = y.e = y.s = null;
        } else {
          y.s *= x.s;
          if (!xc || !yc) {
            y.c = y.e = null;
          } else {
            y.c = [0];
            y.e = 0;
          }
        }
        return y;
      }
      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
      y.s *= x.s;
      xcL = xc.length;
      ycL = yc.length;
      if (xcL < ycL) {
        zc = xc;
        xc = yc;
        yc = zc;
        i = xcL;
        xcL = ycL;
        ycL = i;
      }
      for (i = xcL + ycL, zc = []; i--; zc.push(0)) ;
      base = BASE;
      sqrtBase = SQRT_BASE;
      for (i = ycL; --i >= 0; ) {
        c = 0;
        ylo = yc[i] % sqrtBase;
        yhi = yc[i] / sqrtBase | 0;
        for (k = xcL, j = i + k; j > i; ) {
          xlo = xc[--k] % sqrtBase;
          xhi = xc[k] / sqrtBase | 0;
          m = yhi * xlo + xhi * ylo;
          xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
          zc[j--] = xlo % base;
        }
        zc[j] = c;
      }
      if (c) {
        ++e;
      } else {
        zc.splice(0, 1);
      }
      return normalise(y, zc, e);
    };
    P.negated = function() {
      var x = new BigNumber2(this);
      x.s = -x.s || null;
      return x;
    };
    P.plus = function(y, b) {
      var t, x = this, a = x.s;
      y = new BigNumber2(y, b);
      b = y.s;
      if (!a || !b) return new BigNumber2(NaN);
      if (a != b) {
        y.s = -b;
        return x.minus(y);
      }
      var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
      if (!xe || !ye) {
        if (!xc || !yc) return new BigNumber2(a / 0);
        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber2(xc[0] ? x : a * 0);
      }
      xe = bitFloor(xe);
      ye = bitFloor(ye);
      xc = xc.slice();
      if (a = xe - ye) {
        if (a > 0) {
          ye = xe;
          t = yc;
        } else {
          a = -a;
          t = xc;
        }
        t.reverse();
        for (; a--; t.push(0)) ;
        t.reverse();
      }
      a = xc.length;
      b = yc.length;
      if (a - b < 0) {
        t = yc;
        yc = xc;
        xc = t;
        b = a;
      }
      for (a = 0; b; ) {
        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
      }
      if (a) {
        xc = [a].concat(xc);
        ++ye;
      }
      return normalise(y, xc, ye);
    };
    P.precision = P.sd = function(sd, rm) {
      var c, n, v2, x = this;
      if (sd != null && sd !== !!sd) {
        intCheck(sd, 1, MAX);
        if (rm == null) rm = ROUNDING_MODE;
        else intCheck(rm, 0, 8);
        return round(new BigNumber2(x), sd, rm);
      }
      if (!(c = x.c)) return null;
      v2 = c.length - 1;
      n = v2 * LOG_BASE + 1;
      if (v2 = c[v2]) {
        for (; v2 % 10 == 0; v2 /= 10, n--) ;
        for (v2 = c[0]; v2 >= 10; v2 /= 10, n++) ;
      }
      if (sd && x.e + 1 > n) n = x.e + 1;
      return n;
    };
    P.shiftedBy = function(k) {
      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
      return this.times("1e" + k);
    };
    P.squareRoot = P.sqrt = function() {
      var m, n, r, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2("0.5");
      if (s !== 1 || !c || !c[0]) {
        return new BigNumber2(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
      }
      s = Math.sqrt(+valueOf(x));
      if (s == 0 || s == 1 / 0) {
        n = coeffToString(c);
        if ((n.length + e) % 2 == 0) n += "0";
        s = Math.sqrt(+n);
        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
        if (s == 1 / 0) {
          n = "5e" + e;
        } else {
          n = s.toExponential();
          n = n.slice(0, n.indexOf("e") + 1) + e;
        }
        r = new BigNumber2(n);
      } else {
        r = new BigNumber2(s + "");
      }
      if (r.c[0]) {
        e = r.e;
        s = e + dp;
        if (s < 3) s = 0;
        for (; ; ) {
          t = r;
          r = half.times(t.plus(div(x, t, dp, 1)));
          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
            if (r.e < e) --s;
            n = n.slice(s - 3, s + 1);
            if (n == "9999" || !rep && n == "4999") {
              if (!rep) {
                round(t, t.e + DECIMAL_PLACES + 2, 0);
                if (t.times(t).eq(x)) {
                  r = t;
                  break;
                }
              }
              dp += 4;
              s += 4;
              rep = 1;
            } else {
              if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                round(r, r.e + DECIMAL_PLACES + 2, 1);
                m = !r.times(r).eq(x);
              }
              break;
            }
          }
        }
      }
      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
    };
    P.toExponential = function(dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp++;
      }
      return format(this, dp, rm, 1);
    };
    P.toFixed = function(dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp = dp + this.e + 1;
      }
      return format(this, dp, rm);
    };
    P.toFormat = function(dp, rm, format2) {
      var str, x = this;
      if (format2 == null) {
        if (dp != null && rm && typeof rm == "object") {
          format2 = rm;
          rm = null;
        } else if (dp && typeof dp == "object") {
          format2 = dp;
          dp = rm = null;
        } else {
          format2 = FORMAT;
        }
      } else if (typeof format2 != "object") {
        throw Error(bignumberError + "Argument not an object: " + format2);
      }
      str = x.toFixed(dp, rm);
      if (x.c) {
        var i, arr = str.split("."), g1 = +format2.groupSize, g2 = +format2.secondaryGroupSize, groupSeparator = format2.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
        if (g2) {
          i = g1;
          g1 = g2;
          g2 = i;
          len -= i;
        }
        if (g1 > 0 && len > 0) {
          i = len % g1 || g1;
          intPart = intDigits.substr(0, i);
          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
          if (isNeg) intPart = "-" + intPart;
        }
        str = fractionPart ? intPart + (format2.decimalSeparator || "") + ((g2 = +format2.fractionGroupSize) ? fractionPart.replace(
          new RegExp("\\d{" + g2 + "}\\B", "g"),
          "$&" + (format2.fractionGroupSeparator || "")
        ) : fractionPart) : intPart;
      }
      return (format2.prefix || "") + str + (format2.suffix || "");
    };
    P.toFraction = function(md) {
      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s, x = this, xc = x.c;
      if (md != null) {
        n = new BigNumber2(md);
        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
          throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
        }
      }
      if (!xc) return new BigNumber2(x);
      d = new BigNumber2(ONE);
      n1 = d0 = new BigNumber2(ONE);
      d1 = n0 = new BigNumber2(ONE);
      s = coeffToString(xc);
      e = d.e = s.length - x.e - 1;
      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
      md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
      exp = MAX_EXP;
      MAX_EXP = 1 / 0;
      n = new BigNumber2(s);
      n0.c[0] = 0;
      for (; ; ) {
        q = div(n, d, 0, 1);
        d2 = d0.plus(q.times(d1));
        if (d2.comparedTo(md) == 1) break;
        d0 = d1;
        d1 = d2;
        n1 = n0.plus(q.times(d2 = n1));
        n0 = d2;
        d = n.minus(q.times(d2 = d));
        n = d2;
      }
      d2 = div(md.minus(d0), d1, 0, 1);
      n0 = n0.plus(d2.times(n1));
      d0 = d0.plus(d2.times(d1));
      n0.s = n1.s = x.s;
      e = e * 2;
      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()
      ) < 1 ? [n1, d1] : [n0, d0];
      MAX_EXP = exp;
      return r;
    };
    P.toNumber = function() {
      return +valueOf(this);
    };
    P.toPrecision = function(sd, rm) {
      if (sd != null) intCheck(sd, 1, MAX);
      return format(this, sd, rm, 2);
    };
    P.toString = function(b) {
      var str, n = this, s = n.s, e = n.e;
      if (e === null) {
        if (s) {
          str = "Infinity";
          if (s < 0) str = "-" + str;
        } else {
          str = "NaN";
        }
      } else {
        if (b == null) {
          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, "0");
        } else if (b === 10 && alphabetHasNormalDecimalDigits) {
          n = round(new BigNumber2(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
          str = toFixedPoint(coeffToString(n.c), n.e, "0");
        } else {
          intCheck(b, 2, ALPHABET.length, "Base");
          str = convertBase(toFixedPoint(coeffToString(n.c), e, "0"), 10, b, s, true);
        }
        if (s < 0 && n.c[0]) str = "-" + str;
      }
      return str;
    };
    P.valueOf = P.toJSON = function() {
      return valueOf(this);
    };
    P._isBigNumber = true;
    P[Symbol.toStringTag] = "BigNumber";
    P[Symbol.for("nodejs.util.inspect.custom")] = P.valueOf;
    if (configObject != null) BigNumber2.set(configObject);
    return BigNumber2;
  }
  function bitFloor(n) {
    var i = n | 0;
    return n > 0 || n === i ? i : i - 1;
  }
  function coeffToString(a) {
    var s, z, i = 1, j = a.length, r = a[0] + "";
    for (; i < j; ) {
      s = a[i++] + "";
      z = LOG_BASE - s.length;
      for (; z--; s = "0" + s) ;
      r += s;
    }
    for (j = r.length; r.charCodeAt(--j) === 48; ) ;
    return r.slice(0, j + 1 || 1);
  }
  function compare(x, y) {
    var a, b, xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;
    if (!i || !j) return null;
    a = xc && !xc[0];
    b = yc && !yc[0];
    if (a || b) return a ? b ? 0 : -j : i;
    if (i != j) return i;
    a = i < 0;
    b = k == l;
    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;
    if (!b) return k > l ^ a ? 1 : -1;
    j = (k = xc.length) < (l = yc.length) ? k : l;
    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;
    return k == l ? 0 : k > l ^ a ? 1 : -1;
  }
  function intCheck(n, min2, max2, name) {
    if (n < min2 || n > max2 || n !== mathfloor(n)) {
      throw Error(bignumberError + (name || "Argument") + (typeof n == "number" ? n < min2 || n > max2 ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
    }
  }
  function isOdd(n) {
    var k = n.c.length - 1;
    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
  }
  function toExponential(str, e) {
    return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e < 0 ? "e" : "e+") + e;
  }
  function toFixedPoint(str, e, z) {
    var len, zs;
    if (e < 0) {
      for (zs = z + "."; ++e; zs += z) ;
      str = zs + str;
    } else {
      len = str.length;
      if (++e > len) {
        for (zs = z, e -= len; --e; zs += z) ;
        str += zs;
      } else if (e < len) {
        str = str.slice(0, e) + "." + str.slice(e);
      }
    }
    return str;
  }
  var BigNumber = clone2();
  var bignumber_default = BigNumber;

  // node_modules/splaytree-ts/dist/esm/index.js
  var SplayTreeNode = class {
    constructor(key) {
      __publicField(this, "key");
      __publicField(this, "left", null);
      __publicField(this, "right", null);
      this.key = key;
    }
  };
  var SplayTreeSetNode = class extends SplayTreeNode {
    constructor(key) {
      super(key);
    }
  };
  var SplayTree = class {
    constructor() {
      __publicField(this, "size", 0);
      __publicField(this, "modificationCount", 0);
      __publicField(this, "splayCount", 0);
    }
    splay(key) {
      const root = this.root;
      if (root == null) {
        this.compare(key, key);
        return -1;
      }
      let right = null;
      let newTreeRight = null;
      let left = null;
      let newTreeLeft = null;
      let current = root;
      const compare2 = this.compare;
      let comp;
      while (true) {
        comp = compare2(current.key, key);
        if (comp > 0) {
          let currentLeft = current.left;
          if (currentLeft == null) break;
          comp = compare2(currentLeft.key, key);
          if (comp > 0) {
            current.left = currentLeft.right;
            currentLeft.right = current;
            current = currentLeft;
            currentLeft = current.left;
            if (currentLeft == null) break;
          }
          if (right == null) {
            newTreeRight = current;
          } else {
            right.left = current;
          }
          right = current;
          current = currentLeft;
        } else if (comp < 0) {
          let currentRight = current.right;
          if (currentRight == null) break;
          comp = compare2(currentRight.key, key);
          if (comp < 0) {
            current.right = currentRight.left;
            currentRight.left = current;
            current = currentRight;
            currentRight = current.right;
            if (currentRight == null) break;
          }
          if (left == null) {
            newTreeLeft = current;
          } else {
            left.right = current;
          }
          left = current;
          current = currentRight;
        } else {
          break;
        }
      }
      if (left != null) {
        left.right = current.left;
        current.left = newTreeLeft;
      }
      if (right != null) {
        right.left = current.right;
        current.right = newTreeRight;
      }
      if (this.root !== current) {
        this.root = current;
        this.splayCount++;
      }
      return comp;
    }
    splayMin(node) {
      let current = node;
      let nextLeft = current.left;
      while (nextLeft != null) {
        const left = nextLeft;
        current.left = left.right;
        left.right = current;
        current = left;
        nextLeft = current.left;
      }
      return current;
    }
    splayMax(node) {
      let current = node;
      let nextRight = current.right;
      while (nextRight != null) {
        const right = nextRight;
        current.right = right.left;
        right.left = current;
        current = right;
        nextRight = current.right;
      }
      return current;
    }
    _delete(key) {
      if (this.root == null) return null;
      const comp = this.splay(key);
      if (comp != 0) return null;
      let root = this.root;
      const result = root;
      const left = root.left;
      this.size--;
      if (left == null) {
        this.root = root.right;
      } else {
        const right = root.right;
        root = this.splayMax(left);
        root.right = right;
        this.root = root;
      }
      this.modificationCount++;
      return result;
    }
    addNewRoot(node, comp) {
      this.size++;
      this.modificationCount++;
      const root = this.root;
      if (root == null) {
        this.root = node;
        return;
      }
      if (comp < 0) {
        node.left = root;
        node.right = root.right;
        root.right = null;
      } else {
        node.right = root;
        node.left = root.left;
        root.left = null;
      }
      this.root = node;
    }
    _first() {
      const root = this.root;
      if (root == null) return null;
      this.root = this.splayMin(root);
      return this.root;
    }
    _last() {
      const root = this.root;
      if (root == null) return null;
      this.root = this.splayMax(root);
      return this.root;
    }
    clear() {
      this.root = null;
      this.size = 0;
      this.modificationCount++;
    }
    has(key) {
      return this.validKey(key) && this.splay(key) == 0;
    }
    defaultCompare() {
      return (a, b) => a < b ? -1 : a > b ? 1 : 0;
    }
    wrap() {
      return {
        getRoot: () => {
          return this.root;
        },
        setRoot: (root) => {
          this.root = root;
        },
        getSize: () => {
          return this.size;
        },
        getModificationCount: () => {
          return this.modificationCount;
        },
        getSplayCount: () => {
          return this.splayCount;
        },
        setSplayCount: (count) => {
          this.splayCount = count;
        },
        splay: (key) => {
          return this.splay(key);
        },
        has: (key) => {
          return this.has(key);
        }
      };
    }
  };
  var _a, _b;
  var SplayTreeSet = class _SplayTreeSet extends SplayTree {
    constructor(compare2, isValidKey) {
      super();
      __publicField(this, "root", null);
      __publicField(this, "compare");
      __publicField(this, "validKey");
      __publicField(this, _a, "[object Set]");
      this.compare = compare2 ?? this.defaultCompare();
      this.validKey = isValidKey ?? ((v2) => v2 != null && v2 != void 0);
    }
    delete(element) {
      if (!this.validKey(element)) return false;
      return this._delete(element) != null;
    }
    deleteAll(elements) {
      for (const element of elements) {
        this.delete(element);
      }
    }
    forEach(f) {
      const nodes = this[Symbol.iterator]();
      let result;
      while (result = nodes.next(), !result.done) {
        f(result.value, result.value, this);
      }
    }
    add(element) {
      const compare2 = this.splay(element);
      if (compare2 != 0) this.addNewRoot(new SplayTreeSetNode(element), compare2);
      return this;
    }
    addAndReturn(element) {
      const compare2 = this.splay(element);
      if (compare2 != 0) this.addNewRoot(new SplayTreeSetNode(element), compare2);
      return this.root.key;
    }
    addAll(elements) {
      for (const element of elements) {
        this.add(element);
      }
    }
    isEmpty() {
      return this.root == null;
    }
    isNotEmpty() {
      return this.root != null;
    }
    single() {
      if (this.size == 0) throw "Bad state: No element";
      if (this.size > 1) throw "Bad state: Too many element";
      return this.root.key;
    }
    first() {
      if (this.size == 0) throw "Bad state: No element";
      return this._first().key;
    }
    last() {
      if (this.size == 0) throw "Bad state: No element";
      return this._last().key;
    }
    lastBefore(element) {
      if (element == null) throw "Invalid arguments(s)";
      if (this.root == null) return null;
      const comp = this.splay(element);
      if (comp < 0) return this.root.key;
      let node = this.root.left;
      if (node == null) return null;
      let nodeRight = node.right;
      while (nodeRight != null) {
        node = nodeRight;
        nodeRight = node.right;
      }
      return node.key;
    }
    firstAfter(element) {
      if (element == null) throw "Invalid arguments(s)";
      if (this.root == null) return null;
      const comp = this.splay(element);
      if (comp > 0) return this.root.key;
      let node = this.root.right;
      if (node == null) return null;
      let nodeLeft = node.left;
      while (nodeLeft != null) {
        node = nodeLeft;
        nodeLeft = node.left;
      }
      return node.key;
    }
    retainAll(elements) {
      const retainSet = new _SplayTreeSet(this.compare, this.validKey);
      const modificationCount = this.modificationCount;
      for (const object of elements) {
        if (modificationCount != this.modificationCount) {
          throw "Concurrent modification during iteration.";
        }
        if (this.validKey(object) && this.splay(object) == 0) {
          retainSet.add(this.root.key);
        }
      }
      if (retainSet.size != this.size) {
        this.root = retainSet.root;
        this.size = retainSet.size;
        this.modificationCount++;
      }
    }
    lookup(object) {
      if (!this.validKey(object)) return null;
      const comp = this.splay(object);
      if (comp != 0) return null;
      return this.root.key;
    }
    intersection(other) {
      const result = new _SplayTreeSet(this.compare, this.validKey);
      for (const element of this) {
        if (other.has(element)) result.add(element);
      }
      return result;
    }
    difference(other) {
      const result = new _SplayTreeSet(this.compare, this.validKey);
      for (const element of this) {
        if (!other.has(element)) result.add(element);
      }
      return result;
    }
    union(other) {
      const u4 = this.clone();
      u4.addAll(other);
      return u4;
    }
    clone() {
      const set2 = new _SplayTreeSet(this.compare, this.validKey);
      set2.size = this.size;
      set2.root = this.copyNode(this.root);
      return set2;
    }
    copyNode(node) {
      if (node == null) return null;
      function copyChildren(node2, dest) {
        let left;
        let right;
        do {
          left = node2.left;
          right = node2.right;
          if (left != null) {
            const newLeft = new SplayTreeSetNode(left.key);
            dest.left = newLeft;
            copyChildren(left, newLeft);
          }
          if (right != null) {
            const newRight = new SplayTreeSetNode(right.key);
            dest.right = newRight;
            node2 = right;
            dest = newRight;
          }
        } while (right != null);
      }
      const result = new SplayTreeSetNode(node.key);
      copyChildren(node, result);
      return result;
    }
    toSet() {
      return this.clone();
    }
    entries() {
      return new SplayTreeSetEntryIterableIterator(this.wrap());
    }
    keys() {
      return this[Symbol.iterator]();
    }
    values() {
      return this[Symbol.iterator]();
    }
    [(_b = Symbol.iterator, _a = Symbol.toStringTag, _b)]() {
      return new SplayTreeKeyIterableIterator(this.wrap());
    }
  };
  var SplayTreeIterableIterator = class {
    constructor(tree) {
      __publicField(this, "tree");
      __publicField(this, "path", new Array());
      __publicField(this, "modificationCount", null);
      __publicField(this, "splayCount");
      this.tree = tree;
      this.splayCount = tree.getSplayCount();
    }
    [Symbol.iterator]() {
      return this;
    }
    next() {
      if (this.moveNext()) return { done: false, value: this.current() };
      return { done: true, value: null };
    }
    current() {
      if (!this.path.length) return null;
      const node = this.path[this.path.length - 1];
      return this.getValue(node);
    }
    rebuildPath(key) {
      this.path.splice(0, this.path.length);
      this.tree.splay(key);
      this.path.push(this.tree.getRoot());
      this.splayCount = this.tree.getSplayCount();
    }
    findLeftMostDescendent(node) {
      while (node != null) {
        this.path.push(node);
        node = node.left;
      }
    }
    moveNext() {
      if (this.modificationCount != this.tree.getModificationCount()) {
        if (this.modificationCount == null) {
          this.modificationCount = this.tree.getModificationCount();
          let node2 = this.tree.getRoot();
          while (node2 != null) {
            this.path.push(node2);
            node2 = node2.left;
          }
          return this.path.length > 0;
        }
        throw "Concurrent modification during iteration.";
      }
      if (!this.path.length) return false;
      if (this.splayCount != this.tree.getSplayCount()) {
        this.rebuildPath(this.path[this.path.length - 1].key);
      }
      let node = this.path[this.path.length - 1];
      let next = node.right;
      if (next != null) {
        while (next != null) {
          this.path.push(next);
          next = next.left;
        }
        return true;
      }
      this.path.pop();
      while (this.path.length && this.path[this.path.length - 1].right === node) {
        node = this.path.pop();
      }
      return this.path.length > 0;
    }
  };
  var SplayTreeKeyIterableIterator = class extends SplayTreeIterableIterator {
    getValue(node) {
      return node.key;
    }
  };
  var SplayTreeSetEntryIterableIterator = class extends SplayTreeIterableIterator {
    getValue(node) {
      return [node.key, node.key];
    }
  };

  // node_modules/polyclip-ts/dist/esm/index.js
  var constant_default = (x) => {
    return () => {
      return x;
    };
  };
  var compare_default = (eps) => {
    const almostEqual = eps ? (a, b) => b.minus(a).abs().isLessThanOrEqualTo(eps) : constant_default(false);
    return (a, b) => {
      if (almostEqual(a, b)) return 0;
      return a.comparedTo(b);
    };
  };
  function orient_default(eps) {
    const almostCollinear = eps ? (area2, ax, ay, cx, cy) => area2.exponentiatedBy(2).isLessThanOrEqualTo(
      cx.minus(ax).exponentiatedBy(2).plus(cy.minus(ay).exponentiatedBy(2)).times(eps)
    ) : constant_default(false);
    return (a, b, c) => {
      const ax = a.x, ay = a.y, cx = c.x, cy = c.y;
      const area2 = ay.minus(cy).times(b.x.minus(cx)).minus(ax.minus(cx).times(b.y.minus(cy)));
      if (almostCollinear(area2, ax, ay, cx, cy)) return 0;
      return area2.comparedTo(0);
    };
  }
  var identity_default = (x) => {
    return x;
  };
  var snap_default = (eps) => {
    if (eps) {
      const xTree = new SplayTreeSet(compare_default(eps));
      const yTree = new SplayTreeSet(compare_default(eps));
      const snapCoord = (coord, tree) => {
        return tree.addAndReturn(coord);
      };
      const snap = (v2) => {
        return {
          x: snapCoord(v2.x, xTree),
          y: snapCoord(v2.y, yTree)
        };
      };
      snap({ x: new bignumber_default(0), y: new bignumber_default(0) });
      return snap;
    }
    return identity_default;
  };
  var set = (eps) => {
    return {
      set: (eps2) => {
        precision = set(eps2);
      },
      reset: () => set(eps),
      compare: compare_default(eps),
      snap: snap_default(eps),
      orient: orient_default(eps)
    };
  };
  var precision = set();
  var isInBbox = (bbox2, point2) => {
    return bbox2.ll.x.isLessThanOrEqualTo(point2.x) && point2.x.isLessThanOrEqualTo(bbox2.ur.x) && bbox2.ll.y.isLessThanOrEqualTo(point2.y) && point2.y.isLessThanOrEqualTo(bbox2.ur.y);
  };
  var getBboxOverlap = (b1, b2) => {
    if (b2.ur.x.isLessThan(b1.ll.x) || b1.ur.x.isLessThan(b2.ll.x) || b2.ur.y.isLessThan(b1.ll.y) || b1.ur.y.isLessThan(b2.ll.y))
      return null;
    const lowerX = b1.ll.x.isLessThan(b2.ll.x) ? b2.ll.x : b1.ll.x;
    const upperX = b1.ur.x.isLessThan(b2.ur.x) ? b1.ur.x : b2.ur.x;
    const lowerY = b1.ll.y.isLessThan(b2.ll.y) ? b2.ll.y : b1.ll.y;
    const upperY = b1.ur.y.isLessThan(b2.ur.y) ? b1.ur.y : b2.ur.y;
    return { ll: { x: lowerX, y: lowerY }, ur: { x: upperX, y: upperY } };
  };
  var crossProduct = (a, b) => a.x.times(b.y).minus(a.y.times(b.x));
  var dotProduct = (a, b) => a.x.times(b.x).plus(a.y.times(b.y));
  var length = (v2) => dotProduct(v2, v2).sqrt();
  var sineOfAngle = (pShared, pBase, pAngle) => {
    const vBase = { x: pBase.x.minus(pShared.x), y: pBase.y.minus(pShared.y) };
    const vAngle = { x: pAngle.x.minus(pShared.x), y: pAngle.y.minus(pShared.y) };
    return crossProduct(vAngle, vBase).div(length(vAngle)).div(length(vBase));
  };
  var cosineOfAngle = (pShared, pBase, pAngle) => {
    const vBase = { x: pBase.x.minus(pShared.x), y: pBase.y.minus(pShared.y) };
    const vAngle = { x: pAngle.x.minus(pShared.x), y: pAngle.y.minus(pShared.y) };
    return dotProduct(vAngle, vBase).div(length(vAngle)).div(length(vBase));
  };
  var horizontalIntersection = (pt, v2, y) => {
    if (v2.y.isZero()) return null;
    return { x: pt.x.plus(v2.x.div(v2.y).times(y.minus(pt.y))), y };
  };
  var verticalIntersection = (pt, v2, x) => {
    if (v2.x.isZero()) return null;
    return { x, y: pt.y.plus(v2.y.div(v2.x).times(x.minus(pt.x))) };
  };
  var intersection = (pt1, v1, pt2, v2) => {
    if (v1.x.isZero()) return verticalIntersection(pt2, v2, pt1.x);
    if (v2.x.isZero()) return verticalIntersection(pt1, v1, pt2.x);
    if (v1.y.isZero()) return horizontalIntersection(pt2, v2, pt1.y);
    if (v2.y.isZero()) return horizontalIntersection(pt1, v1, pt2.y);
    const kross = crossProduct(v1, v2);
    if (kross.isZero()) return null;
    const ve = { x: pt2.x.minus(pt1.x), y: pt2.y.minus(pt1.y) };
    const d1 = crossProduct(ve, v1).div(kross);
    const d2 = crossProduct(ve, v2).div(kross);
    const x1 = pt1.x.plus(d2.times(v1.x)), x2 = pt2.x.plus(d1.times(v2.x));
    const y1 = pt1.y.plus(d2.times(v1.y)), y2 = pt2.y.plus(d1.times(v2.y));
    const x = x1.plus(x2).div(2);
    const y = y1.plus(y2).div(2);
    return { x, y };
  };
  var SweepEvent = class _SweepEvent {
    // Warning: 'point' input will be modified and re-used (for performance)
    constructor(point2, isLeft) {
      __publicField(this, "point");
      __publicField(this, "isLeft");
      __publicField(this, "segment");
      __publicField(this, "otherSE");
      __publicField(this, "consumedBy");
      if (point2.events === void 0) point2.events = [this];
      else point2.events.push(this);
      this.point = point2;
      this.isLeft = isLeft;
    }
    // for ordering sweep events in the sweep event queue
    static compare(a, b) {
      const ptCmp = _SweepEvent.comparePoints(a.point, b.point);
      if (ptCmp !== 0) return ptCmp;
      if (a.point !== b.point) a.link(b);
      if (a.isLeft !== b.isLeft) return a.isLeft ? 1 : -1;
      return Segment2.compare(a.segment, b.segment);
    }
    // for ordering points in sweep line order
    static comparePoints(aPt, bPt) {
      if (aPt.x.isLessThan(bPt.x)) return -1;
      if (aPt.x.isGreaterThan(bPt.x)) return 1;
      if (aPt.y.isLessThan(bPt.y)) return -1;
      if (aPt.y.isGreaterThan(bPt.y)) return 1;
      return 0;
    }
    link(other) {
      if (other.point === this.point) {
        throw new Error("Tried to link already linked events");
      }
      const otherEvents = other.point.events;
      for (let i = 0, iMax = otherEvents.length; i < iMax; i++) {
        const evt = otherEvents[i];
        this.point.events.push(evt);
        evt.point = this.point;
      }
      this.checkForConsuming();
    }
    /* Do a pass over our linked events and check to see if any pair
     * of segments match, and should be consumed. */
    checkForConsuming() {
      const numEvents = this.point.events.length;
      for (let i = 0; i < numEvents; i++) {
        const evt1 = this.point.events[i];
        if (evt1.segment.consumedBy !== void 0) continue;
        for (let j = i + 1; j < numEvents; j++) {
          const evt2 = this.point.events[j];
          if (evt2.consumedBy !== void 0) continue;
          if (evt1.otherSE.point.events !== evt2.otherSE.point.events) continue;
          evt1.segment.consume(evt2.segment);
        }
      }
    }
    getAvailableLinkedEvents() {
      const events = [];
      for (let i = 0, iMax = this.point.events.length; i < iMax; i++) {
        const evt = this.point.events[i];
        if (evt !== this && !evt.segment.ringOut && evt.segment.isInResult()) {
          events.push(evt);
        }
      }
      return events;
    }
    /**
     * Returns a comparator function for sorting linked events that will
     * favor the event that will give us the smallest left-side angle.
     * All ring construction starts as low as possible heading to the right,
     * so by always turning left as sharp as possible we'll get polygons
     * without uncessary loops & holes.
     *
     * The comparator function has a compute cache such that it avoids
     * re-computing already-computed values.
     */
    getLeftmostComparator(baseEvent) {
      const cache = /* @__PURE__ */ new Map();
      const fillCache = (linkedEvent) => {
        const nextEvent = linkedEvent.otherSE;
        cache.set(linkedEvent, {
          sine: sineOfAngle(this.point, baseEvent.point, nextEvent.point),
          cosine: cosineOfAngle(this.point, baseEvent.point, nextEvent.point)
        });
      };
      return (a, b) => {
        if (!cache.has(a)) fillCache(a);
        if (!cache.has(b)) fillCache(b);
        const { sine: asine, cosine: acosine } = cache.get(a);
        const { sine: bsine, cosine: bcosine } = cache.get(b);
        if (asine.isGreaterThanOrEqualTo(0) && bsine.isGreaterThanOrEqualTo(0)) {
          if (acosine.isLessThan(bcosine)) return 1;
          if (acosine.isGreaterThan(bcosine)) return -1;
          return 0;
        }
        if (asine.isLessThan(0) && bsine.isLessThan(0)) {
          if (acosine.isLessThan(bcosine)) return -1;
          if (acosine.isGreaterThan(bcosine)) return 1;
          return 0;
        }
        if (bsine.isLessThan(asine)) return -1;
        if (bsine.isGreaterThan(asine)) return 1;
        return 0;
      };
    }
  };
  var RingOut = class _RingOut {
    constructor(events) {
      __publicField(this, "events");
      __publicField(this, "poly");
      __publicField(this, "_isExteriorRing");
      __publicField(this, "_enclosingRing");
      this.events = events;
      for (let i = 0, iMax = events.length; i < iMax; i++) {
        events[i].segment.ringOut = this;
      }
      this.poly = null;
    }
    /* Given the segments from the sweep line pass, compute & return a series
     * of closed rings from all the segments marked to be part of the result */
    static factory(allSegments) {
      const ringsOut = [];
      for (let i = 0, iMax = allSegments.length; i < iMax; i++) {
        const segment = allSegments[i];
        if (!segment.isInResult() || segment.ringOut) continue;
        let prevEvent = null;
        let event = segment.leftSE;
        let nextEvent = segment.rightSE;
        const events = [event];
        const startingPoint = event.point;
        const intersectionLEs = [];
        while (true) {
          prevEvent = event;
          event = nextEvent;
          events.push(event);
          if (event.point === startingPoint) break;
          while (true) {
            const availableLEs = event.getAvailableLinkedEvents();
            if (availableLEs.length === 0) {
              const firstPt = events[0].point;
              const lastPt = events[events.length - 1].point;
              throw new Error(
                `Unable to complete output ring starting at [${firstPt.x}, ${firstPt.y}]. Last matching segment found ends at [${lastPt.x}, ${lastPt.y}].`
              );
            }
            if (availableLEs.length === 1) {
              nextEvent = availableLEs[0].otherSE;
              break;
            }
            let indexLE = null;
            for (let j = 0, jMax = intersectionLEs.length; j < jMax; j++) {
              if (intersectionLEs[j].point === event.point) {
                indexLE = j;
                break;
              }
            }
            if (indexLE !== null) {
              const intersectionLE = intersectionLEs.splice(indexLE)[0];
              const ringEvents = events.splice(intersectionLE.index);
              ringEvents.unshift(ringEvents[0].otherSE);
              ringsOut.push(new _RingOut(ringEvents.reverse()));
              continue;
            }
            intersectionLEs.push({
              index: events.length,
              point: event.point
            });
            const comparator = event.getLeftmostComparator(prevEvent);
            nextEvent = availableLEs.sort(comparator)[0].otherSE;
            break;
          }
        }
        ringsOut.push(new _RingOut(events));
      }
      return ringsOut;
    }
    getGeom() {
      let prevPt = this.events[0].point;
      const points = [prevPt];
      for (let i = 1, iMax = this.events.length - 1; i < iMax; i++) {
        const pt2 = this.events[i].point;
        const nextPt2 = this.events[i + 1].point;
        if (precision.orient(pt2, prevPt, nextPt2) === 0) continue;
        points.push(pt2);
        prevPt = pt2;
      }
      if (points.length === 1) return null;
      const pt = points[0];
      const nextPt = points[1];
      if (precision.orient(pt, prevPt, nextPt) === 0) points.shift();
      points.push(points[0]);
      const step = this.isExteriorRing() ? 1 : -1;
      const iStart = this.isExteriorRing() ? 0 : points.length - 1;
      const iEnd = this.isExteriorRing() ? points.length : -1;
      const orderedPoints = [];
      for (let i = iStart; i != iEnd; i += step)
        orderedPoints.push([points[i].x.toNumber(), points[i].y.toNumber()]);
      return orderedPoints;
    }
    isExteriorRing() {
      if (this._isExteriorRing === void 0) {
        const enclosing = this.enclosingRing();
        this._isExteriorRing = enclosing ? !enclosing.isExteriorRing() : true;
      }
      return this._isExteriorRing;
    }
    enclosingRing() {
      if (this._enclosingRing === void 0) {
        this._enclosingRing = this._calcEnclosingRing();
      }
      return this._enclosingRing;
    }
    /* Returns the ring that encloses this one, if any */
    _calcEnclosingRing() {
      let leftMostEvt = this.events[0];
      for (let i = 1, iMax = this.events.length; i < iMax; i++) {
        const evt = this.events[i];
        if (SweepEvent.compare(leftMostEvt, evt) > 0) leftMostEvt = evt;
      }
      let prevSeg = leftMostEvt.segment.prevInResult();
      let prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null;
      while (true) {
        if (!prevSeg) return null;
        if (!prevPrevSeg) return prevSeg.ringOut;
        if (prevPrevSeg.ringOut !== prevSeg.ringOut) {
          if (prevPrevSeg.ringOut?.enclosingRing() !== prevSeg.ringOut) {
            return prevSeg.ringOut;
          } else return prevSeg.ringOut?.enclosingRing();
        }
        prevSeg = prevPrevSeg.prevInResult();
        prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null;
      }
    }
  };
  var PolyOut = class {
    constructor(exteriorRing) {
      __publicField(this, "exteriorRing");
      __publicField(this, "interiorRings");
      this.exteriorRing = exteriorRing;
      exteriorRing.poly = this;
      this.interiorRings = [];
    }
    addInterior(ring) {
      this.interiorRings.push(ring);
      ring.poly = this;
    }
    getGeom() {
      const geom0 = this.exteriorRing.getGeom();
      if (geom0 === null) return null;
      const geom = [geom0];
      for (let i = 0, iMax = this.interiorRings.length; i < iMax; i++) {
        const ringGeom = this.interiorRings[i].getGeom();
        if (ringGeom === null) continue;
        geom.push(ringGeom);
      }
      return geom;
    }
  };
  var MultiPolyOut = class {
    constructor(rings) {
      __publicField(this, "rings");
      __publicField(this, "polys");
      this.rings = rings;
      this.polys = this._composePolys(rings);
    }
    getGeom() {
      const geom = [];
      for (let i = 0, iMax = this.polys.length; i < iMax; i++) {
        const polyGeom = this.polys[i].getGeom();
        if (polyGeom === null) continue;
        geom.push(polyGeom);
      }
      return geom;
    }
    _composePolys(rings) {
      const polys = [];
      for (let i = 0, iMax = rings.length; i < iMax; i++) {
        const ring = rings[i];
        if (ring.poly) continue;
        if (ring.isExteriorRing()) polys.push(new PolyOut(ring));
        else {
          const enclosingRing = ring.enclosingRing();
          if (!enclosingRing?.poly) polys.push(new PolyOut(enclosingRing));
          enclosingRing?.poly?.addInterior(ring);
        }
      }
      return polys;
    }
  };
  var SweepLine = class {
    constructor(queue, comparator = Segment2.compare) {
      __publicField(this, "queue");
      __publicField(this, "tree");
      __publicField(this, "segments");
      this.queue = queue;
      this.tree = new SplayTreeSet(comparator);
      this.segments = [];
    }
    process(event) {
      const segment = event.segment;
      const newEvents = [];
      if (event.consumedBy) {
        if (event.isLeft) this.queue.delete(event.otherSE);
        else this.tree.delete(segment);
        return newEvents;
      }
      if (event.isLeft) this.tree.add(segment);
      let prevSeg = segment;
      let nextSeg = segment;
      do {
        prevSeg = this.tree.lastBefore(prevSeg);
      } while (prevSeg != null && prevSeg.consumedBy != void 0);
      do {
        nextSeg = this.tree.firstAfter(nextSeg);
      } while (nextSeg != null && nextSeg.consumedBy != void 0);
      if (event.isLeft) {
        let prevMySplitter = null;
        if (prevSeg) {
          const prevInter = prevSeg.getIntersection(segment);
          if (prevInter !== null) {
            if (!segment.isAnEndpoint(prevInter)) prevMySplitter = prevInter;
            if (!prevSeg.isAnEndpoint(prevInter)) {
              const newEventsFromSplit = this._splitSafely(prevSeg, prevInter);
              for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {
                newEvents.push(newEventsFromSplit[i]);
              }
            }
          }
        }
        let nextMySplitter = null;
        if (nextSeg) {
          const nextInter = nextSeg.getIntersection(segment);
          if (nextInter !== null) {
            if (!segment.isAnEndpoint(nextInter)) nextMySplitter = nextInter;
            if (!nextSeg.isAnEndpoint(nextInter)) {
              const newEventsFromSplit = this._splitSafely(nextSeg, nextInter);
              for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {
                newEvents.push(newEventsFromSplit[i]);
              }
            }
          }
        }
        if (prevMySplitter !== null || nextMySplitter !== null) {
          let mySplitter = null;
          if (prevMySplitter === null) mySplitter = nextMySplitter;
          else if (nextMySplitter === null) mySplitter = prevMySplitter;
          else {
            const cmpSplitters = SweepEvent.comparePoints(
              prevMySplitter,
              nextMySplitter
            );
            mySplitter = cmpSplitters <= 0 ? prevMySplitter : nextMySplitter;
          }
          this.queue.delete(segment.rightSE);
          newEvents.push(segment.rightSE);
          const newEventsFromSplit = segment.split(mySplitter);
          for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {
            newEvents.push(newEventsFromSplit[i]);
          }
        }
        if (newEvents.length > 0) {
          this.tree.delete(segment);
          newEvents.push(event);
        } else {
          this.segments.push(segment);
          segment.prev = prevSeg;
        }
      } else {
        if (prevSeg && nextSeg) {
          const inter = prevSeg.getIntersection(nextSeg);
          if (inter !== null) {
            if (!prevSeg.isAnEndpoint(inter)) {
              const newEventsFromSplit = this._splitSafely(prevSeg, inter);
              for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {
                newEvents.push(newEventsFromSplit[i]);
              }
            }
            if (!nextSeg.isAnEndpoint(inter)) {
              const newEventsFromSplit = this._splitSafely(nextSeg, inter);
              for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {
                newEvents.push(newEventsFromSplit[i]);
              }
            }
          }
        }
        this.tree.delete(segment);
      }
      return newEvents;
    }
    /* Safely split a segment that is currently in the datastructures
     * IE - a segment other than the one that is currently being processed. */
    _splitSafely(seg, pt) {
      this.tree.delete(seg);
      const rightSE = seg.rightSE;
      this.queue.delete(rightSE);
      const newEvents = seg.split(pt);
      newEvents.push(rightSE);
      if (seg.consumedBy === void 0) this.tree.add(seg);
      return newEvents;
    }
  };
  var Operation = class {
    constructor() {
      __publicField(this, "type");
      __publicField(this, "numMultiPolys");
    }
    run(type, geom, moreGeoms) {
      operation.type = type;
      const multipolys = [new MultiPolyIn(geom, true)];
      for (let i = 0, iMax = moreGeoms.length; i < iMax; i++) {
        multipolys.push(new MultiPolyIn(moreGeoms[i], false));
      }
      operation.numMultiPolys = multipolys.length;
      if (operation.type === "difference") {
        const subject = multipolys[0];
        let i = 1;
        while (i < multipolys.length) {
          if (getBboxOverlap(multipolys[i].bbox, subject.bbox) !== null) i++;
          else multipolys.splice(i, 1);
        }
      }
      if (operation.type === "intersection") {
        for (let i = 0, iMax = multipolys.length; i < iMax; i++) {
          const mpA = multipolys[i];
          for (let j = i + 1, jMax = multipolys.length; j < jMax; j++) {
            if (getBboxOverlap(mpA.bbox, multipolys[j].bbox) === null) return [];
          }
        }
      }
      const queue = new SplayTreeSet(SweepEvent.compare);
      for (let i = 0, iMax = multipolys.length; i < iMax; i++) {
        const sweepEvents = multipolys[i].getSweepEvents();
        for (let j = 0, jMax = sweepEvents.length; j < jMax; j++) {
          queue.add(sweepEvents[j]);
        }
      }
      const sweepLine = new SweepLine(queue);
      let evt = null;
      if (queue.size != 0) {
        evt = queue.first();
        queue.delete(evt);
      }
      while (evt) {
        const newEvents = sweepLine.process(evt);
        for (let i = 0, iMax = newEvents.length; i < iMax; i++) {
          const evt2 = newEvents[i];
          if (evt2.consumedBy === void 0) queue.add(evt2);
        }
        if (queue.size != 0) {
          evt = queue.first();
          queue.delete(evt);
        } else {
          evt = null;
        }
      }
      precision.reset();
      const ringsOut = RingOut.factory(sweepLine.segments);
      const result = new MultiPolyOut(ringsOut);
      return result.getGeom();
    }
  };
  var operation = new Operation();
  var operation_default = operation;
  var segmentId = 0;
  var Segment2 = class _Segment {
    /* Warning: a reference to ringWindings input will be stored,
     *  and possibly will be later modified */
    constructor(leftSE, rightSE, rings, windings) {
      __publicField(this, "id");
      __publicField(this, "leftSE");
      __publicField(this, "rightSE");
      __publicField(this, "rings");
      __publicField(this, "windings");
      __publicField(this, "ringOut");
      __publicField(this, "consumedBy");
      __publicField(this, "prev");
      __publicField(this, "_prevInResult");
      __publicField(this, "_beforeState");
      __publicField(this, "_afterState");
      __publicField(this, "_isInResult");
      this.id = ++segmentId;
      this.leftSE = leftSE;
      leftSE.segment = this;
      leftSE.otherSE = rightSE;
      this.rightSE = rightSE;
      rightSE.segment = this;
      rightSE.otherSE = leftSE;
      this.rings = rings;
      this.windings = windings;
    }
    /* This compare() function is for ordering segments in the sweep
     * line tree, and does so according to the following criteria:
     *
     * Consider the vertical line that lies an infinestimal step to the
     * right of the right-more of the two left endpoints of the input
     * segments. Imagine slowly moving a point up from negative infinity
     * in the increasing y direction. Which of the two segments will that
     * point intersect first? That segment comes 'before' the other one.
     *
     * If neither segment would be intersected by such a line, (if one
     * or more of the segments are vertical) then the line to be considered
     * is directly on the right-more of the two left inputs.
     */
    static compare(a, b) {
      const alx = a.leftSE.point.x;
      const blx = b.leftSE.point.x;
      const arx = a.rightSE.point.x;
      const brx = b.rightSE.point.x;
      if (brx.isLessThan(alx)) return 1;
      if (arx.isLessThan(blx)) return -1;
      const aly = a.leftSE.point.y;
      const bly = b.leftSE.point.y;
      const ary = a.rightSE.point.y;
      const bry = b.rightSE.point.y;
      if (alx.isLessThan(blx)) {
        if (bly.isLessThan(aly) && bly.isLessThan(ary)) return 1;
        if (bly.isGreaterThan(aly) && bly.isGreaterThan(ary)) return -1;
        const aCmpBLeft = a.comparePoint(b.leftSE.point);
        if (aCmpBLeft < 0) return 1;
        if (aCmpBLeft > 0) return -1;
        const bCmpARight = b.comparePoint(a.rightSE.point);
        if (bCmpARight !== 0) return bCmpARight;
        return -1;
      }
      if (alx.isGreaterThan(blx)) {
        if (aly.isLessThan(bly) && aly.isLessThan(bry)) return -1;
        if (aly.isGreaterThan(bly) && aly.isGreaterThan(bry)) return 1;
        const bCmpALeft = b.comparePoint(a.leftSE.point);
        if (bCmpALeft !== 0) return bCmpALeft;
        const aCmpBRight = a.comparePoint(b.rightSE.point);
        if (aCmpBRight < 0) return 1;
        if (aCmpBRight > 0) return -1;
        return 1;
      }
      if (aly.isLessThan(bly)) return -1;
      if (aly.isGreaterThan(bly)) return 1;
      if (arx.isLessThan(brx)) {
        const bCmpARight = b.comparePoint(a.rightSE.point);
        if (bCmpARight !== 0) return bCmpARight;
      }
      if (arx.isGreaterThan(brx)) {
        const aCmpBRight = a.comparePoint(b.rightSE.point);
        if (aCmpBRight < 0) return 1;
        if (aCmpBRight > 0) return -1;
      }
      if (!arx.eq(brx)) {
        const ay = ary.minus(aly);
        const ax = arx.minus(alx);
        const by = bry.minus(bly);
        const bx = brx.minus(blx);
        if (ay.isGreaterThan(ax) && by.isLessThan(bx)) return 1;
        if (ay.isLessThan(ax) && by.isGreaterThan(bx)) return -1;
      }
      if (arx.isGreaterThan(brx)) return 1;
      if (arx.isLessThan(brx)) return -1;
      if (ary.isLessThan(bry)) return -1;
      if (ary.isGreaterThan(bry)) return 1;
      if (a.id < b.id) return -1;
      if (a.id > b.id) return 1;
      return 0;
    }
    static fromRing(pt1, pt2, ring) {
      let leftPt, rightPt, winding;
      const cmpPts = SweepEvent.comparePoints(pt1, pt2);
      if (cmpPts < 0) {
        leftPt = pt1;
        rightPt = pt2;
        winding = 1;
      } else if (cmpPts > 0) {
        leftPt = pt2;
        rightPt = pt1;
        winding = -1;
      } else
        throw new Error(
          `Tried to create degenerate segment at [${pt1.x}, ${pt1.y}]`
        );
      const leftSE = new SweepEvent(leftPt, true);
      const rightSE = new SweepEvent(rightPt, false);
      return new _Segment(leftSE, rightSE, [ring], [winding]);
    }
    /* When a segment is split, the rightSE is replaced with a new sweep event */
    replaceRightSE(newRightSE) {
      this.rightSE = newRightSE;
      this.rightSE.segment = this;
      this.rightSE.otherSE = this.leftSE;
      this.leftSE.otherSE = this.rightSE;
    }
    bbox() {
      const y1 = this.leftSE.point.y;
      const y2 = this.rightSE.point.y;
      return {
        ll: { x: this.leftSE.point.x, y: y1.isLessThan(y2) ? y1 : y2 },
        ur: { x: this.rightSE.point.x, y: y1.isGreaterThan(y2) ? y1 : y2 }
      };
    }
    /* A vector from the left point to the right */
    vector() {
      return {
        x: this.rightSE.point.x.minus(this.leftSE.point.x),
        y: this.rightSE.point.y.minus(this.leftSE.point.y)
      };
    }
    isAnEndpoint(pt) {
      return pt.x.eq(this.leftSE.point.x) && pt.y.eq(this.leftSE.point.y) || pt.x.eq(this.rightSE.point.x) && pt.y.eq(this.rightSE.point.y);
    }
    /* Compare this segment with a point.
     *
     * A point P is considered to be colinear to a segment if there
     * exists a distance D such that if we travel along the segment
     * from one * endpoint towards the other a distance D, we find
     * ourselves at point P.
     *
     * Return value indicates:
     *
     *   1: point lies above the segment (to the left of vertical)
     *   0: point is colinear to segment
     *  -1: point lies below the segment (to the right of vertical)
     */
    comparePoint(point2) {
      return precision.orient(this.leftSE.point, point2, this.rightSE.point);
    }
    /**
     * Given another segment, returns the first non-trivial intersection
     * between the two segments (in terms of sweep line ordering), if it exists.
     *
     * A 'non-trivial' intersection is one that will cause one or both of the
     * segments to be split(). As such, 'trivial' vs. 'non-trivial' intersection:
     *
     *   * endpoint of segA with endpoint of segB --> trivial
     *   * endpoint of segA with point along segB --> non-trivial
     *   * endpoint of segB with point along segA --> non-trivial
     *   * point along segA with point along segB --> non-trivial
     *
     * If no non-trivial intersection exists, return null
     * Else, return null.
     */
    getIntersection(other) {
      const tBbox = this.bbox();
      const oBbox = other.bbox();
      const bboxOverlap = getBboxOverlap(tBbox, oBbox);
      if (bboxOverlap === null) return null;
      const tlp = this.leftSE.point;
      const trp = this.rightSE.point;
      const olp = other.leftSE.point;
      const orp = other.rightSE.point;
      const touchesOtherLSE = isInBbox(tBbox, olp) && this.comparePoint(olp) === 0;
      const touchesThisLSE = isInBbox(oBbox, tlp) && other.comparePoint(tlp) === 0;
      const touchesOtherRSE = isInBbox(tBbox, orp) && this.comparePoint(orp) === 0;
      const touchesThisRSE = isInBbox(oBbox, trp) && other.comparePoint(trp) === 0;
      if (touchesThisLSE && touchesOtherLSE) {
        if (touchesThisRSE && !touchesOtherRSE) return trp;
        if (!touchesThisRSE && touchesOtherRSE) return orp;
        return null;
      }
      if (touchesThisLSE) {
        if (touchesOtherRSE) {
          if (tlp.x.eq(orp.x) && tlp.y.eq(orp.y)) return null;
        }
        return tlp;
      }
      if (touchesOtherLSE) {
        if (touchesThisRSE) {
          if (trp.x.eq(olp.x) && trp.y.eq(olp.y)) return null;
        }
        return olp;
      }
      if (touchesThisRSE && touchesOtherRSE) return null;
      if (touchesThisRSE) return trp;
      if (touchesOtherRSE) return orp;
      const pt = intersection(tlp, this.vector(), olp, other.vector());
      if (pt === null) return null;
      if (!isInBbox(bboxOverlap, pt)) return null;
      return precision.snap(pt);
    }
    /**
     * Split the given segment into multiple segments on the given points.
     *  * Each existing segment will retain its leftSE and a new rightSE will be
     *    generated for it.
     *  * A new segment will be generated which will adopt the original segment's
     *    rightSE, and a new leftSE will be generated for it.
     *  * If there are more than two points given to split on, new segments
     *    in the middle will be generated with new leftSE and rightSE's.
     *  * An array of the newly generated SweepEvents will be returned.
     *
     * Warning: input array of points is modified
     */
    split(point2) {
      const newEvents = [];
      const alreadyLinked = point2.events !== void 0;
      const newLeftSE = new SweepEvent(point2, true);
      const newRightSE = new SweepEvent(point2, false);
      const oldRightSE = this.rightSE;
      this.replaceRightSE(newRightSE);
      newEvents.push(newRightSE);
      newEvents.push(newLeftSE);
      const newSeg = new _Segment(
        newLeftSE,
        oldRightSE,
        this.rings.slice(),
        this.windings.slice()
      );
      if (SweepEvent.comparePoints(newSeg.leftSE.point, newSeg.rightSE.point) > 0) {
        newSeg.swapEvents();
      }
      if (SweepEvent.comparePoints(this.leftSE.point, this.rightSE.point) > 0) {
        this.swapEvents();
      }
      if (alreadyLinked) {
        newLeftSE.checkForConsuming();
        newRightSE.checkForConsuming();
      }
      return newEvents;
    }
    /* Swap which event is left and right */
    swapEvents() {
      const tmpEvt = this.rightSE;
      this.rightSE = this.leftSE;
      this.leftSE = tmpEvt;
      this.leftSE.isLeft = true;
      this.rightSE.isLeft = false;
      for (let i = 0, iMax = this.windings.length; i < iMax; i++) {
        this.windings[i] *= -1;
      }
    }
    /* Consume another segment. We take their rings under our wing
     * and mark them as consumed. Use for perfectly overlapping segments */
    consume(other) {
      let consumer = this;
      let consumee = other;
      while (consumer.consumedBy) consumer = consumer.consumedBy;
      while (consumee.consumedBy) consumee = consumee.consumedBy;
      const cmp = _Segment.compare(consumer, consumee);
      if (cmp === 0) return;
      if (cmp > 0) {
        const tmp = consumer;
        consumer = consumee;
        consumee = tmp;
      }
      if (consumer.prev === consumee) {
        const tmp = consumer;
        consumer = consumee;
        consumee = tmp;
      }
      for (let i = 0, iMax = consumee.rings.length; i < iMax; i++) {
        const ring = consumee.rings[i];
        const winding = consumee.windings[i];
        const index = consumer.rings.indexOf(ring);
        if (index === -1) {
          consumer.rings.push(ring);
          consumer.windings.push(winding);
        } else consumer.windings[index] += winding;
      }
      consumee.rings = null;
      consumee.windings = null;
      consumee.consumedBy = consumer;
      consumee.leftSE.consumedBy = consumer.leftSE;
      consumee.rightSE.consumedBy = consumer.rightSE;
    }
    /* The first segment previous segment chain that is in the result */
    prevInResult() {
      if (this._prevInResult !== void 0) return this._prevInResult;
      if (!this.prev) this._prevInResult = null;
      else if (this.prev.isInResult()) this._prevInResult = this.prev;
      else this._prevInResult = this.prev.prevInResult();
      return this._prevInResult;
    }
    beforeState() {
      if (this._beforeState !== void 0) return this._beforeState;
      if (!this.prev)
        this._beforeState = {
          rings: [],
          windings: [],
          multiPolys: []
        };
      else {
        const seg = this.prev.consumedBy || this.prev;
        this._beforeState = seg.afterState();
      }
      return this._beforeState;
    }
    afterState() {
      if (this._afterState !== void 0) return this._afterState;
      const beforeState = this.beforeState();
      this._afterState = {
        rings: beforeState.rings.slice(0),
        windings: beforeState.windings.slice(0),
        multiPolys: []
      };
      const ringsAfter = this._afterState.rings;
      const windingsAfter = this._afterState.windings;
      const mpsAfter = this._afterState.multiPolys;
      for (let i = 0, iMax = this.rings.length; i < iMax; i++) {
        const ring = this.rings[i];
        const winding = this.windings[i];
        const index = ringsAfter.indexOf(ring);
        if (index === -1) {
          ringsAfter.push(ring);
          windingsAfter.push(winding);
        } else windingsAfter[index] += winding;
      }
      const polysAfter = [];
      const polysExclude = [];
      for (let i = 0, iMax = ringsAfter.length; i < iMax; i++) {
        if (windingsAfter[i] === 0) continue;
        const ring = ringsAfter[i];
        const poly = ring.poly;
        if (polysExclude.indexOf(poly) !== -1) continue;
        if (ring.isExterior) polysAfter.push(poly);
        else {
          if (polysExclude.indexOf(poly) === -1) polysExclude.push(poly);
          const index = polysAfter.indexOf(ring.poly);
          if (index !== -1) polysAfter.splice(index, 1);
        }
      }
      for (let i = 0, iMax = polysAfter.length; i < iMax; i++) {
        const mp = polysAfter[i].multiPoly;
        if (mpsAfter.indexOf(mp) === -1) mpsAfter.push(mp);
      }
      return this._afterState;
    }
    /* Is this segment part of the final result? */
    isInResult() {
      if (this.consumedBy) return false;
      if (this._isInResult !== void 0) return this._isInResult;
      const mpsBefore = this.beforeState().multiPolys;
      const mpsAfter = this.afterState().multiPolys;
      switch (operation_default.type) {
        case "union": {
          const noBefores = mpsBefore.length === 0;
          const noAfters = mpsAfter.length === 0;
          this._isInResult = noBefores !== noAfters;
          break;
        }
        case "intersection": {
          let least;
          let most;
          if (mpsBefore.length < mpsAfter.length) {
            least = mpsBefore.length;
            most = mpsAfter.length;
          } else {
            least = mpsAfter.length;
            most = mpsBefore.length;
          }
          this._isInResult = most === operation_default.numMultiPolys && least < most;
          break;
        }
        case "xor": {
          const diff = Math.abs(mpsBefore.length - mpsAfter.length);
          this._isInResult = diff % 2 === 1;
          break;
        }
        case "difference": {
          const isJustSubject = (mps) => mps.length === 1 && mps[0].isSubject;
          this._isInResult = isJustSubject(mpsBefore) !== isJustSubject(mpsAfter);
          break;
        }
      }
      return this._isInResult;
    }
  };
  var RingIn = class {
    constructor(geomRing, poly, isExterior) {
      __publicField(this, "poly");
      __publicField(this, "isExterior");
      __publicField(this, "segments");
      __publicField(this, "bbox");
      if (!Array.isArray(geomRing) || geomRing.length === 0) {
        throw new Error("Input geometry is not a valid Polygon or MultiPolygon");
      }
      this.poly = poly;
      this.isExterior = isExterior;
      this.segments = [];
      if (typeof geomRing[0][0] !== "number" || typeof geomRing[0][1] !== "number") {
        throw new Error("Input geometry is not a valid Polygon or MultiPolygon");
      }
      const firstPoint = precision.snap({ x: new bignumber_default(geomRing[0][0]), y: new bignumber_default(geomRing[0][1]) });
      this.bbox = {
        ll: { x: firstPoint.x, y: firstPoint.y },
        ur: { x: firstPoint.x, y: firstPoint.y }
      };
      let prevPoint = firstPoint;
      for (let i = 1, iMax = geomRing.length; i < iMax; i++) {
        if (typeof geomRing[i][0] !== "number" || typeof geomRing[i][1] !== "number") {
          throw new Error("Input geometry is not a valid Polygon or MultiPolygon");
        }
        const point2 = precision.snap({ x: new bignumber_default(geomRing[i][0]), y: new bignumber_default(geomRing[i][1]) });
        if (point2.x.eq(prevPoint.x) && point2.y.eq(prevPoint.y)) continue;
        this.segments.push(Segment2.fromRing(prevPoint, point2, this));
        if (point2.x.isLessThan(this.bbox.ll.x)) this.bbox.ll.x = point2.x;
        if (point2.y.isLessThan(this.bbox.ll.y)) this.bbox.ll.y = point2.y;
        if (point2.x.isGreaterThan(this.bbox.ur.x)) this.bbox.ur.x = point2.x;
        if (point2.y.isGreaterThan(this.bbox.ur.y)) this.bbox.ur.y = point2.y;
        prevPoint = point2;
      }
      if (!firstPoint.x.eq(prevPoint.x) || !firstPoint.y.eq(prevPoint.y)) {
        this.segments.push(Segment2.fromRing(prevPoint, firstPoint, this));
      }
    }
    getSweepEvents() {
      const sweepEvents = [];
      for (let i = 0, iMax = this.segments.length; i < iMax; i++) {
        const segment = this.segments[i];
        sweepEvents.push(segment.leftSE);
        sweepEvents.push(segment.rightSE);
      }
      return sweepEvents;
    }
  };
  var PolyIn = class {
    constructor(geomPoly, multiPoly) {
      __publicField(this, "multiPoly");
      __publicField(this, "exteriorRing");
      __publicField(this, "interiorRings");
      __publicField(this, "bbox");
      if (!Array.isArray(geomPoly)) {
        throw new Error("Input geometry is not a valid Polygon or MultiPolygon");
      }
      this.exteriorRing = new RingIn(geomPoly[0], this, true);
      this.bbox = {
        ll: { x: this.exteriorRing.bbox.ll.x, y: this.exteriorRing.bbox.ll.y },
        ur: { x: this.exteriorRing.bbox.ur.x, y: this.exteriorRing.bbox.ur.y }
      };
      this.interiorRings = [];
      for (let i = 1, iMax = geomPoly.length; i < iMax; i++) {
        const ring = new RingIn(geomPoly[i], this, false);
        if (ring.bbox.ll.x.isLessThan(this.bbox.ll.x)) this.bbox.ll.x = ring.bbox.ll.x;
        if (ring.bbox.ll.y.isLessThan(this.bbox.ll.y)) this.bbox.ll.y = ring.bbox.ll.y;
        if (ring.bbox.ur.x.isGreaterThan(this.bbox.ur.x)) this.bbox.ur.x = ring.bbox.ur.x;
        if (ring.bbox.ur.y.isGreaterThan(this.bbox.ur.y)) this.bbox.ur.y = ring.bbox.ur.y;
        this.interiorRings.push(ring);
      }
      this.multiPoly = multiPoly;
    }
    getSweepEvents() {
      const sweepEvents = this.exteriorRing.getSweepEvents();
      for (let i = 0, iMax = this.interiorRings.length; i < iMax; i++) {
        const ringSweepEvents = this.interiorRings[i].getSweepEvents();
        for (let j = 0, jMax = ringSweepEvents.length; j < jMax; j++) {
          sweepEvents.push(ringSweepEvents[j]);
        }
      }
      return sweepEvents;
    }
  };
  var MultiPolyIn = class {
    constructor(geom, isSubject) {
      __publicField(this, "isSubject");
      __publicField(this, "polys");
      __publicField(this, "bbox");
      if (!Array.isArray(geom)) {
        throw new Error("Input geometry is not a valid Polygon or MultiPolygon");
      }
      try {
        if (typeof geom[0][0][0] === "number") geom = [geom];
      } catch (ex) {
      }
      this.polys = [];
      this.bbox = {
        ll: { x: new bignumber_default(Number.POSITIVE_INFINITY), y: new bignumber_default(Number.POSITIVE_INFINITY) },
        ur: { x: new bignumber_default(Number.NEGATIVE_INFINITY), y: new bignumber_default(Number.NEGATIVE_INFINITY) }
      };
      for (let i = 0, iMax = geom.length; i < iMax; i++) {
        const poly = new PolyIn(geom[i], this);
        if (poly.bbox.ll.x.isLessThan(this.bbox.ll.x)) this.bbox.ll.x = poly.bbox.ll.x;
        if (poly.bbox.ll.y.isLessThan(this.bbox.ll.y)) this.bbox.ll.y = poly.bbox.ll.y;
        if (poly.bbox.ur.x.isGreaterThan(this.bbox.ur.x)) this.bbox.ur.x = poly.bbox.ur.x;
        if (poly.bbox.ur.y.isGreaterThan(this.bbox.ur.y)) this.bbox.ur.y = poly.bbox.ur.y;
        this.polys.push(poly);
      }
      this.isSubject = isSubject;
    }
    getSweepEvents() {
      const sweepEvents = [];
      for (let i = 0, iMax = this.polys.length; i < iMax; i++) {
        const polySweepEvents = this.polys[i].getSweepEvents();
        for (let j = 0, jMax = polySweepEvents.length; j < jMax; j++) {
          sweepEvents.push(polySweepEvents[j]);
        }
      }
      return sweepEvents;
    }
  };
  var intersection2 = (geom, ...moreGeoms) => operation_default.run("intersection", geom, moreGeoms);
  var setPrecision = precision.set;

  // node_modules/@turf/intersect/dist/esm/index.js
  function intersect(features, options = {}) {
    const geoms = [];
    geomEach(features, (geom) => {
      geoms.push(geom.coordinates);
    });
    if (geoms.length < 2) {
      throw new Error("Must specify at least 2 geometries");
    }
    const intersection22 = intersection2(geoms[0], ...geoms.slice(1));
    if (intersection22.length === 0) return null;
    if (intersection22.length === 1)
      return polygon(intersection22[0], options.properties);
    return multiPolygon(intersection22, options.properties);
  }
  var turf_intersect_default = intersect;

  // src/utils/transformToTileCoords.ts
  var TRANSFORM_FN2 = {
    Point: transformPoint2,
    MultiPoint: transformMultiPoint2,
    LineString: transformLineString2,
    MultiLineString: transformMultiLineString2,
    Polygon: transformPolygon2,
    MultiPolygon: transformMultiPolygon2
  };
  function transformToTileCoords(geometry, bbox2) {
    const [west, south, east, north] = bbox2;
    const nw = projectFlat([west, north]);
    const se = projectFlat([east, south]);
    const projectedBbox = [nw, se];
    if (geometry.type === "GeometryCollection") {
      throw new Error("Unsupported geometry type GeometryCollection");
    }
    const transformFn = TRANSFORM_FN2[geometry.type];
    const coordinates = transformFn(geometry.coordinates, projectedBbox);
    return { ...geometry, coordinates };
  }
  function transformPoint2([pointX, pointY], [nw, se]) {
    const x = inverseLerp(nw[0], se[0], pointX);
    const y = inverseLerp(nw[1], se[1], pointY);
    return [x, y];
  }
  function getPoints2(geometry, bbox2) {
    return geometry.map((g) => transformPoint2(projectFlat(g), bbox2));
  }
  function transformMultiPoint2(multiPoint, bbox2) {
    return getPoints2(multiPoint, bbox2);
  }
  function transformLineString2(line, bbox2) {
    return getPoints2(line, bbox2);
  }
  function transformMultiLineString2(multiLineString2, bbox2) {
    return multiLineString2.map(
      (lineString2) => transformLineString2(lineString2, bbox2)
    );
  }
  function transformPolygon2(polygon2, bbox2) {
    return polygon2.map((polygonRing) => getPoints2(polygonRing, bbox2));
  }
  function transformMultiPolygon2(multiPolygon2, bbox2) {
    return multiPolygon2.map((polygon2) => transformPolygon2(polygon2, bbox2));
  }
  function projectFlat(xyz) {
    return lngLatToWorld(xyz);
  }
  function inverseLerp(a, b, x) {
    return (x - a) / (b - a);
  }

  // node_modules/quadbin/dist/index.esm.js
  var d2r = Math.PI / 180;
  var r2d = 180 / Math.PI;
  function tileToBBOX(tile) {
    var e = tile2lon(tile[0] + 1, tile[2]);
    var w = tile2lon(tile[0], tile[2]);
    var s = tile2lat(tile[1] + 1, tile[2]);
    var n = tile2lat(tile[1], tile[2]);
    return [w, s, e, n];
  }
  function tileToGeoJSON(tile) {
    var bbox2 = tileToBBOX(tile);
    var poly = {
      type: "Polygon",
      coordinates: [
        [
          [bbox2[0], bbox2[1]],
          [bbox2[0], bbox2[3]],
          [bbox2[2], bbox2[3]],
          [bbox2[2], bbox2[1]],
          [bbox2[0], bbox2[1]]
        ]
      ]
    };
    return poly;
  }
  function tile2lon(x, z) {
    return x / Math.pow(2, z) * 360 - 180;
  }
  function tile2lat(y, z) {
    var n = Math.PI - 2 * Math.PI * y / Math.pow(2, z);
    return r2d * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)));
  }
  function pointToTile(lon, lat, z) {
    var tile = pointToTileFraction(lon, lat, z);
    tile[0] = Math.floor(tile[0]);
    tile[1] = Math.floor(tile[1]);
    return tile;
  }
  function getChildren(tile) {
    return [
      [tile[0] * 2, tile[1] * 2, tile[2] + 1],
      [tile[0] * 2 + 1, tile[1] * 2, tile[2] + 1],
      [tile[0] * 2 + 1, tile[1] * 2 + 1, tile[2] + 1],
      [tile[0] * 2, tile[1] * 2 + 1, tile[2] + 1]
    ];
  }
  function getParent(tile) {
    if (tile[0] % 2 === 0 && tile[1] % 2 === 0) {
      return [tile[0] / 2, tile[1] / 2, tile[2] - 1];
    } else if (tile[0] % 2 === 0 && !tile[1] % 2 === 0) {
      return [tile[0] / 2, (tile[1] - 1) / 2, tile[2] - 1];
    } else if (!tile[0] % 2 === 0 && tile[1] % 2 === 0) {
      return [(tile[0] - 1) / 2, tile[1] / 2, tile[2] - 1];
    } else {
      return [(tile[0] - 1) / 2, (tile[1] - 1) / 2, tile[2] - 1];
    }
  }
  function getSiblings(tile) {
    return getChildren(getParent(tile));
  }
  function hasSiblings(tile, tiles2) {
    var siblings = getSiblings(tile);
    for (var i = 0; i < siblings.length; i++) {
      if (!hasTile(tiles2, siblings[i])) return false;
    }
    return true;
  }
  function hasTile(tiles2, tile) {
    for (var i = 0; i < tiles2.length; i++) {
      if (tilesEqual(tiles2[i], tile)) return true;
    }
    return false;
  }
  function tilesEqual(tile1, tile2) {
    return tile1[0] === tile2[0] && tile1[1] === tile2[1] && tile1[2] === tile2[2];
  }
  function tileToQuadkey(tile) {
    var index = "";
    for (var z = tile[2]; z > 0; z--) {
      var b = 0;
      var mask = 1 << z - 1;
      if ((tile[0] & mask) !== 0) b++;
      if ((tile[1] & mask) !== 0) b += 2;
      index += b.toString();
    }
    return index;
  }
  function quadkeyToTile(quadkey) {
    var x = 0;
    var y = 0;
    var z = quadkey.length;
    for (var i = z; i > 0; i--) {
      var mask = 1 << i - 1;
      switch (quadkey[z - i]) {
        case "0":
          break;
        case "1":
          x |= mask;
          break;
        case "2":
          y |= mask;
          break;
        case "3":
          x |= mask;
          y |= mask;
          break;
      }
    }
    return [x, y, z];
  }
  function bboxToTile(bboxCoords) {
    var min2 = pointToTile(bboxCoords[0], bboxCoords[1], 32);
    var max2 = pointToTile(bboxCoords[2], bboxCoords[3], 32);
    var bbox2 = [min2[0], min2[1], max2[0], max2[1]];
    var z = getBboxZoom(bbox2);
    if (z === 0) return [0, 0, 0];
    var x = bbox2[0] >>> 32 - z;
    var y = bbox2[1] >>> 32 - z;
    return [x, y, z];
  }
  function getBboxZoom(bbox2) {
    var MAX_ZOOM = 28;
    for (var z = 0; z < MAX_ZOOM; z++) {
      var mask = 1 << 32 - (z + 1);
      if ((bbox2[0] & mask) != (bbox2[2] & mask) || (bbox2[1] & mask) != (bbox2[3] & mask)) {
        return z;
      }
    }
    return MAX_ZOOM;
  }
  function pointToTileFraction(lon, lat, z) {
    var sin2 = Math.sin(lat * d2r), z2 = Math.pow(2, z), x = z2 * (lon / 360 + 0.5), y = z2 * (0.5 - 0.25 * Math.log((1 + sin2) / (1 - sin2)) / Math.PI);
    return [x, y, z];
  }
  var tilebelt = {
    tileToGeoJSON,
    tileToBBOX,
    getChildren,
    getParent,
    getSiblings,
    hasTile,
    hasSiblings,
    tilesEqual,
    tileToQuadkey,
    quadkeyToTile,
    pointToTile,
    bboxToTile,
    pointToTileFraction
  };
  var tiles = getTiles;
  function getTiles(geom, limits) {
    var i, tile, coords = geom.coordinates, maxZoom = limits.max_zoom, tileHash = {}, tiles2 = [];
    if (geom.type === "Point") {
      return [tilebelt.pointToTile(coords[0], coords[1], maxZoom)];
    } else if (geom.type === "MultiPoint") {
      for (i = 0; i < coords.length; i++) {
        tile = tilebelt.pointToTile(coords[i][0], coords[i][1], maxZoom);
        tileHash[toID(tile[0], tile[1], tile[2])] = true;
      }
    } else if (geom.type === "LineString") {
      lineCover(tileHash, coords, maxZoom);
    } else if (geom.type === "MultiLineString") {
      for (i = 0; i < coords.length; i++) {
        lineCover(tileHash, coords[i], maxZoom);
      }
    } else if (geom.type === "Polygon") {
      polygonCover(tileHash, tiles2, coords, maxZoom);
    } else if (geom.type === "MultiPolygon") {
      for (i = 0; i < coords.length; i++) {
        polygonCover(tileHash, tiles2, coords[i], maxZoom);
      }
    } else {
      throw new Error("Geometry type not implemented");
    }
    if (limits.min_zoom !== maxZoom) {
      var len = tiles2.length;
      appendHashTiles(tileHash, tiles2);
      for (i = 0; i < len; i++) {
        var t = tiles2[i];
        tileHash[toID(t[0], t[1], t[2])] = true;
      }
      return mergeTiles(tileHash, tiles2, limits);
    }
    appendHashTiles(tileHash, tiles2);
    return tiles2;
  }
  function mergeTiles(tileHash, tiles2, limits) {
    var mergedTiles = [];
    for (var z = limits.max_zoom; z > limits.min_zoom; z--) {
      var parentTileHash = {};
      var parentTiles = [];
      for (var i = 0; i < tiles2.length; i++) {
        var t = tiles2[i];
        if (t[0] % 2 === 0 && t[1] % 2 === 0) {
          var id2 = toID(t[0] + 1, t[1], z), id3 = toID(t[0], t[1] + 1, z), id4 = toID(t[0] + 1, t[1] + 1, z);
          if (tileHash[id2] && tileHash[id3] && tileHash[id4]) {
            tileHash[toID(t[0], t[1], t[2])] = false;
            tileHash[id2] = false;
            tileHash[id3] = false;
            tileHash[id4] = false;
            var parentTile = [t[0] / 2, t[1] / 2, z - 1];
            if (z - 1 === limits.min_zoom) mergedTiles.push(parentTile);
            else {
              parentTileHash[toID(t[0] / 2, t[1] / 2, z - 1)] = true;
              parentTiles.push(parentTile);
            }
          }
        }
      }
      for (i = 0; i < tiles2.length; i++) {
        t = tiles2[i];
        if (tileHash[toID(t[0], t[1], t[2])]) mergedTiles.push(t);
      }
      tileHash = parentTileHash;
      tiles2 = parentTiles;
    }
    return mergedTiles;
  }
  function polygonCover(tileHash, tileArray, geom, zoom) {
    var intersections = [];
    for (var i = 0; i < geom.length; i++) {
      var ring = [];
      lineCover(tileHash, geom[i], zoom, ring);
      for (var j = 0, len = ring.length, k = len - 1; j < len; k = j++) {
        var m = (j + 1) % len;
        var y = ring[j][1];
        if ((y > ring[k][1] || y > ring[m][1]) && // not local minimum
        (y < ring[k][1] || y < ring[m][1]) && // not local maximum
        y !== ring[m][1]) intersections.push(ring[j]);
      }
    }
    intersections.sort(compareTiles);
    for (i = 0; i < intersections.length; i += 2) {
      y = intersections[i][1];
      for (var x = intersections[i][0] + 1; x < intersections[i + 1][0]; x++) {
        var id = toID(x, y, zoom);
        if (!tileHash[id]) {
          tileArray.push([x, y, zoom]);
        }
      }
    }
  }
  function compareTiles(a, b) {
    return a[1] - b[1] || a[0] - b[0];
  }
  function lineCover(tileHash, coords, maxZoom, ring) {
    var prevX, prevY;
    for (var i = 0; i < coords.length - 1; i++) {
      var start = tilebelt.pointToTileFraction(coords[i][0], coords[i][1], maxZoom), stop = tilebelt.pointToTileFraction(coords[i + 1][0], coords[i + 1][1], maxZoom), x0 = start[0], y0 = start[1], x1 = stop[0], y1 = stop[1], dx = x1 - x0, dy = y1 - y0;
      if (dy === 0 && dx === 0) continue;
      var sx = dx > 0 ? 1 : -1, sy = dy > 0 ? 1 : -1, x = Math.floor(x0), y = Math.floor(y0), tMaxX = dx === 0 ? Infinity : Math.abs(((dx > 0 ? 1 : 0) + x - x0) / dx), tMaxY = dy === 0 ? Infinity : Math.abs(((dy > 0 ? 1 : 0) + y - y0) / dy), tdx = Math.abs(sx / dx), tdy = Math.abs(sy / dy);
      if (x !== prevX || y !== prevY) {
        tileHash[toID(x, y, maxZoom)] = true;
        if (ring && y !== prevY) ring.push([x, y]);
        prevX = x;
        prevY = y;
      }
      while (tMaxX < 1 || tMaxY < 1) {
        if (tMaxX < tMaxY) {
          tMaxX += tdx;
          x += sx;
        } else {
          tMaxY += tdy;
          y += sy;
        }
        tileHash[toID(x, y, maxZoom)] = true;
        if (ring && y !== prevY) ring.push([x, y]);
        prevX = x;
        prevY = y;
      }
    }
    if (ring && y === ring[0][1]) ring.pop();
  }
  function appendHashTiles(hash, tiles2) {
    var keys = Object.keys(hash);
    for (var i = 0; i < keys.length; i++) {
      tiles2.push(fromID(+keys[i]));
    }
  }
  function toID(x, y, z) {
    var dim = 2 * (1 << z);
    return (dim * y + x) * 32 + z;
  }
  function fromID(id) {
    var z = id % 32, dim = 2 * (1 << z), xy = (id - z) / 32, x = xy % dim, y = (xy - x) / dim % dim;
    return [x, y, z];
  }
  var B2 = [0x5555555555555555n, 0x3333333333333333n, 0x0f0f0f0f0f0f0f0fn, 0x00ff00ff00ff00ffn, 0x0000ffff0000ffffn, 0x00000000ffffffffn];
  var S = [0n, 1n, 2n, 4n, 8n, 16n];
  var TILE_SIZE2 = 512;
  function cellToOffset(quadbin) {
    const {
      x,
      y,
      z
    } = cellToTile(quadbin);
    const scale2 = TILE_SIZE2 / (1 << z);
    return [x * scale2, TILE_SIZE2 - y * scale2, scale2];
  }
  function cellToWorldBounds(quadbin, coverage) {
    const [xOffset, yOffset, scale2] = cellToOffset(quadbin);
    return [[xOffset, yOffset], [xOffset + coverage * scale2, yOffset - coverage * scale2]];
  }
  function getCellPolygon(quadbin, coverage = 1) {
    const [topLeft, bottomRight] = cellToWorldBounds(quadbin, coverage);
    const [w, n] = worldToLngLat(topLeft);
    const [e, s] = worldToLngLat(bottomRight);
    return [e, n, e, s, w, s, w, n, e, n];
  }
  function tileToCell(tile) {
    if (tile.z < 0 || tile.z > 26) {
      throw new Error("Wrong zoom");
    }
    const z = BigInt(tile.z);
    let x = BigInt(tile.x) << 32n - z;
    let y = BigInt(tile.y) << 32n - z;
    for (let i = 0; i < 5; i++) {
      const s = S[5 - i];
      const b = B2[4 - i];
      x = (x | x << s) & b;
      y = (y | y << s) & b;
    }
    const quadbin = 0x4000000000000000n | 1n << 59n | // | (mode << 59) | (mode_dep << 57)
    z << 52n | (x | y << 1n) >> 12n | 0xfffffffffffffn >> z * 2n;
    return quadbin;
  }
  function cellToTile(quadbin) {
    const mode = quadbin >> 59n & 7n;
    const modeDep = quadbin >> 57n & 3n;
    const z = quadbin >> 52n & 0x1fn;
    const q = (quadbin & 0xfffffffffffffn) << 12n;
    if (mode !== 1n && modeDep !== 0n) {
      throw new Error("Wrong mode");
    }
    let x = q;
    let y = q >> 1n;
    for (let i = 0; i < 6; i++) {
      const s = S[i];
      const b = B2[i];
      x = (x | x >> s) & b;
      y = (y | y >> s) & b;
    }
    x = x >> 32n - z;
    y = y >> 32n - z;
    return {
      z: Number(z),
      x: Number(x),
      y: Number(y)
    };
  }
  function getResolution(quadbin) {
    return quadbin >> 52n & 0x1fn;
  }
  function geometryToCells(geometry, resolution) {
    const zoom = Number(resolution);
    return tiles(geometry, {
      min_zoom: zoom,
      max_zoom: zoom
    }).map(([x, y, z]) => tileToCell({
      x,
      y,
      z
    }));
  }
  function cellToBoundary(cell) {
    const bbox2 = getCellPolygon(cell);
    const boundary = [[bbox2[0], bbox2[1]], [bbox2[2], bbox2[3]], [bbox2[4], bbox2[5]], [bbox2[6], bbox2[7]], [bbox2[0], bbox2[1]]];
    return {
      type: "Polygon",
      coordinates: [boundary]
    };
  }

  // node_modules/h3-js/dist/h3-js.es.js
  var libh3 = function(libh32) {
    libh32 = libh32 || {};
    var Module = typeof libh32 !== "undefined" ? libh32 : {};
    var moduleOverrides = {};
    var key;
    for (key in Module) {
      if (Module.hasOwnProperty(key)) {
        moduleOverrides[key] = Module[key];
      }
    }
    var arguments_ = [];
    var thisProgram = "./this.program";
    var ENVIRONMENT_IS_WEB = false;
    var ENVIRONMENT_IS_WORKER = false;
    var ENVIRONMENT_IS_NODE = false;
    var ENVIRONMENT_HAS_NODE = false;
    var ENVIRONMENT_IS_SHELL = false;
    ENVIRONMENT_IS_WEB = typeof window === "object";
    ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
    ENVIRONMENT_HAS_NODE = typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node === "string";
    ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
    ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
    var scriptDirectory = "";
    function locateFile(path) {
      if (Module["locateFile"]) {
        return Module["locateFile"](path, scriptDirectory);
      }
      return scriptDirectory + path;
    }
    var read_, readAsync, readBinary;
    if (ENVIRONMENT_IS_NODE) {
      scriptDirectory = __dirname + "/";
      var nodeFS;
      var nodePath;
      read_ = function shell_read(filename, binary) {
        var ret;
        ret = tryParseAsDataURI(filename);
        if (!ret) {
          if (!nodeFS) {
            nodeFS = __require("fs");
          }
          if (!nodePath) {
            nodePath = __require("path");
          }
          filename = nodePath["normalize"](filename);
          ret = nodeFS["readFileSync"](filename);
        }
        return binary ? ret : ret.toString();
      };
      readBinary = function readBinary2(filename) {
        var ret = read_(filename, true);
        if (!ret.buffer) {
          ret = new Uint8Array(ret);
        }
        assert3(ret.buffer);
        return ret;
      };
      if (process["argv"].length > 1) {
        thisProgram = process["argv"][1].replace(/\\/g, "/");
      }
      arguments_ = process["argv"].slice(2);
      Module["inspect"] = function() {
        return "[Emscripten Module object]";
      };
    } else if (ENVIRONMENT_IS_SHELL) {
      if (typeof read != "undefined") {
        read_ = function shell_read(f) {
          var data2 = tryParseAsDataURI(f);
          if (data2) {
            return intArrayToString(data2);
          }
          return read(f);
        };
      }
      readBinary = function readBinary2(f) {
        var data2;
        data2 = tryParseAsDataURI(f);
        if (data2) {
          return data2;
        }
        if (typeof readbuffer === "function") {
          return new Uint8Array(readbuffer(f));
        }
        data2 = read(f, "binary");
        assert3(typeof data2 === "object");
        return data2;
      };
      if (typeof scriptArgs != "undefined") {
        arguments_ = scriptArgs;
      } else if (typeof arguments != "undefined") {
        arguments_ = arguments;
      }
      if (typeof print !== "undefined") {
        if (typeof console === "undefined") {
          console = {};
        }
        console.log = print;
        console.warn = console.error = typeof printErr !== "undefined" ? printErr : print;
      }
    } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
      if (ENVIRONMENT_IS_WORKER) {
        scriptDirectory = self.location.href;
      } else if (typeof document !== "undefined" && document.currentScript) {
        scriptDirectory = document.currentScript.src;
      }
      if (scriptDirectory.indexOf("blob:") !== 0) {
        scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
      } else {
        scriptDirectory = "";
      }
      read_ = function shell_read(url) {
        try {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", url, false);
          xhr.send(null);
          return xhr.responseText;
        } catch (err2) {
          var data2 = tryParseAsDataURI(url);
          if (data2) {
            return intArrayToString(data2);
          }
          throw err2;
        }
      };
      if (ENVIRONMENT_IS_WORKER) {
        readBinary = function readBinary2(url) {
          try {
            var xhr = new XMLHttpRequest();
            xhr.open("GET", url, false);
            xhr.responseType = "arraybuffer";
            xhr.send(null);
            return new Uint8Array(xhr.response);
          } catch (err2) {
            var data2 = tryParseAsDataURI(url);
            if (data2) {
              return data2;
            }
            throw err2;
          }
        };
      }
      readAsync = function readAsync2(url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", url, true);
        xhr.responseType = "arraybuffer";
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
            onload(xhr.response);
            return;
          }
          var data2 = tryParseAsDataURI(url);
          if (data2) {
            onload(data2.buffer);
            return;
          }
          onerror();
        };
        xhr.onerror = onerror;
        xhr.send(null);
      };
    }
    var out = Module["print"] || console.log.bind(console);
    var err = Module["printErr"] || console.warn.bind(console);
    for (key in moduleOverrides) {
      if (moduleOverrides.hasOwnProperty(key)) {
        Module[key] = moduleOverrides[key];
      }
    }
    moduleOverrides = null;
    if (Module["arguments"]) {
      arguments_ = Module["arguments"];
    }
    if (Module["thisProgram"]) {
      thisProgram = Module["thisProgram"];
    }
    var tempRet0 = 0;
    var setTempRet0 = function(value) {
      tempRet0 = value;
    };
    var getTempRet0 = function() {
      return tempRet0;
    };
    var GLOBAL_BASE = 8;
    function setValue(ptr, value, type, noSafe) {
      type = type || "i8";
      if (type.charAt(type.length - 1) === "*") {
        type = "i32";
      }
      switch (type) {
        case "i1":
          HEAP8[ptr >> 0] = value;
          break;
        case "i8":
          HEAP8[ptr >> 0] = value;
          break;
        case "i16":
          HEAP16[ptr >> 1] = value;
          break;
        case "i32":
          HEAP32[ptr >> 2] = value;
          break;
        case "i64":
          tempI64 = [value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
          break;
        case "float":
          HEAPF32[ptr >> 2] = value;
          break;
        case "double":
          HEAPF64[ptr >> 3] = value;
          break;
        default:
          abort("invalid type for setValue: " + type);
      }
    }
    function getValue(ptr, type, noSafe) {
      type = type || "i8";
      if (type.charAt(type.length - 1) === "*") {
        type = "i32";
      }
      switch (type) {
        case "i1":
          return HEAP8[ptr >> 0];
        case "i8":
          return HEAP8[ptr >> 0];
        case "i16":
          return HEAP16[ptr >> 1];
        case "i32":
          return HEAP32[ptr >> 2];
        case "i64":
          return HEAP32[ptr >> 2];
        case "float":
          return HEAPF32[ptr >> 2];
        case "double":
          return HEAPF64[ptr >> 3];
        default:
          abort("invalid type for getValue: " + type);
      }
      return null;
    }
    var ABORT = false;
    function assert3(condition, text) {
      if (!condition) {
        abort("Assertion failed: " + text);
      }
    }
    function getCFunc(ident) {
      var func = Module["_" + ident];
      assert3(func, "Cannot call unknown function " + ident + ", make sure it is exported");
      return func;
    }
    function ccall(ident, returnType, argTypes, args, opts) {
      var toC = {
        "string": function(str) {
          var ret2 = 0;
          if (str !== null && str !== void 0 && str !== 0) {
            var len = (str.length << 2) + 1;
            ret2 = stackAlloc(len);
            stringToUTF8(str, ret2, len);
          }
          return ret2;
        },
        "array": function(arr) {
          var ret2 = stackAlloc(arr.length);
          writeArrayToMemory(arr, ret2);
          return ret2;
        }
      };
      function convertReturnValue(ret2) {
        if (returnType === "string") {
          return UTF8ToString(ret2);
        }
        if (returnType === "boolean") {
          return Boolean(ret2);
        }
        return ret2;
      }
      var func = getCFunc(ident);
      var cArgs = [];
      var stack = 0;
      if (args) {
        for (var i = 0; i < args.length; i++) {
          var converter = toC[argTypes[i]];
          if (converter) {
            if (stack === 0) {
              stack = stackSave();
            }
            cArgs[i] = converter(args[i]);
          } else {
            cArgs[i] = args[i];
          }
        }
      }
      var ret = func.apply(null, cArgs);
      ret = convertReturnValue(ret);
      if (stack !== 0) {
        stackRestore(stack);
      }
      return ret;
    }
    function cwrap(ident, returnType, argTypes, opts) {
      argTypes = argTypes || [];
      var numericArgs = argTypes.every(function(type) {
        return type === "number";
      });
      var numericRet = returnType !== "string";
      if (numericRet && numericArgs && !opts) {
        return getCFunc(ident);
      }
      return function() {
        return ccall(ident, returnType, argTypes, arguments, opts);
      };
    }
    var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : void 0;
    function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
      var endIdx = idx + maxBytesToRead;
      var endPtr = idx;
      while (u8Array[endPtr] && !(endPtr >= endIdx)) {
        ++endPtr;
      }
      if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
        return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
      } else {
        var str = "";
        while (idx < endPtr) {
          var u0 = u8Array[idx++];
          if (!(u0 & 128)) {
            str += String.fromCharCode(u0);
            continue;
          }
          var u1 = u8Array[idx++] & 63;
          if ((u0 & 224) == 192) {
            str += String.fromCharCode((u0 & 31) << 6 | u1);
            continue;
          }
          var u22 = u8Array[idx++] & 63;
          if ((u0 & 240) == 224) {
            u0 = (u0 & 15) << 12 | u1 << 6 | u22;
          } else {
            u0 = (u0 & 7) << 18 | u1 << 12 | u22 << 6 | u8Array[idx++] & 63;
          }
          if (u0 < 65536) {
            str += String.fromCharCode(u0);
          } else {
            var ch = u0 - 65536;
            str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
          }
        }
      }
      return str;
    }
    function UTF8ToString(ptr, maxBytesToRead) {
      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
    }
    function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
      if (!(maxBytesToWrite > 0)) {
        return 0;
      }
      var startIdx = outIdx;
      var endIdx = outIdx + maxBytesToWrite - 1;
      for (var i = 0; i < str.length; ++i) {
        var u4 = str.charCodeAt(i);
        if (u4 >= 55296 && u4 <= 57343) {
          var u1 = str.charCodeAt(++i);
          u4 = 65536 + ((u4 & 1023) << 10) | u1 & 1023;
        }
        if (u4 <= 127) {
          if (outIdx >= endIdx) {
            break;
          }
          outU8Array[outIdx++] = u4;
        } else if (u4 <= 2047) {
          if (outIdx + 1 >= endIdx) {
            break;
          }
          outU8Array[outIdx++] = 192 | u4 >> 6;
          outU8Array[outIdx++] = 128 | u4 & 63;
        } else if (u4 <= 65535) {
          if (outIdx + 2 >= endIdx) {
            break;
          }
          outU8Array[outIdx++] = 224 | u4 >> 12;
          outU8Array[outIdx++] = 128 | u4 >> 6 & 63;
          outU8Array[outIdx++] = 128 | u4 & 63;
        } else {
          if (outIdx + 3 >= endIdx) {
            break;
          }
          outU8Array[outIdx++] = 240 | u4 >> 18;
          outU8Array[outIdx++] = 128 | u4 >> 12 & 63;
          outU8Array[outIdx++] = 128 | u4 >> 6 & 63;
          outU8Array[outIdx++] = 128 | u4 & 63;
        }
      }
      outU8Array[outIdx] = 0;
      return outIdx - startIdx;
    }
    function stringToUTF8(str, outPtr, maxBytesToWrite) {
      return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
    }
    var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : void 0;
    function writeArrayToMemory(array, buffer2) {
      HEAP8.set(array, buffer2);
    }
    function alignUp(x, multiple) {
      if (x % multiple > 0) {
        x += multiple - x % multiple;
      }
      return x;
    }
    var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
    function updateGlobalBufferAndViews(buf) {
      buffer = buf;
      Module["HEAP8"] = HEAP8 = new Int8Array(buf);
      Module["HEAP16"] = HEAP16 = new Int16Array(buf);
      Module["HEAP32"] = HEAP32 = new Int32Array(buf);
      Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
      Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
      Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
      Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
      Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
    }
    var DYNAMIC_BASE = 5271520, DYNAMICTOP_PTR = 28608;
    var INITIAL_TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 33554432;
    if (Module["buffer"]) {
      buffer = Module["buffer"];
    } else {
      buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
    }
    INITIAL_TOTAL_MEMORY = buffer.byteLength;
    updateGlobalBufferAndViews(buffer);
    HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;
    function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == "function") {
          callback();
          continue;
        }
        var func = callback.func;
        if (typeof func === "number") {
          if (callback.arg === void 0) {
            Module["dynCall_v"](func);
          } else {
            Module["dynCall_vi"](func, callback.arg);
          }
        } else {
          func(callback.arg === void 0 ? null : callback.arg);
        }
      }
    }
    var __ATPRERUN__ = [];
    var __ATINIT__ = [];
    var __ATMAIN__ = [];
    var __ATPOSTRUN__ = [];
    function preRun() {
      if (Module["preRun"]) {
        if (typeof Module["preRun"] == "function") {
          Module["preRun"] = [Module["preRun"]];
        }
        while (Module["preRun"].length) {
          addOnPreRun(Module["preRun"].shift());
        }
      }
      callRuntimeCallbacks(__ATPRERUN__);
    }
    function initRuntime() {
      callRuntimeCallbacks(__ATINIT__);
    }
    function preMain() {
      callRuntimeCallbacks(__ATMAIN__);
    }
    function postRun() {
      if (Module["postRun"]) {
        if (typeof Module["postRun"] == "function") {
          Module["postRun"] = [Module["postRun"]];
        }
        while (Module["postRun"].length) {
          addOnPostRun(Module["postRun"].shift());
        }
      }
      callRuntimeCallbacks(__ATPOSTRUN__);
    }
    function addOnPreRun(cb) {
      __ATPRERUN__.unshift(cb);
    }
    function addOnPostRun(cb) {
      __ATPOSTRUN__.unshift(cb);
    }
    var Math_abs = Math.abs;
    var Math_ceil = Math.ceil;
    var Math_floor = Math.floor;
    var Math_min = Math.min;
    var runDependencies = 0;
    var runDependencyWatcher = null;
    var dependenciesFulfilled = null;
    function addRunDependency(id) {
      runDependencies++;
      if (Module["monitorRunDependencies"]) {
        Module["monitorRunDependencies"](runDependencies);
      }
    }
    function removeRunDependency(id) {
      runDependencies--;
      if (Module["monitorRunDependencies"]) {
        Module["monitorRunDependencies"](runDependencies);
      }
      if (runDependencies == 0) {
        if (runDependencyWatcher !== null) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
        }
        if (dependenciesFulfilled) {
          var callback = dependenciesFulfilled;
          dependenciesFulfilled = null;
          callback();
        }
      }
    }
    Module["preloadedImages"] = {};
    Module["preloadedAudios"] = {};
    var memoryInitializer = null;
    var dataURIPrefix = "data:application/octet-stream;base64,";
    function isDataURI(filename) {
      return String.prototype.startsWith ? filename.startsWith(dataURIPrefix) : filename.indexOf(dataURIPrefix) === 0;
    }
    var tempDouble;
    var tempI64;
    memoryInitializer = "data:application/octet-stream;base64,";
    var tempDoublePtr = 28624;
    function demangle(func) {
      return func;
    }
    function demangleAll(text) {
      var regex = /\b__Z[\w\d_]+/g;
      return text.replace(regex, function(x) {
        var y = demangle(x);
        return x === y ? x : y + " [" + x + "]";
      });
    }
    function jsStackTrace() {
      var err2 = new Error();
      if (!err2.stack) {
        try {
          throw new Error(0);
        } catch (e) {
          err2 = e;
        }
        if (!err2.stack) {
          return "(no stack trace available)";
        }
      }
      return err2.stack.toString();
    }
    function stackTrace() {
      var js = jsStackTrace();
      if (Module["extraStackTrace"]) {
        js += "\n" + Module["extraStackTrace"]();
      }
      return demangleAll(js);
    }
    function ___assert_fail(condition, filename, line, func) {
      abort("Assertion failed: " + UTF8ToString(condition) + ", at: " + [filename ? UTF8ToString(filename) : "unknown filename", line, func ? UTF8ToString(func) : "unknown function"]);
    }
    function _emscripten_get_heap_size() {
      return HEAP8.length;
    }
    function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
    }
    function ___setErrNo(value) {
      if (Module["___errno_location"]) {
        HEAP32[Module["___errno_location"]() >> 2] = value;
      }
      return value;
    }
    function abortOnCannotGrowMemory(requestedSize) {
      abort("OOM");
    }
    function emscripten_realloc_buffer(size) {
      try {
        var newBuffer = new ArrayBuffer(size);
        if (newBuffer.byteLength != size) {
          return;
        }
        new Int8Array(newBuffer).set(HEAP8);
        _emscripten_replace_memory(newBuffer);
        updateGlobalBufferAndViews(newBuffer);
        return 1;
      } catch (e) {
      }
    }
    function _emscripten_resize_heap(requestedSize) {
      var oldSize = _emscripten_get_heap_size();
      var PAGE_MULTIPLE = 16777216;
      var LIMIT = 2147483648 - PAGE_MULTIPLE;
      if (requestedSize > LIMIT) {
        return false;
      }
      var MIN_TOTAL_MEMORY = 16777216;
      var newSize = Math.max(oldSize, MIN_TOTAL_MEMORY);
      while (newSize < requestedSize) {
        if (newSize <= 536870912) {
          newSize = alignUp(2 * newSize, PAGE_MULTIPLE);
        } else {
          newSize = Math.min(alignUp((3 * newSize + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);
        }
      }
      var replacement = emscripten_realloc_buffer(newSize);
      if (!replacement) {
        return false;
      }
      return true;
    }
    function intArrayToString(array) {
      var ret = [];
      for (var i = 0; i < array.length; i++) {
        var chr = array[i];
        if (chr > 255) {
          chr &= 255;
        }
        ret.push(String.fromCharCode(chr));
      }
      return ret.join("");
    }
    var decodeBase64 = typeof atob === "function" ? atob : function(input) {
      var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      var output = "";
      var chr1, chr2, chr3;
      var enc1, enc2, enc3, enc4;
      var i = 0;
      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
      do {
        enc1 = keyStr.indexOf(input.charAt(i++));
        enc2 = keyStr.indexOf(input.charAt(i++));
        enc3 = keyStr.indexOf(input.charAt(i++));
        enc4 = keyStr.indexOf(input.charAt(i++));
        chr1 = enc1 << 2 | enc2 >> 4;
        chr2 = (enc2 & 15) << 4 | enc3 >> 2;
        chr3 = (enc3 & 3) << 6 | enc4;
        output = output + String.fromCharCode(chr1);
        if (enc3 !== 64) {
          output = output + String.fromCharCode(chr2);
        }
        if (enc4 !== 64) {
          output = output + String.fromCharCode(chr3);
        }
      } while (i < input.length);
      return output;
    };
    function intArrayFromBase64(s) {
      if (typeof ENVIRONMENT_IS_NODE === "boolean" && ENVIRONMENT_IS_NODE) {
        var buf;
        try {
          buf = Buffer.from(s, "base64");
        } catch (_) {
          buf = new Buffer(s, "base64");
        }
        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
      }
      try {
        var decoded = decodeBase64(s);
        var bytes = new Uint8Array(decoded.length);
        for (var i = 0; i < decoded.length; ++i) {
          bytes[i] = decoded.charCodeAt(i);
        }
        return bytes;
      } catch (_) {
        throw new Error("Converting base64 string to bytes failed.");
      }
    }
    function tryParseAsDataURI(filename) {
      if (!isDataURI(filename)) {
        return;
      }
      return intArrayFromBase64(filename.slice(dataURIPrefix.length));
    }
    var asmGlobalArg = {
      "Math": Math,
      "Int8Array": Int8Array,
      "Int32Array": Int32Array,
      "Uint8Array": Uint8Array,
      "Float32Array": Float32Array,
      "Float64Array": Float64Array
    };
    var asmLibraryArg = {
      "a": abort,
      "b": setTempRet0,
      "c": getTempRet0,
      "d": ___assert_fail,
      "e": ___setErrNo,
      "f": _emscripten_get_heap_size,
      "g": _emscripten_memcpy_big,
      "h": _emscripten_resize_heap,
      "i": abortOnCannotGrowMemory,
      "j": demangle,
      "k": demangleAll,
      "l": emscripten_realloc_buffer,
      "m": jsStackTrace,
      "n": stackTrace,
      "o": tempDoublePtr,
      "p": DYNAMICTOP_PTR
    };
    var asm = (
      /** @suppress {uselessCode} */
      function(global, env, buffer2) {
        "almost asm";
        var a = new global.Int8Array(buffer2), b = new global.Int32Array(buffer2), c = new global.Uint8Array(buffer2), d = new global.Float32Array(buffer2), e = new global.Float64Array(buffer2), f = env.o | 0, g = env.p | 0, p = global.Math.floor, q = global.Math.abs, r = global.Math.sqrt, s = global.Math.pow, t = global.Math.cos, u4 = global.Math.sin, v2 = global.Math.tan, w = global.Math.acos, x = global.Math.asin, y = global.Math.atan, z = global.Math.atan2, A = global.Math.ceil, B3 = global.Math.imul, C = global.Math.min, D2 = global.Math.max, E = global.Math.clz32, G = env.b, H = env.c, I = env.d, J = env.e, K = env.f, L = env.g, M = env.h, N = env.i, T = 28640;
        function W(newBuffer) {
          a = new Int8Array(newBuffer);
          c = new Uint8Array(newBuffer);
          b = new Int32Array(newBuffer);
          d = new Float32Array(newBuffer);
          e = new Float64Array(newBuffer);
          buffer2 = newBuffer;
          return true;
        }
        function X(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = T;
          T = T + a2 | 0;
          T = T + 15 & -16;
          return b2 | 0;
        }
        function Y() {
          return T | 0;
        }
        function Z(a2) {
          a2 = a2 | 0;
          T = a2;
        }
        function _(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          T = a2;
        }
        function $(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          var d2 = 0, e2 = 0, f2 = 0;
          if ((a2 | 0) < 0) {
            c2 = 2;
            return c2 | 0;
          }
          if ((a2 | 0) > 13780509) {
            c2 = uc(15, c2) | 0;
            return c2 | 0;
          } else {
            d2 = ((a2 | 0) < 0) << 31 >> 31;
            f2 = Md(a2 | 0, d2 | 0, 3, 0) | 0;
            e2 = H() | 0;
            d2 = Gd(a2 | 0, d2 | 0, 1, 0) | 0;
            d2 = Md(f2 | 0, e2 | 0, d2 | 0, H() | 0) | 0;
            d2 = Gd(d2 | 0, H() | 0, 1, 0) | 0;
            a2 = H() | 0;
            b[c2 >> 2] = d2;
            b[c2 + 4 >> 2] = a2;
            c2 = 0;
            return c2 | 0;
          }
          return 0;
        }
        function aa2(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          return ba(a2, b2, c2, d2, 0) | 0;
        }
        function ba(a2, c2, d2, e2, f2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h = 0, i = 0, j = 0, k = 0;
          j = T;
          T = T + 16 | 0;
          h = j;
          if (!(ca3(a2, c2, d2, e2, f2) | 0)) {
            e2 = 0;
            T = j;
            return e2 | 0;
          }
          do {
            if ((d2 | 0) >= 0) {
              if ((d2 | 0) > 13780509) {
                g2 = uc(15, h) | 0;
                if (g2 | 0) {
                  break;
                }
                i = h;
                h = b[i >> 2] | 0;
                i = b[i + 4 >> 2] | 0;
              } else {
                g2 = ((d2 | 0) < 0) << 31 >> 31;
                k = Md(d2 | 0, g2 | 0, 3, 0) | 0;
                i = H() | 0;
                g2 = Gd(d2 | 0, g2 | 0, 1, 0) | 0;
                g2 = Md(k | 0, i | 0, g2 | 0, H() | 0) | 0;
                g2 = Gd(g2 | 0, H() | 0, 1, 0) | 0;
                i = H() | 0;
                b[h >> 2] = g2;
                b[h + 4 >> 2] = i;
                h = g2;
              }
              Xd(e2 | 0, 0, h << 3 | 0) | 0;
              if (f2 | 0) {
                Xd(f2 | 0, 0, h << 2 | 0) | 0;
                g2 = da2(a2, c2, d2, e2, f2, h, i, 0) | 0;
                break;
              }
              g2 = Fd(h, 4) | 0;
              if (!g2) {
                g2 = 13;
              } else {
                k = da2(a2, c2, d2, e2, g2, h, i, 0) | 0;
                Ed(g2);
                g2 = k;
              }
            } else {
              g2 = 2;
            }
          } while (0);
          k = g2;
          T = j;
          return k | 0;
        }
        function ca3(a2, c2, d2, e2, f2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0;
          q2 = T;
          T = T + 16 | 0;
          o = q2;
          p2 = q2 + 8 | 0;
          n = o;
          b[n >> 2] = a2;
          b[n + 4 >> 2] = c2;
          if ((d2 | 0) < 0) {
            p2 = 2;
            T = q2;
            return p2 | 0;
          }
          g2 = e2;
          b[g2 >> 2] = a2;
          b[g2 + 4 >> 2] = c2;
          g2 = (f2 | 0) != 0;
          if (g2) {
            b[f2 >> 2] = 0;
          }
          if (Hb(a2, c2) | 0) {
            p2 = 9;
            T = q2;
            return p2 | 0;
          }
          b[p2 >> 2] = 0;
          a: do {
            if ((d2 | 0) >= 1) {
              if (g2) {
                l = 1;
                k = 0;
                m = 0;
                n = 1;
                g2 = a2;
                while (1) {
                  if (!(k | m)) {
                    g2 = ea2(g2, c2, 4, p2, o) | 0;
                    if (g2 | 0) {
                      break a;
                    }
                    c2 = o;
                    g2 = b[c2 >> 2] | 0;
                    c2 = b[c2 + 4 >> 2] | 0;
                    if (Hb(g2, c2) | 0) {
                      g2 = 9;
                      break a;
                    }
                  }
                  g2 = ea2(g2, c2, b[26800 + (m << 2) >> 2] | 0, p2, o) | 0;
                  if (g2 | 0) {
                    break a;
                  }
                  c2 = o;
                  g2 = b[c2 >> 2] | 0;
                  c2 = b[c2 + 4 >> 2] | 0;
                  a2 = e2 + (l << 3) | 0;
                  b[a2 >> 2] = g2;
                  b[a2 + 4 >> 2] = c2;
                  b[f2 + (l << 2) >> 2] = n;
                  a2 = k + 1 | 0;
                  h = (a2 | 0) == (n | 0);
                  i = m + 1 | 0;
                  j = (i | 0) == 6;
                  if (Hb(g2, c2) | 0) {
                    g2 = 9;
                    break a;
                  }
                  n = n + (j & h & 1) | 0;
                  if ((n | 0) > (d2 | 0)) {
                    g2 = 0;
                    break;
                  } else {
                    l = l + 1 | 0;
                    k = h ? 0 : a2;
                    m = h ? j ? 0 : i : m;
                  }
                }
              } else {
                l = 1;
                k = 0;
                m = 0;
                n = 1;
                g2 = a2;
                while (1) {
                  if (!(k | m)) {
                    g2 = ea2(g2, c2, 4, p2, o) | 0;
                    if (g2 | 0) {
                      break a;
                    }
                    c2 = o;
                    g2 = b[c2 >> 2] | 0;
                    c2 = b[c2 + 4 >> 2] | 0;
                    if (Hb(g2, c2) | 0) {
                      g2 = 9;
                      break a;
                    }
                  }
                  g2 = ea2(g2, c2, b[26800 + (m << 2) >> 2] | 0, p2, o) | 0;
                  if (g2 | 0) {
                    break a;
                  }
                  c2 = o;
                  g2 = b[c2 >> 2] | 0;
                  c2 = b[c2 + 4 >> 2] | 0;
                  a2 = e2 + (l << 3) | 0;
                  b[a2 >> 2] = g2;
                  b[a2 + 4 >> 2] = c2;
                  a2 = k + 1 | 0;
                  h = (a2 | 0) == (n | 0);
                  i = m + 1 | 0;
                  j = (i | 0) == 6;
                  if (Hb(g2, c2) | 0) {
                    g2 = 9;
                    break a;
                  }
                  n = n + (j & h & 1) | 0;
                  if ((n | 0) > (d2 | 0)) {
                    g2 = 0;
                    break;
                  } else {
                    l = l + 1 | 0;
                    k = h ? 0 : a2;
                    m = h ? j ? 0 : i : m;
                  }
                }
              }
            } else {
              g2 = 0;
            }
          } while (0);
          p2 = g2;
          T = q2;
          return p2 | 0;
        }
        function da2(a2, c2, d2, e2, f2, g2, h, i) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          h = h | 0;
          i = i | 0;
          var j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0;
          q2 = T;
          T = T + 16 | 0;
          o = q2 + 8 | 0;
          p2 = q2;
          j = Od(a2 | 0, c2 | 0, g2 | 0, h | 0) | 0;
          l = H() | 0;
          m = e2 + (j << 3) | 0;
          r2 = m;
          s2 = b[r2 >> 2] | 0;
          r2 = b[r2 + 4 >> 2] | 0;
          k = (s2 | 0) == (a2 | 0) & (r2 | 0) == (c2 | 0);
          if (!((s2 | 0) == 0 & (r2 | 0) == 0 | k)) {
            do {
              j = Gd(j | 0, l | 0, 1, 0) | 0;
              j = Nd(j | 0, H() | 0, g2 | 0, h | 0) | 0;
              l = H() | 0;
              m = e2 + (j << 3) | 0;
              s2 = m;
              r2 = b[s2 >> 2] | 0;
              s2 = b[s2 + 4 >> 2] | 0;
              k = (r2 | 0) == (a2 | 0) & (s2 | 0) == (c2 | 0);
            } while (!((r2 | 0) == 0 & (s2 | 0) == 0 | k));
          }
          j = f2 + (j << 2) | 0;
          if (k ? (b[j >> 2] | 0) <= (i | 0) : 0) {
            s2 = 0;
            T = q2;
            return s2 | 0;
          }
          s2 = m;
          b[s2 >> 2] = a2;
          b[s2 + 4 >> 2] = c2;
          b[j >> 2] = i;
          if ((i | 0) >= (d2 | 0)) {
            s2 = 0;
            T = q2;
            return s2 | 0;
          }
          k = i + 1 | 0;
          b[o >> 2] = 0;
          j = ea2(a2, c2, 2, o, p2) | 0;
          switch (j | 0) {
            case 9: {
              n = 9;
              break;
            }
            case 0: {
              j = p2;
              j = da2(b[j >> 2] | 0, b[j + 4 >> 2] | 0, d2, e2, f2, g2, h, k) | 0;
              if (!j) {
                n = 9;
              }
              break;
            }
            default:
          }
          a: do {
            if ((n | 0) == 9) {
              b[o >> 2] = 0;
              j = ea2(a2, c2, 3, o, p2) | 0;
              switch (j | 0) {
                case 9:
                  break;
                case 0: {
                  j = p2;
                  j = da2(b[j >> 2] | 0, b[j + 4 >> 2] | 0, d2, e2, f2, g2, h, k) | 0;
                  if (j | 0) {
                    break a;
                  }
                  break;
                }
                default:
                  break a;
              }
              b[o >> 2] = 0;
              j = ea2(a2, c2, 1, o, p2) | 0;
              switch (j | 0) {
                case 9:
                  break;
                case 0: {
                  j = p2;
                  j = da2(b[j >> 2] | 0, b[j + 4 >> 2] | 0, d2, e2, f2, g2, h, k) | 0;
                  if (j | 0) {
                    break a;
                  }
                  break;
                }
                default:
                  break a;
              }
              b[o >> 2] = 0;
              j = ea2(a2, c2, 5, o, p2) | 0;
              switch (j | 0) {
                case 9:
                  break;
                case 0: {
                  j = p2;
                  j = da2(b[j >> 2] | 0, b[j + 4 >> 2] | 0, d2, e2, f2, g2, h, k) | 0;
                  if (j | 0) {
                    break a;
                  }
                  break;
                }
                default:
                  break a;
              }
              b[o >> 2] = 0;
              j = ea2(a2, c2, 4, o, p2) | 0;
              switch (j | 0) {
                case 9:
                  break;
                case 0: {
                  j = p2;
                  j = da2(b[j >> 2] | 0, b[j + 4 >> 2] | 0, d2, e2, f2, g2, h, k) | 0;
                  if (j | 0) {
                    break a;
                  }
                  break;
                }
                default:
                  break a;
              }
              b[o >> 2] = 0;
              j = ea2(a2, c2, 6, o, p2) | 0;
              switch (j | 0) {
                case 9:
                  break;
                case 0: {
                  j = p2;
                  j = da2(b[j >> 2] | 0, b[j + 4 >> 2] | 0, d2, e2, f2, g2, h, k) | 0;
                  if (j | 0) {
                    break a;
                  }
                  break;
                }
                default:
                  break a;
              }
              s2 = 0;
              T = q2;
              return s2 | 0;
            }
          } while (0);
          s2 = j;
          T = q2;
          return s2 | 0;
        }
        function ea2(a2, c2, d2, e2, f2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0;
          if (d2 >>> 0 > 6) {
            f2 = 1;
            return f2 | 0;
          }
          m = (b[e2 >> 2] | 0) % 6 | 0;
          b[e2 >> 2] = m;
          if ((m | 0) > 0) {
            g2 = 0;
            do {
              d2 = $a(d2) | 0;
              g2 = g2 + 1 | 0;
            } while ((g2 | 0) < (b[e2 >> 2] | 0));
          }
          m = Qd(a2 | 0, c2 | 0, 45) | 0;
          H() | 0;
          l = m & 127;
          if (l >>> 0 > 121) {
            f2 = 5;
            return f2 | 0;
          }
          j = Pb(a2, c2) | 0;
          g2 = Qd(a2 | 0, c2 | 0, 52) | 0;
          H() | 0;
          g2 = g2 & 15;
          a: do {
            if (!g2) {
              k = 8;
            } else {
              while (1) {
                h = (15 - g2 | 0) * 3 | 0;
                i = Qd(a2 | 0, c2 | 0, h | 0) | 0;
                H() | 0;
                i = i & 7;
                if ((i | 0) == 7) {
                  c2 = 5;
                  break;
                }
                p2 = (Vb(g2) | 0) == 0;
                g2 = g2 + -1 | 0;
                n = Rd(7, 0, h | 0) | 0;
                c2 = c2 & ~(H() | 0);
                o = Rd(b[(p2 ? 432 : 16) + (i * 28 | 0) + (d2 << 2) >> 2] | 0, 0, h | 0) | 0;
                h = H() | 0;
                d2 = b[(p2 ? 640 : 224) + (i * 28 | 0) + (d2 << 2) >> 2] | 0;
                a2 = o | a2 & ~n;
                c2 = h | c2;
                if (!d2) {
                  d2 = 0;
                  break a;
                }
                if (!g2) {
                  k = 8;
                  break a;
                }
              }
              return c2 | 0;
            }
          } while (0);
          if ((k | 0) == 8) {
            p2 = b[848 + (l * 28 | 0) + (d2 << 2) >> 2] | 0;
            o = Rd(p2 | 0, 0, 45) | 0;
            a2 = o | a2;
            c2 = H() | 0 | c2 & -1040385;
            d2 = b[4272 + (l * 28 | 0) + (d2 << 2) >> 2] | 0;
            if ((p2 & 127 | 0) == 127) {
              p2 = Rd(b[848 + (l * 28 | 0) + 20 >> 2] | 0, 0, 45) | 0;
              c2 = H() | 0 | c2 & -1040385;
              d2 = b[4272 + (l * 28 | 0) + 20 >> 2] | 0;
              a2 = Rb(p2 | a2, c2) | 0;
              c2 = H() | 0;
              b[e2 >> 2] = (b[e2 >> 2] | 0) + 1;
            }
          }
          i = Qd(a2 | 0, c2 | 0, 45) | 0;
          H() | 0;
          i = i & 127;
          b: do {
            if (!(oa(i) | 0)) {
              if ((d2 | 0) > 0) {
                g2 = 0;
                do {
                  a2 = Rb(a2, c2) | 0;
                  c2 = H() | 0;
                  g2 = g2 + 1 | 0;
                } while ((g2 | 0) != (d2 | 0));
              }
            } else {
              c: do {
                if ((Pb(a2, c2) | 0) == 1) {
                  if ((l | 0) != (i | 0)) {
                    if (ua(i, b[7696 + (l * 28 | 0) >> 2] | 0) | 0) {
                      a2 = Tb(a2, c2) | 0;
                      h = 1;
                      c2 = H() | 0;
                      break;
                    } else {
                      I(27795, 26864, 533, 26872);
                    }
                  }
                  switch (j | 0) {
                    case 3: {
                      a2 = Rb(a2, c2) | 0;
                      c2 = H() | 0;
                      b[e2 >> 2] = (b[e2 >> 2] | 0) + 1;
                      h = 0;
                      break c;
                    }
                    case 5: {
                      a2 = Tb(a2, c2) | 0;
                      c2 = H() | 0;
                      b[e2 >> 2] = (b[e2 >> 2] | 0) + 5;
                      h = 0;
                      break c;
                    }
                    case 0: {
                      p2 = 9;
                      return p2 | 0;
                    }
                    default: {
                      p2 = 1;
                      return p2 | 0;
                    }
                  }
                } else {
                  h = 0;
                }
              } while (0);
              if ((d2 | 0) > 0) {
                g2 = 0;
                do {
                  a2 = Qb(a2, c2) | 0;
                  c2 = H() | 0;
                  g2 = g2 + 1 | 0;
                } while ((g2 | 0) != (d2 | 0));
              }
              if ((l | 0) != (i | 0)) {
                if (!(pa(i) | 0)) {
                  if ((h | 0) != 0 | (Pb(a2, c2) | 0) != 5) {
                    break;
                  }
                  b[e2 >> 2] = (b[e2 >> 2] | 0) + 1;
                  break;
                }
                switch (m & 127) {
                  case 8:
                  case 118:
                    break b;
                  default:
                }
                if ((Pb(a2, c2) | 0) != 3) {
                  b[e2 >> 2] = (b[e2 >> 2] | 0) + 1;
                }
              }
            }
          } while (0);
          b[e2 >> 2] = ((b[e2 >> 2] | 0) + d2 | 0) % 6 | 0;
          p2 = f2;
          b[p2 >> 2] = a2;
          b[p2 + 4 >> 2] = c2;
          p2 = 0;
          return p2 | 0;
        }
        function fa(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          if (!(ga(a2, b2, c2, d2) | 0)) {
            d2 = 0;
            return d2 | 0;
          }
          Xd(d2 | 0, 0, c2 * 48 | 0) | 0;
          d2 = ha(a2, b2, c2, d2) | 0;
          return d2 | 0;
        }
        function ga(a2, c2, d2, e2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0;
          p2 = T;
          T = T + 16 | 0;
          n = p2;
          o = p2 + 8 | 0;
          m = n;
          b[m >> 2] = a2;
          b[m + 4 >> 2] = c2;
          if ((d2 | 0) < 0) {
            o = 2;
            T = p2;
            return o | 0;
          }
          if (!d2) {
            o = e2;
            b[o >> 2] = a2;
            b[o + 4 >> 2] = c2;
            o = 0;
            T = p2;
            return o | 0;
          }
          b[o >> 2] = 0;
          a: do {
            if (!(Hb(a2, c2) | 0)) {
              f2 = 0;
              m = a2;
              do {
                a2 = ea2(m, c2, 4, o, n) | 0;
                if (a2 | 0) {
                  break a;
                }
                c2 = n;
                m = b[c2 >> 2] | 0;
                c2 = b[c2 + 4 >> 2] | 0;
                f2 = f2 + 1 | 0;
                if (Hb(m, c2) | 0) {
                  a2 = 9;
                  break a;
                }
              } while ((f2 | 0) < (d2 | 0));
              l = e2;
              b[l >> 2] = m;
              b[l + 4 >> 2] = c2;
              l = d2 + -1 | 0;
              k = 0;
              a2 = 1;
              do {
                f2 = 26800 + (k << 2) | 0;
                if ((k | 0) == 5) {
                  h = b[f2 >> 2] | 0;
                  g2 = 0;
                  f2 = a2;
                  while (1) {
                    a2 = n;
                    a2 = ea2(b[a2 >> 2] | 0, b[a2 + 4 >> 2] | 0, h, o, n) | 0;
                    if (a2 | 0) {
                      break a;
                    }
                    if ((g2 | 0) != (l | 0)) {
                      j = n;
                      i = b[j >> 2] | 0;
                      j = b[j + 4 >> 2] | 0;
                      a2 = e2 + (f2 << 3) | 0;
                      b[a2 >> 2] = i;
                      b[a2 + 4 >> 2] = j;
                      if (!(Hb(i, j) | 0)) {
                        a2 = f2 + 1 | 0;
                      } else {
                        a2 = 9;
                        break a;
                      }
                    } else {
                      a2 = f2;
                    }
                    g2 = g2 + 1 | 0;
                    if ((g2 | 0) >= (d2 | 0)) {
                      break;
                    } else {
                      f2 = a2;
                    }
                  }
                } else {
                  h = n;
                  j = b[f2 >> 2] | 0;
                  i = 0;
                  f2 = a2;
                  g2 = b[h >> 2] | 0;
                  h = b[h + 4 >> 2] | 0;
                  while (1) {
                    a2 = ea2(g2, h, j, o, n) | 0;
                    if (a2 | 0) {
                      break a;
                    }
                    h = n;
                    g2 = b[h >> 2] | 0;
                    h = b[h + 4 >> 2] | 0;
                    a2 = e2 + (f2 << 3) | 0;
                    b[a2 >> 2] = g2;
                    b[a2 + 4 >> 2] = h;
                    a2 = f2 + 1 | 0;
                    if (Hb(g2, h) | 0) {
                      a2 = 9;
                      break a;
                    }
                    i = i + 1 | 0;
                    if ((i | 0) >= (d2 | 0)) {
                      break;
                    } else {
                      f2 = a2;
                    }
                  }
                }
                k = k + 1 | 0;
              } while (k >>> 0 < 6);
              a2 = n;
              a2 = ((m | 0) == (b[a2 >> 2] | 0) ? (c2 | 0) == (b[a2 + 4 >> 2] | 0) : 0) ? 0 : 9;
            } else {
              a2 = 9;
            }
          } while (0);
          o = a2;
          T = p2;
          return o | 0;
        }
        function ha(a2, c2, d2, e2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0;
          m = T;
          T = T + 16 | 0;
          h = m;
          if (!d2) {
            b[e2 >> 2] = a2;
            b[e2 + 4 >> 2] = c2;
            e2 = 0;
            T = m;
            return e2 | 0;
          }
          do {
            if ((d2 | 0) >= 0) {
              if ((d2 | 0) > 13780509) {
                f2 = uc(15, h) | 0;
                if (f2 | 0) {
                  break;
                }
                g2 = h;
                f2 = b[g2 >> 2] | 0;
                g2 = b[g2 + 4 >> 2] | 0;
              } else {
                f2 = ((d2 | 0) < 0) << 31 >> 31;
                l = Md(d2 | 0, f2 | 0, 3, 0) | 0;
                g2 = H() | 0;
                f2 = Gd(d2 | 0, f2 | 0, 1, 0) | 0;
                f2 = Md(l | 0, g2 | 0, f2 | 0, H() | 0) | 0;
                f2 = Gd(f2 | 0, H() | 0, 1, 0) | 0;
                g2 = H() | 0;
                l = h;
                b[l >> 2] = f2;
                b[l + 4 >> 2] = g2;
              }
              k = Fd(f2, 8) | 0;
              if (!k) {
                f2 = 13;
              } else {
                l = Fd(f2, 4) | 0;
                if (!l) {
                  Ed(k);
                  f2 = 13;
                  break;
                }
                f2 = da2(a2, c2, d2, k, l, f2, g2, 0) | 0;
                if (f2 | 0) {
                  Ed(k);
                  Ed(l);
                  break;
                }
                c2 = b[h >> 2] | 0;
                h = b[h + 4 >> 2] | 0;
                if ((h | 0) > 0 | (h | 0) == 0 & c2 >>> 0 > 0) {
                  f2 = 0;
                  i = 0;
                  j = 0;
                  do {
                    a2 = k + (i << 3) | 0;
                    g2 = b[a2 >> 2] | 0;
                    a2 = b[a2 + 4 >> 2] | 0;
                    if (!((g2 | 0) == 0 & (a2 | 0) == 0) ? (b[l + (i << 2) >> 2] | 0) == (d2 | 0) : 0) {
                      n = e2 + (f2 << 3) | 0;
                      b[n >> 2] = g2;
                      b[n + 4 >> 2] = a2;
                      f2 = f2 + 1 | 0;
                    }
                    i = Gd(i | 0, j | 0, 1, 0) | 0;
                    j = H() | 0;
                  } while ((j | 0) < (h | 0) | (j | 0) == (h | 0) & i >>> 0 < c2 >>> 0);
                }
                Ed(k);
                Ed(l);
                f2 = 0;
              }
            } else {
              f2 = 2;
            }
          } while (0);
          n = f2;
          T = m;
          return n | 0;
        }
        function ia(a2, c2, d2, e2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0;
          i = T;
          T = T + 16 | 0;
          g2 = i;
          h = i + 8 | 0;
          f2 = (Hb(a2, c2) | 0) == 0;
          f2 = f2 ? 1 : 2;
          while (1) {
            b[h >> 2] = 0;
            k = (ea2(a2, c2, f2, h, g2) | 0) == 0;
            j = g2;
            if (k & ((b[j >> 2] | 0) == (d2 | 0) ? (b[j + 4 >> 2] | 0) == (e2 | 0) : 0)) {
              a2 = 4;
              break;
            }
            f2 = f2 + 1 | 0;
            if (f2 >>> 0 >= 7) {
              f2 = 7;
              a2 = 4;
              break;
            }
          }
          if ((a2 | 0) == 4) {
            T = i;
            return f2 | 0;
          }
          return 0;
        }
        function ja(a2, c2, d2, e2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0;
          i = T;
          T = T + 48 | 0;
          f2 = i + 16 | 0;
          g2 = i + 8 | 0;
          h = i;
          d2 = Xc(d2) | 0;
          if (d2 | 0) {
            h = d2;
            T = i;
            return h | 0;
          }
          k = a2;
          j = b[k + 4 >> 2] | 0;
          d2 = g2;
          b[d2 >> 2] = b[k >> 2];
          b[d2 + 4 >> 2] = j;
          Wc(g2, f2);
          d2 = Ha(f2, c2, h) | 0;
          if (!d2) {
            c2 = b[g2 >> 2] | 0;
            g2 = b[a2 + 8 >> 2] | 0;
            if ((g2 | 0) > 0) {
              f2 = b[a2 + 12 >> 2] | 0;
              d2 = 0;
              do {
                c2 = (b[f2 + (d2 << 3) >> 2] | 0) + c2 | 0;
                d2 = d2 + 1 | 0;
              } while ((d2 | 0) < (g2 | 0));
            }
            d2 = h;
            f2 = b[d2 >> 2] | 0;
            d2 = b[d2 + 4 >> 2] | 0;
            g2 = ((c2 | 0) < 0) << 31 >> 31;
            if ((d2 | 0) < (g2 | 0) | (d2 | 0) == (g2 | 0) & f2 >>> 0 < c2 >>> 0) {
              d2 = h;
              b[d2 >> 2] = c2;
              b[d2 + 4 >> 2] = g2;
              d2 = g2;
            } else {
              c2 = f2;
            }
            j = Gd(c2 | 0, d2 | 0, 12, 0) | 0;
            k = H() | 0;
            d2 = h;
            b[d2 >> 2] = j;
            b[d2 + 4 >> 2] = k;
            d2 = e2;
            b[d2 >> 2] = j;
            b[d2 + 4 >> 2] = k;
            d2 = 0;
          }
          k = d2;
          T = i;
          return k | 0;
        }
        function ka(a2, c2, d2, f2, g2, h, i) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          h = h | 0;
          i = i | 0;
          var j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A2 = 0, B4 = 0, C3 = 0, D3 = 0, E2 = 0, F = 0, G2 = 0, I2 = 0, J2 = 0, K2 = 0, L2 = 0, M2 = 0;
          I2 = T;
          T = T + 64 | 0;
          D3 = I2 + 48 | 0;
          E2 = I2 + 32 | 0;
          F = I2 + 24 | 0;
          x2 = I2 + 8 | 0;
          y2 = I2;
          k = b[a2 >> 2] | 0;
          if ((k | 0) <= 0) {
            G2 = 0;
            T = I2;
            return G2 | 0;
          }
          z2 = a2 + 4 | 0;
          A2 = D3 + 8 | 0;
          B4 = E2 + 8 | 0;
          C3 = x2 + 8 | 0;
          j = 0;
          v3 = 0;
          while (1) {
            l = b[z2 >> 2] | 0;
            u5 = l + (v3 << 4) | 0;
            b[D3 >> 2] = b[u5 >> 2];
            b[D3 + 4 >> 2] = b[u5 + 4 >> 2];
            b[D3 + 8 >> 2] = b[u5 + 8 >> 2];
            b[D3 + 12 >> 2] = b[u5 + 12 >> 2];
            if ((v3 | 0) == (k + -1 | 0)) {
              b[E2 >> 2] = b[l >> 2];
              b[E2 + 4 >> 2] = b[l + 4 >> 2];
              b[E2 + 8 >> 2] = b[l + 8 >> 2];
              b[E2 + 12 >> 2] = b[l + 12 >> 2];
            } else {
              u5 = l + (v3 + 1 << 4) | 0;
              b[E2 >> 2] = b[u5 >> 2];
              b[E2 + 4 >> 2] = b[u5 + 4 >> 2];
              b[E2 + 8 >> 2] = b[u5 + 8 >> 2];
              b[E2 + 12 >> 2] = b[u5 + 12 >> 2];
            }
            k = Ia(D3, E2, f2, F) | 0;
            a: do {
              if (!k) {
                k = F;
                l = b[k >> 2] | 0;
                k = b[k + 4 >> 2] | 0;
                if ((k | 0) > 0 | (k | 0) == 0 & l >>> 0 > 0) {
                  t2 = 0;
                  u5 = 0;
                  b: while (1) {
                    K2 = 1 / (+(l >>> 0) + 4294967296 * +(k | 0));
                    M2 = +e[D3 >> 3];
                    k = Hd(l | 0, k | 0, t2 | 0, u5 | 0) | 0;
                    L2 = +(k >>> 0) + 4294967296 * +(H() | 0);
                    J2 = +(t2 >>> 0) + 4294967296 * +(u5 | 0);
                    e[x2 >> 3] = K2 * (M2 * L2) + K2 * (+e[E2 >> 3] * J2);
                    e[C3 >> 3] = K2 * (+e[A2 >> 3] * L2) + K2 * (+e[B4 >> 3] * J2);
                    k = Wb(x2, f2, y2) | 0;
                    if (k | 0) {
                      j = k;
                      break;
                    }
                    s2 = y2;
                    r2 = b[s2 >> 2] | 0;
                    s2 = b[s2 + 4 >> 2] | 0;
                    o = Od(r2 | 0, s2 | 0, c2 | 0, d2 | 0) | 0;
                    m = H() | 0;
                    k = i + (o << 3) | 0;
                    n = k;
                    l = b[n >> 2] | 0;
                    n = b[n + 4 >> 2] | 0;
                    c: do {
                      if ((l | 0) == 0 & (n | 0) == 0) {
                        w2 = k;
                        G2 = 16;
                      } else {
                        p2 = 0;
                        q2 = 0;
                        while (1) {
                          if ((p2 | 0) > (d2 | 0) | (p2 | 0) == (d2 | 0) & q2 >>> 0 > c2 >>> 0) {
                            j = 1;
                            break b;
                          }
                          if ((l | 0) == (r2 | 0) & (n | 0) == (s2 | 0)) {
                            break c;
                          }
                          k = Gd(o | 0, m | 0, 1, 0) | 0;
                          o = Nd(k | 0, H() | 0, c2 | 0, d2 | 0) | 0;
                          m = H() | 0;
                          q2 = Gd(q2 | 0, p2 | 0, 1, 0) | 0;
                          p2 = H() | 0;
                          k = i + (o << 3) | 0;
                          n = k;
                          l = b[n >> 2] | 0;
                          n = b[n + 4 >> 2] | 0;
                          if ((l | 0) == 0 & (n | 0) == 0) {
                            w2 = k;
                            G2 = 16;
                            break;
                          }
                        }
                      }
                    } while (0);
                    if ((G2 | 0) == 16 ? (G2 = 0, !((r2 | 0) == 0 & (s2 | 0) == 0)) : 0) {
                      q2 = w2;
                      b[q2 >> 2] = r2;
                      b[q2 + 4 >> 2] = s2;
                      q2 = h + (b[g2 >> 2] << 3) | 0;
                      b[q2 >> 2] = r2;
                      b[q2 + 4 >> 2] = s2;
                      q2 = g2;
                      q2 = Gd(b[q2 >> 2] | 0, b[q2 + 4 >> 2] | 0, 1, 0) | 0;
                      r2 = H() | 0;
                      s2 = g2;
                      b[s2 >> 2] = q2;
                      b[s2 + 4 >> 2] = r2;
                    }
                    t2 = Gd(t2 | 0, u5 | 0, 1, 0) | 0;
                    u5 = H() | 0;
                    k = F;
                    l = b[k >> 2] | 0;
                    k = b[k + 4 >> 2] | 0;
                    if (!((k | 0) > (u5 | 0) | (k | 0) == (u5 | 0) & l >>> 0 > t2 >>> 0)) {
                      l = 1;
                      break a;
                    }
                  }
                  l = 0;
                } else {
                  l = 1;
                }
              } else {
                l = 0;
                j = k;
              }
            } while (0);
            v3 = v3 + 1 | 0;
            if (!l) {
              G2 = 21;
              break;
            }
            k = b[a2 >> 2] | 0;
            if ((v3 | 0) >= (k | 0)) {
              j = 0;
              G2 = 21;
              break;
            }
          }
          if ((G2 | 0) == 21) {
            T = I2;
            return j | 0;
          }
          return 0;
        }
        function la(a2, c2, d2, e2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A2 = 0, B4 = 0, C3 = 0, D3 = 0, E2 = 0, F = 0, G2 = 0, I2 = 0, J2 = 0, K2 = 0;
          K2 = T;
          T = T + 112 | 0;
          F = K2 + 80 | 0;
          j = K2 + 72 | 0;
          G2 = K2;
          I2 = K2 + 56 | 0;
          f2 = Xc(d2) | 0;
          if (f2 | 0) {
            J2 = f2;
            T = K2;
            return J2 | 0;
          }
          k = a2 + 8 | 0;
          J2 = Dd((b[k >> 2] << 5) + 32 | 0) | 0;
          if (!J2) {
            J2 = 13;
            T = K2;
            return J2 | 0;
          }
          Yc(a2, J2);
          f2 = Xc(d2) | 0;
          if (!f2) {
            D3 = a2;
            E2 = b[D3 + 4 >> 2] | 0;
            f2 = j;
            b[f2 >> 2] = b[D3 >> 2];
            b[f2 + 4 >> 2] = E2;
            Wc(j, F);
            f2 = Ha(F, c2, G2) | 0;
            if (!f2) {
              f2 = b[j >> 2] | 0;
              g2 = b[k >> 2] | 0;
              if ((g2 | 0) > 0) {
                h = b[a2 + 12 >> 2] | 0;
                d2 = 0;
                do {
                  f2 = (b[h + (d2 << 3) >> 2] | 0) + f2 | 0;
                  d2 = d2 + 1 | 0;
                } while ((d2 | 0) != (g2 | 0));
                d2 = f2;
              } else {
                d2 = f2;
              }
              f2 = G2;
              g2 = b[f2 >> 2] | 0;
              f2 = b[f2 + 4 >> 2] | 0;
              h = ((d2 | 0) < 0) << 31 >> 31;
              if ((f2 | 0) < (h | 0) | (f2 | 0) == (h | 0) & g2 >>> 0 < d2 >>> 0) {
                f2 = G2;
                b[f2 >> 2] = d2;
                b[f2 + 4 >> 2] = h;
                f2 = h;
              } else {
                d2 = g2;
              }
              D3 = Gd(d2 | 0, f2 | 0, 12, 0) | 0;
              E2 = H() | 0;
              f2 = G2;
              b[f2 >> 2] = D3;
              b[f2 + 4 >> 2] = E2;
              f2 = 0;
            } else {
              D3 = 0;
              E2 = 0;
            }
            if (!f2) {
              d2 = Fd(D3, 8) | 0;
              if (!d2) {
                Ed(J2);
                J2 = 13;
                T = K2;
                return J2 | 0;
              }
              i = Fd(D3, 8) | 0;
              if (!i) {
                Ed(J2);
                Ed(d2);
                J2 = 13;
                T = K2;
                return J2 | 0;
              }
              B4 = F;
              b[B4 >> 2] = 0;
              b[B4 + 4 >> 2] = 0;
              B4 = a2;
              C3 = b[B4 + 4 >> 2] | 0;
              f2 = j;
              b[f2 >> 2] = b[B4 >> 2];
              b[f2 + 4 >> 2] = C3;
              f2 = ka(j, D3, E2, c2, F, d2, i) | 0;
              a: do {
                if (!f2) {
                  b: do {
                    if ((b[k >> 2] | 0) > 0) {
                      h = a2 + 12 | 0;
                      g2 = 0;
                      while (1) {
                        f2 = ka((b[h >> 2] | 0) + (g2 << 3) | 0, D3, E2, c2, F, d2, i) | 0;
                        g2 = g2 + 1 | 0;
                        if (f2 | 0) {
                          break;
                        }
                        if ((g2 | 0) >= (b[k >> 2] | 0)) {
                          break b;
                        }
                      }
                      Ed(d2);
                      Ed(i);
                      Ed(J2);
                      break a;
                    }
                  } while (0);
                  if ((E2 | 0) > 0 | (E2 | 0) == 0 & D3 >>> 0 > 0) {
                    Xd(i | 0, 0, D3 << 3 | 0) | 0;
                  }
                  C3 = F;
                  B4 = b[C3 + 4 >> 2] | 0;
                  c: do {
                    if ((B4 | 0) > 0 | (B4 | 0) == 0 & (b[C3 >> 2] | 0) >>> 0 > 0) {
                      y2 = d2;
                      z2 = i;
                      A2 = d2;
                      B4 = i;
                      C3 = d2;
                      f2 = d2;
                      v3 = d2;
                      w2 = i;
                      x2 = i;
                      d2 = i;
                      d: while (1) {
                        r2 = 0;
                        s2 = 0;
                        t2 = 0;
                        u5 = 0;
                        g2 = 0;
                        h = 0;
                        while (1) {
                          i = G2;
                          j = i + 56 | 0;
                          do {
                            b[i >> 2] = 0;
                            i = i + 4 | 0;
                          } while ((i | 0) < (j | 0));
                          c2 = y2 + (r2 << 3) | 0;
                          k = b[c2 >> 2] | 0;
                          c2 = b[c2 + 4 >> 2] | 0;
                          if (ca3(k, c2, 1, G2, 0) | 0) {
                            i = G2;
                            j = i + 56 | 0;
                            do {
                              b[i >> 2] = 0;
                              i = i + 4 | 0;
                            } while ((i | 0) < (j | 0));
                            i = Fd(7, 4) | 0;
                            if (i | 0) {
                              da2(k, c2, 1, G2, i, 7, 0, 0) | 0;
                              Ed(i);
                            }
                          }
                          q2 = 0;
                          while (1) {
                            p2 = G2 + (q2 << 3) | 0;
                            o = b[p2 >> 2] | 0;
                            p2 = b[p2 + 4 >> 2] | 0;
                            e: do {
                              if ((o | 0) == 0 & (p2 | 0) == 0) {
                                i = g2;
                                j = h;
                              } else {
                                l = Od(o | 0, p2 | 0, D3 | 0, E2 | 0) | 0;
                                k = H() | 0;
                                i = e2 + (l << 3) | 0;
                                c2 = i;
                                j = b[c2 >> 2] | 0;
                                c2 = b[c2 + 4 >> 2] | 0;
                                if (!((j | 0) == 0 & (c2 | 0) == 0)) {
                                  m = 0;
                                  n = 0;
                                  do {
                                    if ((m | 0) > (E2 | 0) | (m | 0) == (E2 | 0) & n >>> 0 > D3 >>> 0) {
                                      break d;
                                    }
                                    if ((j | 0) == (o | 0) & (c2 | 0) == (p2 | 0)) {
                                      i = g2;
                                      j = h;
                                      break e;
                                    }
                                    i = Gd(l | 0, k | 0, 1, 0) | 0;
                                    l = Nd(i | 0, H() | 0, D3 | 0, E2 | 0) | 0;
                                    k = H() | 0;
                                    n = Gd(n | 0, m | 0, 1, 0) | 0;
                                    m = H() | 0;
                                    i = e2 + (l << 3) | 0;
                                    c2 = i;
                                    j = b[c2 >> 2] | 0;
                                    c2 = b[c2 + 4 >> 2] | 0;
                                  } while (!((j | 0) == 0 & (c2 | 0) == 0));
                                }
                                if ((o | 0) == 0 & (p2 | 0) == 0) {
                                  i = g2;
                                  j = h;
                                  break;
                                }
                                Zb(o, p2, I2) | 0;
                                if (Zc(a2, J2, I2) | 0) {
                                  n = Gd(g2 | 0, h | 0, 1, 0) | 0;
                                  h = H() | 0;
                                  m = i;
                                  b[m >> 2] = o;
                                  b[m + 4 >> 2] = p2;
                                  g2 = z2 + (g2 << 3) | 0;
                                  b[g2 >> 2] = o;
                                  b[g2 + 4 >> 2] = p2;
                                  g2 = n;
                                }
                                i = g2;
                                j = h;
                              }
                            } while (0);
                            q2 = q2 + 1 | 0;
                            if (q2 >>> 0 >= 7) {
                              break;
                            } else {
                              g2 = i;
                              h = j;
                            }
                          }
                          r2 = Gd(r2 | 0, s2 | 0, 1, 0) | 0;
                          s2 = H() | 0;
                          t2 = Gd(t2 | 0, u5 | 0, 1, 0) | 0;
                          u5 = H() | 0;
                          h = F;
                          g2 = b[h >> 2] | 0;
                          h = b[h + 4 >> 2] | 0;
                          if (!((u5 | 0) < (h | 0) | (u5 | 0) == (h | 0) & t2 >>> 0 < g2 >>> 0)) {
                            break;
                          } else {
                            g2 = i;
                            h = j;
                          }
                        }
                        if ((h | 0) > 0 | (h | 0) == 0 & g2 >>> 0 > 0) {
                          g2 = 0;
                          h = 0;
                          do {
                            u5 = y2 + (g2 << 3) | 0;
                            b[u5 >> 2] = 0;
                            b[u5 + 4 >> 2] = 0;
                            g2 = Gd(g2 | 0, h | 0, 1, 0) | 0;
                            h = H() | 0;
                            u5 = F;
                            t2 = b[u5 + 4 >> 2] | 0;
                          } while ((h | 0) < (t2 | 0) | ((h | 0) == (t2 | 0) ? g2 >>> 0 < (b[u5 >> 2] | 0) >>> 0 : 0));
                        }
                        u5 = F;
                        b[u5 >> 2] = i;
                        b[u5 + 4 >> 2] = j;
                        if ((j | 0) > 0 | (j | 0) == 0 & i >>> 0 > 0) {
                          q2 = d2;
                          r2 = x2;
                          s2 = C3;
                          t2 = w2;
                          u5 = z2;
                          d2 = v3;
                          x2 = f2;
                          w2 = A2;
                          v3 = q2;
                          f2 = r2;
                          C3 = B4;
                          B4 = s2;
                          A2 = t2;
                          z2 = y2;
                          y2 = u5;
                        } else {
                          break c;
                        }
                      }
                      Ed(A2);
                      Ed(B4);
                      Ed(J2);
                      f2 = 1;
                      break a;
                    } else {
                      f2 = i;
                    }
                  } while (0);
                  Ed(J2);
                  Ed(d2);
                  Ed(f2);
                  f2 = 0;
                } else {
                  Ed(d2);
                  Ed(i);
                  Ed(J2);
                }
              } while (0);
              J2 = f2;
              T = K2;
              return J2 | 0;
            }
          }
          Ed(J2);
          J2 = f2;
          T = K2;
          return J2 | 0;
        }
        function ma(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0;
          l = T;
          T = T + 176 | 0;
          j = l;
          if ((c2 | 0) < 1) {
            ud(d2, 0, 0);
            k = 0;
            T = l;
            return k | 0;
          }
          i = a2;
          i = Qd(b[i >> 2] | 0, b[i + 4 >> 2] | 0, 52) | 0;
          H() | 0;
          ud(d2, (c2 | 0) > 6 ? c2 : 6, i & 15);
          i = 0;
          while (1) {
            e2 = a2 + (i << 3) | 0;
            e2 = _b2(b[e2 >> 2] | 0, b[e2 + 4 >> 2] | 0, j) | 0;
            if (e2 | 0) {
              break;
            }
            e2 = b[j >> 2] | 0;
            if ((e2 | 0) > 0) {
              h = 0;
              do {
                g2 = j + 8 + (h << 4) | 0;
                h = h + 1 | 0;
                e2 = j + 8 + (((h | 0) % (e2 | 0) | 0) << 4) | 0;
                f2 = zd(d2, e2, g2) | 0;
                if (!f2) {
                  yd(d2, g2, e2) | 0;
                } else {
                  xd(d2, f2) | 0;
                }
                e2 = b[j >> 2] | 0;
              } while ((h | 0) < (e2 | 0));
            }
            i = i + 1 | 0;
            if ((i | 0) >= (c2 | 0)) {
              e2 = 0;
              k = 13;
              break;
            }
          }
          if ((k | 0) == 13) {
            T = l;
            return e2 | 0;
          }
          vd(d2);
          k = e2;
          T = l;
          return k | 0;
        }
        function na(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h = 0;
          g2 = T;
          T = T + 32 | 0;
          e2 = g2;
          f2 = g2 + 16 | 0;
          a2 = ma(a2, c2, f2) | 0;
          if (a2 | 0) {
            d2 = a2;
            T = g2;
            return d2 | 0;
          }
          b[d2 >> 2] = 0;
          b[d2 + 4 >> 2] = 0;
          b[d2 + 8 >> 2] = 0;
          a2 = wd(f2) | 0;
          if (a2 | 0) {
            do {
              c2 = Cc(d2) | 0;
              do {
                Dc(c2, a2) | 0;
                h = a2 + 16 | 0;
                b[e2 >> 2] = b[h >> 2];
                b[e2 + 4 >> 2] = b[h + 4 >> 2];
                b[e2 + 8 >> 2] = b[h + 8 >> 2];
                b[e2 + 12 >> 2] = b[h + 12 >> 2];
                xd(f2, a2) | 0;
                a2 = Ad(f2, e2) | 0;
              } while ((a2 | 0) != 0);
              a2 = wd(f2) | 0;
            } while ((a2 | 0) != 0);
          }
          vd(f2);
          a2 = Fc(d2) | 0;
          if (!a2) {
            h = 0;
            T = g2;
            return h | 0;
          }
          Ec(d2);
          h = a2;
          T = g2;
          return h | 0;
        }
        function oa(a2) {
          a2 = a2 | 0;
          if (a2 >>> 0 > 121) {
            a2 = 0;
            return a2 | 0;
          }
          a2 = b[7696 + (a2 * 28 | 0) + 16 >> 2] | 0;
          return a2 | 0;
        }
        function pa(a2) {
          a2 = a2 | 0;
          return (a2 | 0) == 4 | (a2 | 0) == 117 | 0;
        }
        function qa(a2) {
          a2 = a2 | 0;
          return b[11120 + ((b[a2 >> 2] | 0) * 216 | 0) + ((b[a2 + 4 >> 2] | 0) * 72 | 0) + ((b[a2 + 8 >> 2] | 0) * 24 | 0) + (b[a2 + 12 >> 2] << 3) >> 2] | 0;
        }
        function ra(a2) {
          a2 = a2 | 0;
          return b[11120 + ((b[a2 >> 2] | 0) * 216 | 0) + ((b[a2 + 4 >> 2] | 0) * 72 | 0) + ((b[a2 + 8 >> 2] | 0) * 24 | 0) + (b[a2 + 12 >> 2] << 3) + 4 >> 2] | 0;
        }
        function sa(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          a2 = 7696 + (a2 * 28 | 0) | 0;
          b[c2 >> 2] = b[a2 >> 2];
          b[c2 + 4 >> 2] = b[a2 + 4 >> 2];
          b[c2 + 8 >> 2] = b[a2 + 8 >> 2];
          b[c2 + 12 >> 2] = b[a2 + 12 >> 2];
          return;
        }
        function ta(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          var d2 = 0, e2 = 0;
          if (c2 >>> 0 > 20) {
            c2 = -1;
            return c2 | 0;
          }
          do {
            if ((b[11120 + (c2 * 216 | 0) >> 2] | 0) != (a2 | 0)) {
              if ((b[11120 + (c2 * 216 | 0) + 8 >> 2] | 0) != (a2 | 0)) {
                if ((b[11120 + (c2 * 216 | 0) + 16 >> 2] | 0) != (a2 | 0)) {
                  if ((b[11120 + (c2 * 216 | 0) + 24 >> 2] | 0) != (a2 | 0)) {
                    if ((b[11120 + (c2 * 216 | 0) + 32 >> 2] | 0) != (a2 | 0)) {
                      if ((b[11120 + (c2 * 216 | 0) + 40 >> 2] | 0) != (a2 | 0)) {
                        if ((b[11120 + (c2 * 216 | 0) + 48 >> 2] | 0) != (a2 | 0)) {
                          if ((b[11120 + (c2 * 216 | 0) + 56 >> 2] | 0) != (a2 | 0)) {
                            if ((b[11120 + (c2 * 216 | 0) + 64 >> 2] | 0) != (a2 | 0)) {
                              if ((b[11120 + (c2 * 216 | 0) + 72 >> 2] | 0) != (a2 | 0)) {
                                if ((b[11120 + (c2 * 216 | 0) + 80 >> 2] | 0) != (a2 | 0)) {
                                  if ((b[11120 + (c2 * 216 | 0) + 88 >> 2] | 0) != (a2 | 0)) {
                                    if ((b[11120 + (c2 * 216 | 0) + 96 >> 2] | 0) != (a2 | 0)) {
                                      if ((b[11120 + (c2 * 216 | 0) + 104 >> 2] | 0) != (a2 | 0)) {
                                        if ((b[11120 + (c2 * 216 | 0) + 112 >> 2] | 0) != (a2 | 0)) {
                                          if ((b[11120 + (c2 * 216 | 0) + 120 >> 2] | 0) != (a2 | 0)) {
                                            if ((b[11120 + (c2 * 216 | 0) + 128 >> 2] | 0) != (a2 | 0)) {
                                              if ((b[11120 + (c2 * 216 | 0) + 136 >> 2] | 0) == (a2 | 0)) {
                                                a2 = 2;
                                                d2 = 1;
                                                e2 = 2;
                                              } else {
                                                if ((b[11120 + (c2 * 216 | 0) + 144 >> 2] | 0) == (a2 | 0)) {
                                                  a2 = 0;
                                                  d2 = 2;
                                                  e2 = 0;
                                                  break;
                                                }
                                                if ((b[11120 + (c2 * 216 | 0) + 152 >> 2] | 0) == (a2 | 0)) {
                                                  a2 = 0;
                                                  d2 = 2;
                                                  e2 = 1;
                                                  break;
                                                }
                                                if ((b[11120 + (c2 * 216 | 0) + 160 >> 2] | 0) == (a2 | 0)) {
                                                  a2 = 0;
                                                  d2 = 2;
                                                  e2 = 2;
                                                  break;
                                                }
                                                if ((b[11120 + (c2 * 216 | 0) + 168 >> 2] | 0) == (a2 | 0)) {
                                                  a2 = 1;
                                                  d2 = 2;
                                                  e2 = 0;
                                                  break;
                                                }
                                                if ((b[11120 + (c2 * 216 | 0) + 176 >> 2] | 0) == (a2 | 0)) {
                                                  a2 = 1;
                                                  d2 = 2;
                                                  e2 = 1;
                                                  break;
                                                }
                                                if ((b[11120 + (c2 * 216 | 0) + 184 >> 2] | 0) == (a2 | 0)) {
                                                  a2 = 1;
                                                  d2 = 2;
                                                  e2 = 2;
                                                  break;
                                                }
                                                if ((b[11120 + (c2 * 216 | 0) + 192 >> 2] | 0) == (a2 | 0)) {
                                                  a2 = 2;
                                                  d2 = 2;
                                                  e2 = 0;
                                                  break;
                                                }
                                                if ((b[11120 + (c2 * 216 | 0) + 200 >> 2] | 0) == (a2 | 0)) {
                                                  a2 = 2;
                                                  d2 = 2;
                                                  e2 = 1;
                                                  break;
                                                }
                                                if ((b[11120 + (c2 * 216 | 0) + 208 >> 2] | 0) == (a2 | 0)) {
                                                  a2 = 2;
                                                  d2 = 2;
                                                  e2 = 2;
                                                  break;
                                                } else {
                                                  a2 = -1;
                                                }
                                                return a2 | 0;
                                              }
                                            } else {
                                              a2 = 2;
                                              d2 = 1;
                                              e2 = 1;
                                            }
                                          } else {
                                            a2 = 2;
                                            d2 = 1;
                                            e2 = 0;
                                          }
                                        } else {
                                          a2 = 1;
                                          d2 = 1;
                                          e2 = 2;
                                        }
                                      } else {
                                        a2 = 1;
                                        d2 = 1;
                                        e2 = 1;
                                      }
                                    } else {
                                      a2 = 1;
                                      d2 = 1;
                                      e2 = 0;
                                    }
                                  } else {
                                    a2 = 0;
                                    d2 = 1;
                                    e2 = 2;
                                  }
                                } else {
                                  a2 = 0;
                                  d2 = 1;
                                  e2 = 1;
                                }
                              } else {
                                a2 = 0;
                                d2 = 1;
                                e2 = 0;
                              }
                            } else {
                              a2 = 2;
                              d2 = 0;
                              e2 = 2;
                            }
                          } else {
                            a2 = 2;
                            d2 = 0;
                            e2 = 1;
                          }
                        } else {
                          a2 = 2;
                          d2 = 0;
                          e2 = 0;
                        }
                      } else {
                        a2 = 1;
                        d2 = 0;
                        e2 = 2;
                      }
                    } else {
                      a2 = 1;
                      d2 = 0;
                      e2 = 1;
                    }
                  } else {
                    a2 = 1;
                    d2 = 0;
                    e2 = 0;
                  }
                } else {
                  a2 = 0;
                  d2 = 0;
                  e2 = 2;
                }
              } else {
                a2 = 0;
                d2 = 0;
                e2 = 1;
              }
            } else {
              a2 = 0;
              d2 = 0;
              e2 = 0;
            }
          } while (0);
          c2 = b[11120 + (c2 * 216 | 0) + (d2 * 72 | 0) + (a2 * 24 | 0) + (e2 << 3) + 4 >> 2] | 0;
          return c2 | 0;
        }
        function ua(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          if ((b[7696 + (a2 * 28 | 0) + 20 >> 2] | 0) == (c2 | 0)) {
            c2 = 1;
            return c2 | 0;
          }
          c2 = (b[7696 + (a2 * 28 | 0) + 24 >> 2] | 0) == (c2 | 0);
          return c2 | 0;
        }
        function va(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          return b[848 + (a2 * 28 | 0) + (c2 << 2) >> 2] | 0;
        }
        function wa(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          if ((b[848 + (a2 * 28 | 0) >> 2] | 0) == (c2 | 0)) {
            c2 = 0;
            return c2 | 0;
          }
          if ((b[848 + (a2 * 28 | 0) + 4 >> 2] | 0) == (c2 | 0)) {
            c2 = 1;
            return c2 | 0;
          }
          if ((b[848 + (a2 * 28 | 0) + 8 >> 2] | 0) == (c2 | 0)) {
            c2 = 2;
            return c2 | 0;
          }
          if ((b[848 + (a2 * 28 | 0) + 12 >> 2] | 0) == (c2 | 0)) {
            c2 = 3;
            return c2 | 0;
          }
          if ((b[848 + (a2 * 28 | 0) + 16 >> 2] | 0) == (c2 | 0)) {
            c2 = 4;
            return c2 | 0;
          }
          if ((b[848 + (a2 * 28 | 0) + 20 >> 2] | 0) == (c2 | 0)) {
            c2 = 5;
            return c2 | 0;
          } else {
            return ((b[848 + (a2 * 28 | 0) + 24 >> 2] | 0) == (c2 | 0) ? 6 : 7) | 0;
          }
          return 0;
        }
        function xa() {
          return 122;
        }
        function ya(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, e2 = 0;
          c2 = 0;
          do {
            Rd(c2 | 0, 0, 45) | 0;
            e2 = H() | 0 | 134225919;
            d2 = a2 + (c2 << 3) | 0;
            b[d2 >> 2] = -1;
            b[d2 + 4 >> 2] = e2;
            c2 = c2 + 1 | 0;
          } while ((c2 | 0) != 122);
          return 0;
        }
        function za(a2) {
          a2 = a2 | 0;
          var b2 = 0, c2 = 0, d2 = 0;
          d2 = +e[a2 + 16 >> 3];
          c2 = +e[a2 + 24 >> 3];
          b2 = d2 - c2;
          return +(d2 < c2 ? b2 + 6.283185307179586 : b2);
        }
        function Aa(a2) {
          a2 = a2 | 0;
          return +e[a2 + 16 >> 3] < +e[a2 + 24 >> 3] | 0;
        }
        function Ba(a2) {
          a2 = a2 | 0;
          return +(+e[a2 >> 3] - +e[a2 + 8 >> 3]);
        }
        function Ca(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0, d2 = 0, f2 = 0;
          c2 = +e[b2 >> 3];
          if (!(c2 >= +e[a2 + 8 >> 3])) {
            b2 = 0;
            return b2 | 0;
          }
          if (!(c2 <= +e[a2 >> 3])) {
            b2 = 0;
            return b2 | 0;
          }
          d2 = +e[a2 + 16 >> 3];
          c2 = +e[a2 + 24 >> 3];
          f2 = +e[b2 + 8 >> 3];
          b2 = f2 >= c2;
          a2 = f2 <= d2 & 1;
          if (d2 < c2) {
            if (b2) {
              a2 = 1;
            }
          } else if (!b2) {
            a2 = 0;
          }
          b2 = (a2 | 0) != 0;
          return b2 | 0;
        }
        function Da(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0, d2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0;
          if (+e[a2 >> 3] < +e[b2 + 8 >> 3]) {
            d2 = 0;
            return d2 | 0;
          }
          if (+e[a2 + 8 >> 3] > +e[b2 >> 3]) {
            d2 = 0;
            return d2 | 0;
          }
          g2 = +e[a2 + 16 >> 3];
          c2 = a2 + 24 | 0;
          l = +e[c2 >> 3];
          h = g2 < l;
          d2 = b2 + 16 | 0;
          k = +e[d2 >> 3];
          f2 = b2 + 24 | 0;
          j = +e[f2 >> 3];
          i = k < j;
          b2 = l - k < j - g2;
          a2 = h ? i | b2 ? 1 : 2 : 0;
          b2 = i ? h ? 1 : b2 ? 2 : 1 : 0;
          g2 = +kc(g2, a2);
          if (g2 < +kc(+e[f2 >> 3], b2)) {
            i = 0;
            return i | 0;
          }
          l = +kc(+e[c2 >> 3], a2);
          if (l > +kc(+e[d2 >> 3], b2)) {
            i = 0;
            return i | 0;
          }
          i = 1;
          return i | 0;
        }
        function Ea(a2, c2, d2, f2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h = 0, i = 0, j = 0, k = 0;
          h = +e[a2 + 16 >> 3];
          k = +e[a2 + 24 >> 3];
          a2 = h < k;
          j = +e[c2 + 16 >> 3];
          i = +e[c2 + 24 >> 3];
          g2 = j < i;
          c2 = k - j < i - h;
          b[d2 >> 2] = a2 ? g2 | c2 ? 1 : 2 : 0;
          b[f2 >> 2] = g2 ? a2 ? 1 : c2 ? 2 : 1 : 0;
          return;
        }
        function Fa(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0, d2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0;
          if (+e[a2 >> 3] < +e[b2 >> 3]) {
            d2 = 0;
            return d2 | 0;
          }
          if (+e[a2 + 8 >> 3] > +e[b2 + 8 >> 3]) {
            d2 = 0;
            return d2 | 0;
          }
          d2 = a2 + 16 | 0;
          j = +e[d2 >> 3];
          g2 = +e[a2 + 24 >> 3];
          h = j < g2;
          c2 = b2 + 16 | 0;
          l = +e[c2 >> 3];
          f2 = b2 + 24 | 0;
          k = +e[f2 >> 3];
          i = l < k;
          b2 = g2 - l < k - j;
          a2 = h ? i | b2 ? 1 : 2 : 0;
          b2 = i ? h ? 1 : b2 ? 2 : 1 : 0;
          g2 = +kc(g2, a2);
          if (!(g2 <= +kc(+e[f2 >> 3], b2))) {
            i = 0;
            return i | 0;
          }
          l = +kc(+e[d2 >> 3], a2);
          i = l >= +kc(+e[c2 >> 3], b2);
          return i | 0;
        }
        function Ga(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          var d2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0;
          g2 = T;
          T = T + 176 | 0;
          f2 = g2;
          b[f2 >> 2] = 4;
          j = +e[c2 >> 3];
          e[f2 + 8 >> 3] = j;
          h = +e[c2 + 16 >> 3];
          e[f2 + 16 >> 3] = h;
          e[f2 + 24 >> 3] = j;
          j = +e[c2 + 24 >> 3];
          e[f2 + 32 >> 3] = j;
          i = +e[c2 + 8 >> 3];
          e[f2 + 40 >> 3] = i;
          e[f2 + 48 >> 3] = j;
          e[f2 + 56 >> 3] = i;
          e[f2 + 64 >> 3] = h;
          c2 = f2 + 72 | 0;
          d2 = c2 + 96 | 0;
          do {
            b[c2 >> 2] = 0;
            c2 = c2 + 4 | 0;
          } while ((c2 | 0) < (d2 | 0));
          Wd(a2 | 0, f2 | 0, 168) | 0;
          T = g2;
          return;
        }
        function Ha(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, r2 = 0, s2 = 0, t2 = 0, u5 = 0, v3 = 0;
          t2 = T;
          T = T + 288 | 0;
          n = t2 + 264 | 0;
          o = t2 + 96 | 0;
          m = t2;
          k = m;
          l = k + 96 | 0;
          do {
            b[k >> 2] = 0;
            k = k + 4 | 0;
          } while ((k | 0) < (l | 0));
          c2 = cc2(c2, m) | 0;
          if (c2 | 0) {
            s2 = c2;
            T = t2;
            return s2 | 0;
          }
          l = m;
          m = b[l >> 2] | 0;
          l = b[l + 4 >> 2] | 0;
          Zb(m, l, n) | 0;
          _b2(m, l, o) | 0;
          j = +mc(n, o + 8 | 0);
          e[n >> 3] = +e[a2 >> 3];
          l = n + 8 | 0;
          e[l >> 3] = +e[a2 + 16 >> 3];
          e[o >> 3] = +e[a2 + 8 >> 3];
          m = o + 8 | 0;
          e[m >> 3] = +e[a2 + 24 >> 3];
          h = +mc(n, o);
          v3 = +e[l >> 3] - +e[m >> 3];
          i = +q(+v3);
          u5 = +e[n >> 3] - +e[o >> 3];
          g2 = +q(+u5);
          if (!(v3 == 0 | u5 == 0) ? (v3 = +Td(+i, +g2), v3 = +A(+(h * h / +Ud(+(v3 / +Ud(+i, +g2)), 3) / (j * (j * 2.59807621135) * 0.8))), e[f >> 3] = v3, r2 = ~~v3 >>> 0, s2 = +q(v3) >= 1 ? v3 > 0 ? ~~+C(+p(v3 / 4294967296), 4294967295) >>> 0 : ~~+A((v3 - +(~~v3 >>> 0)) / 4294967296) >>> 0 : 0, !((b[f + 4 >> 2] & 2146435072 | 0) == 2146435072)) : 0) {
            o = (r2 | 0) == 0 & (s2 | 0) == 0;
            c2 = d2;
            b[c2 >> 2] = o ? 1 : r2;
            b[c2 + 4 >> 2] = o ? 0 : s2;
            c2 = 0;
          } else {
            c2 = 1;
          }
          s2 = c2;
          T = t2;
          return s2 | 0;
        }
        function Ia(a2, c2, d2, g2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          g2 = g2 | 0;
          var h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0;
          m = T;
          T = T + 288 | 0;
          j = m + 264 | 0;
          k = m + 96 | 0;
          l = m;
          h = l;
          i = h + 96 | 0;
          do {
            b[h >> 2] = 0;
            h = h + 4 | 0;
          } while ((h | 0) < (i | 0));
          d2 = cc2(d2, l) | 0;
          if (d2 | 0) {
            g2 = d2;
            T = m;
            return g2 | 0;
          }
          d2 = l;
          h = b[d2 >> 2] | 0;
          d2 = b[d2 + 4 >> 2] | 0;
          Zb(h, d2, j) | 0;
          _b2(h, d2, k) | 0;
          n = +mc(j, k + 8 | 0);
          n = +A(+(+mc(a2, c2) / (n * 2)));
          e[f >> 3] = n;
          d2 = ~~n >>> 0;
          h = +q(n) >= 1 ? n > 0 ? ~~+C(+p(n / 4294967296), 4294967295) >>> 0 : ~~+A((n - +(~~n >>> 0)) / 4294967296) >>> 0 : 0;
          if ((b[f + 4 >> 2] & 2146435072 | 0) == 2146435072) {
            g2 = 1;
            T = m;
            return g2 | 0;
          }
          l = (d2 | 0) == 0 & (h | 0) == 0;
          b[g2 >> 2] = l ? 1 : d2;
          b[g2 + 4 >> 2] = l ? 0 : h;
          g2 = 0;
          T = m;
          return g2 | 0;
        }
        function Ja(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          var c2 = 0, d2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0;
          g2 = a2 + 16 | 0;
          h = +e[g2 >> 3];
          c2 = a2 + 24 | 0;
          f2 = +e[c2 >> 3];
          d2 = h - f2;
          d2 = h < f2 ? d2 + 6.283185307179586 : d2;
          k = +e[a2 >> 3];
          i = a2 + 8 | 0;
          j = +e[i >> 3];
          l = k - j;
          d2 = (d2 * b2 - d2) * 0.5;
          b2 = (l * b2 - l) * 0.5;
          k = k + b2;
          e[a2 >> 3] = k > 1.5707963267948966 ? 1.5707963267948966 : k;
          b2 = j - b2;
          e[i >> 3] = b2 < -1.5707963267948966 ? -1.5707963267948966 : b2;
          b2 = h + d2;
          b2 = b2 > 3.141592653589793 ? b2 + -6.283185307179586 : b2;
          e[g2 >> 3] = b2 < -3.141592653589793 ? b2 + 6.283185307179586 : b2;
          b2 = f2 - d2;
          b2 = b2 > 3.141592653589793 ? b2 + -6.283185307179586 : b2;
          e[c2 >> 3] = b2 < -3.141592653589793 ? b2 + 6.283185307179586 : b2;
          return;
        }
        function Ka(a2, c2, d2, e2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          b[a2 >> 2] = c2;
          b[a2 + 4 >> 2] = d2;
          b[a2 + 8 >> 2] = e2;
          return;
        }
        function La(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          var d2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0;
          n = c2 + 8 | 0;
          b[n >> 2] = 0;
          k = +e[a2 >> 3];
          i = +q(+k);
          l = +e[a2 + 8 >> 3];
          j = +q(+l) * 1.1547005383792515;
          i = i + j * 0.5;
          d2 = ~~i;
          a2 = ~~j;
          i = i - +(d2 | 0);
          j = j - +(a2 | 0);
          do {
            if (i < 0.5) {
              if (i < 0.3333333333333333) {
                b[c2 >> 2] = d2;
                if (j < (i + 1) * 0.5) {
                  b[c2 + 4 >> 2] = a2;
                  break;
                } else {
                  a2 = a2 + 1 | 0;
                  b[c2 + 4 >> 2] = a2;
                  break;
                }
              } else {
                o = 1 - i;
                a2 = (!(j < o) & 1) + a2 | 0;
                b[c2 + 4 >> 2] = a2;
                if (o <= j & j < i * 2) {
                  d2 = d2 + 1 | 0;
                  b[c2 >> 2] = d2;
                  break;
                } else {
                  b[c2 >> 2] = d2;
                  break;
                }
              }
            } else {
              if (!(i < 0.6666666666666666)) {
                d2 = d2 + 1 | 0;
                b[c2 >> 2] = d2;
                if (j < i * 0.5) {
                  b[c2 + 4 >> 2] = a2;
                  break;
                } else {
                  a2 = a2 + 1 | 0;
                  b[c2 + 4 >> 2] = a2;
                  break;
                }
              }
              if (j < 1 - i) {
                b[c2 + 4 >> 2] = a2;
                if (i * 2 + -1 < j) {
                  b[c2 >> 2] = d2;
                  break;
                }
              } else {
                a2 = a2 + 1 | 0;
                b[c2 + 4 >> 2] = a2;
              }
              d2 = d2 + 1 | 0;
              b[c2 >> 2] = d2;
            }
          } while (0);
          do {
            if (k < 0) {
              if (!(a2 & 1)) {
                m = (a2 | 0) / 2 | 0;
                m = Hd(d2 | 0, ((d2 | 0) < 0) << 31 >> 31 | 0, m | 0, ((m | 0) < 0) << 31 >> 31 | 0) | 0;
                d2 = ~~(+(d2 | 0) - (+(m >>> 0) + 4294967296 * +(H() | 0)) * 2);
                b[c2 >> 2] = d2;
                break;
              } else {
                m = (a2 + 1 | 0) / 2 | 0;
                m = Hd(d2 | 0, ((d2 | 0) < 0) << 31 >> 31 | 0, m | 0, ((m | 0) < 0) << 31 >> 31 | 0) | 0;
                d2 = ~~(+(d2 | 0) - ((+(m >>> 0) + 4294967296 * +(H() | 0)) * 2 + 1));
                b[c2 >> 2] = d2;
                break;
              }
            }
          } while (0);
          m = c2 + 4 | 0;
          if (l < 0) {
            d2 = d2 - ((a2 << 1 | 1 | 0) / 2 | 0) | 0;
            b[c2 >> 2] = d2;
            a2 = 0 - a2 | 0;
            b[m >> 2] = a2;
          }
          f2 = a2 - d2 | 0;
          if ((d2 | 0) < 0) {
            g2 = 0 - d2 | 0;
            b[m >> 2] = f2;
            b[n >> 2] = g2;
            b[c2 >> 2] = 0;
            a2 = f2;
            d2 = 0;
          } else {
            g2 = 0;
          }
          if ((a2 | 0) < 0) {
            d2 = d2 - a2 | 0;
            b[c2 >> 2] = d2;
            g2 = g2 - a2 | 0;
            b[n >> 2] = g2;
            b[m >> 2] = 0;
            a2 = 0;
          }
          h = d2 - g2 | 0;
          f2 = a2 - g2 | 0;
          if ((g2 | 0) < 0) {
            b[c2 >> 2] = h;
            b[m >> 2] = f2;
            b[n >> 2] = 0;
            a2 = f2;
            d2 = h;
            g2 = 0;
          }
          f2 = (a2 | 0) < (d2 | 0) ? a2 : d2;
          f2 = (g2 | 0) < (f2 | 0) ? g2 : f2;
          if ((f2 | 0) <= 0) {
            return;
          }
          b[c2 >> 2] = d2 - f2;
          b[m >> 2] = a2 - f2;
          b[n >> 2] = g2 - f2;
          return;
        }
        function Ma(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0;
          c2 = b[a2 >> 2] | 0;
          h = a2 + 4 | 0;
          d2 = b[h >> 2] | 0;
          if ((c2 | 0) < 0) {
            d2 = d2 - c2 | 0;
            b[h >> 2] = d2;
            g2 = a2 + 8 | 0;
            b[g2 >> 2] = (b[g2 >> 2] | 0) - c2;
            b[a2 >> 2] = 0;
            c2 = 0;
          }
          if ((d2 | 0) < 0) {
            c2 = c2 - d2 | 0;
            b[a2 >> 2] = c2;
            g2 = a2 + 8 | 0;
            f2 = (b[g2 >> 2] | 0) - d2 | 0;
            b[g2 >> 2] = f2;
            b[h >> 2] = 0;
            d2 = 0;
          } else {
            f2 = a2 + 8 | 0;
            g2 = f2;
            f2 = b[f2 >> 2] | 0;
          }
          if ((f2 | 0) < 0) {
            c2 = c2 - f2 | 0;
            b[a2 >> 2] = c2;
            d2 = d2 - f2 | 0;
            b[h >> 2] = d2;
            b[g2 >> 2] = 0;
            f2 = 0;
          }
          e2 = (d2 | 0) < (c2 | 0) ? d2 : c2;
          e2 = (f2 | 0) < (e2 | 0) ? f2 : e2;
          if ((e2 | 0) <= 0) {
            return;
          }
          b[a2 >> 2] = c2 - e2;
          b[h >> 2] = d2 - e2;
          b[g2 >> 2] = f2 - e2;
          return;
        }
        function Na(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          var d2 = 0, f2 = 0;
          f2 = b[a2 + 8 >> 2] | 0;
          d2 = +((b[a2 + 4 >> 2] | 0) - f2 | 0);
          e[c2 >> 3] = +((b[a2 >> 2] | 0) - f2 | 0) - d2 * 0.5;
          e[c2 + 8 >> 3] = d2 * 0.8660254037844386;
          return;
        }
        function Oa(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          b[d2 >> 2] = (b[c2 >> 2] | 0) + (b[a2 >> 2] | 0);
          b[d2 + 4 >> 2] = (b[c2 + 4 >> 2] | 0) + (b[a2 + 4 >> 2] | 0);
          b[d2 + 8 >> 2] = (b[c2 + 8 >> 2] | 0) + (b[a2 + 8 >> 2] | 0);
          return;
        }
        function Pa(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          b[d2 >> 2] = (b[a2 >> 2] | 0) - (b[c2 >> 2] | 0);
          b[d2 + 4 >> 2] = (b[a2 + 4 >> 2] | 0) - (b[c2 + 4 >> 2] | 0);
          b[d2 + 8 >> 2] = (b[a2 + 8 >> 2] | 0) - (b[c2 + 8 >> 2] | 0);
          return;
        }
        function Qa(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          var d2 = 0, e2 = 0;
          d2 = B3(b[a2 >> 2] | 0, c2) | 0;
          b[a2 >> 2] = d2;
          d2 = a2 + 4 | 0;
          e2 = B3(b[d2 >> 2] | 0, c2) | 0;
          b[d2 >> 2] = e2;
          a2 = a2 + 8 | 0;
          c2 = B3(b[a2 >> 2] | 0, c2) | 0;
          b[a2 >> 2] = c2;
          return;
        }
        function Ra(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
          h = b[a2 >> 2] | 0;
          i = (h | 0) < 0;
          e2 = (b[a2 + 4 >> 2] | 0) - (i ? h : 0) | 0;
          g2 = (e2 | 0) < 0;
          f2 = (g2 ? 0 - e2 | 0 : 0) + ((b[a2 + 8 >> 2] | 0) - (i ? h : 0)) | 0;
          d2 = (f2 | 0) < 0;
          a2 = d2 ? 0 : f2;
          c2 = (g2 ? 0 : e2) - (d2 ? f2 : 0) | 0;
          f2 = (i ? 0 : h) - (g2 ? e2 : 0) - (d2 ? f2 : 0) | 0;
          d2 = (c2 | 0) < (f2 | 0) ? c2 : f2;
          d2 = (a2 | 0) < (d2 | 0) ? a2 : d2;
          e2 = (d2 | 0) > 0;
          a2 = a2 - (e2 ? d2 : 0) | 0;
          c2 = c2 - (e2 ? d2 : 0) | 0;
          a: do {
            switch (f2 - (e2 ? d2 : 0) | 0) {
              case 0:
                switch (c2 | 0) {
                  case 0: {
                    i = (a2 | 0) == 0 ? 0 : (a2 | 0) == 1 ? 1 : 7;
                    return i | 0;
                  }
                  case 1: {
                    i = (a2 | 0) == 0 ? 2 : (a2 | 0) == 1 ? 3 : 7;
                    return i | 0;
                  }
                  default:
                    break a;
                }
              case 1:
                switch (c2 | 0) {
                  case 0: {
                    i = (a2 | 0) == 0 ? 4 : (a2 | 0) == 1 ? 5 : 7;
                    return i | 0;
                  }
                  case 1: {
                    if (!a2) {
                      a2 = 6;
                    } else {
                      break a;
                    }
                    return a2 | 0;
                  }
                  default:
                    break a;
                }
              default:
            }
          } while (0);
          i = 7;
          return i | 0;
        }
        function Sa(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0;
          j = a2 + 8 | 0;
          h = b[j >> 2] | 0;
          i = (b[a2 >> 2] | 0) - h | 0;
          k = a2 + 4 | 0;
          h = (b[k >> 2] | 0) - h | 0;
          if (i >>> 0 > 715827881 | h >>> 0 > 715827881) {
            e2 = (i | 0) > 0;
            f2 = 2147483647 - i | 0;
            g2 = -2147483648 - i | 0;
            if (e2 ? (f2 | 0) < (i | 0) : (g2 | 0) > (i | 0)) {
              k = 1;
              return k | 0;
            }
            d2 = i << 1;
            if (e2 ? (2147483647 - d2 | 0) < (i | 0) : (-2147483648 - d2 | 0) > (i | 0)) {
              k = 1;
              return k | 0;
            }
            if ((h | 0) > 0 ? (2147483647 - h | 0) < (h | 0) : (-2147483648 - h | 0) > (h | 0)) {
              k = 1;
              return k | 0;
            }
            c2 = i * 3 | 0;
            d2 = h << 1;
            if ((e2 ? (f2 | 0) < (d2 | 0) : (g2 | 0) > (d2 | 0)) ? 1 : (i | 0) > -1 ? (c2 | -2147483648 | 0) >= (h | 0) : (c2 ^ -2147483648 | 0) < (h | 0)) {
              k = 1;
              return k | 0;
            }
          } else {
            d2 = h << 1;
            c2 = i * 3 | 0;
          }
          e2 = Cd(+(c2 - h | 0) * 0.14285714285714285) | 0;
          b[a2 >> 2] = e2;
          f2 = Cd(+(d2 + i | 0) * 0.14285714285714285) | 0;
          b[k >> 2] = f2;
          b[j >> 2] = 0;
          d2 = (f2 | 0) < (e2 | 0);
          c2 = d2 ? e2 : f2;
          d2 = d2 ? f2 : e2;
          if ((d2 | 0) < 0) {
            if ((d2 | 0) == -2147483648 ? 1 : (c2 | 0) > 0 ? (2147483647 - c2 | 0) < (d2 | 0) : (-2147483648 - c2 | 0) > (d2 | 0)) {
              I(27795, 26892, 354, 26903);
            }
            if ((c2 | 0) > -1 ? (c2 | -2147483648 | 0) >= (d2 | 0) : (c2 ^ -2147483648 | 0) < (d2 | 0)) {
              I(27795, 26892, 354, 26903);
            }
          }
          c2 = f2 - e2 | 0;
          if ((e2 | 0) < 0) {
            d2 = 0 - e2 | 0;
            b[k >> 2] = c2;
            b[j >> 2] = d2;
            b[a2 >> 2] = 0;
            e2 = 0;
          } else {
            c2 = f2;
            d2 = 0;
          }
          if ((c2 | 0) < 0) {
            e2 = e2 - c2 | 0;
            b[a2 >> 2] = e2;
            d2 = d2 - c2 | 0;
            b[j >> 2] = d2;
            b[k >> 2] = 0;
            c2 = 0;
          }
          g2 = e2 - d2 | 0;
          f2 = c2 - d2 | 0;
          if ((d2 | 0) < 0) {
            b[a2 >> 2] = g2;
            b[k >> 2] = f2;
            b[j >> 2] = 0;
            c2 = f2;
            f2 = g2;
            d2 = 0;
          } else {
            f2 = e2;
          }
          e2 = (c2 | 0) < (f2 | 0) ? c2 : f2;
          e2 = (d2 | 0) < (e2 | 0) ? d2 : e2;
          if ((e2 | 0) <= 0) {
            k = 0;
            return k | 0;
          }
          b[a2 >> 2] = f2 - e2;
          b[k >> 2] = c2 - e2;
          b[j >> 2] = d2 - e2;
          k = 0;
          return k | 0;
        }
        function Ta(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0;
          h = a2 + 8 | 0;
          f2 = b[h >> 2] | 0;
          g2 = (b[a2 >> 2] | 0) - f2 | 0;
          i = a2 + 4 | 0;
          f2 = (b[i >> 2] | 0) - f2 | 0;
          if (g2 >>> 0 > 715827881 | f2 >>> 0 > 715827881) {
            d2 = (g2 | 0) > 0;
            if (d2 ? (2147483647 - g2 | 0) < (g2 | 0) : (-2147483648 - g2 | 0) > (g2 | 0)) {
              i = 1;
              return i | 0;
            }
            c2 = g2 << 1;
            e2 = (f2 | 0) > 0;
            if (e2 ? (2147483647 - f2 | 0) < (f2 | 0) : (-2147483648 - f2 | 0) > (f2 | 0)) {
              i = 1;
              return i | 0;
            }
            j = f2 << 1;
            if (e2 ? (2147483647 - j | 0) < (f2 | 0) : (-2147483648 - j | 0) > (f2 | 0)) {
              j = 1;
              return j | 0;
            }
            if (d2 ? (2147483647 - c2 | 0) < (f2 | 0) : (-2147483648 - c2 | 0) > (f2 | 0)) {
              j = 1;
              return j | 0;
            }
            d2 = f2 * 3 | 0;
            if ((f2 | 0) > -1 ? (d2 | -2147483648 | 0) >= (g2 | 0) : (d2 ^ -2147483648 | 0) < (g2 | 0)) {
              j = 1;
              return j | 0;
            }
          } else {
            d2 = f2 * 3 | 0;
            c2 = g2 << 1;
          }
          e2 = Cd(+(c2 + f2 | 0) * 0.14285714285714285) | 0;
          b[a2 >> 2] = e2;
          f2 = Cd(+(d2 - g2 | 0) * 0.14285714285714285) | 0;
          b[i >> 2] = f2;
          b[h >> 2] = 0;
          d2 = (f2 | 0) < (e2 | 0);
          c2 = d2 ? e2 : f2;
          d2 = d2 ? f2 : e2;
          if ((d2 | 0) < 0) {
            if ((d2 | 0) == -2147483648 ? 1 : (c2 | 0) > 0 ? (2147483647 - c2 | 0) < (d2 | 0) : (-2147483648 - c2 | 0) > (d2 | 0)) {
              I(27795, 26892, 402, 26917);
            }
            if ((c2 | 0) > -1 ? (c2 | -2147483648 | 0) >= (d2 | 0) : (c2 ^ -2147483648 | 0) < (d2 | 0)) {
              I(27795, 26892, 402, 26917);
            }
          }
          c2 = f2 - e2 | 0;
          if ((e2 | 0) < 0) {
            d2 = 0 - e2 | 0;
            b[i >> 2] = c2;
            b[h >> 2] = d2;
            b[a2 >> 2] = 0;
            e2 = 0;
          } else {
            c2 = f2;
            d2 = 0;
          }
          if ((c2 | 0) < 0) {
            e2 = e2 - c2 | 0;
            b[a2 >> 2] = e2;
            d2 = d2 - c2 | 0;
            b[h >> 2] = d2;
            b[i >> 2] = 0;
            c2 = 0;
          }
          g2 = e2 - d2 | 0;
          f2 = c2 - d2 | 0;
          if ((d2 | 0) < 0) {
            b[a2 >> 2] = g2;
            b[i >> 2] = f2;
            b[h >> 2] = 0;
            c2 = f2;
            f2 = g2;
            d2 = 0;
          } else {
            f2 = e2;
          }
          e2 = (c2 | 0) < (f2 | 0) ? c2 : f2;
          e2 = (d2 | 0) < (e2 | 0) ? d2 : e2;
          if ((e2 | 0) <= 0) {
            j = 0;
            return j | 0;
          }
          b[a2 >> 2] = f2 - e2;
          b[i >> 2] = c2 - e2;
          b[h >> 2] = d2 - e2;
          j = 0;
          return j | 0;
        }
        function Ua(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
          h = a2 + 8 | 0;
          d2 = b[h >> 2] | 0;
          c2 = (b[a2 >> 2] | 0) - d2 | 0;
          i = a2 + 4 | 0;
          d2 = (b[i >> 2] | 0) - d2 | 0;
          e2 = Cd(+((c2 * 3 | 0) - d2 | 0) * 0.14285714285714285) | 0;
          b[a2 >> 2] = e2;
          c2 = Cd(+((d2 << 1) + c2 | 0) * 0.14285714285714285) | 0;
          b[i >> 2] = c2;
          b[h >> 2] = 0;
          d2 = c2 - e2 | 0;
          if ((e2 | 0) < 0) {
            g2 = 0 - e2 | 0;
            b[i >> 2] = d2;
            b[h >> 2] = g2;
            b[a2 >> 2] = 0;
            c2 = d2;
            e2 = 0;
            d2 = g2;
          } else {
            d2 = 0;
          }
          if ((c2 | 0) < 0) {
            e2 = e2 - c2 | 0;
            b[a2 >> 2] = e2;
            d2 = d2 - c2 | 0;
            b[h >> 2] = d2;
            b[i >> 2] = 0;
            c2 = 0;
          }
          g2 = e2 - d2 | 0;
          f2 = c2 - d2 | 0;
          if ((d2 | 0) < 0) {
            b[a2 >> 2] = g2;
            b[i >> 2] = f2;
            b[h >> 2] = 0;
            c2 = f2;
            f2 = g2;
            d2 = 0;
          } else {
            f2 = e2;
          }
          e2 = (c2 | 0) < (f2 | 0) ? c2 : f2;
          e2 = (d2 | 0) < (e2 | 0) ? d2 : e2;
          if ((e2 | 0) <= 0) {
            return;
          }
          b[a2 >> 2] = f2 - e2;
          b[i >> 2] = c2 - e2;
          b[h >> 2] = d2 - e2;
          return;
        }
        function Va(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
          h = a2 + 8 | 0;
          d2 = b[h >> 2] | 0;
          c2 = (b[a2 >> 2] | 0) - d2 | 0;
          i = a2 + 4 | 0;
          d2 = (b[i >> 2] | 0) - d2 | 0;
          e2 = Cd(+((c2 << 1) + d2 | 0) * 0.14285714285714285) | 0;
          b[a2 >> 2] = e2;
          c2 = Cd(+((d2 * 3 | 0) - c2 | 0) * 0.14285714285714285) | 0;
          b[i >> 2] = c2;
          b[h >> 2] = 0;
          d2 = c2 - e2 | 0;
          if ((e2 | 0) < 0) {
            g2 = 0 - e2 | 0;
            b[i >> 2] = d2;
            b[h >> 2] = g2;
            b[a2 >> 2] = 0;
            c2 = d2;
            e2 = 0;
            d2 = g2;
          } else {
            d2 = 0;
          }
          if ((c2 | 0) < 0) {
            e2 = e2 - c2 | 0;
            b[a2 >> 2] = e2;
            d2 = d2 - c2 | 0;
            b[h >> 2] = d2;
            b[i >> 2] = 0;
            c2 = 0;
          }
          g2 = e2 - d2 | 0;
          f2 = c2 - d2 | 0;
          if ((d2 | 0) < 0) {
            b[a2 >> 2] = g2;
            b[i >> 2] = f2;
            b[h >> 2] = 0;
            c2 = f2;
            f2 = g2;
            d2 = 0;
          } else {
            f2 = e2;
          }
          e2 = (c2 | 0) < (f2 | 0) ? c2 : f2;
          e2 = (d2 | 0) < (e2 | 0) ? d2 : e2;
          if ((e2 | 0) <= 0) {
            return;
          }
          b[a2 >> 2] = f2 - e2;
          b[i >> 2] = c2 - e2;
          b[h >> 2] = d2 - e2;
          return;
        }
        function Wa(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
          c2 = b[a2 >> 2] | 0;
          h = a2 + 4 | 0;
          d2 = b[h >> 2] | 0;
          i = a2 + 8 | 0;
          e2 = b[i >> 2] | 0;
          f2 = d2 + (c2 * 3 | 0) | 0;
          b[a2 >> 2] = f2;
          d2 = e2 + (d2 * 3 | 0) | 0;
          b[h >> 2] = d2;
          c2 = (e2 * 3 | 0) + c2 | 0;
          b[i >> 2] = c2;
          e2 = d2 - f2 | 0;
          if ((f2 | 0) < 0) {
            c2 = c2 - f2 | 0;
            b[h >> 2] = e2;
            b[i >> 2] = c2;
            b[a2 >> 2] = 0;
            d2 = e2;
            e2 = 0;
          } else {
            e2 = f2;
          }
          if ((d2 | 0) < 0) {
            e2 = e2 - d2 | 0;
            b[a2 >> 2] = e2;
            c2 = c2 - d2 | 0;
            b[i >> 2] = c2;
            b[h >> 2] = 0;
            d2 = 0;
          }
          g2 = e2 - c2 | 0;
          f2 = d2 - c2 | 0;
          if ((c2 | 0) < 0) {
            b[a2 >> 2] = g2;
            b[h >> 2] = f2;
            b[i >> 2] = 0;
            e2 = g2;
            c2 = 0;
          } else {
            f2 = d2;
          }
          d2 = (f2 | 0) < (e2 | 0) ? f2 : e2;
          d2 = (c2 | 0) < (d2 | 0) ? c2 : d2;
          if ((d2 | 0) <= 0) {
            return;
          }
          b[a2 >> 2] = e2 - d2;
          b[h >> 2] = f2 - d2;
          b[i >> 2] = c2 - d2;
          return;
        }
        function Xa(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
          f2 = b[a2 >> 2] | 0;
          h = a2 + 4 | 0;
          c2 = b[h >> 2] | 0;
          i = a2 + 8 | 0;
          d2 = b[i >> 2] | 0;
          e2 = (c2 * 3 | 0) + f2 | 0;
          f2 = d2 + (f2 * 3 | 0) | 0;
          b[a2 >> 2] = f2;
          b[h >> 2] = e2;
          c2 = (d2 * 3 | 0) + c2 | 0;
          b[i >> 2] = c2;
          d2 = e2 - f2 | 0;
          if ((f2 | 0) < 0) {
            c2 = c2 - f2 | 0;
            b[h >> 2] = d2;
            b[i >> 2] = c2;
            b[a2 >> 2] = 0;
            f2 = 0;
          } else {
            d2 = e2;
          }
          if ((d2 | 0) < 0) {
            f2 = f2 - d2 | 0;
            b[a2 >> 2] = f2;
            c2 = c2 - d2 | 0;
            b[i >> 2] = c2;
            b[h >> 2] = 0;
            d2 = 0;
          }
          g2 = f2 - c2 | 0;
          e2 = d2 - c2 | 0;
          if ((c2 | 0) < 0) {
            b[a2 >> 2] = g2;
            b[h >> 2] = e2;
            b[i >> 2] = 0;
            f2 = g2;
            c2 = 0;
          } else {
            e2 = d2;
          }
          d2 = (e2 | 0) < (f2 | 0) ? e2 : f2;
          d2 = (c2 | 0) < (d2 | 0) ? c2 : d2;
          if ((d2 | 0) <= 0) {
            return;
          }
          b[a2 >> 2] = f2 - d2;
          b[h >> 2] = e2 - d2;
          b[i >> 2] = c2 - d2;
          return;
        }
        function Ya(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
          if ((c2 + -1 | 0) >>> 0 >= 6) {
            return;
          }
          f2 = (b[15440 + (c2 * 12 | 0) >> 2] | 0) + (b[a2 >> 2] | 0) | 0;
          b[a2 >> 2] = f2;
          i = a2 + 4 | 0;
          e2 = (b[15440 + (c2 * 12 | 0) + 4 >> 2] | 0) + (b[i >> 2] | 0) | 0;
          b[i >> 2] = e2;
          h = a2 + 8 | 0;
          c2 = (b[15440 + (c2 * 12 | 0) + 8 >> 2] | 0) + (b[h >> 2] | 0) | 0;
          b[h >> 2] = c2;
          d2 = e2 - f2 | 0;
          if ((f2 | 0) < 0) {
            c2 = c2 - f2 | 0;
            b[i >> 2] = d2;
            b[h >> 2] = c2;
            b[a2 >> 2] = 0;
            e2 = 0;
          } else {
            d2 = e2;
            e2 = f2;
          }
          if ((d2 | 0) < 0) {
            e2 = e2 - d2 | 0;
            b[a2 >> 2] = e2;
            c2 = c2 - d2 | 0;
            b[h >> 2] = c2;
            b[i >> 2] = 0;
            d2 = 0;
          }
          g2 = e2 - c2 | 0;
          f2 = d2 - c2 | 0;
          if ((c2 | 0) < 0) {
            b[a2 >> 2] = g2;
            b[i >> 2] = f2;
            b[h >> 2] = 0;
            e2 = g2;
            c2 = 0;
          } else {
            f2 = d2;
          }
          d2 = (f2 | 0) < (e2 | 0) ? f2 : e2;
          d2 = (c2 | 0) < (d2 | 0) ? c2 : d2;
          if ((d2 | 0) <= 0) {
            return;
          }
          b[a2 >> 2] = e2 - d2;
          b[i >> 2] = f2 - d2;
          b[h >> 2] = c2 - d2;
          return;
        }
        function Za(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
          f2 = b[a2 >> 2] | 0;
          h = a2 + 4 | 0;
          c2 = b[h >> 2] | 0;
          i = a2 + 8 | 0;
          d2 = b[i >> 2] | 0;
          e2 = c2 + f2 | 0;
          f2 = d2 + f2 | 0;
          b[a2 >> 2] = f2;
          b[h >> 2] = e2;
          c2 = d2 + c2 | 0;
          b[i >> 2] = c2;
          d2 = e2 - f2 | 0;
          if ((f2 | 0) < 0) {
            c2 = c2 - f2 | 0;
            b[h >> 2] = d2;
            b[i >> 2] = c2;
            b[a2 >> 2] = 0;
            e2 = 0;
          } else {
            d2 = e2;
            e2 = f2;
          }
          if ((d2 | 0) < 0) {
            e2 = e2 - d2 | 0;
            b[a2 >> 2] = e2;
            c2 = c2 - d2 | 0;
            b[i >> 2] = c2;
            b[h >> 2] = 0;
            d2 = 0;
          }
          g2 = e2 - c2 | 0;
          f2 = d2 - c2 | 0;
          if ((c2 | 0) < 0) {
            b[a2 >> 2] = g2;
            b[h >> 2] = f2;
            b[i >> 2] = 0;
            e2 = g2;
            c2 = 0;
          } else {
            f2 = d2;
          }
          d2 = (f2 | 0) < (e2 | 0) ? f2 : e2;
          d2 = (c2 | 0) < (d2 | 0) ? c2 : d2;
          if ((d2 | 0) <= 0) {
            return;
          }
          b[a2 >> 2] = e2 - d2;
          b[h >> 2] = f2 - d2;
          b[i >> 2] = c2 - d2;
          return;
        }
        function _a2(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
          c2 = b[a2 >> 2] | 0;
          h = a2 + 4 | 0;
          e2 = b[h >> 2] | 0;
          i = a2 + 8 | 0;
          d2 = b[i >> 2] | 0;
          f2 = e2 + c2 | 0;
          b[a2 >> 2] = f2;
          e2 = d2 + e2 | 0;
          b[h >> 2] = e2;
          c2 = d2 + c2 | 0;
          b[i >> 2] = c2;
          d2 = e2 - f2 | 0;
          if ((f2 | 0) < 0) {
            c2 = c2 - f2 | 0;
            b[h >> 2] = d2;
            b[i >> 2] = c2;
            b[a2 >> 2] = 0;
            e2 = 0;
          } else {
            d2 = e2;
            e2 = f2;
          }
          if ((d2 | 0) < 0) {
            e2 = e2 - d2 | 0;
            b[a2 >> 2] = e2;
            c2 = c2 - d2 | 0;
            b[i >> 2] = c2;
            b[h >> 2] = 0;
            d2 = 0;
          }
          g2 = e2 - c2 | 0;
          f2 = d2 - c2 | 0;
          if ((c2 | 0) < 0) {
            b[a2 >> 2] = g2;
            b[h >> 2] = f2;
            b[i >> 2] = 0;
            e2 = g2;
            c2 = 0;
          } else {
            f2 = d2;
          }
          d2 = (f2 | 0) < (e2 | 0) ? f2 : e2;
          d2 = (c2 | 0) < (d2 | 0) ? c2 : d2;
          if ((d2 | 0) <= 0) {
            return;
          }
          b[a2 >> 2] = e2 - d2;
          b[h >> 2] = f2 - d2;
          b[i >> 2] = c2 - d2;
          return;
        }
        function $a(a2) {
          a2 = a2 | 0;
          switch (a2 | 0) {
            case 1: {
              a2 = 5;
              break;
            }
            case 5: {
              a2 = 4;
              break;
            }
            case 4: {
              a2 = 6;
              break;
            }
            case 6: {
              a2 = 2;
              break;
            }
            case 2: {
              a2 = 3;
              break;
            }
            case 3: {
              a2 = 1;
              break;
            }
            default:
          }
          return a2 | 0;
        }
        function ab4(a2) {
          a2 = a2 | 0;
          switch (a2 | 0) {
            case 1: {
              a2 = 3;
              break;
            }
            case 3: {
              a2 = 2;
              break;
            }
            case 2: {
              a2 = 6;
              break;
            }
            case 6: {
              a2 = 4;
              break;
            }
            case 4: {
              a2 = 5;
              break;
            }
            case 5: {
              a2 = 1;
              break;
            }
            default:
          }
          return a2 | 0;
        }
        function bb2(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
          c2 = b[a2 >> 2] | 0;
          h = a2 + 4 | 0;
          d2 = b[h >> 2] | 0;
          i = a2 + 8 | 0;
          e2 = b[i >> 2] | 0;
          f2 = d2 + (c2 << 1) | 0;
          b[a2 >> 2] = f2;
          d2 = e2 + (d2 << 1) | 0;
          b[h >> 2] = d2;
          c2 = (e2 << 1) + c2 | 0;
          b[i >> 2] = c2;
          e2 = d2 - f2 | 0;
          if ((f2 | 0) < 0) {
            c2 = c2 - f2 | 0;
            b[h >> 2] = e2;
            b[i >> 2] = c2;
            b[a2 >> 2] = 0;
            d2 = e2;
            e2 = 0;
          } else {
            e2 = f2;
          }
          if ((d2 | 0) < 0) {
            e2 = e2 - d2 | 0;
            b[a2 >> 2] = e2;
            c2 = c2 - d2 | 0;
            b[i >> 2] = c2;
            b[h >> 2] = 0;
            d2 = 0;
          }
          g2 = e2 - c2 | 0;
          f2 = d2 - c2 | 0;
          if ((c2 | 0) < 0) {
            b[a2 >> 2] = g2;
            b[h >> 2] = f2;
            b[i >> 2] = 0;
            e2 = g2;
            c2 = 0;
          } else {
            f2 = d2;
          }
          d2 = (f2 | 0) < (e2 | 0) ? f2 : e2;
          d2 = (c2 | 0) < (d2 | 0) ? c2 : d2;
          if ((d2 | 0) <= 0) {
            return;
          }
          b[a2 >> 2] = e2 - d2;
          b[h >> 2] = f2 - d2;
          b[i >> 2] = c2 - d2;
          return;
        }
        function cb(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
          f2 = b[a2 >> 2] | 0;
          h = a2 + 4 | 0;
          c2 = b[h >> 2] | 0;
          i = a2 + 8 | 0;
          d2 = b[i >> 2] | 0;
          e2 = (c2 << 1) + f2 | 0;
          f2 = d2 + (f2 << 1) | 0;
          b[a2 >> 2] = f2;
          b[h >> 2] = e2;
          c2 = (d2 << 1) + c2 | 0;
          b[i >> 2] = c2;
          d2 = e2 - f2 | 0;
          if ((f2 | 0) < 0) {
            c2 = c2 - f2 | 0;
            b[h >> 2] = d2;
            b[i >> 2] = c2;
            b[a2 >> 2] = 0;
            f2 = 0;
          } else {
            d2 = e2;
          }
          if ((d2 | 0) < 0) {
            f2 = f2 - d2 | 0;
            b[a2 >> 2] = f2;
            c2 = c2 - d2 | 0;
            b[i >> 2] = c2;
            b[h >> 2] = 0;
            d2 = 0;
          }
          g2 = f2 - c2 | 0;
          e2 = d2 - c2 | 0;
          if ((c2 | 0) < 0) {
            b[a2 >> 2] = g2;
            b[h >> 2] = e2;
            b[i >> 2] = 0;
            f2 = g2;
            c2 = 0;
          } else {
            e2 = d2;
          }
          d2 = (e2 | 0) < (f2 | 0) ? e2 : f2;
          d2 = (c2 | 0) < (d2 | 0) ? c2 : d2;
          if ((d2 | 0) <= 0) {
            return;
          }
          b[a2 >> 2] = f2 - d2;
          b[h >> 2] = e2 - d2;
          b[i >> 2] = c2 - d2;
          return;
        }
        function db(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
          h = (b[a2 >> 2] | 0) - (b[c2 >> 2] | 0) | 0;
          i = (h | 0) < 0;
          e2 = (b[a2 + 4 >> 2] | 0) - (b[c2 + 4 >> 2] | 0) - (i ? h : 0) | 0;
          g2 = (e2 | 0) < 0;
          f2 = (i ? 0 - h | 0 : 0) + (b[a2 + 8 >> 2] | 0) - (b[c2 + 8 >> 2] | 0) + (g2 ? 0 - e2 | 0 : 0) | 0;
          a2 = (f2 | 0) < 0;
          c2 = a2 ? 0 : f2;
          d2 = (g2 ? 0 : e2) - (a2 ? f2 : 0) | 0;
          f2 = (i ? 0 : h) - (g2 ? e2 : 0) - (a2 ? f2 : 0) | 0;
          a2 = (d2 | 0) < (f2 | 0) ? d2 : f2;
          a2 = (c2 | 0) < (a2 | 0) ? c2 : a2;
          e2 = (a2 | 0) > 0;
          c2 = c2 - (e2 ? a2 : 0) | 0;
          d2 = d2 - (e2 ? a2 : 0) | 0;
          a2 = f2 - (e2 ? a2 : 0) | 0;
          a2 = (a2 | 0) > -1 ? a2 : 0 - a2 | 0;
          d2 = (d2 | 0) > -1 ? d2 : 0 - d2 | 0;
          c2 = (c2 | 0) > -1 ? c2 : 0 - c2 | 0;
          c2 = (d2 | 0) > (c2 | 0) ? d2 : c2;
          return ((a2 | 0) > (c2 | 0) ? a2 : c2) | 0;
        }
        function eb2(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          var d2 = 0;
          d2 = b[a2 + 8 >> 2] | 0;
          b[c2 >> 2] = (b[a2 >> 2] | 0) - d2;
          b[c2 + 4 >> 2] = (b[a2 + 4 >> 2] | 0) - d2;
          return;
        }
        function fb(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
          e2 = b[a2 >> 2] | 0;
          b[c2 >> 2] = e2;
          f2 = b[a2 + 4 >> 2] | 0;
          h = c2 + 4 | 0;
          b[h >> 2] = f2;
          i = c2 + 8 | 0;
          b[i >> 2] = 0;
          d2 = (f2 | 0) < (e2 | 0);
          a2 = d2 ? e2 : f2;
          d2 = d2 ? f2 : e2;
          if ((d2 | 0) < 0) {
            if ((d2 | 0) == -2147483648 ? 1 : (a2 | 0) > 0 ? (2147483647 - a2 | 0) < (d2 | 0) : (-2147483648 - a2 | 0) > (d2 | 0)) {
              c2 = 1;
              return c2 | 0;
            }
            if ((a2 | 0) > -1 ? (a2 | -2147483648 | 0) >= (d2 | 0) : (a2 ^ -2147483648 | 0) < (d2 | 0)) {
              c2 = 1;
              return c2 | 0;
            }
          }
          a2 = f2 - e2 | 0;
          if ((e2 | 0) < 0) {
            d2 = 0 - e2 | 0;
            b[h >> 2] = a2;
            b[i >> 2] = d2;
            b[c2 >> 2] = 0;
            e2 = 0;
          } else {
            a2 = f2;
            d2 = 0;
          }
          if ((a2 | 0) < 0) {
            e2 = e2 - a2 | 0;
            b[c2 >> 2] = e2;
            d2 = d2 - a2 | 0;
            b[i >> 2] = d2;
            b[h >> 2] = 0;
            a2 = 0;
          }
          g2 = e2 - d2 | 0;
          f2 = a2 - d2 | 0;
          if ((d2 | 0) < 0) {
            b[c2 >> 2] = g2;
            b[h >> 2] = f2;
            b[i >> 2] = 0;
            a2 = f2;
            f2 = g2;
            d2 = 0;
          } else {
            f2 = e2;
          }
          e2 = (a2 | 0) < (f2 | 0) ? a2 : f2;
          e2 = (d2 | 0) < (e2 | 0) ? d2 : e2;
          if ((e2 | 0) <= 0) {
            c2 = 0;
            return c2 | 0;
          }
          b[c2 >> 2] = f2 - e2;
          b[h >> 2] = a2 - e2;
          b[i >> 2] = d2 - e2;
          c2 = 0;
          return c2 | 0;
        }
        function gb(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0;
          c2 = a2 + 8 | 0;
          f2 = b[c2 >> 2] | 0;
          d2 = f2 - (b[a2 >> 2] | 0) | 0;
          b[a2 >> 2] = d2;
          e2 = a2 + 4 | 0;
          a2 = (b[e2 >> 2] | 0) - f2 | 0;
          b[e2 >> 2] = a2;
          b[c2 >> 2] = 0 - (a2 + d2);
          return;
        }
        function hb(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
          d2 = b[a2 >> 2] | 0;
          c2 = 0 - d2 | 0;
          b[a2 >> 2] = c2;
          h = a2 + 8 | 0;
          b[h >> 2] = 0;
          i = a2 + 4 | 0;
          e2 = b[i >> 2] | 0;
          f2 = e2 + d2 | 0;
          if ((d2 | 0) > 0) {
            b[i >> 2] = f2;
            b[h >> 2] = d2;
            b[a2 >> 2] = 0;
            c2 = 0;
            e2 = f2;
          } else {
            d2 = 0;
          }
          if ((e2 | 0) < 0) {
            g2 = c2 - e2 | 0;
            b[a2 >> 2] = g2;
            d2 = d2 - e2 | 0;
            b[h >> 2] = d2;
            b[i >> 2] = 0;
            f2 = g2 - d2 | 0;
            c2 = 0 - d2 | 0;
            if ((d2 | 0) < 0) {
              b[a2 >> 2] = f2;
              b[i >> 2] = c2;
              b[h >> 2] = 0;
              e2 = c2;
              d2 = 0;
            } else {
              e2 = 0;
              f2 = g2;
            }
          } else {
            f2 = c2;
          }
          c2 = (e2 | 0) < (f2 | 0) ? e2 : f2;
          c2 = (d2 | 0) < (c2 | 0) ? d2 : c2;
          if ((c2 | 0) <= 0) {
            return;
          }
          b[a2 >> 2] = f2 - c2;
          b[i >> 2] = e2 - c2;
          b[h >> 2] = d2 - c2;
          return;
        }
        function ib(a2, c2, d2, e2, f2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0;
          m = T;
          T = T + 64 | 0;
          l = m;
          i = m + 56 | 0;
          if (!(true & (c2 & 2013265920 | 0) == 134217728 & (true & (e2 & 2013265920 | 0) == 134217728))) {
            f2 = 5;
            T = m;
            return f2 | 0;
          }
          if ((a2 | 0) == (d2 | 0) & (c2 | 0) == (e2 | 0)) {
            b[f2 >> 2] = 0;
            f2 = 0;
            T = m;
            return f2 | 0;
          }
          h = Qd(a2 | 0, c2 | 0, 52) | 0;
          H() | 0;
          h = h & 15;
          k = Qd(d2 | 0, e2 | 0, 52) | 0;
          H() | 0;
          if ((h | 0) != (k & 15 | 0)) {
            f2 = 12;
            T = m;
            return f2 | 0;
          }
          g2 = h + -1 | 0;
          if (h >>> 0 > 1) {
            Fb(a2, c2, g2, l) | 0;
            Fb(d2, e2, g2, i) | 0;
            k = l;
            j = b[k >> 2] | 0;
            k = b[k + 4 >> 2] | 0;
            a: do {
              if ((j | 0) == (b[i >> 2] | 0) ? (k | 0) == (b[i + 4 >> 2] | 0) : 0) {
                h = (h ^ 15) * 3 | 0;
                g2 = Qd(a2 | 0, c2 | 0, h | 0) | 0;
                H() | 0;
                g2 = g2 & 7;
                h = Qd(d2 | 0, e2 | 0, h | 0) | 0;
                H() | 0;
                h = h & 7;
                do {
                  if (!((g2 | 0) == 0 | (h | 0) == 0)) {
                    if ((g2 | 0) == 7) {
                      g2 = 5;
                    } else {
                      if ((g2 | 0) == 1 | (h | 0) == 1 ? Hb(j, k) | 0 : 0) {
                        g2 = 5;
                        break;
                      }
                      if ((b[15536 + (g2 << 2) >> 2] | 0) != (h | 0) ? (b[15568 + (g2 << 2) >> 2] | 0) != (h | 0) : 0) {
                        break a;
                      }
                      b[f2 >> 2] = 1;
                      g2 = 0;
                    }
                  } else {
                    b[f2 >> 2] = 1;
                    g2 = 0;
                  }
                } while (0);
                f2 = g2;
                T = m;
                return f2 | 0;
              }
            } while (0);
          }
          g2 = l;
          h = g2 + 56 | 0;
          do {
            b[g2 >> 2] = 0;
            g2 = g2 + 4 | 0;
          } while ((g2 | 0) < (h | 0));
          aa2(a2, c2, 1, l) | 0;
          c2 = l;
          if (((((!((b[c2 >> 2] | 0) == (d2 | 0) ? (b[c2 + 4 >> 2] | 0) == (e2 | 0) : 0) ? (c2 = l + 8 | 0, !((b[c2 >> 2] | 0) == (d2 | 0) ? (b[c2 + 4 >> 2] | 0) == (e2 | 0) : 0)) : 0) ? (c2 = l + 16 | 0, !((b[c2 >> 2] | 0) == (d2 | 0) ? (b[c2 + 4 >> 2] | 0) == (e2 | 0) : 0)) : 0) ? (c2 = l + 24 | 0, !((b[c2 >> 2] | 0) == (d2 | 0) ? (b[c2 + 4 >> 2] | 0) == (e2 | 0) : 0)) : 0) ? (c2 = l + 32 | 0, !((b[c2 >> 2] | 0) == (d2 | 0) ? (b[c2 + 4 >> 2] | 0) == (e2 | 0) : 0)) : 0) ? (c2 = l + 40 | 0, !((b[c2 >> 2] | 0) == (d2 | 0) ? (b[c2 + 4 >> 2] | 0) == (e2 | 0) : 0)) : 0) {
            g2 = l + 48 | 0;
            g2 = ((b[g2 >> 2] | 0) == (d2 | 0) ? (b[g2 + 4 >> 2] | 0) == (e2 | 0) : 0) & 1;
          } else {
            g2 = 1;
          }
          b[f2 >> 2] = g2;
          f2 = 0;
          T = m;
          return f2 | 0;
        }
        function jb(a2, c2, d2, e2, f2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          d2 = ia(a2, c2, d2, e2) | 0;
          if ((d2 | 0) == 7) {
            f2 = 11;
            return f2 | 0;
          }
          e2 = Rd(d2 | 0, 0, 56) | 0;
          c2 = c2 & -2130706433 | (H() | 0) | 268435456;
          b[f2 >> 2] = a2 | e2;
          b[f2 + 4 >> 2] = c2;
          f2 = 0;
          return f2 | 0;
        }
        function kb(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          if (!(true & (c2 & 2013265920 | 0) == 268435456)) {
            d2 = 6;
            return d2 | 0;
          }
          b[d2 >> 2] = a2;
          b[d2 + 4 >> 2] = c2 & -2130706433 | 134217728;
          d2 = 0;
          return d2 | 0;
        }
        function lb(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0;
          f2 = T;
          T = T + 16 | 0;
          e2 = f2;
          b[e2 >> 2] = 0;
          if (!(true & (c2 & 2013265920 | 0) == 268435456)) {
            e2 = 6;
            T = f2;
            return e2 | 0;
          }
          g2 = Qd(a2 | 0, c2 | 0, 56) | 0;
          H() | 0;
          e2 = ea2(a2, c2 & -2130706433 | 134217728, g2 & 7, e2, d2) | 0;
          T = f2;
          return e2 | 0;
        }
        function mb(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0;
          c2 = Qd(a2 | 0, b2 | 0, 56) | 0;
          H() | 0;
          switch (c2 & 7) {
            case 0:
            case 7: {
              c2 = 0;
              return c2 | 0;
            }
            default:
          }
          c2 = b2 & -2130706433 | 134217728;
          if (!(true & (b2 & 2013265920 | 0) == 268435456)) {
            c2 = 0;
            return c2 | 0;
          }
          if (true & (b2 & 117440512 | 0) == 16777216 & (Hb(a2, c2) | 0) != 0) {
            c2 = 0;
            return c2 | 0;
          }
          c2 = Db(a2, c2) | 0;
          return c2 | 0;
        }
        function nb(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h = 0;
          f2 = T;
          T = T + 16 | 0;
          e2 = f2;
          if (!(true & (c2 & 2013265920 | 0) == 268435456)) {
            e2 = 6;
            T = f2;
            return e2 | 0;
          }
          g2 = c2 & -2130706433 | 134217728;
          h = d2;
          b[h >> 2] = a2;
          b[h + 4 >> 2] = g2;
          b[e2 >> 2] = 0;
          c2 = Qd(a2 | 0, c2 | 0, 56) | 0;
          H() | 0;
          e2 = ea2(a2, g2, c2 & 7, e2, d2 + 8 | 0) | 0;
          T = f2;
          return e2 | 0;
        }
        function ob(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0;
          f2 = (Hb(a2, c2) | 0) == 0;
          c2 = c2 & -2130706433;
          e2 = d2;
          b[e2 >> 2] = f2 ? a2 : 0;
          b[e2 + 4 >> 2] = f2 ? c2 | 285212672 : 0;
          e2 = d2 + 8 | 0;
          b[e2 >> 2] = a2;
          b[e2 + 4 >> 2] = c2 | 301989888;
          e2 = d2 + 16 | 0;
          b[e2 >> 2] = a2;
          b[e2 + 4 >> 2] = c2 | 318767104;
          e2 = d2 + 24 | 0;
          b[e2 >> 2] = a2;
          b[e2 + 4 >> 2] = c2 | 335544320;
          e2 = d2 + 32 | 0;
          b[e2 >> 2] = a2;
          b[e2 + 4 >> 2] = c2 | 352321536;
          d2 = d2 + 40 | 0;
          b[d2 >> 2] = a2;
          b[d2 + 4 >> 2] = c2 | 369098752;
          return 0;
        }
        function pb(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h = 0;
          h = T;
          T = T + 16 | 0;
          f2 = h;
          g2 = c2 & -2130706433 | 134217728;
          if (!(true & (c2 & 2013265920 | 0) == 268435456)) {
            g2 = 6;
            T = h;
            return g2 | 0;
          }
          e2 = Qd(a2 | 0, c2 | 0, 56) | 0;
          H() | 0;
          e2 = od(a2, g2, e2 & 7) | 0;
          if ((e2 | 0) == -1) {
            b[d2 >> 2] = 0;
            g2 = 6;
            T = h;
            return g2 | 0;
          }
          if (Yb(a2, g2, f2) | 0) {
            I(27795, 26932, 282, 26947);
          }
          c2 = Qd(a2 | 0, c2 | 0, 52) | 0;
          H() | 0;
          c2 = c2 & 15;
          if (!(Hb(a2, g2) | 0)) {
            zb(f2, c2, e2, 2, d2);
          } else {
            vb(f2, c2, e2, 2, d2);
          }
          g2 = 0;
          T = h;
          return g2 | 0;
        }
        function qb(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          var d2 = 0, e2 = 0;
          d2 = T;
          T = T + 16 | 0;
          e2 = d2;
          rb(a2, b2, c2, e2);
          La(e2, c2 + 4 | 0);
          T = d2;
          return;
        }
        function rb(a2, c2, d2, f2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h = 0, i = 0, j = 0, k = 0;
          j = T;
          T = T + 16 | 0;
          k = j;
          sb(a2, d2, k);
          h = +w(+(1 - +e[k >> 3] * 0.5));
          if (h < 1e-16) {
            b[f2 >> 2] = 0;
            b[f2 + 4 >> 2] = 0;
            b[f2 + 8 >> 2] = 0;
            b[f2 + 12 >> 2] = 0;
            T = j;
            return;
          }
          k = b[d2 >> 2] | 0;
          g2 = +e[15920 + (k * 24 | 0) >> 3];
          g2 = +ic(g2 - +ic(+oc(15600 + (k << 4) | 0, a2)));
          if (!(Vb(c2) | 0)) {
            i = g2;
          } else {
            i = +ic(g2 + -0.3334731722518321);
          }
          g2 = +v2(+h) * 2.618033988749896;
          if ((c2 | 0) > 0) {
            a2 = 0;
            do {
              g2 = g2 * 2.6457513110645907;
              a2 = a2 + 1 | 0;
            } while ((a2 | 0) != (c2 | 0));
          }
          h = +t(+i) * g2;
          e[f2 >> 3] = h;
          i = +u4(+i) * g2;
          e[f2 + 8 >> 3] = i;
          T = j;
          return;
        }
        function sb(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var f2 = 0, g2 = 0, h = 0;
          h = T;
          T = T + 32 | 0;
          g2 = h;
          nd(a2, g2);
          b[c2 >> 2] = 0;
          e[d2 >> 3] = 5;
          f2 = +md(16400, g2);
          if (f2 < +e[d2 >> 3]) {
            b[c2 >> 2] = 0;
            e[d2 >> 3] = f2;
          }
          f2 = +md(16424, g2);
          if (f2 < +e[d2 >> 3]) {
            b[c2 >> 2] = 1;
            e[d2 >> 3] = f2;
          }
          f2 = +md(16448, g2);
          if (f2 < +e[d2 >> 3]) {
            b[c2 >> 2] = 2;
            e[d2 >> 3] = f2;
          }
          f2 = +md(16472, g2);
          if (f2 < +e[d2 >> 3]) {
            b[c2 >> 2] = 3;
            e[d2 >> 3] = f2;
          }
          f2 = +md(16496, g2);
          if (f2 < +e[d2 >> 3]) {
            b[c2 >> 2] = 4;
            e[d2 >> 3] = f2;
          }
          f2 = +md(16520, g2);
          if (f2 < +e[d2 >> 3]) {
            b[c2 >> 2] = 5;
            e[d2 >> 3] = f2;
          }
          f2 = +md(16544, g2);
          if (f2 < +e[d2 >> 3]) {
            b[c2 >> 2] = 6;
            e[d2 >> 3] = f2;
          }
          f2 = +md(16568, g2);
          if (f2 < +e[d2 >> 3]) {
            b[c2 >> 2] = 7;
            e[d2 >> 3] = f2;
          }
          f2 = +md(16592, g2);
          if (f2 < +e[d2 >> 3]) {
            b[c2 >> 2] = 8;
            e[d2 >> 3] = f2;
          }
          f2 = +md(16616, g2);
          if (f2 < +e[d2 >> 3]) {
            b[c2 >> 2] = 9;
            e[d2 >> 3] = f2;
          }
          f2 = +md(16640, g2);
          if (f2 < +e[d2 >> 3]) {
            b[c2 >> 2] = 10;
            e[d2 >> 3] = f2;
          }
          f2 = +md(16664, g2);
          if (f2 < +e[d2 >> 3]) {
            b[c2 >> 2] = 11;
            e[d2 >> 3] = f2;
          }
          f2 = +md(16688, g2);
          if (f2 < +e[d2 >> 3]) {
            b[c2 >> 2] = 12;
            e[d2 >> 3] = f2;
          }
          f2 = +md(16712, g2);
          if (f2 < +e[d2 >> 3]) {
            b[c2 >> 2] = 13;
            e[d2 >> 3] = f2;
          }
          f2 = +md(16736, g2);
          if (f2 < +e[d2 >> 3]) {
            b[c2 >> 2] = 14;
            e[d2 >> 3] = f2;
          }
          f2 = +md(16760, g2);
          if (f2 < +e[d2 >> 3]) {
            b[c2 >> 2] = 15;
            e[d2 >> 3] = f2;
          }
          f2 = +md(16784, g2);
          if (f2 < +e[d2 >> 3]) {
            b[c2 >> 2] = 16;
            e[d2 >> 3] = f2;
          }
          f2 = +md(16808, g2);
          if (f2 < +e[d2 >> 3]) {
            b[c2 >> 2] = 17;
            e[d2 >> 3] = f2;
          }
          f2 = +md(16832, g2);
          if (f2 < +e[d2 >> 3]) {
            b[c2 >> 2] = 18;
            e[d2 >> 3] = f2;
          }
          f2 = +md(16856, g2);
          if (!(f2 < +e[d2 >> 3])) {
            T = h;
            return;
          }
          b[c2 >> 2] = 19;
          e[d2 >> 3] = f2;
          T = h;
          return;
        }
        function tb(a2, c2, d2, f2, g2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          var h = 0, i = 0, j = 0;
          h = +jd(a2);
          if (h < 1e-16) {
            c2 = 15600 + (c2 << 4) | 0;
            b[g2 >> 2] = b[c2 >> 2];
            b[g2 + 4 >> 2] = b[c2 + 4 >> 2];
            b[g2 + 8 >> 2] = b[c2 + 8 >> 2];
            b[g2 + 12 >> 2] = b[c2 + 12 >> 2];
            return;
          }
          i = +z(+ +e[a2 + 8 >> 3], + +e[a2 >> 3]);
          if ((d2 | 0) > 0) {
            a2 = 0;
            do {
              h = h * 0.37796447300922725;
              a2 = a2 + 1 | 0;
            } while ((a2 | 0) != (d2 | 0));
          }
          j = h * 0.3333333333333333;
          if (!f2) {
            h = +y(+(h * 0.381966011250105));
            if (Vb(d2) | 0) {
              i = +ic(i + 0.3334731722518321);
            }
          } else {
            d2 = (Vb(d2) | 0) == 0;
            h = +y(+((d2 ? j : j * 0.37796447300922725) * 0.381966011250105));
          }
          pc(15600 + (c2 << 4) | 0, +ic(+e[15920 + (c2 * 24 | 0) >> 3] - i), h, g2);
          return;
        }
        function ub(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0;
          e2 = T;
          T = T + 16 | 0;
          f2 = e2;
          Na(a2 + 4 | 0, f2);
          tb(f2, b[a2 >> 2] | 0, c2, 0, d2);
          T = e2;
          return;
        }
        function vb(a2, c2, d2, f2, g2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          var h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A2 = 0, B4 = 0, C3 = 0, D3 = 0, E2 = 0, F = 0, G2 = 0, H2 = 0, J2 = 0;
          G2 = T;
          T = T + 272 | 0;
          h = G2 + 256 | 0;
          u5 = G2 + 240 | 0;
          D3 = G2;
          E2 = G2 + 224 | 0;
          F = G2 + 208 | 0;
          v3 = G2 + 176 | 0;
          w2 = G2 + 160 | 0;
          x2 = G2 + 192 | 0;
          y2 = G2 + 144 | 0;
          z2 = G2 + 128 | 0;
          A2 = G2 + 112 | 0;
          B4 = G2 + 96 | 0;
          C3 = G2 + 80 | 0;
          b[h >> 2] = c2;
          b[u5 >> 2] = b[a2 >> 2];
          b[u5 + 4 >> 2] = b[a2 + 4 >> 2];
          b[u5 + 8 >> 2] = b[a2 + 8 >> 2];
          b[u5 + 12 >> 2] = b[a2 + 12 >> 2];
          wb(u5, h, D3);
          b[g2 >> 2] = 0;
          u5 = f2 + d2 + ((f2 | 0) == 5 & 1) | 0;
          if ((u5 | 0) <= (d2 | 0)) {
            T = G2;
            return;
          }
          k = b[h >> 2] | 0;
          l = E2 + 4 | 0;
          m = v3 + 4 | 0;
          n = d2 + 5 | 0;
          o = 16880 + (k << 2) | 0;
          p2 = 16960 + (k << 2) | 0;
          q2 = z2 + 8 | 0;
          r2 = A2 + 8 | 0;
          s2 = B4 + 8 | 0;
          t2 = F + 4 | 0;
          j = d2;
          a: while (1) {
            i = D3 + (((j | 0) % 5 | 0) << 4) | 0;
            b[F >> 2] = b[i >> 2];
            b[F + 4 >> 2] = b[i + 4 >> 2];
            b[F + 8 >> 2] = b[i + 8 >> 2];
            b[F + 12 >> 2] = b[i + 12 >> 2];
            do {
            } while ((xb(F, k, 0, 1) | 0) == 2);
            if ((j | 0) > (d2 | 0) & (Vb(c2) | 0) != 0) {
              b[v3 >> 2] = b[F >> 2];
              b[v3 + 4 >> 2] = b[F + 4 >> 2];
              b[v3 + 8 >> 2] = b[F + 8 >> 2];
              b[v3 + 12 >> 2] = b[F + 12 >> 2];
              Na(l, w2);
              f2 = b[v3 >> 2] | 0;
              h = b[17040 + (f2 * 80 | 0) + (b[E2 >> 2] << 2) >> 2] | 0;
              b[v3 >> 2] = b[18640 + (f2 * 80 | 0) + (h * 20 | 0) >> 2];
              i = b[18640 + (f2 * 80 | 0) + (h * 20 | 0) + 16 >> 2] | 0;
              if ((i | 0) > 0) {
                a2 = 0;
                do {
                  Za(m);
                  a2 = a2 + 1 | 0;
                } while ((a2 | 0) < (i | 0));
              }
              i = 18640 + (f2 * 80 | 0) + (h * 20 | 0) + 4 | 0;
              b[x2 >> 2] = b[i >> 2];
              b[x2 + 4 >> 2] = b[i + 4 >> 2];
              b[x2 + 8 >> 2] = b[i + 8 >> 2];
              Qa(x2, (b[o >> 2] | 0) * 3 | 0);
              Oa(m, x2, m);
              Ma(m);
              Na(m, y2);
              H2 = +(b[p2 >> 2] | 0);
              e[z2 >> 3] = H2 * 3;
              e[q2 >> 3] = 0;
              J2 = H2 * -1.5;
              e[A2 >> 3] = J2;
              e[r2 >> 3] = H2 * 2.598076211353316;
              e[B4 >> 3] = J2;
              e[s2 >> 3] = H2 * -2.598076211353316;
              switch (b[17040 + ((b[v3 >> 2] | 0) * 80 | 0) + (b[F >> 2] << 2) >> 2] | 0) {
                case 1: {
                  a2 = A2;
                  f2 = z2;
                  break;
                }
                case 3: {
                  a2 = B4;
                  f2 = A2;
                  break;
                }
                case 2: {
                  a2 = z2;
                  f2 = B4;
                  break;
                }
                default: {
                  a2 = 12;
                  break a;
                }
              }
              kd(w2, y2, f2, a2, C3);
              tb(C3, b[v3 >> 2] | 0, k, 1, g2 + 8 + (b[g2 >> 2] << 4) | 0);
              b[g2 >> 2] = (b[g2 >> 2] | 0) + 1;
            }
            if ((j | 0) < (n | 0)) {
              Na(t2, v3);
              tb(v3, b[F >> 2] | 0, k, 1, g2 + 8 + (b[g2 >> 2] << 4) | 0);
              b[g2 >> 2] = (b[g2 >> 2] | 0) + 1;
            }
            b[E2 >> 2] = b[F >> 2];
            b[E2 + 4 >> 2] = b[F + 4 >> 2];
            b[E2 + 8 >> 2] = b[F + 8 >> 2];
            b[E2 + 12 >> 2] = b[F + 12 >> 2];
            j = j + 1 | 0;
            if ((j | 0) >= (u5 | 0)) {
              a2 = 3;
              break;
            }
          }
          if ((a2 | 0) == 3) {
            T = G2;
            return;
          } else if ((a2 | 0) == 12) {
            I(26970, 27017, 572, 27027);
          }
        }
        function wb(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0;
          j = T;
          T = T + 128 | 0;
          e2 = j + 64 | 0;
          f2 = j;
          g2 = e2;
          h = 20240;
          i = g2 + 60 | 0;
          do {
            b[g2 >> 2] = b[h >> 2];
            g2 = g2 + 4 | 0;
            h = h + 4 | 0;
          } while ((g2 | 0) < (i | 0));
          g2 = f2;
          h = 20304;
          i = g2 + 60 | 0;
          do {
            b[g2 >> 2] = b[h >> 2];
            g2 = g2 + 4 | 0;
            h = h + 4 | 0;
          } while ((g2 | 0) < (i | 0));
          i = (Vb(b[c2 >> 2] | 0) | 0) == 0;
          e2 = i ? e2 : f2;
          f2 = a2 + 4 | 0;
          bb2(f2);
          cb(f2);
          if (Vb(b[c2 >> 2] | 0) | 0) {
            Xa(f2);
            b[c2 >> 2] = (b[c2 >> 2] | 0) + 1;
          }
          b[d2 >> 2] = b[a2 >> 2];
          c2 = d2 + 4 | 0;
          Oa(f2, e2, c2);
          Ma(c2);
          b[d2 + 16 >> 2] = b[a2 >> 2];
          c2 = d2 + 20 | 0;
          Oa(f2, e2 + 12 | 0, c2);
          Ma(c2);
          b[d2 + 32 >> 2] = b[a2 >> 2];
          c2 = d2 + 36 | 0;
          Oa(f2, e2 + 24 | 0, c2);
          Ma(c2);
          b[d2 + 48 >> 2] = b[a2 >> 2];
          c2 = d2 + 52 | 0;
          Oa(f2, e2 + 36 | 0, c2);
          Ma(c2);
          b[d2 + 64 >> 2] = b[a2 >> 2];
          d2 = d2 + 68 | 0;
          Oa(f2, e2 + 48 | 0, d2);
          Ma(d2);
          T = j;
          return;
        }
        function xb(a2, c2, d2, e2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0;
          p2 = T;
          T = T + 32 | 0;
          n = p2 + 12 | 0;
          i = p2;
          o = a2 + 4 | 0;
          m = b[16960 + (c2 << 2) >> 2] | 0;
          l = (e2 | 0) != 0;
          m = l ? m * 3 | 0 : m;
          f2 = b[o >> 2] | 0;
          k = a2 + 8 | 0;
          h = b[k >> 2] | 0;
          if (l) {
            g2 = a2 + 12 | 0;
            e2 = b[g2 >> 2] | 0;
            f2 = h + f2 + e2 | 0;
            if ((f2 | 0) == (m | 0)) {
              o = 1;
              T = p2;
              return o | 0;
            } else {
              j = g2;
            }
          } else {
            j = a2 + 12 | 0;
            e2 = b[j >> 2] | 0;
            f2 = h + f2 + e2 | 0;
          }
          if ((f2 | 0) <= (m | 0)) {
            o = 0;
            T = p2;
            return o | 0;
          }
          do {
            if ((e2 | 0) > 0) {
              e2 = b[a2 >> 2] | 0;
              if ((h | 0) > 0) {
                g2 = 18640 + (e2 * 80 | 0) + 60 | 0;
                e2 = a2;
                break;
              }
              e2 = 18640 + (e2 * 80 | 0) + 40 | 0;
              if (!d2) {
                g2 = e2;
                e2 = a2;
              } else {
                Ka(n, m, 0, 0);
                Pa(o, n, i);
                _a2(i);
                Oa(i, n, o);
                g2 = e2;
                e2 = a2;
              }
            } else {
              g2 = 18640 + ((b[a2 >> 2] | 0) * 80 | 0) + 20 | 0;
              e2 = a2;
            }
          } while (0);
          b[e2 >> 2] = b[g2 >> 2];
          f2 = g2 + 16 | 0;
          if ((b[f2 >> 2] | 0) > 0) {
            e2 = 0;
            do {
              Za(o);
              e2 = e2 + 1 | 0;
            } while ((e2 | 0) < (b[f2 >> 2] | 0));
          }
          a2 = g2 + 4 | 0;
          b[n >> 2] = b[a2 >> 2];
          b[n + 4 >> 2] = b[a2 + 4 >> 2];
          b[n + 8 >> 2] = b[a2 + 8 >> 2];
          c2 = b[16880 + (c2 << 2) >> 2] | 0;
          Qa(n, l ? c2 * 3 | 0 : c2);
          Oa(o, n, o);
          Ma(o);
          if (l) {
            e2 = ((b[k >> 2] | 0) + (b[o >> 2] | 0) + (b[j >> 2] | 0) | 0) == (m | 0) ? 1 : 2;
          } else {
            e2 = 2;
          }
          o = e2;
          T = p2;
          return o | 0;
        }
        function yb(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0;
          do {
            c2 = xb(a2, b2, 0, 1) | 0;
          } while ((c2 | 0) == 2);
          return c2 | 0;
        }
        function zb(a2, c2, d2, f2, g2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          var h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A2 = 0, B4 = 0, C3 = 0, D3 = 0;
          B4 = T;
          T = T + 240 | 0;
          h = B4 + 224 | 0;
          x2 = B4 + 208 | 0;
          y2 = B4;
          z2 = B4 + 192 | 0;
          A2 = B4 + 176 | 0;
          s2 = B4 + 160 | 0;
          t2 = B4 + 144 | 0;
          u5 = B4 + 128 | 0;
          v3 = B4 + 112 | 0;
          w2 = B4 + 96 | 0;
          b[h >> 2] = c2;
          b[x2 >> 2] = b[a2 >> 2];
          b[x2 + 4 >> 2] = b[a2 + 4 >> 2];
          b[x2 + 8 >> 2] = b[a2 + 8 >> 2];
          b[x2 + 12 >> 2] = b[a2 + 12 >> 2];
          Ab(x2, h, y2);
          b[g2 >> 2] = 0;
          r2 = f2 + d2 + ((f2 | 0) == 6 & 1) | 0;
          if ((r2 | 0) <= (d2 | 0)) {
            T = B4;
            return;
          }
          k = b[h >> 2] | 0;
          l = d2 + 6 | 0;
          m = 16960 + (k << 2) | 0;
          n = t2 + 8 | 0;
          o = u5 + 8 | 0;
          p2 = v3 + 8 | 0;
          q2 = z2 + 4 | 0;
          i = 0;
          j = d2;
          f2 = -1;
          a: while (1) {
            h = (j | 0) % 6 | 0;
            a2 = y2 + (h << 4) | 0;
            b[z2 >> 2] = b[a2 >> 2];
            b[z2 + 4 >> 2] = b[a2 + 4 >> 2];
            b[z2 + 8 >> 2] = b[a2 + 8 >> 2];
            b[z2 + 12 >> 2] = b[a2 + 12 >> 2];
            a2 = i;
            i = xb(z2, k, 0, 1) | 0;
            if ((j | 0) > (d2 | 0) & (Vb(c2) | 0) != 0 ? (a2 | 0) != 1 ? (b[z2 >> 2] | 0) != (f2 | 0) : 0 : 0) {
              Na(y2 + (((h + 5 | 0) % 6 | 0) << 4) + 4 | 0, A2);
              Na(y2 + (h << 4) + 4 | 0, s2);
              C3 = +(b[m >> 2] | 0);
              e[t2 >> 3] = C3 * 3;
              e[n >> 3] = 0;
              D3 = C3 * -1.5;
              e[u5 >> 3] = D3;
              e[o >> 3] = C3 * 2.598076211353316;
              e[v3 >> 3] = D3;
              e[p2 >> 3] = C3 * -2.598076211353316;
              h = b[x2 >> 2] | 0;
              switch (b[17040 + (h * 80 | 0) + (((f2 | 0) == (h | 0) ? b[z2 >> 2] | 0 : f2) << 2) >> 2] | 0) {
                case 1: {
                  a2 = u5;
                  f2 = t2;
                  break;
                }
                case 3: {
                  a2 = v3;
                  f2 = u5;
                  break;
                }
                case 2: {
                  a2 = t2;
                  f2 = v3;
                  break;
                }
                default: {
                  a2 = 8;
                  break a;
                }
              }
              kd(A2, s2, f2, a2, w2);
              if (!(ld(A2, w2) | 0) ? !(ld(s2, w2) | 0) : 0) {
                tb(w2, b[x2 >> 2] | 0, k, 1, g2 + 8 + (b[g2 >> 2] << 4) | 0);
                b[g2 >> 2] = (b[g2 >> 2] | 0) + 1;
              }
            }
            if ((j | 0) < (l | 0)) {
              Na(q2, A2);
              tb(A2, b[z2 >> 2] | 0, k, 1, g2 + 8 + (b[g2 >> 2] << 4) | 0);
              b[g2 >> 2] = (b[g2 >> 2] | 0) + 1;
            }
            j = j + 1 | 0;
            if ((j | 0) >= (r2 | 0)) {
              a2 = 3;
              break;
            } else {
              f2 = b[z2 >> 2] | 0;
            }
          }
          if ((a2 | 0) == 3) {
            T = B4;
            return;
          } else if ((a2 | 0) == 8) {
            I(27054, 27017, 737, 27099);
          }
        }
        function Ab(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0;
          j = T;
          T = T + 160 | 0;
          e2 = j + 80 | 0;
          f2 = j;
          g2 = e2;
          h = 20368;
          i = g2 + 72 | 0;
          do {
            b[g2 >> 2] = b[h >> 2];
            g2 = g2 + 4 | 0;
            h = h + 4 | 0;
          } while ((g2 | 0) < (i | 0));
          g2 = f2;
          h = 20448;
          i = g2 + 72 | 0;
          do {
            b[g2 >> 2] = b[h >> 2];
            g2 = g2 + 4 | 0;
            h = h + 4 | 0;
          } while ((g2 | 0) < (i | 0));
          i = (Vb(b[c2 >> 2] | 0) | 0) == 0;
          e2 = i ? e2 : f2;
          f2 = a2 + 4 | 0;
          bb2(f2);
          cb(f2);
          if (Vb(b[c2 >> 2] | 0) | 0) {
            Xa(f2);
            b[c2 >> 2] = (b[c2 >> 2] | 0) + 1;
          }
          b[d2 >> 2] = b[a2 >> 2];
          c2 = d2 + 4 | 0;
          Oa(f2, e2, c2);
          Ma(c2);
          b[d2 + 16 >> 2] = b[a2 >> 2];
          c2 = d2 + 20 | 0;
          Oa(f2, e2 + 12 | 0, c2);
          Ma(c2);
          b[d2 + 32 >> 2] = b[a2 >> 2];
          c2 = d2 + 36 | 0;
          Oa(f2, e2 + 24 | 0, c2);
          Ma(c2);
          b[d2 + 48 >> 2] = b[a2 >> 2];
          c2 = d2 + 52 | 0;
          Oa(f2, e2 + 36 | 0, c2);
          Ma(c2);
          b[d2 + 64 >> 2] = b[a2 >> 2];
          c2 = d2 + 68 | 0;
          Oa(f2, e2 + 48 | 0, c2);
          Ma(c2);
          b[d2 + 80 >> 2] = b[a2 >> 2];
          d2 = d2 + 84 | 0;
          Oa(f2, e2 + 60 | 0, d2);
          Ma(d2);
          T = j;
          return;
        }
        function Bb(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          b2 = Qd(a2 | 0, b2 | 0, 52) | 0;
          H() | 0;
          return b2 & 15 | 0;
        }
        function Cb(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          b2 = Qd(a2 | 0, b2 | 0, 45) | 0;
          H() | 0;
          return b2 & 127 | 0;
        }
        function Db(b2, c2) {
          b2 = b2 | 0;
          c2 = c2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0;
          if (!(true & (c2 & -16777216 | 0) == 134217728)) {
            b2 = 0;
            return b2 | 0;
          }
          e2 = Qd(b2 | 0, c2 | 0, 52) | 0;
          H() | 0;
          e2 = e2 & 15;
          d2 = Qd(b2 | 0, c2 | 0, 45) | 0;
          H() | 0;
          d2 = d2 & 127;
          if (d2 >>> 0 > 121) {
            b2 = 0;
            return b2 | 0;
          }
          h = (e2 ^ 15) * 3 | 0;
          f2 = Qd(b2 | 0, c2 | 0, h | 0) | 0;
          h = Rd(f2 | 0, H() | 0, h | 0) | 0;
          f2 = H() | 0;
          g2 = Hd(-1227133514, -1171, h | 0, f2 | 0) | 0;
          if (!((h & 613566756 & g2 | 0) == 0 & (f2 & 4681 & (H() | 0) | 0) == 0)) {
            h = 0;
            return h | 0;
          }
          h = (e2 * 3 | 0) + 19 | 0;
          g2 = Rd(~b2 | 0, ~c2 | 0, h | 0) | 0;
          h = Qd(g2 | 0, H() | 0, h | 0) | 0;
          if (!((e2 | 0) == 15 | (h | 0) == 0 & (H() | 0) == 0)) {
            h = 0;
            return h | 0;
          }
          if (!(a[20528 + d2 >> 0] | 0)) {
            h = 1;
            return h | 0;
          }
          c2 = c2 & 8191;
          if ((b2 | 0) == 0 & (c2 | 0) == 0) {
            h = 1;
            return h | 0;
          } else {
            h = Sd(b2 | 0, c2 | 0, 0) | 0;
            H() | 0;
            return ((63 - h | 0) % 3 | 0 | 0) != 0 | 0;
          }
          return 0;
        }
        function Eb(a2, c2, d2, e2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h = 0, i = 0;
          f2 = Rd(c2 | 0, 0, 52) | 0;
          g2 = H() | 0;
          d2 = Rd(d2 | 0, 0, 45) | 0;
          d2 = g2 | (H() | 0) | 134225919;
          if ((c2 | 0) < 1) {
            g2 = -1;
            e2 = d2;
            c2 = a2;
            b[c2 >> 2] = g2;
            a2 = a2 + 4 | 0;
            b[a2 >> 2] = e2;
            return;
          }
          g2 = 1;
          f2 = -1;
          while (1) {
            h = (15 - g2 | 0) * 3 | 0;
            i = Rd(7, 0, h | 0) | 0;
            d2 = d2 & ~(H() | 0);
            h = Rd(e2 | 0, 0, h | 0) | 0;
            f2 = f2 & ~i | h;
            d2 = d2 | (H() | 0);
            if ((g2 | 0) == (c2 | 0)) {
              break;
            } else {
              g2 = g2 + 1 | 0;
            }
          }
          i = a2;
          h = i;
          b[h >> 2] = f2;
          i = i + 4 | 0;
          b[i >> 2] = d2;
          return;
        }
        function Fb(a2, c2, d2, e2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0;
          g2 = Qd(a2 | 0, c2 | 0, 52) | 0;
          H() | 0;
          g2 = g2 & 15;
          if (d2 >>> 0 > 15) {
            e2 = 4;
            return e2 | 0;
          }
          if ((g2 | 0) < (d2 | 0)) {
            e2 = 12;
            return e2 | 0;
          }
          if ((g2 | 0) == (d2 | 0)) {
            b[e2 >> 2] = a2;
            b[e2 + 4 >> 2] = c2;
            e2 = 0;
            return e2 | 0;
          }
          f2 = Rd(d2 | 0, 0, 52) | 0;
          f2 = f2 | a2;
          a2 = H() | 0 | c2 & -15728641;
          if ((g2 | 0) > (d2 | 0)) {
            do {
              c2 = Rd(7, 0, (14 - d2 | 0) * 3 | 0) | 0;
              d2 = d2 + 1 | 0;
              f2 = c2 | f2;
              a2 = H() | 0 | a2;
            } while ((d2 | 0) < (g2 | 0));
          }
          b[e2 >> 2] = f2;
          b[e2 + 4 >> 2] = a2;
          e2 = 0;
          return e2 | 0;
        }
        function Gb(a2, c2, d2, e2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h = 0;
          g2 = Qd(a2 | 0, c2 | 0, 52) | 0;
          H() | 0;
          g2 = g2 & 15;
          if (!((d2 | 0) < 16 & (g2 | 0) <= (d2 | 0))) {
            e2 = 4;
            return e2 | 0;
          }
          f2 = d2 - g2 | 0;
          d2 = Qd(a2 | 0, c2 | 0, 45) | 0;
          H() | 0;
          a: do {
            if (!(oa(d2 & 127) | 0)) {
              d2 = Oc(7, 0, f2, ((f2 | 0) < 0) << 31 >> 31) | 0;
              f2 = H() | 0;
            } else {
              b: do {
                if (g2 | 0) {
                  d2 = 1;
                  while (1) {
                    h = Rd(7, 0, (15 - d2 | 0) * 3 | 0) | 0;
                    if (!((h & a2 | 0) == 0 & ((H() | 0) & c2 | 0) == 0)) {
                      break;
                    }
                    if (d2 >>> 0 < g2 >>> 0) {
                      d2 = d2 + 1 | 0;
                    } else {
                      break b;
                    }
                  }
                  d2 = Oc(7, 0, f2, ((f2 | 0) < 0) << 31 >> 31) | 0;
                  f2 = H() | 0;
                  break a;
                }
              } while (0);
              d2 = Oc(7, 0, f2, ((f2 | 0) < 0) << 31 >> 31) | 0;
              d2 = Md(d2 | 0, H() | 0, 5, 0) | 0;
              d2 = Gd(d2 | 0, H() | 0, -5, -1) | 0;
              d2 = Kd(d2 | 0, H() | 0, 6, 0) | 0;
              d2 = Gd(d2 | 0, H() | 0, 1, 0) | 0;
              f2 = H() | 0;
            }
          } while (0);
          h = e2;
          b[h >> 2] = d2;
          b[h + 4 >> 2] = f2;
          h = 0;
          return h | 0;
        }
        function Hb(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0, d2 = 0, e2 = 0;
          e2 = Qd(a2 | 0, b2 | 0, 45) | 0;
          H() | 0;
          if (!(oa(e2 & 127) | 0)) {
            e2 = 0;
            return e2 | 0;
          }
          e2 = Qd(a2 | 0, b2 | 0, 52) | 0;
          H() | 0;
          e2 = e2 & 15;
          a: do {
            if (!e2) {
              c2 = 0;
            } else {
              d2 = 1;
              while (1) {
                c2 = Qd(a2 | 0, b2 | 0, (15 - d2 | 0) * 3 | 0) | 0;
                H() | 0;
                c2 = c2 & 7;
                if (c2 | 0) {
                  break a;
                }
                if (d2 >>> 0 < e2 >>> 0) {
                  d2 = d2 + 1 | 0;
                } else {
                  c2 = 0;
                  break;
                }
              }
            }
          } while (0);
          e2 = (c2 | 0) == 0 & 1;
          return e2 | 0;
        }
        function Ib(a2, c2, d2, e2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h = 0, i = 0;
          h = T;
          T = T + 16 | 0;
          g2 = h;
          fc(g2, a2, c2, d2);
          c2 = g2;
          a2 = b[c2 >> 2] | 0;
          c2 = b[c2 + 4 >> 2] | 0;
          if ((a2 | 0) == 0 & (c2 | 0) == 0) {
            T = h;
            return 0;
          }
          f2 = 0;
          d2 = 0;
          do {
            i = e2 + (f2 << 3) | 0;
            b[i >> 2] = a2;
            b[i + 4 >> 2] = c2;
            f2 = Gd(f2 | 0, d2 | 0, 1, 0) | 0;
            d2 = H() | 0;
            hc(g2);
            i = g2;
            a2 = b[i >> 2] | 0;
            c2 = b[i + 4 >> 2] | 0;
          } while (!((a2 | 0) == 0 & (c2 | 0) == 0));
          T = h;
          return 0;
        }
        function Jb(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          if ((d2 | 0) < (c2 | 0)) {
            c2 = b2;
            d2 = a2;
            G(c2 | 0);
            return d2 | 0;
          }
          c2 = Rd(-1, -1, ((d2 - c2 | 0) * 3 | 0) + 3 | 0) | 0;
          d2 = Rd(~c2 | 0, ~(H() | 0) | 0, (15 - d2 | 0) * 3 | 0) | 0;
          c2 = ~(H() | 0) & b2;
          d2 = ~d2 & a2;
          G(c2 | 0);
          return d2 | 0;
        }
        function Kb(a2, c2, d2, e2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          f2 = Qd(a2 | 0, c2 | 0, 52) | 0;
          H() | 0;
          f2 = f2 & 15;
          if (!((d2 | 0) < 16 & (f2 | 0) <= (d2 | 0))) {
            e2 = 4;
            return e2 | 0;
          }
          if ((f2 | 0) < (d2 | 0)) {
            f2 = Rd(-1, -1, ((d2 + -1 - f2 | 0) * 3 | 0) + 3 | 0) | 0;
            f2 = Rd(~f2 | 0, ~(H() | 0) | 0, (15 - d2 | 0) * 3 | 0) | 0;
            c2 = ~(H() | 0) & c2;
            a2 = ~f2 & a2;
          }
          f2 = Rd(d2 | 0, 0, 52) | 0;
          d2 = c2 & -15728641 | (H() | 0);
          b[e2 >> 2] = a2 | f2;
          b[e2 + 4 >> 2] = d2;
          e2 = 0;
          return e2 | 0;
        }
        function Lb(a2, c2, d2, e2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A2 = 0, B4 = 0, C3 = 0, D3 = 0, E2 = 0;
          if ((d2 | 0) == 0 & (e2 | 0) == 0) {
            E2 = 0;
            return E2 | 0;
          }
          f2 = a2;
          g2 = b[f2 >> 2] | 0;
          f2 = b[f2 + 4 >> 2] | 0;
          if (true & (f2 & 15728640 | 0) == 0) {
            if (!((e2 | 0) > 0 | (e2 | 0) == 0 & d2 >>> 0 > 0)) {
              E2 = 0;
              return E2 | 0;
            }
            E2 = c2;
            b[E2 >> 2] = g2;
            b[E2 + 4 >> 2] = f2;
            if ((d2 | 0) == 1 & (e2 | 0) == 0) {
              E2 = 0;
              return E2 | 0;
            }
            f2 = 1;
            g2 = 0;
            do {
              C3 = a2 + (f2 << 3) | 0;
              D3 = b[C3 + 4 >> 2] | 0;
              E2 = c2 + (f2 << 3) | 0;
              b[E2 >> 2] = b[C3 >> 2];
              b[E2 + 4 >> 2] = D3;
              f2 = Gd(f2 | 0, g2 | 0, 1, 0) | 0;
              g2 = H() | 0;
            } while ((g2 | 0) < (e2 | 0) | (g2 | 0) == (e2 | 0) & f2 >>> 0 < d2 >>> 0);
            f2 = 0;
            return f2 | 0;
          }
          B4 = d2 << 3;
          D3 = Dd(B4) | 0;
          if (!D3) {
            E2 = 13;
            return E2 | 0;
          }
          Wd(D3 | 0, a2 | 0, B4 | 0) | 0;
          C3 = Fd(d2, 8) | 0;
          if (!C3) {
            Ed(D3);
            E2 = 13;
            return E2 | 0;
          }
          a: while (1) {
            f2 = D3;
            k = b[f2 >> 2] | 0;
            f2 = b[f2 + 4 >> 2] | 0;
            z2 = Qd(k | 0, f2 | 0, 52) | 0;
            H() | 0;
            z2 = z2 & 15;
            A2 = z2 + -1 | 0;
            y2 = (z2 | 0) != 0;
            x2 = (e2 | 0) > 0 | (e2 | 0) == 0 & d2 >>> 0 > 0;
            b: do {
              if (y2 & x2) {
                t2 = Rd(A2 | 0, 0, 52) | 0;
                u5 = H() | 0;
                if (A2 >>> 0 > 15) {
                  if (!((k | 0) == 0 & (f2 | 0) == 0)) {
                    E2 = 16;
                    break a;
                  }
                  g2 = 0;
                  a2 = 0;
                  while (1) {
                    g2 = Gd(g2 | 0, a2 | 0, 1, 0) | 0;
                    a2 = H() | 0;
                    if (!((a2 | 0) < (e2 | 0) | (a2 | 0) == (e2 | 0) & g2 >>> 0 < d2 >>> 0)) {
                      break b;
                    }
                    h = D3 + (g2 << 3) | 0;
                    w2 = b[h >> 2] | 0;
                    h = b[h + 4 >> 2] | 0;
                    if (!((w2 | 0) == 0 & (h | 0) == 0)) {
                      f2 = h;
                      E2 = 16;
                      break a;
                    }
                  }
                }
                i = k;
                a2 = f2;
                g2 = 0;
                h = 0;
                while (1) {
                  if (!((i | 0) == 0 & (a2 | 0) == 0)) {
                    if (!(true & (a2 & 117440512 | 0) == 0)) {
                      E2 = 21;
                      break a;
                    }
                    l = Qd(i | 0, a2 | 0, 52) | 0;
                    H() | 0;
                    l = l & 15;
                    if ((l | 0) < (A2 | 0)) {
                      f2 = 12;
                      E2 = 27;
                      break a;
                    }
                    if ((l | 0) != (A2 | 0)) {
                      i = i | t2;
                      a2 = a2 & -15728641 | u5;
                      if (l >>> 0 >= z2 >>> 0) {
                        j = A2;
                        do {
                          w2 = Rd(7, 0, (14 - j | 0) * 3 | 0) | 0;
                          j = j + 1 | 0;
                          i = w2 | i;
                          a2 = H() | 0 | a2;
                        } while (j >>> 0 < l >>> 0);
                      }
                    }
                    n = Od(i | 0, a2 | 0, d2 | 0, e2 | 0) | 0;
                    o = H() | 0;
                    j = C3 + (n << 3) | 0;
                    l = j;
                    m = b[l >> 2] | 0;
                    l = b[l + 4 >> 2] | 0;
                    if (!((m | 0) == 0 & (l | 0) == 0)) {
                      r2 = 0;
                      s2 = 0;
                      do {
                        if ((r2 | 0) > (e2 | 0) | (r2 | 0) == (e2 | 0) & s2 >>> 0 > d2 >>> 0) {
                          E2 = 31;
                          break a;
                        }
                        if ((m | 0) == (i | 0) & (l & -117440513 | 0) == (a2 | 0)) {
                          p2 = Qd(m | 0, l | 0, 56) | 0;
                          H() | 0;
                          p2 = p2 & 7;
                          q2 = p2 + 1 | 0;
                          w2 = Qd(m | 0, l | 0, 45) | 0;
                          H() | 0;
                          c: do {
                            if (!(oa(w2 & 127) | 0)) {
                              l = 7;
                            } else {
                              m = Qd(m | 0, l | 0, 52) | 0;
                              H() | 0;
                              m = m & 15;
                              if (!m) {
                                l = 6;
                                break;
                              }
                              l = 1;
                              while (1) {
                                w2 = Rd(7, 0, (15 - l | 0) * 3 | 0) | 0;
                                if (!((w2 & i | 0) == 0 & ((H() | 0) & a2 | 0) == 0)) {
                                  l = 7;
                                  break c;
                                }
                                if (l >>> 0 < m >>> 0) {
                                  l = l + 1 | 0;
                                } else {
                                  l = 6;
                                  break;
                                }
                              }
                            }
                          } while (0);
                          if ((p2 + 2 | 0) >>> 0 > l >>> 0) {
                            E2 = 41;
                            break a;
                          }
                          w2 = Rd(q2 | 0, 0, 56) | 0;
                          a2 = H() | 0 | a2 & -117440513;
                          v3 = j;
                          b[v3 >> 2] = 0;
                          b[v3 + 4 >> 2] = 0;
                          i = w2 | i;
                        } else {
                          n = Gd(n | 0, o | 0, 1, 0) | 0;
                          n = Nd(n | 0, H() | 0, d2 | 0, e2 | 0) | 0;
                          o = H() | 0;
                        }
                        s2 = Gd(s2 | 0, r2 | 0, 1, 0) | 0;
                        r2 = H() | 0;
                        j = C3 + (n << 3) | 0;
                        l = j;
                        m = b[l >> 2] | 0;
                        l = b[l + 4 >> 2] | 0;
                      } while (!((m | 0) == 0 & (l | 0) == 0));
                    }
                    w2 = j;
                    b[w2 >> 2] = i;
                    b[w2 + 4 >> 2] = a2;
                  }
                  g2 = Gd(g2 | 0, h | 0, 1, 0) | 0;
                  h = H() | 0;
                  if (!((h | 0) < (e2 | 0) | (h | 0) == (e2 | 0) & g2 >>> 0 < d2 >>> 0)) {
                    break b;
                  }
                  a2 = D3 + (g2 << 3) | 0;
                  i = b[a2 >> 2] | 0;
                  a2 = b[a2 + 4 >> 2] | 0;
                }
              }
            } while (0);
            w2 = Gd(d2 | 0, e2 | 0, 5, 0) | 0;
            v3 = H() | 0;
            if (v3 >>> 0 < 0 | (v3 | 0) == 0 & w2 >>> 0 < 11) {
              E2 = 85;
              break;
            }
            w2 = Kd(d2 | 0, e2 | 0, 6, 0) | 0;
            H() | 0;
            w2 = Fd(w2, 8) | 0;
            if (!w2) {
              E2 = 48;
              break;
            }
            do {
              if (x2) {
                q2 = 0;
                a2 = 0;
                p2 = 0;
                r2 = 0;
                while (1) {
                  l = C3 + (q2 << 3) | 0;
                  h = l;
                  g2 = b[h >> 2] | 0;
                  h = b[h + 4 >> 2] | 0;
                  if (!((g2 | 0) == 0 & (h | 0) == 0)) {
                    m = Qd(g2 | 0, h | 0, 56) | 0;
                    H() | 0;
                    m = m & 7;
                    i = m + 1 | 0;
                    n = h & -117440513;
                    v3 = Qd(g2 | 0, h | 0, 45) | 0;
                    H() | 0;
                    d: do {
                      if (oa(v3 & 127) | 0) {
                        o = Qd(g2 | 0, h | 0, 52) | 0;
                        H() | 0;
                        o = o & 15;
                        if (o | 0) {
                          j = 1;
                          while (1) {
                            v3 = Rd(7, 0, (15 - j | 0) * 3 | 0) | 0;
                            if (!((g2 & v3 | 0) == 0 & (n & (H() | 0) | 0) == 0)) {
                              break d;
                            }
                            if (j >>> 0 < o >>> 0) {
                              j = j + 1 | 0;
                            } else {
                              break;
                            }
                          }
                        }
                        h = Rd(i | 0, 0, 56) | 0;
                        g2 = h | g2;
                        h = H() | 0 | n;
                        i = l;
                        b[i >> 2] = g2;
                        b[i + 4 >> 2] = h;
                        i = m + 2 | 0;
                      }
                    } while (0);
                    if ((i | 0) == 7) {
                      v3 = w2 + (a2 << 3) | 0;
                      b[v3 >> 2] = g2;
                      b[v3 + 4 >> 2] = h & -117440513;
                      a2 = Gd(a2 | 0, p2 | 0, 1, 0) | 0;
                      v3 = H() | 0;
                    } else {
                      v3 = p2;
                    }
                  } else {
                    v3 = p2;
                  }
                  q2 = Gd(q2 | 0, r2 | 0, 1, 0) | 0;
                  r2 = H() | 0;
                  if (!((r2 | 0) < (e2 | 0) | (r2 | 0) == (e2 | 0) & q2 >>> 0 < d2 >>> 0)) {
                    break;
                  } else {
                    p2 = v3;
                  }
                }
                if (x2) {
                  s2 = A2 >>> 0 > 15;
                  t2 = Rd(A2 | 0, 0, 52) | 0;
                  u5 = H() | 0;
                  if (!y2) {
                    g2 = 0;
                    j = 0;
                    i = 0;
                    h = 0;
                    while (1) {
                      if (!((k | 0) == 0 & (f2 | 0) == 0)) {
                        A2 = c2 + (g2 << 3) | 0;
                        b[A2 >> 2] = k;
                        b[A2 + 4 >> 2] = f2;
                        g2 = Gd(g2 | 0, j | 0, 1, 0) | 0;
                        j = H() | 0;
                      }
                      i = Gd(i | 0, h | 0, 1, 0) | 0;
                      h = H() | 0;
                      if (!((h | 0) < (e2 | 0) | (h | 0) == (e2 | 0) & i >>> 0 < d2 >>> 0)) {
                        break;
                      }
                      f2 = D3 + (i << 3) | 0;
                      k = b[f2 >> 2] | 0;
                      f2 = b[f2 + 4 >> 2] | 0;
                    }
                    f2 = v3;
                    break;
                  }
                  g2 = 0;
                  j = 0;
                  h = 0;
                  i = 0;
                  while (1) {
                    do {
                      if (!((k | 0) == 0 & (f2 | 0) == 0)) {
                        o = Qd(k | 0, f2 | 0, 52) | 0;
                        H() | 0;
                        o = o & 15;
                        if (s2 | (o | 0) < (A2 | 0)) {
                          E2 = 80;
                          break a;
                        }
                        if ((o | 0) != (A2 | 0)) {
                          l = k | t2;
                          m = f2 & -15728641 | u5;
                          if (o >>> 0 >= z2 >>> 0) {
                            n = A2;
                            do {
                              y2 = Rd(7, 0, (14 - n | 0) * 3 | 0) | 0;
                              n = n + 1 | 0;
                              l = y2 | l;
                              m = H() | 0 | m;
                            } while (n >>> 0 < o >>> 0);
                          }
                        } else {
                          l = k;
                          m = f2;
                        }
                        p2 = Od(l | 0, m | 0, d2 | 0, e2 | 0) | 0;
                        n = 0;
                        o = 0;
                        r2 = H() | 0;
                        do {
                          if ((n | 0) > (e2 | 0) | (n | 0) == (e2 | 0) & o >>> 0 > d2 >>> 0) {
                            E2 = 81;
                            break a;
                          }
                          y2 = C3 + (p2 << 3) | 0;
                          q2 = b[y2 + 4 >> 2] | 0;
                          if ((q2 & -117440513 | 0) == (m | 0) ? (b[y2 >> 2] | 0) == (l | 0) : 0) {
                            E2 = 65;
                            break;
                          }
                          y2 = Gd(p2 | 0, r2 | 0, 1, 0) | 0;
                          p2 = Nd(y2 | 0, H() | 0, d2 | 0, e2 | 0) | 0;
                          r2 = H() | 0;
                          o = Gd(o | 0, n | 0, 1, 0) | 0;
                          n = H() | 0;
                          y2 = C3 + (p2 << 3) | 0;
                        } while (!((b[y2 >> 2] | 0) == (l | 0) ? (b[y2 + 4 >> 2] | 0) == (m | 0) : 0));
                        if ((E2 | 0) == 65 ? (E2 = 0, true & (q2 & 117440512 | 0) == 100663296) : 0) {
                          break;
                        }
                        y2 = c2 + (g2 << 3) | 0;
                        b[y2 >> 2] = k;
                        b[y2 + 4 >> 2] = f2;
                        g2 = Gd(g2 | 0, j | 0, 1, 0) | 0;
                        j = H() | 0;
                      }
                    } while (0);
                    h = Gd(h | 0, i | 0, 1, 0) | 0;
                    i = H() | 0;
                    if (!((i | 0) < (e2 | 0) | (i | 0) == (e2 | 0) & h >>> 0 < d2 >>> 0)) {
                      break;
                    }
                    f2 = D3 + (h << 3) | 0;
                    k = b[f2 >> 2] | 0;
                    f2 = b[f2 + 4 >> 2] | 0;
                  }
                  f2 = v3;
                } else {
                  g2 = 0;
                  f2 = v3;
                }
              } else {
                g2 = 0;
                a2 = 0;
                f2 = 0;
              }
            } while (0);
            Xd(C3 | 0, 0, B4 | 0) | 0;
            Wd(D3 | 0, w2 | 0, a2 << 3 | 0) | 0;
            Ed(w2);
            if ((a2 | 0) == 0 & (f2 | 0) == 0) {
              E2 = 89;
              break;
            } else {
              c2 = c2 + (g2 << 3) | 0;
              e2 = f2;
              d2 = a2;
            }
          }
          if ((E2 | 0) == 16) {
            if (true & (f2 & 117440512 | 0) == 0) {
              f2 = 4;
              E2 = 27;
            } else {
              E2 = 21;
            }
          } else if ((E2 | 0) == 31) {
            I(27795, 27122, 529, 27132);
          } else if ((E2 | 0) == 41) {
            Ed(D3);
            Ed(C3);
            E2 = 10;
            return E2 | 0;
          } else if ((E2 | 0) == 48) {
            Ed(D3);
            Ed(C3);
            E2 = 13;
            return E2 | 0;
          } else if ((E2 | 0) == 80) {
            I(27795, 27122, 620, 27132);
          } else if ((E2 | 0) == 81) {
            I(27795, 27122, 632, 27132);
          } else if ((E2 | 0) == 85) {
            Wd(c2 | 0, D3 | 0, d2 << 3 | 0) | 0;
            E2 = 89;
          }
          if ((E2 | 0) == 21) {
            Ed(D3);
            Ed(C3);
            E2 = 5;
            return E2 | 0;
          } else if ((E2 | 0) == 27) {
            Ed(D3);
            Ed(C3);
            E2 = f2;
            return E2 | 0;
          } else if ((E2 | 0) == 89) {
            Ed(D3);
            Ed(C3);
            E2 = 0;
            return E2 | 0;
          }
          return 0;
        }
        function Mb(a2, c2, d2, e2, f2, g2, h) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          h = h | 0;
          var i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0;
          q2 = T;
          T = T + 16 | 0;
          p2 = q2;
          if (!((d2 | 0) > 0 | (d2 | 0) == 0 & c2 >>> 0 > 0)) {
            p2 = 0;
            T = q2;
            return p2 | 0;
          }
          if ((h | 0) >= 16) {
            p2 = 12;
            T = q2;
            return p2 | 0;
          }
          n = 0;
          o = 0;
          m = 0;
          i = 0;
          a: while (1) {
            k = a2 + (n << 3) | 0;
            j = b[k >> 2] | 0;
            k = b[k + 4 >> 2] | 0;
            l = Qd(j | 0, k | 0, 52) | 0;
            H() | 0;
            if ((l & 15 | 0) > (h | 0)) {
              i = 12;
              j = 11;
              break;
            }
            fc(p2, j, k, h);
            l = p2;
            k = b[l >> 2] | 0;
            l = b[l + 4 >> 2] | 0;
            if ((k | 0) == 0 & (l | 0) == 0) {
              j = m;
            } else {
              j = m;
              do {
                if (!((i | 0) < (g2 | 0) | (i | 0) == (g2 | 0) & j >>> 0 < f2 >>> 0)) {
                  j = 10;
                  break a;
                }
                m = e2 + (j << 3) | 0;
                b[m >> 2] = k;
                b[m + 4 >> 2] = l;
                j = Gd(j | 0, i | 0, 1, 0) | 0;
                i = H() | 0;
                hc(p2);
                m = p2;
                k = b[m >> 2] | 0;
                l = b[m + 4 >> 2] | 0;
              } while (!((k | 0) == 0 & (l | 0) == 0));
            }
            n = Gd(n | 0, o | 0, 1, 0) | 0;
            o = H() | 0;
            if (!((o | 0) < (d2 | 0) | (o | 0) == (d2 | 0) & n >>> 0 < c2 >>> 0)) {
              i = 0;
              j = 11;
              break;
            } else {
              m = j;
            }
          }
          if ((j | 0) == 10) {
            p2 = 14;
            T = q2;
            return p2 | 0;
          } else if ((j | 0) == 11) {
            T = q2;
            return i | 0;
          }
          return 0;
        }
        function Nb(a2, c2, d2, e2, f2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0;
          n = T;
          T = T + 16 | 0;
          m = n;
          a: do {
            if ((d2 | 0) > 0 | (d2 | 0) == 0 & c2 >>> 0 > 0) {
              k = 0;
              h = 0;
              g2 = 0;
              l = 0;
              while (1) {
                j = a2 + (k << 3) | 0;
                i = b[j >> 2] | 0;
                j = b[j + 4 >> 2] | 0;
                if (!((i | 0) == 0 & (j | 0) == 0)) {
                  j = (Gb(i, j, e2, m) | 0) == 0;
                  i = m;
                  h = Gd(b[i >> 2] | 0, b[i + 4 >> 2] | 0, h | 0, g2 | 0) | 0;
                  g2 = H() | 0;
                  if (!j) {
                    g2 = 12;
                    break;
                  }
                }
                k = Gd(k | 0, l | 0, 1, 0) | 0;
                l = H() | 0;
                if (!((l | 0) < (d2 | 0) | (l | 0) == (d2 | 0) & k >>> 0 < c2 >>> 0)) {
                  break a;
                }
              }
              T = n;
              return g2 | 0;
            } else {
              h = 0;
              g2 = 0;
            }
          } while (0);
          b[f2 >> 2] = h;
          b[f2 + 4 >> 2] = g2;
          f2 = 0;
          T = n;
          return f2 | 0;
        }
        function Ob(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          b2 = Qd(a2 | 0, b2 | 0, 52) | 0;
          H() | 0;
          return b2 & 1 | 0;
        }
        function Pb(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0, d2 = 0, e2 = 0;
          e2 = Qd(a2 | 0, b2 | 0, 52) | 0;
          H() | 0;
          e2 = e2 & 15;
          if (!e2) {
            e2 = 0;
            return e2 | 0;
          }
          d2 = 1;
          while (1) {
            c2 = Qd(a2 | 0, b2 | 0, (15 - d2 | 0) * 3 | 0) | 0;
            H() | 0;
            c2 = c2 & 7;
            if (c2 | 0) {
              d2 = 5;
              break;
            }
            if (d2 >>> 0 < e2 >>> 0) {
              d2 = d2 + 1 | 0;
            } else {
              c2 = 0;
              d2 = 5;
              break;
            }
          }
          if ((d2 | 0) == 5) {
            return c2 | 0;
          }
          return 0;
        }
        function Qb(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
          i = Qd(a2 | 0, b2 | 0, 52) | 0;
          H() | 0;
          i = i & 15;
          if (!i) {
            h = b2;
            i = a2;
            G(h | 0);
            return i | 0;
          }
          h = 1;
          c2 = 0;
          while (1) {
            f2 = (15 - h | 0) * 3 | 0;
            d2 = Rd(7, 0, f2 | 0) | 0;
            e2 = H() | 0;
            g2 = Qd(a2 | 0, b2 | 0, f2 | 0) | 0;
            H() | 0;
            f2 = Rd($a(g2 & 7) | 0, 0, f2 | 0) | 0;
            g2 = H() | 0;
            a2 = f2 | a2 & ~d2;
            b2 = g2 | b2 & ~e2;
            a: do {
              if (!c2) {
                if (!((f2 & d2 | 0) == 0 & (g2 & e2 | 0) == 0)) {
                  d2 = Qd(a2 | 0, b2 | 0, 52) | 0;
                  H() | 0;
                  d2 = d2 & 15;
                  if (!d2) {
                    c2 = 1;
                  } else {
                    c2 = 1;
                    b: while (1) {
                      g2 = Qd(a2 | 0, b2 | 0, (15 - c2 | 0) * 3 | 0) | 0;
                      H() | 0;
                      switch (g2 & 7) {
                        case 1:
                          break b;
                        case 0:
                          break;
                        default: {
                          c2 = 1;
                          break a;
                        }
                      }
                      if (c2 >>> 0 < d2 >>> 0) {
                        c2 = c2 + 1 | 0;
                      } else {
                        c2 = 1;
                        break a;
                      }
                    }
                    c2 = 1;
                    while (1) {
                      g2 = (15 - c2 | 0) * 3 | 0;
                      e2 = Qd(a2 | 0, b2 | 0, g2 | 0) | 0;
                      H() | 0;
                      f2 = Rd(7, 0, g2 | 0) | 0;
                      b2 = b2 & ~(H() | 0);
                      g2 = Rd($a(e2 & 7) | 0, 0, g2 | 0) | 0;
                      a2 = a2 & ~f2 | g2;
                      b2 = b2 | (H() | 0);
                      if (c2 >>> 0 < d2 >>> 0) {
                        c2 = c2 + 1 | 0;
                      } else {
                        c2 = 1;
                        break;
                      }
                    }
                  }
                } else {
                  c2 = 0;
                }
              }
            } while (0);
            if (h >>> 0 < i >>> 0) {
              h = h + 1 | 0;
            } else {
              break;
            }
          }
          G(b2 | 0);
          return a2 | 0;
        }
        function Rb(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0;
          d2 = Qd(a2 | 0, b2 | 0, 52) | 0;
          H() | 0;
          d2 = d2 & 15;
          if (!d2) {
            c2 = b2;
            d2 = a2;
            G(c2 | 0);
            return d2 | 0;
          }
          c2 = 1;
          while (1) {
            f2 = (15 - c2 | 0) * 3 | 0;
            g2 = Qd(a2 | 0, b2 | 0, f2 | 0) | 0;
            H() | 0;
            e2 = Rd(7, 0, f2 | 0) | 0;
            b2 = b2 & ~(H() | 0);
            f2 = Rd($a(g2 & 7) | 0, 0, f2 | 0) | 0;
            a2 = f2 | a2 & ~e2;
            b2 = H() | 0 | b2;
            if (c2 >>> 0 < d2 >>> 0) {
              c2 = c2 + 1 | 0;
            } else {
              break;
            }
          }
          G(b2 | 0);
          return a2 | 0;
        }
        function Sb(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
          i = Qd(a2 | 0, b2 | 0, 52) | 0;
          H() | 0;
          i = i & 15;
          if (!i) {
            h = b2;
            i = a2;
            G(h | 0);
            return i | 0;
          }
          h = 1;
          c2 = 0;
          while (1) {
            f2 = (15 - h | 0) * 3 | 0;
            d2 = Rd(7, 0, f2 | 0) | 0;
            e2 = H() | 0;
            g2 = Qd(a2 | 0, b2 | 0, f2 | 0) | 0;
            H() | 0;
            f2 = Rd(ab4(g2 & 7) | 0, 0, f2 | 0) | 0;
            g2 = H() | 0;
            a2 = f2 | a2 & ~d2;
            b2 = g2 | b2 & ~e2;
            a: do {
              if (!c2) {
                if (!((f2 & d2 | 0) == 0 & (g2 & e2 | 0) == 0)) {
                  d2 = Qd(a2 | 0, b2 | 0, 52) | 0;
                  H() | 0;
                  d2 = d2 & 15;
                  if (!d2) {
                    c2 = 1;
                  } else {
                    c2 = 1;
                    b: while (1) {
                      g2 = Qd(a2 | 0, b2 | 0, (15 - c2 | 0) * 3 | 0) | 0;
                      H() | 0;
                      switch (g2 & 7) {
                        case 1:
                          break b;
                        case 0:
                          break;
                        default: {
                          c2 = 1;
                          break a;
                        }
                      }
                      if (c2 >>> 0 < d2 >>> 0) {
                        c2 = c2 + 1 | 0;
                      } else {
                        c2 = 1;
                        break a;
                      }
                    }
                    c2 = 1;
                    while (1) {
                      e2 = (15 - c2 | 0) * 3 | 0;
                      f2 = Rd(7, 0, e2 | 0) | 0;
                      g2 = b2 & ~(H() | 0);
                      b2 = Qd(a2 | 0, b2 | 0, e2 | 0) | 0;
                      H() | 0;
                      b2 = Rd(ab4(b2 & 7) | 0, 0, e2 | 0) | 0;
                      a2 = a2 & ~f2 | b2;
                      b2 = g2 | (H() | 0);
                      if (c2 >>> 0 < d2 >>> 0) {
                        c2 = c2 + 1 | 0;
                      } else {
                        c2 = 1;
                        break;
                      }
                    }
                  }
                } else {
                  c2 = 0;
                }
              }
            } while (0);
            if (h >>> 0 < i >>> 0) {
              h = h + 1 | 0;
            } else {
              break;
            }
          }
          G(b2 | 0);
          return a2 | 0;
        }
        function Tb(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0;
          d2 = Qd(a2 | 0, b2 | 0, 52) | 0;
          H() | 0;
          d2 = d2 & 15;
          if (!d2) {
            c2 = b2;
            d2 = a2;
            G(c2 | 0);
            return d2 | 0;
          }
          c2 = 1;
          while (1) {
            g2 = (15 - c2 | 0) * 3 | 0;
            f2 = Rd(7, 0, g2 | 0) | 0;
            e2 = b2 & ~(H() | 0);
            b2 = Qd(a2 | 0, b2 | 0, g2 | 0) | 0;
            H() | 0;
            b2 = Rd(ab4(b2 & 7) | 0, 0, g2 | 0) | 0;
            a2 = b2 | a2 & ~f2;
            b2 = H() | 0 | e2;
            if (c2 >>> 0 < d2 >>> 0) {
              c2 = c2 + 1 | 0;
            } else {
              break;
            }
          }
          G(b2 | 0);
          return a2 | 0;
        }
        function Ub(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0;
          j = T;
          T = T + 64 | 0;
          i = j + 40 | 0;
          e2 = j + 24 | 0;
          f2 = j + 12 | 0;
          g2 = j;
          Rd(c2 | 0, 0, 52) | 0;
          d2 = H() | 0 | 134225919;
          if (!c2) {
            if ((b[a2 + 4 >> 2] | 0) > 2) {
              h = 0;
              i = 0;
              G(h | 0);
              T = j;
              return i | 0;
            }
            if ((b[a2 + 8 >> 2] | 0) > 2) {
              h = 0;
              i = 0;
              G(h | 0);
              T = j;
              return i | 0;
            }
            if ((b[a2 + 12 >> 2] | 0) > 2) {
              h = 0;
              i = 0;
              G(h | 0);
              T = j;
              return i | 0;
            }
            Rd(qa(a2) | 0, 0, 45) | 0;
            h = H() | 0 | d2;
            i = -1;
            G(h | 0);
            T = j;
            return i | 0;
          }
          b[i >> 2] = b[a2 >> 2];
          b[i + 4 >> 2] = b[a2 + 4 >> 2];
          b[i + 8 >> 2] = b[a2 + 8 >> 2];
          b[i + 12 >> 2] = b[a2 + 12 >> 2];
          h = i + 4 | 0;
          if ((c2 | 0) > 0) {
            a2 = -1;
            while (1) {
              b[e2 >> 2] = b[h >> 2];
              b[e2 + 4 >> 2] = b[h + 4 >> 2];
              b[e2 + 8 >> 2] = b[h + 8 >> 2];
              if (!(c2 & 1)) {
                Va(h);
                b[f2 >> 2] = b[h >> 2];
                b[f2 + 4 >> 2] = b[h + 4 >> 2];
                b[f2 + 8 >> 2] = b[h + 8 >> 2];
                Xa(f2);
              } else {
                Ua(h);
                b[f2 >> 2] = b[h >> 2];
                b[f2 + 4 >> 2] = b[h + 4 >> 2];
                b[f2 + 8 >> 2] = b[h + 8 >> 2];
                Wa(f2);
              }
              Pa(e2, f2, g2);
              Ma(g2);
              l = (15 - c2 | 0) * 3 | 0;
              k = Rd(7, 0, l | 0) | 0;
              d2 = d2 & ~(H() | 0);
              l = Rd(Ra(g2) | 0, 0, l | 0) | 0;
              a2 = l | a2 & ~k;
              d2 = H() | 0 | d2;
              if ((c2 | 0) > 1) {
                c2 = c2 + -1 | 0;
              } else {
                break;
              }
            }
          } else {
            a2 = -1;
          }
          a: do {
            if (((b[h >> 2] | 0) <= 2 ? (b[i + 8 >> 2] | 0) <= 2 : 0) ? (b[i + 12 >> 2] | 0) <= 2 : 0) {
              e2 = qa(i) | 0;
              c2 = Rd(e2 | 0, 0, 45) | 0;
              c2 = c2 | a2;
              a2 = H() | 0 | d2 & -1040385;
              g2 = ra(i) | 0;
              if (!(oa(e2) | 0)) {
                if ((g2 | 0) <= 0) {
                  break;
                }
                f2 = 0;
                while (1) {
                  e2 = Qd(c2 | 0, a2 | 0, 52) | 0;
                  H() | 0;
                  e2 = e2 & 15;
                  if (e2) {
                    d2 = 1;
                    while (1) {
                      l = (15 - d2 | 0) * 3 | 0;
                      i = Qd(c2 | 0, a2 | 0, l | 0) | 0;
                      H() | 0;
                      k = Rd(7, 0, l | 0) | 0;
                      a2 = a2 & ~(H() | 0);
                      l = Rd($a(i & 7) | 0, 0, l | 0) | 0;
                      c2 = c2 & ~k | l;
                      a2 = a2 | (H() | 0);
                      if (d2 >>> 0 < e2 >>> 0) {
                        d2 = d2 + 1 | 0;
                      } else {
                        break;
                      }
                    }
                  }
                  f2 = f2 + 1 | 0;
                  if ((f2 | 0) == (g2 | 0)) {
                    break a;
                  }
                }
              }
              f2 = Qd(c2 | 0, a2 | 0, 52) | 0;
              H() | 0;
              f2 = f2 & 15;
              b: do {
                if (f2) {
                  d2 = 1;
                  c: while (1) {
                    l = Qd(c2 | 0, a2 | 0, (15 - d2 | 0) * 3 | 0) | 0;
                    H() | 0;
                    switch (l & 7) {
                      case 1:
                        break c;
                      case 0:
                        break;
                      default:
                        break b;
                    }
                    if (d2 >>> 0 < f2 >>> 0) {
                      d2 = d2 + 1 | 0;
                    } else {
                      break b;
                    }
                  }
                  if (ua(e2, b[i >> 2] | 0) | 0) {
                    d2 = 1;
                    while (1) {
                      i = (15 - d2 | 0) * 3 | 0;
                      k = Rd(7, 0, i | 0) | 0;
                      l = a2 & ~(H() | 0);
                      a2 = Qd(c2 | 0, a2 | 0, i | 0) | 0;
                      H() | 0;
                      a2 = Rd(ab4(a2 & 7) | 0, 0, i | 0) | 0;
                      c2 = c2 & ~k | a2;
                      a2 = l | (H() | 0);
                      if (d2 >>> 0 < f2 >>> 0) {
                        d2 = d2 + 1 | 0;
                      } else {
                        break;
                      }
                    }
                  } else {
                    d2 = 1;
                    while (1) {
                      l = (15 - d2 | 0) * 3 | 0;
                      i = Qd(c2 | 0, a2 | 0, l | 0) | 0;
                      H() | 0;
                      k = Rd(7, 0, l | 0) | 0;
                      a2 = a2 & ~(H() | 0);
                      l = Rd($a(i & 7) | 0, 0, l | 0) | 0;
                      c2 = c2 & ~k | l;
                      a2 = a2 | (H() | 0);
                      if (d2 >>> 0 < f2 >>> 0) {
                        d2 = d2 + 1 | 0;
                      } else {
                        break;
                      }
                    }
                  }
                }
              } while (0);
              if ((g2 | 0) > 0) {
                d2 = 0;
                do {
                  c2 = Qb(c2, a2) | 0;
                  a2 = H() | 0;
                  d2 = d2 + 1 | 0;
                } while ((d2 | 0) != (g2 | 0));
              }
            } else {
              c2 = 0;
              a2 = 0;
            }
          } while (0);
          k = a2;
          l = c2;
          G(k | 0);
          T = j;
          return l | 0;
        }
        function Vb(a2) {
          a2 = a2 | 0;
          return (a2 | 0) % 2 | 0 | 0;
        }
        function Wb(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0;
          f2 = T;
          T = T + 16 | 0;
          e2 = f2;
          if (c2 >>> 0 > 15) {
            e2 = 4;
            T = f2;
            return e2 | 0;
          }
          if ((b[a2 + 4 >> 2] & 2146435072 | 0) == 2146435072) {
            e2 = 3;
            T = f2;
            return e2 | 0;
          }
          if ((b[a2 + 8 + 4 >> 2] & 2146435072 | 0) == 2146435072) {
            e2 = 3;
            T = f2;
            return e2 | 0;
          }
          qb(a2, c2, e2);
          c2 = Ub(e2, c2) | 0;
          e2 = H() | 0;
          b[d2 >> 2] = c2;
          b[d2 + 4 >> 2] = e2;
          if ((c2 | 0) == 0 & (e2 | 0) == 0) {
            I(27795, 27122, 959, 27145);
          }
          e2 = 0;
          T = f2;
          return e2 | 0;
        }
        function Xb(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h = 0;
          f2 = d2 + 4 | 0;
          g2 = Qd(a2 | 0, c2 | 0, 52) | 0;
          H() | 0;
          g2 = g2 & 15;
          h = Qd(a2 | 0, c2 | 0, 45) | 0;
          H() | 0;
          e2 = (g2 | 0) == 0;
          if (!(oa(h & 127) | 0)) {
            if (e2) {
              h = 0;
              return h | 0;
            }
            if ((b[f2 >> 2] | 0) == 0 ? (b[d2 + 8 >> 2] | 0) == 0 : 0) {
              e2 = (b[d2 + 12 >> 2] | 0) != 0 & 1;
            } else {
              e2 = 1;
            }
          } else if (e2) {
            h = 1;
            return h | 0;
          } else {
            e2 = 1;
          }
          d2 = 1;
          while (1) {
            if (!(d2 & 1)) {
              Xa(f2);
            } else {
              Wa(f2);
            }
            h = Qd(a2 | 0, c2 | 0, (15 - d2 | 0) * 3 | 0) | 0;
            H() | 0;
            Ya(f2, h & 7);
            if (d2 >>> 0 < g2 >>> 0) {
              d2 = d2 + 1 | 0;
            } else {
              break;
            }
          }
          return e2 | 0;
        }
        function Yb(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0;
          l = T;
          T = T + 16 | 0;
          j = l;
          k = Qd(a2 | 0, c2 | 0, 45) | 0;
          H() | 0;
          k = k & 127;
          if (k >>> 0 > 121) {
            b[d2 >> 2] = 0;
            b[d2 + 4 >> 2] = 0;
            b[d2 + 8 >> 2] = 0;
            b[d2 + 12 >> 2] = 0;
            k = 5;
            T = l;
            return k | 0;
          }
          a: do {
            if ((oa(k) | 0) != 0 ? (g2 = Qd(a2 | 0, c2 | 0, 52) | 0, H() | 0, g2 = g2 & 15, (g2 | 0) != 0) : 0) {
              e2 = 1;
              b: while (1) {
                i = Qd(a2 | 0, c2 | 0, (15 - e2 | 0) * 3 | 0) | 0;
                H() | 0;
                switch (i & 7) {
                  case 5:
                    break b;
                  case 0:
                    break;
                  default: {
                    e2 = c2;
                    break a;
                  }
                }
                if (e2 >>> 0 < g2 >>> 0) {
                  e2 = e2 + 1 | 0;
                } else {
                  e2 = c2;
                  break a;
                }
              }
              f2 = 1;
              e2 = c2;
              while (1) {
                c2 = (15 - f2 | 0) * 3 | 0;
                h = Rd(7, 0, c2 | 0) | 0;
                i = e2 & ~(H() | 0);
                e2 = Qd(a2 | 0, e2 | 0, c2 | 0) | 0;
                H() | 0;
                e2 = Rd(ab4(e2 & 7) | 0, 0, c2 | 0) | 0;
                a2 = a2 & ~h | e2;
                e2 = i | (H() | 0);
                if (f2 >>> 0 < g2 >>> 0) {
                  f2 = f2 + 1 | 0;
                } else {
                  break;
                }
              }
            } else {
              e2 = c2;
            }
          } while (0);
          i = 7696 + (k * 28 | 0) | 0;
          b[d2 >> 2] = b[i >> 2];
          b[d2 + 4 >> 2] = b[i + 4 >> 2];
          b[d2 + 8 >> 2] = b[i + 8 >> 2];
          b[d2 + 12 >> 2] = b[i + 12 >> 2];
          if (!(Xb(a2, e2, d2) | 0)) {
            k = 0;
            T = l;
            return k | 0;
          }
          h = d2 + 4 | 0;
          b[j >> 2] = b[h >> 2];
          b[j + 4 >> 2] = b[h + 4 >> 2];
          b[j + 8 >> 2] = b[h + 8 >> 2];
          g2 = Qd(a2 | 0, e2 | 0, 52) | 0;
          H() | 0;
          i = g2 & 15;
          if (!(g2 & 1)) {
            g2 = i;
          } else {
            Xa(h);
            g2 = i + 1 | 0;
          }
          if (!(oa(k) | 0)) {
            e2 = 0;
          } else {
            c: do {
              if (!i) {
                e2 = 0;
              } else {
                c2 = 1;
                while (1) {
                  f2 = Qd(a2 | 0, e2 | 0, (15 - c2 | 0) * 3 | 0) | 0;
                  H() | 0;
                  f2 = f2 & 7;
                  if (f2 | 0) {
                    e2 = f2;
                    break c;
                  }
                  if (c2 >>> 0 < i >>> 0) {
                    c2 = c2 + 1 | 0;
                  } else {
                    e2 = 0;
                    break;
                  }
                }
              }
            } while (0);
            e2 = (e2 | 0) == 4 & 1;
          }
          if (!(xb(d2, g2, e2, 0) | 0)) {
            if ((g2 | 0) != (i | 0)) {
              b[h >> 2] = b[j >> 2];
              b[h + 4 >> 2] = b[j + 4 >> 2];
              b[h + 8 >> 2] = b[j + 8 >> 2];
            }
          } else {
            if (oa(k) | 0) {
              do {
              } while ((xb(d2, g2, 0, 0) | 0) != 0);
            }
            if ((g2 | 0) != (i | 0)) {
              Va(h);
            }
          }
          k = 0;
          T = l;
          return k | 0;
        }
        function Zb(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          var d2 = 0, e2 = 0, f2 = 0;
          f2 = T;
          T = T + 16 | 0;
          d2 = f2;
          e2 = Yb(a2, b2, d2) | 0;
          if (e2 | 0) {
            T = f2;
            return e2 | 0;
          }
          e2 = Qd(a2 | 0, b2 | 0, 52) | 0;
          H() | 0;
          ub(d2, e2 & 15, c2);
          e2 = 0;
          T = f2;
          return e2 | 0;
        }
        function _b2(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0;
          g2 = T;
          T = T + 16 | 0;
          f2 = g2;
          d2 = Yb(a2, b2, f2) | 0;
          if (d2 | 0) {
            f2 = d2;
            T = g2;
            return f2 | 0;
          }
          d2 = Qd(a2 | 0, b2 | 0, 45) | 0;
          H() | 0;
          d2 = (oa(d2 & 127) | 0) == 0;
          e2 = Qd(a2 | 0, b2 | 0, 52) | 0;
          H() | 0;
          e2 = e2 & 15;
          a: do {
            if (!d2) {
              if (e2 | 0) {
                d2 = 1;
                while (1) {
                  h = Rd(7, 0, (15 - d2 | 0) * 3 | 0) | 0;
                  if (!((h & a2 | 0) == 0 & ((H() | 0) & b2 | 0) == 0)) {
                    break a;
                  }
                  if (d2 >>> 0 < e2 >>> 0) {
                    d2 = d2 + 1 | 0;
                  } else {
                    break;
                  }
                }
              }
              vb(f2, e2, 0, 5, c2);
              h = 0;
              T = g2;
              return h | 0;
            }
          } while (0);
          zb(f2, e2, 0, 6, c2);
          h = 0;
          T = g2;
          return h | 0;
        }
        function $b(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0;
          f2 = Qd(a2 | 0, c2 | 0, 45) | 0;
          H() | 0;
          if (!(oa(f2 & 127) | 0)) {
            f2 = 2;
            b[d2 >> 2] = f2;
            return 0;
          }
          f2 = Qd(a2 | 0, c2 | 0, 52) | 0;
          H() | 0;
          f2 = f2 & 15;
          if (!f2) {
            f2 = 5;
            b[d2 >> 2] = f2;
            return 0;
          }
          e2 = 1;
          while (1) {
            g2 = Rd(7, 0, (15 - e2 | 0) * 3 | 0) | 0;
            if (!((g2 & a2 | 0) == 0 & ((H() | 0) & c2 | 0) == 0)) {
              e2 = 2;
              a2 = 6;
              break;
            }
            if (e2 >>> 0 < f2 >>> 0) {
              e2 = e2 + 1 | 0;
            } else {
              e2 = 5;
              a2 = 6;
              break;
            }
          }
          if ((a2 | 0) == 6) {
            b[d2 >> 2] = e2;
            return 0;
          }
          return 0;
        }
        function ac2(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0;
          m = T;
          T = T + 128 | 0;
          k = m + 112 | 0;
          g2 = m + 96 | 0;
          l = m;
          f2 = Qd(a2 | 0, c2 | 0, 52) | 0;
          H() | 0;
          i = f2 & 15;
          b[k >> 2] = i;
          h = Qd(a2 | 0, c2 | 0, 45) | 0;
          H() | 0;
          h = h & 127;
          a: do {
            if (oa(h) | 0) {
              if (i | 0) {
                e2 = 1;
                while (1) {
                  j = Rd(7, 0, (15 - e2 | 0) * 3 | 0) | 0;
                  if (!((j & a2 | 0) == 0 & ((H() | 0) & c2 | 0) == 0)) {
                    f2 = 0;
                    break a;
                  }
                  if (e2 >>> 0 < i >>> 0) {
                    e2 = e2 + 1 | 0;
                  } else {
                    break;
                  }
                }
              }
              if (!(f2 & 1)) {
                j = Rd(i + 1 | 0, 0, 52) | 0;
                l = H() | 0 | c2 & -15728641;
                k = Rd(7, 0, (14 - i | 0) * 3 | 0) | 0;
                l = ac2((j | a2) & ~k, l & ~(H() | 0), d2) | 0;
                T = m;
                return l | 0;
              } else {
                f2 = 1;
              }
            } else {
              f2 = 0;
            }
          } while (0);
          e2 = Yb(a2, c2, g2) | 0;
          if (!e2) {
            if (f2) {
              wb(g2, k, l);
              j = 5;
            } else {
              Ab(g2, k, l);
              j = 6;
            }
            b: do {
              if (oa(h) | 0) {
                if (!i) {
                  a2 = 5;
                } else {
                  e2 = 1;
                  while (1) {
                    h = Rd(7, 0, (15 - e2 | 0) * 3 | 0) | 0;
                    if (!((h & a2 | 0) == 0 & ((H() | 0) & c2 | 0) == 0)) {
                      a2 = 2;
                      break b;
                    }
                    if (e2 >>> 0 < i >>> 0) {
                      e2 = e2 + 1 | 0;
                    } else {
                      a2 = 5;
                      break;
                    }
                  }
                }
              } else {
                a2 = 2;
              }
            } while (0);
            Xd(d2 | 0, -1, a2 << 2 | 0) | 0;
            c: do {
              if (f2) {
                g2 = 0;
                while (1) {
                  h = l + (g2 << 4) | 0;
                  yb(h, b[k >> 2] | 0) | 0;
                  h = b[h >> 2] | 0;
                  i = b[d2 >> 2] | 0;
                  if ((i | 0) == -1 | (i | 0) == (h | 0)) {
                    e2 = d2;
                  } else {
                    f2 = 0;
                    do {
                      f2 = f2 + 1 | 0;
                      if (f2 >>> 0 >= a2 >>> 0) {
                        e2 = 1;
                        break c;
                      }
                      e2 = d2 + (f2 << 2) | 0;
                      i = b[e2 >> 2] | 0;
                    } while (!((i | 0) == -1 | (i | 0) == (h | 0)));
                  }
                  b[e2 >> 2] = h;
                  g2 = g2 + 1 | 0;
                  if (g2 >>> 0 >= j >>> 0) {
                    e2 = 0;
                    break;
                  }
                }
              } else {
                g2 = 0;
                while (1) {
                  h = l + (g2 << 4) | 0;
                  xb(h, b[k >> 2] | 0, 0, 1) | 0;
                  h = b[h >> 2] | 0;
                  i = b[d2 >> 2] | 0;
                  if ((i | 0) == -1 | (i | 0) == (h | 0)) {
                    e2 = d2;
                  } else {
                    f2 = 0;
                    do {
                      f2 = f2 + 1 | 0;
                      if (f2 >>> 0 >= a2 >>> 0) {
                        e2 = 1;
                        break c;
                      }
                      e2 = d2 + (f2 << 2) | 0;
                      i = b[e2 >> 2] | 0;
                    } while (!((i | 0) == -1 | (i | 0) == (h | 0)));
                  }
                  b[e2 >> 2] = h;
                  g2 = g2 + 1 | 0;
                  if (g2 >>> 0 >= j >>> 0) {
                    e2 = 0;
                    break;
                  }
                }
              }
            } while (0);
          }
          l = e2;
          T = m;
          return l | 0;
        }
        function bc4() {
          return 12;
        }
        function cc2(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0;
          if (a2 >>> 0 > 15) {
            i = 4;
            return i | 0;
          }
          Rd(a2 | 0, 0, 52) | 0;
          i = H() | 0 | 134225919;
          if (!a2) {
            d2 = 0;
            e2 = 0;
            do {
              if (oa(e2) | 0) {
                Rd(e2 | 0, 0, 45) | 0;
                h = i | (H() | 0);
                a2 = c2 + (d2 << 3) | 0;
                b[a2 >> 2] = -1;
                b[a2 + 4 >> 2] = h;
                d2 = d2 + 1 | 0;
              }
              e2 = e2 + 1 | 0;
            } while ((e2 | 0) != 122);
            d2 = 0;
            return d2 | 0;
          }
          d2 = 0;
          h = 0;
          do {
            if (oa(h) | 0) {
              Rd(h | 0, 0, 45) | 0;
              e2 = 1;
              f2 = -1;
              g2 = i | (H() | 0);
              while (1) {
                j = Rd(7, 0, (15 - e2 | 0) * 3 | 0) | 0;
                f2 = f2 & ~j;
                g2 = g2 & ~(H() | 0);
                if ((e2 | 0) == (a2 | 0)) {
                  break;
                } else {
                  e2 = e2 + 1 | 0;
                }
              }
              j = c2 + (d2 << 3) | 0;
              b[j >> 2] = f2;
              b[j + 4 >> 2] = g2;
              d2 = d2 + 1 | 0;
            }
            h = h + 1 | 0;
          } while ((h | 0) != 122);
          d2 = 0;
          return d2 | 0;
        }
        function dc(a2, c2, d2, e2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0;
          t2 = T;
          T = T + 16 | 0;
          r2 = t2;
          s2 = Qd(a2 | 0, c2 | 0, 52) | 0;
          H() | 0;
          s2 = s2 & 15;
          if (d2 >>> 0 > 15) {
            s2 = 4;
            T = t2;
            return s2 | 0;
          }
          if ((s2 | 0) < (d2 | 0)) {
            s2 = 12;
            T = t2;
            return s2 | 0;
          }
          if ((s2 | 0) != (d2 | 0)) {
            g2 = Rd(d2 | 0, 0, 52) | 0;
            g2 = g2 | a2;
            i = H() | 0 | c2 & -15728641;
            if ((s2 | 0) > (d2 | 0)) {
              j = d2;
              do {
                q2 = Rd(7, 0, (14 - j | 0) * 3 | 0) | 0;
                j = j + 1 | 0;
                g2 = q2 | g2;
                i = H() | 0 | i;
              } while ((j | 0) < (s2 | 0));
              q2 = g2;
            } else {
              q2 = g2;
            }
          } else {
            q2 = a2;
            i = c2;
          }
          p2 = Qd(q2 | 0, i | 0, 45) | 0;
          H() | 0;
          a: do {
            if (oa(p2 & 127) | 0) {
              j = Qd(q2 | 0, i | 0, 52) | 0;
              H() | 0;
              j = j & 15;
              if (j | 0) {
                g2 = 1;
                while (1) {
                  p2 = Rd(7, 0, (15 - g2 | 0) * 3 | 0) | 0;
                  if (!((p2 & q2 | 0) == 0 & ((H() | 0) & i | 0) == 0)) {
                    k = 33;
                    break a;
                  }
                  if (g2 >>> 0 < j >>> 0) {
                    g2 = g2 + 1 | 0;
                  } else {
                    break;
                  }
                }
              }
              p2 = e2;
              b[p2 >> 2] = 0;
              b[p2 + 4 >> 2] = 0;
              if ((s2 | 0) > (d2 | 0)) {
                p2 = c2 & -15728641;
                o = s2;
                while (1) {
                  n = o;
                  o = o + -1 | 0;
                  if (o >>> 0 > 15 | (s2 | 0) < (o | 0)) {
                    k = 19;
                    break;
                  }
                  if ((s2 | 0) != (o | 0)) {
                    g2 = Rd(o | 0, 0, 52) | 0;
                    g2 = g2 | a2;
                    j = H() | 0 | p2;
                    if ((s2 | 0) < (n | 0)) {
                      m = g2;
                    } else {
                      k = o;
                      do {
                        m = Rd(7, 0, (14 - k | 0) * 3 | 0) | 0;
                        k = k + 1 | 0;
                        g2 = m | g2;
                        j = H() | 0 | j;
                      } while ((k | 0) < (s2 | 0));
                      m = g2;
                    }
                  } else {
                    m = a2;
                    j = c2;
                  }
                  l = Qd(m | 0, j | 0, 45) | 0;
                  H() | 0;
                  if (!(oa(l & 127) | 0)) {
                    g2 = 0;
                  } else {
                    l = Qd(m | 0, j | 0, 52) | 0;
                    H() | 0;
                    l = l & 15;
                    b: do {
                      if (!l) {
                        g2 = 0;
                      } else {
                        k = 1;
                        while (1) {
                          g2 = Qd(m | 0, j | 0, (15 - k | 0) * 3 | 0) | 0;
                          H() | 0;
                          g2 = g2 & 7;
                          if (g2 | 0) {
                            break b;
                          }
                          if (k >>> 0 < l >>> 0) {
                            k = k + 1 | 0;
                          } else {
                            g2 = 0;
                            break;
                          }
                        }
                      }
                    } while (0);
                    g2 = (g2 | 0) == 0 & 1;
                  }
                  j = Qd(a2 | 0, c2 | 0, (15 - n | 0) * 3 | 0) | 0;
                  H() | 0;
                  j = j & 7;
                  if ((j | 0) == 7) {
                    f2 = 5;
                    k = 42;
                    break;
                  }
                  g2 = (g2 | 0) != 0;
                  if ((j | 0) == 1 & g2) {
                    f2 = 5;
                    k = 42;
                    break;
                  }
                  m = j + (((j | 0) != 0 & g2) << 31 >> 31) | 0;
                  if (m | 0) {
                    k = s2 - n | 0;
                    k = Oc(7, 0, k, ((k | 0) < 0) << 31 >> 31) | 0;
                    l = H() | 0;
                    if (g2) {
                      g2 = Md(k | 0, l | 0, 5, 0) | 0;
                      g2 = Gd(g2 | 0, H() | 0, -5, -1) | 0;
                      g2 = Kd(g2 | 0, H() | 0, 6, 0) | 0;
                      g2 = Gd(g2 | 0, H() | 0, 1, 0) | 0;
                      j = H() | 0;
                    } else {
                      g2 = k;
                      j = l;
                    }
                    n = m + -1 | 0;
                    n = Md(k | 0, l | 0, n | 0, ((n | 0) < 0) << 31 >> 31 | 0) | 0;
                    n = Gd(g2 | 0, j | 0, n | 0, H() | 0) | 0;
                    m = H() | 0;
                    l = e2;
                    l = Gd(n | 0, m | 0, b[l >> 2] | 0, b[l + 4 >> 2] | 0) | 0;
                    m = H() | 0;
                    n = e2;
                    b[n >> 2] = l;
                    b[n + 4 >> 2] = m;
                  }
                  if ((o | 0) <= (d2 | 0)) {
                    k = 37;
                    break;
                  }
                }
                if ((k | 0) == 19) {
                  I(27795, 27122, 1276, 27158);
                } else if ((k | 0) == 37) {
                  h = e2;
                  f2 = b[h + 4 >> 2] | 0;
                  h = b[h >> 2] | 0;
                  break;
                } else if ((k | 0) == 42) {
                  T = t2;
                  return f2 | 0;
                }
              } else {
                f2 = 0;
                h = 0;
              }
            } else {
              k = 33;
            }
          } while (0);
          c: do {
            if ((k | 0) == 33) {
              p2 = e2;
              b[p2 >> 2] = 0;
              b[p2 + 4 >> 2] = 0;
              if ((s2 | 0) > (d2 | 0)) {
                g2 = s2;
                while (1) {
                  f2 = Qd(a2 | 0, c2 | 0, (15 - g2 | 0) * 3 | 0) | 0;
                  H() | 0;
                  f2 = f2 & 7;
                  if ((f2 | 0) == 7) {
                    f2 = 5;
                    break;
                  }
                  h = s2 - g2 | 0;
                  h = Oc(7, 0, h, ((h | 0) < 0) << 31 >> 31) | 0;
                  f2 = Md(h | 0, H() | 0, f2 | 0, 0) | 0;
                  h = H() | 0;
                  p2 = e2;
                  h = Gd(b[p2 >> 2] | 0, b[p2 + 4 >> 2] | 0, f2 | 0, h | 0) | 0;
                  f2 = H() | 0;
                  p2 = e2;
                  b[p2 >> 2] = h;
                  b[p2 + 4 >> 2] = f2;
                  g2 = g2 + -1 | 0;
                  if ((g2 | 0) <= (d2 | 0)) {
                    break c;
                  }
                }
                T = t2;
                return f2 | 0;
              } else {
                f2 = 0;
                h = 0;
              }
            }
          } while (0);
          if (Gb(q2, i, s2, r2) | 0) {
            I(27795, 27122, 1236, 27173);
          }
          s2 = r2;
          r2 = b[s2 + 4 >> 2] | 0;
          if (((f2 | 0) > -1 | (f2 | 0) == -1 & h >>> 0 > 4294967295) & ((r2 | 0) > (f2 | 0) | ((r2 | 0) == (f2 | 0) ? (b[s2 >> 2] | 0) >>> 0 > h >>> 0 : 0))) {
            s2 = 0;
            T = t2;
            return s2 | 0;
          } else {
            I(27795, 27122, 1316, 27158);
          }
          return 0;
        }
        function ec(a2, c2, d2, e2, f2, g2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          var h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0;
          m = T;
          T = T + 16 | 0;
          h = m;
          if (f2 >>> 0 > 15) {
            g2 = 4;
            T = m;
            return g2 | 0;
          }
          i = Qd(d2 | 0, e2 | 0, 52) | 0;
          H() | 0;
          i = i & 15;
          if ((i | 0) > (f2 | 0)) {
            g2 = 12;
            T = m;
            return g2 | 0;
          }
          if (Gb(d2, e2, f2, h) | 0) {
            I(27795, 27122, 1236, 27173);
          }
          l = h;
          k = b[l + 4 >> 2] | 0;
          if (!(((c2 | 0) > -1 | (c2 | 0) == -1 & a2 >>> 0 > 4294967295) & ((k | 0) > (c2 | 0) | ((k | 0) == (c2 | 0) ? (b[l >> 2] | 0) >>> 0 > a2 >>> 0 : 0)))) {
            g2 = 2;
            T = m;
            return g2 | 0;
          }
          l = f2 - i | 0;
          f2 = Rd(f2 | 0, 0, 52) | 0;
          j = H() | 0 | e2 & -15728641;
          k = g2;
          b[k >> 2] = f2 | d2;
          b[k + 4 >> 2] = j;
          k = Qd(d2 | 0, e2 | 0, 45) | 0;
          H() | 0;
          a: do {
            if (oa(k & 127) | 0) {
              if (i | 0) {
                h = 1;
                while (1) {
                  k = Rd(7, 0, (15 - h | 0) * 3 | 0) | 0;
                  if (!((k & d2 | 0) == 0 & ((H() | 0) & e2 | 0) == 0)) {
                    break a;
                  }
                  if (h >>> 0 < i >>> 0) {
                    h = h + 1 | 0;
                  } else {
                    break;
                  }
                }
              }
              if ((l | 0) < 1) {
                g2 = 0;
                T = m;
                return g2 | 0;
              }
              k = i ^ 15;
              e2 = -1;
              j = 1;
              h = 1;
              while (1) {
                i = l - j | 0;
                i = Oc(7, 0, i, ((i | 0) < 0) << 31 >> 31) | 0;
                d2 = H() | 0;
                do {
                  if (h) {
                    h = Md(i | 0, d2 | 0, 5, 0) | 0;
                    h = Gd(h | 0, H() | 0, -5, -1) | 0;
                    h = Kd(h | 0, H() | 0, 6, 0) | 0;
                    f2 = H() | 0;
                    if ((c2 | 0) > (f2 | 0) | (c2 | 0) == (f2 | 0) & a2 >>> 0 > h >>> 0) {
                      c2 = Gd(a2 | 0, c2 | 0, -1, -1) | 0;
                      c2 = Hd(c2 | 0, H() | 0, h | 0, f2 | 0) | 0;
                      h = H() | 0;
                      n = g2;
                      p2 = b[n >> 2] | 0;
                      n = b[n + 4 >> 2] | 0;
                      q2 = (k + e2 | 0) * 3 | 0;
                      o = Rd(7, 0, q2 | 0) | 0;
                      n = n & ~(H() | 0);
                      e2 = Kd(c2 | 0, h | 0, i | 0, d2 | 0) | 0;
                      a2 = H() | 0;
                      f2 = Gd(e2 | 0, a2 | 0, 2, 0) | 0;
                      q2 = Rd(f2 | 0, H() | 0, q2 | 0) | 0;
                      n = H() | 0 | n;
                      f2 = g2;
                      b[f2 >> 2] = q2 | p2 & ~o;
                      b[f2 + 4 >> 2] = n;
                      a2 = Md(e2 | 0, a2 | 0, i | 0, d2 | 0) | 0;
                      a2 = Hd(c2 | 0, h | 0, a2 | 0, H() | 0) | 0;
                      h = 0;
                      c2 = H() | 0;
                      break;
                    } else {
                      q2 = g2;
                      o = b[q2 >> 2] | 0;
                      q2 = b[q2 + 4 >> 2] | 0;
                      p2 = Rd(7, 0, (k + e2 | 0) * 3 | 0) | 0;
                      q2 = q2 & ~(H() | 0);
                      h = g2;
                      b[h >> 2] = o & ~p2;
                      b[h + 4 >> 2] = q2;
                      h = 1;
                      break;
                    }
                  } else {
                    o = g2;
                    f2 = b[o >> 2] | 0;
                    o = b[o + 4 >> 2] | 0;
                    e2 = (k + e2 | 0) * 3 | 0;
                    n = Rd(7, 0, e2 | 0) | 0;
                    o = o & ~(H() | 0);
                    q2 = Kd(a2 | 0, c2 | 0, i | 0, d2 | 0) | 0;
                    h = H() | 0;
                    e2 = Rd(q2 | 0, h | 0, e2 | 0) | 0;
                    o = H() | 0 | o;
                    p2 = g2;
                    b[p2 >> 2] = e2 | f2 & ~n;
                    b[p2 + 4 >> 2] = o;
                    h = Md(q2 | 0, h | 0, i | 0, d2 | 0) | 0;
                    a2 = Hd(a2 | 0, c2 | 0, h | 0, H() | 0) | 0;
                    h = 0;
                    c2 = H() | 0;
                  }
                } while (0);
                if ((l | 0) > (j | 0)) {
                  e2 = ~j;
                  j = j + 1 | 0;
                } else {
                  c2 = 0;
                  break;
                }
              }
              T = m;
              return c2 | 0;
            }
          } while (0);
          if ((l | 0) < 1) {
            q2 = 0;
            T = m;
            return q2 | 0;
          }
          f2 = i ^ 15;
          h = 1;
          while (1) {
            p2 = l - h | 0;
            p2 = Oc(7, 0, p2, ((p2 | 0) < 0) << 31 >> 31) | 0;
            q2 = H() | 0;
            j = g2;
            d2 = b[j >> 2] | 0;
            j = b[j + 4 >> 2] | 0;
            i = (f2 - h | 0) * 3 | 0;
            e2 = Rd(7, 0, i | 0) | 0;
            j = j & ~(H() | 0);
            n = Kd(a2 | 0, c2 | 0, p2 | 0, q2 | 0) | 0;
            o = H() | 0;
            i = Rd(n | 0, o | 0, i | 0) | 0;
            j = H() | 0 | j;
            k = g2;
            b[k >> 2] = i | d2 & ~e2;
            b[k + 4 >> 2] = j;
            q2 = Md(n | 0, o | 0, p2 | 0, q2 | 0) | 0;
            a2 = Hd(a2 | 0, c2 | 0, q2 | 0, H() | 0) | 0;
            c2 = H() | 0;
            if ((l | 0) <= (h | 0)) {
              c2 = 0;
              break;
            } else {
              h = h + 1 | 0;
            }
          }
          T = m;
          return c2 | 0;
        }
        function fc(a2, c2, d2, e2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h = 0;
          f2 = Qd(c2 | 0, d2 | 0, 52) | 0;
          H() | 0;
          f2 = f2 & 15;
          if ((c2 | 0) == 0 & (d2 | 0) == 0 | ((e2 | 0) > 15 | (f2 | 0) > (e2 | 0))) {
            g2 = -1;
            c2 = -1;
            d2 = 0;
            f2 = 0;
          } else {
            c2 = Jb(c2, d2, f2 + 1 | 0, e2) | 0;
            h = (H() | 0) & -15728641;
            d2 = Rd(e2 | 0, 0, 52) | 0;
            d2 = c2 | d2;
            h = h | (H() | 0);
            c2 = (Hb(d2, h) | 0) == 0;
            g2 = f2;
            c2 = c2 ? -1 : e2;
            f2 = h;
          }
          h = a2;
          b[h >> 2] = d2;
          b[h + 4 >> 2] = f2;
          b[a2 + 8 >> 2] = g2;
          b[a2 + 12 >> 2] = c2;
          return;
        }
        function gc(a2, c2, d2, e2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0;
          f2 = Qd(a2 | 0, c2 | 0, 52) | 0;
          H() | 0;
          f2 = f2 & 15;
          g2 = e2 + 8 | 0;
          b[g2 >> 2] = f2;
          if ((a2 | 0) == 0 & (c2 | 0) == 0 | ((d2 | 0) > 15 | (f2 | 0) > (d2 | 0))) {
            d2 = e2;
            b[d2 >> 2] = 0;
            b[d2 + 4 >> 2] = 0;
            b[g2 >> 2] = -1;
            b[e2 + 12 >> 2] = -1;
            return;
          }
          a2 = Jb(a2, c2, f2 + 1 | 0, d2) | 0;
          g2 = (H() | 0) & -15728641;
          f2 = Rd(d2 | 0, 0, 52) | 0;
          f2 = a2 | f2;
          g2 = g2 | (H() | 0);
          a2 = e2;
          b[a2 >> 2] = f2;
          b[a2 + 4 >> 2] = g2;
          a2 = e2 + 12 | 0;
          if (!(Hb(f2, g2) | 0)) {
            b[a2 >> 2] = -1;
            return;
          } else {
            b[a2 >> 2] = d2;
            return;
          }
        }
        function hc(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0;
          d2 = a2;
          c2 = b[d2 >> 2] | 0;
          d2 = b[d2 + 4 >> 2] | 0;
          if ((c2 | 0) == 0 & (d2 | 0) == 0) {
            return;
          }
          e2 = Qd(c2 | 0, d2 | 0, 52) | 0;
          H() | 0;
          e2 = e2 & 15;
          i = Rd(1, 0, (e2 ^ 15) * 3 | 0) | 0;
          c2 = Gd(i | 0, H() | 0, c2 | 0, d2 | 0) | 0;
          d2 = H() | 0;
          i = a2;
          b[i >> 2] = c2;
          b[i + 4 >> 2] = d2;
          i = a2 + 8 | 0;
          h = b[i >> 2] | 0;
          if ((e2 | 0) < (h | 0)) {
            return;
          }
          j = a2 + 12 | 0;
          g2 = e2;
          while (1) {
            if ((g2 | 0) == (h | 0)) {
              e2 = 5;
              break;
            }
            k = (g2 | 0) == (b[j >> 2] | 0);
            f2 = (15 - g2 | 0) * 3 | 0;
            e2 = Qd(c2 | 0, d2 | 0, f2 | 0) | 0;
            H() | 0;
            e2 = e2 & 7;
            if (k & ((e2 | 0) == 1 & true)) {
              e2 = 7;
              break;
            }
            if (!((e2 | 0) == 7 & true)) {
              e2 = 10;
              break;
            }
            k = Rd(1, 0, f2 | 0) | 0;
            c2 = Gd(c2 | 0, d2 | 0, k | 0, H() | 0) | 0;
            d2 = H() | 0;
            k = a2;
            b[k >> 2] = c2;
            b[k + 4 >> 2] = d2;
            if ((g2 | 0) > (h | 0)) {
              g2 = g2 + -1 | 0;
            } else {
              e2 = 10;
              break;
            }
          }
          if ((e2 | 0) == 5) {
            k = a2;
            b[k >> 2] = 0;
            b[k + 4 >> 2] = 0;
            b[i >> 2] = -1;
            b[j >> 2] = -1;
            return;
          } else if ((e2 | 0) == 7) {
            h = Rd(1, 0, f2 | 0) | 0;
            h = Gd(c2 | 0, d2 | 0, h | 0, H() | 0) | 0;
            i = H() | 0;
            k = a2;
            b[k >> 2] = h;
            b[k + 4 >> 2] = i;
            b[j >> 2] = g2 + -1;
            return;
          } else if ((e2 | 0) == 10) {
            return;
          }
        }
        function ic(a2) {
          a2 = +a2;
          var b2 = 0;
          b2 = a2 < 0 ? a2 + 6.283185307179586 : a2;
          return +(!(a2 >= 6.283185307179586) ? b2 : b2 + -6.283185307179586);
        }
        function jc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          if (!(+q(+(+e[a2 >> 3] - +e[b2 >> 3])) < 17453292519943298e-27)) {
            b2 = 0;
            return b2 | 0;
          }
          b2 = +q(+(+e[a2 + 8 >> 3] - +e[b2 + 8 >> 3])) < 17453292519943298e-27;
          return b2 | 0;
        }
        function kc(a2, b2) {
          a2 = +a2;
          b2 = b2 | 0;
          switch (b2 | 0) {
            case 1: {
              a2 = a2 < 0 ? a2 + 6.283185307179586 : a2;
              break;
            }
            case 2: {
              a2 = a2 > 0 ? a2 + -6.283185307179586 : a2;
              break;
            }
            default:
          }
          return +a2;
        }
        function lc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0, d2 = 0, f2 = 0, g2 = 0;
          f2 = +e[b2 >> 3];
          d2 = +e[a2 >> 3];
          g2 = +u4(+((f2 - d2) * 0.5));
          c2 = +u4(+((+e[b2 + 8 >> 3] - +e[a2 + 8 >> 3]) * 0.5));
          c2 = g2 * g2 + c2 * (+t(+f2) * +t(+d2) * c2);
          return +(+z(+ +r(+c2), + +r(+(1 - c2))) * 2);
        }
        function mc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0, d2 = 0, f2 = 0, g2 = 0;
          f2 = +e[b2 >> 3];
          d2 = +e[a2 >> 3];
          g2 = +u4(+((f2 - d2) * 0.5));
          c2 = +u4(+((+e[b2 + 8 >> 3] - +e[a2 + 8 >> 3]) * 0.5));
          c2 = g2 * g2 + c2 * (+t(+f2) * +t(+d2) * c2);
          return +(+z(+ +r(+c2), + +r(+(1 - c2))) * 2 * 6371.007180918475);
        }
        function nc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0, d2 = 0, f2 = 0, g2 = 0;
          f2 = +e[b2 >> 3];
          d2 = +e[a2 >> 3];
          g2 = +u4(+((f2 - d2) * 0.5));
          c2 = +u4(+((+e[b2 + 8 >> 3] - +e[a2 + 8 >> 3]) * 0.5));
          c2 = g2 * g2 + c2 * (+t(+f2) * +t(+d2) * c2);
          return +(+z(+ +r(+c2), + +r(+(1 - c2))) * 2 * 6371.007180918475 * 1e3);
        }
        function oc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0, d2 = 0, f2 = 0, g2 = 0, h = 0;
          g2 = +e[b2 >> 3];
          d2 = +t(+g2);
          f2 = +e[b2 + 8 >> 3] - +e[a2 + 8 >> 3];
          h = d2 * +u4(+f2);
          c2 = +e[a2 >> 3];
          return + +z(+h, +(+u4(+g2) * +t(+c2) - +t(+f2) * (d2 * +u4(+c2))));
        }
        function pc(a2, c2, d2, f2) {
          a2 = a2 | 0;
          c2 = +c2;
          d2 = +d2;
          f2 = f2 | 0;
          var g2 = 0, h = 0, i = 0, j = 0;
          if (d2 < 1e-16) {
            b[f2 >> 2] = b[a2 >> 2];
            b[f2 + 4 >> 2] = b[a2 + 4 >> 2];
            b[f2 + 8 >> 2] = b[a2 + 8 >> 2];
            b[f2 + 12 >> 2] = b[a2 + 12 >> 2];
            return;
          }
          h = c2 < 0 ? c2 + 6.283185307179586 : c2;
          h = !(c2 >= 6.283185307179586) ? h : h + -6.283185307179586;
          do {
            if (h < 1e-16) {
              c2 = +e[a2 >> 3] + d2;
              e[f2 >> 3] = c2;
              g2 = f2;
            } else {
              g2 = +q(+(h + -3.141592653589793)) < 1e-16;
              c2 = +e[a2 >> 3];
              if (g2) {
                c2 = c2 - d2;
                e[f2 >> 3] = c2;
                g2 = f2;
                break;
              }
              i = +t(+d2);
              d2 = +u4(+d2);
              c2 = i * +u4(+c2) + +t(+h) * (d2 * +t(+c2));
              c2 = c2 > 1 ? 1 : c2;
              c2 = +x(+(c2 < -1 ? -1 : c2));
              e[f2 >> 3] = c2;
              if (+q(+(c2 + -1.5707963267948966)) < 1e-16) {
                e[f2 >> 3] = 1.5707963267948966;
                e[f2 + 8 >> 3] = 0;
                return;
              }
              if (+q(+(c2 + 1.5707963267948966)) < 1e-16) {
                e[f2 >> 3] = -1.5707963267948966;
                e[f2 + 8 >> 3] = 0;
                return;
              }
              j = 1 / +t(+c2);
              h = d2 * +u4(+h) * j;
              d2 = +e[a2 >> 3];
              c2 = j * ((i - +u4(+c2) * +u4(+d2)) / +t(+d2));
              i = h > 1 ? 1 : h;
              c2 = c2 > 1 ? 1 : c2;
              c2 = +e[a2 + 8 >> 3] + +z(+(i < -1 ? -1 : i), +(c2 < -1 ? -1 : c2));
              if (c2 > 3.141592653589793) {
                do {
                  c2 = c2 + -6.283185307179586;
                } while (c2 > 3.141592653589793);
              }
              if (c2 < -3.141592653589793) {
                do {
                  c2 = c2 + 6.283185307179586;
                } while (c2 < -3.141592653589793);
              }
              e[f2 + 8 >> 3] = c2;
              return;
            }
          } while (0);
          if (+q(+(c2 + -1.5707963267948966)) < 1e-16) {
            e[g2 >> 3] = 1.5707963267948966;
            e[f2 + 8 >> 3] = 0;
            return;
          }
          if (+q(+(c2 + 1.5707963267948966)) < 1e-16) {
            e[g2 >> 3] = -1.5707963267948966;
            e[f2 + 8 >> 3] = 0;
            return;
          }
          c2 = +e[a2 + 8 >> 3];
          if (c2 > 3.141592653589793) {
            do {
              c2 = c2 + -6.283185307179586;
            } while (c2 > 3.141592653589793);
          }
          if (c2 < -3.141592653589793) {
            do {
              c2 = c2 + 6.283185307179586;
            } while (c2 < -3.141592653589793);
          }
          e[f2 + 8 >> 3] = c2;
          return;
        }
        function qc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          if (a2 >>> 0 > 15) {
            b2 = 4;
            return b2 | 0;
          }
          e[b2 >> 3] = +e[20656 + (a2 << 3) >> 3];
          b2 = 0;
          return b2 | 0;
        }
        function rc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          if (a2 >>> 0 > 15) {
            b2 = 4;
            return b2 | 0;
          }
          e[b2 >> 3] = +e[20784 + (a2 << 3) >> 3];
          b2 = 0;
          return b2 | 0;
        }
        function sc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          if (a2 >>> 0 > 15) {
            b2 = 4;
            return b2 | 0;
          }
          e[b2 >> 3] = +e[20912 + (a2 << 3) >> 3];
          b2 = 0;
          return b2 | 0;
        }
        function tc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          if (a2 >>> 0 > 15) {
            b2 = 4;
            return b2 | 0;
          }
          e[b2 >> 3] = +e[21040 + (a2 << 3) >> 3];
          b2 = 0;
          return b2 | 0;
        }
        function uc(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          var d2 = 0;
          if (a2 >>> 0 > 15) {
            c2 = 4;
            return c2 | 0;
          }
          d2 = Oc(7, 0, a2, ((a2 | 0) < 0) << 31 >> 31) | 0;
          d2 = Md(d2 | 0, H() | 0, 120, 0) | 0;
          a2 = H() | 0;
          b[c2 >> 2] = d2 | 2;
          b[c2 + 4 >> 2] = a2;
          c2 = 0;
          return c2 | 0;
        }
        function vc(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          var d2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0;
          n = +e[b2 >> 3];
          l = +e[a2 >> 3];
          j = +u4(+((n - l) * 0.5));
          g2 = +e[b2 + 8 >> 3];
          k = +e[a2 + 8 >> 3];
          h = +u4(+((g2 - k) * 0.5));
          i = +t(+l);
          m = +t(+n);
          h = j * j + h * (m * i * h);
          h = +z(+ +r(+h), + +r(+(1 - h))) * 2;
          j = +e[c2 >> 3];
          n = +u4(+((j - n) * 0.5));
          d2 = +e[c2 + 8 >> 3];
          g2 = +u4(+((d2 - g2) * 0.5));
          f2 = +t(+j);
          g2 = n * n + g2 * (m * f2 * g2);
          g2 = +z(+ +r(+g2), + +r(+(1 - g2))) * 2;
          j = +u4(+((l - j) * 0.5));
          d2 = +u4(+((k - d2) * 0.5));
          d2 = j * j + d2 * (i * f2 * d2);
          d2 = +z(+ +r(+d2), + +r(+(1 - d2))) * 2;
          f2 = (h + g2 + d2) * 0.5;
          return +(+y(+ +r(+(+v2(+(f2 * 0.5)) * +v2(+((f2 - h) * 0.5)) * +v2(+((f2 - g2) * 0.5)) * +v2(+((f2 - d2) * 0.5))))) * 4);
        }
        function wc(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var f2 = 0, g2 = 0, h = 0, i = 0, j = 0;
          j = T;
          T = T + 192 | 0;
          h = j + 168 | 0;
          i = j;
          g2 = Zb(a2, c2, h) | 0;
          if (g2 | 0) {
            d2 = g2;
            T = j;
            return d2 | 0;
          }
          if (_b2(a2, c2, i) | 0) {
            I(27795, 27190, 415, 27199);
          }
          c2 = b[i >> 2] | 0;
          if ((c2 | 0) > 0) {
            f2 = +vc(i + 8 | 0, i + 8 + (((c2 | 0) != 1 & 1) << 4) | 0, h) + 0;
            if ((c2 | 0) != 1) {
              a2 = 1;
              do {
                g2 = a2;
                a2 = a2 + 1 | 0;
                f2 = f2 + +vc(i + 8 + (g2 << 4) | 0, i + 8 + (((a2 | 0) % (c2 | 0) | 0) << 4) | 0, h);
              } while ((a2 | 0) < (c2 | 0));
            }
          } else {
            f2 = 0;
          }
          e[d2 >> 3] = f2;
          d2 = 0;
          T = j;
          return d2 | 0;
        }
        function xc(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          a2 = wc(a2, b2, c2) | 0;
          if (a2 | 0) {
            return a2 | 0;
          }
          e[c2 >> 3] = +e[c2 >> 3] * 6371.007180918475 * 6371.007180918475;
          return a2 | 0;
        }
        function yc(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          a2 = wc(a2, b2, c2) | 0;
          if (a2 | 0) {
            return a2 | 0;
          }
          e[c2 >> 3] = +e[c2 >> 3] * 6371.007180918475 * 6371.007180918475 * 1e3 * 1e3;
          return a2 | 0;
        }
        function zc(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0;
          j = T;
          T = T + 176 | 0;
          i = j;
          a2 = pb(a2, c2, i) | 0;
          if (a2 | 0) {
            i = a2;
            T = j;
            return i | 0;
          }
          e[d2 >> 3] = 0;
          a2 = b[i >> 2] | 0;
          if ((a2 | 0) <= 1) {
            i = 0;
            T = j;
            return i | 0;
          }
          c2 = a2 + -1 | 0;
          a2 = 0;
          f2 = +e[i + 8 >> 3];
          g2 = +e[i + 16 >> 3];
          h = 0;
          do {
            a2 = a2 + 1 | 0;
            l = f2;
            f2 = +e[i + 8 + (a2 << 4) >> 3];
            m = +u4(+((f2 - l) * 0.5));
            k = g2;
            g2 = +e[i + 8 + (a2 << 4) + 8 >> 3];
            k = +u4(+((g2 - k) * 0.5));
            k = m * m + k * (+t(+f2) * +t(+l) * k);
            h = h + +z(+ +r(+k), + +r(+(1 - k))) * 2;
          } while ((a2 | 0) < (c2 | 0));
          e[d2 >> 3] = h;
          i = 0;
          T = j;
          return i | 0;
        }
        function Ac(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0;
          j = T;
          T = T + 176 | 0;
          i = j;
          a2 = pb(a2, c2, i) | 0;
          if (a2 | 0) {
            i = a2;
            h = +e[d2 >> 3];
            h = h * 6371.007180918475;
            e[d2 >> 3] = h;
            T = j;
            return i | 0;
          }
          e[d2 >> 3] = 0;
          a2 = b[i >> 2] | 0;
          if ((a2 | 0) <= 1) {
            i = 0;
            h = 0;
            h = h * 6371.007180918475;
            e[d2 >> 3] = h;
            T = j;
            return i | 0;
          }
          c2 = a2 + -1 | 0;
          a2 = 0;
          f2 = +e[i + 8 >> 3];
          g2 = +e[i + 16 >> 3];
          h = 0;
          do {
            a2 = a2 + 1 | 0;
            l = f2;
            f2 = +e[i + 8 + (a2 << 4) >> 3];
            m = +u4(+((f2 - l) * 0.5));
            k = g2;
            g2 = +e[i + 8 + (a2 << 4) + 8 >> 3];
            k = +u4(+((g2 - k) * 0.5));
            k = m * m + k * (+t(+l) * +t(+f2) * k);
            h = h + +z(+ +r(+k), + +r(+(1 - k))) * 2;
          } while ((a2 | 0) != (c2 | 0));
          e[d2 >> 3] = h;
          i = 0;
          m = h;
          m = m * 6371.007180918475;
          e[d2 >> 3] = m;
          T = j;
          return i | 0;
        }
        function Bc(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0;
          j = T;
          T = T + 176 | 0;
          i = j;
          a2 = pb(a2, c2, i) | 0;
          if (a2 | 0) {
            i = a2;
            h = +e[d2 >> 3];
            h = h * 6371.007180918475;
            h = h * 1e3;
            e[d2 >> 3] = h;
            T = j;
            return i | 0;
          }
          e[d2 >> 3] = 0;
          a2 = b[i >> 2] | 0;
          if ((a2 | 0) <= 1) {
            i = 0;
            h = 0;
            h = h * 6371.007180918475;
            h = h * 1e3;
            e[d2 >> 3] = h;
            T = j;
            return i | 0;
          }
          c2 = a2 + -1 | 0;
          a2 = 0;
          f2 = +e[i + 8 >> 3];
          g2 = +e[i + 16 >> 3];
          h = 0;
          do {
            a2 = a2 + 1 | 0;
            l = f2;
            f2 = +e[i + 8 + (a2 << 4) >> 3];
            m = +u4(+((f2 - l) * 0.5));
            k = g2;
            g2 = +e[i + 8 + (a2 << 4) + 8 >> 3];
            k = +u4(+((g2 - k) * 0.5));
            k = m * m + k * (+t(+l) * +t(+f2) * k);
            h = h + +z(+ +r(+k), + +r(+(1 - k))) * 2;
          } while ((a2 | 0) != (c2 | 0));
          e[d2 >> 3] = h;
          i = 0;
          m = h;
          m = m * 6371.007180918475;
          m = m * 1e3;
          e[d2 >> 3] = m;
          T = j;
          return i | 0;
        }
        function Cc(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, e2 = 0;
          c2 = Fd(1, 12) | 0;
          if (!c2) {
            I(27280, 27235, 49, 27293);
          }
          d2 = a2 + 4 | 0;
          e2 = b[d2 >> 2] | 0;
          if (e2 | 0) {
            e2 = e2 + 8 | 0;
            b[e2 >> 2] = c2;
            b[d2 >> 2] = c2;
            return c2 | 0;
          }
          if (b[a2 >> 2] | 0) {
            I(27310, 27235, 61, 27333);
          }
          e2 = a2;
          b[e2 >> 2] = c2;
          b[d2 >> 2] = c2;
          return c2 | 0;
        }
        function Dc(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          var d2 = 0, e2 = 0;
          e2 = Dd(24) | 0;
          if (!e2) {
            I(27347, 27235, 78, 27361);
          }
          b[e2 >> 2] = b[c2 >> 2];
          b[e2 + 4 >> 2] = b[c2 + 4 >> 2];
          b[e2 + 8 >> 2] = b[c2 + 8 >> 2];
          b[e2 + 12 >> 2] = b[c2 + 12 >> 2];
          b[e2 + 16 >> 2] = 0;
          c2 = a2 + 4 | 0;
          d2 = b[c2 >> 2] | 0;
          if (d2 | 0) {
            b[d2 + 16 >> 2] = e2;
            b[c2 >> 2] = e2;
            return e2 | 0;
          }
          if (b[a2 >> 2] | 0) {
            I(27376, 27235, 82, 27361);
          }
          b[a2 >> 2] = e2;
          b[c2 >> 2] = e2;
          return e2 | 0;
        }
        function Ec(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0;
          if (!a2) {
            return;
          }
          e2 = 1;
          while (1) {
            c2 = b[a2 >> 2] | 0;
            if (c2 | 0) {
              do {
                d2 = b[c2 >> 2] | 0;
                if (d2 | 0) {
                  do {
                    f2 = d2;
                    d2 = b[d2 + 16 >> 2] | 0;
                    Ed(f2);
                  } while ((d2 | 0) != 0);
                }
                f2 = c2;
                c2 = b[c2 + 8 >> 2] | 0;
                Ed(f2);
              } while ((c2 | 0) != 0);
            }
            c2 = a2;
            a2 = b[a2 + 8 >> 2] | 0;
            if (!e2) {
              Ed(c2);
            }
            if (!a2) {
              break;
            } else {
              e2 = 0;
            }
          }
          return;
        }
        function Fc(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, r2 = 0, s2 = 0, t2 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A2 = 0, B4 = 0, C3 = 0, D3 = 0, E2 = 0, F = 0, G2 = 0, H2 = 0, J2 = 0, K2 = 0;
          g2 = a2 + 8 | 0;
          if (b[g2 >> 2] | 0) {
            K2 = 1;
            return K2 | 0;
          }
          f2 = b[a2 >> 2] | 0;
          if (!f2) {
            K2 = 0;
            return K2 | 0;
          }
          c2 = f2;
          d2 = 0;
          do {
            d2 = d2 + 1 | 0;
            c2 = b[c2 + 8 >> 2] | 0;
          } while ((c2 | 0) != 0);
          if (d2 >>> 0 < 2) {
            K2 = 0;
            return K2 | 0;
          }
          H2 = Dd(d2 << 2) | 0;
          if (!H2) {
            I(27396, 27235, 317, 27415);
          }
          G2 = Dd(d2 << 5) | 0;
          if (!G2) {
            I(27437, 27235, 321, 27415);
          }
          b[a2 >> 2] = 0;
          z2 = a2 + 4 | 0;
          b[z2 >> 2] = 0;
          b[g2 >> 2] = 0;
          d2 = 0;
          F = 0;
          y2 = 0;
          n = 0;
          a: while (1) {
            m = b[f2 >> 2] | 0;
            if (m) {
              h = 0;
              i = m;
              do {
                k = +e[i + 8 >> 3];
                c2 = i;
                i = b[i + 16 >> 2] | 0;
                l = (i | 0) == 0;
                g2 = l ? m : i;
                j = +e[g2 + 8 >> 3];
                if (+q(+(k - j)) > 3.141592653589793) {
                  K2 = 14;
                  break;
                }
                h = h + (j - k) * (+e[c2 >> 3] + +e[g2 >> 3]);
              } while (!l);
              if ((K2 | 0) == 14) {
                K2 = 0;
                h = 0;
                c2 = m;
                do {
                  x2 = +e[c2 + 8 >> 3];
                  E2 = c2 + 16 | 0;
                  D3 = b[E2 >> 2] | 0;
                  D3 = (D3 | 0) == 0 ? m : D3;
                  w2 = +e[D3 + 8 >> 3];
                  h = h + (+e[c2 >> 3] + +e[D3 >> 3]) * ((w2 < 0 ? w2 + 6.283185307179586 : w2) - (x2 < 0 ? x2 + 6.283185307179586 : x2));
                  c2 = b[((c2 | 0) == 0 ? f2 : E2) >> 2] | 0;
                } while ((c2 | 0) != 0);
              }
              if (h > 0) {
                b[H2 + (F << 2) >> 2] = f2;
                F = F + 1 | 0;
                g2 = y2;
                c2 = n;
              } else {
                K2 = 19;
              }
            } else {
              K2 = 19;
            }
            if ((K2 | 0) == 19) {
              K2 = 0;
              do {
                if (!d2) {
                  if (!n) {
                    if (!(b[a2 >> 2] | 0)) {
                      g2 = z2;
                      i = a2;
                      c2 = f2;
                      d2 = a2;
                      break;
                    } else {
                      K2 = 27;
                      break a;
                    }
                  } else {
                    g2 = z2;
                    i = n + 8 | 0;
                    c2 = f2;
                    d2 = a2;
                    break;
                  }
                } else {
                  c2 = d2 + 8 | 0;
                  if (b[c2 >> 2] | 0) {
                    K2 = 21;
                    break a;
                  }
                  d2 = Fd(1, 12) | 0;
                  if (!d2) {
                    K2 = 23;
                    break a;
                  }
                  b[c2 >> 2] = d2;
                  g2 = d2 + 4 | 0;
                  i = d2;
                  c2 = n;
                }
              } while (0);
              b[i >> 2] = f2;
              b[g2 >> 2] = f2;
              i = G2 + (y2 << 5) | 0;
              l = b[f2 >> 2] | 0;
              if (l) {
                m = G2 + (y2 << 5) + 8 | 0;
                e[m >> 3] = 17976931348623157e292;
                n = G2 + (y2 << 5) + 24 | 0;
                e[n >> 3] = 17976931348623157e292;
                e[i >> 3] = -17976931348623157e292;
                o = G2 + (y2 << 5) + 16 | 0;
                e[o >> 3] = -17976931348623157e292;
                u5 = 17976931348623157e292;
                v3 = -17976931348623157e292;
                g2 = 0;
                p2 = l;
                k = 17976931348623157e292;
                s2 = 17976931348623157e292;
                t2 = -17976931348623157e292;
                j = -17976931348623157e292;
                while (1) {
                  h = +e[p2 >> 3];
                  x2 = +e[p2 + 8 >> 3];
                  p2 = b[p2 + 16 >> 2] | 0;
                  r2 = (p2 | 0) == 0;
                  w2 = +e[(r2 ? l : p2) + 8 >> 3];
                  if (h < k) {
                    e[m >> 3] = h;
                    k = h;
                  }
                  if (x2 < s2) {
                    e[n >> 3] = x2;
                    s2 = x2;
                  }
                  if (h > t2) {
                    e[i >> 3] = h;
                  } else {
                    h = t2;
                  }
                  if (x2 > j) {
                    e[o >> 3] = x2;
                    j = x2;
                  }
                  u5 = x2 > 0 & x2 < u5 ? x2 : u5;
                  v3 = x2 < 0 & x2 > v3 ? x2 : v3;
                  g2 = g2 | +q(+(x2 - w2)) > 3.141592653589793;
                  if (r2) {
                    break;
                  } else {
                    t2 = h;
                  }
                }
                if (g2) {
                  e[o >> 3] = v3;
                  e[n >> 3] = u5;
                }
              } else {
                b[i >> 2] = 0;
                b[i + 4 >> 2] = 0;
                b[i + 8 >> 2] = 0;
                b[i + 12 >> 2] = 0;
                b[i + 16 >> 2] = 0;
                b[i + 20 >> 2] = 0;
                b[i + 24 >> 2] = 0;
                b[i + 28 >> 2] = 0;
              }
              g2 = y2 + 1 | 0;
            }
            E2 = f2 + 8 | 0;
            f2 = b[E2 >> 2] | 0;
            b[E2 >> 2] = 0;
            if (!f2) {
              K2 = 45;
              break;
            } else {
              y2 = g2;
              n = c2;
            }
          }
          if ((K2 | 0) == 21) {
            I(27213, 27235, 35, 27247);
          } else if ((K2 | 0) == 23) {
            I(27267, 27235, 37, 27247);
          } else if ((K2 | 0) == 27) {
            I(27310, 27235, 61, 27333);
          } else if ((K2 | 0) == 45) {
            b: do {
              if ((F | 0) > 0) {
                E2 = (g2 | 0) == 0;
                C3 = g2 << 2;
                D3 = (a2 | 0) == 0;
                B4 = 0;
                c2 = 0;
                while (1) {
                  A2 = b[H2 + (B4 << 2) >> 2] | 0;
                  if (!E2) {
                    y2 = Dd(C3) | 0;
                    if (!y2) {
                      K2 = 50;
                      break;
                    }
                    z2 = Dd(C3) | 0;
                    if (!z2) {
                      K2 = 52;
                      break;
                    }
                    c: do {
                      if (!D3) {
                        g2 = 0;
                        d2 = 0;
                        i = a2;
                        while (1) {
                          f2 = G2 + (g2 << 5) | 0;
                          if (Gc(b[i >> 2] | 0, f2, b[A2 >> 2] | 0) | 0) {
                            b[y2 + (d2 << 2) >> 2] = i;
                            b[z2 + (d2 << 2) >> 2] = f2;
                            r2 = d2 + 1 | 0;
                          } else {
                            r2 = d2;
                          }
                          i = b[i + 8 >> 2] | 0;
                          if (!i) {
                            break;
                          } else {
                            g2 = g2 + 1 | 0;
                            d2 = r2;
                          }
                        }
                        if ((r2 | 0) > 0) {
                          f2 = b[y2 >> 2] | 0;
                          if ((r2 | 0) == 1) {
                            d2 = f2;
                          } else {
                            o = 0;
                            p2 = -1;
                            d2 = f2;
                            n = f2;
                            while (1) {
                              l = b[n >> 2] | 0;
                              f2 = 0;
                              i = 0;
                              while (1) {
                                g2 = b[b[y2 + (i << 2) >> 2] >> 2] | 0;
                                if ((g2 | 0) == (l | 0)) {
                                  m = f2;
                                } else {
                                  m = f2 + ((Gc(g2, b[z2 + (i << 2) >> 2] | 0, b[l >> 2] | 0) | 0) & 1) | 0;
                                }
                                i = i + 1 | 0;
                                if ((i | 0) == (r2 | 0)) {
                                  break;
                                } else {
                                  f2 = m;
                                }
                              }
                              g2 = (m | 0) > (p2 | 0);
                              d2 = g2 ? n : d2;
                              f2 = o + 1 | 0;
                              if ((f2 | 0) == (r2 | 0)) {
                                break c;
                              }
                              o = f2;
                              p2 = g2 ? m : p2;
                              n = b[y2 + (f2 << 2) >> 2] | 0;
                            }
                          }
                        } else {
                          d2 = 0;
                        }
                      } else {
                        d2 = 0;
                      }
                    } while (0);
                    Ed(y2);
                    Ed(z2);
                    if (d2) {
                      g2 = d2 + 4 | 0;
                      f2 = b[g2 >> 2] | 0;
                      if (!f2) {
                        if (b[d2 >> 2] | 0) {
                          K2 = 70;
                          break;
                        }
                      } else {
                        d2 = f2 + 8 | 0;
                      }
                      b[d2 >> 2] = A2;
                      b[g2 >> 2] = A2;
                    } else {
                      K2 = 73;
                    }
                  } else {
                    K2 = 73;
                  }
                  if ((K2 | 0) == 73) {
                    K2 = 0;
                    c2 = b[A2 >> 2] | 0;
                    if (c2 | 0) {
                      do {
                        z2 = c2;
                        c2 = b[c2 + 16 >> 2] | 0;
                        Ed(z2);
                      } while ((c2 | 0) != 0);
                    }
                    Ed(A2);
                    c2 = 1;
                  }
                  B4 = B4 + 1 | 0;
                  if ((B4 | 0) >= (F | 0)) {
                    J2 = c2;
                    break b;
                  }
                }
                if ((K2 | 0) == 50) {
                  I(27452, 27235, 249, 27471);
                } else if ((K2 | 0) == 52) {
                  I(27490, 27235, 252, 27471);
                } else if ((K2 | 0) == 70) {
                  I(27310, 27235, 61, 27333);
                }
              } else {
                J2 = 0;
              }
            } while (0);
            Ed(H2);
            Ed(G2);
            K2 = J2;
            return K2 | 0;
          }
          return 0;
        }
        function Gc(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0;
          if (!(Ca(c2, d2) | 0)) {
            a2 = 0;
            return a2 | 0;
          }
          c2 = Aa(c2) | 0;
          f2 = +e[d2 >> 3];
          g2 = +e[d2 + 8 >> 3];
          g2 = c2 & g2 < 0 ? g2 + 6.283185307179586 : g2;
          a2 = b[a2 >> 2] | 0;
          if (!a2) {
            a2 = 0;
            return a2 | 0;
          }
          if (c2) {
            c2 = 0;
            l = g2;
            d2 = a2;
            a: while (1) {
              while (1) {
                i = +e[d2 >> 3];
                g2 = +e[d2 + 8 >> 3];
                d2 = d2 + 16 | 0;
                m = b[d2 >> 2] | 0;
                m = (m | 0) == 0 ? a2 : m;
                h = +e[m >> 3];
                j = +e[m + 8 >> 3];
                if (i > h) {
                  k = i;
                  i = j;
                } else {
                  k = h;
                  h = i;
                  i = g2;
                  g2 = j;
                }
                f2 = f2 == h | f2 == k ? f2 + 2220446049250313e-31 : f2;
                if (!(f2 < h | f2 > k)) {
                  break;
                }
                d2 = b[d2 >> 2] | 0;
                if (!d2) {
                  d2 = 22;
                  break a;
                }
              }
              j = i < 0 ? i + 6.283185307179586 : i;
              i = g2 < 0 ? g2 + 6.283185307179586 : g2;
              l = j == l | i == l ? l + -2220446049250313e-31 : l;
              k = j + (i - j) * ((f2 - h) / (k - h));
              if ((k < 0 ? k + 6.283185307179586 : k) > l) {
                c2 = c2 ^ 1;
              }
              d2 = b[d2 >> 2] | 0;
              if (!d2) {
                d2 = 22;
                break;
              }
            }
            if ((d2 | 0) == 22) {
              return c2 | 0;
            }
          } else {
            c2 = 0;
            l = g2;
            d2 = a2;
            b: while (1) {
              while (1) {
                i = +e[d2 >> 3];
                g2 = +e[d2 + 8 >> 3];
                d2 = d2 + 16 | 0;
                m = b[d2 >> 2] | 0;
                m = (m | 0) == 0 ? a2 : m;
                h = +e[m >> 3];
                j = +e[m + 8 >> 3];
                if (i > h) {
                  k = i;
                  i = j;
                } else {
                  k = h;
                  h = i;
                  i = g2;
                  g2 = j;
                }
                f2 = f2 == h | f2 == k ? f2 + 2220446049250313e-31 : f2;
                if (!(f2 < h | f2 > k)) {
                  break;
                }
                d2 = b[d2 >> 2] | 0;
                if (!d2) {
                  d2 = 22;
                  break b;
                }
              }
              l = i == l | g2 == l ? l + -2220446049250313e-31 : l;
              if (i + (g2 - i) * ((f2 - h) / (k - h)) > l) {
                c2 = c2 ^ 1;
              }
              d2 = b[d2 >> 2] | 0;
              if (!d2) {
                d2 = 22;
                break;
              }
            }
            if ((d2 | 0) == 22) {
              return c2 | 0;
            }
          }
          return 0;
        }
        function Hc(c2, d2, e2, f2, g2) {
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          var h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0, u5 = 0;
          u5 = T;
          T = T + 32 | 0;
          t2 = u5 + 16 | 0;
          s2 = u5;
          h = Qd(c2 | 0, d2 | 0, 52) | 0;
          H() | 0;
          h = h & 15;
          p2 = Qd(e2 | 0, f2 | 0, 52) | 0;
          H() | 0;
          if ((h | 0) != (p2 & 15 | 0)) {
            t2 = 12;
            T = u5;
            return t2 | 0;
          }
          l = Qd(c2 | 0, d2 | 0, 45) | 0;
          H() | 0;
          l = l & 127;
          m = Qd(e2 | 0, f2 | 0, 45) | 0;
          H() | 0;
          m = m & 127;
          if (l >>> 0 > 121 | m >>> 0 > 121) {
            t2 = 5;
            T = u5;
            return t2 | 0;
          }
          p2 = (l | 0) != (m | 0);
          if (p2) {
            j = wa(l, m) | 0;
            if ((j | 0) == 7) {
              t2 = 1;
              T = u5;
              return t2 | 0;
            }
            k = wa(m, l) | 0;
            if ((k | 0) == 7) {
              I(27514, 27538, 161, 27548);
            } else {
              q2 = j;
              i = k;
            }
          } else {
            q2 = 0;
            i = 0;
          }
          n = oa(l) | 0;
          o = oa(m) | 0;
          b[t2 >> 2] = 0;
          b[t2 + 4 >> 2] = 0;
          b[t2 + 8 >> 2] = 0;
          b[t2 + 12 >> 2] = 0;
          do {
            if (!q2) {
              Xb(e2, f2, t2) | 0;
              if ((n | 0) != 0 & (o | 0) != 0) {
                if ((m | 0) != (l | 0)) {
                  I(27621, 27538, 261, 27548);
                }
                i = Pb(c2, d2) | 0;
                h = Pb(e2, f2) | 0;
                if (!((i | 0) == 7 | (h | 0) == 7)) {
                  if (!(a[22e3 + (i * 7 | 0) + h >> 0] | 0)) {
                    i = b[21168 + (i * 28 | 0) + (h << 2) >> 2] | 0;
                    if ((i | 0) > 0) {
                      j = t2 + 4 | 0;
                      h = 0;
                      do {
                        _a2(j);
                        h = h + 1 | 0;
                      } while ((h | 0) != (i | 0));
                      r2 = 51;
                    } else {
                      r2 = 51;
                    }
                  } else {
                    h = 1;
                  }
                } else {
                  h = 5;
                }
              } else {
                r2 = 51;
              }
            } else {
              m = b[4272 + (l * 28 | 0) + (q2 << 2) >> 2] | 0;
              j = (m | 0) > 0;
              if (!o) {
                if (j) {
                  l = 0;
                  k = e2;
                  j = f2;
                  do {
                    k = Tb(k, j) | 0;
                    j = H() | 0;
                    i = ab4(i) | 0;
                    l = l + 1 | 0;
                  } while ((l | 0) != (m | 0));
                  m = i;
                  l = k;
                  k = j;
                } else {
                  m = i;
                  l = e2;
                  k = f2;
                }
              } else if (j) {
                l = 0;
                k = e2;
                j = f2;
                do {
                  k = Sb(k, j) | 0;
                  j = H() | 0;
                  i = ab4(i) | 0;
                  if ((i | 0) == 1) {
                    i = ab4(1) | 0;
                  }
                  l = l + 1 | 0;
                } while ((l | 0) != (m | 0));
                m = i;
                l = k;
                k = j;
              } else {
                m = i;
                l = e2;
                k = f2;
              }
              Xb(l, k, t2) | 0;
              if (!p2) {
                I(27563, 27538, 191, 27548);
              }
              j = (n | 0) != 0;
              i = (o | 0) != 0;
              if (j & i) {
                I(27590, 27538, 192, 27548);
              }
              if (!j) {
                if (i) {
                  i = Pb(l, k) | 0;
                  if ((i | 0) == 7) {
                    h = 5;
                    break;
                  }
                  if (a[22e3 + (i * 7 | 0) + m >> 0] | 0) {
                    h = 1;
                    break;
                  }
                  l = 0;
                  k = b[21168 + (m * 28 | 0) + (i << 2) >> 2] | 0;
                } else {
                  l = 0;
                  k = 0;
                }
              } else {
                i = Pb(c2, d2) | 0;
                if ((i | 0) == 7) {
                  h = 5;
                  break;
                }
                if (a[22e3 + (i * 7 | 0) + q2 >> 0] | 0) {
                  h = 1;
                  break;
                }
                k = b[21168 + (i * 28 | 0) + (q2 << 2) >> 2] | 0;
                l = k;
              }
              if ((l | k | 0) < 0) {
                h = 5;
              } else {
                if ((k | 0) > 0) {
                  j = t2 + 4 | 0;
                  i = 0;
                  do {
                    _a2(j);
                    i = i + 1 | 0;
                  } while ((i | 0) != (k | 0));
                }
                b[s2 >> 2] = 0;
                b[s2 + 4 >> 2] = 0;
                b[s2 + 8 >> 2] = 0;
                Ya(s2, q2);
                if (h | 0) {
                  while (1) {
                    if (!(Vb(h) | 0)) {
                      Xa(s2);
                    } else {
                      Wa(s2);
                    }
                    if ((h | 0) > 1) {
                      h = h + -1 | 0;
                    } else {
                      break;
                    }
                  }
                }
                if ((l | 0) > 0) {
                  h = 0;
                  do {
                    _a2(s2);
                    h = h + 1 | 0;
                  } while ((h | 0) != (l | 0));
                }
                r2 = t2 + 4 | 0;
                Oa(r2, s2, r2);
                Ma(r2);
                r2 = 51;
              }
            }
          } while (0);
          if ((r2 | 0) == 51) {
            h = t2 + 4 | 0;
            b[g2 >> 2] = b[h >> 2];
            b[g2 + 4 >> 2] = b[h + 4 >> 2];
            b[g2 + 8 >> 2] = b[h + 8 >> 2];
            h = 0;
          }
          t2 = h;
          T = u5;
          return t2 | 0;
        }
        function Ic(a2, c2, d2, e2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0, u5 = 0;
          q2 = T;
          T = T + 48 | 0;
          k = q2 + 36 | 0;
          h = q2 + 24 | 0;
          i = q2 + 12 | 0;
          j = q2;
          f2 = Qd(a2 | 0, c2 | 0, 52) | 0;
          H() | 0;
          f2 = f2 & 15;
          n = Qd(a2 | 0, c2 | 0, 45) | 0;
          H() | 0;
          n = n & 127;
          if (n >>> 0 > 121) {
            e2 = 5;
            T = q2;
            return e2 | 0;
          }
          l = oa(n) | 0;
          Rd(f2 | 0, 0, 52) | 0;
          r2 = H() | 0 | 134225919;
          g2 = e2;
          b[g2 >> 2] = -1;
          b[g2 + 4 >> 2] = r2;
          if (!f2) {
            f2 = Ra(d2) | 0;
            if ((f2 | 0) == 7) {
              r2 = 1;
              T = q2;
              return r2 | 0;
            }
            f2 = va(n, f2) | 0;
            if ((f2 | 0) == 127) {
              r2 = 1;
              T = q2;
              return r2 | 0;
            }
            o = Rd(f2 | 0, 0, 45) | 0;
            p2 = H() | 0;
            n = e2;
            p2 = b[n + 4 >> 2] & -1040385 | p2;
            r2 = e2;
            b[r2 >> 2] = b[n >> 2] | o;
            b[r2 + 4 >> 2] = p2;
            r2 = 0;
            T = q2;
            return r2 | 0;
          }
          b[k >> 2] = b[d2 >> 2];
          b[k + 4 >> 2] = b[d2 + 4 >> 2];
          b[k + 8 >> 2] = b[d2 + 8 >> 2];
          d2 = f2;
          while (1) {
            g2 = d2;
            d2 = d2 + -1 | 0;
            b[h >> 2] = b[k >> 2];
            b[h + 4 >> 2] = b[k + 4 >> 2];
            b[h + 8 >> 2] = b[k + 8 >> 2];
            if (!(Vb(g2) | 0)) {
              f2 = Ta(k) | 0;
              if (f2 | 0) {
                d2 = 13;
                break;
              }
              b[i >> 2] = b[k >> 2];
              b[i + 4 >> 2] = b[k + 4 >> 2];
              b[i + 8 >> 2] = b[k + 8 >> 2];
              Xa(i);
            } else {
              f2 = Sa(k) | 0;
              if (f2 | 0) {
                d2 = 13;
                break;
              }
              b[i >> 2] = b[k >> 2];
              b[i + 4 >> 2] = b[k + 4 >> 2];
              b[i + 8 >> 2] = b[k + 8 >> 2];
              Wa(i);
            }
            Pa(h, i, j);
            Ma(j);
            f2 = e2;
            t2 = b[f2 >> 2] | 0;
            f2 = b[f2 + 4 >> 2] | 0;
            u5 = (15 - g2 | 0) * 3 | 0;
            s2 = Rd(7, 0, u5 | 0) | 0;
            f2 = f2 & ~(H() | 0);
            u5 = Rd(Ra(j) | 0, 0, u5 | 0) | 0;
            f2 = H() | 0 | f2;
            r2 = e2;
            b[r2 >> 2] = u5 | t2 & ~s2;
            b[r2 + 4 >> 2] = f2;
            if ((g2 | 0) <= 1) {
              d2 = 14;
              break;
            }
          }
          a: do {
            if ((d2 | 0) != 13) {
              if ((d2 | 0) == 14) {
                if (((b[k >> 2] | 0) <= 1 ? (b[k + 4 >> 2] | 0) <= 1 : 0) ? (b[k + 8 >> 2] | 0) <= 1 : 0) {
                  d2 = Ra(k) | 0;
                  f2 = va(n, d2) | 0;
                  if ((f2 | 0) == 127) {
                    j = 0;
                  } else {
                    j = oa(f2) | 0;
                  }
                  b: do {
                    if (!d2) {
                      if ((l | 0) != 0 & (j | 0) != 0) {
                        d2 = Pb(a2, c2) | 0;
                        g2 = e2;
                        g2 = Pb(b[g2 >> 2] | 0, b[g2 + 4 >> 2] | 0) | 0;
                        if ((d2 | 0) == 7 | (g2 | 0) == 7) {
                          f2 = 5;
                          break a;
                        }
                        g2 = b[21376 + (d2 * 28 | 0) + (g2 << 2) >> 2] | 0;
                        if ((g2 | 0) < 0) {
                          f2 = 5;
                          break a;
                        }
                        if (!g2) {
                          d2 = 59;
                        } else {
                          i = e2;
                          d2 = 0;
                          h = b[i >> 2] | 0;
                          i = b[i + 4 >> 2] | 0;
                          do {
                            h = Rb(h, i) | 0;
                            i = H() | 0;
                            u5 = e2;
                            b[u5 >> 2] = h;
                            b[u5 + 4 >> 2] = i;
                            d2 = d2 + 1 | 0;
                          } while ((d2 | 0) < (g2 | 0));
                          d2 = 58;
                        }
                      } else {
                        d2 = 58;
                      }
                    } else {
                      if (l) {
                        f2 = Pb(a2, c2) | 0;
                        if ((f2 | 0) == 7) {
                          f2 = 5;
                          break a;
                        }
                        g2 = b[21376 + (f2 * 28 | 0) + (d2 << 2) >> 2] | 0;
                        if ((g2 | 0) > 0) {
                          f2 = d2;
                          d2 = 0;
                          do {
                            f2 = $a(f2) | 0;
                            d2 = d2 + 1 | 0;
                          } while ((d2 | 0) != (g2 | 0));
                        } else {
                          f2 = d2;
                        }
                        if ((f2 | 0) == 1) {
                          f2 = 9;
                          break a;
                        }
                        d2 = va(n, f2) | 0;
                        if ((d2 | 0) == 127) {
                          I(27648, 27538, 411, 27678);
                        }
                        if (!(oa(d2) | 0)) {
                          p2 = d2;
                          o = g2;
                          m = f2;
                        } else {
                          I(27693, 27538, 412, 27678);
                        }
                      } else {
                        p2 = f2;
                        o = 0;
                        m = d2;
                      }
                      i = b[4272 + (n * 28 | 0) + (m << 2) >> 2] | 0;
                      if ((i | 0) <= -1) {
                        I(27724, 27538, 419, 27678);
                      }
                      if (!j) {
                        if ((o | 0) < 0) {
                          f2 = 5;
                          break a;
                        }
                        if (o | 0) {
                          g2 = e2;
                          f2 = 0;
                          d2 = b[g2 >> 2] | 0;
                          g2 = b[g2 + 4 >> 2] | 0;
                          do {
                            d2 = Rb(d2, g2) | 0;
                            g2 = H() | 0;
                            u5 = e2;
                            b[u5 >> 2] = d2;
                            b[u5 + 4 >> 2] = g2;
                            f2 = f2 + 1 | 0;
                          } while ((f2 | 0) < (o | 0));
                        }
                        if ((i | 0) <= 0) {
                          f2 = p2;
                          d2 = 58;
                          break;
                        }
                        g2 = e2;
                        f2 = 0;
                        d2 = b[g2 >> 2] | 0;
                        g2 = b[g2 + 4 >> 2] | 0;
                        while (1) {
                          d2 = Rb(d2, g2) | 0;
                          g2 = H() | 0;
                          u5 = e2;
                          b[u5 >> 2] = d2;
                          b[u5 + 4 >> 2] = g2;
                          f2 = f2 + 1 | 0;
                          if ((f2 | 0) == (i | 0)) {
                            f2 = p2;
                            d2 = 58;
                            break b;
                          }
                        }
                      }
                      h = wa(p2, n) | 0;
                      if ((h | 0) == 7) {
                        I(27514, 27538, 428, 27678);
                      }
                      f2 = e2;
                      d2 = b[f2 >> 2] | 0;
                      f2 = b[f2 + 4 >> 2] | 0;
                      if ((i | 0) > 0) {
                        g2 = 0;
                        do {
                          d2 = Rb(d2, f2) | 0;
                          f2 = H() | 0;
                          u5 = e2;
                          b[u5 >> 2] = d2;
                          b[u5 + 4 >> 2] = f2;
                          g2 = g2 + 1 | 0;
                        } while ((g2 | 0) != (i | 0));
                      }
                      f2 = Pb(d2, f2) | 0;
                      if ((f2 | 0) == 7) {
                        I(27795, 27538, 440, 27678);
                      }
                      d2 = pa(p2) | 0;
                      d2 = b[(d2 ? 21792 : 21584) + (h * 28 | 0) + (f2 << 2) >> 2] | 0;
                      if ((d2 | 0) < 0) {
                        I(27795, 27538, 454, 27678);
                      }
                      if (!d2) {
                        f2 = p2;
                        d2 = 58;
                      } else {
                        h = e2;
                        f2 = 0;
                        g2 = b[h >> 2] | 0;
                        h = b[h + 4 >> 2] | 0;
                        do {
                          g2 = Qb(g2, h) | 0;
                          h = H() | 0;
                          u5 = e2;
                          b[u5 >> 2] = g2;
                          b[u5 + 4 >> 2] = h;
                          f2 = f2 + 1 | 0;
                        } while ((f2 | 0) < (d2 | 0));
                        f2 = p2;
                        d2 = 58;
                      }
                    }
                  } while (0);
                  if ((d2 | 0) == 58) {
                    if (j) {
                      d2 = 59;
                    }
                  }
                  if ((d2 | 0) == 59) {
                    u5 = e2;
                    if ((Pb(b[u5 >> 2] | 0, b[u5 + 4 >> 2] | 0) | 0) == 1) {
                      f2 = 9;
                      break;
                    }
                  }
                  u5 = e2;
                  s2 = b[u5 >> 2] | 0;
                  u5 = b[u5 + 4 >> 2] & -1040385;
                  t2 = Rd(f2 | 0, 0, 45) | 0;
                  u5 = u5 | (H() | 0);
                  f2 = e2;
                  b[f2 >> 2] = s2 | t2;
                  b[f2 + 4 >> 2] = u5;
                  f2 = 0;
                } else {
                  f2 = 1;
                }
              }
            }
          } while (0);
          u5 = f2;
          T = q2;
          return u5 | 0;
        }
        function Jc(a2, b2, c2, d2, e2, f2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h = 0;
          h = T;
          T = T + 16 | 0;
          g2 = h;
          if (!e2) {
            a2 = Hc(a2, b2, c2, d2, g2) | 0;
            if (!a2) {
              eb2(g2, f2);
              a2 = 0;
            }
          } else {
            a2 = 15;
          }
          T = h;
          return a2 | 0;
        }
        function Kc(a2, b2, c2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0;
          g2 = T;
          T = T + 16 | 0;
          f2 = g2;
          if (!d2) {
            c2 = fb(c2, f2) | 0;
            if (!c2) {
              c2 = Ic(a2, b2, f2, e2) | 0;
            }
          } else {
            c2 = 15;
          }
          T = g2;
          return c2 | 0;
        }
        function Lc(a2, c2, d2, e2, f2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h = 0, i = 0, j = 0;
          j = T;
          T = T + 32 | 0;
          h = j + 12 | 0;
          i = j;
          g2 = Hc(a2, c2, a2, c2, h) | 0;
          if (g2 | 0) {
            i = g2;
            T = j;
            return i | 0;
          }
          a2 = Hc(a2, c2, d2, e2, i) | 0;
          if (a2 | 0) {
            i = a2;
            T = j;
            return i | 0;
          }
          h = db(h, i) | 0;
          i = f2;
          b[i >> 2] = h;
          b[i + 4 >> 2] = ((h | 0) < 0) << 31 >> 31;
          i = 0;
          T = j;
          return i | 0;
        }
        function Mc(a2, c2, d2, e2, f2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h = 0, i = 0, j = 0;
          j = T;
          T = T + 32 | 0;
          h = j + 12 | 0;
          i = j;
          g2 = Hc(a2, c2, a2, c2, h) | 0;
          if (!g2) {
            g2 = Hc(a2, c2, d2, e2, i) | 0;
            if (!g2) {
              e2 = db(h, i) | 0;
              e2 = Gd(e2 | 0, ((e2 | 0) < 0) << 31 >> 31 | 0, 1, 0) | 0;
              h = H() | 0;
              i = f2;
              b[i >> 2] = e2;
              b[i + 4 >> 2] = h;
              i = 0;
              T = j;
              return i | 0;
            }
          }
          i = g2;
          T = j;
          return i | 0;
        }
        function Nc(a2, c2, d2, e2, f2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, r2 = 0, s2 = 0, t2 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A2 = 0;
          z2 = T;
          T = T + 48 | 0;
          x2 = z2 + 24 | 0;
          h = z2 + 12 | 0;
          y2 = z2;
          g2 = Hc(a2, c2, a2, c2, x2) | 0;
          if (!g2) {
            g2 = Hc(a2, c2, d2, e2, h) | 0;
            if (!g2) {
              v3 = db(x2, h) | 0;
              w2 = ((v3 | 0) < 0) << 31 >> 31;
              b[x2 >> 2] = 0;
              b[x2 + 4 >> 2] = 0;
              b[x2 + 8 >> 2] = 0;
              b[h >> 2] = 0;
              b[h + 4 >> 2] = 0;
              b[h + 8 >> 2] = 0;
              if (Hc(a2, c2, a2, c2, x2) | 0) {
                I(27795, 27538, 692, 27747);
              }
              if (Hc(a2, c2, d2, e2, h) | 0) {
                I(27795, 27538, 697, 27747);
              }
              gb(x2);
              gb(h);
              l = (v3 | 0) == 0 ? 0 : 1 / +(v3 | 0);
              d2 = b[x2 >> 2] | 0;
              r2 = l * +((b[h >> 2] | 0) - d2 | 0);
              s2 = x2 + 4 | 0;
              e2 = b[s2 >> 2] | 0;
              t2 = l * +((b[h + 4 >> 2] | 0) - e2 | 0);
              u5 = x2 + 8 | 0;
              g2 = b[u5 >> 2] | 0;
              l = l * +((b[h + 8 >> 2] | 0) - g2 | 0);
              b[y2 >> 2] = d2;
              m = y2 + 4 | 0;
              b[m >> 2] = e2;
              n = y2 + 8 | 0;
              b[n >> 2] = g2;
              a: do {
                if ((v3 | 0) < 0) {
                  g2 = 0;
                } else {
                  o = 0;
                  p2 = 0;
                  while (1) {
                    j = +(p2 >>> 0) + 4294967296 * +(o | 0);
                    A2 = r2 * j + +(d2 | 0);
                    i = t2 * j + +(e2 | 0);
                    j = l * j + +(g2 | 0);
                    d2 = ~~+Vd(+A2);
                    h = ~~+Vd(+i);
                    g2 = ~~+Vd(+j);
                    A2 = +q(+(+(d2 | 0) - A2));
                    i = +q(+(+(h | 0) - i));
                    j = +q(+(+(g2 | 0) - j));
                    do {
                      if (!(A2 > i & A2 > j)) {
                        k = 0 - d2 | 0;
                        if (i > j) {
                          e2 = k - g2 | 0;
                          break;
                        } else {
                          e2 = h;
                          g2 = k - h | 0;
                          break;
                        }
                      } else {
                        d2 = 0 - (h + g2) | 0;
                        e2 = h;
                      }
                    } while (0);
                    b[y2 >> 2] = d2;
                    b[m >> 2] = e2;
                    b[n >> 2] = g2;
                    hb(y2);
                    g2 = Ic(a2, c2, y2, f2 + (p2 << 3) | 0) | 0;
                    if (g2 | 0) {
                      break a;
                    }
                    if (!((o | 0) < (w2 | 0) | (o | 0) == (w2 | 0) & p2 >>> 0 < v3 >>> 0)) {
                      g2 = 0;
                      break a;
                    }
                    d2 = Gd(p2 | 0, o | 0, 1, 0) | 0;
                    e2 = H() | 0;
                    o = e2;
                    p2 = d2;
                    d2 = b[x2 >> 2] | 0;
                    e2 = b[s2 >> 2] | 0;
                    g2 = b[u5 >> 2] | 0;
                  }
                }
              } while (0);
              y2 = g2;
              T = z2;
              return y2 | 0;
            }
          }
          y2 = g2;
          T = z2;
          return y2 | 0;
        }
        function Oc(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0;
          if ((c2 | 0) == 0 & (d2 | 0) == 0) {
            e2 = 0;
            f2 = 1;
            G(e2 | 0);
            return f2 | 0;
          }
          f2 = a2;
          e2 = b2;
          a2 = 1;
          b2 = 0;
          do {
            g2 = (c2 & 1 | 0) == 0 & true;
            a2 = Md((g2 ? 1 : f2) | 0, (g2 ? 0 : e2) | 0, a2 | 0, b2 | 0) | 0;
            b2 = H() | 0;
            c2 = Pd(c2 | 0, d2 | 0, 1) | 0;
            d2 = H() | 0;
            f2 = Md(f2 | 0, e2 | 0, f2 | 0, e2 | 0) | 0;
            e2 = H() | 0;
          } while (!((c2 | 0) == 0 & (d2 | 0) == 0));
          G(b2 | 0);
          return a2 | 0;
        }
        function Pc(a2, c2, d2, f2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0;
          j = T;
          T = T + 16 | 0;
          h = j;
          i = Qd(a2 | 0, c2 | 0, 52) | 0;
          H() | 0;
          i = i & 15;
          do {
            if (!i) {
              g2 = Qd(a2 | 0, c2 | 0, 45) | 0;
              H() | 0;
              g2 = g2 & 127;
              if (g2 >>> 0 > 121) {
                i = 5;
                T = j;
                return i | 0;
              } else {
                h = 22064 + (g2 << 5) | 0;
                b[d2 >> 2] = b[h >> 2];
                b[d2 + 4 >> 2] = b[h + 4 >> 2];
                b[d2 + 8 >> 2] = b[h + 8 >> 2];
                b[d2 + 12 >> 2] = b[h + 12 >> 2];
                b[d2 + 16 >> 2] = b[h + 16 >> 2];
                b[d2 + 20 >> 2] = b[h + 20 >> 2];
                b[d2 + 24 >> 2] = b[h + 24 >> 2];
                b[d2 + 28 >> 2] = b[h + 28 >> 2];
                break;
              }
            } else {
              g2 = Zb(a2, c2, h) | 0;
              if (!g2) {
                l = +e[h >> 3];
                k = 1 / +t(+l);
                m = +e[25968 + (i << 3) >> 3];
                e[d2 >> 3] = l + m;
                e[d2 + 8 >> 3] = l - m;
                l = +e[h + 8 >> 3];
                k = m * k;
                e[d2 + 16 >> 3] = k + l;
                e[d2 + 24 >> 3] = l - k;
                break;
              }
              i = g2;
              T = j;
              return i | 0;
            }
          } while (0);
          Ja(d2, f2 ? 1.4 : 1.1);
          f2 = 26096 + (i << 3) | 0;
          if ((b[f2 >> 2] | 0) == (a2 | 0) ? (b[f2 + 4 >> 2] | 0) == (c2 | 0) : 0) {
            e[d2 >> 3] = 1.5707963267948966;
          }
          i = 26224 + (i << 3) | 0;
          if ((b[i >> 2] | 0) == (a2 | 0) ? (b[i + 4 >> 2] | 0) == (c2 | 0) : 0) {
            e[d2 + 8 >> 3] = -1.5707963267948966;
          }
          if (!(+e[d2 >> 3] == 1.5707963267948966) ? !(+e[d2 + 8 >> 3] == -1.5707963267948966) : 0) {
            i = 0;
            T = j;
            return i | 0;
          }
          e[d2 + 16 >> 3] = 3.141592653589793;
          e[d2 + 24 >> 3] = -3.141592653589793;
          i = 0;
          T = j;
          return i | 0;
        }
        function Qc(c2, d2, e2, f2) {
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0;
          l = T;
          T = T + 48 | 0;
          i = l + 32 | 0;
          h = l + 40 | 0;
          j = l;
          Eb(i, 0, 0, 0);
          k = b[i >> 2] | 0;
          i = b[i + 4 >> 2] | 0;
          do {
            if (e2 >>> 0 <= 15) {
              g2 = Xc(f2) | 0;
              if (g2 | 0) {
                f2 = j;
                b[f2 >> 2] = 0;
                b[f2 + 4 >> 2] = 0;
                b[j + 8 >> 2] = g2;
                b[j + 12 >> 2] = -1;
                f2 = j + 16 | 0;
                k = j + 29 | 0;
                b[f2 >> 2] = 0;
                b[f2 + 4 >> 2] = 0;
                b[f2 + 8 >> 2] = 0;
                a[f2 + 12 >> 0] = 0;
                a[k >> 0] = a[h >> 0] | 0;
                a[k + 1 >> 0] = a[h + 1 >> 0] | 0;
                a[k + 2 >> 0] = a[h + 2 >> 0] | 0;
                break;
              }
              g2 = Fd((b[d2 + 8 >> 2] | 0) + 1 | 0, 32) | 0;
              if (!g2) {
                f2 = j;
                b[f2 >> 2] = 0;
                b[f2 + 4 >> 2] = 0;
                b[j + 8 >> 2] = 13;
                b[j + 12 >> 2] = -1;
                f2 = j + 16 | 0;
                k = j + 29 | 0;
                b[f2 >> 2] = 0;
                b[f2 + 4 >> 2] = 0;
                b[f2 + 8 >> 2] = 0;
                a[f2 + 12 >> 0] = 0;
                a[k >> 0] = a[h >> 0] | 0;
                a[k + 1 >> 0] = a[h + 1 >> 0] | 0;
                a[k + 2 >> 0] = a[h + 2 >> 0] | 0;
                break;
              } else {
                Yc(d2, g2);
                m = j;
                b[m >> 2] = k;
                b[m + 4 >> 2] = i;
                b[j + 8 >> 2] = 0;
                b[j + 12 >> 2] = e2;
                b[j + 16 >> 2] = f2;
                b[j + 20 >> 2] = d2;
                b[j + 24 >> 2] = g2;
                a[j + 28 >> 0] = 0;
                k = j + 29 | 0;
                a[k >> 0] = a[h >> 0] | 0;
                a[k + 1 >> 0] = a[h + 1 >> 0] | 0;
                a[k + 2 >> 0] = a[h + 2 >> 0] | 0;
                break;
              }
            } else {
              k = j;
              b[k >> 2] = 0;
              b[k + 4 >> 2] = 0;
              b[j + 8 >> 2] = 4;
              b[j + 12 >> 2] = -1;
              k = j + 16 | 0;
              m = j + 29 | 0;
              b[k >> 2] = 0;
              b[k + 4 >> 2] = 0;
              b[k + 8 >> 2] = 0;
              a[k + 12 >> 0] = 0;
              a[m >> 0] = a[h >> 0] | 0;
              a[m + 1 >> 0] = a[h + 1 >> 0] | 0;
              a[m + 2 >> 0] = a[h + 2 >> 0] | 0;
            }
          } while (0);
          Rc(j);
          b[c2 >> 2] = b[j >> 2];
          b[c2 + 4 >> 2] = b[j + 4 >> 2];
          b[c2 + 8 >> 2] = b[j + 8 >> 2];
          b[c2 + 12 >> 2] = b[j + 12 >> 2];
          b[c2 + 16 >> 2] = b[j + 16 >> 2];
          b[c2 + 20 >> 2] = b[j + 20 >> 2];
          b[c2 + 24 >> 2] = b[j + 24 >> 2];
          b[c2 + 28 >> 2] = b[j + 28 >> 2];
          T = l;
          return;
        }
        function Rc(c2) {
          c2 = c2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0, u5 = 0, v3 = 0, w2 = 0;
          w2 = T;
          T = T + 336 | 0;
          p2 = w2 + 168 | 0;
          q2 = w2;
          f2 = c2;
          e2 = b[f2 >> 2] | 0;
          f2 = b[f2 + 4 >> 2] | 0;
          if ((e2 | 0) == 0 & (f2 | 0) == 0) {
            T = w2;
            return;
          }
          d2 = c2 + 28 | 0;
          if (!(a[d2 >> 0] | 0)) {
            a[d2 >> 0] = 1;
          } else {
            e2 = Sc(e2, f2) | 0;
            f2 = H() | 0;
          }
          v3 = c2 + 20 | 0;
          if (!(b[b[v3 >> 2] >> 2] | 0)) {
            d2 = c2 + 24 | 0;
            e2 = b[d2 >> 2] | 0;
            if (e2 | 0) {
              Ed(e2);
            }
            u5 = c2;
            b[u5 >> 2] = 0;
            b[u5 + 4 >> 2] = 0;
            b[c2 + 8 >> 2] = 0;
            b[v3 >> 2] = 0;
            b[c2 + 12 >> 2] = -1;
            b[c2 + 16 >> 2] = 0;
            b[d2 >> 2] = 0;
            T = w2;
            return;
          }
          u5 = c2 + 16 | 0;
          d2 = b[u5 >> 2] | 0;
          g2 = d2 & 15;
          a: do {
            if (!((e2 | 0) == 0 & (f2 | 0) == 0)) {
              r2 = c2 + 12 | 0;
              n = (g2 | 0) == 3;
              m = d2 & 255;
              k = (g2 | 1 | 0) == 3;
              o = c2 + 24 | 0;
              l = (g2 + -1 | 0) >>> 0 < 3;
              i = (g2 | 2 | 0) == 3;
              j = q2 + 8 | 0;
              b: while (1) {
                h = Qd(e2 | 0, f2 | 0, 52) | 0;
                H() | 0;
                h = h & 15;
                if ((h | 0) == (b[r2 >> 2] | 0)) {
                  switch (m & 15) {
                    case 0:
                    case 2:
                    case 3: {
                      g2 = Zb(e2, f2, p2) | 0;
                      if (g2 | 0) {
                        s2 = 15;
                        break b;
                      }
                      if (Zc(b[v3 >> 2] | 0, b[o >> 2] | 0, p2) | 0) {
                        s2 = 19;
                        break b;
                      }
                      break;
                    }
                    default:
                  }
                  if (k ? (g2 = b[(b[v3 >> 2] | 0) + 4 >> 2] | 0, b[p2 >> 2] = b[g2 >> 2], b[p2 + 4 >> 2] = b[g2 + 4 >> 2], b[p2 + 8 >> 2] = b[g2 + 8 >> 2], b[p2 + 12 >> 2] = b[g2 + 12 >> 2], Ca(26832, p2) | 0) : 0) {
                    if (Wb(b[(b[v3 >> 2] | 0) + 4 >> 2] | 0, h, q2) | 0) {
                      s2 = 25;
                      break;
                    }
                    g2 = q2;
                    if ((b[g2 >> 2] | 0) == (e2 | 0) ? (b[g2 + 4 >> 2] | 0) == (f2 | 0) : 0) {
                      s2 = 29;
                      break;
                    }
                  }
                  if (l) {
                    g2 = _b2(e2, f2, p2) | 0;
                    if (g2 | 0) {
                      s2 = 32;
                      break;
                    }
                    if (Pc(e2, f2, q2, 0) | 0) {
                      s2 = 36;
                      break;
                    }
                    if (i ? _c(b[v3 >> 2] | 0, b[o >> 2] | 0, p2, q2) | 0 : 0) {
                      s2 = 42;
                      break;
                    }
                    if (k ? ad(b[v3 >> 2] | 0, b[o >> 2] | 0, p2, q2) | 0 : 0) {
                      s2 = 42;
                      break;
                    }
                  }
                  if (n) {
                    d2 = Pc(e2, f2, p2, 1) | 0;
                    g2 = b[o >> 2] | 0;
                    if (d2 | 0) {
                      s2 = 45;
                      break;
                    }
                    if (Da(g2, p2) | 0) {
                      Ga(q2, p2);
                      if (Fa(p2, b[o >> 2] | 0) | 0) {
                        s2 = 53;
                        break;
                      }
                      if (Zc(b[v3 >> 2] | 0, b[o >> 2] | 0, j) | 0) {
                        s2 = 53;
                        break;
                      }
                      if (ad(b[v3 >> 2] | 0, b[o >> 2] | 0, q2, p2) | 0) {
                        s2 = 53;
                        break;
                      }
                    }
                  }
                }
                do {
                  if ((h | 0) < (b[r2 >> 2] | 0)) {
                    d2 = Pc(e2, f2, p2, 1) | 0;
                    g2 = b[o >> 2] | 0;
                    if (d2 | 0) {
                      s2 = 58;
                      break b;
                    }
                    if (!(Da(g2, p2) | 0)) {
                      s2 = 73;
                      break;
                    }
                    if (Fa(b[o >> 2] | 0, p2) | 0 ? (Ga(q2, p2), _c(b[v3 >> 2] | 0, b[o >> 2] | 0, q2, p2) | 0) : 0) {
                      s2 = 65;
                      break b;
                    }
                    e2 = Kb(e2, f2, h + 1 | 0, q2) | 0;
                    if (e2 | 0) {
                      s2 = 67;
                      break b;
                    }
                    f2 = q2;
                    e2 = b[f2 >> 2] | 0;
                    f2 = b[f2 + 4 >> 2] | 0;
                  } else {
                    s2 = 73;
                  }
                } while (0);
                if ((s2 | 0) == 73) {
                  s2 = 0;
                  e2 = Sc(e2, f2) | 0;
                  f2 = H() | 0;
                }
                if ((e2 | 0) == 0 & (f2 | 0) == 0) {
                  t2 = o;
                  break a;
                }
              }
              switch (s2 | 0) {
                case 15: {
                  d2 = b[o >> 2] | 0;
                  if (d2 | 0) {
                    Ed(d2);
                  }
                  s2 = c2;
                  b[s2 >> 2] = 0;
                  b[s2 + 4 >> 2] = 0;
                  b[v3 >> 2] = 0;
                  b[r2 >> 2] = -1;
                  b[u5 >> 2] = 0;
                  b[o >> 2] = 0;
                  b[c2 + 8 >> 2] = g2;
                  s2 = 20;
                  break;
                }
                case 19: {
                  b[c2 >> 2] = e2;
                  b[c2 + 4 >> 2] = f2;
                  s2 = 20;
                  break;
                }
                case 25: {
                  I(27795, 27761, 470, 27772);
                  break;
                }
                case 29: {
                  b[c2 >> 2] = e2;
                  b[c2 + 4 >> 2] = f2;
                  T = w2;
                  return;
                }
                case 32: {
                  d2 = b[o >> 2] | 0;
                  if (d2 | 0) {
                    Ed(d2);
                  }
                  t2 = c2;
                  b[t2 >> 2] = 0;
                  b[t2 + 4 >> 2] = 0;
                  b[v3 >> 2] = 0;
                  b[r2 >> 2] = -1;
                  b[u5 >> 2] = 0;
                  b[o >> 2] = 0;
                  b[c2 + 8 >> 2] = g2;
                  T = w2;
                  return;
                }
                case 36: {
                  I(27795, 27761, 493, 27772);
                  break;
                }
                case 42: {
                  b[c2 >> 2] = e2;
                  b[c2 + 4 >> 2] = f2;
                  T = w2;
                  return;
                }
                case 45: {
                  if (g2 | 0) {
                    Ed(g2);
                  }
                  s2 = c2;
                  b[s2 >> 2] = 0;
                  b[s2 + 4 >> 2] = 0;
                  b[v3 >> 2] = 0;
                  b[r2 >> 2] = -1;
                  b[u5 >> 2] = 0;
                  b[o >> 2] = 0;
                  b[c2 + 8 >> 2] = d2;
                  s2 = 55;
                  break;
                }
                case 53: {
                  b[c2 >> 2] = e2;
                  b[c2 + 4 >> 2] = f2;
                  s2 = 55;
                  break;
                }
                case 58: {
                  if (g2 | 0) {
                    Ed(g2);
                  }
                  s2 = c2;
                  b[s2 >> 2] = 0;
                  b[s2 + 4 >> 2] = 0;
                  b[v3 >> 2] = 0;
                  b[r2 >> 2] = -1;
                  b[u5 >> 2] = 0;
                  b[o >> 2] = 0;
                  b[c2 + 8 >> 2] = d2;
                  s2 = 71;
                  break;
                }
                case 65: {
                  b[c2 >> 2] = e2;
                  b[c2 + 4 >> 2] = f2;
                  s2 = 71;
                  break;
                }
                case 67: {
                  d2 = b[o >> 2] | 0;
                  if (d2 | 0) {
                    Ed(d2);
                  }
                  t2 = c2;
                  b[t2 >> 2] = 0;
                  b[t2 + 4 >> 2] = 0;
                  b[v3 >> 2] = 0;
                  b[r2 >> 2] = -1;
                  b[u5 >> 2] = 0;
                  b[o >> 2] = 0;
                  b[c2 + 8 >> 2] = e2;
                  T = w2;
                  return;
                }
              }
              if ((s2 | 0) == 20) {
                T = w2;
                return;
              } else if ((s2 | 0) == 55) {
                T = w2;
                return;
              } else if ((s2 | 0) == 71) {
                T = w2;
                return;
              }
            } else {
              t2 = c2 + 24 | 0;
            }
          } while (0);
          d2 = b[t2 >> 2] | 0;
          if (d2 | 0) {
            Ed(d2);
          }
          s2 = c2;
          b[s2 >> 2] = 0;
          b[s2 + 4 >> 2] = 0;
          b[c2 + 8 >> 2] = 0;
          b[v3 >> 2] = 0;
          b[c2 + 12 >> 2] = -1;
          b[u5 >> 2] = 0;
          b[t2 >> 2] = 0;
          T = w2;
          return;
        }
        function Sc(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0;
          m = T;
          T = T + 16 | 0;
          l = m;
          e2 = Qd(a2 | 0, c2 | 0, 52) | 0;
          H() | 0;
          e2 = e2 & 15;
          d2 = Qd(a2 | 0, c2 | 0, 45) | 0;
          H() | 0;
          do {
            if (e2) {
              while (1) {
                d2 = Rd(e2 + 4095 | 0, 0, 52) | 0;
                f2 = H() | 0 | c2 & -15728641;
                g2 = (15 - e2 | 0) * 3 | 0;
                h = Rd(7, 0, g2 | 0) | 0;
                i = H() | 0;
                d2 = d2 | a2 | h;
                f2 = f2 | i;
                j = Qd(a2 | 0, c2 | 0, g2 | 0) | 0;
                H() | 0;
                j = j & 7;
                e2 = e2 + -1 | 0;
                if (j >>> 0 < 6) {
                  break;
                }
                if (!e2) {
                  k = 4;
                  break;
                } else {
                  c2 = f2;
                  a2 = d2;
                }
              }
              if ((k | 0) == 4) {
                d2 = Qd(d2 | 0, f2 | 0, 45) | 0;
                H() | 0;
                break;
              }
              l = (j | 0) == 0 & (Hb(d2, f2) | 0) != 0;
              l = Rd((l ? 2 : 1) + j | 0, 0, g2 | 0) | 0;
              k = H() | 0 | c2 & ~i;
              l = l | a2 & ~h;
              G(k | 0);
              T = m;
              return l | 0;
            }
          } while (0);
          d2 = d2 & 127;
          if (d2 >>> 0 > 120) {
            k = 0;
            l = 0;
            G(k | 0);
            T = m;
            return l | 0;
          }
          Eb(l, 0, d2 + 1 | 0, 0);
          k = b[l + 4 >> 2] | 0;
          l = b[l >> 2] | 0;
          G(k | 0);
          T = m;
          return l | 0;
        }
        function Tc(a2, c2, d2, e2, f2, g2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          var h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0;
          r2 = T;
          T = T + 160 | 0;
          m = r2 + 80 | 0;
          i = r2 + 64 | 0;
          n = r2 + 112 | 0;
          q2 = r2;
          Qc(m, a2, c2, d2);
          k = m;
          fc(i, b[k >> 2] | 0, b[k + 4 >> 2] | 0, c2);
          k = i;
          j = b[k >> 2] | 0;
          k = b[k + 4 >> 2] | 0;
          h = b[m + 8 >> 2] | 0;
          o = n + 4 | 0;
          b[o >> 2] = b[m >> 2];
          b[o + 4 >> 2] = b[m + 4 >> 2];
          b[o + 8 >> 2] = b[m + 8 >> 2];
          b[o + 12 >> 2] = b[m + 12 >> 2];
          b[o + 16 >> 2] = b[m + 16 >> 2];
          b[o + 20 >> 2] = b[m + 20 >> 2];
          b[o + 24 >> 2] = b[m + 24 >> 2];
          b[o + 28 >> 2] = b[m + 28 >> 2];
          o = q2;
          b[o >> 2] = j;
          b[o + 4 >> 2] = k;
          o = q2 + 8 | 0;
          b[o >> 2] = h;
          a2 = q2 + 12 | 0;
          c2 = n;
          d2 = a2 + 36 | 0;
          do {
            b[a2 >> 2] = b[c2 >> 2];
            a2 = a2 + 4 | 0;
            c2 = c2 + 4 | 0;
          } while ((a2 | 0) < (d2 | 0));
          n = q2 + 48 | 0;
          b[n >> 2] = b[i >> 2];
          b[n + 4 >> 2] = b[i + 4 >> 2];
          b[n + 8 >> 2] = b[i + 8 >> 2];
          b[n + 12 >> 2] = b[i + 12 >> 2];
          if ((j | 0) == 0 & (k | 0) == 0) {
            q2 = h;
            T = r2;
            return q2 | 0;
          }
          d2 = q2 + 16 | 0;
          l = q2 + 24 | 0;
          m = q2 + 28 | 0;
          h = 0;
          i = 0;
          c2 = j;
          a2 = k;
          do {
            if (!((h | 0) < (f2 | 0) | (h | 0) == (f2 | 0) & i >>> 0 < e2 >>> 0)) {
              p2 = 4;
              break;
            }
            k = i;
            i = Gd(i | 0, h | 0, 1, 0) | 0;
            h = H() | 0;
            k = g2 + (k << 3) | 0;
            b[k >> 2] = c2;
            b[k + 4 >> 2] = a2;
            hc(n);
            a2 = n;
            c2 = b[a2 >> 2] | 0;
            a2 = b[a2 + 4 >> 2] | 0;
            if ((c2 | 0) == 0 & (a2 | 0) == 0) {
              Rc(d2);
              c2 = d2;
              a2 = b[c2 >> 2] | 0;
              c2 = b[c2 + 4 >> 2] | 0;
              if ((a2 | 0) == 0 & (c2 | 0) == 0) {
                p2 = 10;
                break;
              }
              gc(a2, c2, b[m >> 2] | 0, n);
              a2 = n;
              c2 = b[a2 >> 2] | 0;
              a2 = b[a2 + 4 >> 2] | 0;
            }
            k = q2;
            b[k >> 2] = c2;
            b[k + 4 >> 2] = a2;
          } while (!((c2 | 0) == 0 & (a2 | 0) == 0));
          if ((p2 | 0) == 4) {
            a2 = q2 + 40 | 0;
            c2 = b[a2 >> 2] | 0;
            if (c2 | 0) {
              Ed(c2);
            }
            p2 = q2 + 16 | 0;
            b[p2 >> 2] = 0;
            b[p2 + 4 >> 2] = 0;
            b[l >> 2] = 0;
            b[q2 + 36 >> 2] = 0;
            b[m >> 2] = -1;
            b[q2 + 32 >> 2] = 0;
            b[a2 >> 2] = 0;
            gc(0, 0, 0, n);
            b[q2 >> 2] = 0;
            b[q2 + 4 >> 2] = 0;
            b[o >> 2] = 0;
            q2 = 14;
            T = r2;
            return q2 | 0;
          } else if ((p2 | 0) == 10) {
            b[q2 >> 2] = 0;
            b[q2 + 4 >> 2] = 0;
            b[o >> 2] = b[l >> 2];
          }
          q2 = b[o >> 2] | 0;
          T = r2;
          return q2 | 0;
        }
        function Uc(c2, d2, f2, g2) {
          c2 = c2 | 0;
          d2 = d2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          var h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, r2 = 0;
          o = T;
          T = T + 48 | 0;
          l = o + 32 | 0;
          k = o + 40 | 0;
          m = o;
          if (!(b[c2 >> 2] | 0)) {
            n = g2;
            b[n >> 2] = 0;
            b[n + 4 >> 2] = 0;
            n = 0;
            T = o;
            return n | 0;
          }
          Eb(l, 0, 0, 0);
          j = l;
          h = b[j >> 2] | 0;
          j = b[j + 4 >> 2] | 0;
          do {
            if (d2 >>> 0 > 15) {
              n = m;
              b[n >> 2] = 0;
              b[n + 4 >> 2] = 0;
              b[m + 8 >> 2] = 4;
              b[m + 12 >> 2] = -1;
              n = m + 16 | 0;
              f2 = m + 29 | 0;
              b[n >> 2] = 0;
              b[n + 4 >> 2] = 0;
              b[n + 8 >> 2] = 0;
              a[n + 12 >> 0] = 0;
              a[f2 >> 0] = a[k >> 0] | 0;
              a[f2 + 1 >> 0] = a[k + 1 >> 0] | 0;
              a[f2 + 2 >> 0] = a[k + 2 >> 0] | 0;
              f2 = 4;
              n = 9;
            } else {
              f2 = Xc(f2) | 0;
              if (f2 | 0) {
                l = m;
                b[l >> 2] = 0;
                b[l + 4 >> 2] = 0;
                b[m + 8 >> 2] = f2;
                b[m + 12 >> 2] = -1;
                l = m + 16 | 0;
                n = m + 29 | 0;
                b[l >> 2] = 0;
                b[l + 4 >> 2] = 0;
                b[l + 8 >> 2] = 0;
                a[l + 12 >> 0] = 0;
                a[n >> 0] = a[k >> 0] | 0;
                a[n + 1 >> 0] = a[k + 1 >> 0] | 0;
                a[n + 2 >> 0] = a[k + 2 >> 0] | 0;
                n = 9;
                break;
              }
              f2 = Fd((b[c2 + 8 >> 2] | 0) + 1 | 0, 32) | 0;
              if (!f2) {
                n = m;
                b[n >> 2] = 0;
                b[n + 4 >> 2] = 0;
                b[m + 8 >> 2] = 13;
                b[m + 12 >> 2] = -1;
                n = m + 16 | 0;
                f2 = m + 29 | 0;
                b[n >> 2] = 0;
                b[n + 4 >> 2] = 0;
                b[n + 8 >> 2] = 0;
                a[n + 12 >> 0] = 0;
                a[f2 >> 0] = a[k >> 0] | 0;
                a[f2 + 1 >> 0] = a[k + 1 >> 0] | 0;
                a[f2 + 2 >> 0] = a[k + 2 >> 0] | 0;
                f2 = 13;
                n = 9;
                break;
              }
              Yc(c2, f2);
              r2 = m;
              b[r2 >> 2] = h;
              b[r2 + 4 >> 2] = j;
              j = m + 8 | 0;
              b[j >> 2] = 0;
              b[m + 12 >> 2] = d2;
              b[m + 20 >> 2] = c2;
              b[m + 24 >> 2] = f2;
              a[m + 28 >> 0] = 0;
              h = m + 29 | 0;
              a[h >> 0] = a[k >> 0] | 0;
              a[h + 1 >> 0] = a[k + 1 >> 0] | 0;
              a[h + 2 >> 0] = a[k + 2 >> 0] | 0;
              b[m + 16 >> 2] = 3;
              p2 = +Ba(f2);
              p2 = p2 * +za(f2);
              i = +q(+ +e[f2 >> 3]);
              i = p2 / +t(+ +Ud(+i, + +q(+ +e[f2 + 8 >> 3]))) * 6371.007180918475 * 6371.007180918475;
              h = m + 12 | 0;
              f2 = b[h >> 2] | 0;
              a: do {
                if ((f2 | 0) > 0) {
                  do {
                    qc(f2 + -1 | 0, l) | 0;
                    if (!(i / +e[l >> 3] > 10)) {
                      break a;
                    }
                    r2 = b[h >> 2] | 0;
                    f2 = r2 + -1 | 0;
                    b[h >> 2] = f2;
                  } while ((r2 | 0) > 1);
                }
              } while (0);
              Rc(m);
              h = g2;
              b[h >> 2] = 0;
              b[h + 4 >> 2] = 0;
              h = m;
              f2 = b[h >> 2] | 0;
              h = b[h + 4 >> 2] | 0;
              if (!((f2 | 0) == 0 & (h | 0) == 0)) {
                do {
                  Gb(f2, h, d2, l) | 0;
                  k = l;
                  c2 = g2;
                  k = Gd(b[c2 >> 2] | 0, b[c2 + 4 >> 2] | 0, b[k >> 2] | 0, b[k + 4 >> 2] | 0) | 0;
                  c2 = H() | 0;
                  r2 = g2;
                  b[r2 >> 2] = k;
                  b[r2 + 4 >> 2] = c2;
                  Rc(m);
                  r2 = m;
                  f2 = b[r2 >> 2] | 0;
                  h = b[r2 + 4 >> 2] | 0;
                } while (!((f2 | 0) == 0 & (h | 0) == 0));
              }
              f2 = b[j >> 2] | 0;
            }
          } while (0);
          r2 = f2;
          T = o;
          return r2 | 0;
        }
        function Vc(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0;
          if (!(Ca(c2, d2) | 0)) {
            o = 0;
            return o | 0;
          }
          c2 = Aa(c2) | 0;
          f2 = +e[d2 >> 3];
          g2 = +e[d2 + 8 >> 3];
          g2 = c2 & g2 < 0 ? g2 + 6.283185307179586 : g2;
          o = b[a2 >> 2] | 0;
          if ((o | 0) <= 0) {
            o = 0;
            return o | 0;
          }
          n = b[a2 + 4 >> 2] | 0;
          if (c2) {
            c2 = 0;
            m = g2;
            d2 = -1;
            a2 = 0;
            a: while (1) {
              l = a2;
              while (1) {
                i = +e[n + (l << 4) >> 3];
                g2 = +e[n + (l << 4) + 8 >> 3];
                a2 = (d2 + 2 | 0) % (o | 0) | 0;
                h = +e[n + (a2 << 4) >> 3];
                j = +e[n + (a2 << 4) + 8 >> 3];
                if (i > h) {
                  k = i;
                  i = j;
                } else {
                  k = h;
                  h = i;
                  i = g2;
                  g2 = j;
                }
                f2 = f2 == h | f2 == k ? f2 + 2220446049250313e-31 : f2;
                if (!(f2 < h | f2 > k)) {
                  break;
                }
                d2 = l + 1 | 0;
                if ((d2 | 0) >= (o | 0)) {
                  d2 = 22;
                  break a;
                } else {
                  a2 = l;
                  l = d2;
                  d2 = a2;
                }
              }
              j = i < 0 ? i + 6.283185307179586 : i;
              i = g2 < 0 ? g2 + 6.283185307179586 : g2;
              m = j == m | i == m ? m + -2220446049250313e-31 : m;
              k = j + (i - j) * ((f2 - h) / (k - h));
              if ((k < 0 ? k + 6.283185307179586 : k) > m) {
                c2 = c2 ^ 1;
              }
              a2 = l + 1 | 0;
              if ((a2 | 0) >= (o | 0)) {
                d2 = 22;
                break;
              } else {
                d2 = l;
              }
            }
            if ((d2 | 0) == 22) {
              return c2 | 0;
            }
          } else {
            c2 = 0;
            m = g2;
            d2 = -1;
            a2 = 0;
            b: while (1) {
              l = a2;
              while (1) {
                i = +e[n + (l << 4) >> 3];
                g2 = +e[n + (l << 4) + 8 >> 3];
                a2 = (d2 + 2 | 0) % (o | 0) | 0;
                h = +e[n + (a2 << 4) >> 3];
                j = +e[n + (a2 << 4) + 8 >> 3];
                if (i > h) {
                  k = i;
                  i = j;
                } else {
                  k = h;
                  h = i;
                  i = g2;
                  g2 = j;
                }
                f2 = f2 == h | f2 == k ? f2 + 2220446049250313e-31 : f2;
                if (!(f2 < h | f2 > k)) {
                  break;
                }
                d2 = l + 1 | 0;
                if ((d2 | 0) >= (o | 0)) {
                  d2 = 22;
                  break b;
                } else {
                  a2 = l;
                  l = d2;
                  d2 = a2;
                }
              }
              m = i == m | g2 == m ? m + -2220446049250313e-31 : m;
              if (i + (g2 - i) * ((f2 - h) / (k - h)) > m) {
                c2 = c2 ^ 1;
              }
              a2 = l + 1 | 0;
              if ((a2 | 0) >= (o | 0)) {
                d2 = 22;
                break;
              } else {
                d2 = l;
              }
            }
            if ((d2 | 0) == 22) {
              return c2 | 0;
            }
          }
          return 0;
        }
        function Wc(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          var d2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, r2 = 0, s2 = 0, t2 = 0, u5 = 0, v3 = 0;
          r2 = b[a2 >> 2] | 0;
          if (!r2) {
            b[c2 >> 2] = 0;
            b[c2 + 4 >> 2] = 0;
            b[c2 + 8 >> 2] = 0;
            b[c2 + 12 >> 2] = 0;
            b[c2 + 16 >> 2] = 0;
            b[c2 + 20 >> 2] = 0;
            b[c2 + 24 >> 2] = 0;
            b[c2 + 28 >> 2] = 0;
            return;
          }
          s2 = c2 + 8 | 0;
          e[s2 >> 3] = 17976931348623157e292;
          t2 = c2 + 24 | 0;
          e[t2 >> 3] = 17976931348623157e292;
          e[c2 >> 3] = -17976931348623157e292;
          u5 = c2 + 16 | 0;
          e[u5 >> 3] = -17976931348623157e292;
          if ((r2 | 0) <= 0) {
            return;
          }
          o = b[a2 + 4 >> 2] | 0;
          l = 17976931348623157e292;
          m = -17976931348623157e292;
          n = 0;
          a2 = -1;
          h = 17976931348623157e292;
          i = 17976931348623157e292;
          k = -17976931348623157e292;
          f2 = -17976931348623157e292;
          p2 = 0;
          while (1) {
            d2 = +e[o + (p2 << 4) >> 3];
            j = +e[o + (p2 << 4) + 8 >> 3];
            a2 = a2 + 2 | 0;
            g2 = +e[o + (((a2 | 0) == (r2 | 0) ? 0 : a2) << 4) + 8 >> 3];
            if (d2 < h) {
              e[s2 >> 3] = d2;
              h = d2;
            }
            if (j < i) {
              e[t2 >> 3] = j;
              i = j;
            }
            if (d2 > k) {
              e[c2 >> 3] = d2;
            } else {
              d2 = k;
            }
            if (j > f2) {
              e[u5 >> 3] = j;
              f2 = j;
            }
            l = j > 0 & j < l ? j : l;
            m = j < 0 & j > m ? j : m;
            n = n | +q(+(j - g2)) > 3.141592653589793;
            a2 = p2 + 1 | 0;
            if ((a2 | 0) == (r2 | 0)) {
              break;
            } else {
              v3 = p2;
              k = d2;
              p2 = a2;
              a2 = v3;
            }
          }
          if (!n) {
            return;
          }
          e[u5 >> 3] = m;
          e[t2 >> 3] = l;
          return;
        }
        function Xc(a2) {
          a2 = a2 | 0;
          return (a2 >>> 0 < 4 ? 0 : 15) | 0;
        }
        function Yc(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          var d2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, r2 = 0, s2 = 0, t2 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A2 = 0;
          r2 = b[a2 >> 2] | 0;
          if (r2) {
            s2 = c2 + 8 | 0;
            e[s2 >> 3] = 17976931348623157e292;
            t2 = c2 + 24 | 0;
            e[t2 >> 3] = 17976931348623157e292;
            e[c2 >> 3] = -17976931348623157e292;
            u5 = c2 + 16 | 0;
            e[u5 >> 3] = -17976931348623157e292;
            if ((r2 | 0) > 0) {
              g2 = b[a2 + 4 >> 2] | 0;
              o = 17976931348623157e292;
              p2 = -17976931348623157e292;
              f2 = 0;
              d2 = -1;
              k = 17976931348623157e292;
              l = 17976931348623157e292;
              n = -17976931348623157e292;
              i = -17976931348623157e292;
              v3 = 0;
              while (1) {
                h = +e[g2 + (v3 << 4) >> 3];
                m = +e[g2 + (v3 << 4) + 8 >> 3];
                z2 = d2 + 2 | 0;
                j = +e[g2 + (((z2 | 0) == (r2 | 0) ? 0 : z2) << 4) + 8 >> 3];
                if (h < k) {
                  e[s2 >> 3] = h;
                  k = h;
                }
                if (m < l) {
                  e[t2 >> 3] = m;
                  l = m;
                }
                if (h > n) {
                  e[c2 >> 3] = h;
                } else {
                  h = n;
                }
                if (m > i) {
                  e[u5 >> 3] = m;
                  i = m;
                }
                o = m > 0 & m < o ? m : o;
                p2 = m < 0 & m > p2 ? m : p2;
                f2 = f2 | +q(+(m - j)) > 3.141592653589793;
                d2 = v3 + 1 | 0;
                if ((d2 | 0) == (r2 | 0)) {
                  break;
                } else {
                  z2 = v3;
                  n = h;
                  v3 = d2;
                  d2 = z2;
                }
              }
              if (f2) {
                e[u5 >> 3] = p2;
                e[t2 >> 3] = o;
              }
            }
          } else {
            b[c2 >> 2] = 0;
            b[c2 + 4 >> 2] = 0;
            b[c2 + 8 >> 2] = 0;
            b[c2 + 12 >> 2] = 0;
            b[c2 + 16 >> 2] = 0;
            b[c2 + 20 >> 2] = 0;
            b[c2 + 24 >> 2] = 0;
            b[c2 + 28 >> 2] = 0;
          }
          z2 = a2 + 8 | 0;
          d2 = b[z2 >> 2] | 0;
          if ((d2 | 0) <= 0) {
            return;
          }
          y2 = a2 + 12 | 0;
          x2 = 0;
          do {
            g2 = b[y2 >> 2] | 0;
            f2 = x2;
            x2 = x2 + 1 | 0;
            t2 = c2 + (x2 << 5) | 0;
            u5 = b[g2 + (f2 << 3) >> 2] | 0;
            if (u5) {
              v3 = c2 + (x2 << 5) + 8 | 0;
              e[v3 >> 3] = 17976931348623157e292;
              a2 = c2 + (x2 << 5) + 24 | 0;
              e[a2 >> 3] = 17976931348623157e292;
              e[t2 >> 3] = -17976931348623157e292;
              w2 = c2 + (x2 << 5) + 16 | 0;
              e[w2 >> 3] = -17976931348623157e292;
              if ((u5 | 0) > 0) {
                r2 = b[g2 + (f2 << 3) + 4 >> 2] | 0;
                o = 17976931348623157e292;
                p2 = -17976931348623157e292;
                g2 = 0;
                f2 = -1;
                s2 = 0;
                k = 17976931348623157e292;
                l = 17976931348623157e292;
                m = -17976931348623157e292;
                i = -17976931348623157e292;
                while (1) {
                  h = +e[r2 + (s2 << 4) >> 3];
                  n = +e[r2 + (s2 << 4) + 8 >> 3];
                  f2 = f2 + 2 | 0;
                  j = +e[r2 + (((f2 | 0) == (u5 | 0) ? 0 : f2) << 4) + 8 >> 3];
                  if (h < k) {
                    e[v3 >> 3] = h;
                    k = h;
                  }
                  if (n < l) {
                    e[a2 >> 3] = n;
                    l = n;
                  }
                  if (h > m) {
                    e[t2 >> 3] = h;
                  } else {
                    h = m;
                  }
                  if (n > i) {
                    e[w2 >> 3] = n;
                    i = n;
                  }
                  o = n > 0 & n < o ? n : o;
                  p2 = n < 0 & n > p2 ? n : p2;
                  g2 = g2 | +q(+(n - j)) > 3.141592653589793;
                  f2 = s2 + 1 | 0;
                  if ((f2 | 0) == (u5 | 0)) {
                    break;
                  } else {
                    A2 = s2;
                    s2 = f2;
                    m = h;
                    f2 = A2;
                  }
                }
                if (g2) {
                  e[w2 >> 3] = p2;
                  e[a2 >> 3] = o;
                }
              }
            } else {
              b[t2 >> 2] = 0;
              b[t2 + 4 >> 2] = 0;
              b[t2 + 8 >> 2] = 0;
              b[t2 + 12 >> 2] = 0;
              b[t2 + 16 >> 2] = 0;
              b[t2 + 20 >> 2] = 0;
              b[t2 + 24 >> 2] = 0;
              b[t2 + 28 >> 2] = 0;
              d2 = b[z2 >> 2] | 0;
            }
          } while ((x2 | 0) < (d2 | 0));
          return;
        }
        function Zc(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0;
          if (!(Vc(a2, c2, d2) | 0)) {
            f2 = 0;
            return f2 | 0;
          }
          f2 = a2 + 8 | 0;
          if ((b[f2 >> 2] | 0) <= 0) {
            f2 = 1;
            return f2 | 0;
          }
          e2 = a2 + 12 | 0;
          a2 = 0;
          while (1) {
            g2 = a2;
            a2 = a2 + 1 | 0;
            if (Vc((b[e2 >> 2] | 0) + (g2 << 3) | 0, c2 + (a2 << 5) | 0, d2) | 0) {
              a2 = 0;
              e2 = 6;
              break;
            }
            if ((a2 | 0) >= (b[f2 >> 2] | 0)) {
              a2 = 1;
              e2 = 6;
              break;
            }
          }
          if ((e2 | 0) == 6) {
            return a2 | 0;
          }
          return 0;
        }
        function _c(a2, c2, d2, e2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0;
          k = T;
          T = T + 16 | 0;
          i = k;
          h = d2 + 8 | 0;
          if (!(Vc(a2, c2, h) | 0)) {
            j = 0;
            T = k;
            return j | 0;
          }
          j = a2 + 8 | 0;
          a: do {
            if ((b[j >> 2] | 0) > 0) {
              g2 = a2 + 12 | 0;
              f2 = 0;
              while (1) {
                l = f2;
                f2 = f2 + 1 | 0;
                if (Vc((b[g2 >> 2] | 0) + (l << 3) | 0, c2 + (f2 << 5) | 0, h) | 0) {
                  f2 = 0;
                  break;
                }
                if ((f2 | 0) >= (b[j >> 2] | 0)) {
                  break a;
                }
              }
              T = k;
              return f2 | 0;
            }
          } while (0);
          if ($c(a2, c2, d2, e2) | 0) {
            l = 0;
            T = k;
            return l | 0;
          }
          b[i >> 2] = b[d2 >> 2];
          b[i + 4 >> 2] = h;
          f2 = b[j >> 2] | 0;
          b: do {
            if ((f2 | 0) > 0) {
              a2 = a2 + 12 | 0;
              h = 0;
              g2 = f2;
              while (1) {
                f2 = b[a2 >> 2] | 0;
                if ((b[f2 + (h << 3) >> 2] | 0) > 0) {
                  if (Vc(i, e2, b[f2 + (h << 3) + 4 >> 2] | 0) | 0) {
                    f2 = 0;
                    break b;
                  }
                  f2 = h + 1 | 0;
                  if ($c((b[a2 >> 2] | 0) + (h << 3) | 0, c2 + (f2 << 5) | 0, d2, e2) | 0) {
                    f2 = 0;
                    break b;
                  }
                  g2 = b[j >> 2] | 0;
                } else {
                  f2 = h + 1 | 0;
                }
                if ((f2 | 0) < (g2 | 0)) {
                  h = f2;
                } else {
                  f2 = 1;
                  break;
                }
              }
            } else {
              f2 = 1;
            }
          } while (0);
          l = f2;
          T = k;
          return l | 0;
        }
        function $c(a2, c2, d2, f2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A2 = 0;
          y2 = T;
          T = T + 176 | 0;
          u5 = y2 + 172 | 0;
          g2 = y2 + 168 | 0;
          v3 = y2;
          if (!(Da(c2, f2) | 0)) {
            a2 = 0;
            T = y2;
            return a2 | 0;
          }
          Ea(c2, f2, u5, g2);
          Wd(v3 | 0, d2 | 0, 168) | 0;
          if ((b[d2 >> 2] | 0) > 0) {
            c2 = 0;
            do {
              z2 = v3 + 8 + (c2 << 4) + 8 | 0;
              t2 = +kc(+e[z2 >> 3], b[g2 >> 2] | 0);
              e[z2 >> 3] = t2;
              c2 = c2 + 1 | 0;
            } while ((c2 | 0) < (b[d2 >> 2] | 0));
          }
          r2 = +e[f2 >> 3];
          s2 = +e[f2 + 8 >> 3];
          t2 = +kc(+e[f2 + 16 >> 3], b[g2 >> 2] | 0);
          p2 = +kc(+e[f2 + 24 >> 3], b[g2 >> 2] | 0);
          a: do {
            if ((b[a2 >> 2] | 0) > 0) {
              f2 = a2 + 4 | 0;
              g2 = b[v3 >> 2] | 0;
              if ((g2 | 0) <= 0) {
                c2 = 0;
                while (1) {
                  c2 = c2 + 1 | 0;
                  if ((c2 | 0) >= (b[a2 >> 2] | 0)) {
                    c2 = 0;
                    break a;
                  }
                }
              }
              d2 = 0;
              while (1) {
                c2 = b[f2 >> 2] | 0;
                o = +e[c2 + (d2 << 4) >> 3];
                q2 = +kc(+e[c2 + (d2 << 4) + 8 >> 3], b[u5 >> 2] | 0);
                c2 = b[f2 >> 2] | 0;
                d2 = d2 + 1 | 0;
                z2 = (d2 | 0) % (b[a2 >> 2] | 0) | 0;
                h = +e[c2 + (z2 << 4) >> 3];
                i = +kc(+e[c2 + (z2 << 4) + 8 >> 3], b[u5 >> 2] | 0);
                if (((!(o >= r2) | !(h >= r2) ? !(o <= s2) | !(h <= s2) : 0) ? !(q2 <= p2) | !(i <= p2) : 0) ? !(q2 >= t2) | !(i >= t2) : 0) {
                  n = h - o;
                  l = i - q2;
                  c2 = 0;
                  do {
                    A2 = c2;
                    c2 = c2 + 1 | 0;
                    z2 = (c2 | 0) == (g2 | 0) ? 0 : c2;
                    h = +e[v3 + 8 + (A2 << 4) + 8 >> 3];
                    i = +e[v3 + 8 + (z2 << 4) + 8 >> 3] - h;
                    j = +e[v3 + 8 + (A2 << 4) >> 3];
                    k = +e[v3 + 8 + (z2 << 4) >> 3] - j;
                    m = n * i - l * k;
                    if ((m != 0 ? (w2 = q2 - h, x2 = o - j, k = (w2 * k - i * x2) / m, !(k < 0 | k > 1)) : 0) ? (m = (n * w2 - l * x2) / m, m >= 0 & m <= 1) : 0) {
                      c2 = 1;
                      break a;
                    }
                  } while ((c2 | 0) < (g2 | 0));
                }
                if ((d2 | 0) >= (b[a2 >> 2] | 0)) {
                  c2 = 0;
                  break;
                }
              }
            } else {
              c2 = 0;
            }
          } while (0);
          A2 = c2;
          T = y2;
          return A2 | 0;
        }
        function ad(a2, c2, d2, e2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h = 0;
          if ($c(a2, c2, d2, e2) | 0) {
            g2 = 1;
            return g2 | 0;
          }
          g2 = a2 + 8 | 0;
          if ((b[g2 >> 2] | 0) <= 0) {
            g2 = 0;
            return g2 | 0;
          }
          f2 = a2 + 12 | 0;
          a2 = 0;
          while (1) {
            h = a2;
            a2 = a2 + 1 | 0;
            if ($c((b[f2 >> 2] | 0) + (h << 3) | 0, c2 + (a2 << 5) | 0, d2, e2) | 0) {
              a2 = 1;
              f2 = 6;
              break;
            }
            if ((a2 | 0) >= (b[g2 >> 2] | 0)) {
              a2 = 0;
              f2 = 6;
              break;
            }
          }
          if ((f2 | 0) == 6) {
            return a2 | 0;
          }
          return 0;
        }
        function bd2() {
          return 8;
        }
        function cd2() {
          return 16;
        }
        function dd() {
          return 168;
        }
        function ed() {
          return 8;
        }
        function fd() {
          return 16;
        }
        function gd() {
          return 12;
        }
        function hd() {
          return 8;
        }
        function id(a2) {
          a2 = a2 | 0;
          return +(+((b[a2 >> 2] | 0) >>> 0) + 4294967296 * +(b[a2 + 4 >> 2] | 0));
        }
        function jd(a2) {
          a2 = a2 | 0;
          var b2 = 0, c2 = 0;
          c2 = +e[a2 >> 3];
          b2 = +e[a2 + 8 >> 3];
          return + +r(+(c2 * c2 + b2 * b2));
        }
        function kd(a2, b2, c2, d2, f2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0;
          k = +e[a2 >> 3];
          j = +e[b2 >> 3] - k;
          i = +e[a2 + 8 >> 3];
          h = +e[b2 + 8 >> 3] - i;
          m = +e[c2 >> 3];
          g2 = +e[d2 >> 3] - m;
          n = +e[c2 + 8 >> 3];
          l = +e[d2 + 8 >> 3] - n;
          g2 = (g2 * (i - n) - (k - m) * l) / (j * l - h * g2);
          e[f2 >> 3] = k + j * g2;
          e[f2 + 8 >> 3] = i + h * g2;
          return;
        }
        function ld(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          if (!(+q(+(+e[a2 >> 3] - +e[b2 >> 3])) < 11920928955078125e-23)) {
            b2 = 0;
            return b2 | 0;
          }
          b2 = +q(+(+e[a2 + 8 >> 3] - +e[b2 + 8 >> 3])) < 11920928955078125e-23;
          return b2 | 0;
        }
        function md(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0, d2 = 0, f2 = 0;
          f2 = +e[a2 >> 3] - +e[b2 >> 3];
          d2 = +e[a2 + 8 >> 3] - +e[b2 + 8 >> 3];
          c2 = +e[a2 + 16 >> 3] - +e[b2 + 16 >> 3];
          return +(f2 * f2 + d2 * d2 + c2 * c2);
        }
        function nd(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0, d2 = 0, f2 = 0;
          c2 = +e[a2 >> 3];
          d2 = +t(+c2);
          c2 = +u4(+c2);
          e[b2 + 16 >> 3] = c2;
          c2 = +e[a2 + 8 >> 3];
          f2 = d2 * +t(+c2);
          e[b2 >> 3] = f2;
          c2 = d2 * +u4(+c2);
          e[b2 + 8 >> 3] = c2;
          return;
        }
        function od(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0;
          g2 = T;
          T = T + 16 | 0;
          f2 = g2;
          e2 = Hb(a2, c2) | 0;
          if ((d2 + -1 | 0) >>> 0 > 5) {
            f2 = -1;
            T = g2;
            return f2 | 0;
          }
          e2 = (e2 | 0) != 0;
          if ((d2 | 0) == 1 & e2) {
            f2 = -1;
            T = g2;
            return f2 | 0;
          }
          do {
            if (!(pd(a2, c2, f2) | 0)) {
              if (e2) {
                e2 = ((b[26352 + (d2 << 2) >> 2] | 0) + 5 - (b[f2 >> 2] | 0) | 0) % 5 | 0;
                break;
              } else {
                e2 = ((b[26384 + (d2 << 2) >> 2] | 0) + 6 - (b[f2 >> 2] | 0) | 0) % 6 | 0;
                break;
              }
            } else {
              e2 = -1;
            }
          } while (0);
          f2 = e2;
          T = g2;
          return f2 | 0;
        }
        function pd(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0;
          k = T;
          T = T + 32 | 0;
          h = k + 16 | 0;
          i = k;
          e2 = Yb(a2, c2, h) | 0;
          if (e2 | 0) {
            d2 = e2;
            T = k;
            return d2 | 0;
          }
          g2 = Cb(a2, c2) | 0;
          j = Pb(a2, c2) | 0;
          sa(g2, i);
          e2 = ta(g2, b[h >> 2] | 0) | 0;
          a: do {
            if (oa(g2) | 0) {
              do {
                switch (g2 | 0) {
                  case 4: {
                    a2 = 0;
                    break;
                  }
                  case 14: {
                    a2 = 1;
                    break;
                  }
                  case 24: {
                    a2 = 2;
                    break;
                  }
                  case 38: {
                    a2 = 3;
                    break;
                  }
                  case 49: {
                    a2 = 4;
                    break;
                  }
                  case 58: {
                    a2 = 5;
                    break;
                  }
                  case 63: {
                    a2 = 6;
                    break;
                  }
                  case 72: {
                    a2 = 7;
                    break;
                  }
                  case 83: {
                    a2 = 8;
                    break;
                  }
                  case 97: {
                    a2 = 9;
                    break;
                  }
                  case 107: {
                    a2 = 10;
                    break;
                  }
                  case 117: {
                    a2 = 11;
                    break;
                  }
                  default: {
                    e2 = 1;
                    break a;
                  }
                }
              } while (0);
              f2 = b[26416 + (a2 * 24 | 0) + 8 >> 2] | 0;
              c2 = b[26416 + (a2 * 24 | 0) + 16 >> 2] | 0;
              a2 = b[h >> 2] | 0;
              if ((a2 | 0) != (b[i >> 2] | 0)) {
                i = pa(g2) | 0;
                a2 = b[h >> 2] | 0;
                if (i | (a2 | 0) == (c2 | 0)) {
                  e2 = (e2 + 1 | 0) % 6 | 0;
                }
              }
              if ((j | 0) == 3 & (a2 | 0) == (c2 | 0)) {
                e2 = (e2 + 5 | 0) % 6 | 0;
                f2 = 22;
                break;
              }
              if ((j | 0) == 5 & (a2 | 0) == (f2 | 0)) {
                e2 = (e2 + 1 | 0) % 6 | 0;
                f2 = 22;
              } else {
                f2 = 22;
              }
            } else {
              f2 = 22;
            }
          } while (0);
          if ((f2 | 0) == 22) {
            b[d2 >> 2] = e2;
            e2 = 0;
          }
          d2 = e2;
          T = k;
          return d2 | 0;
        }
        function qd(a2, c2, d2, e2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0, u5 = 0;
          u5 = T;
          T = T + 32 | 0;
          t2 = u5 + 24 | 0;
          r2 = u5 + 20 | 0;
          p2 = u5 + 8 | 0;
          o = u5 + 16 | 0;
          n = u5;
          j = (Hb(a2, c2) | 0) == 0;
          j = j ? 6 : 5;
          l = Qd(a2 | 0, c2 | 0, 52) | 0;
          H() | 0;
          l = l & 15;
          if (j >>> 0 <= d2 >>> 0) {
            e2 = 2;
            T = u5;
            return e2 | 0;
          }
          m = (l | 0) == 0;
          if (!m ? (q2 = Rd(7, 0, (l ^ 15) * 3 | 0) | 0, (q2 & a2 | 0) == 0 & ((H() | 0) & c2 | 0) == 0) : 0) {
            f2 = d2;
          } else {
            g2 = 4;
          }
          a: do {
            if ((g2 | 0) == 4) {
              f2 = (Hb(a2, c2) | 0) != 0;
              if (((f2 ? 4 : 5) | 0) < (d2 | 0)) {
                e2 = 1;
                T = u5;
                return e2 | 0;
              }
              if (pd(a2, c2, t2) | 0) {
                e2 = 1;
                T = u5;
                return e2 | 0;
              }
              g2 = (b[t2 >> 2] | 0) + d2 | 0;
              if (f2) {
                f2 = 26704 + (((g2 | 0) % 5 | 0) << 2) | 0;
              } else {
                f2 = 26736 + (((g2 | 0) % 6 | 0) << 2) | 0;
              }
              q2 = b[f2 >> 2] | 0;
              if ((q2 | 0) == 7) {
                e2 = 1;
                T = u5;
                return e2 | 0;
              }
              b[r2 >> 2] = 0;
              f2 = ea2(a2, c2, q2, r2, p2) | 0;
              do {
                if (!f2) {
                  i = p2;
                  k = b[i >> 2] | 0;
                  i = b[i + 4 >> 2] | 0;
                  h = i >>> 0 < c2 >>> 0 | (i | 0) == (c2 | 0) & k >>> 0 < a2 >>> 0;
                  g2 = h ? k : a2;
                  h = h ? i : c2;
                  if (!m ? (m = Rd(7, 0, (l ^ 15) * 3 | 0) | 0, (k & m | 0) == 0 & (i & (H() | 0) | 0) == 0) : 0) {
                    f2 = d2;
                  } else {
                    i = (d2 + -1 + j | 0) % (j | 0) | 0;
                    f2 = Hb(a2, c2) | 0;
                    if ((i | 0) < 0) {
                      I(27795, 27797, 246, 27806);
                    }
                    j = (f2 | 0) != 0;
                    if (((j ? 4 : 5) | 0) < (i | 0)) {
                      I(27795, 27797, 246, 27806);
                    }
                    if (pd(a2, c2, t2) | 0) {
                      I(27795, 27797, 246, 27806);
                    }
                    f2 = (b[t2 >> 2] | 0) + i | 0;
                    if (j) {
                      f2 = 26704 + (((f2 | 0) % 5 | 0) << 2) | 0;
                    } else {
                      f2 = 26736 + (((f2 | 0) % 6 | 0) << 2) | 0;
                    }
                    i = b[f2 >> 2] | 0;
                    if ((i | 0) == 7) {
                      I(27795, 27797, 246, 27806);
                    }
                    b[o >> 2] = 0;
                    f2 = ea2(a2, c2, i, o, n) | 0;
                    if (f2 | 0) {
                      break;
                    }
                    k = n;
                    j = b[k >> 2] | 0;
                    k = b[k + 4 >> 2] | 0;
                    do {
                      if (k >>> 0 < h >>> 0 | (k | 0) == (h | 0) & j >>> 0 < g2 >>> 0) {
                        if (!(Hb(j, k) | 0)) {
                          g2 = b[26800 + ((((b[o >> 2] | 0) + (b[26768 + (i << 2) >> 2] | 0) | 0) % 6 | 0) << 2) >> 2] | 0;
                        } else {
                          g2 = ia(j, k, a2, c2) | 0;
                        }
                        f2 = Hb(j, k) | 0;
                        if ((g2 + -1 | 0) >>> 0 > 5) {
                          f2 = -1;
                          g2 = j;
                          h = k;
                          break;
                        }
                        f2 = (f2 | 0) != 0;
                        if ((g2 | 0) == 1 & f2) {
                          f2 = -1;
                          g2 = j;
                          h = k;
                          break;
                        }
                        do {
                          if (!(pd(j, k, t2) | 0)) {
                            if (f2) {
                              f2 = ((b[26352 + (g2 << 2) >> 2] | 0) + 5 - (b[t2 >> 2] | 0) | 0) % 5 | 0;
                              break;
                            } else {
                              f2 = ((b[26384 + (g2 << 2) >> 2] | 0) + 6 - (b[t2 >> 2] | 0) | 0) % 6 | 0;
                              break;
                            }
                          } else {
                            f2 = -1;
                          }
                        } while (0);
                        g2 = j;
                        h = k;
                      } else {
                        f2 = d2;
                      }
                    } while (0);
                    i = p2;
                    k = b[i >> 2] | 0;
                    i = b[i + 4 >> 2] | 0;
                  }
                  if ((g2 | 0) == (k | 0) & (h | 0) == (i | 0)) {
                    j = (Hb(k, i) | 0) != 0;
                    if (j) {
                      a2 = ia(k, i, a2, c2) | 0;
                    } else {
                      a2 = b[26800 + ((((b[r2 >> 2] | 0) + (b[26768 + (q2 << 2) >> 2] | 0) | 0) % 6 | 0) << 2) >> 2] | 0;
                    }
                    f2 = Hb(k, i) | 0;
                    if ((a2 + -1 | 0) >>> 0 <= 5 ? (s2 = (f2 | 0) != 0, !((a2 | 0) == 1 & s2)) : 0) {
                      do {
                        if (!(pd(k, i, t2) | 0)) {
                          if (s2) {
                            f2 = ((b[26352 + (a2 << 2) >> 2] | 0) + 5 - (b[t2 >> 2] | 0) | 0) % 5 | 0;
                            break;
                          } else {
                            f2 = ((b[26384 + (a2 << 2) >> 2] | 0) + 6 - (b[t2 >> 2] | 0) | 0) % 6 | 0;
                            break;
                          }
                        } else {
                          f2 = -1;
                        }
                      } while (0);
                    } else {
                      f2 = -1;
                    }
                    f2 = f2 + 1 | 0;
                    f2 = (f2 | 0) == 6 | j & (f2 | 0) == 5 ? 0 : f2;
                  }
                  c2 = h;
                  a2 = g2;
                  break a;
                }
              } while (0);
              e2 = f2;
              T = u5;
              return e2 | 0;
            }
          } while (0);
          s2 = Rd(f2 | 0, 0, 56) | 0;
          t2 = H() | 0 | c2 & -2130706433 | 536870912;
          b[e2 >> 2] = s2 | a2;
          b[e2 + 4 >> 2] = t2;
          e2 = 0;
          T = u5;
          return e2 | 0;
        }
        function rd(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0;
          g2 = (Hb(a2, c2) | 0) == 0;
          e2 = qd(a2, c2, 0, d2) | 0;
          f2 = (e2 | 0) == 0;
          if (g2) {
            if (!f2) {
              g2 = e2;
              return g2 | 0;
            }
            e2 = qd(a2, c2, 1, d2 + 8 | 0) | 0;
            if (e2 | 0) {
              g2 = e2;
              return g2 | 0;
            }
            e2 = qd(a2, c2, 2, d2 + 16 | 0) | 0;
            if (e2 | 0) {
              g2 = e2;
              return g2 | 0;
            }
            e2 = qd(a2, c2, 3, d2 + 24 | 0) | 0;
            if (e2 | 0) {
              g2 = e2;
              return g2 | 0;
            }
            e2 = qd(a2, c2, 4, d2 + 32 | 0) | 0;
            if (!e2) {
              return qd(a2, c2, 5, d2 + 40 | 0) | 0;
            } else {
              g2 = e2;
              return g2 | 0;
            }
          }
          if (!f2) {
            g2 = e2;
            return g2 | 0;
          }
          e2 = qd(a2, c2, 1, d2 + 8 | 0) | 0;
          if (e2 | 0) {
            g2 = e2;
            return g2 | 0;
          }
          e2 = qd(a2, c2, 2, d2 + 16 | 0) | 0;
          if (e2 | 0) {
            g2 = e2;
            return g2 | 0;
          }
          e2 = qd(a2, c2, 3, d2 + 24 | 0) | 0;
          if (e2 | 0) {
            g2 = e2;
            return g2 | 0;
          }
          e2 = qd(a2, c2, 4, d2 + 32 | 0) | 0;
          if (e2 | 0) {
            g2 = e2;
            return g2 | 0;
          }
          g2 = d2 + 40 | 0;
          b[g2 >> 2] = 0;
          b[g2 + 4 >> 2] = 0;
          g2 = 0;
          return g2 | 0;
        }
        function sd(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0;
          j = T;
          T = T + 192 | 0;
          f2 = j;
          g2 = j + 168 | 0;
          h = Qd(a2 | 0, c2 | 0, 56) | 0;
          H() | 0;
          h = h & 7;
          i = c2 & -2130706433 | 134217728;
          e2 = Yb(a2, i, g2) | 0;
          if (e2 | 0) {
            i = e2;
            T = j;
            return i | 0;
          }
          c2 = Qd(a2 | 0, c2 | 0, 52) | 0;
          H() | 0;
          c2 = c2 & 15;
          if (!(Hb(a2, i) | 0)) {
            zb(g2, c2, h, 1, f2);
          } else {
            vb(g2, c2, h, 1, f2);
          }
          i = f2 + 8 | 0;
          b[d2 >> 2] = b[i >> 2];
          b[d2 + 4 >> 2] = b[i + 4 >> 2];
          b[d2 + 8 >> 2] = b[i + 8 >> 2];
          b[d2 + 12 >> 2] = b[i + 12 >> 2];
          i = 0;
          T = j;
          return i | 0;
        }
        function td(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0;
          f2 = T;
          T = T + 16 | 0;
          d2 = f2;
          if (!(true & (c2 & 2013265920 | 0) == 536870912)) {
            e2 = 0;
            T = f2;
            return e2 | 0;
          }
          e2 = c2 & -2130706433 | 134217728;
          if (!(Db(a2, e2) | 0)) {
            e2 = 0;
            T = f2;
            return e2 | 0;
          }
          g2 = Qd(a2 | 0, c2 | 0, 56) | 0;
          H() | 0;
          g2 = (qd(a2, e2, g2 & 7, d2) | 0) == 0;
          e2 = d2;
          e2 = g2 & ((b[e2 >> 2] | 0) == (a2 | 0) ? (b[e2 + 4 >> 2] | 0) == (c2 | 0) : 0) & 1;
          T = f2;
          return e2 | 0;
        }
        function ud(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          if ((c2 | 0) > 0) {
            e2 = Fd(c2, 4) | 0;
            b[a2 >> 2] = e2;
            if (!e2) {
              I(27819, 27842, 40, 27856);
            }
          } else {
            b[a2 >> 2] = 0;
          }
          b[a2 + 4 >> 2] = c2;
          b[a2 + 8 >> 2] = 0;
          b[a2 + 12 >> 2] = d2;
          return;
        }
        function vd(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0;
          g2 = a2 + 4 | 0;
          h = a2 + 12 | 0;
          i = a2 + 8 | 0;
          a: while (1) {
            d2 = b[g2 >> 2] | 0;
            c2 = 0;
            while (1) {
              if ((c2 | 0) >= (d2 | 0)) {
                break a;
              }
              f2 = b[a2 >> 2] | 0;
              j = b[f2 + (c2 << 2) >> 2] | 0;
              if (!j) {
                c2 = c2 + 1 | 0;
              } else {
                break;
              }
            }
            c2 = f2 + (~~(+q(+(+s(10, + +(15 - (b[h >> 2] | 0) | 0)) * (+e[j >> 3] + +e[j + 8 >> 3]))) % +(d2 | 0)) >>> 0 << 2) | 0;
            d2 = b[c2 >> 2] | 0;
            b: do {
              if (d2 | 0) {
                f2 = j + 32 | 0;
                if ((d2 | 0) == (j | 0)) {
                  b[c2 >> 2] = b[f2 >> 2];
                } else {
                  d2 = d2 + 32 | 0;
                  c2 = b[d2 >> 2] | 0;
                  if (!c2) {
                    break;
                  }
                  while (1) {
                    if ((c2 | 0) == (j | 0)) {
                      break;
                    }
                    d2 = c2 + 32 | 0;
                    c2 = b[d2 >> 2] | 0;
                    if (!c2) {
                      break b;
                    }
                  }
                  b[d2 >> 2] = b[f2 >> 2];
                }
                Ed(j);
                b[i >> 2] = (b[i >> 2] | 0) + -1;
              }
            } while (0);
          }
          Ed(b[a2 >> 2] | 0);
          return;
        }
        function wd(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, e2 = 0;
          e2 = b[a2 + 4 >> 2] | 0;
          d2 = 0;
          while (1) {
            if ((d2 | 0) >= (e2 | 0)) {
              c2 = 0;
              d2 = 4;
              break;
            }
            c2 = b[(b[a2 >> 2] | 0) + (d2 << 2) >> 2] | 0;
            if (!c2) {
              d2 = d2 + 1 | 0;
            } else {
              d2 = 4;
              break;
            }
          }
          if ((d2 | 0) == 4) {
            return c2 | 0;
          }
          return 0;
        }
        function xd(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          var d2 = 0, f2 = 0, g2 = 0, h = 0;
          d2 = ~~(+q(+(+s(10, + +(15 - (b[a2 + 12 >> 2] | 0) | 0)) * (+e[c2 >> 3] + +e[c2 + 8 >> 3]))) % +(b[a2 + 4 >> 2] | 0)) >>> 0;
          d2 = (b[a2 >> 2] | 0) + (d2 << 2) | 0;
          f2 = b[d2 >> 2] | 0;
          if (!f2) {
            h = 1;
            return h | 0;
          }
          h = c2 + 32 | 0;
          do {
            if ((f2 | 0) != (c2 | 0)) {
              d2 = b[f2 + 32 >> 2] | 0;
              if (!d2) {
                h = 1;
                return h | 0;
              }
              g2 = d2;
              while (1) {
                if ((g2 | 0) == (c2 | 0)) {
                  g2 = 8;
                  break;
                }
                d2 = b[g2 + 32 >> 2] | 0;
                if (!d2) {
                  d2 = 1;
                  g2 = 10;
                  break;
                } else {
                  f2 = g2;
                  g2 = d2;
                }
              }
              if ((g2 | 0) == 8) {
                b[f2 + 32 >> 2] = b[h >> 2];
                break;
              } else if ((g2 | 0) == 10) {
                return d2 | 0;
              }
            } else {
              b[d2 >> 2] = b[h >> 2];
            }
          } while (0);
          Ed(c2);
          h = a2 + 8 | 0;
          b[h >> 2] = (b[h >> 2] | 0) + -1;
          h = 0;
          return h | 0;
        }
        function yd(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var f2 = 0, g2 = 0, h = 0, i = 0;
          h = Dd(40) | 0;
          if (!h) {
            I(27872, 27842, 98, 27885);
          }
          b[h >> 2] = b[c2 >> 2];
          b[h + 4 >> 2] = b[c2 + 4 >> 2];
          b[h + 8 >> 2] = b[c2 + 8 >> 2];
          b[h + 12 >> 2] = b[c2 + 12 >> 2];
          g2 = h + 16 | 0;
          b[g2 >> 2] = b[d2 >> 2];
          b[g2 + 4 >> 2] = b[d2 + 4 >> 2];
          b[g2 + 8 >> 2] = b[d2 + 8 >> 2];
          b[g2 + 12 >> 2] = b[d2 + 12 >> 2];
          b[h + 32 >> 2] = 0;
          g2 = ~~(+q(+(+s(10, + +(15 - (b[a2 + 12 >> 2] | 0) | 0)) * (+e[c2 >> 3] + +e[c2 + 8 >> 3]))) % +(b[a2 + 4 >> 2] | 0)) >>> 0;
          g2 = (b[a2 >> 2] | 0) + (g2 << 2) | 0;
          f2 = b[g2 >> 2] | 0;
          do {
            if (!f2) {
              b[g2 >> 2] = h;
            } else {
              while (1) {
                if (jc(f2, c2) | 0 ? jc(f2 + 16 | 0, d2) | 0 : 0) {
                  break;
                }
                g2 = b[f2 + 32 >> 2] | 0;
                f2 = (g2 | 0) == 0 ? f2 : g2;
                if (!(b[f2 + 32 >> 2] | 0)) {
                  i = 10;
                  break;
                }
              }
              if ((i | 0) == 10) {
                b[f2 + 32 >> 2] = h;
                break;
              }
              Ed(h);
              i = f2;
              return i | 0;
            }
          } while (0);
          i = a2 + 8 | 0;
          b[i >> 2] = (b[i >> 2] | 0) + 1;
          i = h;
          return i | 0;
        }
        function zd(a2, c2, d2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var f2 = 0, g2 = 0;
          g2 = ~~(+q(+(+s(10, + +(15 - (b[a2 + 12 >> 2] | 0) | 0)) * (+e[c2 >> 3] + +e[c2 + 8 >> 3]))) % +(b[a2 + 4 >> 2] | 0)) >>> 0;
          g2 = b[(b[a2 >> 2] | 0) + (g2 << 2) >> 2] | 0;
          if (!g2) {
            d2 = 0;
            return d2 | 0;
          }
          if (!d2) {
            a2 = g2;
            while (1) {
              if (jc(a2, c2) | 0) {
                f2 = 10;
                break;
              }
              a2 = b[a2 + 32 >> 2] | 0;
              if (!a2) {
                a2 = 0;
                f2 = 10;
                break;
              }
            }
            if ((f2 | 0) == 10) {
              return a2 | 0;
            }
          }
          a2 = g2;
          while (1) {
            if (jc(a2, c2) | 0 ? jc(a2 + 16 | 0, d2) | 0 : 0) {
              f2 = 10;
              break;
            }
            a2 = b[a2 + 32 >> 2] | 0;
            if (!a2) {
              a2 = 0;
              f2 = 10;
              break;
            }
          }
          if ((f2 | 0) == 10) {
            return a2 | 0;
          }
          return 0;
        }
        function Ad(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          var d2 = 0;
          d2 = ~~(+q(+(+s(10, + +(15 - (b[a2 + 12 >> 2] | 0) | 0)) * (+e[c2 >> 3] + +e[c2 + 8 >> 3]))) % +(b[a2 + 4 >> 2] | 0)) >>> 0;
          a2 = b[(b[a2 >> 2] | 0) + (d2 << 2) >> 2] | 0;
          if (!a2) {
            d2 = 0;
            return d2 | 0;
          }
          while (1) {
            if (jc(a2, c2) | 0) {
              c2 = 5;
              break;
            }
            a2 = b[a2 + 32 >> 2] | 0;
            if (!a2) {
              a2 = 0;
              c2 = 5;
              break;
            }
          }
          if ((c2 | 0) == 5) {
            return a2 | 0;
          }
          return 0;
        }
        function Bd() {
          return 27904;
        }
        function Cd(a2) {
          a2 = +a2;
          return ~~+Yd(+a2) | 0;
        }
        function Dd(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0, u5 = 0, v3 = 0, w2 = 0;
          w2 = T;
          T = T + 16 | 0;
          n = w2;
          do {
            if (a2 >>> 0 < 245) {
              k = a2 >>> 0 < 11 ? 16 : a2 + 11 & -8;
              a2 = k >>> 3;
              m = b[6977] | 0;
              d2 = m >>> a2;
              if (d2 & 3 | 0) {
                c2 = (d2 & 1 ^ 1) + a2 | 0;
                a2 = 27948 + (c2 << 1 << 2) | 0;
                d2 = a2 + 8 | 0;
                e2 = b[d2 >> 2] | 0;
                f2 = e2 + 8 | 0;
                g2 = b[f2 >> 2] | 0;
                if ((g2 | 0) == (a2 | 0)) {
                  b[6977] = m & ~(1 << c2);
                } else {
                  b[g2 + 12 >> 2] = a2;
                  b[d2 >> 2] = g2;
                }
                v3 = c2 << 3;
                b[e2 + 4 >> 2] = v3 | 3;
                v3 = e2 + v3 + 4 | 0;
                b[v3 >> 2] = b[v3 >> 2] | 1;
                v3 = f2;
                T = w2;
                return v3 | 0;
              }
              l = b[6979] | 0;
              if (k >>> 0 > l >>> 0) {
                if (d2 | 0) {
                  c2 = 2 << a2;
                  c2 = d2 << a2 & (c2 | 0 - c2);
                  c2 = (c2 & 0 - c2) + -1 | 0;
                  i = c2 >>> 12 & 16;
                  c2 = c2 >>> i;
                  d2 = c2 >>> 5 & 8;
                  c2 = c2 >>> d2;
                  g2 = c2 >>> 2 & 4;
                  c2 = c2 >>> g2;
                  a2 = c2 >>> 1 & 2;
                  c2 = c2 >>> a2;
                  e2 = c2 >>> 1 & 1;
                  e2 = (d2 | i | g2 | a2 | e2) + (c2 >>> e2) | 0;
                  c2 = 27948 + (e2 << 1 << 2) | 0;
                  a2 = c2 + 8 | 0;
                  g2 = b[a2 >> 2] | 0;
                  i = g2 + 8 | 0;
                  d2 = b[i >> 2] | 0;
                  if ((d2 | 0) == (c2 | 0)) {
                    a2 = m & ~(1 << e2);
                    b[6977] = a2;
                  } else {
                    b[d2 + 12 >> 2] = c2;
                    b[a2 >> 2] = d2;
                    a2 = m;
                  }
                  v3 = e2 << 3;
                  h = v3 - k | 0;
                  b[g2 + 4 >> 2] = k | 3;
                  f2 = g2 + k | 0;
                  b[f2 + 4 >> 2] = h | 1;
                  b[g2 + v3 >> 2] = h;
                  if (l | 0) {
                    e2 = b[6982] | 0;
                    c2 = l >>> 3;
                    d2 = 27948 + (c2 << 1 << 2) | 0;
                    c2 = 1 << c2;
                    if (!(a2 & c2)) {
                      b[6977] = a2 | c2;
                      c2 = d2;
                      a2 = d2 + 8 | 0;
                    } else {
                      a2 = d2 + 8 | 0;
                      c2 = b[a2 >> 2] | 0;
                    }
                    b[a2 >> 2] = e2;
                    b[c2 + 12 >> 2] = e2;
                    b[e2 + 8 >> 2] = c2;
                    b[e2 + 12 >> 2] = d2;
                  }
                  b[6979] = h;
                  b[6982] = f2;
                  v3 = i;
                  T = w2;
                  return v3 | 0;
                }
                g2 = b[6978] | 0;
                if (g2) {
                  d2 = (g2 & 0 - g2) + -1 | 0;
                  f2 = d2 >>> 12 & 16;
                  d2 = d2 >>> f2;
                  e2 = d2 >>> 5 & 8;
                  d2 = d2 >>> e2;
                  h = d2 >>> 2 & 4;
                  d2 = d2 >>> h;
                  i = d2 >>> 1 & 2;
                  d2 = d2 >>> i;
                  j = d2 >>> 1 & 1;
                  j = b[28212 + ((e2 | f2 | h | i | j) + (d2 >>> j) << 2) >> 2] | 0;
                  d2 = j;
                  i = j;
                  j = (b[j + 4 >> 2] & -8) - k | 0;
                  while (1) {
                    a2 = b[d2 + 16 >> 2] | 0;
                    if (!a2) {
                      a2 = b[d2 + 20 >> 2] | 0;
                      if (!a2) {
                        break;
                      }
                    }
                    h = (b[a2 + 4 >> 2] & -8) - k | 0;
                    f2 = h >>> 0 < j >>> 0;
                    d2 = a2;
                    i = f2 ? a2 : i;
                    j = f2 ? h : j;
                  }
                  h = i + k | 0;
                  if (h >>> 0 > i >>> 0) {
                    f2 = b[i + 24 >> 2] | 0;
                    c2 = b[i + 12 >> 2] | 0;
                    do {
                      if ((c2 | 0) == (i | 0)) {
                        a2 = i + 20 | 0;
                        c2 = b[a2 >> 2] | 0;
                        if (!c2) {
                          a2 = i + 16 | 0;
                          c2 = b[a2 >> 2] | 0;
                          if (!c2) {
                            d2 = 0;
                            break;
                          }
                        }
                        while (1) {
                          e2 = c2 + 20 | 0;
                          d2 = b[e2 >> 2] | 0;
                          if (!d2) {
                            e2 = c2 + 16 | 0;
                            d2 = b[e2 >> 2] | 0;
                            if (!d2) {
                              break;
                            } else {
                              c2 = d2;
                              a2 = e2;
                            }
                          } else {
                            c2 = d2;
                            a2 = e2;
                          }
                        }
                        b[a2 >> 2] = 0;
                        d2 = c2;
                      } else {
                        d2 = b[i + 8 >> 2] | 0;
                        b[d2 + 12 >> 2] = c2;
                        b[c2 + 8 >> 2] = d2;
                        d2 = c2;
                      }
                    } while (0);
                    do {
                      if (f2 | 0) {
                        c2 = b[i + 28 >> 2] | 0;
                        a2 = 28212 + (c2 << 2) | 0;
                        if ((i | 0) == (b[a2 >> 2] | 0)) {
                          b[a2 >> 2] = d2;
                          if (!d2) {
                            b[6978] = g2 & ~(1 << c2);
                            break;
                          }
                        } else {
                          v3 = f2 + 16 | 0;
                          b[((b[v3 >> 2] | 0) == (i | 0) ? v3 : f2 + 20 | 0) >> 2] = d2;
                          if (!d2) {
                            break;
                          }
                        }
                        b[d2 + 24 >> 2] = f2;
                        c2 = b[i + 16 >> 2] | 0;
                        if (c2 | 0) {
                          b[d2 + 16 >> 2] = c2;
                          b[c2 + 24 >> 2] = d2;
                        }
                        c2 = b[i + 20 >> 2] | 0;
                        if (c2 | 0) {
                          b[d2 + 20 >> 2] = c2;
                          b[c2 + 24 >> 2] = d2;
                        }
                      }
                    } while (0);
                    if (j >>> 0 < 16) {
                      v3 = j + k | 0;
                      b[i + 4 >> 2] = v3 | 3;
                      v3 = i + v3 + 4 | 0;
                      b[v3 >> 2] = b[v3 >> 2] | 1;
                    } else {
                      b[i + 4 >> 2] = k | 3;
                      b[h + 4 >> 2] = j | 1;
                      b[h + j >> 2] = j;
                      if (l | 0) {
                        e2 = b[6982] | 0;
                        c2 = l >>> 3;
                        d2 = 27948 + (c2 << 1 << 2) | 0;
                        c2 = 1 << c2;
                        if (!(c2 & m)) {
                          b[6977] = c2 | m;
                          c2 = d2;
                          a2 = d2 + 8 | 0;
                        } else {
                          a2 = d2 + 8 | 0;
                          c2 = b[a2 >> 2] | 0;
                        }
                        b[a2 >> 2] = e2;
                        b[c2 + 12 >> 2] = e2;
                        b[e2 + 8 >> 2] = c2;
                        b[e2 + 12 >> 2] = d2;
                      }
                      b[6979] = j;
                      b[6982] = h;
                    }
                    v3 = i + 8 | 0;
                    T = w2;
                    return v3 | 0;
                  } else {
                    m = k;
                  }
                } else {
                  m = k;
                }
              } else {
                m = k;
              }
            } else if (a2 >>> 0 <= 4294967231) {
              a2 = a2 + 11 | 0;
              k = a2 & -8;
              e2 = b[6978] | 0;
              if (e2) {
                f2 = 0 - k | 0;
                a2 = a2 >>> 8;
                if (a2) {
                  if (k >>> 0 > 16777215) {
                    j = 31;
                  } else {
                    m = (a2 + 1048320 | 0) >>> 16 & 8;
                    q2 = a2 << m;
                    i = (q2 + 520192 | 0) >>> 16 & 4;
                    q2 = q2 << i;
                    j = (q2 + 245760 | 0) >>> 16 & 2;
                    j = 14 - (i | m | j) + (q2 << j >>> 15) | 0;
                    j = k >>> (j + 7 | 0) & 1 | j << 1;
                  }
                } else {
                  j = 0;
                }
                d2 = b[28212 + (j << 2) >> 2] | 0;
                a: do {
                  if (!d2) {
                    d2 = 0;
                    a2 = 0;
                    q2 = 61;
                  } else {
                    a2 = 0;
                    i = k << ((j | 0) == 31 ? 0 : 25 - (j >>> 1) | 0);
                    g2 = 0;
                    while (1) {
                      h = (b[d2 + 4 >> 2] & -8) - k | 0;
                      if (h >>> 0 < f2 >>> 0) {
                        if (!h) {
                          a2 = d2;
                          f2 = 0;
                          q2 = 65;
                          break a;
                        } else {
                          a2 = d2;
                          f2 = h;
                        }
                      }
                      q2 = b[d2 + 20 >> 2] | 0;
                      d2 = b[d2 + 16 + (i >>> 31 << 2) >> 2] | 0;
                      g2 = (q2 | 0) == 0 | (q2 | 0) == (d2 | 0) ? g2 : q2;
                      if (!d2) {
                        d2 = g2;
                        q2 = 61;
                        break;
                      } else {
                        i = i << 1;
                      }
                    }
                  }
                } while (0);
                if ((q2 | 0) == 61) {
                  if ((d2 | 0) == 0 & (a2 | 0) == 0) {
                    a2 = 2 << j;
                    a2 = (a2 | 0 - a2) & e2;
                    if (!a2) {
                      m = k;
                      break;
                    }
                    m = (a2 & 0 - a2) + -1 | 0;
                    h = m >>> 12 & 16;
                    m = m >>> h;
                    g2 = m >>> 5 & 8;
                    m = m >>> g2;
                    i = m >>> 2 & 4;
                    m = m >>> i;
                    j = m >>> 1 & 2;
                    m = m >>> j;
                    d2 = m >>> 1 & 1;
                    a2 = 0;
                    d2 = b[28212 + ((g2 | h | i | j | d2) + (m >>> d2) << 2) >> 2] | 0;
                  }
                  if (!d2) {
                    i = a2;
                    h = f2;
                  } else {
                    q2 = 65;
                  }
                }
                if ((q2 | 0) == 65) {
                  g2 = d2;
                  while (1) {
                    m = (b[g2 + 4 >> 2] & -8) - k | 0;
                    d2 = m >>> 0 < f2 >>> 0;
                    f2 = d2 ? m : f2;
                    a2 = d2 ? g2 : a2;
                    d2 = b[g2 + 16 >> 2] | 0;
                    if (!d2) {
                      d2 = b[g2 + 20 >> 2] | 0;
                    }
                    if (!d2) {
                      i = a2;
                      h = f2;
                      break;
                    } else {
                      g2 = d2;
                    }
                  }
                }
                if (((i | 0) != 0 ? h >>> 0 < ((b[6979] | 0) - k | 0) >>> 0 : 0) ? (l = i + k | 0, l >>> 0 > i >>> 0) : 0) {
                  g2 = b[i + 24 >> 2] | 0;
                  c2 = b[i + 12 >> 2] | 0;
                  do {
                    if ((c2 | 0) == (i | 0)) {
                      a2 = i + 20 | 0;
                      c2 = b[a2 >> 2] | 0;
                      if (!c2) {
                        a2 = i + 16 | 0;
                        c2 = b[a2 >> 2] | 0;
                        if (!c2) {
                          c2 = 0;
                          break;
                        }
                      }
                      while (1) {
                        f2 = c2 + 20 | 0;
                        d2 = b[f2 >> 2] | 0;
                        if (!d2) {
                          f2 = c2 + 16 | 0;
                          d2 = b[f2 >> 2] | 0;
                          if (!d2) {
                            break;
                          } else {
                            c2 = d2;
                            a2 = f2;
                          }
                        } else {
                          c2 = d2;
                          a2 = f2;
                        }
                      }
                      b[a2 >> 2] = 0;
                    } else {
                      v3 = b[i + 8 >> 2] | 0;
                      b[v3 + 12 >> 2] = c2;
                      b[c2 + 8 >> 2] = v3;
                    }
                  } while (0);
                  do {
                    if (g2) {
                      a2 = b[i + 28 >> 2] | 0;
                      d2 = 28212 + (a2 << 2) | 0;
                      if ((i | 0) == (b[d2 >> 2] | 0)) {
                        b[d2 >> 2] = c2;
                        if (!c2) {
                          e2 = e2 & ~(1 << a2);
                          b[6978] = e2;
                          break;
                        }
                      } else {
                        v3 = g2 + 16 | 0;
                        b[((b[v3 >> 2] | 0) == (i | 0) ? v3 : g2 + 20 | 0) >> 2] = c2;
                        if (!c2) {
                          break;
                        }
                      }
                      b[c2 + 24 >> 2] = g2;
                      a2 = b[i + 16 >> 2] | 0;
                      if (a2 | 0) {
                        b[c2 + 16 >> 2] = a2;
                        b[a2 + 24 >> 2] = c2;
                      }
                      a2 = b[i + 20 >> 2] | 0;
                      if (a2) {
                        b[c2 + 20 >> 2] = a2;
                        b[a2 + 24 >> 2] = c2;
                      }
                    }
                  } while (0);
                  b: do {
                    if (h >>> 0 < 16) {
                      v3 = h + k | 0;
                      b[i + 4 >> 2] = v3 | 3;
                      v3 = i + v3 + 4 | 0;
                      b[v3 >> 2] = b[v3 >> 2] | 1;
                    } else {
                      b[i + 4 >> 2] = k | 3;
                      b[l + 4 >> 2] = h | 1;
                      b[l + h >> 2] = h;
                      c2 = h >>> 3;
                      if (h >>> 0 < 256) {
                        d2 = 27948 + (c2 << 1 << 2) | 0;
                        a2 = b[6977] | 0;
                        c2 = 1 << c2;
                        if (!(a2 & c2)) {
                          b[6977] = a2 | c2;
                          c2 = d2;
                          a2 = d2 + 8 | 0;
                        } else {
                          a2 = d2 + 8 | 0;
                          c2 = b[a2 >> 2] | 0;
                        }
                        b[a2 >> 2] = l;
                        b[c2 + 12 >> 2] = l;
                        b[l + 8 >> 2] = c2;
                        b[l + 12 >> 2] = d2;
                        break;
                      }
                      c2 = h >>> 8;
                      if (c2) {
                        if (h >>> 0 > 16777215) {
                          d2 = 31;
                        } else {
                          u5 = (c2 + 1048320 | 0) >>> 16 & 8;
                          v3 = c2 << u5;
                          t2 = (v3 + 520192 | 0) >>> 16 & 4;
                          v3 = v3 << t2;
                          d2 = (v3 + 245760 | 0) >>> 16 & 2;
                          d2 = 14 - (t2 | u5 | d2) + (v3 << d2 >>> 15) | 0;
                          d2 = h >>> (d2 + 7 | 0) & 1 | d2 << 1;
                        }
                      } else {
                        d2 = 0;
                      }
                      c2 = 28212 + (d2 << 2) | 0;
                      b[l + 28 >> 2] = d2;
                      a2 = l + 16 | 0;
                      b[a2 + 4 >> 2] = 0;
                      b[a2 >> 2] = 0;
                      a2 = 1 << d2;
                      if (!(e2 & a2)) {
                        b[6978] = e2 | a2;
                        b[c2 >> 2] = l;
                        b[l + 24 >> 2] = c2;
                        b[l + 12 >> 2] = l;
                        b[l + 8 >> 2] = l;
                        break;
                      }
                      c2 = b[c2 >> 2] | 0;
                      c: do {
                        if ((b[c2 + 4 >> 2] & -8 | 0) != (h | 0)) {
                          e2 = h << ((d2 | 0) == 31 ? 0 : 25 - (d2 >>> 1) | 0);
                          while (1) {
                            d2 = c2 + 16 + (e2 >>> 31 << 2) | 0;
                            a2 = b[d2 >> 2] | 0;
                            if (!a2) {
                              break;
                            }
                            if ((b[a2 + 4 >> 2] & -8 | 0) == (h | 0)) {
                              c2 = a2;
                              break c;
                            } else {
                              e2 = e2 << 1;
                              c2 = a2;
                            }
                          }
                          b[d2 >> 2] = l;
                          b[l + 24 >> 2] = c2;
                          b[l + 12 >> 2] = l;
                          b[l + 8 >> 2] = l;
                          break b;
                        }
                      } while (0);
                      u5 = c2 + 8 | 0;
                      v3 = b[u5 >> 2] | 0;
                      b[v3 + 12 >> 2] = l;
                      b[u5 >> 2] = l;
                      b[l + 8 >> 2] = v3;
                      b[l + 12 >> 2] = c2;
                      b[l + 24 >> 2] = 0;
                    }
                  } while (0);
                  v3 = i + 8 | 0;
                  T = w2;
                  return v3 | 0;
                } else {
                  m = k;
                }
              } else {
                m = k;
              }
            } else {
              m = -1;
            }
          } while (0);
          d2 = b[6979] | 0;
          if (d2 >>> 0 >= m >>> 0) {
            c2 = d2 - m | 0;
            a2 = b[6982] | 0;
            if (c2 >>> 0 > 15) {
              v3 = a2 + m | 0;
              b[6982] = v3;
              b[6979] = c2;
              b[v3 + 4 >> 2] = c2 | 1;
              b[a2 + d2 >> 2] = c2;
              b[a2 + 4 >> 2] = m | 3;
            } else {
              b[6979] = 0;
              b[6982] = 0;
              b[a2 + 4 >> 2] = d2 | 3;
              v3 = a2 + d2 + 4 | 0;
              b[v3 >> 2] = b[v3 >> 2] | 1;
            }
            v3 = a2 + 8 | 0;
            T = w2;
            return v3 | 0;
          }
          h = b[6980] | 0;
          if (h >>> 0 > m >>> 0) {
            t2 = h - m | 0;
            b[6980] = t2;
            v3 = b[6983] | 0;
            u5 = v3 + m | 0;
            b[6983] = u5;
            b[u5 + 4 >> 2] = t2 | 1;
            b[v3 + 4 >> 2] = m | 3;
            v3 = v3 + 8 | 0;
            T = w2;
            return v3 | 0;
          }
          if (!(b[7095] | 0)) {
            b[7097] = 4096;
            b[7096] = 4096;
            b[7098] = -1;
            b[7099] = -1;
            b[7100] = 0;
            b[7088] = 0;
            b[7095] = n & -16 ^ 1431655768;
            a2 = 4096;
          } else {
            a2 = b[7097] | 0;
          }
          i = m + 48 | 0;
          j = m + 47 | 0;
          g2 = a2 + j | 0;
          f2 = 0 - a2 | 0;
          k = g2 & f2;
          if (k >>> 0 <= m >>> 0) {
            v3 = 0;
            T = w2;
            return v3 | 0;
          }
          a2 = b[7087] | 0;
          if (a2 | 0 ? (l = b[7085] | 0, n = l + k | 0, n >>> 0 <= l >>> 0 | n >>> 0 > a2 >>> 0) : 0) {
            v3 = 0;
            T = w2;
            return v3 | 0;
          }
          d: do {
            if (!(b[7088] & 4)) {
              d2 = b[6983] | 0;
              e: do {
                if (d2) {
                  e2 = 28356;
                  while (1) {
                    n = b[e2 >> 2] | 0;
                    if (n >>> 0 <= d2 >>> 0 ? (n + (b[e2 + 4 >> 2] | 0) | 0) >>> 0 > d2 >>> 0 : 0) {
                      break;
                    }
                    a2 = b[e2 + 8 >> 2] | 0;
                    if (!a2) {
                      q2 = 128;
                      break e;
                    } else {
                      e2 = a2;
                    }
                  }
                  c2 = g2 - h & f2;
                  if (c2 >>> 0 < 2147483647) {
                    a2 = Zd(c2 | 0) | 0;
                    if ((a2 | 0) == ((b[e2 >> 2] | 0) + (b[e2 + 4 >> 2] | 0) | 0)) {
                      if ((a2 | 0) != (-1 | 0)) {
                        h = c2;
                        g2 = a2;
                        q2 = 145;
                        break d;
                      }
                    } else {
                      e2 = a2;
                      q2 = 136;
                    }
                  } else {
                    c2 = 0;
                  }
                } else {
                  q2 = 128;
                }
              } while (0);
              do {
                if ((q2 | 0) == 128) {
                  d2 = Zd(0) | 0;
                  if ((d2 | 0) != (-1 | 0) ? (c2 = d2, o = b[7096] | 0, p2 = o + -1 | 0, c2 = ((p2 & c2 | 0) == 0 ? 0 : (p2 + c2 & 0 - o) - c2 | 0) + k | 0, o = b[7085] | 0, p2 = c2 + o | 0, c2 >>> 0 > m >>> 0 & c2 >>> 0 < 2147483647) : 0) {
                    n = b[7087] | 0;
                    if (n | 0 ? p2 >>> 0 <= o >>> 0 | p2 >>> 0 > n >>> 0 : 0) {
                      c2 = 0;
                      break;
                    }
                    a2 = Zd(c2 | 0) | 0;
                    if ((a2 | 0) == (d2 | 0)) {
                      h = c2;
                      g2 = d2;
                      q2 = 145;
                      break d;
                    } else {
                      e2 = a2;
                      q2 = 136;
                    }
                  } else {
                    c2 = 0;
                  }
                }
              } while (0);
              do {
                if ((q2 | 0) == 136) {
                  d2 = 0 - c2 | 0;
                  if (!(i >>> 0 > c2 >>> 0 & (c2 >>> 0 < 2147483647 & (e2 | 0) != (-1 | 0)))) {
                    if ((e2 | 0) == (-1 | 0)) {
                      c2 = 0;
                      break;
                    } else {
                      h = c2;
                      g2 = e2;
                      q2 = 145;
                      break d;
                    }
                  }
                  a2 = b[7097] | 0;
                  a2 = j - c2 + a2 & 0 - a2;
                  if (a2 >>> 0 >= 2147483647) {
                    h = c2;
                    g2 = e2;
                    q2 = 145;
                    break d;
                  }
                  if ((Zd(a2 | 0) | 0) == (-1 | 0)) {
                    Zd(d2 | 0) | 0;
                    c2 = 0;
                    break;
                  } else {
                    h = a2 + c2 | 0;
                    g2 = e2;
                    q2 = 145;
                    break d;
                  }
                }
              } while (0);
              b[7088] = b[7088] | 4;
              q2 = 143;
            } else {
              c2 = 0;
              q2 = 143;
            }
          } while (0);
          if (((q2 | 0) == 143 ? k >>> 0 < 2147483647 : 0) ? (t2 = Zd(k | 0) | 0, p2 = Zd(0) | 0, r2 = p2 - t2 | 0, s2 = r2 >>> 0 > (m + 40 | 0) >>> 0, !((t2 | 0) == (-1 | 0) | s2 ^ 1 | t2 >>> 0 < p2 >>> 0 & ((t2 | 0) != (-1 | 0) & (p2 | 0) != (-1 | 0)) ^ 1)) : 0) {
            h = s2 ? r2 : c2;
            g2 = t2;
            q2 = 145;
          }
          if ((q2 | 0) == 145) {
            c2 = (b[7085] | 0) + h | 0;
            b[7085] = c2;
            if (c2 >>> 0 > (b[7086] | 0) >>> 0) {
              b[7086] = c2;
            }
            j = b[6983] | 0;
            f: do {
              if (j) {
                c2 = 28356;
                while (1) {
                  a2 = b[c2 >> 2] | 0;
                  d2 = b[c2 + 4 >> 2] | 0;
                  if ((g2 | 0) == (a2 + d2 | 0)) {
                    q2 = 154;
                    break;
                  }
                  e2 = b[c2 + 8 >> 2] | 0;
                  if (!e2) {
                    break;
                  } else {
                    c2 = e2;
                  }
                }
                if (((q2 | 0) == 154 ? (u5 = c2 + 4 | 0, (b[c2 + 12 >> 2] & 8 | 0) == 0) : 0) ? g2 >>> 0 > j >>> 0 & a2 >>> 0 <= j >>> 0 : 0) {
                  b[u5 >> 2] = d2 + h;
                  v3 = (b[6980] | 0) + h | 0;
                  t2 = j + 8 | 0;
                  t2 = (t2 & 7 | 0) == 0 ? 0 : 0 - t2 & 7;
                  u5 = j + t2 | 0;
                  t2 = v3 - t2 | 0;
                  b[6983] = u5;
                  b[6980] = t2;
                  b[u5 + 4 >> 2] = t2 | 1;
                  b[j + v3 + 4 >> 2] = 40;
                  b[6984] = b[7099];
                  break;
                }
                if (g2 >>> 0 < (b[6981] | 0) >>> 0) {
                  b[6981] = g2;
                }
                d2 = g2 + h | 0;
                c2 = 28356;
                while (1) {
                  if ((b[c2 >> 2] | 0) == (d2 | 0)) {
                    q2 = 162;
                    break;
                  }
                  a2 = b[c2 + 8 >> 2] | 0;
                  if (!a2) {
                    break;
                  } else {
                    c2 = a2;
                  }
                }
                if ((q2 | 0) == 162 ? (b[c2 + 12 >> 2] & 8 | 0) == 0 : 0) {
                  b[c2 >> 2] = g2;
                  l = c2 + 4 | 0;
                  b[l >> 2] = (b[l >> 2] | 0) + h;
                  l = g2 + 8 | 0;
                  l = g2 + ((l & 7 | 0) == 0 ? 0 : 0 - l & 7) | 0;
                  c2 = d2 + 8 | 0;
                  c2 = d2 + ((c2 & 7 | 0) == 0 ? 0 : 0 - c2 & 7) | 0;
                  k = l + m | 0;
                  i = c2 - l - m | 0;
                  b[l + 4 >> 2] = m | 3;
                  g: do {
                    if ((j | 0) == (c2 | 0)) {
                      v3 = (b[6980] | 0) + i | 0;
                      b[6980] = v3;
                      b[6983] = k;
                      b[k + 4 >> 2] = v3 | 1;
                    } else {
                      if ((b[6982] | 0) == (c2 | 0)) {
                        v3 = (b[6979] | 0) + i | 0;
                        b[6979] = v3;
                        b[6982] = k;
                        b[k + 4 >> 2] = v3 | 1;
                        b[k + v3 >> 2] = v3;
                        break;
                      }
                      a2 = b[c2 + 4 >> 2] | 0;
                      if ((a2 & 3 | 0) == 1) {
                        h = a2 & -8;
                        e2 = a2 >>> 3;
                        h: do {
                          if (a2 >>> 0 < 256) {
                            a2 = b[c2 + 8 >> 2] | 0;
                            d2 = b[c2 + 12 >> 2] | 0;
                            if ((d2 | 0) == (a2 | 0)) {
                              b[6977] = b[6977] & ~(1 << e2);
                              break;
                            } else {
                              b[a2 + 12 >> 2] = d2;
                              b[d2 + 8 >> 2] = a2;
                              break;
                            }
                          } else {
                            g2 = b[c2 + 24 >> 2] | 0;
                            a2 = b[c2 + 12 >> 2] | 0;
                            do {
                              if ((a2 | 0) == (c2 | 0)) {
                                d2 = c2 + 16 | 0;
                                e2 = d2 + 4 | 0;
                                a2 = b[e2 >> 2] | 0;
                                if (!a2) {
                                  a2 = b[d2 >> 2] | 0;
                                  if (!a2) {
                                    a2 = 0;
                                    break;
                                  }
                                } else {
                                  d2 = e2;
                                }
                                while (1) {
                                  f2 = a2 + 20 | 0;
                                  e2 = b[f2 >> 2] | 0;
                                  if (!e2) {
                                    f2 = a2 + 16 | 0;
                                    e2 = b[f2 >> 2] | 0;
                                    if (!e2) {
                                      break;
                                    } else {
                                      a2 = e2;
                                      d2 = f2;
                                    }
                                  } else {
                                    a2 = e2;
                                    d2 = f2;
                                  }
                                }
                                b[d2 >> 2] = 0;
                              } else {
                                v3 = b[c2 + 8 >> 2] | 0;
                                b[v3 + 12 >> 2] = a2;
                                b[a2 + 8 >> 2] = v3;
                              }
                            } while (0);
                            if (!g2) {
                              break;
                            }
                            d2 = b[c2 + 28 >> 2] | 0;
                            e2 = 28212 + (d2 << 2) | 0;
                            do {
                              if ((b[e2 >> 2] | 0) != (c2 | 0)) {
                                v3 = g2 + 16 | 0;
                                b[((b[v3 >> 2] | 0) == (c2 | 0) ? v3 : g2 + 20 | 0) >> 2] = a2;
                                if (!a2) {
                                  break h;
                                }
                              } else {
                                b[e2 >> 2] = a2;
                                if (a2 | 0) {
                                  break;
                                }
                                b[6978] = b[6978] & ~(1 << d2);
                                break h;
                              }
                            } while (0);
                            b[a2 + 24 >> 2] = g2;
                            d2 = c2 + 16 | 0;
                            e2 = b[d2 >> 2] | 0;
                            if (e2 | 0) {
                              b[a2 + 16 >> 2] = e2;
                              b[e2 + 24 >> 2] = a2;
                            }
                            d2 = b[d2 + 4 >> 2] | 0;
                            if (!d2) {
                              break;
                            }
                            b[a2 + 20 >> 2] = d2;
                            b[d2 + 24 >> 2] = a2;
                          }
                        } while (0);
                        c2 = c2 + h | 0;
                        f2 = h + i | 0;
                      } else {
                        f2 = i;
                      }
                      c2 = c2 + 4 | 0;
                      b[c2 >> 2] = b[c2 >> 2] & -2;
                      b[k + 4 >> 2] = f2 | 1;
                      b[k + f2 >> 2] = f2;
                      c2 = f2 >>> 3;
                      if (f2 >>> 0 < 256) {
                        d2 = 27948 + (c2 << 1 << 2) | 0;
                        a2 = b[6977] | 0;
                        c2 = 1 << c2;
                        if (!(a2 & c2)) {
                          b[6977] = a2 | c2;
                          c2 = d2;
                          a2 = d2 + 8 | 0;
                        } else {
                          a2 = d2 + 8 | 0;
                          c2 = b[a2 >> 2] | 0;
                        }
                        b[a2 >> 2] = k;
                        b[c2 + 12 >> 2] = k;
                        b[k + 8 >> 2] = c2;
                        b[k + 12 >> 2] = d2;
                        break;
                      }
                      c2 = f2 >>> 8;
                      do {
                        if (!c2) {
                          e2 = 0;
                        } else {
                          if (f2 >>> 0 > 16777215) {
                            e2 = 31;
                            break;
                          }
                          u5 = (c2 + 1048320 | 0) >>> 16 & 8;
                          v3 = c2 << u5;
                          t2 = (v3 + 520192 | 0) >>> 16 & 4;
                          v3 = v3 << t2;
                          e2 = (v3 + 245760 | 0) >>> 16 & 2;
                          e2 = 14 - (t2 | u5 | e2) + (v3 << e2 >>> 15) | 0;
                          e2 = f2 >>> (e2 + 7 | 0) & 1 | e2 << 1;
                        }
                      } while (0);
                      c2 = 28212 + (e2 << 2) | 0;
                      b[k + 28 >> 2] = e2;
                      a2 = k + 16 | 0;
                      b[a2 + 4 >> 2] = 0;
                      b[a2 >> 2] = 0;
                      a2 = b[6978] | 0;
                      d2 = 1 << e2;
                      if (!(a2 & d2)) {
                        b[6978] = a2 | d2;
                        b[c2 >> 2] = k;
                        b[k + 24 >> 2] = c2;
                        b[k + 12 >> 2] = k;
                        b[k + 8 >> 2] = k;
                        break;
                      }
                      c2 = b[c2 >> 2] | 0;
                      i: do {
                        if ((b[c2 + 4 >> 2] & -8 | 0) != (f2 | 0)) {
                          e2 = f2 << ((e2 | 0) == 31 ? 0 : 25 - (e2 >>> 1) | 0);
                          while (1) {
                            d2 = c2 + 16 + (e2 >>> 31 << 2) | 0;
                            a2 = b[d2 >> 2] | 0;
                            if (!a2) {
                              break;
                            }
                            if ((b[a2 + 4 >> 2] & -8 | 0) == (f2 | 0)) {
                              c2 = a2;
                              break i;
                            } else {
                              e2 = e2 << 1;
                              c2 = a2;
                            }
                          }
                          b[d2 >> 2] = k;
                          b[k + 24 >> 2] = c2;
                          b[k + 12 >> 2] = k;
                          b[k + 8 >> 2] = k;
                          break g;
                        }
                      } while (0);
                      u5 = c2 + 8 | 0;
                      v3 = b[u5 >> 2] | 0;
                      b[v3 + 12 >> 2] = k;
                      b[u5 >> 2] = k;
                      b[k + 8 >> 2] = v3;
                      b[k + 12 >> 2] = c2;
                      b[k + 24 >> 2] = 0;
                    }
                  } while (0);
                  v3 = l + 8 | 0;
                  T = w2;
                  return v3 | 0;
                }
                c2 = 28356;
                while (1) {
                  a2 = b[c2 >> 2] | 0;
                  if (a2 >>> 0 <= j >>> 0 ? (v3 = a2 + (b[c2 + 4 >> 2] | 0) | 0, v3 >>> 0 > j >>> 0) : 0) {
                    break;
                  }
                  c2 = b[c2 + 8 >> 2] | 0;
                }
                f2 = v3 + -47 | 0;
                a2 = f2 + 8 | 0;
                a2 = f2 + ((a2 & 7 | 0) == 0 ? 0 : 0 - a2 & 7) | 0;
                f2 = j + 16 | 0;
                a2 = a2 >>> 0 < f2 >>> 0 ? j : a2;
                c2 = a2 + 8 | 0;
                d2 = h + -40 | 0;
                t2 = g2 + 8 | 0;
                t2 = (t2 & 7 | 0) == 0 ? 0 : 0 - t2 & 7;
                u5 = g2 + t2 | 0;
                t2 = d2 - t2 | 0;
                b[6983] = u5;
                b[6980] = t2;
                b[u5 + 4 >> 2] = t2 | 1;
                b[g2 + d2 + 4 >> 2] = 40;
                b[6984] = b[7099];
                d2 = a2 + 4 | 0;
                b[d2 >> 2] = 27;
                b[c2 >> 2] = b[7089];
                b[c2 + 4 >> 2] = b[7090];
                b[c2 + 8 >> 2] = b[7091];
                b[c2 + 12 >> 2] = b[7092];
                b[7089] = g2;
                b[7090] = h;
                b[7092] = 0;
                b[7091] = c2;
                c2 = a2 + 24 | 0;
                do {
                  u5 = c2;
                  c2 = c2 + 4 | 0;
                  b[c2 >> 2] = 7;
                } while ((u5 + 8 | 0) >>> 0 < v3 >>> 0);
                if ((a2 | 0) != (j | 0)) {
                  g2 = a2 - j | 0;
                  b[d2 >> 2] = b[d2 >> 2] & -2;
                  b[j + 4 >> 2] = g2 | 1;
                  b[a2 >> 2] = g2;
                  c2 = g2 >>> 3;
                  if (g2 >>> 0 < 256) {
                    d2 = 27948 + (c2 << 1 << 2) | 0;
                    a2 = b[6977] | 0;
                    c2 = 1 << c2;
                    if (!(a2 & c2)) {
                      b[6977] = a2 | c2;
                      c2 = d2;
                      a2 = d2 + 8 | 0;
                    } else {
                      a2 = d2 + 8 | 0;
                      c2 = b[a2 >> 2] | 0;
                    }
                    b[a2 >> 2] = j;
                    b[c2 + 12 >> 2] = j;
                    b[j + 8 >> 2] = c2;
                    b[j + 12 >> 2] = d2;
                    break;
                  }
                  c2 = g2 >>> 8;
                  if (c2) {
                    if (g2 >>> 0 > 16777215) {
                      e2 = 31;
                    } else {
                      u5 = (c2 + 1048320 | 0) >>> 16 & 8;
                      v3 = c2 << u5;
                      t2 = (v3 + 520192 | 0) >>> 16 & 4;
                      v3 = v3 << t2;
                      e2 = (v3 + 245760 | 0) >>> 16 & 2;
                      e2 = 14 - (t2 | u5 | e2) + (v3 << e2 >>> 15) | 0;
                      e2 = g2 >>> (e2 + 7 | 0) & 1 | e2 << 1;
                    }
                  } else {
                    e2 = 0;
                  }
                  d2 = 28212 + (e2 << 2) | 0;
                  b[j + 28 >> 2] = e2;
                  b[j + 20 >> 2] = 0;
                  b[f2 >> 2] = 0;
                  c2 = b[6978] | 0;
                  a2 = 1 << e2;
                  if (!(c2 & a2)) {
                    b[6978] = c2 | a2;
                    b[d2 >> 2] = j;
                    b[j + 24 >> 2] = d2;
                    b[j + 12 >> 2] = j;
                    b[j + 8 >> 2] = j;
                    break;
                  }
                  c2 = b[d2 >> 2] | 0;
                  j: do {
                    if ((b[c2 + 4 >> 2] & -8 | 0) != (g2 | 0)) {
                      e2 = g2 << ((e2 | 0) == 31 ? 0 : 25 - (e2 >>> 1) | 0);
                      while (1) {
                        d2 = c2 + 16 + (e2 >>> 31 << 2) | 0;
                        a2 = b[d2 >> 2] | 0;
                        if (!a2) {
                          break;
                        }
                        if ((b[a2 + 4 >> 2] & -8 | 0) == (g2 | 0)) {
                          c2 = a2;
                          break j;
                        } else {
                          e2 = e2 << 1;
                          c2 = a2;
                        }
                      }
                      b[d2 >> 2] = j;
                      b[j + 24 >> 2] = c2;
                      b[j + 12 >> 2] = j;
                      b[j + 8 >> 2] = j;
                      break f;
                    }
                  } while (0);
                  u5 = c2 + 8 | 0;
                  v3 = b[u5 >> 2] | 0;
                  b[v3 + 12 >> 2] = j;
                  b[u5 >> 2] = j;
                  b[j + 8 >> 2] = v3;
                  b[j + 12 >> 2] = c2;
                  b[j + 24 >> 2] = 0;
                }
              } else {
                v3 = b[6981] | 0;
                if ((v3 | 0) == 0 | g2 >>> 0 < v3 >>> 0) {
                  b[6981] = g2;
                }
                b[7089] = g2;
                b[7090] = h;
                b[7092] = 0;
                b[6986] = b[7095];
                b[6985] = -1;
                b[6990] = 27948;
                b[6989] = 27948;
                b[6992] = 27956;
                b[6991] = 27956;
                b[6994] = 27964;
                b[6993] = 27964;
                b[6996] = 27972;
                b[6995] = 27972;
                b[6998] = 27980;
                b[6997] = 27980;
                b[7e3] = 27988;
                b[6999] = 27988;
                b[7002] = 27996;
                b[7001] = 27996;
                b[7004] = 28004;
                b[7003] = 28004;
                b[7006] = 28012;
                b[7005] = 28012;
                b[7008] = 28020;
                b[7007] = 28020;
                b[7010] = 28028;
                b[7009] = 28028;
                b[7012] = 28036;
                b[7011] = 28036;
                b[7014] = 28044;
                b[7013] = 28044;
                b[7016] = 28052;
                b[7015] = 28052;
                b[7018] = 28060;
                b[7017] = 28060;
                b[7020] = 28068;
                b[7019] = 28068;
                b[7022] = 28076;
                b[7021] = 28076;
                b[7024] = 28084;
                b[7023] = 28084;
                b[7026] = 28092;
                b[7025] = 28092;
                b[7028] = 28100;
                b[7027] = 28100;
                b[7030] = 28108;
                b[7029] = 28108;
                b[7032] = 28116;
                b[7031] = 28116;
                b[7034] = 28124;
                b[7033] = 28124;
                b[7036] = 28132;
                b[7035] = 28132;
                b[7038] = 28140;
                b[7037] = 28140;
                b[7040] = 28148;
                b[7039] = 28148;
                b[7042] = 28156;
                b[7041] = 28156;
                b[7044] = 28164;
                b[7043] = 28164;
                b[7046] = 28172;
                b[7045] = 28172;
                b[7048] = 28180;
                b[7047] = 28180;
                b[7050] = 28188;
                b[7049] = 28188;
                b[7052] = 28196;
                b[7051] = 28196;
                v3 = h + -40 | 0;
                t2 = g2 + 8 | 0;
                t2 = (t2 & 7 | 0) == 0 ? 0 : 0 - t2 & 7;
                u5 = g2 + t2 | 0;
                t2 = v3 - t2 | 0;
                b[6983] = u5;
                b[6980] = t2;
                b[u5 + 4 >> 2] = t2 | 1;
                b[g2 + v3 + 4 >> 2] = 40;
                b[6984] = b[7099];
              }
            } while (0);
            c2 = b[6980] | 0;
            if (c2 >>> 0 > m >>> 0) {
              t2 = c2 - m | 0;
              b[6980] = t2;
              v3 = b[6983] | 0;
              u5 = v3 + m | 0;
              b[6983] = u5;
              b[u5 + 4 >> 2] = t2 | 1;
              b[v3 + 4 >> 2] = m | 3;
              v3 = v3 + 8 | 0;
              T = w2;
              return v3 | 0;
            }
          }
          v3 = Bd() | 0;
          b[v3 >> 2] = 12;
          v3 = 0;
          T = w2;
          return v3 | 0;
        }
        function Ed(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0;
          if (!a2) {
            return;
          }
          d2 = a2 + -8 | 0;
          f2 = b[6981] | 0;
          a2 = b[a2 + -4 >> 2] | 0;
          c2 = a2 & -8;
          j = d2 + c2 | 0;
          do {
            if (!(a2 & 1)) {
              e2 = b[d2 >> 2] | 0;
              if (!(a2 & 3)) {
                return;
              }
              h = d2 + (0 - e2) | 0;
              g2 = e2 + c2 | 0;
              if (h >>> 0 < f2 >>> 0) {
                return;
              }
              if ((b[6982] | 0) == (h | 0)) {
                a2 = j + 4 | 0;
                c2 = b[a2 >> 2] | 0;
                if ((c2 & 3 | 0) != 3) {
                  i = h;
                  c2 = g2;
                  break;
                }
                b[6979] = g2;
                b[a2 >> 2] = c2 & -2;
                b[h + 4 >> 2] = g2 | 1;
                b[h + g2 >> 2] = g2;
                return;
              }
              d2 = e2 >>> 3;
              if (e2 >>> 0 < 256) {
                a2 = b[h + 8 >> 2] | 0;
                c2 = b[h + 12 >> 2] | 0;
                if ((c2 | 0) == (a2 | 0)) {
                  b[6977] = b[6977] & ~(1 << d2);
                  i = h;
                  c2 = g2;
                  break;
                } else {
                  b[a2 + 12 >> 2] = c2;
                  b[c2 + 8 >> 2] = a2;
                  i = h;
                  c2 = g2;
                  break;
                }
              }
              f2 = b[h + 24 >> 2] | 0;
              a2 = b[h + 12 >> 2] | 0;
              do {
                if ((a2 | 0) == (h | 0)) {
                  c2 = h + 16 | 0;
                  d2 = c2 + 4 | 0;
                  a2 = b[d2 >> 2] | 0;
                  if (!a2) {
                    a2 = b[c2 >> 2] | 0;
                    if (!a2) {
                      a2 = 0;
                      break;
                    }
                  } else {
                    c2 = d2;
                  }
                  while (1) {
                    e2 = a2 + 20 | 0;
                    d2 = b[e2 >> 2] | 0;
                    if (!d2) {
                      e2 = a2 + 16 | 0;
                      d2 = b[e2 >> 2] | 0;
                      if (!d2) {
                        break;
                      } else {
                        a2 = d2;
                        c2 = e2;
                      }
                    } else {
                      a2 = d2;
                      c2 = e2;
                    }
                  }
                  b[c2 >> 2] = 0;
                } else {
                  i = b[h + 8 >> 2] | 0;
                  b[i + 12 >> 2] = a2;
                  b[a2 + 8 >> 2] = i;
                }
              } while (0);
              if (f2) {
                c2 = b[h + 28 >> 2] | 0;
                d2 = 28212 + (c2 << 2) | 0;
                if ((b[d2 >> 2] | 0) == (h | 0)) {
                  b[d2 >> 2] = a2;
                  if (!a2) {
                    b[6978] = b[6978] & ~(1 << c2);
                    i = h;
                    c2 = g2;
                    break;
                  }
                } else {
                  i = f2 + 16 | 0;
                  b[((b[i >> 2] | 0) == (h | 0) ? i : f2 + 20 | 0) >> 2] = a2;
                  if (!a2) {
                    i = h;
                    c2 = g2;
                    break;
                  }
                }
                b[a2 + 24 >> 2] = f2;
                c2 = h + 16 | 0;
                d2 = b[c2 >> 2] | 0;
                if (d2 | 0) {
                  b[a2 + 16 >> 2] = d2;
                  b[d2 + 24 >> 2] = a2;
                }
                c2 = b[c2 + 4 >> 2] | 0;
                if (c2) {
                  b[a2 + 20 >> 2] = c2;
                  b[c2 + 24 >> 2] = a2;
                  i = h;
                  c2 = g2;
                } else {
                  i = h;
                  c2 = g2;
                }
              } else {
                i = h;
                c2 = g2;
              }
            } else {
              i = d2;
              h = d2;
            }
          } while (0);
          if (h >>> 0 >= j >>> 0) {
            return;
          }
          a2 = j + 4 | 0;
          e2 = b[a2 >> 2] | 0;
          if (!(e2 & 1)) {
            return;
          }
          if (!(e2 & 2)) {
            if ((b[6983] | 0) == (j | 0)) {
              j = (b[6980] | 0) + c2 | 0;
              b[6980] = j;
              b[6983] = i;
              b[i + 4 >> 2] = j | 1;
              if ((i | 0) != (b[6982] | 0)) {
                return;
              }
              b[6982] = 0;
              b[6979] = 0;
              return;
            }
            if ((b[6982] | 0) == (j | 0)) {
              j = (b[6979] | 0) + c2 | 0;
              b[6979] = j;
              b[6982] = h;
              b[i + 4 >> 2] = j | 1;
              b[h + j >> 2] = j;
              return;
            }
            f2 = (e2 & -8) + c2 | 0;
            d2 = e2 >>> 3;
            do {
              if (e2 >>> 0 < 256) {
                c2 = b[j + 8 >> 2] | 0;
                a2 = b[j + 12 >> 2] | 0;
                if ((a2 | 0) == (c2 | 0)) {
                  b[6977] = b[6977] & ~(1 << d2);
                  break;
                } else {
                  b[c2 + 12 >> 2] = a2;
                  b[a2 + 8 >> 2] = c2;
                  break;
                }
              } else {
                g2 = b[j + 24 >> 2] | 0;
                a2 = b[j + 12 >> 2] | 0;
                do {
                  if ((a2 | 0) == (j | 0)) {
                    c2 = j + 16 | 0;
                    d2 = c2 + 4 | 0;
                    a2 = b[d2 >> 2] | 0;
                    if (!a2) {
                      a2 = b[c2 >> 2] | 0;
                      if (!a2) {
                        d2 = 0;
                        break;
                      }
                    } else {
                      c2 = d2;
                    }
                    while (1) {
                      e2 = a2 + 20 | 0;
                      d2 = b[e2 >> 2] | 0;
                      if (!d2) {
                        e2 = a2 + 16 | 0;
                        d2 = b[e2 >> 2] | 0;
                        if (!d2) {
                          break;
                        } else {
                          a2 = d2;
                          c2 = e2;
                        }
                      } else {
                        a2 = d2;
                        c2 = e2;
                      }
                    }
                    b[c2 >> 2] = 0;
                    d2 = a2;
                  } else {
                    d2 = b[j + 8 >> 2] | 0;
                    b[d2 + 12 >> 2] = a2;
                    b[a2 + 8 >> 2] = d2;
                    d2 = a2;
                  }
                } while (0);
                if (g2 | 0) {
                  a2 = b[j + 28 >> 2] | 0;
                  c2 = 28212 + (a2 << 2) | 0;
                  if ((b[c2 >> 2] | 0) == (j | 0)) {
                    b[c2 >> 2] = d2;
                    if (!d2) {
                      b[6978] = b[6978] & ~(1 << a2);
                      break;
                    }
                  } else {
                    e2 = g2 + 16 | 0;
                    b[((b[e2 >> 2] | 0) == (j | 0) ? e2 : g2 + 20 | 0) >> 2] = d2;
                    if (!d2) {
                      break;
                    }
                  }
                  b[d2 + 24 >> 2] = g2;
                  a2 = j + 16 | 0;
                  c2 = b[a2 >> 2] | 0;
                  if (c2 | 0) {
                    b[d2 + 16 >> 2] = c2;
                    b[c2 + 24 >> 2] = d2;
                  }
                  a2 = b[a2 + 4 >> 2] | 0;
                  if (a2 | 0) {
                    b[d2 + 20 >> 2] = a2;
                    b[a2 + 24 >> 2] = d2;
                  }
                }
              }
            } while (0);
            b[i + 4 >> 2] = f2 | 1;
            b[h + f2 >> 2] = f2;
            if ((i | 0) == (b[6982] | 0)) {
              b[6979] = f2;
              return;
            }
          } else {
            b[a2 >> 2] = e2 & -2;
            b[i + 4 >> 2] = c2 | 1;
            b[h + c2 >> 2] = c2;
            f2 = c2;
          }
          a2 = f2 >>> 3;
          if (f2 >>> 0 < 256) {
            d2 = 27948 + (a2 << 1 << 2) | 0;
            c2 = b[6977] | 0;
            a2 = 1 << a2;
            if (!(c2 & a2)) {
              b[6977] = c2 | a2;
              a2 = d2;
              c2 = d2 + 8 | 0;
            } else {
              c2 = d2 + 8 | 0;
              a2 = b[c2 >> 2] | 0;
            }
            b[c2 >> 2] = i;
            b[a2 + 12 >> 2] = i;
            b[i + 8 >> 2] = a2;
            b[i + 12 >> 2] = d2;
            return;
          }
          a2 = f2 >>> 8;
          if (a2) {
            if (f2 >>> 0 > 16777215) {
              e2 = 31;
            } else {
              h = (a2 + 1048320 | 0) >>> 16 & 8;
              j = a2 << h;
              g2 = (j + 520192 | 0) >>> 16 & 4;
              j = j << g2;
              e2 = (j + 245760 | 0) >>> 16 & 2;
              e2 = 14 - (g2 | h | e2) + (j << e2 >>> 15) | 0;
              e2 = f2 >>> (e2 + 7 | 0) & 1 | e2 << 1;
            }
          } else {
            e2 = 0;
          }
          a2 = 28212 + (e2 << 2) | 0;
          b[i + 28 >> 2] = e2;
          b[i + 20 >> 2] = 0;
          b[i + 16 >> 2] = 0;
          c2 = b[6978] | 0;
          d2 = 1 << e2;
          a: do {
            if (!(c2 & d2)) {
              b[6978] = c2 | d2;
              b[a2 >> 2] = i;
              b[i + 24 >> 2] = a2;
              b[i + 12 >> 2] = i;
              b[i + 8 >> 2] = i;
            } else {
              a2 = b[a2 >> 2] | 0;
              b: do {
                if ((b[a2 + 4 >> 2] & -8 | 0) != (f2 | 0)) {
                  e2 = f2 << ((e2 | 0) == 31 ? 0 : 25 - (e2 >>> 1) | 0);
                  while (1) {
                    d2 = a2 + 16 + (e2 >>> 31 << 2) | 0;
                    c2 = b[d2 >> 2] | 0;
                    if (!c2) {
                      break;
                    }
                    if ((b[c2 + 4 >> 2] & -8 | 0) == (f2 | 0)) {
                      a2 = c2;
                      break b;
                    } else {
                      e2 = e2 << 1;
                      a2 = c2;
                    }
                  }
                  b[d2 >> 2] = i;
                  b[i + 24 >> 2] = a2;
                  b[i + 12 >> 2] = i;
                  b[i + 8 >> 2] = i;
                  break a;
                }
              } while (0);
              h = a2 + 8 | 0;
              j = b[h >> 2] | 0;
              b[j + 12 >> 2] = i;
              b[h >> 2] = i;
              b[i + 8 >> 2] = j;
              b[i + 12 >> 2] = a2;
              b[i + 24 >> 2] = 0;
            }
          } while (0);
          j = (b[6985] | 0) + -1 | 0;
          b[6985] = j;
          if (j | 0) {
            return;
          }
          a2 = 28364;
          while (1) {
            a2 = b[a2 >> 2] | 0;
            if (!a2) {
              break;
            } else {
              a2 = a2 + 8 | 0;
            }
          }
          b[6985] = -1;
          return;
        }
        function Fd(a2, c2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          var d2 = 0;
          if (a2) {
            d2 = B3(c2, a2) | 0;
            if ((c2 | a2) >>> 0 > 65535) {
              d2 = ((d2 >>> 0) / (a2 >>> 0) | 0 | 0) == (c2 | 0) ? d2 : -1;
            }
          } else {
            d2 = 0;
          }
          a2 = Dd(d2) | 0;
          if (!a2) {
            return a2 | 0;
          }
          if (!(b[a2 + -4 >> 2] & 3)) {
            return a2 | 0;
          }
          Xd(a2 | 0, 0, d2 | 0) | 0;
          return a2 | 0;
        }
        function Gd(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          c2 = a2 + c2 >>> 0;
          return (G(b2 + d2 + (c2 >>> 0 < a2 >>> 0 | 0) >>> 0 | 0), c2 | 0) | 0;
        }
        function Hd(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          d2 = b2 - d2 - (c2 >>> 0 > a2 >>> 0 | 0) >>> 0;
          return (G(d2 | 0), a2 - c2 >>> 0 | 0) | 0;
        }
        function Id(a2) {
          a2 = a2 | 0;
          return (a2 ? 31 - (E(a2 ^ a2 - 1) | 0) | 0 : 32) | 0;
        }
        function Jd(a2, c2, d2, e2, f2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0;
          l = a2;
          j = c2;
          k = j;
          h = d2;
          n = e2;
          i = n;
          if (!k) {
            g2 = (f2 | 0) != 0;
            if (!i) {
              if (g2) {
                b[f2 >> 2] = (l >>> 0) % (h >>> 0);
                b[f2 + 4 >> 2] = 0;
              }
              n = 0;
              f2 = (l >>> 0) / (h >>> 0) >>> 0;
              return (G(n | 0), f2) | 0;
            } else {
              if (!g2) {
                n = 0;
                f2 = 0;
                return (G(n | 0), f2) | 0;
              }
              b[f2 >> 2] = a2 | 0;
              b[f2 + 4 >> 2] = c2 & 0;
              n = 0;
              f2 = 0;
              return (G(n | 0), f2) | 0;
            }
          }
          g2 = (i | 0) == 0;
          do {
            if (h) {
              if (!g2) {
                g2 = (E(i | 0) | 0) - (E(k | 0) | 0) | 0;
                if (g2 >>> 0 <= 31) {
                  m = g2 + 1 | 0;
                  i = 31 - g2 | 0;
                  c2 = g2 - 31 >> 31;
                  h = m;
                  a2 = l >>> (m >>> 0) & c2 | k << i;
                  c2 = k >>> (m >>> 0) & c2;
                  g2 = 0;
                  i = l << i;
                  break;
                }
                if (!f2) {
                  n = 0;
                  f2 = 0;
                  return (G(n | 0), f2) | 0;
                }
                b[f2 >> 2] = a2 | 0;
                b[f2 + 4 >> 2] = j | c2 & 0;
                n = 0;
                f2 = 0;
                return (G(n | 0), f2) | 0;
              }
              g2 = h - 1 | 0;
              if (g2 & h | 0) {
                i = (E(h | 0) | 0) + 33 - (E(k | 0) | 0) | 0;
                p2 = 64 - i | 0;
                m = 32 - i | 0;
                j = m >> 31;
                o = i - 32 | 0;
                c2 = o >> 31;
                h = i;
                a2 = m - 1 >> 31 & k >>> (o >>> 0) | (k << m | l >>> (i >>> 0)) & c2;
                c2 = c2 & k >>> (i >>> 0);
                g2 = l << p2 & j;
                i = (k << p2 | l >>> (o >>> 0)) & j | l << m & i - 33 >> 31;
                break;
              }
              if (f2 | 0) {
                b[f2 >> 2] = g2 & l;
                b[f2 + 4 >> 2] = 0;
              }
              if ((h | 0) == 1) {
                o = j | c2 & 0;
                p2 = a2 | 0 | 0;
                return (G(o | 0), p2) | 0;
              } else {
                p2 = Id(h | 0) | 0;
                o = k >>> (p2 >>> 0) | 0;
                p2 = k << 32 - p2 | l >>> (p2 >>> 0) | 0;
                return (G(o | 0), p2) | 0;
              }
            } else {
              if (g2) {
                if (f2 | 0) {
                  b[f2 >> 2] = (k >>> 0) % (h >>> 0);
                  b[f2 + 4 >> 2] = 0;
                }
                o = 0;
                p2 = (k >>> 0) / (h >>> 0) >>> 0;
                return (G(o | 0), p2) | 0;
              }
              if (!l) {
                if (f2 | 0) {
                  b[f2 >> 2] = 0;
                  b[f2 + 4 >> 2] = (k >>> 0) % (i >>> 0);
                }
                o = 0;
                p2 = (k >>> 0) / (i >>> 0) >>> 0;
                return (G(o | 0), p2) | 0;
              }
              g2 = i - 1 | 0;
              if (!(g2 & i)) {
                if (f2 | 0) {
                  b[f2 >> 2] = a2 | 0;
                  b[f2 + 4 >> 2] = g2 & k | c2 & 0;
                }
                o = 0;
                p2 = k >>> ((Id(i | 0) | 0) >>> 0);
                return (G(o | 0), p2) | 0;
              }
              g2 = (E(i | 0) | 0) - (E(k | 0) | 0) | 0;
              if (g2 >>> 0 <= 30) {
                c2 = g2 + 1 | 0;
                i = 31 - g2 | 0;
                h = c2;
                a2 = k << i | l >>> (c2 >>> 0);
                c2 = k >>> (c2 >>> 0);
                g2 = 0;
                i = l << i;
                break;
              }
              if (!f2) {
                o = 0;
                p2 = 0;
                return (G(o | 0), p2) | 0;
              }
              b[f2 >> 2] = a2 | 0;
              b[f2 + 4 >> 2] = j | c2 & 0;
              o = 0;
              p2 = 0;
              return (G(o | 0), p2) | 0;
            }
          } while (0);
          if (!h) {
            k = i;
            j = 0;
            i = 0;
          } else {
            m = d2 | 0 | 0;
            l = n | e2 & 0;
            k = Gd(m | 0, l | 0, -1, -1) | 0;
            d2 = H() | 0;
            j = i;
            i = 0;
            do {
              e2 = j;
              j = g2 >>> 31 | j << 1;
              g2 = i | g2 << 1;
              e2 = a2 << 1 | e2 >>> 31 | 0;
              n = a2 >>> 31 | c2 << 1 | 0;
              Hd(k | 0, d2 | 0, e2 | 0, n | 0) | 0;
              p2 = H() | 0;
              o = p2 >> 31 | ((p2 | 0) < 0 ? -1 : 0) << 1;
              i = o & 1;
              a2 = Hd(e2 | 0, n | 0, o & m | 0, (((p2 | 0) < 0 ? -1 : 0) >> 31 | ((p2 | 0) < 0 ? -1 : 0) << 1) & l | 0) | 0;
              c2 = H() | 0;
              h = h - 1 | 0;
            } while ((h | 0) != 0);
            k = j;
            j = 0;
          }
          h = 0;
          if (f2 | 0) {
            b[f2 >> 2] = a2;
            b[f2 + 4 >> 2] = c2;
          }
          o = (g2 | 0) >>> 31 | (k | h) << 1 | (h << 1 | g2 >>> 31) & 0 | j;
          p2 = (g2 << 1 | 0 >>> 31) & -2 | i;
          return (G(o | 0), p2) | 0;
        }
        function Kd(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0;
          j = b2 >> 31 | ((b2 | 0) < 0 ? -1 : 0) << 1;
          i = ((b2 | 0) < 0 ? -1 : 0) >> 31 | ((b2 | 0) < 0 ? -1 : 0) << 1;
          f2 = d2 >> 31 | ((d2 | 0) < 0 ? -1 : 0) << 1;
          e2 = ((d2 | 0) < 0 ? -1 : 0) >> 31 | ((d2 | 0) < 0 ? -1 : 0) << 1;
          h = Hd(j ^ a2 | 0, i ^ b2 | 0, j | 0, i | 0) | 0;
          g2 = H() | 0;
          a2 = f2 ^ j;
          b2 = e2 ^ i;
          return Hd((Jd(h, g2, Hd(f2 ^ c2 | 0, e2 ^ d2 | 0, f2 | 0, e2 | 0) | 0, H() | 0, 0) | 0) ^ a2 | 0, (H() | 0) ^ b2 | 0, a2 | 0, b2 | 0) | 0;
        }
        function Ld(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0, d2 = 0, e2 = 0, f2 = 0;
          f2 = a2 & 65535;
          e2 = b2 & 65535;
          c2 = B3(e2, f2) | 0;
          d2 = a2 >>> 16;
          a2 = (c2 >>> 16) + (B3(e2, d2) | 0) | 0;
          e2 = b2 >>> 16;
          b2 = B3(e2, f2) | 0;
          return (G((a2 >>> 16) + (B3(e2, d2) | 0) + (((a2 & 65535) + b2 | 0) >>> 16) | 0), a2 + b2 << 16 | c2 & 65535 | 0) | 0;
        }
        function Md(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0;
          e2 = a2;
          f2 = c2;
          c2 = Ld(e2, f2) | 0;
          a2 = H() | 0;
          return (G((B3(b2, f2) | 0) + (B3(d2, e2) | 0) + a2 | a2 & 0 | 0), c2 | 0 | 0) | 0;
        }
        function Nd(a2, c2, d2, e2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0;
          f2 = T;
          T = T + 16 | 0;
          i = f2 | 0;
          h = c2 >> 31 | ((c2 | 0) < 0 ? -1 : 0) << 1;
          g2 = ((c2 | 0) < 0 ? -1 : 0) >> 31 | ((c2 | 0) < 0 ? -1 : 0) << 1;
          k = e2 >> 31 | ((e2 | 0) < 0 ? -1 : 0) << 1;
          j = ((e2 | 0) < 0 ? -1 : 0) >> 31 | ((e2 | 0) < 0 ? -1 : 0) << 1;
          a2 = Hd(h ^ a2 | 0, g2 ^ c2 | 0, h | 0, g2 | 0) | 0;
          c2 = H() | 0;
          Jd(a2, c2, Hd(k ^ d2 | 0, j ^ e2 | 0, k | 0, j | 0) | 0, H() | 0, i) | 0;
          e2 = Hd(b[i >> 2] ^ h | 0, b[i + 4 >> 2] ^ g2 | 0, h | 0, g2 | 0) | 0;
          d2 = H() | 0;
          T = f2;
          return (G(d2 | 0), e2) | 0;
        }
        function Od(a2, c2, d2, e2) {
          a2 = a2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0;
          g2 = T;
          T = T + 16 | 0;
          f2 = g2 | 0;
          Jd(a2, c2, d2, e2, f2) | 0;
          T = g2;
          return (G(b[f2 + 4 >> 2] | 0), b[f2 >> 2] | 0) | 0;
        }
        function Pd(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          if ((c2 | 0) < 32) {
            G(b2 >> c2 | 0);
            return a2 >>> c2 | (b2 & (1 << c2) - 1) << 32 - c2;
          }
          G(((b2 | 0) < 0 ? -1 : 0) | 0);
          return b2 >> c2 - 32 | 0;
        }
        function Qd(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          if ((c2 | 0) < 32) {
            G(b2 >>> c2 | 0);
            return a2 >>> c2 | (b2 & (1 << c2) - 1) << 32 - c2;
          }
          G(0);
          return b2 >>> c2 - 32 | 0;
        }
        function Rd(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          if ((c2 | 0) < 32) {
            G(b2 << c2 | (a2 & (1 << c2) - 1 << 32 - c2) >>> 32 - c2 | 0);
            return a2 << c2;
          }
          G(a2 << c2 - 32 | 0);
          return 0;
        }
        function Sd(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          b2 = E(b2) | 0;
          if ((b2 | 0) == 32) {
            b2 = b2 + (E(a2) | 0) | 0;
          }
          G(0);
          return b2 | 0;
        }
        function Td(a2, b2) {
          a2 = +a2;
          b2 = +b2;
          if (a2 != a2) {
            return +b2;
          }
          if (b2 != b2) {
            return +a2;
          }
          return +D2(+a2, +b2);
        }
        function Ud(a2, b2) {
          a2 = +a2;
          b2 = +b2;
          if (a2 != a2) {
            return +b2;
          }
          if (b2 != b2) {
            return +a2;
          }
          return +C(+a2, +b2);
        }
        function Vd(a2) {
          a2 = +a2;
          return a2 >= 0 ? +p(a2 + 0.5) : +A(a2 - 0.5);
        }
        function Wd(c2, d2, e2) {
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h = 0;
          if ((e2 | 0) >= 8192) {
            L(c2 | 0, d2 | 0, e2 | 0) | 0;
            return c2 | 0;
          }
          h = c2 | 0;
          g2 = c2 + e2 | 0;
          if ((c2 & 3) == (d2 & 3)) {
            while (c2 & 3) {
              if (!e2) {
                return h | 0;
              }
              a[c2 >> 0] = a[d2 >> 0] | 0;
              c2 = c2 + 1 | 0;
              d2 = d2 + 1 | 0;
              e2 = e2 - 1 | 0;
            }
            e2 = g2 & -4 | 0;
            f2 = e2 - 64 | 0;
            while ((c2 | 0) <= (f2 | 0)) {
              b[c2 >> 2] = b[d2 >> 2];
              b[c2 + 4 >> 2] = b[d2 + 4 >> 2];
              b[c2 + 8 >> 2] = b[d2 + 8 >> 2];
              b[c2 + 12 >> 2] = b[d2 + 12 >> 2];
              b[c2 + 16 >> 2] = b[d2 + 16 >> 2];
              b[c2 + 20 >> 2] = b[d2 + 20 >> 2];
              b[c2 + 24 >> 2] = b[d2 + 24 >> 2];
              b[c2 + 28 >> 2] = b[d2 + 28 >> 2];
              b[c2 + 32 >> 2] = b[d2 + 32 >> 2];
              b[c2 + 36 >> 2] = b[d2 + 36 >> 2];
              b[c2 + 40 >> 2] = b[d2 + 40 >> 2];
              b[c2 + 44 >> 2] = b[d2 + 44 >> 2];
              b[c2 + 48 >> 2] = b[d2 + 48 >> 2];
              b[c2 + 52 >> 2] = b[d2 + 52 >> 2];
              b[c2 + 56 >> 2] = b[d2 + 56 >> 2];
              b[c2 + 60 >> 2] = b[d2 + 60 >> 2];
              c2 = c2 + 64 | 0;
              d2 = d2 + 64 | 0;
            }
            while ((c2 | 0) < (e2 | 0)) {
              b[c2 >> 2] = b[d2 >> 2];
              c2 = c2 + 4 | 0;
              d2 = d2 + 4 | 0;
            }
          } else {
            e2 = g2 - 4 | 0;
            while ((c2 | 0) < (e2 | 0)) {
              a[c2 >> 0] = a[d2 >> 0] | 0;
              a[c2 + 1 >> 0] = a[d2 + 1 >> 0] | 0;
              a[c2 + 2 >> 0] = a[d2 + 2 >> 0] | 0;
              a[c2 + 3 >> 0] = a[d2 + 3 >> 0] | 0;
              c2 = c2 + 4 | 0;
              d2 = d2 + 4 | 0;
            }
          }
          while ((c2 | 0) < (g2 | 0)) {
            a[c2 >> 0] = a[d2 >> 0] | 0;
            c2 = c2 + 1 | 0;
            d2 = d2 + 1 | 0;
          }
          return h | 0;
        }
        function Xd(c2, d2, e2) {
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h = 0, i = 0;
          h = c2 + e2 | 0;
          d2 = d2 & 255;
          if ((e2 | 0) >= 67) {
            while (c2 & 3) {
              a[c2 >> 0] = d2;
              c2 = c2 + 1 | 0;
            }
            f2 = h & -4 | 0;
            i = d2 | d2 << 8 | d2 << 16 | d2 << 24;
            g2 = f2 - 64 | 0;
            while ((c2 | 0) <= (g2 | 0)) {
              b[c2 >> 2] = i;
              b[c2 + 4 >> 2] = i;
              b[c2 + 8 >> 2] = i;
              b[c2 + 12 >> 2] = i;
              b[c2 + 16 >> 2] = i;
              b[c2 + 20 >> 2] = i;
              b[c2 + 24 >> 2] = i;
              b[c2 + 28 >> 2] = i;
              b[c2 + 32 >> 2] = i;
              b[c2 + 36 >> 2] = i;
              b[c2 + 40 >> 2] = i;
              b[c2 + 44 >> 2] = i;
              b[c2 + 48 >> 2] = i;
              b[c2 + 52 >> 2] = i;
              b[c2 + 56 >> 2] = i;
              b[c2 + 60 >> 2] = i;
              c2 = c2 + 64 | 0;
            }
            while ((c2 | 0) < (f2 | 0)) {
              b[c2 >> 2] = i;
              c2 = c2 + 4 | 0;
            }
          }
          while ((c2 | 0) < (h | 0)) {
            a[c2 >> 0] = d2;
            c2 = c2 + 1 | 0;
          }
          return h - e2 | 0;
        }
        function Yd(a2) {
          a2 = +a2;
          return a2 >= 0 ? +p(a2 + 0.5) : +A(a2 - 0.5);
        }
        function Zd(a2) {
          a2 = a2 | 0;
          var c2 = 0, d2 = 0, e2 = 0;
          e2 = K() | 0;
          d2 = b[g >> 2] | 0;
          c2 = d2 + a2 | 0;
          if ((a2 | 0) > 0 & (c2 | 0) < (d2 | 0) | (c2 | 0) < 0) {
            N(c2 | 0) | 0;
            J(12);
            return -1;
          }
          if ((c2 | 0) > (e2 | 0)) {
            if (!(M(c2 | 0) | 0)) {
              J(12);
              return -1;
            }
          }
          b[g >> 2] = c2;
          return d2 | 0;
        }
        return {
          ___divdi3: Kd,
          ___muldi3: Md,
          ___remdi3: Nd,
          ___uremdi3: Od,
          _areNeighborCells: ib,
          _bitshift64Ashr: Pd,
          _bitshift64Lshr: Qd,
          _bitshift64Shl: Rd,
          _calloc: Fd,
          _cellAreaKm2: xc,
          _cellAreaM2: yc,
          _cellAreaRads2: wc,
          _cellToBoundary: _b2,
          _cellToCenterChild: Kb,
          _cellToChildPos: dc,
          _cellToChildren: Ib,
          _cellToChildrenSize: Gb,
          _cellToLatLng: Zb,
          _cellToLocalIj: Jc,
          _cellToParent: Fb,
          _cellToVertex: qd,
          _cellToVertexes: rd,
          _cellsToDirectedEdge: jb,
          _cellsToLinkedMultiPolygon: na,
          _childPosToCell: ec,
          _compactCells: Lb,
          _destroyLinkedMultiPolygon: Ec,
          _directedEdgeToBoundary: pb,
          _directedEdgeToCells: nb,
          _edgeLengthKm: Ac,
          _edgeLengthM: Bc,
          _edgeLengthRads: zc,
          _emscripten_replace_memory: W,
          _free: Ed,
          _getBaseCellNumber: Cb,
          _getDirectedEdgeDestination: lb,
          _getDirectedEdgeOrigin: kb,
          _getHexagonAreaAvgKm2: qc,
          _getHexagonAreaAvgM2: rc,
          _getHexagonEdgeLengthAvgKm: sc,
          _getHexagonEdgeLengthAvgM: tc,
          _getIcosahedronFaces: ac2,
          _getNumCells: uc,
          _getPentagons: cc2,
          _getRes0Cells: ya,
          _getResolution: Bb,
          _greatCircleDistanceKm: mc,
          _greatCircleDistanceM: nc,
          _greatCircleDistanceRads: lc,
          _gridDisk: aa2,
          _gridDiskDistances: ba,
          _gridDistance: Lc,
          _gridPathCells: Nc,
          _gridPathCellsSize: Mc,
          _gridRing: fa,
          _gridRingUnsafe: ga,
          _i64Add: Gd,
          _i64Subtract: Hd,
          _isPentagon: Hb,
          _isResClassIII: Ob,
          _isValidCell: Db,
          _isValidDirectedEdge: mb,
          _isValidVertex: td,
          _latLngToCell: Wb,
          _llvm_ctlz_i64: Sd,
          _llvm_maxnum_f64: Td,
          _llvm_minnum_f64: Ud,
          _llvm_round_f64: Vd,
          _localIjToCell: Kc,
          _malloc: Dd,
          _maxFaceCount: $b,
          _maxGridDiskSize: $,
          _maxPolygonToCellsSize: ja,
          _maxPolygonToCellsSizeExperimental: Uc,
          _memcpy: Wd,
          _memset: Xd,
          _originToDirectedEdges: ob,
          _pentagonCount: bc4,
          _polygonToCells: la,
          _polygonToCellsExperimental: Tc,
          _readInt64AsDoubleFromPointer: id,
          _res0CellCount: xa,
          _round: Yd,
          _sbrk: Zd,
          _sizeOfCellBoundary: dd,
          _sizeOfCoordIJ: hd,
          _sizeOfGeoLoop: ed,
          _sizeOfGeoPolygon: fd,
          _sizeOfH3Index: bd2,
          _sizeOfLatLng: cd2,
          _sizeOfLinkedGeoPolygon: gd,
          _uncompactCells: Mb,
          _uncompactCellsSize: Nb,
          _vertexToLatLng: sd,
          establishStackSpace: _,
          stackAlloc: X,
          stackRestore: Z,
          stackSave: Y
        };
      }(asmGlobalArg, asmLibraryArg, buffer)
    );
    var ___divdi3 = Module["___divdi3"] = asm["___divdi3"];
    var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
    var ___remdi3 = Module["___remdi3"] = asm["___remdi3"];
    var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
    var _areNeighborCells = Module["_areNeighborCells"] = asm["_areNeighborCells"];
    var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
    var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
    var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
    var _calloc = Module["_calloc"] = asm["_calloc"];
    var _cellAreaKm2 = Module["_cellAreaKm2"] = asm["_cellAreaKm2"];
    var _cellAreaM2 = Module["_cellAreaM2"] = asm["_cellAreaM2"];
    var _cellAreaRads2 = Module["_cellAreaRads2"] = asm["_cellAreaRads2"];
    var _cellToBoundary = Module["_cellToBoundary"] = asm["_cellToBoundary"];
    var _cellToCenterChild = Module["_cellToCenterChild"] = asm["_cellToCenterChild"];
    var _cellToChildPos = Module["_cellToChildPos"] = asm["_cellToChildPos"];
    var _cellToChildren = Module["_cellToChildren"] = asm["_cellToChildren"];
    var _cellToChildrenSize = Module["_cellToChildrenSize"] = asm["_cellToChildrenSize"];
    var _cellToLatLng = Module["_cellToLatLng"] = asm["_cellToLatLng"];
    var _cellToLocalIj = Module["_cellToLocalIj"] = asm["_cellToLocalIj"];
    var _cellToParent = Module["_cellToParent"] = asm["_cellToParent"];
    var _cellToVertex = Module["_cellToVertex"] = asm["_cellToVertex"];
    var _cellToVertexes = Module["_cellToVertexes"] = asm["_cellToVertexes"];
    var _cellsToDirectedEdge = Module["_cellsToDirectedEdge"] = asm["_cellsToDirectedEdge"];
    var _cellsToLinkedMultiPolygon = Module["_cellsToLinkedMultiPolygon"] = asm["_cellsToLinkedMultiPolygon"];
    var _childPosToCell = Module["_childPosToCell"] = asm["_childPosToCell"];
    var _compactCells = Module["_compactCells"] = asm["_compactCells"];
    var _destroyLinkedMultiPolygon = Module["_destroyLinkedMultiPolygon"] = asm["_destroyLinkedMultiPolygon"];
    var _directedEdgeToBoundary = Module["_directedEdgeToBoundary"] = asm["_directedEdgeToBoundary"];
    var _directedEdgeToCells = Module["_directedEdgeToCells"] = asm["_directedEdgeToCells"];
    var _edgeLengthKm = Module["_edgeLengthKm"] = asm["_edgeLengthKm"];
    var _edgeLengthM = Module["_edgeLengthM"] = asm["_edgeLengthM"];
    var _edgeLengthRads = Module["_edgeLengthRads"] = asm["_edgeLengthRads"];
    var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
    var _free = Module["_free"] = asm["_free"];
    var _getBaseCellNumber = Module["_getBaseCellNumber"] = asm["_getBaseCellNumber"];
    var _getDirectedEdgeDestination = Module["_getDirectedEdgeDestination"] = asm["_getDirectedEdgeDestination"];
    var _getDirectedEdgeOrigin = Module["_getDirectedEdgeOrigin"] = asm["_getDirectedEdgeOrigin"];
    var _getHexagonAreaAvgKm2 = Module["_getHexagonAreaAvgKm2"] = asm["_getHexagonAreaAvgKm2"];
    var _getHexagonAreaAvgM2 = Module["_getHexagonAreaAvgM2"] = asm["_getHexagonAreaAvgM2"];
    var _getHexagonEdgeLengthAvgKm = Module["_getHexagonEdgeLengthAvgKm"] = asm["_getHexagonEdgeLengthAvgKm"];
    var _getHexagonEdgeLengthAvgM = Module["_getHexagonEdgeLengthAvgM"] = asm["_getHexagonEdgeLengthAvgM"];
    var _getIcosahedronFaces = Module["_getIcosahedronFaces"] = asm["_getIcosahedronFaces"];
    var _getNumCells = Module["_getNumCells"] = asm["_getNumCells"];
    var _getPentagons = Module["_getPentagons"] = asm["_getPentagons"];
    var _getRes0Cells = Module["_getRes0Cells"] = asm["_getRes0Cells"];
    var _getResolution = Module["_getResolution"] = asm["_getResolution"];
    var _greatCircleDistanceKm = Module["_greatCircleDistanceKm"] = asm["_greatCircleDistanceKm"];
    var _greatCircleDistanceM = Module["_greatCircleDistanceM"] = asm["_greatCircleDistanceM"];
    var _greatCircleDistanceRads = Module["_greatCircleDistanceRads"] = asm["_greatCircleDistanceRads"];
    var _gridDisk = Module["_gridDisk"] = asm["_gridDisk"];
    var _gridDiskDistances = Module["_gridDiskDistances"] = asm["_gridDiskDistances"];
    var _gridDistance = Module["_gridDistance"] = asm["_gridDistance"];
    var _gridPathCells = Module["_gridPathCells"] = asm["_gridPathCells"];
    var _gridPathCellsSize = Module["_gridPathCellsSize"] = asm["_gridPathCellsSize"];
    var _gridRing = Module["_gridRing"] = asm["_gridRing"];
    var _gridRingUnsafe = Module["_gridRingUnsafe"] = asm["_gridRingUnsafe"];
    var _i64Add = Module["_i64Add"] = asm["_i64Add"];
    var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
    var _isPentagon = Module["_isPentagon"] = asm["_isPentagon"];
    var _isResClassIII = Module["_isResClassIII"] = asm["_isResClassIII"];
    var _isValidCell = Module["_isValidCell"] = asm["_isValidCell"];
    var _isValidDirectedEdge = Module["_isValidDirectedEdge"] = asm["_isValidDirectedEdge"];
    var _isValidVertex = Module["_isValidVertex"] = asm["_isValidVertex"];
    var _latLngToCell = Module["_latLngToCell"] = asm["_latLngToCell"];
    var _llvm_ctlz_i64 = Module["_llvm_ctlz_i64"] = asm["_llvm_ctlz_i64"];
    var _llvm_maxnum_f64 = Module["_llvm_maxnum_f64"] = asm["_llvm_maxnum_f64"];
    var _llvm_minnum_f64 = Module["_llvm_minnum_f64"] = asm["_llvm_minnum_f64"];
    var _llvm_round_f64 = Module["_llvm_round_f64"] = asm["_llvm_round_f64"];
    var _localIjToCell = Module["_localIjToCell"] = asm["_localIjToCell"];
    var _malloc = Module["_malloc"] = asm["_malloc"];
    var _maxFaceCount = Module["_maxFaceCount"] = asm["_maxFaceCount"];
    var _maxGridDiskSize = Module["_maxGridDiskSize"] = asm["_maxGridDiskSize"];
    var _maxPolygonToCellsSize = Module["_maxPolygonToCellsSize"] = asm["_maxPolygonToCellsSize"];
    var _maxPolygonToCellsSizeExperimental = Module["_maxPolygonToCellsSizeExperimental"] = asm["_maxPolygonToCellsSizeExperimental"];
    var _memcpy = Module["_memcpy"] = asm["_memcpy"];
    var _memset = Module["_memset"] = asm["_memset"];
    var _originToDirectedEdges = Module["_originToDirectedEdges"] = asm["_originToDirectedEdges"];
    var _pentagonCount = Module["_pentagonCount"] = asm["_pentagonCount"];
    var _polygonToCells = Module["_polygonToCells"] = asm["_polygonToCells"];
    var _polygonToCellsExperimental = Module["_polygonToCellsExperimental"] = asm["_polygonToCellsExperimental"];
    var _readInt64AsDoubleFromPointer = Module["_readInt64AsDoubleFromPointer"] = asm["_readInt64AsDoubleFromPointer"];
    var _res0CellCount = Module["_res0CellCount"] = asm["_res0CellCount"];
    var _round = Module["_round"] = asm["_round"];
    var _sbrk = Module["_sbrk"] = asm["_sbrk"];
    var _sizeOfCellBoundary = Module["_sizeOfCellBoundary"] = asm["_sizeOfCellBoundary"];
    var _sizeOfCoordIJ = Module["_sizeOfCoordIJ"] = asm["_sizeOfCoordIJ"];
    var _sizeOfGeoLoop = Module["_sizeOfGeoLoop"] = asm["_sizeOfGeoLoop"];
    var _sizeOfGeoPolygon = Module["_sizeOfGeoPolygon"] = asm["_sizeOfGeoPolygon"];
    var _sizeOfH3Index = Module["_sizeOfH3Index"] = asm["_sizeOfH3Index"];
    var _sizeOfLatLng = Module["_sizeOfLatLng"] = asm["_sizeOfLatLng"];
    var _sizeOfLinkedGeoPolygon = Module["_sizeOfLinkedGeoPolygon"] = asm["_sizeOfLinkedGeoPolygon"];
    var _uncompactCells = Module["_uncompactCells"] = asm["_uncompactCells"];
    var _uncompactCellsSize = Module["_uncompactCellsSize"] = asm["_uncompactCellsSize"];
    var _vertexToLatLng = Module["_vertexToLatLng"] = asm["_vertexToLatLng"];
    var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
    var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
    var stackRestore = Module["stackRestore"] = asm["stackRestore"];
    var stackSave = Module["stackSave"] = asm["stackSave"];
    Module["asm"] = asm;
    Module["cwrap"] = cwrap;
    Module["setValue"] = setValue;
    Module["getValue"] = getValue;
    if (memoryInitializer) {
      if (!isDataURI(memoryInitializer)) {
        memoryInitializer = locateFile(memoryInitializer);
      }
      if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
        var data = readBinary(memoryInitializer);
        HEAPU8.set(data, GLOBAL_BASE);
      } else {
        addRunDependency("memory initializer");
        var applyMemoryInitializer = function(data2) {
          if (data2.byteLength) {
            data2 = new Uint8Array(data2);
          }
          HEAPU8.set(data2, GLOBAL_BASE);
          if (Module["memoryInitializerRequest"]) {
            delete Module["memoryInitializerRequest"].response;
          }
          removeRunDependency("memory initializer");
        };
        var doBrowserLoad = function() {
          readAsync(memoryInitializer, applyMemoryInitializer, function() {
            throw "could not load memory initializer " + memoryInitializer;
          });
        };
        var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
        if (memoryInitializerBytes) {
          applyMemoryInitializer(memoryInitializerBytes.buffer);
        } else if (Module["memoryInitializerRequest"]) {
          var useRequest = function() {
            var request = Module["memoryInitializerRequest"];
            var response = request.response;
            if (request.status !== 200 && request.status !== 0) {
              var data2 = tryParseAsDataURI(Module["memoryInitializerRequestURL"]);
              if (data2) {
                response = data2.buffer;
              } else {
                console.warn("a problem seems to have happened with Module.memoryInitializerRequest, status: " + request.status + ", retrying " + memoryInitializer);
                doBrowserLoad();
                return;
              }
            }
            applyMemoryInitializer(response);
          };
          if (Module["memoryInitializerRequest"].response) {
            setTimeout(useRequest, 0);
          } else {
            Module["memoryInitializerRequest"].addEventListener("load", useRequest);
          }
        } else {
          doBrowserLoad();
        }
      }
    }
    var calledRun;
    dependenciesFulfilled = function runCaller() {
      if (!calledRun) {
        run();
      }
      if (!calledRun) {
        dependenciesFulfilled = runCaller;
      }
    };
    function run(args) {
      args = args || arguments_;
      if (runDependencies > 0) {
        return;
      }
      preRun();
      if (runDependencies > 0) {
        return;
      }
      function doRun() {
        if (calledRun) {
          return;
        }
        calledRun = true;
        if (ABORT) {
          return;
        }
        initRuntime();
        preMain();
        if (Module["onRuntimeInitialized"]) {
          Module["onRuntimeInitialized"]();
        }
        postRun();
      }
      if (Module["setStatus"]) {
        Module["setStatus"]("Running...");
        setTimeout(function() {
          setTimeout(function() {
            Module["setStatus"]("");
          }, 1);
          doRun();
        }, 1);
      } else {
        doRun();
      }
    }
    Module["run"] = run;
    function abort(what) {
      if (Module["onAbort"]) {
        Module["onAbort"](what);
      }
      what += "";
      out(what);
      err(what);
      ABORT = true;
      throw "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
    }
    Module["abort"] = abort;
    if (Module["preInit"]) {
      if (typeof Module["preInit"] == "function") {
        Module["preInit"] = [Module["preInit"]];
      }
      while (Module["preInit"].length > 0) {
        Module["preInit"].pop()();
      }
    }
    run();
    return libh32;
  }(typeof libh3 === "object" ? libh3 : {});
  var NUMBER = "number";
  var H3_ERROR = NUMBER;
  var BOOLEAN = NUMBER;
  var H3_LOWER = NUMBER;
  var H3_UPPER = NUMBER;
  var RESOLUTION = NUMBER;
  var POINTER = NUMBER;
  var BINDINGS = [
    // The size functions are inserted via build/sizes.h
    ["sizeOfH3Index", NUMBER],
    ["sizeOfLatLng", NUMBER],
    ["sizeOfCellBoundary", NUMBER],
    ["sizeOfGeoLoop", NUMBER],
    ["sizeOfGeoPolygon", NUMBER],
    ["sizeOfLinkedGeoPolygon", NUMBER],
    ["sizeOfCoordIJ", NUMBER],
    ["readInt64AsDoubleFromPointer", NUMBER],
    // The remaining functions are defined in the core lib in h3Api.h
    ["isValidCell", BOOLEAN, [H3_LOWER, H3_UPPER]],
    ["latLngToCell", H3_ERROR, [NUMBER, NUMBER, RESOLUTION, POINTER]],
    ["cellToLatLng", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
    ["cellToBoundary", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
    ["maxGridDiskSize", H3_ERROR, [NUMBER, POINTER]],
    ["gridDisk", H3_ERROR, [H3_LOWER, H3_UPPER, NUMBER, POINTER]],
    ["gridDiskDistances", H3_ERROR, [H3_LOWER, H3_UPPER, NUMBER, POINTER, POINTER]],
    ["gridRing", H3_ERROR, [H3_LOWER, H3_UPPER, NUMBER, POINTER]],
    ["gridRingUnsafe", H3_ERROR, [H3_LOWER, H3_UPPER, NUMBER, POINTER]],
    ["maxPolygonToCellsSize", H3_ERROR, [POINTER, RESOLUTION, NUMBER, POINTER]],
    ["polygonToCells", H3_ERROR, [POINTER, RESOLUTION, NUMBER, POINTER]],
    ["maxPolygonToCellsSizeExperimental", H3_ERROR, [POINTER, RESOLUTION, NUMBER, POINTER]],
    ["polygonToCellsExperimental", H3_ERROR, [POINTER, RESOLUTION, NUMBER, NUMBER, NUMBER, POINTER]],
    ["cellsToLinkedMultiPolygon", H3_ERROR, [POINTER, NUMBER, POINTER]],
    ["destroyLinkedMultiPolygon", null, [POINTER]],
    ["compactCells", H3_ERROR, [POINTER, POINTER, NUMBER, NUMBER]],
    ["uncompactCells", H3_ERROR, [POINTER, NUMBER, NUMBER, POINTER, NUMBER, RESOLUTION]],
    ["uncompactCellsSize", H3_ERROR, [POINTER, NUMBER, NUMBER, RESOLUTION, POINTER]],
    ["isPentagon", BOOLEAN, [H3_LOWER, H3_UPPER]],
    ["isResClassIII", BOOLEAN, [H3_LOWER, H3_UPPER]],
    ["getBaseCellNumber", NUMBER, [H3_LOWER, H3_UPPER]],
    ["getResolution", NUMBER, [H3_LOWER, H3_UPPER]],
    ["maxFaceCount", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
    ["getIcosahedronFaces", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
    ["cellToParent", H3_ERROR, [H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
    ["cellToChildren", H3_ERROR, [H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
    ["cellToCenterChild", H3_ERROR, [H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
    ["cellToChildrenSize", H3_ERROR, [H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
    ["cellToChildPos", H3_ERROR, [H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
    ["childPosToCell", H3_ERROR, [NUMBER, NUMBER, H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
    ["areNeighborCells", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, POINTER]],
    ["cellsToDirectedEdge", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, POINTER]],
    ["getDirectedEdgeOrigin", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
    ["getDirectedEdgeDestination", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
    ["isValidDirectedEdge", BOOLEAN, [H3_LOWER, H3_UPPER]],
    ["directedEdgeToCells", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
    ["originToDirectedEdges", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
    ["directedEdgeToBoundary", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
    ["gridDistance", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, POINTER]],
    ["gridPathCells", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, POINTER]],
    ["gridPathCellsSize", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, POINTER]],
    ["cellToLocalIj", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, NUMBER, POINTER]],
    ["localIjToCell", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER, NUMBER, POINTER]],
    ["getHexagonAreaAvgM2", H3_ERROR, [RESOLUTION, POINTER]],
    ["getHexagonAreaAvgKm2", H3_ERROR, [RESOLUTION, POINTER]],
    ["getHexagonEdgeLengthAvgM", H3_ERROR, [RESOLUTION, POINTER]],
    ["getHexagonEdgeLengthAvgKm", H3_ERROR, [RESOLUTION, POINTER]],
    ["greatCircleDistanceM", NUMBER, [POINTER, POINTER]],
    ["greatCircleDistanceKm", NUMBER, [POINTER, POINTER]],
    ["greatCircleDistanceRads", NUMBER, [POINTER, POINTER]],
    ["cellAreaM2", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
    ["cellAreaKm2", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
    ["cellAreaRads2", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
    ["edgeLengthM", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
    ["edgeLengthKm", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
    ["edgeLengthRads", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
    ["getNumCells", H3_ERROR, [RESOLUTION, POINTER]],
    ["getRes0Cells", H3_ERROR, [POINTER]],
    ["res0CellCount", NUMBER],
    ["getPentagons", H3_ERROR, [NUMBER, POINTER]],
    ["pentagonCount", NUMBER],
    ["cellToVertex", H3_ERROR, [H3_LOWER, H3_UPPER, NUMBER, POINTER]],
    ["cellToVertexes", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
    ["vertexToLatLng", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
    ["isValidVertex", BOOLEAN, [H3_LOWER, H3_UPPER]]
  ];
  var E_SUCCESS = 0;
  var E_FAILED = 1;
  var E_DOMAIN = 2;
  var E_LATLNG_DOMAIN = 3;
  var E_RES_DOMAIN = 4;
  var E_CELL_INVALID = 5;
  var E_DIR_EDGE_INVALID = 6;
  var E_UNDIR_EDGE_INVALID = 7;
  var E_VERTEX_INVALID = 8;
  var E_PENTAGON = 9;
  var E_DUPLICATE_INPUT = 10;
  var E_NOT_NEIGHBORS = 11;
  var E_RES_MISMATCH = 12;
  var E_MEMORY_ALLOC = 13;
  var E_MEMORY_BOUNDS = 14;
  var E_OPTION_INVALID = 15;
  var H3_ERROR_MSGS = {};
  H3_ERROR_MSGS[E_SUCCESS] = "Success";
  H3_ERROR_MSGS[E_FAILED] = "The operation failed but a more specific error is not available";
  H3_ERROR_MSGS[E_DOMAIN] = "Argument was outside of acceptable range";
  H3_ERROR_MSGS[E_LATLNG_DOMAIN] = "Latitude or longitude arguments were outside of acceptable range";
  H3_ERROR_MSGS[E_RES_DOMAIN] = "Resolution argument was outside of acceptable range";
  H3_ERROR_MSGS[E_CELL_INVALID] = "Cell argument was not valid";
  H3_ERROR_MSGS[E_DIR_EDGE_INVALID] = "Directed edge argument was not valid";
  H3_ERROR_MSGS[E_UNDIR_EDGE_INVALID] = "Undirected edge argument was not valid";
  H3_ERROR_MSGS[E_VERTEX_INVALID] = "Vertex argument was not valid";
  H3_ERROR_MSGS[E_PENTAGON] = "Pentagon distortion was encountered";
  H3_ERROR_MSGS[E_DUPLICATE_INPUT] = "Duplicate input";
  H3_ERROR_MSGS[E_NOT_NEIGHBORS] = "Cell arguments were not neighbors";
  H3_ERROR_MSGS[E_RES_MISMATCH] = "Cell arguments had incompatible resolutions";
  H3_ERROR_MSGS[E_MEMORY_ALLOC] = "Memory allocation failed";
  H3_ERROR_MSGS[E_MEMORY_BOUNDS] = "Bounds of provided memory were insufficient";
  H3_ERROR_MSGS[E_OPTION_INVALID] = "Mode or flags argument was not valid";
  var E_UNKNOWN_UNIT = 1e3;
  var E_ARRAY_LENGTH = 1001;
  var E_NULL_INDEX = 1002;
  var JS_ERROR_MESSAGES = {};
  JS_ERROR_MESSAGES[E_UNKNOWN_UNIT] = "Unknown unit";
  JS_ERROR_MESSAGES[E_ARRAY_LENGTH] = "Array length out of bounds";
  JS_ERROR_MESSAGES[E_NULL_INDEX] = "Got unexpected null value for H3 index";
  var UNKNOWN_ERROR_MSG = "Unknown error";
  function createError(messages, errCode, meta) {
    var hasValue = meta && "value" in meta;
    var err = new Error((messages[errCode] || UNKNOWN_ERROR_MSG) + " (code: " + errCode + (hasValue ? ", value: " + meta.value : "") + ")");
    err.code = errCode;
    return err;
  }
  function H3LibraryError(errCode, value) {
    var meta = arguments.length === 2 ? {
      value
    } : {};
    return createError(H3_ERROR_MSGS, errCode, meta);
  }
  function JSBindingError(errCode, value) {
    var meta = arguments.length === 2 ? {
      value
    } : {};
    return createError(JS_ERROR_MESSAGES, errCode, meta);
  }
  function throwIfError(errCode) {
    if (errCode !== 0) {
      throw H3LibraryError(errCode);
    }
  }
  var H3 = {};
  BINDINGS.forEach(function bind(def) {
    H3[def[0]] = libh3.cwrap.apply(libh3, def);
  });
  var BASE_16 = 16;
  var SZ_INT = 4;
  var SZ_DBL = 8;
  var SZ_INT64 = 8;
  var SZ_H3INDEX = H3.sizeOfH3Index();
  var SZ_LATLNG = H3.sizeOfLatLng();
  var SZ_CELLBOUNDARY = H3.sizeOfCellBoundary();
  var SZ_GEOPOLYGON = H3.sizeOfGeoPolygon();
  var SZ_GEOLOOP = H3.sizeOfGeoLoop();
  var SZ_LINKED_GEOPOLYGON = H3.sizeOfLinkedGeoPolygon();
  var SZ_COORDIJ = H3.sizeOfCoordIJ();
  function validateRes(res) {
    if (typeof res !== "number" || res < 0 || res > 15 || Math.floor(res) !== res) {
      throw H3LibraryError(E_RES_DOMAIN, res);
    }
    return res;
  }
  var MAX_JS_ARRAY_LENGTH = Math.pow(2, 32) - 1;
  function validateArrayLength(length2) {
    if (length2 > MAX_JS_ARRAY_LENGTH) {
      throw JSBindingError(E_ARRAY_LENGTH, length2);
    }
    return length2;
  }
  var INVALID_HEXIDECIMAL_CHAR = /[^0-9a-fA-F]/;
  function h3IndexToSplitLong(h3Index) {
    if (Array.isArray(h3Index) && h3Index.length === 2 && Number.isInteger(h3Index[0]) && Number.isInteger(h3Index[1])) {
      return h3Index;
    }
    if (typeof h3Index !== "string" || INVALID_HEXIDECIMAL_CHAR.test(h3Index)) {
      return [0, 0];
    }
    var upper = parseInt(h3Index.substring(0, h3Index.length - 8), BASE_16);
    var lower = parseInt(h3Index.substring(h3Index.length - 8), BASE_16);
    return [lower, upper];
  }
  function hexFrom32Bit(num) {
    if (num >= 0) {
      return num.toString(BASE_16);
    }
    num = num & 2147483647;
    var tempStr = zeroPad(8, num.toString(BASE_16));
    var topNum = (parseInt(tempStr[0], BASE_16) + 8).toString(BASE_16);
    tempStr = topNum + tempStr.substring(1);
    return tempStr;
  }
  function splitLongToH3Index(lower, upper) {
    return hexFrom32Bit(upper) + zeroPad(8, hexFrom32Bit(lower));
  }
  function zeroPad(fullLen, numStr) {
    var numZeroes = fullLen - numStr.length;
    var outStr = "";
    for (var i = 0; i < numZeroes; i++) {
      outStr += "0";
    }
    outStr = outStr + numStr;
    return outStr;
  }
  var UPPER_BIT_DIVISOR = Math.pow(2, 32);
  function polygonArrayToGeoLoop(polygonArray, geoLoop, isGeoJson) {
    var numVerts = polygonArray.length;
    var geoCoordArray = libh3._calloc(numVerts, SZ_LATLNG);
    var latIndex = isGeoJson ? 1 : 0;
    var lngIndex = isGeoJson ? 0 : 1;
    for (var i = 0; i < numVerts * 2; i += 2) {
      libh3.HEAPF64.set([polygonArray[i / 2][latIndex], polygonArray[i / 2][lngIndex]].map(degsToRads), geoCoordArray / SZ_DBL + i);
    }
    libh3.HEAPU32.set([numVerts, geoCoordArray], geoLoop / SZ_INT);
    return geoLoop;
  }
  function coordinatesToGeoPolygon(coordinates, isGeoJson) {
    var numHoles = coordinates.length - 1;
    var geoPolygon = libh3._calloc(SZ_GEOPOLYGON);
    var geoLoopOffset = 0;
    var numHolesOffset = geoLoopOffset + SZ_GEOLOOP;
    var holesOffset = numHolesOffset + SZ_INT;
    polygonArrayToGeoLoop(coordinates[0], geoPolygon + geoLoopOffset, isGeoJson);
    var holes;
    if (numHoles > 0) {
      holes = libh3._calloc(numHoles, SZ_GEOLOOP);
      for (var i = 0; i < numHoles; i++) {
        polygonArrayToGeoLoop(coordinates[i + 1], holes + SZ_GEOLOOP * i, isGeoJson);
      }
    }
    libh3.setValue(geoPolygon + numHolesOffset, numHoles, "i32");
    libh3.setValue(geoPolygon + holesOffset, holes, "i32");
    return geoPolygon;
  }
  function destroyGeoPolygon(geoPolygon) {
    var geoLoopOffset = 0;
    var numHolesOffset = geoLoopOffset + SZ_GEOLOOP;
    var holesOffset = numHolesOffset + SZ_INT;
    var geoLoopArrayOffset = SZ_INT;
    libh3._free(libh3.getValue(geoPolygon + geoLoopOffset + geoLoopArrayOffset, "i8*"));
    var numHoles = libh3.getValue(geoPolygon + numHolesOffset, "i32");
    if (numHoles > 0) {
      var holes = libh3.getValue(geoPolygon + holesOffset, "i32");
      for (var i = 0; i < numHoles; i++) {
        libh3._free(libh3.getValue(holes + SZ_GEOLOOP * i + geoLoopArrayOffset, "i8*"));
      }
      libh3._free(holes);
    }
    libh3._free(geoPolygon);
  }
  function readH3IndexFromPointer(cAddress, offset) {
    if (offset === void 0) offset = 0;
    var lower = libh3.getValue(cAddress + SZ_H3INDEX * offset, "i32");
    var upper = libh3.getValue(cAddress + SZ_H3INDEX * offset + SZ_INT, "i32");
    return upper ? splitLongToH3Index(lower, upper) : null;
  }
  function readInt64AsDoubleFromPointer(cAddress) {
    return H3.readInt64AsDoubleFromPointer(cAddress);
  }
  function readArrayOfH3Indexes(cAddress, maxCount) {
    var out = [];
    for (var i = 0; i < maxCount; i++) {
      var h3Index = readH3IndexFromPointer(cAddress, i);
      if (h3Index !== null) {
        out.push(h3Index);
      }
    }
    return out;
  }
  function getResolution2(h3Index) {
    var ref = h3IndexToSplitLong(h3Index);
    var lower = ref[0];
    var upper = ref[1];
    if (!H3.isValidCell(lower, upper)) {
      return -1;
    }
    return H3.getResolution(lower, upper);
  }
  function polygonToCells(coordinates, res, isGeoJson) {
    validateRes(res);
    isGeoJson = Boolean(isGeoJson);
    if (coordinates.length === 0 || coordinates[0].length === 0) {
      return [];
    }
    var polygon2 = typeof coordinates[0][0] === "number" ? [coordinates] : coordinates;
    var geoPolygon = coordinatesToGeoPolygon(
      // @ts-expect-error - There's no way to convince TS that polygon is now number[][][]
      polygon2,
      isGeoJson
    );
    var countPtr = libh3._malloc(SZ_INT64);
    try {
      throwIfError(H3.maxPolygonToCellsSize(geoPolygon, res, 0, countPtr));
      var count = validateArrayLength(readInt64AsDoubleFromPointer(countPtr));
      var hexagons = libh3._calloc(count, SZ_H3INDEX);
      try {
        throwIfError(H3.polygonToCells(geoPolygon, res, 0, hexagons));
        return readArrayOfH3Indexes(hexagons, count);
      } finally {
        libh3._free(hexagons);
      }
    } finally {
      libh3._free(countPtr);
      destroyGeoPolygon(geoPolygon);
    }
  }
  function degsToRads(deg) {
    return deg * Math.PI / 180;
  }

  // node_modules/@turf/bbox-clip/dist/esm/index.js
  function lineclip(points, bbox2, result) {
    var len = points.length, codeA = bitCode(points[0], bbox2), part = [], i, codeB, lastCode;
    let a;
    let b;
    if (!result) result = [];
    for (i = 1; i < len; i++) {
      a = points[i - 1];
      b = points[i];
      codeB = lastCode = bitCode(b, bbox2);
      while (true) {
        if (!(codeA | codeB)) {
          part.push(a);
          if (codeB !== lastCode) {
            part.push(b);
            if (i < len - 1) {
              result.push(part);
              part = [];
            }
          } else if (i === len - 1) {
            part.push(b);
          }
          break;
        } else if (codeA & codeB) {
          break;
        } else if (codeA) {
          a = intersect2(a, b, codeA, bbox2);
          codeA = bitCode(a, bbox2);
        } else {
          b = intersect2(a, b, codeB, bbox2);
          codeB = bitCode(b, bbox2);
        }
      }
      codeA = lastCode;
    }
    if (part.length) result.push(part);
    return result;
  }
  function polygonclip(points, bbox2) {
    var result, edge, prev, prevInside, i, p, inside;
    for (edge = 1; edge <= 8; edge *= 2) {
      result = [];
      prev = points[points.length - 1];
      prevInside = !(bitCode(prev, bbox2) & edge);
      for (i = 0; i < points.length; i++) {
        p = points[i];
        inside = !(bitCode(p, bbox2) & edge);
        if (inside !== prevInside) result.push(intersect2(prev, p, edge, bbox2));
        if (inside) result.push(p);
        prev = p;
        prevInside = inside;
      }
      points = result;
      if (!points.length) break;
    }
    return result;
  }
  function intersect2(a, b, edge, bbox2) {
    return edge & 8 ? [a[0] + (b[0] - a[0]) * (bbox2[3] - a[1]) / (b[1] - a[1]), bbox2[3]] : edge & 4 ? [a[0] + (b[0] - a[0]) * (bbox2[1] - a[1]) / (b[1] - a[1]), bbox2[1]] : edge & 2 ? [bbox2[2], a[1] + (b[1] - a[1]) * (bbox2[2] - a[0]) / (b[0] - a[0])] : edge & 1 ? [bbox2[0], a[1] + (b[1] - a[1]) * (bbox2[0] - a[0]) / (b[0] - a[0])] : null;
  }
  function bitCode(p, bbox2) {
    var code = 0;
    if (p[0] < bbox2[0]) code |= 1;
    else if (p[0] > bbox2[2]) code |= 2;
    if (p[1] < bbox2[1]) code |= 4;
    else if (p[1] > bbox2[3]) code |= 8;
    return code;
  }
  function bboxClip(feature2, bbox2) {
    const geom = getGeom(feature2);
    const type = geom.type;
    const properties = feature2.type === "Feature" ? feature2.properties : {};
    let coords = geom.coordinates;
    switch (type) {
      case "LineString":
      case "MultiLineString": {
        const lines = [];
        if (type === "LineString") {
          coords = [coords];
        }
        coords.forEach((line) => {
          lineclip(line, bbox2, lines);
        });
        if (lines.length === 1) {
          return lineString(lines[0], properties);
        }
        return multiLineString(lines, properties);
      }
      case "Polygon":
        return polygon(clipPolygon(coords, bbox2), properties);
      case "MultiPolygon":
        return multiPolygon(
          coords.map((poly) => {
            return clipPolygon(poly, bbox2);
          }),
          properties
        );
      default:
        throw new Error("geometry " + type + " not supported");
    }
  }
  function clipPolygon(rings, bbox2) {
    const outRings = [];
    for (const ring of rings) {
      const clipped = polygonclip(ring, bbox2);
      if (clipped.length > 0) {
        if (clipped[0][0] !== clipped[clipped.length - 1][0] || clipped[0][1] !== clipped[clipped.length - 1][1]) {
          clipped.push(clipped[0]);
        }
        if (clipped.length >= 4) {
          outRings.push(clipped);
        }
      }
    }
    return outRings;
  }
  var turf_bbox_clip_default = bboxClip;

  // src/filters/tileIntersection.ts
  function intersectTileGeometry(tileBbox, tileFormat, spatialFilter) {
    const tilePolygon = turf_bbox_polygon_default(tileBbox);
    if (!spatialFilter || turf_boolean_within_default(tilePolygon, spatialFilter)) {
      return true;
    }
    const clippedSpatialFilter = turf_intersect_default(
      featureCollection([tilePolygon, feature(spatialFilter)])
    );
    if (!clippedSpatialFilter) {
      return false;
    }
    return tileFormat === "mvt" /* MVT */ ? transformToTileCoords(clippedSpatialFilter.geometry, tileBbox) : clippedSpatialFilter.geometry;
  }
  function intersectTileRaster(parent, cellResolution, spatialFilter) {
    return intersectTileQuadbin(parent, cellResolution, spatialFilter);
  }
  function intersectTileQuadbin(parent, cellResolution, spatialFilter) {
    const tilePolygon = cellToBoundary(parent);
    if (!spatialFilter || turf_boolean_within_default(tilePolygon, spatialFilter)) {
      return true;
    }
    const clippedSpatialFilter = turf_intersect_default(
      featureCollection([feature(tilePolygon), feature(spatialFilter)])
    );
    if (!clippedSpatialFilter) {
      return false;
    }
    const cells = geometryToCells(
      clippedSpatialFilter.geometry,
      cellResolution
    );
    return new Set(cells);
  }
  var BBOX_WEST = [-180, -90, 0, 90];
  var BBOX_EAST = [0, -90, 180, 90];
  function intersectTileH3(cellResolution, spatialFilter) {
    if (!spatialFilter) {
      return true;
    }
    const spatialFilterFeature = feature(spatialFilter);
    const cellsWest = polygonToCells(
      turf_bbox_clip_default(spatialFilterFeature, BBOX_WEST).geometry.coordinates,
      cellResolution,
      true
    );
    const cellsEast = polygonToCells(
      turf_bbox_clip_default(spatialFilterFeature, BBOX_EAST).geometry.coordinates,
      cellResolution,
      true
    );
    return new Set(cellsWest.concat(cellsEast));
  }

  // src/filters/tileFeaturesGeometries.ts
  var FEATURE_GEOM_PROPERTY = "__geomValue";
  function tileFeaturesGeometries({
    tiles: tiles2,
    tileFormat,
    spatialFilter,
    uniqueIdProperty,
    options
  }) {
    const map = /* @__PURE__ */ new Map();
    for (const tile of tiles2) {
      if (tile.isVisible === false || !tile.data) {
        continue;
      }
      const tileBbox = [
        tile.bbox.west,
        tile.bbox.south,
        tile.bbox.east,
        tile.bbox.north
      ];
      const intersection3 = intersectTileGeometry(
        tileBbox,
        tileFormat,
        spatialFilter
      );
      if (intersection3 === false) continue;
      const transformedSpatialFilter = intersection3 === true ? void 0 : intersection3;
      calculateFeatures({
        map,
        spatialFilter: transformedSpatialFilter,
        data: tile.data.points,
        type: "Point",
        bbox: tileBbox,
        tileFormat,
        uniqueIdProperty,
        options
      });
      calculateFeatures({
        map,
        spatialFilter: transformedSpatialFilter,
        data: tile.data.lines,
        type: "LineString",
        bbox: tileBbox,
        tileFormat,
        uniqueIdProperty,
        options
      });
      calculateFeatures({
        map,
        spatialFilter: transformedSpatialFilter,
        data: tile.data.polygons,
        type: "Polygon",
        bbox: tileBbox,
        tileFormat,
        uniqueIdProperty,
        options
      });
    }
    return Array.from(map.values());
  }
  function processTileFeatureProperties({
    map,
    data,
    startIndex,
    endIndex,
    type,
    bbox: bbox2,
    tileFormat,
    uniqueIdProperty,
    storeGeometry,
    spatialFilter
  }) {
    const tileProps = getPropertiesFromTile(data, startIndex);
    const uniquePropertyValue = getUniquePropertyValue(
      tileProps,
      uniqueIdProperty,
      map
    );
    if (!uniquePropertyValue || map.has(uniquePropertyValue)) {
      return;
    }
    let geometry = null;
    if (storeGeometry || spatialFilter) {
      const { positions } = data;
      const ringCoordinates = getRingCoordinatesFor(
        startIndex,
        endIndex,
        positions
      );
      geometry = getFeatureByType(ringCoordinates, type);
    }
    if (geometry && spatialFilter && !turf_boolean_intersects_default(geometry, spatialFilter)) {
      return;
    }
    const properties = parseProperties(tileProps);
    if (storeGeometry && geometry) {
      properties[FEATURE_GEOM_PROPERTY] = tileFormat === "mvt" /* MVT */ ? transformTileCoordsToWGS84(geometry, bbox2) : geometry;
    }
    map.set(uniquePropertyValue, properties);
  }
  function addIntersectedFeaturesInTile({
    map,
    data,
    spatialFilter,
    type,
    bbox: bbox2,
    tileFormat,
    uniqueIdProperty,
    options
  }) {
    const indices = getIndices(data, type);
    const storeGeometry = options?.storeGeometry || false;
    for (let i = 0; i < indices.length - 1; i++) {
      const startIndex = indices[i];
      const endIndex = indices[i + 1];
      processTileFeatureProperties({
        map,
        data,
        startIndex,
        endIndex,
        type,
        bbox: bbox2,
        tileFormat,
        uniqueIdProperty,
        storeGeometry,
        spatialFilter
      });
    }
  }
  function getIndices(data, type) {
    let indices;
    switch (type) {
      case "Polygon":
        indices = data.primitivePolygonIndices;
        break;
      case "LineString":
        indices = data.pathIndices;
        break;
      case "Point":
        indices = createIndicesForPoints(data);
        break;
      default:
        throw new Error(
          `Unsupported geometry type: ${type}`
        );
    }
    return indices.value;
  }
  function getFeatureId(data, startIndex) {
    return data.featureIds.value[startIndex];
  }
  function getPropertiesFromTile(data, startIndex) {
    const featureId2 = getFeatureId(data, startIndex);
    const { properties, numericProps, fields } = data;
    const result = {
      uniqueId: fields?.[featureId2]?.id,
      properties: properties[featureId2],
      numericProps: {}
    };
    for (const key in numericProps) {
      result.numericProps[key] = numericProps[key].value[startIndex];
    }
    return result;
  }
  function parseProperties(tileProps) {
    const { properties, numericProps } = tileProps;
    return Object.assign({}, properties, numericProps);
  }
  function getUniquePropertyValue(tileProps, uniqueIdProperty, map) {
    if (uniqueIdProperty) {
      return getValueFromTileProps(tileProps, uniqueIdProperty);
    }
    if (tileProps.uniqueId) {
      return tileProps.uniqueId;
    }
    const artificialId = map.size + 1;
    return getValueFromTileProps(tileProps, "cartodb_id") || getValueFromTileProps(tileProps, "geoid") || artificialId;
  }
  function getValueFromTileProps(tileProps, propertyName) {
    const { properties, numericProps } = tileProps;
    return numericProps[propertyName] || properties[propertyName];
  }
  function getFeatureByType(coordinates, type) {
    switch (type) {
      case "Polygon":
        return { type: "Polygon", coordinates: [coordinates] };
      case "LineString":
        return { type: "LineString", coordinates };
      case "Point":
        return { type: "Point", coordinates: coordinates[0] };
      default:
        throw new Error("Invalid geometry type");
    }
  }
  function getRingCoordinatesFor(startIndex, endIndex, positions) {
    const ringCoordinates = [];
    for (let j = startIndex; j < endIndex; j++) {
      ringCoordinates.push(
        Array.from(
          positions.value.subarray(j * positions.size, (j + 1) * positions.size)
        )
      );
    }
    return ringCoordinates;
  }
  function calculateFeatures({
    map,
    spatialFilter,
    data,
    type,
    bbox: bbox2,
    tileFormat,
    uniqueIdProperty,
    options
  }) {
    if (!data?.properties.length) {
      return;
    }
    if (!spatialFilter) {
      addAllFeaturesInTile({
        map,
        data,
        type,
        bbox: bbox2,
        tileFormat,
        uniqueIdProperty,
        options
      });
    } else {
      addIntersectedFeaturesInTile({
        map,
        data,
        spatialFilter,
        type,
        bbox: bbox2,
        tileFormat,
        uniqueIdProperty,
        options
      });
    }
  }
  function addAllFeaturesInTile({
    map,
    data,
    type,
    bbox: bbox2,
    tileFormat,
    uniqueIdProperty,
    options
  }) {
    const indices = getIndices(data, type);
    const storeGeometry = options?.storeGeometry || false;
    for (let i = 0; i < indices.length - 1; i++) {
      const startIndex = indices[i];
      const endIndex = indices[i + 1];
      processTileFeatureProperties({
        map,
        data,
        startIndex,
        endIndex,
        type,
        bbox: bbox2,
        tileFormat,
        uniqueIdProperty,
        storeGeometry
      });
    }
  }
  function createIndicesForPoints(data) {
    const featureIds = data.featureIds.value;
    const lastFeatureId = featureIds[featureIds.length - 1];
    const PointIndicesArray = featureIds.constructor;
    const pointIndices = {
      value: new PointIndicesArray(featureIds.length + 1),
      size: 1
    };
    pointIndices.value.set(featureIds);
    pointIndices.value.set([lastFeatureId + 1], featureIds.length);
    return pointIndices;
  }

  // src/filters/tileFeaturesSpatialIndex.ts
  function tileFeaturesSpatialIndex({
    tiles: tiles2,
    spatialFilter,
    spatialDataColumn,
    spatialDataType
  }) {
    const map = /* @__PURE__ */ new Map();
    const spatialIndex = getSpatialIndex(spatialDataType);
    const cellResolution = getResolution3(tiles2, spatialIndex);
    const spatialIndexIDName = spatialDataColumn ? spatialDataColumn : spatialIndex;
    if (!cellResolution) {
      return [];
    }
    let intersection3;
    if (spatialIndex === "h3" /* H3 */) {
      intersection3 = intersectTileH3(cellResolution, spatialFilter);
    }
    for (const tile of tiles2) {
      if (tile.isVisible === false || !tile.data) {
        continue;
      }
      if (spatialIndex === "quadbin" /* QUADBIN */) {
        const parent = getTileIndex(tile, spatialIndex);
        intersection3 = intersectTileQuadbin(
          parent,
          cellResolution,
          spatialFilter
        );
      }
      if (!intersection3) continue;
      tile.data.forEach((d) => {
        if (intersection3 === true || intersection3.has(d.id)) {
          map.set(d.id, { ...d.properties, [spatialIndexIDName]: d.id });
        }
      });
    }
    return Array.from(map.values());
  }
  function getTileIndex(tile, spatialIndex) {
    if (spatialIndex === "quadbin" /* QUADBIN */) {
      return tile.index.q;
    }
    return tile.id;
  }
  function getResolution3(tiles2, spatialIndex) {
    const data = tiles2.find((tile) => tile.data?.length)?.data;
    if (!data) {
      return;
    }
    if (spatialIndex === "quadbin" /* QUADBIN */) {
      return Number(getResolution(data[0].id));
    }
    if (spatialIndex === "h3" /* H3 */) {
      return getResolution2(data[0].id);
    }
  }
  function getSpatialIndex(spatialDataType) {
    switch (spatialDataType) {
      case "h3":
        return "h3" /* H3 */;
      case "quadbin":
        return "quadbin" /* QUADBIN */;
      default:
        throw new Error("Unexpected spatial data type");
    }
  }

  // src/constants-internal.ts
  var DEFAULT_GEO_COLUMN = "geom";
  var DEFAULT_AGGREGATION_EXP_ALIAS = "__aggregationValue";
  var DEFAULT_AGGREGATION_EXP = `1 AS ${DEFAULT_AGGREGATION_EXP_ALIAS}`;

  // src/filters/tileFeaturesRaster.ts
  function tileFeaturesRaster({
    tiles: tiles2,
    ...options
  }) {
    const metadataByBand = {};
    for (const band of options.rasterMetadata.bands) {
      metadataByBand[band.name] = { ...band, nodata: Number(band.nodata) };
    }
    tiles2 = tiles2.filter(isRasterTileVisible);
    if (tiles2.length === 0) return [];
    const tileResolution = getResolution(tiles2[0].index.q);
    const tileBlockSize = tiles2[0].data.blockSize;
    const cellResolution = tileResolution + BigInt(Math.log2(tileBlockSize));
    const data = /* @__PURE__ */ new Map();
    for (const tile of tiles2) {
      const parent = tile.index.q;
      const intersection3 = intersectTileRaster(
        parent,
        cellResolution,
        options.spatialFilter
      );
      if (intersection3 === false) continue;
      const tileSortedCells = cellToChildrenRaster(parent, cellResolution);
      for (let i = 0; i < tileSortedCells.length; i++) {
        if (intersection3 !== true && !intersection3.has(tileSortedCells[i])) {
          continue;
        }
        const cellData = {};
        let cellDataExists = false;
        for (const band in tile.data.cells.numericProps) {
          const value = tile.data.cells.numericProps[band].value[i];
          const bandMetadata = metadataByBand[band];
          if (isValidBandValue(value, bandMetadata.nodata)) {
            cellData[band] = tile.data.cells.numericProps[band].value[i];
            cellDataExists = true;
          }
        }
        if (cellDataExists) {
          data.set(tileSortedCells[i], cellData);
        }
      }
    }
    return Array.from(data.values());
  }
  function isRasterTile(tile) {
    return !!tile.data?.cells;
  }
  function isRasterTileVisible(tile) {
    return !!(tile.isVisible && tile.data?.cells?.numericProps);
  }
  function cellToChildrenRaster(parent, resolution) {
    const parentTile = cellToTile(parent);
    const childZ = Number(resolution);
    const blockSize = 2 ** (childZ - parentTile.z);
    const childBaseX = parentTile.x * blockSize;
    const childBaseY = parentTile.y * blockSize;
    const cells = [];
    for (let i = 0, il = blockSize ** 2; i < il; i++) {
      const x = childBaseX + i % blockSize;
      const y = childBaseY + Math.floor(i / blockSize);
      cells.push(tileToCell({ x, y, z: childZ }));
    }
    return cells;
  }
  function isValidBandValue(value, nodata) {
    return Number.isNaN(value) ? false : nodata !== value;
  }

  // src/filters/tileFeatures.ts
  function tileFeatures({
    tiles: tiles2,
    spatialFilter,
    uniqueIdProperty,
    tileFormat,
    spatialDataColumn = DEFAULT_GEO_COLUMN,
    spatialDataType,
    rasterMetadata,
    storeGeometry = false
  }) {
    if (spatialDataType === "geo") {
      return tileFeaturesGeometries({
        tiles: tiles2,
        tileFormat,
        spatialFilter,
        uniqueIdProperty,
        options: { storeGeometry }
      });
    }
    if (tiles2.some(isRasterTile)) {
      assert(rasterMetadata, "Missing raster metadata");
      return tileFeaturesRaster({
        tiles: tiles2,
        spatialFilter,
        spatialDataColumn,
        spatialDataType,
        rasterMetadata
      });
    }
    return tileFeaturesSpatialIndex({
      tiles: tiles2,
      spatialFilter,
      spatialDataColumn,
      spatialDataType
    });
  }

  // src/operations/aggregation.ts
  var aggregationFunctions = {
    count: (values) => values.length,
    min: (...args) => applyAggregationFunction(min, ...args),
    max: (...args) => applyAggregationFunction(max, ...args),
    sum: (...args) => applyAggregationFunction(sum2, ...args),
    avg: (...args) => applyAggregationFunction(avg, ...args)
  };
  function aggregate(feature2, keys, operation2) {
    if (!keys?.length) {
      throw new Error("Cannot aggregate a feature without having keys");
    } else if (keys.length === 1) {
      const value = feature2[keys[0]];
      return isPotentiallyValidNumber(value) ? Number(value) : value;
    }
    const aggregationFn = aggregationFunctions[operation2];
    if (!aggregationFn) {
      throw new Error(`${operation2} isn't a valid aggregation function`);
    }
    return aggregationFn(
      keys.map((column) => {
        const value = feature2[column];
        return isPotentiallyValidNumber(value) ? Number(value) : value;
      })
    );
  }
  function isPotentiallyValidNumber(value) {
    return typeof value === "string" && value.trim().length > 0;
  }
  var applyAggregationFunction = (aggFn, values, keys, operation2) => {
    const normalizedKeys = normalizeKeys(keys);
    const elements = (normalizedKeys?.length || 0) <= 1 ? filterFalsyElements(values, normalizedKeys || []) : values;
    return aggFn(elements, keys, operation2);
  };
  function filterFalsyElements(values, keys) {
    const filterFn = (value) => value !== null && value !== void 0;
    if (!keys?.length) {
      return values.filter(filterFn);
    }
    return values.filter((v2) => filterFn(v2[keys[0]]));
  }
  function avg(values, keys, joinOperation) {
    return sum2(values, keys, joinOperation) / (values.length || 1);
  }
  function sum2(values, keys, joinOperation) {
    const normalizedKeys = normalizeKeys(keys);
    if (normalizedKeys) {
      return values.reduce(
        (a, b) => a + aggregate(b, normalizedKeys, joinOperation),
        0
      );
    }
    return values.reduce((a, b) => a + b, 0);
  }
  function min(values, keys, joinOperation) {
    const normalizedKeys = normalizeKeys(keys);
    if (normalizedKeys) {
      return values.reduce(
        (a, b) => Math.min(a, aggregate(b, normalizedKeys, joinOperation)),
        Infinity
      );
    }
    let min2 = Number.POSITIVE_INFINITY;
    for (const value of values) {
      min2 = Math.min(min2, value);
    }
    return min2;
  }
  function max(values, keys, joinOperation) {
    const normalizedKeys = normalizeKeys(keys);
    if (normalizedKeys) {
      return values.reduce(
        (a, b) => Math.max(a, aggregate(b, normalizedKeys, joinOperation)),
        -Infinity
      );
    }
    let max2 = Number.NEGATIVE_INFINITY;
    for (const value of values) {
      max2 = Math.max(max2, value);
    }
    return max2;
  }
  function normalizeKeys(keys) {
    return Array.isArray(keys) ? keys : typeof keys === "string" ? [keys] : void 0;
  }

  // src/operations/applySorting.ts
  var import_thenby = __toESM(require_thenBy_module(), 1);
  function applySorting(features, {
    sortBy,
    sortByDirection = "asc",
    sortByColumnType = "string"
  } = {}) {
    if (sortBy === void 0) {
      return features;
    }
    const isValidSortBy = Array.isArray(sortBy) && sortBy.length || // sortBy can be an array of columns
    typeof sortBy === "string";
    if (!isValidSortBy) {
      throw new Error("Sorting options are bad formatted");
    }
    const sortFn = createSortFn({
      sortBy,
      sortByDirection,
      sortByColumnType: sortByColumnType || "string"
    });
    return features.sort(sortFn);
  }
  function createSortFn({
    sortBy,
    sortByDirection,
    sortByColumnType
  }) {
    const [firstSortOption, ...othersSortOptions] = normalizeSortByOptions({
      sortBy,
      sortByDirection,
      sortByColumnType
    });
    let sortFn = (0, import_thenby.firstBy)(...firstSortOption);
    for (const sortOptions of othersSortOptions) {
      sortFn = sortFn.thenBy(...sortOptions);
    }
    return sortFn;
  }
  function normalizeSortByOptions({
    sortBy,
    sortByDirection,
    sortByColumnType
  }) {
    const numberFormat = sortByColumnType === "number" && {
      cmp: (a, b) => a - b
    };
    if (!Array.isArray(sortBy)) {
      sortBy = [sortBy];
    }
    return sortBy.map((sortByEl) => {
      if (typeof sortByEl === "string") {
        return [sortByEl, { direction: sortByDirection, ...numberFormat }];
      }
      if (Array.isArray(sortByEl)) {
        if (sortByEl[1] === void 0) {
          return [sortByEl, { direction: sortByDirection, ...numberFormat }];
        }
        if (typeof sortByEl[1] === "object") {
          const othersSortOptions = numberFormat ? { ...numberFormat, ...sortByEl[1] } : sortByEl[1];
          return [
            sortByEl[0],
            { direction: sortByDirection, ...othersSortOptions }
          ];
        }
      }
      return sortByEl;
    });
  }

  // src/operations/groupBy.ts
  function groupValuesByColumn({
    data,
    valuesColumns,
    joinOperation,
    keysColumn,
    operation: operation2,
    othersThreshold,
    orderBy = "frequency_desc"
  }) {
    if (Array.isArray(data) && data.length === 0) {
      return { rows: null };
    }
    const groups = data.reduce((accumulator, item) => {
      const group = item[keysColumn];
      const values = accumulator.get(group) || [];
      accumulator.set(group, values);
      const aggregatedValue = aggregate(item, valuesColumns, joinOperation);
      const isValid = (operation2 === "count" ? true : aggregatedValue !== null) && aggregatedValue !== void 0;
      if (isValid) {
        values.push(aggregatedValue);
        accumulator.set(group, values);
      }
      return accumulator;
    }, /* @__PURE__ */ new Map());
    const targetOperation = aggregationFunctions[operation2];
    if (!targetOperation) {
      return { rows: [] };
    }
    const allCategories = Array.from(groups).map(([name, value]) => ({
      name,
      value: targetOperation(value)
    })).sort(getSorter(orderBy));
    if (othersThreshold && allCategories.length > othersThreshold) {
      const otherValue = allCategories.slice(othersThreshold).flatMap(({ name }) => groups.get(name));
      return {
        rows: allCategories,
        metadata: {
          others: targetOperation(otherValue)
        }
      };
    }
    return {
      rows: allCategories
    };
  }
  function getSorter(orderBy) {
    switch (orderBy) {
      case "frequency_asc":
        return (a, b) => a.value - b.value || nameCompare(a.name, b.name);
      case "frequency_desc":
        return (a, b) => b.value - a.value || nameCompare(a.name, b.name);
      case "alphabetical_asc":
        return (a, b) => nameCompare(a.name, b.name) || b.value - a.value;
      case "alphabetical_desc":
        return (a, b) => nameCompare(b.name, a.name) || b.value - a.value;
    }
  }
  function nameCompare(a, b) {
    if (typeof a === "number" && typeof b === "number") {
      return a - b;
    }
    return String(a ?? "null").localeCompare(String(b ?? "null"));
  }

  // src/utils/dateUtils.ts
  function getUTCMonday(date) {
    const dateCp = new Date(date);
    const day = dateCp.getUTCDay();
    const diff = dateCp.getUTCDate() - day + (day ? 1 : -6);
    dateCp.setUTCDate(diff);
    return Date.UTC(
      dateCp.getUTCFullYear(),
      dateCp.getUTCMonth(),
      dateCp.getUTCDate()
    );
  }

  // src/operations/groupByDate.ts
  var GROUP_KEY_FN_MAPPING = {
    year: (date) => Date.UTC(date.getUTCFullYear()),
    month: (date) => Date.UTC(date.getUTCFullYear(), date.getUTCMonth()),
    week: (date) => getUTCMonday(date),
    day: (date) => Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()),
    hour: (date) => Date.UTC(
      date.getUTCFullYear(),
      date.getUTCMonth(),
      date.getUTCDate(),
      date.getUTCHours()
    ),
    minute: (date) => Date.UTC(
      date.getUTCFullYear(),
      date.getUTCMonth(),
      date.getUTCDate(),
      date.getUTCHours(),
      date.getUTCMinutes()
    ),
    second: (date) => Date.UTC(
      date.getUTCFullYear(),
      date.getUTCMonth(),
      date.getUTCDate(),
      date.getUTCHours(),
      date.getUTCMinutes(),
      date.getUTCSeconds()
    )
  };
  function groupValuesByDateColumn({
    data,
    valuesColumns,
    joinOperation,
    keysColumn,
    groupType,
    operation: operation2
  }) {
    if (Array.isArray(data) && data.length === 0) {
      return null;
    }
    const groupKeyFn = GROUP_KEY_FN_MAPPING[groupType];
    if (!groupKeyFn) {
      return null;
    }
    const groups = data.reduce((acc, item) => {
      const value = item[keysColumn];
      const formattedValue = new Date(value);
      const groupKey = groupKeyFn(formattedValue);
      if (!isNaN(groupKey)) {
        let groupedValues = acc.get(groupKey);
        if (!groupedValues) {
          groupedValues = [];
          acc.set(groupKey, groupedValues);
        }
        const aggregatedValue = aggregate(item, valuesColumns, joinOperation);
        const isValid = aggregatedValue !== null && aggregatedValue !== void 0;
        if (isValid) {
          groupedValues.push(aggregatedValue);
          acc.set(groupKey, groupedValues);
        }
      }
      return acc;
    }, /* @__PURE__ */ new Map());
    const targetOperation = aggregationFunctions[operation2];
    return [...groups.entries()].map(([name, value]) => ({
      name,
      value: targetOperation(value)
    })).sort((a, b) => a.name - b.name);
  }

  // src/operations/histogram.ts
  function histogram({
    data,
    valuesColumns,
    joinOperation,
    ticks,
    operation: operation2
  }) {
    if (Array.isArray(data) && data.length === 0) {
      return [];
    }
    const binsContainer = [Number.MIN_SAFE_INTEGER, ...ticks].map(
      (tick, index, arr) => ({
        bin: index,
        start: tick,
        end: index === arr.length - 1 ? Number.MAX_SAFE_INTEGER : arr[index + 1],
        values: []
      })
    );
    data.forEach((feature2) => {
      const featureValue = aggregate(
        feature2,
        valuesColumns,
        joinOperation
      );
      const isValid = featureValue !== null && featureValue !== void 0;
      if (!isValid) {
        return;
      }
      const binContainer = binsContainer.find(
        (bin) => bin.start <= featureValue && bin.end > featureValue
      );
      if (!binContainer) {
        return;
      }
      binContainer.values.push(featureValue);
    });
    const targetOperation = aggregationFunctions[operation2];
    const transformedBins = binsContainer.map(
      (binContainer) => binContainer.values
    );
    return transformedBins.map(
      (values) => values.length ? targetOperation(values) : 0
    );
  }

  // src/operations/scatterPlot.ts
  function scatterPlot({
    data,
    xAxisColumns,
    xAxisJoinOperation,
    yAxisColumns,
    yAxisJoinOperation
  }) {
    return data.reduce(
      (acc, feature2) => {
        const xValue = aggregate(
          feature2,
          xAxisColumns,
          xAxisJoinOperation
        );
        const xIsValid = xValue !== null && xValue !== void 0;
        const yValue = aggregate(
          feature2,
          yAxisColumns,
          yAxisJoinOperation
        );
        const yIsValid = yValue !== null && yValue !== void 0;
        if (xIsValid && yIsValid) {
          acc.push([xValue, yValue]);
        }
        return acc;
      },
      []
    );
  }

  // src/client.ts
  var client = "deck-gl-carto";
  function getClient() {
    return client;
  }

  // src/widget-sources/widget-source.ts
  var _WidgetSource = class _WidgetSource {
    constructor(props) {
      __publicField(this, "props");
      this.props = {
        ..._WidgetSource.defaultProps,
        clientId: getClient(),
        // Refresh clientId, default may have changed.
        ...props
      };
    }
    /**
     * Destroys the widget source and releases allocated resources.
     *
     * For remote sources (tables, queries) this has no effect, but for local
     * sources (tilesets, rasters) these resources will affect performance
     * and stability if many (10+) sources are created and not released.
     */
    destroy() {
    }
  };
  __publicField(_WidgetSource, "defaultProps", {
    apiVersion: "v3" /* V3 */,
    apiBaseUrl: DEFAULT_API_BASE_URL,
    clientId: getClient(),
    filters: {},
    filtersLogicalOperator: "and"
  });
  var WidgetSource = _WidgetSource;

  // node_modules/geojson-equality-ts/dist/esm/index.js
  var __defProp2 = Object.defineProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var _GeojsonEquality = class _GeojsonEquality2 {
    constructor(opts) {
      this.direction = false;
      this.compareProperties = true;
      var _a2, _b2, _c;
      this.precision = 10 ** -((_a2 = opts == null ? void 0 : opts.precision) != null ? _a2 : 17);
      this.direction = (_b2 = opts == null ? void 0 : opts.direction) != null ? _b2 : false;
      this.compareProperties = (_c = opts == null ? void 0 : opts.compareProperties) != null ? _c : true;
    }
    compare(g1, g2) {
      if (g1.type !== g2.type) {
        return false;
      }
      if (!sameLength(g1, g2)) {
        return false;
      }
      switch (g1.type) {
        case "Point":
          return this.compareCoord(g1.coordinates, g2.coordinates);
        case "LineString":
          return this.compareLine(g1.coordinates, g2.coordinates);
        case "Polygon":
          return this.comparePolygon(g1, g2);
        case "GeometryCollection":
          return this.compareGeometryCollection(g1, g2);
        case "Feature":
          return this.compareFeature(g1, g2);
        case "FeatureCollection":
          return this.compareFeatureCollection(g1, g2);
        default:
          if (g1.type.startsWith("Multi")) {
            const g1s = explode(g1);
            const g2s = explode(
              g2
            );
            return g1s.every(
              (g1part) => g2s.some((g2part) => this.compare(g1part, g2part))
            );
          }
      }
      return false;
    }
    compareCoord(c1, c2) {
      return c1.length === c2.length && c1.every((c, i) => Math.abs(c - c2[i]) < this.precision);
    }
    compareLine(path1, path2, ind = 0, isPoly = false) {
      if (!sameLength(path1, path2)) {
        return false;
      }
      const p1 = path1;
      let p2 = path2;
      if (isPoly && !this.compareCoord(p1[0], p2[0])) {
        const startIndex = this.fixStartIndex(p2, p1);
        if (!startIndex) {
          return false;
        } else {
          p2 = startIndex;
        }
      }
      const sameDirection = this.compareCoord(p1[ind], p2[ind]);
      if (this.direction || sameDirection) {
        return this.comparePath(p1, p2);
      } else {
        if (this.compareCoord(p1[ind], p2[p2.length - (1 + ind)])) {
          return this.comparePath(p1.slice().reverse(), p2);
        }
        return false;
      }
    }
    fixStartIndex(sourcePath, targetPath) {
      let correctPath, ind = -1;
      for (let i = 0; i < sourcePath.length; i++) {
        if (this.compareCoord(sourcePath[i], targetPath[0])) {
          ind = i;
          break;
        }
      }
      if (ind >= 0) {
        correctPath = [].concat(
          sourcePath.slice(ind, sourcePath.length),
          sourcePath.slice(1, ind + 1)
        );
      }
      return correctPath;
    }
    comparePath(p1, p2) {
      return p1.every((c, i) => this.compareCoord(c, p2[i]));
    }
    comparePolygon(g1, g2) {
      if (this.compareLine(g1.coordinates[0], g2.coordinates[0], 1, true)) {
        const holes1 = g1.coordinates.slice(1, g1.coordinates.length);
        const holes2 = g2.coordinates.slice(1, g2.coordinates.length);
        return holes1.every(
          (h1) => holes2.some((h2) => this.compareLine(h1, h2, 1, true))
        );
      }
      return false;
    }
    compareGeometryCollection(g1, g2) {
      return sameLength(g1.geometries, g2.geometries) && this.compareBBox(g1, g2) && g1.geometries.every((g, i) => this.compare(g, g2.geometries[i]));
    }
    compareFeature(g1, g2) {
      return g1.id === g2.id && (this.compareProperties ? equal(g1.properties, g2.properties) : true) && this.compareBBox(g1, g2) && this.compare(g1.geometry, g2.geometry);
    }
    compareFeatureCollection(g1, g2) {
      return sameLength(g1.features, g2.features) && this.compareBBox(g1, g2) && g1.features.every((f, i) => this.compare(f, g2.features[i]));
    }
    compareBBox(g1, g2) {
      return Boolean(!g1.bbox && !g2.bbox) || (g1.bbox && g2.bbox ? this.compareCoord(g1.bbox, g2.bbox) : false);
    }
  };
  __name(_GeojsonEquality, "GeojsonEquality");
  var GeojsonEquality = _GeojsonEquality;
  function sameLength(g1, g2) {
    return g1.coordinates ? g1.coordinates.length === g2.coordinates.length : g1.length === g2.length;
  }
  __name(sameLength, "sameLength");
  function explode(g) {
    return g.coordinates.map((part) => ({
      type: g.type.replace("Multi", ""),
      coordinates: part
    }));
  }
  __name(explode, "explode");
  function geojsonEquality(g1, g2, opts) {
    const eq = new GeojsonEquality(opts);
    return eq.compare(g1, g2);
  }
  __name(geojsonEquality, "geojsonEquality");
  function equal(object1, object2) {
    if (object1 === null && object2 === null) {
      return true;
    }
    if (object1 === null || object2 === null) {
      return false;
    }
    const objKeys1 = Object.keys(object1);
    const objKeys2 = Object.keys(object2);
    if (objKeys1.length !== objKeys2.length) return false;
    for (var key of objKeys1) {
      const value1 = object1[key];
      const value2 = object2[key];
      const isObjects = isObject2(value1) && isObject2(value2);
      if (isObjects && !equal(value1, value2) || !isObjects && value1 !== value2) {
        return false;
      }
    }
    return true;
  }
  __name(equal, "equal");
  var isObject2 = /* @__PURE__ */ __name((object) => {
    return object != null && typeof object === "object";
  }, "isObject");

  // node_modules/@turf/clean-coords/dist/esm/index.js
  function cleanCoords(geojson, options = {}) {
    var mutate = typeof options === "object" ? options.mutate : options;
    if (!geojson) throw new Error("geojson is required");
    var type = getType(geojson);
    var newCoords = [];
    switch (type) {
      case "LineString":
        newCoords = cleanLine(geojson, type);
        break;
      case "MultiLineString":
      case "Polygon":
        getCoords(geojson).forEach(function(line) {
          newCoords.push(cleanLine(line, type));
        });
        break;
      case "MultiPolygon":
        getCoords(geojson).forEach(function(polygons) {
          var polyPoints = [];
          polygons.forEach(function(ring) {
            polyPoints.push(cleanLine(ring, type));
          });
          newCoords.push(polyPoints);
        });
        break;
      case "Point":
        return geojson;
      case "MultiPoint":
        var existing = {};
        getCoords(geojson).forEach(function(coord) {
          var key = coord.join("-");
          if (!Object.prototype.hasOwnProperty.call(existing, key)) {
            newCoords.push(coord);
            existing[key] = true;
          }
        });
        break;
      default:
        throw new Error(type + " geometry not supported");
    }
    if (geojson.coordinates) {
      if (mutate === true) {
        geojson.coordinates = newCoords;
        return geojson;
      }
      return { type, coordinates: newCoords };
    } else {
      if (mutate === true) {
        geojson.geometry.coordinates = newCoords;
        return geojson;
      }
      return feature({ type, coordinates: newCoords }, geojson.properties, {
        bbox: geojson.bbox,
        id: geojson.id
      });
    }
  }
  function cleanLine(line, type) {
    var points = getCoords(line);
    if (points.length === 2 && !equals2(points[0], points[1])) return points;
    var newPoints = [];
    var secondToLast = points.length - 1;
    var newPointsLength = newPoints.length;
    newPoints.push(points[0]);
    for (var i = 1; i < secondToLast; i++) {
      var prevAddedPoint = newPoints[newPoints.length - 1];
      if (points[i][0] === prevAddedPoint[0] && points[i][1] === prevAddedPoint[1])
        continue;
      else {
        newPoints.push(points[i]);
        newPointsLength = newPoints.length;
        if (newPointsLength > 2) {
          if (isPointOnLineSegment3(
            newPoints[newPointsLength - 3],
            newPoints[newPointsLength - 1],
            newPoints[newPointsLength - 2]
          ))
            newPoints.splice(newPoints.length - 2, 1);
        }
      }
    }
    newPoints.push(points[points.length - 1]);
    newPointsLength = newPoints.length;
    if ((type === "Polygon" || type === "MultiPolygon") && equals2(points[0], points[points.length - 1]) && newPointsLength < 4) {
      throw new Error("invalid polygon");
    }
    if (type === "LineString" && newPointsLength < 3) {
      return newPoints;
    }
    if (isPointOnLineSegment3(
      newPoints[newPointsLength - 3],
      newPoints[newPointsLength - 1],
      newPoints[newPointsLength - 2]
    ))
      newPoints.splice(newPoints.length - 2, 1);
    return newPoints;
  }
  function equals2(pt1, pt2) {
    return pt1[0] === pt2[0] && pt1[1] === pt2[1];
  }
  function isPointOnLineSegment3(start, end, point2) {
    var x = point2[0], y = point2[1];
    var startX = start[0], startY = start[1];
    var endX = end[0], endY = end[1];
    var dxc = x - startX;
    var dyc = y - startY;
    var dxl = endX - startX;
    var dyl = endY - startY;
    var cross = dxc * dyl - dyc * dxl;
    if (cross !== 0) return false;
    else if (Math.abs(dxl) >= Math.abs(dyl))
      return dxl > 0 ? startX <= x && x <= endX : endX <= x && x <= startX;
    else return dyl > 0 ? startY <= y && y <= endY : endY <= y && y <= startY;
  }

  // node_modules/@turf/boolean-equal/dist/esm/index.js
  function booleanEqual(feature1, feature2, options = {}) {
    let precision2 = options.precision;
    precision2 = precision2 === void 0 || precision2 === null || isNaN(precision2) ? 6 : precision2;
    if (typeof precision2 !== "number" || !(precision2 >= 0)) {
      throw new Error("precision must be a positive number");
    }
    const type1 = getGeom(feature1).type;
    const type2 = getGeom(feature2).type;
    if (type1 !== type2) return false;
    return geojsonEquality(cleanCoords(feature1), cleanCoords(feature2), {
      precision: precision2
    });
  }

  // src/filters.ts
  var FILTER_TYPES2 = new Set(Object.values(FilterType));
  var isFilterType = (type) => FILTER_TYPES2.has(type);
  function getApplicableFilters(owner, filters) {
    if (!filters) return {};
    const applicableFilters = {};
    for (const column in filters) {
      for (const type in filters[column]) {
        if (!isFilterType(type)) continue;
        const filter = filters[column][type];
        const isApplicable = !owner || !filter?.owner || filter?.owner !== owner;
        if (filter && isApplicable) {
          applicableFilters[column] || (applicableFilters[column] = {});
          applicableFilters[column][type] = filter;
        }
      }
    }
    return applicableFilters;
  }

  // src/widget-sources/constants.ts
  var OTHERS_CATEGORY_NAME = "_carto_others";

  // src/widget-sources/widget-tileset-source-impl.ts
  var WidgetTilesetSourceImpl = class extends WidgetSource {
    constructor() {
      super(...arguments);
      __publicField(this, "_tiles", []);
      __publicField(this, "_features", []);
      __publicField(this, "_tileFeatureExtractOptions", {});
      __publicField(this, "_tileFeatureExtractPreviousInputs", {});
    }
    /**
     * Loads features as a list of tiles (typically provided by deck.gl).
     * After tiles are loaded, {@link extractTileFeatures} must be called
     * before computing statistics on the tiles.
     */
    loadTiles(tiles2) {
      this._tiles = tiles2;
      this._features.length = 0;
    }
    /** Configures options used to extract features from tiles. */
    setTileFeatureExtractOptions(options) {
      this._tileFeatureExtractOptions = options;
      this._features.length = 0;
    }
    _extractTileFeatures(spatialFilter) {
      const prevInputs = this._tileFeatureExtractPreviousInputs;
      if (this._features.length && spatialFilterEquals(prevInputs.spatialFilter, spatialFilter)) {
        return;
      }
      this._features = tileFeatures({
        ...assignOptional({}, this.props, this._tileFeatureExtractOptions),
        tiles: this._tiles,
        spatialFilter
      });
      prevInputs.spatialFilter = spatialFilter;
    }
    /**
     * Loads features as GeoJSON (used for testing).
     * @experimental
     * @internal Not for public use. Spatial filters in other method calls will be ignored.
     */
    loadGeoJSON({
      geojson,
      spatialFilter
    }) {
      this._features = geojsonFeatures({
        geojson,
        spatialFilter,
        ...this._tileFeatureExtractOptions
      });
      this._tileFeatureExtractPreviousInputs.spatialFilter = spatialFilter;
    }
    async getFeatures() {
      throw new Error("getFeatures not supported for tilesets");
    }
    async getFormula({
      column = "*",
      operation: operation2 = AggregationTypes.Count,
      joinOperation,
      filters,
      filterOwner,
      spatialFilter
    }) {
      const filteredFeatures = this._getFilteredFeatures(
        spatialFilter,
        filters,
        filterOwner
      );
      if (filteredFeatures.length === 0 && operation2 !== AggregationTypes.Count) {
        return { value: null };
      }
      if (operation2 === AggregationTypes.Custom) {
        throw new Error("Custom aggregation not supported for tilesets");
      }
      if (column && column !== "*" || operation2 !== AggregationTypes.Count) {
        assertColumn(this._features, column);
      }
      const targetOperation = aggregationFunctions[operation2];
      assert(targetOperation, `Unsupported aggregation operation: ${operation2}`);
      return {
        value: targetOperation(filteredFeatures, column, joinOperation)
      };
    }
    async getHistogram({
      operation: operation2 = AggregationTypes.Count,
      ticks,
      column,
      joinOperation,
      filters,
      filterOwner,
      spatialFilter
    }) {
      const filteredFeatures = this._getFilteredFeatures(
        spatialFilter,
        filters,
        filterOwner
      );
      if (!this._features.length) {
        return [];
      }
      assertColumn(this._features, column);
      return histogram({
        data: filteredFeatures,
        valuesColumns: normalizeColumns(column),
        joinOperation,
        ticks,
        operation: operation2
      });
    }
    async getCategories({
      column,
      operation: operation2 = AggregationTypes.Count,
      operationColumn,
      joinOperation,
      filters,
      filterOwner,
      spatialFilter,
      othersThreshold,
      orderBy = "frequency_desc",
      rawResult
    }) {
      const filteredFeatures = this._getFilteredFeatures(
        spatialFilter,
        filters,
        filterOwner
      );
      if (!filteredFeatures.length) {
        return [];
      }
      assertColumn(this._features, column, operationColumn);
      const result = groupValuesByColumn({
        data: filteredFeatures,
        valuesColumns: normalizeColumns(operationColumn || column),
        joinOperation,
        keysColumn: column,
        operation: operation2,
        othersThreshold,
        orderBy
      });
      if (rawResult) {
        return result;
      }
      if (!othersThreshold) {
        return result?.rows || [];
      }
      return [
        ...result?.rows || [],
        { name: OTHERS_CATEGORY_NAME, value: result?.metadata?.others }
      ];
    }
    async getScatter({
      xAxisColumn,
      yAxisColumn,
      xAxisJoinOperation,
      yAxisJoinOperation,
      filters,
      filterOwner,
      spatialFilter
    }) {
      const filteredFeatures = this._getFilteredFeatures(
        spatialFilter,
        filters,
        filterOwner
      );
      if (!filteredFeatures.length) {
        return [];
      }
      assertColumn(this._features, xAxisColumn, yAxisColumn);
      return scatterPlot({
        data: filteredFeatures,
        xAxisColumns: normalizeColumns(xAxisColumn),
        xAxisJoinOperation,
        yAxisColumns: normalizeColumns(yAxisColumn),
        yAxisJoinOperation
      });
    }
    async getTable({
      columns,
      searchFilterColumn,
      searchFilterText,
      sortBy,
      sortDirection,
      sortByColumnType,
      offset = 0,
      limit = 10,
      filters,
      filterOwner,
      spatialFilter
    }) {
      let filteredFeatures = this._getFilteredFeatures(
        spatialFilter,
        filters,
        filterOwner
      );
      if (!filteredFeatures.length) {
        return { rows: [], totalCount: 0 };
      }
      if (searchFilterColumn && searchFilterText) {
        console.warn(
          'WidgetTilesetSource: "searchFilterText" is deprecated, use "filters" and FilterType.STRING_SEARCH instead.'
        );
        filteredFeatures = filteredFeatures.filter(
          (row) => row[searchFilterColumn] && String(row[searchFilterColumn]).toLowerCase().includes(String(searchFilterText).toLowerCase())
        );
      }
      let rows = applySorting(filteredFeatures, {
        sortBy,
        sortByDirection: sortDirection,
        sortByColumnType
      });
      const totalCount = rows.length;
      rows = rows.slice(
        Math.min(offset, totalCount),
        Math.min(offset + limit, totalCount)
      );
      rows = rows.map((srcRow) => {
        const dstRow = {};
        for (const column of columns) {
          dstRow[column] = srcRow[column];
        }
        return dstRow;
      });
      return { rows, totalCount };
    }
    async getTimeSeries({
      column,
      stepSize,
      operation: operation2,
      operationColumn,
      joinOperation,
      filters,
      filterOwner,
      spatialFilter
    }) {
      const filteredFeatures = this._getFilteredFeatures(
        spatialFilter,
        filters,
        filterOwner
      );
      if (!filteredFeatures.length) {
        return { rows: [] };
      }
      assertColumn(this._features, column, operationColumn);
      assert(
        operation2 !== "custom",
        "Custom operation not supported for tilesets"
      );
      const rows = groupValuesByDateColumn({
        data: filteredFeatures,
        valuesColumns: normalizeColumns(operationColumn || column),
        keysColumn: column,
        groupType: stepSize,
        operation: operation2,
        joinOperation
      }) || [];
      return { rows };
    }
    async getRange({
      column,
      filters,
      filterOwner,
      spatialFilter
    }) {
      const filteredFeatures = this._getFilteredFeatures(
        spatialFilter,
        filters,
        filterOwner
      );
      if (!this._features.length) {
        return null;
      }
      assertColumn(this._features, column);
      return {
        min: aggregationFunctions.min(filteredFeatures, column),
        max: aggregationFunctions.max(filteredFeatures, column)
      };
    }
    async getAggregations({
      aggregations,
      filters,
      filterOwner,
      spatialFilter
    }) {
      const filteredFeatures = this._getFilteredFeatures(
        spatialFilter,
        filters,
        filterOwner
      );
      if (!this._features.length) {
        return { rows: [] };
      }
      assert(
        typeof aggregations !== "string",
        "Unsupported tileset SQL aggregation"
      );
      const result = {};
      const usedAliases = /* @__PURE__ */ new Set();
      for (const { column, operation: operation2, alias } of aggregations) {
        if (column && column !== "*" || operation2 !== AggregationTypes.Count) {
          assertColumn(this._features, column);
        }
        const aliasKey = alias.toLowerCase();
        assert(!usedAliases.has(aliasKey), `Duplicate alias: ${aliasKey}`);
        usedAliases.add(aliasKey);
        const targetOperation = aggregationFunctions[operation2];
        assert(targetOperation, `Unsupported operation: ${operation2}`);
        result[alias] = targetOperation(filteredFeatures, column);
      }
      return { rows: [result] };
    }
    /** @experimental */
    async getExtent() {
      return Promise.reject(new Error("not implemented"));
    }
    /****************************************************************************
     * INTERNAL
     */
    _getFilteredFeatures(spatialFilter, filters, filterOwner) {
      this._extractTileFeatures(spatialFilter);
      return applyFilters(
        this._features,
        getApplicableFilters(filterOwner, filters || this.props.filters),
        this.props.filtersLogicalOperator || "and"
      );
    }
  };
  function assertColumn(features, ...columnArgs) {
    const columns = Array.from(new Set(columnArgs.map(normalizeColumns).flat()));
    const featureKeys = Object.keys(features[0]);
    const invalidColumns = columns.filter(
      (column) => column && !featureKeys.includes(column)
    );
    if (invalidColumns.length) {
      throw new InvalidColumnError(
        `Missing column(s): ${invalidColumns.join(", ")}`
      );
    }
  }
  function normalizeColumns(columns) {
    return Array.isArray(columns) ? columns : typeof columns === "string" ? [columns] : [];
  }
  function spatialFilterEquals(a, b) {
    if (a === b) return true;
    if (!a || !b) return false;
    return booleanEqual(a, b);
  }

  // src/workers/widget-tileset-worker.ts
  var source;
  addEventListener("message", (e) => {
    const { method, params, requestId } = e.data;
    if (method === "init" /* INIT */) {
      source = new WidgetTilesetSourceImpl({
        ...params[0],
        widgetWorker: false
      });
      return;
    }
    if (!source) {
      const error = `Cannot execute "${method}" on uninitialized source.`;
      postMessage({ ok: false, error, requestId });
      return;
    }
    Promise.resolve(source[method](...params)).then((result) => {
      postMessage({ ok: true, result, requestId });
    }).catch((error) => {
      postMessage({ ok: false, error, requestId });
    });
  });
})();
//# sourceMappingURL=worker-compat.js.map